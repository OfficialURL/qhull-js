
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 62120;

assert(STATICTOP < TOTAL_MEMORY);

var _stdout;
var _stdin;
var _stderr;














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate(116, "i8", ALLOC_NONE, 5242880);
allocate(4, "i8", ALLOC_NONE, 5242996);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5243000);
allocate(3932, "i8", ALLOC_NONE, 5243004);
allocate(2340, "i8", ALLOC_NONE, 5246936);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5249276);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5249300);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5249324);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5249348);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5249372);
allocate(24, "i8", ALLOC_NONE, 5249396);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,112,111,105,110,116,32,102,111,114,32,81,86,37,100,32,105,115,32,105,110,115,105,100,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,46,32,32,73,116,32,99,97,110,32,110,111,116,32,98,101,32,109,97,100,101,32,97,32,118,101,114,116,101,120,46,10,0] /* qhull input error: p */, "i8", ALLOC_NONE, 5249420);
allocate([113,104,95,110,101,105,103,104,98,111,114,95,105,110,116,101,114,115,101,99,116,105,111,110,115,58,32,37,100,32,118,101,114,116,105,99,101,115,32,105,110,32,110,101,105,103,104,98,111,114,32,105,110,116,101,114,115,101,99,116,105,111,110,32,111,102,32,118,37,100,10,0] /* qh_neighbor_intersec */, "i8", ALLOC_NONE, 5249512);
allocate([84,111,116,97,108,0] /* Total\00 */, "i8", ALLOC_NONE, 5249584);
allocate([32,116,101,115,116,101,100,0] /*  tested\00 */, "i8", ALLOC_NONE, 5249592);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5249600);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,39,32,40,79,78,76,89,103,111,111,100,41,32,110,101,101,100,115,32,97,32,103,111,111,100,32,116,104,114,101,115,104,111,108,100,40,39,80,100,48,68,48,39,41,44,32,97,10,103,111,111,100,32,112,111,105,110,116,40,81,71,110,32,111,114,32,81,71,45,110,41,44,32,111,114,32,97,32,103,111,111,100,32,118,101,114,116,101,120,32,119,105,116,104,32,39,81,74,39,32,111,114,32,39,81,48,39,32,40,81,86,110,41,46,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5249640);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,118,101,114,116,105,99,101,115,41,58,32,102,97,99,101,116,115,32,100,105,100,32,110,111,116,32,115,104,97,114,101,32,97,32,114,105,100,103,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5249780);
allocate([65,112,112,114,111,120,105,109,97,116,101,0] /* Approximate\00 */, "i8", ALLOC_NONE, 5249852);
allocate([32,110,101,119,0] /*  new\00 */, "i8", ALLOC_NONE, 5249864);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* distance tests for c */, "i8", ALLOC_NONE, 5249872);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,99,104,101,99,107,32,97,110,100,32,117,112,100,97,116,101,32,109,97,120,111,117,116,115,105,100,101,32,102,111,114,32,101,97,99,104,32,102,97,99,101,116,46,10,0] /* qh_check_maxout: che */, "i8", ALLOC_NONE, 5249916);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,32,81,86,110,39,32,40,111,110,108,121,32,103,111,111,100,32,118,101,114,116,101,120,41,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,105,116,104,32,109,101,114,103,105,110,103,46,10,85,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,111,114,32,39,81,48,39,32,116,111,32,116,117,114,110,32,111,102,102,32,109,101,114,103,105,110,103,46,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5249980);
allocate([84,82,65,67,69,0] /* TRACE\00 */, "i8", ALLOC_NONE, 5250116);
allocate([32,32,37,115,32,102,97,99,101,116,32,97,114,101,97,58,32,32,32,37,50,46,56,103,10,0] /*   %s facet area:   % */, "i8", ALLOC_NONE, 5250124);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,41,58,32,113,104,32,110,117,109,95,118,105,115,105,98,108,101,32,37,100,32,105,115,32,110,111,116,32,110,117,109,98,101,114,32,111,102,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5250152);
allocate([32,118,105,115,105,98,108,101,0] /*  visible\00 */, "i8", ALLOC_NONE, 5250248);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,112,97,114,116,105,116,105,111,110,105,110,103,0] /* distance tests for p */, "i8", ALLOC_NONE, 5250260);
allocate([79,112,116,105,111,110,115,32,115,101,108,101,99,116,101,100,32,102,111,114,32,81,104,117,108,108,32,37,115,58,10,37,115,10,0] /* Options selected for */, "i8", ALLOC_NONE, 5250292);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,32,102,48,61,32,37,112,10,0] /* qh_mergevertex_neigh */, "i8", ALLOC_NONE, 5250328);
allocate([32,32,73,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0] /*   Input joggled by:  */, "i8", ALLOC_NONE, 5250396);
allocate([32,117,112,112,101,114,68,101,108,97,117,110,97,121,0] /*  upperDelaunay\00 */, "i8", ALLOC_NONE, 5250424);
allocate([112,97,114,116,105,116,105,111,110,115,32,111,102,32,97,32,112,111,105,110,116,0] /* partitions of a poin */, "i8", ALLOC_NONE, 5250440);
allocate([10,84,114,97,99,101,32,108,101,118,101,108,32,37,100,32,102,111,114,32,37,115,32,124,32,37,115,10,0] /* \0ATrace level %d fo */, "i8", ALLOC_NONE, 5250464);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergevertex_neigh */, "i8", ALLOC_NONE, 5250496);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d free */, "i8", ALLOC_NONE, 5250564);
allocate([32,32,65,102,116,101,114,32,37,100,32,114,101,116,114,105,101,115,44,32,105,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0] /*   After %d retries,  */, "i8", ALLOC_NONE, 5250620);
allocate([32,116,114,105,99,111,112,108,97,110,97,114,0] /*  tricoplanar\00 */, "i8", ALLOC_NONE, 5250668);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,112,97,114,116,105,116,105,111,110,0] /* distance tests for i */, "i8", ALLOC_NONE, 5250684);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,101,105,116,104,101,114,32,81,71,110,32,111,114,32,81,86,110,32,112,111,105,110,116,32,105,115,32,62,32,112,37,100,10,0] /* qhull input error: e */, "i8", ALLOC_NONE, 5250724);
allocate([95,111,110,101,45,109,101,114,103,101,0] /* _one-merge\00 */, "i8", ALLOC_NONE, 5250780);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,100,101,108,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergevertex_del:  */, "i8", ALLOC_NONE, 5250792);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,37,100,32,97,116,116,101,109,112,116,115,32,116,111,32,99,111,110,115,116,114,117,99,116,32,97,32,99,111,110,118,101,120,32,104,117,108,108,10,32,32,32,32,32,32,32,32,119,105,116,104,32,106,111,103,103,108,101,100,32,105,110,112,117,116,46,32,32,73,110,99,114,101,97,115,101,32,106,111,103,103,108,101,32,97,98,111,118,101,32,39,81,74,37,50,46,50,103,39,10,32,32,32,32,32,32,32,32,111,114,32,109,111,100,105,102,121,32,113,104,95,74,79,71,71,76,69,46,46,46,32,112,97,114,97,109,101,116,101,114,115,32,105,110,32,117,115,101,114,46,104,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5250852);
allocate([32,32,80,101,114,99,101,110,116,97,103,101,32,111,102,32,114,117,110,115,32,119,105,116,104,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,58,32,37,52,46,49,102,10,0] /*   Percentage of runs */, "i8", ALLOC_NONE, 5251028);
allocate([32,115,105,109,112,108,105,99,105,97,108,0] /*  simplicial\00 */, "i8", ALLOC_NONE, 5251080);
allocate([100,105,102,102,101,114,101,110,99,101,32,105,110,32,109,97,120,95,111,117,116,115,105,100,101,32,97,116,32,102,105,110,97,108,32,99,104,101,99,107,0] /* difference in max_ou */, "i8", ALLOC_NONE, 5251092);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,105,110,102,105,110,105,116,101,108,111,111,112,41,58,32,112,111,116,101,110,116,105,97,108,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,100,101,116,101,99,116,101,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5251136);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,100,32,115,105,109,112,108,101,120,32,102,37,100,32,97,112,101,120,32,118,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5251212);
allocate([32,32,67,80,85,32,115,101,99,111,110,100,115,32,116,111,32,99,111,109,112,117,116,101,32,104,117,108,108,32,40,97,102,116,101,114,32,105,110,112,117,116,41,58,32,37,50,46,52,103,10,0] /*   CPU seconds to com */, "i8", ALLOC_NONE, 5251276);
allocate([32,98,111,116,116,111,109,0] /*  bottom\00 */, "i8", ALLOC_NONE, 5251328);
allocate([32,32,119,105,116,104,32,115,101,97,114,99,104,32,111,102,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0] /*   with search of ver */, "i8", ALLOC_NONE, 5251336);
allocate([113,104,95,102,117,114,116,104,101,115,116,111,117,116,58,32,112,37,100,32,105,115,32,102,117,114,116,104,101,115,116,32,111,117,116,115,105,100,101,32,112,111,105,110,116,32,111,102,32,102,37,100,10,0] /* qh_furthestout: p%d  */, "i8", ALLOC_NONE, 5251372);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5251428);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,109,101,114,103,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of merged f */, "i8", ALLOC_NONE, 5251492);
allocate([32,116,111,112,0] /*  top\00 */, "i8", ALLOC_NONE, 5251524);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,86,111,114,111,110,111,105,32,118,101,114,116,101,120,32,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5251532);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,108,111,119,101,114,0] /* calls to findbestlow */, "i8", ALLOC_NONE, 5251588);
allocate([113,104,95,102,117,114,116,104,101,115,116,110,101,120,116,58,32,109,97,100,101,32,102,37,100,32,110,101,120,116,32,102,97,99,101,116,40,100,105,115,116,32,37,46,50,103,41,10,0] /* qh_furthestnext: mad */, "i8", ALLOC_NONE, 5251612);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,10,0] /* qh_mergesimplex: upd */, "i8", ALLOC_NONE, 5251664);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5251716);
allocate([10,81,104,117,108,108,32,104,97,115,32,102,105,110,105,115,104,101,100,32,99,111,110,115,116,114,117,99,116,105,110,103,32,116,104,101,32,104,117,108,108,46,0] /* \0AQhull has finishe */, "i8", ALLOC_NONE, 5251764);
allocate([32,32,32,32,45,32,102,108,97,103,115,58,0] /*     - flags:\00 */, "i8", ALLOC_NONE, 5251808);
allocate([102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* flipped facets\00 */, "i8", ALLOC_NONE, 5251824);
allocate([32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,116,104,97,116,32,119,101,114,101,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,0] /*   inside points that */, "i8", ALLOC_NONE, 5251840);
allocate([37,115,32,115,101,116,61,37,112,32,109,97,120,115,105,122,101,61,37,100,32,115,105,122,101,61,37,100,32,101,108,101,109,115,61,0] /* %s set=%p maxsize=%d */, "i8", ALLOC_NONE, 5251888);
allocate([113,104,95,102,114,101,101,113,104,117,108,108,50,58,32,102,114,101,101,32,103,108,111,98,97,108,32,109,101,109,111,114,121,10,0] /* qh_freeqhull2: free  */, "i8", ALLOC_NONE, 5251924);
allocate([113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,32,111,117,116,32,111,102,32,37,100,32,102,97,99,101,116,115,10,0] /* qh_findgood_all: %d  */, "i8", ALLOC_NONE, 5251960);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,97,112,101,120,32,118,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5252020);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,109,101,114,103,105,110,103,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5252076);
allocate([45,32,102,37,100,10,0] /* - f%d\0A\00 */, "i8", ALLOC_NONE, 5252120);
allocate([32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,107,101,112,116,32,119,105,116,104,32,97,32,102,97,99,101,116,0] /*   inside points kept */, "i8", ALLOC_NONE, 5252128);
allocate([113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,119,98,101,115,116,63,32,37,100,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbesthorizon:  */, "i8", ALLOC_NONE, 5252164);
allocate([113,104,95,102,114,101,101,98,117,105,108,100,58,32,102,114,101,101,32,109,101,109,111,114,121,32,102,114,111,109,32,113,104,95,105,110,105,116,104,117,108,108,32,97,110,100,32,113,104,95,98,117,105,108,100,104,117,108,108,10,0] /* qh_freebuild: free m */, "i8", ALLOC_NONE, 5252228);
allocate([113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0] /* qh_findgood_all: f%d */, "i8", ALLOC_NONE, 5252292);
allocate([113,104,95,109,101,114,103,101,114,105,100,103,101,115,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergeridges: merg */, "i8", ALLOC_NONE, 5252348);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,113,104,117,108,108,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5252396);
allocate([32,78,85,76,76,102,97,99,101,116,10,0] /*  NULLfacet\0A\00 */, "i8", ALLOC_NONE, 5252440);
allocate([105,110,115,105,100,101,32,112,111,105,110,116,115,0] /* inside points\00 */, "i8", ALLOC_NONE, 5252452);
allocate([50,48,49,50,46,49,32,50,48,49,50,47,48,50,47,49,56,0] /* 2012.1 2012/02/18\00 */, "i8", ALLOC_NONE, 5252468);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,97,32,118,101,114,116,101,120,32,102,111,114,32,101,118,101,114,121,32,102,97,99,101,116,40,39,81,86,45,37,100,39,41,46,10,0] /* qhull warning: point */, "i8", ALLOC_NONE, 5252488);
allocate([113,104,95,109,101,114,103,101,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergeneighbors: m */, "i8", ALLOC_NONE, 5252552);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,104,117,108,108,58,32,37,100,10,0] /*   Number of facets i */, "i8", ALLOC_NONE, 5252604);
allocate([32,68,85,80,76,73,67,65,84,69,114,105,100,103,101,10,0] /*  DUPLICATEridge\0A\0 */, "i8", ALLOC_NONE, 5252636);
allocate([32,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,102,111,114,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,0] /*   repartitioned copl */, "i8", ALLOC_NONE, 5252656);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,110,111,116,32,97,32,118,101,114,116,101,120,40,39,81,86,37,100,39,41,46,10,0] /* qhull warning: point */, "i8", ALLOC_NONE, 5252712);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,50,100,58,32,109,101,114,103,101,100,32,118,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergefacet2d: mer */, "i8", ALLOC_NONE, 5252764);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,104,121,112,101,114,112,108,97,110,101,115,32,99,114,101,97,116,101,100,58,32,37,100,10,0] /*   Number of hyperpla */, "i8", ALLOC_NONE, 5252828);
allocate([113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,58,32,100,101,108,101,116,101,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qh_deletevisible: de */, "i8", ALLOC_NONE, 5252868);
allocate([32,77,69,82,71,69,114,105,100,103,101,10,0] /*  MERGEridge\0A\00 */, "i8", ALLOC_NONE, 5252928);
allocate([97,110,103,108,101,32,116,101,115,116,115,32,102,111,114,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,0] /* angle tests for repa */, "i8", ALLOC_NONE, 5252944);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,103,111,111,100,32,118,101,114,116,101,120,32,112,37,100,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,108,97,115,116,32,103,111,111,100,32,102,97,99,101,116,32,102,37,100,46,32,32,73,103,110,111,114,101,100,46,10,0] /* qhull warning: good  */, "i8", ALLOC_NONE, 5252992);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,101,110,100,32,111,102,32,119,105,100,101,32,116,114,97,99,105,110,103,10,0] /* qh_mergefacet: end o */, "i8", ALLOC_NONE, 5253072);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,58,32,37,100,10,0] /*   Number of points p */, "i8", ALLOC_NONE, 5253108);
allocate([35,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* # ridge between f%d  */, "i8", ALLOC_NONE, 5253144);
allocate([32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,98,101,116,116,101,114,32,116,104,97,110,32,98,101,115,116,102,97,99,101,116,0] /*  horizon facets bett */, "i8", ALLOC_NONE, 5253172);
allocate([113,104,95,98,97,115,101,118,101,114,116,105,99,101,115,58,32,102,111,117,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qh_basevertices: fou */, "i8", ALLOC_NONE, 5253212);
allocate([113,104,95,102,105,110,100,103,111,111,100,58,32,102,111,117,110,100,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,119,105,116,104,32,37,100,32,103,111,111,100,32,104,111,114,105,122,111,110,10,0] /* qh_findgood: found % */, "i8", ALLOC_NONE, 5253248);
allocate([77,69,82,71,73,78,71,0] /* MERGING\00 */, "i8", ALLOC_NONE, 5253304);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d free */, "i8", ALLOC_NONE, 5253312);
allocate([10,10,0] /* \0A\0A\00 */, "i8", ALLOC_NONE, 5253368);
allocate([79,70,70,32,51,32,49,32,49,32,35,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* OFF 3 1 1 # ridge be */, "i8", ALLOC_NONE, 5253372);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,104,111,114,105,122,111,110,0] /* calls to findhorizon */, "i8", ALLOC_NONE, 5253408);
allocate([113,104,95,102,105,110,100,103,111,111,100,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0] /* qh_findgood: f%d is  */, "i8", ALLOC_NONE, 5253432);
allocate([67,101,110,116,114,117,109,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Centrum-postmerge-wi */, "i8", ALLOC_NONE, 5253484);
allocate([79,112,116,105,111,110,32,39,81,120,39,32,109,97,121,32,97,118,111,105,100,32,116,104,105,115,32,112,114,111,98,108,101,109,46,10,0] /* Option 'Qx' may avoi */, "i8", ALLOC_NONE, 5253516);
allocate([113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,101,100,32,112,37,100,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,110,101,119,32,98,97,108,97,110,99,101,32,37,50,46,50,103,32,112,111,105,110,116,32,98,97,108,97,110,99,101,32,37,50,46,50,103,10,0] /* qh_addpoint: added p */, "i8", ALLOC_NONE, 5253556);
allocate([32,81,82,37,100,10,10,0] /*  QR%d\0A\0A\00 */, "i8", ALLOC_NONE, 5253632);
allocate([51,32,48,32,49,32,50,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,0] /* 3 0 1 2 %8.4g %8.4g  */, "i8", ALLOC_NONE, 5253640);
allocate([32,99,97,108,108,115,32,100,117,101,32,116,111,32,113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,0] /*  calls due to qh_sha */, "i8", ALLOC_NONE, 5253668);
allocate([10,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,79,110,108,121,32,37,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,46,32,32,67,97,110,32,110,111,116,32,109,101,114,103,101,32,97,110,111,116,104,101,114,10,112,97,105,114,46,32,32,84,104,101,32,105,110,112,117,116,32,105,115,32,116,111,111,32,100,101,103,101,110,101,114,97,116,101,32,111,114,32,116,104,101,32,99,111,110,118,101,120,105,116,121,32,99,111,110,115,116,114,97,105,110,116,115,32,97,114,101,10,116,111,111,32,115,116,114,111,110,103,46,10,0] /* \0Aqhull precision e */, "i8", ALLOC_NONE, 5253700);
allocate([10,83,116,97,116,105,115,116,105,99,115,32,102,111,114,58,32,37,115,32,124,32,37,115,0] /* \0AStatistics for: % */, "i8", ALLOC_NONE, 5253852);
allocate([35,32,114,37,100,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* # r%d between f%d f% */, "i8", ALLOC_NONE, 5253880);
allocate([32,97,118,101,46,32,99,108,101,97,114,108,121,32,98,101,116,116,101,114,0] /*  ave. clearly better */, "i8", ALLOC_NONE, 5253904);
allocate([113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,58,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0] /* qh_findbestlower: f% */, "i8", ALLOC_NONE, 5253928);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,101,105,116,104,101,114,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,116,104,101,32,115,97,109,101,32,111,114,32,111,110,101,32,105,115,32,97,32,118,105,115,105,98,108,101,32,102,97,99,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5253976);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,116,114,105,97,110,103,117,108,97,116,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of triangul */, "i8", ALLOC_NONE, 5254076);
allocate([79,70,70,32,51,32,49,32,49,32,35,32,102,37,100,10,0] /* OFF 3 1 1 # f%d\0A\0 */, "i8", ALLOC_NONE, 5254116);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,97,110,103,108,101,32,37,50,46,50,103,32,110,101,97,114,122,101,114,111,32,37,100,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5254136);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,110,101,119,0] /* calls to findbestnew */, "i8", ALLOC_NONE, 5254188);
allocate([10,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,41,58,32,97,108,108,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,97,99,101,116,32,37,100,32,97,114,101,32,102,108,105,112,112,101,100,32,111,114,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,46,10,80,108,101,97,115,101,32,114,101,112,111,114,116,32,116,104,105,115,32,101,114,114,111,114,32,116,111,32,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,32,119,105,116,104,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,46,10,0] /* \0AQhull internal er */, "i8", ALLOC_NONE, 5254212);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,35,37,100,32,109,101,114,103,101,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,109,105,110,100,105,115,116,61,32,37,50,46,50,103,44,32,109,97,120,100,105,115,116,61,32,37,50,46,50,103,10,0] /* qh_mergefacet: #%d m */, "i8", ALLOC_NONE, 5254400);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5254472);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5254516);
allocate([125,93,0] /* }]\00 */, "i8", ALLOC_NONE, 5254540);
allocate([99,111,110,99,97,118,101,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0] /* concave half ridges  */, "i8", ALLOC_NONE, 5254544);
allocate([32,97,118,101,46,32,99,111,112,108,97,110,97,114,32,115,101,97,114,99,104,0] /*  ave. coplanar searc */, "i8", ALLOC_NONE, 5254576);
allocate([37,115,32,115,101,116,32,105,115,32,110,117,108,108,10,0] /* %s set is null\0A\00 */, "i8", ALLOC_NONE, 5254600);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,35,37,100,32,105,110,118,111,108,118,105,110,103,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0] /* qh_mergefacet: ===== */, "i8", ALLOC_NONE, 5254616);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of 'good' f */, "i8", ALLOC_NONE, 5254692);
allocate([123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,0] /* {%16.8f, %16.8f, %16 */, "i8", ALLOC_NONE, 5254724);
allocate([32,109,97,120,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0] /*  max. facets tested\ */, "i8", ALLOC_NONE, 5254752);
allocate([113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,32,105,115,99,104,101,99,107,109,97,120,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,32,109,105,110,115,101,97,114,99,104,32,37,50,46,50,103,32,115,101,97,114,99,104,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbesthorizon:  */, "i8", ALLOC_NONE, 5254772);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,51,118,101,114,116,101,120,41,58,32,114,105,100,103,101,115,32,102,111,114,32,102,97,99,101,116,32,37,100,32,100,111,110,39,116,32,109,97,116,99,104,32,117,112,46,32,32,103,111,116,32,97,116,32,108,101,97,115,116,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5254892);
allocate([113,104,95,102,114,101,101,98,117,102,102,101,114,115,58,32,102,105,110,105,115,104,101,100,10,0] /* qh_freebuffers: fini */, "i8", ALLOC_NONE, 5254988);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,119,105,100,101,32,109,101,114,103,101,32,35,37,100,40,37,50,46,50,103,41,32,102,111,114,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,108,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* qh_mergefacet: ===== */, "i8", ALLOC_NONE, 5255016);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of facets:  */, "i8", ALLOC_NONE, 5255108);
allocate([80,111,108,121,103,111,110,91,123,0] /* Polygon[{\00 */, "i8", ALLOC_NONE, 5255132);
allocate([32,97,118,101,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0] /*  ave. facets tested\ */, "i8", ALLOC_NONE, 5255144);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,51,118,101,114,116,101,120,41,58,32,111,110,108,121,32,37,100,32,118,101,114,116,105,99,101,115,32,102,111,114,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5255164);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5255248);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of %s point */, "i8", ALLOC_NONE, 5255344);
allocate([93,0] /* ]\00 */, "i8", ALLOC_NONE, 5255372);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,0] /* calls to findbest\00 */, "i8", ALLOC_NONE, 5255376);
allocate([112,37,100,32,100,105,115,116,32,37,46,50,103,44,32,0] /* p%d dist %.2g, \00 */, "i8", ALLOC_NONE, 5255396);
allocate([113,104,95,99,114,101,97,116,101,115,105,109,112,108,101,120,58,32,99,114,101,97,116,101,100,32,115,105,109,112,108,101,120,10,0] /* qh_createsimplex: cr */, "i8", ALLOC_NONE, 5255412);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,100,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255448);
allocate([99,111,112,108,97,110,97,114,0] /* coplanar\00 */, "i8", ALLOC_NONE, 5255516);
allocate([113,104,95,100,101,108,102,97,99,101,116,58,32,100,101,108,101,116,101,32,102,37,100,10,0] /* qh_delfacet: delete  */, "i8", ALLOC_NONE, 5255528);
allocate([91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,0] /* [%16.8f, %16.8f, %16 */, "i8", ALLOC_NONE, 5255556);
allocate([32,32,32,32,109,97,120,105,109,117,109,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*     maximum vertices */, "i8", ALLOC_NONE, 5255584);
allocate([112,111,105,110,116,115,0] /* points\00 */, "i8", ALLOC_NONE, 5255628);
allocate([113,104,95,99,108,101,97,114,99,101,110,116,101,114,115,58,32,115,119,105,116,99,104,101,100,32,116,111,32,99,101,110,116,101,114,32,116,121,112,101,32,37,100,10,0] /* qh_clearcenters: swi */, "i8", ALLOC_NONE, 5255636);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255684);
allocate([105,110,116,101,114,105,111,114,0] /* interior\00 */, "i8", ALLOC_NONE, 5255756);
allocate([91,0] /* [\00 */, "i8", ALLOC_NONE, 5255768);
allocate([116,111,116,97,108,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,0] /* total vertices delet */, "i8", ALLOC_NONE, 5255772);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0] /* qhull error (qh_appe */, "i8", ALLOC_NONE, 5255796);
allocate([99,101,110,116,101,114,58,0] /* center:\00 */, "i8", ALLOC_NONE, 5255888);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,110,101,105,103,104,98,111,114,32,102,37,100,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,118,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5255896);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255972);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5256036);
allocate([99,111,112,108,97,110,97,114,32,97,110,100,32,105,110,116,101,114,105,111,114,0] /* coplanar and interio */, "i8", ALLOC_NONE, 5256092);
allocate([44,10,0] /* ,\0A\00 */, "i8", ALLOC_NONE, 5256116);
allocate([112,97,114,116,105,116,105,111,110,105,110,103,32,115,116,97,116,105,115,116,105,99,115,40,115,101,101,32,112,114,101,118,105,111,117,115,32,102,111,114,32,111,117,116,101,114,32,112,108,97,110,101,115,41,0] /* partitioning statist */, "i8", ALLOC_NONE, 5256120);
allocate([113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,100,101,116,32,37,50,46,50,103,32,102,97,99,116,111,114,32,37,50,46,50,103,32,0] /* qh_voronoi_center: d */, "i8", ALLOC_NONE, 5256176);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,118,101,114,116,101,120,32,105,100,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256220);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,111,108,100,32,114,105,100,103,101,115,32,97,110,100,32,37,100,32,110,101,119,32,111,110,101,115,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5256284);
allocate([67,101,110,116,114,117,109,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Centrum-premerge-wit */, "i8", ALLOC_NONE, 5256344);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,100,100,112,111,105,110,116,41,58,32,78,85,76,76,32,102,97,99,101,116,46,32,32,78,101,101,100,32,116,111,32,99,97,108,108,32,113,104,95,102,105,110,100,98,101,115,116,102,97,99,101,116,32,102,105,114,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256376);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of vertices */, "i8", ALLOC_NONE, 5256464);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,32,125,10,0] /* %8.4g %8.4g %8.4g 1. */, "i8", ALLOC_NONE, 5256492);
allocate([32,32,109,97,120,32,118,101,114,116,101,120,95,118,105,115,105,116,47,50,0] /*   max vertex_visit/2 */, "i8", ALLOC_NONE, 5256520);
allocate([113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,97,116,32,105,110,102,105,110,105,116,121,32,102,111,114,32,0] /* qh_voronoi_center: a */, "i8", ALLOC_NONE, 5256544);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,105,100,32,37,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256580);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,41,58,32,98,97,100,32,114,105,100,103,101,32,114,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256640);
allocate([10,67,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AConvex hull of %d */, "i8", ALLOC_NONE, 5256700);
allocate([37,100,32,0] /* %d \00 */, "i8", ALLOC_NONE, 5256740);
allocate([32,32,109,97,120,32,118,105,115,105,116,95,105,100,47,50,0] /*   max visit_id/2\00 */, "i8", ALLOC_NONE, 5256744);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,32,32,110,101,101,100,32,97,116,32,108,101,97,115,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,99,111,110,115,116,114,117,99,116,32,97,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256764);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,102,97,99,101,116,115,32,37,100,32,45,32,35,101,100,103,101,115,32,37,100,32,33,61,32,50,10,32,32,32,32,32,32,32,32,65,32,118,101,114,116,101,120,32,97,112,112,101,97,114,115,32,116,119,105,99,101,32,105,110,32,97,32,101,100,103,101,32,108,105,115,116,46,32,32,77,97,121,32,111,99,99,117,114,32,100,117,114,105,110,103,32,109,101,114,103,105,110,103,46,0] /* qhull warning: #vert */, "i8", ALLOC_NONE, 5256864);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,97,100,100,32,114,105,100,103,101,115,32,116,111,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5256996);
allocate([113,104,95,97,112,112,101,110,100,102,97,99,101,116,58,32,97,112,112,101,110,100,32,102,37,100,32,116,111,32,102,97,99,101,116,95,108,105,115,116,10,0] /* qh_appendfacet: appe */, "i8", ALLOC_NONE, 5257044);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5257088);
allocate([37,56,46,52,103,32,0] /* %8.4g \00 */, "i8", ALLOC_NONE, 5257144);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,109,105,100,112,111,105,110,116,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5257152);
allocate([32,32,114,101,115,101,116,115,32,111,102,32,118,101,114,116,101,120,95,118,105,115,105,116,0] /*   resets of vertex_v */, "i8", ALLOC_NONE, 5257200);
allocate([113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,58,32,37,100,10,0] /* qh_sharpnewfacets: % */, "i8", ALLOC_NONE, 5257228);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,33,61,32,35,102,97,99,101,116,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257252);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,114,105,100,103,101,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5257320);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of 'good' i */, "i8", ALLOC_NONE, 5257380);
allocate([76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0] /* Last point added to  */, "i8", ALLOC_NONE, 5257424);
allocate([123,32,79,70,70,32,37,100,32,49,32,49,32,35,32,102,37,100,10,0] /* { OFF %d 1 1 # f%d\0 */, "i8", ALLOC_NONE, 5257460);
allocate([99,111,112,108,97,110,97,114,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0] /* coplanar half ridges */, "i8", ALLOC_NONE, 5257480);
allocate([114,101,115,101,116,115,32,111,102,32,118,105,115,105,116,95,105,100,0] /* resets of visit_id\0 */, "i8", ALLOC_NONE, 5257512);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,110,101,119,95,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257532);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,118,101,114,116,101,120,32,99,111,117,110,116,32,105,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257616);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,37,100,32,110,101,105,103,104,98,111,114,115,32,97,110,100,32,97,100,100,101,100,32,37,100,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5257720);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of intersec */, "i8", ALLOC_NONE, 5257780);
allocate([76,105,110,101,91,123,123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,44,32,123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,125,93,10,0] /* Line[{{%16.8f, %16.8 */, "i8", ALLOC_NONE, 5257820);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,112,101,114,32,99,104,101,99,107,0] /*   ave. distance test */, "i8", ALLOC_NONE, 5257864);
allocate([113,104,95,102,105,110,100,98,101,115,116,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,44,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,10,0] /* qh_findbest: neighbo */, "i8", ALLOC_NONE, 5257896);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,105,110,99,111,110,115,105,115,116,101,110,116,46,32,32,84,111,116,118,110,101,105,103,104,98,111,114,115,32,37,100,44,32,116,111,116,118,101,114,116,105,99,101,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257948);
allocate([113,104,95,102,114,101,101,98,117,102,102,101,114,115,58,32,102,114,101,101,105,110,103,32,117,112,32,103,108,111,98,97,108,32,109,101,109,111,114,121,32,98,117,102,102,101,114,115,10,0] /* qh_freebuffers: free */, "i8", ALLOC_NONE, 5258056);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5258108);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of %s halfs */, "i8", ALLOC_NONE, 5258152);
allocate([91,91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,44,32,91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,93,10,0] /* [[%16.8f, %16.8f], [ */, "i8", ALLOC_NONE, 5258184);
allocate([112,111,105,110,116,115,32,99,104,101,99,107,101,100,32,102,111,114,32,102,97,99,101,116,115,39,32,111,117,116,101,114,32,112,108,97,110,101,115,0] /* points checked for f */, "i8", ALLOC_NONE, 5258224);
allocate([110,101,105,103,104,98,111,114,115,32,102,111,114,32,118,0] /* neighbors for v\00 */, "i8", ALLOC_NONE, 5258264);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,110,101,105,103,104,98,111,114,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5258280);
allocate([115,105,109,105,108,97,114,0] /* similar\00 */, "i8", ALLOC_NONE, 5258344);
allocate([44,0] /* ,\00 */, "i8", ALLOC_NONE, 5258352);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,116,111,32,114,101,112,111,114,116,32,109,105,110,105,109,117,109,32,118,101,114,116,101,120,0] /* distance tests to re */, "i8", ALLOC_NONE, 5258356);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,102,97,99,101,116,32,99,111,117,110,116,32,105,115,32,37,100,32,45,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258396);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_facets */, "i8", ALLOC_NONE, 5258520);
allocate([114,101,100,117,110,100,97,110,116,0] /* redundant\00 */, "i8", ALLOC_NONE, 5258584);
allocate([102,108,105,112,112,101,100,32,102,97,99,101,116,0] /* flipped facet\00 */, "i8", ALLOC_NONE, 5258596);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,10,0] /* %8.4g %8.4g %8.4g 1. */, "i8", ALLOC_NONE, 5258612);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,102,97,99,101,116,32,118,105,115,105,98,105,108,105,116,121,0] /* distance tests for f */, "i8", ALLOC_NONE, 5258636);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,102,111,114,32,118,101,114,116,101,120,32,118,37,100,32,102,105,114,115,116,95,112,111,105,110,116,32,37,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258672);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,97,107,101,32,110,101,119,102,97,99,101,116,32,110,101,119,32,97,110,100,32,115,97,109,101,99,121,99,108,101,32,100,101,108,101,116,101,100,10,0] /* qh_mergecycle_facets */, "i8", ALLOC_NONE, 5258760);
allocate([115,105,109,105,108,97,114,32,97,110,100,32,114,101,100,117,110,100,97,110,116,0] /* similar and redundan */, "i8", ALLOC_NONE, 5258824);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,0] /* %8.4g %8.4g %8.4g\0A */, "i8", ALLOC_NONE, 5258848);
allocate([103,111,111,100,32,102,97,99,101,116,115,32,102,111,117,110,100,0] /* good facets found\00 */, "i8", ALLOC_NONE, 5258888);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,111,114,32,102,37,100,32,105,115,32,97,108,114,101,97,100,121,32,97,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,10,0] /* qhull error (qh_appe */, "i8", ALLOC_NONE, 5258908);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,105,115,105,98,108,101,32,108,105,115,116,32,102,37,100,32,110,111,32,108,111,110,103,101,114,32,111,110,32,102,97,99,101,116,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258988);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,109,101,114,103,101,100,32,37,100,32,115,97,109,101,32,99,121,99,108,101,115,32,111,114,32,102,97,99,101,116,115,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,115,10,0] /* qh_mergecycle_all: m */, "i8", ALLOC_NONE, 5259072);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,121,116,101,115,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5259148);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,110,111,110,45,114,101,100,117,110,100,97,110,116,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of non-redu */, "i8", ALLOC_NONE, 5259220);
allocate([86,69,67,84,32,49,32,50,32,49,32,50,32,49,32,35,32,102,37,100,10,0] /* VECT 1 2 1 2 1 # f%d */, "i8", ALLOC_NONE, 5259264);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,100,105,100,110,39,116,32,99,114,101,97,116,101,32,97,32,103,111,111,100,32,110,101,119,32,102,97,99,101,116,41,0] /* points ignored(didn' */, "i8", ALLOC_NONE, 5259288);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,102,37,100,32,104,97,115,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,98,101,102,111,114,101,32,113,104,32,102,97,99,101,116,95,110,101,120,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5259336);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,41,58,32,102,37,100,32,119,105,116,104,111,117,116,32,110,111,114,109,97,108,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5259424);
allocate([81,104,117,108,108,58,32,97,108,103,111,114,105,116,104,109,32,99,111,109,112,108,101,116,101,100,10,0] /* Qhull: algorithm com */, "i8", ALLOC_NONE, 5259488);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of halfspac */, "i8", ALLOC_NONE, 5259516);
allocate([65,110,103,108,101,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Angle-postmerge-with */, "i8", ALLOC_NONE, 5259544);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,120,116,114,101,109,101,115,95,50,100,41,58,32,108,111,111,112,32,105,110,32,102,97,99,101,116,32,108,105,115,116,46,32,32,102,97,99,101,116,32,37,100,32,110,101,120,116,102,97,99,101,116,32,37,100,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5259572);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,97,32,103,111,111,100,32,102,97,99,101,116,41,0] /* points ignored(!abov */, "i8", ALLOC_NONE, 5259660);
allocate([113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,58,32,99,104,101,99,107,32,97,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0] /* qh_checkpolygon: che */, "i8", ALLOC_NONE, 5259696);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,98,101,103,105,110,10,0] /* qh_mergecycle_all: b */, "i8", ALLOC_NONE, 5259740);
allocate([10,72,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AHalfspace interse */, "i8", ALLOC_NONE, 5259768);
allocate([51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,114,37,100,32,102,37,100,32,102,37,100,10,0] /* 3 %d %d %d %8.4g %8. */, "i8", ALLOC_NONE, 5259836);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,109,97,120,95,111,117,116,115,105,100,101,41,0] /* points ignored(!abov */, "i8", ALLOC_NONE, 5259884);
allocate([10,65,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,111,99,99,117,114,115,32,119,104,101,110,32,105,116,115,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,10,103,114,101,97,116,101,114,32,116,104,97,110,32,37,50,46,50,103,44,32,116,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,46,10,0] /* \0AA flipped facet o */, "i8", ALLOC_NONE, 5259920);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,101,110,100,32,111,102,32,116,114,97,99,101,32,102,97,99,101,116,10,0] /* qh_mergecycle: end o */, "i8", ALLOC_NONE, 5260036);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5260072);
allocate([51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,32,102,37,100,32,102,37,100,10,0] /* 3 %d %d %d %8.4g %8. */, "i8", ALLOC_NONE, 5260124);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,86,111,114,111,110,111,105,32,118,101,114,116,101,120,32,111,114,32,109,105,100,112,111,105,110,116,0] /* qh_detvnorm: Voronoi */, "i8", ALLOC_NONE, 5260168);
allocate([100,101,116,101,114,109,105,110,97,110,116,115,32,110,111,116,32,99,111,109,112,117,116,101,100,32,98,101,99,97,117,115,101,32,118,101,114,116,101,120,32,116,111,111,32,108,111,119,0] /* determinants not com */, "i8", ALLOC_NONE, 5260208);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5260260);
allocate([77,69,82,71,73,78,71,32,67,89,67,76,69,0] /* MERGING CYCLE\00 */, "i8", ALLOC_NONE, 5260324);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0] /*   Number of%s Delaun */, "i8", ALLOC_NONE, 5260340);
allocate([79,112,116,105,111,110,115,32,115,101,108,101,99,116,101,100,32,102,111,114,32,81,104,117,108,108,32,37,115,58,10,37,115,10,0] /* Options selected for */, "i8", ALLOC_NONE, 5260376);
allocate([41,41,59,10,0] /* ));\0A\00 */, "i8", ALLOC_NONE, 5260412);
allocate([112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,40,99,111,114,114,101,99,116,101,100,32,117,110,108,101,115,115,32,39,81,48,39,32,111,114,32,97,110,32,101,114,114,111,114,41,0] /* precision problems ( */, "i8", ALLOC_NONE, 5260420);
allocate([100,101,116,101,114,109,105,110,97,110,116,115,32,99,111,109,112,117,116,101,100,40,97,114,101,97,32,38,32,105,110,105,116,105,97,108,32,104,117,108,108,41,0] /* determinants compute */, "i8", ALLOC_NONE, 5260476);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5260520);
allocate([113,104,95,115,101,116,100,101,108,97,117,110,97,121,58,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0] /* qh_setdelaunay: proj */, "i8", ALLOC_NONE, 5260600);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,115,32,114,37,100,32,97,110,100,32,114,37,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5260676);
allocate([32,102,37,100,0] /*  f%d\00 */, "i8", ALLOC_NONE, 5260760);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,105,110,112,117,116,32,115,105,116,101,115,37,115,58,32,37,100,10,0] /*   Number of input si */, "i8", ALLOC_NONE, 5260768);
allocate([101,110,100,10,0] /* end\0A\00 */, "i8", ALLOC_NONE, 5260800);
allocate([115,101,97,114,99,104,101,115,32,111,102,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,0] /* searches of all poin */, "i8", ALLOC_NONE, 5260808);
allocate([113,104,95,115,99,97,108,101,112,111,105,110,116,115,58,32,115,99,97,108,101,100,32,37,100,39,116,104,32,99,111,111,114,100,105,110,97,116,101,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,37,46,50,103,44,32,37,46,50,103,93,32,102,111,114,32,37,100,32,112,111,105,110,116,115,32,98,121,32,37,50,46,50,103,32,97,110,100,32,115,104,105,102,116,101,100,32,37,50,46,50,103,10,0] /* qh_scalepoints: scal */, "i8", ALLOC_NONE, 5260852);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,32,32,109,97,120,95,111,117,116,115,105,100,101,32,37,50,46,50,103,10,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5260968);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5261012);
allocate([113,104,95,112,114,101,109,101,114,103,101,58,32,112,114,101,109,101,114,103,101,32,99,101,110,116,114,117,109,32,37,50,46,50,103,32,97,110,103,108,101,32,37,50,46,50,103,32,102,111,114,32,97,112,101,120,32,118,37,100,32,102,97,99,101,116,108,105,115,116,32,102,37,100,10,0] /* qh_premerge: premerg */, "i8", ALLOC_NONE, 5261108);
allocate([32,32,115,97,109,101,32,99,121,99,108,101,58,0] /*   same cycle:\00 */, "i8", ALLOC_NONE, 5261184);
allocate([10,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0ADelaunay triangul */, "i8", ALLOC_NONE, 5261200);
allocate([125,10,0] /* }\0A\00 */, "i8", ALLOC_NONE, 5261268);
allocate([32,32,110,117,109,98,101,114,32,111,102,32,116,114,105,97,108,115,0] /*   number of trials\0 */, "i8", ALLOC_NONE, 5261272);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,37,100,39,116,104,32,100,105,109,101,110,115,105,111,110,39,115,32,110,101,119,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,10,0] /* qhull input error: % */, "i8", ALLOC_NONE, 5261292);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,32,98,117,116,10,32,110,111,116,32,105,110,32,97,32,114,105,100,103,101,46,32,32,84,104,105,115,32,105,115,32,111,107,32,117,110,100,101,114,32,109,101,114,103,105,110,103,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5261400);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,37,100,32,111,102,32,115,97,109,101,99,121,99,108,101,32,37,100,32,105,110,116,111,32,116,114,97,99,101,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0] /* qh_mergecycle: ===== */, "i8", ALLOC_NONE, 5261540);
allocate([10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AFurthest-site Del */, "i8", ALLOC_NONE, 5261632);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,110,100,41,58,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,37,100,32,33,61,32,110,117,109,98,101,114,32,112,114,105,110,116,101,100,32,37,100,32,97,110,100,32,97,116,32,101,110,100,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5261716);
allocate([97,118,101,114,97,103,101,32,112,97,114,116,105,116,105,111,110,32,98,97,108,97,110,99,101,0] /* average partition ba */, "i8", ALLOC_NONE, 5261808);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,98,37,100,39,32,111,114,32,39,81,66,37,100,39,32,105,110,118,101,114,116,115,32,112,97,114,97,98,111,108,111,105,100,32,115,105,110,99,101,32,104,105,103,104,32,98,111,117,110,100,32,37,46,50,103,32,60,32,108,111,119,32,98,111,117,110,100,32,37,46,50,103,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5261836);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,114,37,100,32,110,111,116,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5261932);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,37,100,10,0] /* qh_mergecycle: merge */, "i8", ALLOC_NONE, 5262016);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5262096);
allocate([113,104,95,99,104,101,99,107,102,108,105,112,112,101,100,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_checkflipped: fac */, "i8", ALLOC_NONE, 5262148);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,102,97,99,101,116,115,32,112,114,105,110,116,101,100,10,0] /* qhull warning: no fa */, "i8", ALLOC_NONE, 5262216);
allocate([32,32,115,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,0] /*   standard deviation */, "i8", ALLOC_NONE, 5262252);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,78,101,119,32,98,111,117,110,100,115,32,91,48,44,32,37,50,46,50,103,93,32,97,114,101,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,40,119,105,100,116,104,32,37,50,46,50,103,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5262276);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,114,105,100,103,101,32,102,111,114,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262412);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5262500);
allocate([32,39,103,111,111,100,39,0] /*  'good'\00 */, "i8", ALLOC_NONE, 5262596);
allocate([49,32,125,125,125,10,0] /* 1 }}}\0A\00 */, "i8", ALLOC_NONE, 5262604);
allocate([97,118,101,114,97,103,101,32,110,101,119,32,102,97,99,101,116,32,98,97,108,97,110,99,101,0] /* average new facet ba */, "i8", ALLOC_NONE, 5262612);
allocate([113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,37,100,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,100,101,103,101,110,32,111,114,32,114,101,100,117,110,100,97,110,116,32,102,97,99,101,116,115,46,10,0] /* qh_all_merges: merge */, "i8", ALLOC_NONE, 5262640);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,73,110,112,117,116,32,105,115,32,99,111,99,105,114,99,117,108,97,114,10,32,32,32,111,114,32,99,111,115,112,104,101,114,105,99,97,108,46,32,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,32,105,110,102,105,110,105,116,121,46,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5262736);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5262876);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,114,105,100,103,101,32,114,37,100,32,110,111,116,32,105,110,32,102,97,99,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262968);
allocate([113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,97,118,111,105,100,32,109,101,114,103,105,110,103,32,111,108,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,46,32,32,85,115,101,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,105,110,115,116,101,97,100,10,0] /* qh_merge_nonconvex:  */, "i8", ALLOC_NONE, 5263064);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,113,104,109,101,109,32,104,97,115,32,110,111,116,32,98,101,101,110,32,105,110,105,116,105,97,108,105,122,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263156);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of%s Vorono */, "i8", ALLOC_NONE, 5263228);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,48,10,0] /* %8.4g %8.4g %8.4g 0\ */, "i8", ALLOC_NONE, 5263264);
allocate([32,32,32,32,109,97,120,105,109,117,109,40,105,110,99,108,117,100,101,115,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,41,0] /*     maximum(includes */, "i8", ALLOC_NONE, 5263288);
allocate([113,104,95,115,99,97,108,101,108,97,115,116,58,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,102,114,111,109,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,48,44,37,50,46,50,103,93,10,0] /* qh_scalelast: scale  */, "i8", ALLOC_NONE, 5263328);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,115,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263400);
allocate([113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,32,116,121,112,101,32,37,100,10,0] /* qh_merge_nonconvex:  */, "i8", ALLOC_NONE, 5263484);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,113,104,117,108,108,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263540);
allocate([32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Total number of ne */, "i8", ALLOC_NONE, 5263604);
allocate([65,110,103,108,101,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Angle-premerge-with- */, "i8", ALLOC_NONE, 5263652);
allocate([123,73,78,83,84,32,103,101,111,109,32,123,32,58,32,99,101,110,116,114,117,109,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,35,32,102,37,100,10,0] /* {INST geom { : centr */, "i8", ALLOC_NONE, 5263680);
allocate([97,118,101,46,32,110,101,119,32,111,114,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. new or merged f */, "i8", ALLOC_NONE, 5263724);
allocate([113,104,95,114,111,116,97,116,101,112,111,105,110,116,115,58,32,114,111,116,97,116,101,32,112,111,105,110,116,115,32,98,121,0] /* qh_rotatepoints: rot */, "i8", ALLOC_NONE, 5263764);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,114,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263800);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,37,100,32,110,101,105,103,104,98,111,114,115,44,32,109,101,114,103,101,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5263876);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of nearly i */, "i8", ALLOC_NONE, 5263956);
allocate([123,73,78,83,84,32,103,101,111,109,32,123,32,100,101,102,105,110,101,32,99,101,110,116,114,117,109,32,67,81,85,65,68,32,32,35,32,102,37,100,10,45,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,45,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,10,0] /* {INST geom { define  */, "i8", ALLOC_NONE, 5263996);
allocate([97,118,101,46,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. horizon facets  */, "i8", ALLOC_NONE, 5264172);
allocate([113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,58,32,112,114,111,106,101,99,116,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,100,105,109,32,37,100,32,116,111,32,100,105,109,32,37,100,10,0] /* qh_projectpoints: pr */, "i8", ALLOC_NONE, 5264208);
allocate([118,101,114,116,105,99,101,115,32,102,111,114,32,114,0] /* vertices for r\00 */, "i8", ALLOC_NONE, 5264272);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,100,101,108,101,116,101,100,32,118,37,100,32,98,101,99,97,117,115,101,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5264288);
allocate([32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,101,108,101,116,101,100,32,112,111,105,110,116,115,32,100,117,101,32,116,111,32,109,101,114,103,105,110,103,58,32,37,100,10,0] /*   Total number of de */, "i8", ALLOC_NONE, 5264356);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,45,110,111,114,109,97,108,32,45,101,100,103,101,32,110,111,114,109,115,99,97,108,101,32,48,125,32,0] /* {appearance {-normal */, "i8", ALLOC_NONE, 5264412);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,110,111,114,109,41,58,32,116,111,111,32,102,101,119,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,109,112,117,116,101,32,115,101,112,97,114,97,116,105,110,103,32,112,108,97,110,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264456);
allocate([97,118,101,46,32,118,105,115,105,98,108,101,32,118,101,114,116,105,99,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. visible vertice */, "i8", ALLOC_NONE, 5264540);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,41,58,32,110,101,119,100,105,109,32,37,100,32,115,104,111,117,108,100,32,98,101,32,37,100,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264576);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264660);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,46,32,32,68,101,108,101,116,101,100,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5264740);
allocate(1, "i8", ALLOC_NONE, 5264804);
allocate([10,87,104,105,108,101,32,101,120,101,99,117,116,105,110,103,58,32,37,115,32,124,32,37,115,10,0] /* \0AWhile executing:  */, "i8", ALLOC_NONE, 5264808);
allocate([32,48,10,0] /*  0\0A\00 */, "i8", ALLOC_NONE, 5264836);
allocate([109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,105,110,32,104,121,112,101,114,112,108,97,110,101,32,99,111,109,112,117,116,97,116,105,111,110,0] /* min. denominator in  */, "i8", ALLOC_NONE, 5264840);
allocate([32,32,32,32,109,97,120,105,109,117,109,0] /*     maximum\00 */, "i8", ALLOC_NONE, 5264884);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264896);
allocate([113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,112,114,111,106,101,99,116,101,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,10,0] /* qh_projectinput: pro */, "i8", ALLOC_NONE, 5264968);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,101,105,103,104,98,111,114,32,102,37,100,44,32,98,117,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265032);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,44,32,119,105,108,108,32,109,101,114,103,101,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5265136);
allocate([32,97,110,100,32,97,116,45,105,110,102,105,110,105,116,121,0] /*  and at-infinity\00 */, "i8", ALLOC_NONE, 5265204);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,98,101,103,105,110,41,58,32,99,97,110,32,110,111,116,32,117,115,101,32,116,104,105,115,32,102,111,114,109,97,116,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265224);
allocate([32,32,97,118,101,46,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*   ave. facets delete */, "i8", ALLOC_NONE, 5265304);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,72,65,76,70,115,112,97,99,101,32,100,101,102,105,110,101,100,32,119,105,116,104,111,117,116,32,113,104,46,102,101,97,115,105,98,108,101,95,112,111,105,110,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265340);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,119,97,115,32,112,37,100,46,0] /*   Last point added w */, "i8", ALLOC_NONE, 5265428);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,116,105,108,108,32,104,97,115,32,97,32,77,69,82,71,69,32,111,114,32,68,85,80,32,110,101,105,103,104,98,111,114,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265456);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,97,110,116,41,58,32,102,37,100,32,114,101,100,117,110,100,97,110,116,32,98,117,116,32,102,37,100,32,104,97,115,32,110,111,32,114,101,112,108,97,99,101,109,101,110,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265540);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,86,111,114,111,110,111,105,32,114,101,103,105,111,110,115,37,115,58,32,37,100,10,0] /*   Number of Voronoi  */, "i8", ALLOC_NONE, 5265632);
allocate([37,115,32,124,32,37,115,10,98,101,103,105,110,10,37,100,32,37,100,32,114,101,97,108,10,0] /* %s | %s\0Abegin\0A%d */, "i8", ALLOC_NONE, 5265668);
allocate([32,32,97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,119,105,116,104,111,117,116,32,97,110,32,104,111,114,105,122,111,110,32,110,101,105,103,104,98,111,114,0] /*   ave. visible facet */, "i8", ALLOC_NONE, 5265696);
allocate([113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,117,112,100,97,116,105,110,103,32,108,111,119,101,114,32,97,110,100,32,117,112,112,101,114,95,98,111,117,110,100,10,0] /* qh_projectinput: upd */, "i8", ALLOC_NONE, 5265748);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,114,105,100,103,101,115,32,37,100,32,60,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,111,114,40,51,45,100,41,32,62,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,40,50,45,100,41,32,110,111,116,32,97,108,108,32,50,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265800);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* qh_maydropneighbors: */, "i8", ALLOC_NONE, 5265924);
allocate([10,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AVoronoi diagram b */, "i8", ALLOC_NONE, 5265968);
allocate([37,100,10,37,100,32,37,100,32,37,100,10,0] /* %d\0A%d %d %d\0A\00 */, "i8", ALLOC_NONE, 5266028);
allocate([97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. visible facets  */, "i8", ALLOC_NONE, 5266044);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5266080);
allocate(1, "i8", ALLOC_NONE, 5266136);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,60,32,113,104,32,104,117,108,108,95,100,105,109,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266140);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_maydropneighbor:  */, "i8", ALLOC_NONE, 5266240);
allocate([10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AFurthest-site Vor */, "i8", ALLOC_NONE, 5266316);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,41,58,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,102,111,114,32,104,111,114,105,122,111,110,32,102,37,100,32,111,102,32,110,101,119,102,97,99,101,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266392);
allocate([123,10,0] /* {\0A\00 */, "i8", ALLOC_NONE, 5266496);
allocate([109,97,120,46,32,118,101,114,116,105,99,101,115,32,97,116,32,97,110,121,32,111,110,101,32,116,105,109,101,0] /* max. vertices at any */, "i8", ALLOC_NONE, 5266500);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,100,105,109,101,110,115,105,111,110,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,32,37,100,32,33,61,32,104,117,108,108,95,100,105,109,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266532);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,33,61,32,50,42,113,104,32,104,117,108,108,95,100,105,109,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266620);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,110,111,32,114,105,100,103,101,115,32,116,111,32,97,32,110,101,105,103,104,98,111,114,10,0] /* qh_maydropneighbor:  */, "i8", ALLOC_NONE, 5266732);
allocate([10,65,116,32,97,32,112,114,101,109,97,116,117,114,101,32,101,120,105,116,32,100,117,101,32,116,111,32,39,84,86,110,39,44,32,39,84,67,110,39,44,32,39,84,82,110,39,44,32,111,114,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,119,105,116,104,32,39,81,74,110,39,46,0] /* \0AAt a premature ex */, "i8", ALLOC_NONE, 5266792);
allocate([80,76,79,84,51,68,40,80,79,76,89,71,79,78,83,40,10,0] /* PLOT3D(POLYGONS(\0A\ */, "i8", ALLOC_NONE, 5266872);
allocate([32,32,109,97,120,46,32,114,97,110,100,111,109,32,106,111,103,103,108,101,0] /*   max. random joggle */, "i8", ALLOC_NONE, 5266892);
allocate([113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,115,116,97,114,116,105,110,103,32,116,111,32,109,101,114,103,101,32,102,97,99,101,116,115,32,98,101,103,105,110,110,105,110,103,32,102,114,111,109,32,102,37,100,10,0] /* qh_all_merges: start */, "i8", ALLOC_NONE, 5266916);
allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_NONE, 5266976);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,105,99,101,115,32,111,102,32,102,37,100,32,97,114,101,32,110,111,116,32,105,110,32,100,101,115,99,101,110,100,105,110,103,32,105,100,32,111,114,100,101,114,32,97,116,32,118,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266980);
allocate([113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0] /* qh_mark_dupridges: f */, "i8", ALLOC_NONE, 5267076);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5267124);
allocate([113,104,95,112,114,101,99,105,115,105,111,110,58,32,113,104,117,108,108,32,114,101,115,116,97,114,116,32,98,101,99,97,117,115,101,32,111,102,32,37,115,10,0] /* qh_precision: qhull  */, "i8", ALLOC_NONE, 5267180);
allocate([80,76,79,84,40,67,85,82,86,69,83,40,10,0] /* PLOT(CURVES(\0A\00 */, "i8", ALLOC_NONE, 5267224);
allocate([114,101,116,114,105,101,115,32,100,117,101,32,116,111,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,0] /* retries due to preci */, "i8", ALLOC_NONE, 5267240);
allocate([32,112,37,100,0] /*  p%d\00 */, "i8", ALLOC_NONE, 5267276);
allocate([69,82,82,79,78,69,79,85,83,0] /* ERRONEOUS\00 */, "i8", ALLOC_NONE, 5267284);
allocate([113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,105,100,101,110,116,105,102,121,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,10,0] /* qh_mark_dupridges: i */, "i8", ALLOC_NONE, 5267296);
allocate([113,104,95,113,104,117,108,108,58,32,97,108,108,32,102,97,99,101,116,115,32,97,114,101,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,32,97,110,100,32,110,111,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,46,32,32,80,111,115,116,45,109,101,114,103,105,110,103,32,97,110,100,32,99,104,101,99,107,32,111,102,32,109,97,120,111,117,116,32,110,111,116,32,110,101,101,100,101,100,46,10,0] /* qh_qhull: all facets */, "i8", ALLOC_NONE, 5267344);
allocate([10,84,101,115,116,105,110,103,32,97,108,108,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,46,10,0] /* \0ATesting all copla */, "i8", ALLOC_NONE, 5267456);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,58,32,112,97,114,116,105,116,105,111,110,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,111,117,116,115,105,100,101,115,101,116,115,32,97,110,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,99,111,112,108,97,110,97,114,115,101,116,115,10,0] /* qh_partitionvisible: */, "i8", ALLOC_NONE, 5267488);
allocate([69,114,114,111,114,45,114,111,117,110,100,111,102,102,0] /* Error-roundoff\00 */, "i8", ALLOC_NONE, 5267584);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,105,115,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5267600);
allocate([112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,0] /* points processed\00 */, "i8", ALLOC_NONE, 5267656);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5267676);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,100,101,108,101,116,101,100,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5267680);
allocate([113,104,95,109,97,107,101,114,105,100,103,101,115,58,32,109,97,107,101,32,114,105,100,103,101,115,32,102,111,114,32,102,37,100,10,0] /* qh_makeridges: make  */, "i8", ALLOC_NONE, 5267748);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,41,58,32,97,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,97,115,10,32,32,32,32,32,32,32,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,46,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5267784);
allocate([37,115,32,124,32,37,115,10,98,101,103,105,110,10,32,32,32,32,37,100,32,37,100,32,114,101,97,108,10,0] /* %s | %s\0Abegin\0A   */, "i8", ALLOC_NONE, 5267904);
allocate([98,117,105,108,100,32,104,117,108,108,32,115,116,97,116,105,115,116,105,99,115,0] /* build hull statistic */, "i8", ALLOC_NONE, 5267936);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5267960);
allocate([110,101,105,103,104,98,111,114,115,32,102,111,114,32,102,0] /* neighbors for f\00 */, "i8", ALLOC_NONE, 5267964);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,95,105,110,105,116,105,97,108,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0] /* qh_getmergeset_initi */, "i8", ALLOC_NONE, 5267980);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,97,108,108,32,102,97,99,101,116,115,44,32,99,108,111,115,101,115,116,32,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5268024);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,119,114,105,116,105,110,103,32,68,101,108,97,117,110,97,121,46,32,32,85,115,101,32,39,112,39,32,111,114,32,39,111,39,32,102,111,114,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,10,0] /* qhull warning: writi */, "i8", ALLOC_NONE, 5268104);
allocate([32,32,109,105,110,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0] /*   minimum facet area */, "i8", ALLOC_NONE, 5268176);
allocate([37,54,46,51,103,32,0] /* %6.3g \00 */, "i8", ALLOC_NONE, 5268200);
allocate([99,111,112,108,97,110,97,114,115,101,116,32,102,111,114,32,102,0] /* coplanarset for f\00 */, "i8", ALLOC_NONE, 5268208);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0] /* qh_getmergeset: %d m */, "i8", ALLOC_NONE, 5268228);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,102,97,99,101,116,32,102,37,100,32,40,100,114,111,112,112,101,100,41,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5268264);
allocate([69,82,82,79,78,69,79,85,83,0] /* ERRONEOUS\00 */, "i8", ALLOC_NONE, 5268332);
allocate([52,79,70,70,32,37,100,32,37,100,32,49,10,0] /* 4OFF %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5268344);
allocate([109,105,110,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* min. distance of an  */, "i8", ALLOC_NONE, 5268360);
allocate([32,32,109,97,120,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0] /*   maximum facet area */, "i8", ALLOC_NONE, 5268408);
allocate([69,82,82,79,78,69,79,85,83,0] /* ERRONEOUS\00 */, "i8", ALLOC_NONE, 5268432);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5268444);
allocate([111,117,116,115,105,100,101,115,101,116,32,102,111,114,32,102,0] /* outsideset for f\00 */, "i8", ALLOC_NONE, 5268448);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,115,116,97,114,116,101,100,46,10,0] /* qh_getmergeset: star */, "i8", ALLOC_NONE, 5268468);
allocate([110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,0] /* nearly incident poin */, "i8", ALLOC_NONE, 5268496);
allocate([48,32,49,32,49,32,49,32,32,35,32,99,111,108,111,114,32,111,102,32,112,111,105,110,116,115,10,0] /* 0 1 1 1  # color of  */, "i8", ALLOC_NONE, 5268520);
allocate([10,73,102,32,116,104,101,32,105,110,112,117,116,32,105,115,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,107,58,48,66,107,58,48,39,32,116,111,32,100,101,108,101,116,101,32,99,111,111,114,100,105,110,97,116,101,32,107,32,102,114,111,109,32,116,104,101,32,105,110,112,117,116,46,32,32,89,111,117,32,115,104,111,117,108,100,10,32,32,32,32,112,105,99,107,32,116,104,101,32,99,111,111,114,100,105,110,97,116,101,32,119,105,116,104,32,116,104,101,32,108,101,97,115,116,32,114,97,110,103,101,46,32,32,84,104,101,32,104,117,108,108,32,119,105,108,108,32,104,97,118,101,32,116,104,101,10,32,32,32,32,99,111,114,114,101,99,116,32,116,111,112,111,108,111,103,121,46,10,32,32,45,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,102,108,97,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,112,111,105,110,116,115,44,32,114,111,116,97,116,101,32,116,104,101,32,112,111,105,110,116,115,10,32,32,32,32,105,110,116,111,32,97,32,99,111,111,114,100,105,110,97,116,101,32,112,108,97,110,101,44,32,97,110,100,32,100,101,108,101,116,101,32,116,104,101,32,111,116,104,101,114,32,99,111,111,114,100,105,110,97,116,101,115,46,10,32,32,45,32,97,100,100,32,111,110,101,32,111,114,32,109,111,114,101,32,112,111,105,110,116,115,32,116,111,32,109,97,107,101,32,116,104,101,32,105,110,112,117,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,46,10,0] /* \0AIf the input is l */, "i8", ALLOC_NONE, 5268548);
allocate([116,111,116,97,108,32,97,114,101,97,32,111,102,32,102,97,99,101,116,115,0] /* total area of facets */, "i8", ALLOC_NONE, 5269000);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,108,101,99,116,101,100,32,112,111,105,110,116,32,112,37,100,32,102,111,114,32,37,100,96,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,100,101,116,61,37,50,46,50,103,10,0] /* qh_maxsimplex: selec */, "i8", ALLOC_NONE, 5269024);
allocate([32,32,116,101,115,116,104,111,114,105,122,111,110,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,0] /*   testhorizon? %d no */, "i8", ALLOC_NONE, 5269096);
allocate([114,105,100,103,101,115,32,102,111,114,32,102,0] /* ridges for f\00 */, "i8", ALLOC_NONE, 5269128);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,41,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,32,97,118,97,105,108,97,98,108,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5269144);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,99,114,111,115,115,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0] /* qh_forcedmerges: mer */, "i8", ALLOC_NONE, 5269212);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,110,101,119,63,32,37,100,32,40,111,114,32,110,97,114,114,111,119,104,117,108,108,41,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5269296);
allocate([35,32,49,32,99,111,108,111,114,32,102,111,114,32,97,108,108,10,0] /* # 1 color for all\0A */, "i8", ALLOC_NONE, 5269372);
allocate([10,73,102,32,116,104,101,32,105,110,112,117,116,32,115,104,111,117,108,100,32,98,101,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,44,32,121,111,117,32,104,97,118,101,32,115,101,118,101,114,97,108,32,111,112,116,105,111,110,115,32,116,104,97,116,10,109,97,121,32,100,101,116,101,114,109,105,110,101,32,97,110,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,112,111,105,110,116,115,32,116,111,32,116,104,101,32,117,110,105,116,32,99,117,98,101,10,32,32,45,32,117,115,101,32,39,81,82,48,39,32,116,111,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,101,32,116,104,101,32,105,110,112,117,116,32,102,111,114,32,100,105,102,102,101,114,101,110,116,32,109,97,120,105,109,117,109,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,39,81,115,39,32,32,116,111,32,115,101,97,114,99,104,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,116,104,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,10,32,32,45,32,117,115,101,32,39,69,110,39,32,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,116,114,97,99,101,32,101,120,101,99,117,116,105,111,110,32,119,105,116,104,32,39,84,51,39,32,116,111,32,115,101,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,101,97,99,104,32,112,111,105,110,116,46,10,0] /* \0AIf the input shou */, "i8", ALLOC_NONE, 5269392);
allocate([32,32,109,105,110,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0] /*   minimum angle(cosi */, "i8", ALLOC_NONE, 5269880);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,99,111,112,121,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5269936);
allocate([118,101,114,116,105,99,101,115,32,102,111,114,32,102,0] /* vertices for f\00 */, "i8", ALLOC_NONE, 5269988);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,98,101,116,116,101,114,32,116,104,97,110,32,112,37,100,32,100,101,116,32,37,50,46,50,103,10,0] /* qh_maxsimplex: searc */, "i8", ALLOC_NONE, 5270004);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,44,32,100,105,115,116,32,37,50,46,50,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_forcedmerges: dup */, "i8", ALLOC_NONE, 5270096);
allocate([110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,40,110,97,114,114,111,119,32,104,117,108,108,41,0] /* nearly incident poin */, "i8", ALLOC_NONE, 5270196);
allocate([48,32,0] /* 0 \00 */, "i8", ALLOC_NONE, 5270232);
allocate([32,32,37,100,58,32,32,37,56,46,52,103,32,32,37,56,46,52,103,32,32,100,105,102,102,101,114,101,110,99,101,61,32,37,52,46,52,103,10,0] /*   %d:  %8.4g  %8.4g  */, "i8", ALLOC_NONE, 5270236);
allocate([32,32,109,97,120,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0] /*   maximum angle(cosi */, "i8", ALLOC_NONE, 5270276);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,97,116,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_gau */, "i8", ALLOC_NONE, 5270332);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,32,97,32,110,111,114,109,97,108,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5270424);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,46,10,0] /* qh_maxsimplex: searc */, "i8", ALLOC_NONE, 5270500);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,41,58,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,100,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,117,116,32,97,115,32,102,37,100,32,97,110,100,32,102,37,100,32,116,104,101,121,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5270564);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,102,97,99,101,116,32,102,37,100,40,111,114,32,105,110,115,105,100,101,41,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5270688);
allocate([113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,97,116,116,97,99,104,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,116,111,32,110,101,119,32,102,97,99,101,116,115,10,0] /* qh_attachnewfacets:  */, "i8", ALLOC_NONE, 5270772);
allocate([35,32,49,32,112,111,105,110,116,32,112,101,114,32,108,105,110,101,10,49,32,0] /* # 1 point per line\0 */, "i8", ALLOC_NONE, 5270832);
allocate([10,84,104,101,32,109,105,110,32,97,110,100,32,109,97,120,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,101,97,99,104,32,100,105,109,101,110,115,105,111,110,32,97,114,101,58,10,0] /* \0AThe min and max c */, "i8", ALLOC_NONE, 5270856);
allocate([97,118,101,114,97,103,101,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0] /* average angle(cosine */, "i8", ALLOC_NONE, 5270912);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_gau */, "i8", ALLOC_NONE, 5270968);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,111,110,32,116,104,101,32,118,105,115,105,98,108,101,95,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5271052);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,105,110,112,117,116,32,105,115,32,108,101,115,115,32,116,104,97,110,32,37,100,45,100,105,109,101,110,115,105,111,110,97,108,32,115,105,110,99,101,32,105,116,32,104,97,115,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,10,0] /* qhull input error: i */, "i8", ALLOC_NONE, 5271124);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0] /* qh_forcedmerges: beg */, "i8", ALLOC_NONE, 5271216);
allocate([68,73,83,84,65,78,84,0] /* DISTANT\00 */, "i8", ALLOC_NONE, 5271240);
allocate([86,69,67,84,32,37,100,32,37,100,32,49,10,0] /* VECT %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5271248);
allocate([10,66,101,99,97,117,115,101,32,111,102,32,116,104,101,32,104,105,103,104,32,100,105,109,101,110,115,105,111,110,44,32,116,104,101,32,109,105,110,32,120,45,99,111,111,114,100,105,110,97,116,101,32,97,110,100,32,109,97,120,45,99,111,111,114,100,105,110,97,116,101,10,112,111,105,110,116,115,32,97,114,101,32,117,115,101,100,32,105,102,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,105,115,32,110,111,110,45,122,101,114,111,46,32,32,79,112,116,105,111,110,32,39,81,115,39,32,119,105,108,108,10,100,111,32,97,32,98,101,116,116,101,114,44,32,116,104,111,117,103,104,32,109,117,99,104,32,115,108,111,119,101,114,44,32,106,111,98,46,32,32,73,110,115,116,101,97,100,32,111,102,32,39,81,115,39,44,32,121,111,117,32,99,97,110,32,99,104,97,110,103,101,10,116,104,101,32,112,111,105,110,116,115,32,98,121,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,105,110,103,32,116,104,101,32,105,110,112,117,116,32,119,105,116,104,32,39,81,82,48,39,46,10,0] /* \0ABecause of the hi */, "i8", ALLOC_NONE, 5271264);
allocate([32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,115,32,102,111,114,32,97,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0] /*   maximum merges for */, "i8", ALLOC_NONE, 5271528);
allocate([113,104,95,112,111,115,116,109,101,114,103,101,58,32,112,111,115,116,109,101,114,103,101,46,32,32,116,101,115,116,32,118,110,101,105,103,104,98,111,114,115,63,32,37,100,10,0] /* qh_postmerge: postme */, "i8", ALLOC_NONE, 5271572);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,100,101,116,58,32,100,101,103,101,110,101,114,97,116,101,32,110,111,114,109,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_det */, "i8", ALLOC_NONE, 5271620);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5271672);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,32,102,111,114,32,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,37,100,32,112,111,105,110,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5271768);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,116,111,32,97,32,103,111,111,100,32,110,101,105,103,104,98,111,114,10,0] /* qh_flippedmerges: me */, "i8", ALLOC_NONE, 5271868);
allocate([113,104,95,109,101,109,97,108,108,111,99,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,115,104,111,114,116,32,116,111,116,98,117,102,102,101,114,32,37,100,32,33,61,32,116,111,116,115,104,111,114,116,43,116,111,116,102,114,101,101,46,46,46,32,37,100,10,0] /* qh_memalloc internal */, "i8", ALLOC_NONE, 5271936);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,61,61,61,61,61,61,32,112,37,100,32,102,114,111,109,32,102,37,100,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,111,102,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5272012);
allocate([52,86,69,67,84,32,37,100,32,37,100,32,49,10,0] /* 4VECT %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5272104);
allocate([10,84,104,101,115,101,32,112,111,105,110,116,115,32,101,105,116,104,101,114,32,104,97,118,101,32,97,32,109,97,120,105,109,117,109,32,111,114,32,109,105,110,105,109,117,109,32,120,45,99,111,111,114,100,105,110,97,116,101,44,32,111,114,10,116,104,101,121,32,109,97,120,105,109,105,122,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,107,32,99,111,111,114,100,105,110,97,116,101,115,46,32,32,84,114,105,97,108,32,112,111,105,110,116,115,10,97,114,101,32,102,105,114,115,116,32,115,101,108,101,99,116,101,100,32,102,114,111,109,32,112,111,105,110,116,115,32,116,104,97,116,32,109,97,120,105,109,105,122,101,32,97,32,99,111,111,114,100,105,110,97,116,101,46,10,0] /* \0AThese points eith */, "i8", ALLOC_NONE, 5272120);
allocate([97,118,101,114,97,103,101,32,109,101,114,103,101,115,32,112,101,114,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0] /* average merges per f */, "i8", ALLOC_NONE, 5272308);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5272348);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5272352);
allocate([113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,32,102,37,100,10,0] /* qh_updatevertices: d */, "i8", ALLOC_NONE, 5272436);
allocate([105,110,112,117,116,32,104,97,115,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,0] /* input has same x coo */, "i8", ALLOC_NONE, 5272488);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,32,102,108,105,112,112,101,100,32,102,37,100,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_flippedmerges: me */, "i8", ALLOC_NONE, 5272516);
allocate([70,111,114,32,112,111,115,116,45,109,101,114,103,105,110,103,0] /* For post-merging\00 */, "i8", ALLOC_NONE, 5272584);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,114,101,112,97,114,116,105,116,105,111,110,32,112,111,105,110,116,32,112,37,100,32,102,114,111,109,32,102,37,100,46,32,32,73,116,32,105,115,32,97,98,111,118,101,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5272604);
allocate([76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* LIST # %s | %s\0A\00 */, "i8", ALLOC_NONE, 5272704);
allocate([95,109,97,120,45,119,105,100,116,104,0] /* _max-width\00 */, "i8", ALLOC_NONE, 5272720);
allocate([10,84,104,101,115,101,32,112,111,105,110,116,115,32,97,114,101,32,116,104,101,32,100,117,97,108,32,111,102,32,116,104,101,32,103,105,118,101,110,32,104,97,108,102,115,112,97,99,101,115,46,32,32,84,104,101,121,32,105,110,100,105,99,97,116,101,32,116,104,97,116,10,116,104,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* \0AThese points are  */, "i8", ALLOC_NONE, 5272732);
allocate([102,97,99,101,116,115,32,98,101,102,111,114,101,32,112,111,115,116,32,109,101,114,103,101,0] /* facets before post m */, "i8", ALLOC_NONE, 5272840);
allocate([37,50,46,50,103,32,0] /* %2.2g \00 */, "i8", ALLOC_NONE, 5272868);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,32,116,101,115,116,46,32,32,84,104,105,115,32,109,97,121,32,108,101,97,100,32,116,111,32,102,97,108,115,101,44,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,46,10,0] /* qhull warning: recom */, "i8", ALLOC_NONE, 5272876);
allocate([113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,117,112,100,97,116,101,32,118,101,114,116,101,120,45,62,110,101,105,103,104,98,111,114,115,10,0] /* qh_updatevertices: d */, "i8", ALLOC_NONE, 5272976);
allocate([113,104,95,109,97,120,111,117,116,101,114,58,32,109,97,120,32,100,105,115,116,97,110,99,101,32,102,114,111,109,32,102,97,99,101,116,32,116,111,32,111,117,116,101,114,32,112,108,97,110,101,32,105,115,32,37,50,46,50,103,32,109,97,120,95,111,117,116,115,105,100,101,32,105,115,32,37,50,46,50,103,10,0] /* qh_maxouter: max dis */, "i8", ALLOC_NONE, 5273052);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0] /* qh_flippedmerges: be */, "i8", ALLOC_NONE, 5273136);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5273164);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,101,118,101,114,116,32,108,105,110,101,119,105,100,116,104,32,50,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* {appearance {+edge - */, "i8", ALLOC_NONE, 5273244);
allocate([32,100,105,115,116,97,110,99,101,61,32,37,52,46,50,103,10,0] /*  distance= %4.2g\0A\ */, "i8", ALLOC_NONE, 5273300);
allocate([114,105,100,103,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* ridges created altog */, "i8", ALLOC_NONE, 5273320);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,37,100,32,111,102,102,115,101,116,32,37,50,46,50,103,32,110,111,114,109,97,108,58,32,0] /* qh_setfacetplane: f% */, "i8", ALLOC_NONE, 5273348);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,109,97,121,32,98,101,32,99,111,112,108,97,110,97,114,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,119,105,116,104,105,110,32,37,54,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5273392);
allocate([113,104,95,114,101,109,111,118,101,118,101,114,116,101,120,58,32,114,101,109,111,118,101,32,118,37,100,32,102,114,111,109,32,118,101,114,116,101,120,95,108,105,115,116,10,0] /* qh_removevertex: rem */, "i8", ALLOC_NONE, 5273488);
allocate([113,104,95,109,97,120,109,105,110,58,32,102,111,117,110,100,32,116,104,101,32,109,97,120,32,97,110,100,32,109,105,110,32,112,111,105,110,116,115,40,98,121,32,100,105,109,41,58,0] /* qh_maxmin: found the */, "i8", ALLOC_NONE, 5273536);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,58,32,102,37,100,32,105,115,32,98,101,115,116,32,110,101,105,103,104,98,111,114,32,102,111,114,32,102,37,100,32,116,101,115,116,99,101,110,116,114,117,109,63,32,37,100,32,110,111,110,99,111,110,118,101,120,63,32,37,100,32,100,105,115,116,32,37,50,46,50,103,32,109,105,110,32,37,50,46,50,103,32,109,97,120,32,37,50,46,50,103,10,0] /* qh_findbestneighbor: */, "i8", ALLOC_NONE, 5273588);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,109,111,114,101,32,116,104,97,110,32,110,101,97,114,45,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5273700);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,108,105,110,101,119,105,100,116,104,32,51,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* {appearance {linewid */, "i8", ALLOC_NONE, 5273796);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,50,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5273840);
allocate([32,112,37,100,0] /*  p%d\00 */, "i8", ALLOC_NONE, 5273916);
allocate([102,97,99,101,116,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* facets created altog */, "i8", ALLOC_NONE, 5273924);
allocate([68,73,83,84,65,78,84,0] /* DISTANT\00 */, "i8", ALLOC_NONE, 5273952);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,108,101,97,114,108,121,32,110,111,116,32,99,111,110,118,101,120,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5273960);
allocate([113,104,95,114,101,109,111,118,101,102,97,99,101,116,58,32,114,101,109,111,118,101,32,102,37,100,32,102,114,111,109,32,102,97,99,101,116,95,108,105,115,116,10,0] /* qh_removefacet: remo */, "i8", ALLOC_NONE, 5274048);
allocate([113,104,95,106,111,103,103,108,101,105,110,112,117,116,58,32,106,111,103,103,108,101,32,105,110,112,117,116,32,98,121,32,37,50,46,50,103,32,119,105,116,104,32,115,101,101,100,32,37,100,10,0] /* qh_joggleinput: jogg */, "i8", ALLOC_NONE, 5274092);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,41,58,32,110,111,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5274144);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,97,108,108,58,32,112,97,114,116,105,116,105,111,110,32,97,108,108,32,112,111,105,110,116,115,32,105,110,116,111,32,111,117,116,115,105,100,101,32,115,101,116,115,10,0] /* qh_partitionall: par */, "i8", ALLOC_NONE, 5274212);
allocate([10,113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0] /* \0Aqhull error while */, "i8", ALLOC_NONE, 5274272);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,39,71,110,104,39,32,103,101,110,101,114,97,116,101,115,32,110,111,32,111,117,116,112,117,116,32,105,110,32,52,45,100,10,0] /* qhull warning: 'Gnh' */, "i8", ALLOC_NONE, 5274336);
allocate([109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* max. distance of an  */, "i8", ALLOC_NONE, 5274388);
allocate([102,97,99,101,116,0] /* facet\00 */, "i8", ALLOC_NONE, 5274436);
allocate([118,101,114,116,105,99,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* vertices created alt */, "i8", ALLOC_NONE, 5274444);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,37,115,37,100,40,115,105,122,101,32,37,100,32,109,97,120,32,37,100,41,32,105,115,32,110,111,116,32,110,117,108,108,32,116,101,114,109,105,110,97,116,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5274472);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,61,61,61,61,61,61,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,102,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0] /* qh_setfacetplane: == */, "i8", ALLOC_NONE, 5274556);
allocate([99,111,112,108,97,110,97,114,32,114,105,100,103,101,0] /* coplanar ridge\00 */, "i8", ALLOC_NONE, 5274656);
allocate([113,104,95,110,101,119,114,105,100,103,101,58,32,99,114,101,97,116,101,100,32,114,105,100,103,101,32,114,37,100,10,0] /* qh_newridge: created */, "i8", ALLOC_NONE, 5274672);
allocate([95,106,111,103,103,108,101,45,115,101,101,100,0] /* _joggle-seed\00 */, "i8", ALLOC_NONE, 5274704);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,110,111,32,118,101,114,116,101,120,32,102,111,114,32,114,101,110,97,109,105,110,103,32,118,37,100,40,97,108,108,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,41,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_find_newvertex: n */, "i8", ALLOC_NONE, 5274720);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,120,116,102,117,114,116,104,101,115,116,41,58,32,110,117,109,95,111,117,116,115,105,100,101,32,37,100,32,105,115,32,116,111,111,32,108,111,119,10,98,121,32,97,116,32,108,101,97,115,116,32,37,100,44,32,111,114,32,97,32,114,97,110,100,111,109,32,114,101,97,108,32,37,103,32,62,61,32,49,46,48,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5274804);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5274916);
allocate([99,101,110,116,101,114,32,112,111,105,110,116,0] /* center point\00 */, "i8", ALLOC_NONE, 5274976);
allocate([99,112,117,32,115,101,99,111,110,100,115,32,102,111,114,32,113,104,117,108,108,32,97,102,116,101,114,32,105,110,112,117,116,0] /* cpu seconds for qhul */, "i8", ALLOC_NONE, 5274992);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,32,97,102,116,101,114,32,116,101,115,116,105,110,103,32,105,110,116,101,114,105,111,114,95,112,111,105,110,116,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_setfacetplane: fl */, "i8", ALLOC_NONE, 5275028);
allocate([113,104,95,102,105,110,100,98,101,115,116,58,32,112,111,105,110,116,32,112,37,100,32,115,116,97,114,116,105,110,103,32,97,116,32,102,37,100,32,105,115,110,101,119,102,97,99,101,116,115,63,32,37,100,44,32,117,110,108,101,115,115,32,37,100,32,101,120,105,116,32,105,102,32,62,32,37,50,46,50,103,10,0] /* qh_findbest: point p */, "i8", ALLOC_NONE, 5275108);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5275192);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,114,105,100,103,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,114,105,100,103,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,79,116,104,101,114,119,105,115,101,32,111,117,116,112,117,116,32,111,107,46,10,0] /* qhull warning: more  */, "i8", ALLOC_NONE, 5275272);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,116,104,101,32,99,117,114,114,101,110,116,32,106,111,103,103,108,101,32,102,111,114,32,39,81,74,110,39,44,32,37,46,50,103,44,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,116,104,101,32,119,105,100,116,104,10,111,102,32,116,104,101,32,105,110,112,117,116,46,32,32,73,102,32,112,111,115,115,105,98,108,101,44,32,114,101,99,111,109,112,105,108,101,32,81,104,117,108,108,32,119,105,116,104,32,104,105,103,104,101,114,45,112,114,101,99,105,115,105,111,110,32,114,101,97,108,115,46,10,0] /* qhull error: the cur */, "i8", ALLOC_NONE, 5275396);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,111,117,110,100,32,118,37,100,32,102,111,114,32,111,108,100,32,118,37,100,32,102,114,111,109,32,37,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,105,100,103,101,115,46,10,0] /* qh_find_newvertex: f */, "i8", ALLOC_NONE, 5275548);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,37,100,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,40,103,111,111,100,32,37,100,41,44,32,37,100,32,118,105,115,105,98,108,101,40,103,111,111,100,32,37,100,41,44,32,37,100,32,99,111,112,108,97,110,97,114,10,0] /* qh_findhorizon: %d h */, "i8", ALLOC_NONE, 5275624);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,111,117,116,101,114,47,105,110,110,101,114,32,112,108,97,110,101,115,32,97,110,100,32,99,101,110,116,114,117,109,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5275704);
allocate([10,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,44,32,111,114,32,97,32,118,101,114,116,101,120,32,105,115,32,99,111,112,108,97,110,97,114,10,119,105,116,104,32,97,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,46,32,32,84,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,32,111,102,102,32,101,114,114,111,114,32,102,111,114,10,99,111,109,112,117,116,105,110,103,32,100,105,115,116,97,110,99,101,115,32,105,115,32,37,50,46,50,103,46,32,32,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,44,32,102,97,99,101,116,115,32,97,110,100,32,100,105,115,116,97,110,99,101,115,10,116,111,32,116,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,97,114,101,32,97,115,32,102,111,108,108,111,119,115,58,10,10,0] /* \0AThe center point  */, "i8", ALLOC_NONE, 5275788);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,118,101,114,116,101,120,0] /* average number of ne */, "i8", ALLOC_NONE, 5276024);
allocate([10,10,67,117,114,114,101,110,116,32,115,117,109,109,97,114,121,32,105,115,58,10,0] /* \0A\0ACurrent summar */, "i8", ALLOC_NONE, 5276064);
allocate([99,111,110,99,97,118,101,32,114,105,100,103,101,0] /* concave ridge\00 */, "i8", ALLOC_NONE, 5276088);
allocate([113,104,95,110,101,119,102,97,99,101,116,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_newfacet: created */, "i8", ALLOC_NONE, 5276104);
allocate([81,74,111,103,103,108,101,0] /* QJoggle\00 */, "i8", ALLOC_NONE, 5276136);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,110,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0] /* qh_find_newvertex: v */, "i8", ALLOC_NONE, 5276144);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,101,109,112,116,121,32,104,111,114,105,122,111,110,10,81,104,117,108,108,80,111,105,110,116,32,112,37,100,32,119,97,115,32,97,98,111,118,101,32,97,108,108,32,102,97,99,101,116,115,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5276196);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,50,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5276288);
allocate(1, "i8", ALLOC_NONE, 5276364);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,0] /* maximum number of ve */, "i8", ALLOC_NONE, 5276368);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5276396);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,105,115,32,110,111,116,32,99,111,110,118,101,120,46,32,68,105,115,116,97,110,99,101,61,37,46,50,103,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5276420);
allocate([113,104,95,109,97,116,99,104,118,101,114,116,105,99,101,115,58,32,109,97,116,99,104,101,100,32,98,121,32,115,107,105,112,32,37,100,40,118,37,100,41,32,97,110,100,32,115,107,105,112,32,37,100,40,118,37,100,41,32,115,97,109,101,63,32,37,100,10,0] /* qh_matchvertices: ma */, "i8", ALLOC_NONE, 5276492);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,106,111,103,103,108,101,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5276564);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5276620);
allocate([101,109,112,116,121,32,104,111,114,105,122,111,110,0] /* empty horizon\00 */, "i8", ALLOC_NONE, 5276624);
allocate([113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,114,105,100,103,101,115,10,0] /* qh_attachnewfacets:  */, "i8", ALLOC_NONE, 5276640);
allocate([86,101,114,116,105,99,101,115,32,97,110,100,32,102,97,99,101,116,115,58,10,0] /* Vertices and facets: */, "i8", ALLOC_NONE, 5276684);
allocate([10,84,104,101,32,105,110,112,117,116,32,116,111,32,113,104,117,108,108,32,97,112,112,101,97,114,115,32,116,111,32,98,101,32,108,101,115,115,32,116,104,97,110,32,37,100,32,100,105,109,101,110,115,105,111,110,97,108,44,32,111,114,32,97,10,99,111,109,112,117,116,97,116,105,111,110,32,104,97,115,32,111,118,101,114,102,108,111,119,101,100,46,10,10,81,104,117,108,108,32,99,111,117,108,100,32,110,111,116,32,99,111,110,115,116,114,117,99,116,32,97,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,32,115,105,109,112,108,101,120,32,102,114,111,109,32,112,111,105,110,116,115,58,10,0] /* \0AThe input to qhul */, "i8", ALLOC_NONE, 5276708);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ve */, "i8", ALLOC_NONE, 5276868);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0] /*   Last point added t */, "i8", ALLOC_NONE, 5276908);
allocate([99,111,112,108,97,110,97,114,32,111,114,32,99,111,110,99,97,118,101,32,114,105,100,103,101,0] /* coplanar or concave  */, "i8", ALLOC_NONE, 5276944);
allocate([113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,37,100,32,110,101,119,32,102,97,99,101,116,115,44,32,37,100,32,117,110,117,115,101,100,32,104,97,115,104,32,101,110,116,114,105,101,115,32,46,32,32,104,97,115,104,115,105,122,101,32,37,100,10,0] /* qh_matchnewfacets: % */, "i8", ALLOC_NONE, 5276972);
allocate([113,104,95,103,101,116,97,114,101,97,58,32,99,111,109,112,117,116,105,110,103,32,118,111,108,117,109,101,32,97,110,100,32,97,114,101,97,32,102,111,114,32,101,97,99,104,32,102,97,99,101,116,10,0] /* qh_getarea: computin */, "i8", ALLOC_NONE, 5277048);
allocate([114,37,100,32,0] /* r%d \00 */, "i8", ALLOC_NONE, 5277104);
allocate([104,111,114,105,122,111,110,0] /* horizon\00 */, "i8", ALLOC_NONE, 5277112);
allocate([37,100,10,37,100,10,0] /* %d\0A%d\0A\00 */, "i8", ALLOC_NONE, 5277120);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,119,97,114,110,105,110,103,58,32,10,84,104,101,32,105,110,105,116,105,97,108,32,104,117,108,108,32,105,115,32,110,97,114,114,111,119,32,40,99,111,115,105,110,101,32,111,102,32,109,105,110,46,32,97,110,103,108,101,32,105,115,32,37,46,49,54,102,41,46,10,73,115,32,116,104,101,32,105,110,112,117,116,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,32,40,101,46,103,46,44,32,111,110,32,97,32,112,108,97,110,101,32,105,110,32,51,45,100,41,63,32,32,81,104,117,108,108,32,109,97,121,10,112,114,111,100,117,99,101,32,97,32,119,105,100,101,32,102,97,99,101,116,46,32,32,79,112,116,105,111,110,115,32,39,81,98,66,39,32,40,115,99,97,108,101,32,116,111,32,117,110,105,116,32,98,111,120,41,32,111,114,32,39,81,98,98,39,32,40,115,99,97,108,101,10,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,41,32,109,97,121,32,114,101,109,111,118,101,32,116,104,105,115,32,119,97,114,110,105,110,103,46,32,32,85,115,101,32,39,80,112,39,32,116,111,32,115,107,105,112,32,116,104,105,115,32,119,97,114,110,105,110,103,46,10,83,101,101,32,39,76,105,109,105,116,97,116,105,111,110,115,39,32,105,110,32,113,104,45,105,109,112,114,101,46,104,116,109,46,10,0] /* qhull precision warn */, "i8", ALLOC_NONE, 5277128);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,0] /* maximum number of ne */, "i8", ALLOC_NONE, 5277468);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,97,99,101,116,32,102,37,100,32,99,114,101,97,116,101,100,46,10,0] /* qh_setfacetplane: fa */, "i8", ALLOC_NONE, 5277496);
allocate([10,37,115,32,119,105,116,104,32,39,67,37,46,50,103,39,32,97,110,100,32,39,65,37,46,50,103,39,10,0] /* \0A%s with 'C%.2g' a */, "i8", ALLOC_NONE, 5277536);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,40,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,32,111,117,116,115,105,100,101,41,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5277568);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,41,58,32,37,100,32,110,101,105,103,104,98,111,114,115,32,100,105,100,32,110,111,116,32,109,97,116,99,104,32,117,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5277636);
allocate([99,111,109,112,117,116,105,110,103,32,97,114,101,97,32,111,102,32,101,97,99,104,32,102,97,99,101,116,32,97,110,100,32,118,111,108,117,109,101,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,10,0] /* computing area of ea */, "i8", ALLOC_NONE, 5277712);
allocate([118,37,100,32,0] /* v%d \00 */, "i8", ALLOC_NONE, 5277772);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,37,100,32,98,121,116,101,115,41,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5277780);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,104,111,114,105,122,111,110,32,102,37,100,44,32,100,105,115,116,61,37,50,46,55,103,32,60,32,113,104,32,77,73,78,118,105,115,105,98,108,101,40,37,50,46,55,103,41,10,0] /* qh_findhorizon: poin */, "i8", ALLOC_NONE, 5277872);
allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_NONE, 5277964);
allocate([10,84,111,32,103,117,97,114,97,110,116,101,101,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,32,98,121,32,97,100,100,105,110,103,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,101,120,97,99,116,32,97,114,105,116,104,109,101,116,105,99,32,40,115,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,32,105,110,32,81,104,117,108,108,34,44,32,113,104,45,105,109,112,114,101,46,104,116,109,41,10,0] /* \0ATo guarantee simp */, "i8", ALLOC_NONE, 5277968);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ne */, "i8", ALLOC_NONE, 5278256);
allocate([113,104,95,110,111,114,109,97,108,105,122,101,58,32,110,111,114,109,61,37,50,46,50,103,32,116,111,111,32,115,109,97,108,108,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_normalize: norm=% */, "i8", ALLOC_NONE, 5278296);
allocate([102,108,105,112,112,101,100,32,102,97,99,101,116,0] /* flipped facet\00 */, "i8", ALLOC_NONE, 5278344);
allocate([113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,109,97,116,99,104,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,32,102,97,99,101,116,115,46,10,0] /* qh_matchnewfacets: m */, "i8", ALLOC_NONE, 5278360);
allocate([113,104,95,102,105,110,100,103,111,111,100,100,105,115,116,58,32,110,111,32,103,111,111,100,32,102,97,99,101,116,32,102,111,114,32,112,37,100,32,97,98,111,118,101,32,102,37,100,10,0] /* qh_findgooddist: no  */, "i8", ALLOC_NONE, 5278412);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,105,110,100,32,110,101,119,32,118,101,114,116,101,120,32,102,111,114,32,118,37,100,32,102,114,111,109,32,0] /* qh_find_newvertex: f */, "i8", ALLOC_NONE, 5278464);
allocate([70,111,114,32,116,101,115,116,105,110,103,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0] /* For testing vertex n */, "i8", ALLOC_NONE, 5278516);
allocate([99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* coplanar horizon\00 */, "i8", ALLOC_NONE, 5278548);
allocate([37,100,32,37,100,32,37,100,32,37,54,46,49,54,103,32,10,0] /* %d %d %d %6.16g \0A\ */, "i8", ALLOC_NONE, 5278568);
allocate([10,73,102,32,121,111,117,32,110,101,101,100,32,116,114,105,97,110,103,117,108,97,114,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,46,32,32,73,116,32,116,114,105,97,110,103,117,108,97,116,101,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,119,105,116,104,32,97,100,100,101,100,32,112,111,105,110,116,115,46,10,10,73,102,32,121,111,117,32,109,117,115,116,32,117,115,101,32,39,81,48,39,44,10,116,114,121,32,111,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,111,112,116,105,111,110,115,46,32,32,84,104,101,121,32,99,97,110,32,110,111,116,32,103,117,97,114,97,110,116,101,101,32,97,110,32,111,117,116,112,117,116,46,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,105,110,112,117,116,32,116,111,32,97,32,99,117,98,101,46,10,32,32,45,32,117,115,101,32,39,80,111,39,32,116,111,32,112,114,111,100,117,99,101,32,111,117,116,112,117,116,32,97,110,100,32,112,114,101,118,101,110,116,32,112,97,114,116,105,116,105,111,110,105,110,103,32,102,111,114,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,10,32,32,45,32,117,115,101,32,39,86,48,39,32,116,111,32,115,101,116,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,116,111,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,97,115,32,48,32,105,110,115,116,101,97,100,32,111,102,32,114,111,117,110,100,111,102,102,10,32,32,45,32,117,115,101,32,39,69,110,39,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,111,112,116,105,111,110,115,32,39,81,102,39,44,32,39,81,98,98,39,44,32,97,110,100,32,39,81,82,48,39,32,109,97,121,32,97,108,115,111,32,104,101,108,112,10,0] /* \0AIf you need trian */, "i8", ALLOC_NONE, 5278588);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,0] /* maximum number of ri */, "i8", ALLOC_NONE, 5279232);
allocate([113,104,95,100,101,116,106,111,103,103,108,101,58,32,106,111,103,103,108,101,61,37,50,46,50,103,32,109,97,120,119,105,100,116,104,61,37,50,46,50,103,10,0] /* qh_detjoggle: joggle */, "i8", ALLOC_NONE, 5279260);
allocate([113,104,95,103,101,116,99,101,110,116,114,117,109,58,32,102,111,114,32,102,37,100,44,32,37,100,32,118,101,114,116,105,99,101,115,32,100,105,115,116,61,32,37,50,46,50,103,10,0] /* qh_getcentrum: for f */, "i8", ALLOC_NONE, 5279304);
allocate([113,104,95,99,104,101,99,107,99,111,110,118,101,120,58,32,99,104,101,99,107,32,97,108,108,32,114,105,100,103,101,115,32,97,114,101,32,99,111,110,118,101,120,10,0] /* qh_checkconvex: chec */, "i8", ALLOC_NONE, 5279356);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,111,32,109,97,116,99,104,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qh_matchneighbor: no */, "i8", ALLOC_NONE, 5279404);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,32,32,78,101,105,103,104,98,111,114,32,111,102,32,102,37,100,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5279460);
allocate([113,104,95,102,105,110,100,103,111,111,100,100,105,115,116,58,32,112,37,100,32,105,115,32,37,50,46,50,103,32,97,98,111,118,101,32,103,111,111,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_findgooddist: p%d */, "i8", ALLOC_NONE, 5279548);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5279600);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,97,102,97,99,101,116,41,58,32,111,112,116,105,111,110,32,39,70,112,39,32,110,101,101,100,115,32,113,104,32,102,101,97,115,105,98,108,101,95,112,111,105,110,116,10,0] /* qhull input error (q */, "i8", ALLOC_NONE, 5279696);
allocate([87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,58,10,32,32,45,32,117,115,101,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,45,105,110,102,105,110,105,116,121,46,32,32,84,104,105,115,32,114,101,100,117,99,101,115,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,10,0] /* When computing the D */, "i8", ALLOC_NONE, 5279772);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ri */, "i8", ALLOC_NONE, 5279892);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,103,101,116,99,101,110,116,101,114,41,58,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5279928);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,100,117,112,108,105,99,97,116,101,115,32,114,105,100,103,101,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,105,110,103,32,102,37,100,32,105,115,109,97,116,99,104,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qh_matchneighbor: ne */, "i8", ALLOC_NONE, 5279992);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5280096);
allocate([113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,58,32,97,114,101,97,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,116,111,112,111,114,105,101,110,116,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0] /* qh_facetarea_simplex */, "i8", ALLOC_NONE, 5280160);
allocate([10,10,0] /* \0A\0A\00 */, "i8", ALLOC_NONE, 5280236);
allocate([118,105,115,105,98,108,101,0] /* visible\00 */, "i8", ALLOC_NONE, 5280240);
allocate([110,111,32,110,111,114,109,97,108,32,102,111,114,32,102,97,99,101,116,32,102,37,100,10,0] /* no normal for facet  */, "i8", ALLOC_NONE, 5280248);
allocate([32,32,32,32,115,105,122,101,32,105,110,32,98,121,116,101,115,58,32,109,101,114,103,101,32,37,100,32,114,105,100,103,101,32,37,100,32,118,101,114,116,101,120,32,37,100,32,102,97,99,101,116,32,37,100,10,32,32,32,32,32,32,32,32,32,110,111,114,109,97,108,32,37,100,32,114,105,100,103,101,32,118,101,114,116,105,99,101,115,32,37,100,32,102,97,99,101,116,32,118,101,114,116,105,99,101,115,32,111,114,32,110,101,105,103,104,98,111,114,115,32,37,100,10,0] /*     size in bytes: m */, "i8", ALLOC_NONE, 5280276);
allocate([10,87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,102,32,99,111,111,114,100,105,110,97,116,101,115,32,62,32,49,46,48,44,10,32,32,45,32,117,115,101,32,39,81,98,98,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,116,111,32,91,48,44,109,93,32,40,109,97,120,32,112,114,101,118,105,111,117,115,32,99,111,111,114,100,105,110,97,116,101,41,10,0] /* \0AWhen computing th */, "i8", ALLOC_NONE, 5280404);
allocate([110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0] /* number of ridges in  */, "i8", ALLOC_NONE, 5280548);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,122,101,114,111,41,58,32,105,110,100,101,120,32,37,100,32,111,114,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5280576);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5280656);
allocate([113,104,95,103,101,116,97,110,103,108,101,58,32,37,50,46,50,103,10,0] /* qh_getangle: %2.2g\0 */, "i8", ALLOC_NONE, 5280728);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5280748);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5280752);
allocate([32,37,50,46,50,103,0] /*  %2.2g\00 */, "i8", ALLOC_NONE, 5280756);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,115,32,102,37,100,44,32,102,37,100,32,97,110,100,32,102,37,100,32,109,101,101,116,32,97,116,32,97,32,114,105,100,103,101,32,119,105,116,104,32,109,111,114,101,32,116,104,97,110,32,50,32,110,101,105,103,104,98,111,114,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5280764);
allocate([32,37,115,10,0] /*  %s\0A\00 */, "i8", ALLOC_NONE, 5280876);
allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_NONE, 5280884);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5280888);
allocate([37,55,46,51,103,0] /* %7.3g\00 */, "i8", ALLOC_NONE, 5280956);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,33,61,32,100,105,109,32,37,100,32,45,49,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5280964);
allocate([32,32,37,115,0] /*   %s\00 */, "i8", ALLOC_NONE, 5281036);
allocate([32,37,100,45,62,37,100,0] /*  %d-_%d\00 */, "i8", ALLOC_NONE, 5281044);
allocate([37,55,100,0] /* %7d\00 */, "i8", ALLOC_NONE, 5281052);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: dimen */, "i8", ALLOC_NONE, 5281056);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,102,105,110,100,32,104,111,114,105,122,111,110,32,102,111,114,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_findhorizon: find */, "i8", ALLOC_NONE, 5281124);
allocate([37,55,46,50,103,0] /* %7.2g\00 */, "i8", ALLOC_NONE, 5281180);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: no di */, "i8", ALLOC_NONE, 5281188);
allocate([32,42,48,32,99,110,116,42,0] /*  _0 cnt_\00 */, "i8", ALLOC_NONE, 5281256);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,118,97,108,117,101,32,37,50,46,52,103,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,32,43,49,32,111,114,32,60,32,45,49,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: value */, "i8", ALLOC_NONE, 5281268);
allocate([37,100,10,0] /* %d\0A\00 */, "i8", ALLOC_NONE, 5281344);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5281348);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: dimen */, "i8", ALLOC_NONE, 5281352);
allocate([109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* max. distance of a n */, "i8", ALLOC_NONE, 5281424);
allocate([10,80,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,119,101,114,101,32,100,101,116,101,99,116,101,100,32,100,117,114,105,110,103,32,99,111,110,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,46,10,84,104,105,115,32,111,99,99,117,114,115,32,98,101,99,97,117,115,101,32,99,111,110,118,101,120,32,104,117,108,108,32,97,108,103,111,114,105,116,104,109,115,32,97,115,115,117,109,101,32,116,104,97,116,32,99,97,108,99,117,108,97,116,105,111,110,115,32,97,114,101,10,101,120,97,99,116,44,32,98,117,116,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,97,114,105,116,104,109,101,116,105,99,32,104,97,115,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,115,46,10,10,84,111,32,99,111,114,114,101,99,116,32,102,111,114,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,44,32,100,111,32,110,111,116,32,117,115,101,32,39,81,48,39,46,32,32,66,121,32,100,101,102,97,117,108,116,44,32,81,104,117,108,108,10,115,101,108,101,99,116,115,32,39,67,45,48,39,32,111,114,32,39,81,120,39,32,97,110,100,32,109,101,114,103,101,115,32,110,111,110,45,99,111,110,118,101,120,32,102,97,99,101,116,115,46,32,32,87,105,116,104,32,111,112,116,105,111,110,32,39,81,74,39,44,10,81,104,117,108,108,32,106,111,103,103,108,101,115,32,116,104,101,32,105,110,112,117,116,32,116,111,32,112,114,101,118,101,110,116,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,32,32,83,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,10,105,110,32,81,104,117,108,108,34,32,40,113,104,45,105,109,112,114,101,46,104,116,109,41,46,10,10,73,102,32,121,111,117,32,117,115,101,32,39,81,48,39,44,32,116,104,101,32,111,117,116,112,117,116,32,109,97,121,32,105,110,99,108,117,100,101,10,99,111,112,108,97,110,97,114,32,114,105,100,103,101,115,44,32,99,111,110,99,97,118,101,32,114,105,100,103,101,115,44,32,97,110,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,46,32,32,73,110,32,52,45,100,32,97,110,100,32,104,105,103,104,101,114,44,10,81,104,117,108,108,32,109,97,121,32,112,114,111,100,117,99,101,32,97,32,114,105,100,103,101,32,119,105,116,104,32,102,111,117,114,32,110,101,105,103,104,98,111,114,115,32,111,114,32,116,119,111,32,102,97,99,101,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,10,118,101,114,116,105,99,101,115,46,32,32,81,104,117,108,108,32,114,101,112,111,114,116,115,32,116,104,101,115,101,32,101,118,101,110,116,115,32,119,104,101,110,32,116,104,101,121,32,111,99,99,117,114,46,32,32,73,116,32,115,116,111,112,115,32,119,104,101,110,32,97,10,99,111,110,99,97,118,101,32,114,105,100,103,101,44,32,102,108,105,112,112,101,100,32,102,97,99,101,116,44,32,111,114,32,100,117,112,108,105,99,97,116,101,32,102,97,99,101,116,32,111,99,99,117,114,115,46,10,0] /* \0APrecision problem */, "i8", ALLOC_NONE, 5281468);
allocate([110,117,109,98,101,114,32,111,102,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,104,97,116,32,119,101,114,101,32,109,101,114,103,101,100,0] /* number of simplicial */, "i8", ALLOC_NONE, 5282236);
allocate([10,10,0] /* \0A\0A\00 */, "i8", ALLOC_NONE, 5282284);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,114,117,110,99,97,116,101,41,58,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5282288);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 5282360);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,97,116,58,32,37,115,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: no di */, "i8", ALLOC_NONE, 5282364);
allocate([37,54,46,50,101,32,0] /* %6.2e \00 */, "i8", ALLOC_NONE, 5282440);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,97,99,116,117,97,108,32,115,105,122,101,32,37,100,32,111,102,32,37,115,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,32,115,105,122,101,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5282448);
allocate([113,104,117,108,108,0] /* qhull\00 */, "i8", ALLOC_NONE, 5282536);
allocate([113,104,95,103,97,117,115,115,101,108,101,109,58,32,114,101,115,117,108,116,0] /* qh_gausselem: result */, "i8", ALLOC_NONE, 5282544);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,109,101,114,103,105,110,103,32,116,119,111,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,114,105,116,104,109,101,116,105,99,32,111,112,101,114,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,102,111,114,32,100,105,118,105,115,105,111,110,115,10,32,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,102,111,114,32,71,97,117,115,115,58,32,0] /*  %6.2g max. distance */, "i8", ALLOC_NONE, 5282568);
allocate([114,117,110,45,105,100,0] /* run-id\00 */, "i8", ALLOC_NONE, 5282744);
allocate([32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,111,115,116,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0] /*  %6.2g radius of pos */, "i8", ALLOC_NONE, 5282752);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,100,114,111,112,32,100,105,109,101,110,115,105,111,110,32,39,71,68,37,100,39,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,51,45,100,47,52,45,100,32,71,101,111,109,118,105,101,119,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5282792);
allocate([97,32,114,105,100,103,101,32,119,105,116,104,32,109,111,114,101,32,116,104,97,110,32,116,119,111,32,110,101,105,103,104,98,111,114,115,0] /* a ridge with more th */, "i8", ALLOC_NONE, 5282876);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,111,115,116,45,109,101,114,103,101,32,97,110,103,108,101,10,0] /*  %6.2g max. cosine f */, "i8", ALLOC_NONE, 5282916);
allocate([81,99,111,112,108,97,110,97,114,0] /* Qcoplanar\00 */, "i8", ALLOC_NONE, 5282960);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,119,105,116,104,32,100,101,108,102,97,99,101,116,32,102,37,100,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5282972);
allocate([32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,114,101,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0] /*  %6.2g radius of pre */, "i8", ALLOC_NONE, 5283044);
allocate([113,104,117,108,108,32,111,117,116,112,117,116,32,119,97,114,110,105,110,103,58,32,105,103,110,111,114,105,110,103,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,44,32,111,112,116,105,111,110,32,39,81,99,39,32,119,97,115,32,110,111,116,32,115,101,116,32,102,111,114,32,116,104,101,32,102,105,114,115,116,32,114,117,110,32,111,102,32,113,104,117,108,108,46,10,0] /* qhull output warning */, "i8", ALLOC_NONE, 5283080);
allocate([113,104,95,102,97,99,101,116,97,114,101,97,58,32,102,37,100,32,97,114,101,97,32,37,50,46,50,103,10,0] /* qh_facetarea: f%d ar */, "i8", ALLOC_NONE, 5283184);
allocate([32,32,102,114,101,101,108,105,115,116,115,40,98,121,116,101,115,45,62,99,111,117,110,116,41,58,0] /*   freelists(bytes-_c */, "i8", ALLOC_NONE, 5283216);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,114,101,45,109,101,114,103,101,32,97,110,103,108,101,10,0] /*  %6.2g max. cosine f */, "i8", ALLOC_NONE, 5283244);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,99,111,112,108,97,110,97,114,115,44,32,118,101,114,116,105,99,101,115,44,32,97,110,100,32,99,101,110,116,114,117,109,115,32,111,117,116,112,117,116,32,110,111,116,10,97,118,97,105,108,97,98,108,101,32,102,111,114,32,52,45,100,32,111,117,116,112,117,116,40,105,103,110,111,114,101,100,41,46,32,32,67,111,117,108,100,32,117,115,101,32,39,71,68,110,39,32,105,110,115,116,101,97,100,46,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5283284);
allocate([113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,32,112,37,100,40,118,37,100,41,32,116,111,32,104,117,108,108,32,111,102,32,37,100,32,102,97,99,101,116,115,40,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,41,32,97,110,100,32,37,100,32,111,117,116,115,105,100,101,32,97,116,32,37,52,46,52,103,32,67,80,85,32,115,101,99,115,46,32,32,80,114,101,118,105,111,117,115,32,119,97,115,32,112,37,100,46,10,0] /* qh_addpoint: add p%d */, "i8", ALLOC_NONE, 5283412);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,110,101,97,114,45,105,110,115,105,100,101,32,112,111,105,110,116,115,10,0] /*  %6.2g max. distance */, "i8", ALLOC_NONE, 5283532);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,102,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,115,32,111,110,108,121,32,102,111,114,32,50,45,100,10,0] /* qhull input error: G */, "i8", ALLOC_NONE, 5283580);
allocate([10,112,114,101,99,105,115,105,111,110,32,99,111,110,115,116,97,110,116,115,58,10,32,37,54,46,50,103,32,109,97,120,46,32,97,98,115,46,32,99,111,111,114,100,105,110,97,116,101,32,105,110,32,116,104,101,32,40,116,114,97,110,115,102,111,114,109,101,100,41,32,105,110,112,117,116,40,39,81,98,100,58,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,40,39,69,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,110,103,108,101,32,99,111,109,112,117,116,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,40,39,87,110,39,41,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,40,39,86,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,40,39,85,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,102,97,99,101,116,32,119,105,100,116,104,32,102,111,114,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,32,97,110,100,32,97,114,101,97,10,0] /* \0Aprecision constan */, "i8", ALLOC_NONE, 5283652);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,32,111,117,116,112,117,116,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,71,101,111,109,118,105,101,119,10,0] /* qhull input error: n */, "i8", ALLOC_NONE, 5284048);
allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_NONE, 5284104);
allocate([10,37,115,10,32,113,104,117,108,108,32,105,110,118,111,107,101,100,32,98,121,58,32,37,115,32,124,32,37,115,10,37,115,32,119,105,116,104,32,111,112,116,105,111,110,115,58,10,37,115,10,0] /* \0A%s\0A qhull invok */, "i8", ALLOC_NONE, 5284108);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,44,32,51,45,100,32,97,110,100,32,52,45,100,10,0] /* qhull input error: G */, "i8", ALLOC_NONE, 5284160);
allocate([10,65,32,81,104,117,108,108,32,101,114,114,111,114,32,104,97,115,32,111,99,99,117,114,114,101,100,46,32,32,81,104,117,108,108,32,115,104,111,117,108,100,32,104,97,118,101,32,99,111,114,114,101,99,116,101,100,32,116,104,101,32,97,98,111,118,101,10,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,46,32,32,80,108,101,97,115,101,32,115,101,110,100,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,32,116,111,10,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,10,0] /* \0AA Qhull error has */, "i8", ALLOC_NONE, 5284236);
allocate([110,117,109,98,101,114,32,111,102,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0] /* number of non-simpli */, "i8", ALLOC_NONE, 5284392);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,105,110,105,116,115,116,97,116,105,115,116,105,99,115,41,58,32,105,110,99,114,101,97,115,101,32,115,105,122,101,32,111,102,32,113,104,115,116,97,116,46,105,100,91,93,46,10,32,32,32,32,32,32,113,104,115,116,97,116,46,110,101,120,116,32,37,100,32,115,104,111,117,108,100,32,98,101,32,60,61,32,115,105,122,101,111,102,40,113,104,115,116,97,116,32,105,100,41,32,37,100,10,0] /* qhull error (qh_init */, "i8", ALLOC_NONE, 5284436);
allocate([113,104,95,115,101,116,116,101,109,112,112,117,115,104,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0] /* qh_settemppush: dept */, "i8", ALLOC_NONE, 5284556);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,77,97,116,104,101,109,97,116,105,99,97,32,97,110,100,32,77,97,112,108,101,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,32,97,110,100,32,51,45,100,32,99,111,110,118,101,120,32,104,117,108,108,115,32,97,110,100,32,50,45,100,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,115,10,0] /* qhull input error: M */, "i8", ALLOC_NONE, 5284612);
allocate([100,101,103,101,110,101,114,97,116,101,32,110,101,119,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,40,115,97,109,101,32,114,105,100,103,101,41,0] /* degenerate new facet */, "i8", ALLOC_NONE, 5284740);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,39,81,74,39,32,40,106,111,103,103,108,101,41,32,119,105,108,108,32,117,115,117,97,108,108,121,32,112,114,101,118,101,110,116,32,99,111,105,110,99,105,100,101,110,116,32,105,110,112,117,116,32,115,105,116,101,115,32,102,111,114,32,111,112,116,105,111,110,115,32,39,70,99,39,32,97,110,100,32,39,70,80,39,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5284784);
allocate([122,101,114,111,32,112,105,118,111,116,32,102,111,114,32,71,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0] /* zero pivot for Gauss */, "i8", ALLOC_NONE, 5284892);
allocate([102,114,111,109,32,112,37,100,32,116,111,32,102,37,100,10,0] /* from p%d to f%d\0A\0 */, "i8", ALLOC_NONE, 5284928);
allocate([109,105,114,114,111,114,101,100,32,112,97,105,114,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,115,97,109,101,32,118,101,114,116,105,99,101,115,41,0] /* mirrored pairs of ne */, "i8", ALLOC_NONE, 5284948);
allocate([70,118,101,114,116,105,99,101,115,0] /* Fvertices\00 */, "i8", ALLOC_NONE, 5285000);
allocate([110,117,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,100,117,112,108,105,99,97,116,101,100,32,118,101,114,116,101,120,41,0] /* null new facets dele */, "i8", ALLOC_NONE, 5285012);
allocate([70,118,111,114,111,110,111,105,0] /* Fvoronoi\00 */, "i8", ALLOC_NONE, 5285056);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,10,0] /* qh_matchneighbor: f% */, "i8", ALLOC_NONE, 5285068);
allocate([32,32,109,97,120,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,0] /*   max. new facets cr */, "i8", ALLOC_NONE, 5285128);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,67,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,40,39,118,39,41,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5285156);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5285232);
allocate([32,32,97,118,101,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,40,109,97,121,32,98,101,32,100,101,108,101,116,101,100,41,0] /*   ave. new facets cr */, "i8", ALLOC_NONE, 5285284);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,116,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,111,114,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5285328);
allocate([113,104,95,100,105,115,116,114,111,117,110,100,58,32,37,50,46,50,103,32,109,97,120,97,98,115,32,37,50,46,50,103,32,109,97,120,115,117,109,97,98,115,32,37,50,46,50,103,32,109,97,120,100,105,115,116,115,117,109,32,37,50,46,50,103,10,0] /* qh_distround: %2.2g  */, "i8", ALLOC_NONE, 5285424);
allocate([37,55,100,32,99,97,108,108,115,32,116,111,32,113,104,95,115,101,116,108,97,114,103,101,114,10,37,55,46,50,103,32,32,32,32,32,97,118,101,114,97,103,101,32,99,111,112,121,32,115,105,122,101,10,0] /* %7d calls to qh_setl */, "i8", ALLOC_NONE, 5285492);
allocate([110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,114,105,97,110,103,117,108,97,116,101,100,0] /* non-simplicial facet */, "i8", ALLOC_NONE, 5285548);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,112,39,32,105,115,32,111,110,108,121,32,117,115,101,100,32,102,111,114,32,10,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,110,44,110,44,110,39,41,46,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5285584);
allocate([10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,84,104,101,114,101,32,97,114,101,32,37,100,10,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,46,32,32,78,101,120,116,32,105,115,32,112,111,105,110,116,32,112,37,100,40,118,37,100,41,44,32,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,46,10,0] /* \0AAt %02d:%02d:%02d */, "i8", ALLOC_NONE, 5285668);
allocate([84,114,105,97,110,103,117,108,97,116,105,111,110,32,115,116,97,116,105,115,116,105,99,115,40,81,116,41,0] /* Triangulation statis */, "i8", ALLOC_NONE, 5285876);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,114,97,110,115,112,97,114,101,110,116,32,68,101,108,97,117,110,97,121,40,39,71,116,39,41,32,110,101,101,100,115,32,51,45,100,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,119,47,111,32,39,71,68,110,39,10,0] /* qhull input error: t */, "i8", ALLOC_NONE, 5285908);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,110,101,97,114,45,122,101,114,111,32,110,111,114,109,97,108,0] /* bounded ridges with  */, "i8", ALLOC_NONE, 5285992);
allocate([80,103,111,111,100,0] /* Pgood\00 */, "i8", ALLOC_NONE, 5286032);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5286040);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,111,117,116,112,117,116,102,108,97,103,115,58,32,37,115,10,0] /* qh_initqhull_outputf */, "i8", ALLOC_NONE, 5286044);
allocate([32,32,109,97,120,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0] /*   max. angle to ridg */, "i8", ALLOC_NONE, 5286076);
allocate([69,82,82,79,78,69,79,85,83,32,97,110,100,32,78,69,73,71,72,66,79,82,73,78,71,32,70,65,67,69,84,83,32,116,111,32,111,117,116,112,117,116,10,0] /* ERRONEOUS and NEIGHB */, "i8", ALLOC_NONE, 5286100);
allocate([110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0] /* number of facets in  */, "i8", ALLOC_NONE, 5286144);
allocate([32,32,97,118,101,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0] /*   ave. angle to ridg */, "i8", ALLOC_NONE, 5286172);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,117,115,104,41,58,32,99,97,110,32,110,111,116,32,112,117,115,104,32,97,32,78,85,76,76,32,116,101,109,112,10,0] /* qhull error (qh_sett */, "i8", ALLOC_NONE, 5286196);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,110,115,116,114,117,99,116,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,40,110,101,101,100,32,37,100,41,10,0] /* qhull input error: n */, "i8", ALLOC_NONE, 5286252);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,111,107,32,110,111,114,109,97,108,0] /* bounded ridges with  */, "i8", ALLOC_NONE, 5286336);
allocate([113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,97,114,110,105,110,103,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,97,118,101,114,97,103,101,32,111,102,32,49,48,48,48,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,115,32,40,37,46,50,103,41,32,105,115,32,109,117,99,104,32,100,105,102,102,101,114,101,110,116,32,116,104,97,110,32,101,120,112,101,99,116,101,100,32,40,37,46,50,103,41,46,10,32,32,32,73,115,32,113,104,95,82,65,78,68,79,77,109,97,120,32,40,37,46,50,103,41,32,119,114,111,110,103,63,10,0] /* qhull configuration  */, "i8", ALLOC_NONE, 5286368);
allocate([77,97,116,114,105,120,58,0] /* Matrix:\00 */, "i8", ALLOC_NONE, 5286540);
allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_NONE, 5286548);
allocate([32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0] /*   max. distance of m */, "i8", ALLOC_NONE, 5286560);
allocate([113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,32,37,100,32,62,32,113,104,95,82,65,78,68,79,77,109,97,120,40,37,46,56,103,41,10,0] /* qhull configuration  */, "i8", ALLOC_NONE, 5286600);
allocate([37,100,32,37,100,32,37,100,32,0] /* %d %d %d \00 */, "i8", ALLOC_NONE, 5286696);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0] /*   ave. distance of m */, "i8", ALLOC_NONE, 5286708);
allocate([81,82,111,116,97,116,101,45,114,97,110,100,111,109,0] /* QRotate-random\00 */, "i8", ALLOC_NONE, 5286748);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,86,101,114,116,101,120,32,115,101,116,115,32,97,114,101,32,116,104,101,32,115,97,109,101,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,46,32,32,67,97,110,32,110,111,116,32,102,111,114,99,101,32,111,117,116,112,117,116,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5286764);
allocate([32,35,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,105,115,111,108,97,116,101,100,10,0] /*  # p%d is coplanar o */, "i8", ALLOC_NONE, 5286856);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,0] /* bounded ridges\00 */, "i8", ALLOC_NONE, 5286888);
allocate([81,51,45,110,111,45,109,101,114,103,101,45,118,101,114,116,105,99,101,115,45,100,105,109,45,104,105,103,104,0] /* Q3-no-merge-vertices */, "i8", ALLOC_NONE, 5286904);
allocate([32,35,32,112,37,100,40,118,37,100,41,10,0] /*  # p%d(v%d)\0A\00 */, "i8", ALLOC_NONE, 5286936);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0] /* qh_degen_redundant_f */, "i8", ALLOC_NONE, 5286952);
allocate([32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0] /*   max. distance to r */, "i8", ALLOC_NONE, 5287012);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,105,110,105,116,105,97,108,105,122,101,32,103,108,111,98,97,108,115,46,32,32,100,105,109,32,37,100,32,110,117,109,112,111,105,110,116,115,32,37,100,32,109,97,108,108,111,99,63,32,37,100,32,112,114,111,106,101,99,116,101,100,32,37,100,32,116,111,32,104,117,108,108,95,100,105,109,32,37,100,10,0] /* qh_initqhull_globals */, "i8", ALLOC_NONE, 5287040);
allocate([10,109,101,109,111,114,121,32,115,116,97,116,105,115,116,105,99,115,58,10,37,55,100,32,113,117,105,99,107,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,108,111,110,103,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,102,114,101,101,115,10,37,55,100,32,108,111,110,103,32,102,114,101,101,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,117,115,101,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,102,114,101,101,108,105,115,116,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,100,114,111,112,112,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,10,37,55,100,32,98,121,116,101,115,32,111,102,32,117,110,117,115,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,32,40,101,115,116,105,109,97,116,101,100,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,101,100,32,40,109,97,120,44,32,101,120,99,101,112,116,32,102,111,114,32,105,110,112,117,116,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,105,110,32,117,115,101,32,40,105,110,32,37,100,32,112,105,101,99,101,115,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,115,32,40,109,105,110,117,115,32,108,105,110,107,115,41,10,37,55,100,32,98,121,116,101,115,32,112,101,114,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,105,110,105,116,105,97,108,108,121,32,37,100,32,98,121,116,101,115,41,10,0] /* \0Amemory statistics */, "i8", ALLOC_NONE, 5287144);
allocate([113,104,95,100,101,116,115,105,109,112,108,101,120,58,32,100,101,116,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,100,105,109,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0] /* qh_detsimplex: det=% */, "i8", ALLOC_NONE, 5287624);
allocate([35,32,37,100,32,102,37,100,10,0] /* # %d f%d\0A\00 */, "i8", ALLOC_NONE, 5287688);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0] /*   ave. distance to r */, "i8", ALLOC_NONE, 5287700);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,109,117,115,116,32,98,101,32,62,32,49,10,0] /* qhull error: dimensi */, "i8", ALLOC_NONE, 5287728);
allocate([10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* \0AAt %02d:%02d:%02d */, "i8", ALLOC_NONE, 5287768);
allocate([32,48,32,35,32,105,110,102,105,110,105,116,121,32,110,111,116,32,117,115,101,100,10,0] /*  0 # infinity not us */, "i8", ALLOC_NONE, 5287924);
allocate([110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0] /* non-simplicial Voron */, "i8", ALLOC_NONE, 5287948);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,101,115,116,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,40,39,81,118,39,41,32,110,101,101,100,115,32,97,32,109,101,114,103,101,32,111,112,116,105,111,110,10,0] /* qhull input error: t */, "i8", ALLOC_NONE, 5287996);
allocate([37,100,10,37,100,32,37,100,32,49,10,0] /* %d\0A%d %d 1\0A\00 */, "i8", ALLOC_NONE, 5288068);
allocate([86,111,114,111,110,111,105,32,114,105,100,103,101,32,115,116,97,116,105,115,116,105,99,115,0] /* Voronoi ridge statis */, "i8", ALLOC_NONE, 5288080);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,111,112,116,105,111,110,32,39,81,98,98,39,32,40,115,99,97,108,101,45,108,97,115,116,45,99,111,111,114,100,105,110,97,116,101,41,32,105,115,32,110,111,114,109,97,108,108,121,32,117,115,101,100,32,119,105,116,104,32,39,100,39,32,111,114,32,39,118,39,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5288108);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,102,97,99,101,125,32,79,70,70,32,37,100,32,37,100,32,49,32,35,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,32,97,110,100,32,99,101,108,108,115,10,0] /* {appearance {+edge - */, "i8", ALLOC_NONE, 5288200);
allocate([48,10,0] /* 0\0A\00 */, "i8", ALLOC_NONE, 5288268);
allocate([102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,116,104,101,105,114,32,118,101,114,116,101,120,32,115,101,116,115,0] /* for ridges and their */, "i8", ALLOC_NONE, 5288272);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5288308);
allocate([37,115,32,86,69,82,84,69,88,58,10,0] /* %s VERTEX:\0A\00 */, "i8", ALLOC_NONE, 5288388);
allocate([49,32,37,100,10,0] /* 1 %d\0A\00 */, "i8", ALLOC_NONE, 5288400);
allocate([110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,110,32,111,117,116,112,117,116,0] /* number of vertices i */, "i8", ALLOC_NONE, 5288408);
allocate([102,111,114,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,111,117,116,115,105,100,101,32,97,110,100,32,99,111,112,108,97,110,97,114,32,115,101,116,115,0] /* for input points and */, "i8", ALLOC_NONE, 5288440);
allocate([113,104,95,115,101,116,116,101,109,112,112,111,112,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0] /* qh_settemppop: depth */, "i8", ALLOC_NONE, 5288488);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,117,115,101,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,32,111,114,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,10,0] /* qhull input error: u */, "i8", ALLOC_NONE, 5288540);
allocate([32,112,37,100,40,118,37,100,41,0] /*  p%d(v%d)\00 */, "i8", ALLOC_NONE, 5288644);
allocate([102,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,116,104,101,105,114,32,110,101,105,103,104,98,111,114,32,115,101,116,115,0] /* for vertices and the */, "i8", ALLOC_NONE, 5288656);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,32,119,105,116,104,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,39,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5288696);
allocate([113,104,95,103,97,117,115,115,101,108,105,109,58,32,48,32,112,105,118,111,116,32,97,116,32,99,111,108,117,109,110,32,37,100,46,32,40,37,50,46,50,103,32,60,32,37,50,46,50,103,41,10,0] /* qh_gausselim: 0 pivo */, "i8", ALLOC_NONE, 5288792);
allocate([10,32,32,32,32,32,0] /* \0A     \00 */, "i8", ALLOC_NONE, 5288848);
allocate([102,111,114,32,102,97,99,101,116,115,32,97,110,100,32,116,104,101,105,114,32,110,111,114,109,97,108,115,44,32,110,101,105,103,104,98,111,114,32,97,110,100,32,118,101,114,116,101,120,32,115,101,116,115,0] /* for facets and their */, "i8", ALLOC_NONE, 5288856);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,114,101,97,108,32,101,112,115,105,108,111,110,44,32,37,50,46,50,103,44,32,105,115,32,112,114,111,98,97,98,108,121,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,106,111,103,103,108,101,40,39,81,74,110,39,41,10,82,101,99,111,109,112,105,108,101,32,119,105,116,104,32,100,111,117,98,108,101,32,112,114,101,99,105,115,105,111,110,32,114,101,97,108,115,40,115,101,101,32,117,115,101,114,46,104,41,46,10,0] /* qhull warning: real  */, "i8", ALLOC_NONE, 5288912);
allocate([32,32,110,101,105,103,104,98,111,114,115,58,0] /*   neighbors:\00 */, "i8", ALLOC_NONE, 5289040);
allocate([109,101,109,111,114,121,32,117,115,97,103,101,32,115,116,97,116,105,115,116,105,99,115,40,105,110,32,98,121,116,101,115,41,0] /* memory usage statist */, "i8", ALLOC_NONE, 5289056);
allocate([95,122,101,114,111,45,99,101,110,116,114,117,109,0] /* _zero-centrum\00 */, "i8", ALLOC_NONE, 5289092);
allocate([116,119,111,32,102,97,99,101,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,0] /* two facets with the  */, "i8", ALLOC_NONE, 5289108);
allocate([32,114,105,100,103,101,100,101,108,101,116,101,100,0] /*  ridgedeleted\00 */, "i8", ALLOC_NONE, 5289144);
allocate([32,32,109,97,120,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0] /*   max. number of rid */, "i8", ALLOC_NONE, 5289160);
allocate([81,98,98,111,117,110,100,45,108,97,115,116,45,113,106,0] /* Qbbound-last-qj\00 */, "i8", ALLOC_NONE, 5289204);
allocate([32,100,101,108,101,116,101,100,0] /*  deleted\00 */, "i8", ALLOC_NONE, 5289220);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,116,101,115,116,32,102,97,99,101,116,32,102,37,100,32,102,111,114,32,100,101,103,101,110,47,114,101,100,117,110,100,97,110,116,10,0] /* qh_degen_redundant_f */, "i8", ALLOC_NONE, 5289232);
allocate([32,32,97,118,101,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0] /*   ave. number of rid */, "i8", ALLOC_NONE, 5289296);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,106,111,103,103,108,101,40,39,81,74,39,41,32,97,108,119,97,121,115,32,112,114,111,100,117,99,101,115,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,46,32,32,84,114,105,97,110,103,117,108,97,116,101,100,32,111,117,116,112,117,116,40,39,81,116,39,41,32,100,111,101,115,32,110,111,116,104,105,110,103,46,10,0] /* qhull warning: joggl */, "i8", ALLOC_NONE, 5289340);
allocate([113,104,95,109,101,109,115,116,97,116,105,115,116,105,99,115,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,116,111,116,102,114,101,101,32,37,100,32,110,111,116,32,101,113,117,97,108,32,116,111,32,102,114,101,101,108,105,115,116,32,116,111,116,97,108,32,37,100,10,0] /* qh_memstatistics int */, "i8", ALLOC_NONE, 5289448);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,60,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5289524);
allocate([32,37,53,46,50,103,0] /*  %5.2g\00 */, "i8", ALLOC_NONE, 5289592);
allocate([32,32,32,109,97,120,46,32,102,111,117,110,100,32,102,111,114,32,97,32,118,101,114,116,101,120,0] /*    max. found for a  */, "i8", ALLOC_NONE, 5289600);
allocate([81,120,97,99,116,95,109,101,114,103,101,0] /* Qxact_merge\00 */, "i8", ALLOC_NONE, 5289628);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,99,111,109,112,108,101,116,101,100,32,116,104,101,32,104,117,108,108,32,99,111,110,115,116,114,117,99,116,105,111,110,10,0] /* qh_buildhull: comple */, "i8", ALLOC_NONE, 5289640);
allocate([45,32,112,37,100,40,118,37,100,41,58,0] /* - p%d(v%d):\00 */, "i8", ALLOC_NONE, 5289688);
allocate([32,32,32,97,118,101,46,32,110,117,109,98,101,114,32,102,111,117,110,100,32,112,101,114,32,118,101,114,116,101,120,0] /*    ave. number found */, "i8", ALLOC_NONE, 5289700);
allocate([95,112,114,101,45,109,101,114,103,101,0] /* _pre-merge\00 */, "i8", ALLOC_NONE, 5289732);
allocate([32,32,78,85,76,76,118,101,114,116,101,120,10,0] /*   NULLvertex\0A\00 */, "i8", ALLOC_NONE, 5289744);
allocate([105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,117,110,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0] /* intersections found  */, "i8", ALLOC_NONE, 5289760);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,102,111,114,32,37,115,32,124,32,37,115,10,0] /* qh_initqhull_globals */, "i8", ALLOC_NONE, 5289800);
allocate([113,104,95,97,112,112,101,110,100,118,101,114,116,101,120,58,32,97,112,112,101,110,100,32,118,37,100,32,116,111,32,118,101,114,116,101,120,95,108,105,115,116,10,0] /* qh_appendvertex: app */, "i8", ALLOC_NONE, 5289836);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,118,100,105,97,103,114,97,109,41,58,32,117,110,107,110,111,119,110,32,112,114,105,110,116,32,102,111,114,109,97,116,32,37,100,46,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5289880);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5289948);
allocate([105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,97,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,101,120,0] /* intersections failed */, "i8", ALLOC_NONE, 5289952);
allocate([37,115,32,82,73,68,71,69,58,10,0] /* %s RIDGE:\0A\00 */, "i8", ALLOC_NONE, 5290000);
allocate([125,125,125,10,0] /* }}}\0A\00 */, "i8", ALLOC_NONE, 5290012);
allocate([115,117,109,109,97,114,121,32,105,110,102,111,114,109,97,116,105,111,110,0] /* summary information\ */, "i8", ALLOC_NONE, 5290020);
allocate([118,101,114,116,101,120,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,114,32,108,111,99,97,116,105,110,103,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0] /* vertex intersections */, "i8", ALLOC_NONE, 5290040);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,111,112,41,58,32,112,111,112,32,102,114,111,109,32,101,109,112,116,121,32,116,101,109,112,111,114,97,114,121,32,115,116,97,99,107,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5290096);
allocate([49,10,0] /* 1\0A\00 */, "i8", ALLOC_NONE, 5290168);
allocate([32,32,100,101,108,101,116,101,100,0] /*   deleted\00 */, "i8", ALLOC_NONE, 5290172);
allocate([122,101,114,111,32,100,105,97,103,111,110,97,108,32,111,110,32,98,97,99,107,32,115,117,98,115,116,105,116,117,116,105,111,110,0] /* zero diagonal on bac */, "i8", ALLOC_NONE, 5290184);
allocate([37,56,46,52,103,32,48,32,48,32,48,32,35,32,118,37,100,10,32,48,32,37,56,46,52,103,32,48,32,48,10,48,32,48,32,37,56,46,52,103,32,48,10,0] /* %8.4g 0 0 0 # v%d\0A */, "i8", ALLOC_NONE, 5290220);
allocate([118,101,114,116,105,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,110,111,32,114,105,100,103,101,115,0] /* vertices removed fro */, "i8", ALLOC_NONE, 5290264);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,45,101,100,103,101,32,45,110,111,114,109,97,108,32,110,111,114,109,115,99,97,108,101,32,48,125,32,123,10,73,78,83,84,32,103,101,111,109,32,123,100,101,102,105,110,101,32,118,115,112,104,101,114,101,32,79,70,70,10,49,56,32,51,50,32,52,56,10,10,48,32,48,32,49,10,49,32,48,32,48,10,48,32,49,32,48,10,45,49,32,48,32,48,10,48,32,45,49,32,48,10,48,32,48,32,45,49,10,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,45,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,48,32,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,10,51,32,48,32,54,32,49,49,10,51,32,48,32,55,32,54,32,10,51,32,48,32,57,32,55,32,10,51,32,48,32,49,49,32,57,10,51,32,49,32,54,32,56,32,10,51,32,49,32,56,32,49,52,10,51,32,49,32,49,51,32,54,10,51,32,49,32,49,52,32,49,51,10,51,32,50,32,49,49,32,49,51,10,51,32,50,32,49,50,32,49,49,10,51,32,50,32,49,51,32,49,53,10,51,32,50,32,49,53,32,49,50,10,51,32,51,32,57,32,49,50,10,51,32,51,32,49,48,32,57,10,51,32,51,32,49,50,32,49,54,10,51,32,51,32,49,54,32,49,48,10,51,32,52,32,55,32,49,48,10,51,32,52,32,56,32,55,10,51,32,52,32,49,48,32,49,55,10,51,32,52,32,49,55,32,56,10,51,32,53,32,49,52,32,49,55,10,51,32,53,32,49,53,32,49,52,10,51,32,53,32,49,54,32,49,53,10,51,32,53,32,49,55,32,49,54,10,51,32,54,32,49,51,32,49,49,10,51,32,55,32,56,32,54,10,51,32,57,32,49,48,32,55,10,51,32,49,49,32,49,50,32,57,10,51,32,49,52,32,56,32,49,55,10,51,32,49,53,32,49,51,32,49,52,10,51,32,49,54,32,49,50,32,49,53,10,51,32,49,55,32,49,48,32,49,54,10,125,32,116,114,97,110,115,102,111,114,109,115,32,123,32,84,76,73,83,84,10,0] /* {appearance {-edge - */, "i8", ALLOC_NONE, 5290312);
allocate([32,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,111,102,32,110,111,32,110,101,105,103,104,98,111,114,115,0] /*   facets deleted bec */, "i8", ALLOC_NONE, 5291016);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0] /* qh_matchneighbor: ne */, "i8", ALLOC_NONE, 5291060);
allocate([32,32,32,32,32,32,32,32,32,32,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /*            between f */, "i8", ALLOC_NONE, 5291124);
allocate([100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,0] /* degenerate facets du */, "i8", ALLOC_NONE, 5291156);
allocate([32,32,32,32,32,32,32,32,32,32,32,118,101,114,116,105,99,101,115,58,0] /*            vertices: */, "i8", ALLOC_NONE, 5291200);
allocate([100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0] /* dropped neighbors du */, "i8", ALLOC_NONE, 5291224);
allocate([113,104,95,99,111,112,121,110,111,110,99,111,110,118,101,120,58,32,109,111,118,101,100,32,110,111,110,99,111,110,118,101,120,32,102,108,97,103,32,102,114,111,109,32,114,37,100,32,116,111,32,114,37,100,10,0] /* qh_copynonconvex: mo */, "i8", ALLOC_NONE, 5291268);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,32,40,109,101,109,115,105,122,101,41,58,32,102,114,101,101,32,108,105,115,116,32,116,97,98,108,101,32,104,97,115,32,114,111,111,109,32,102,111,114,32,111,110,108,121,32,37,100,32,115,105,122,101,115,10,0] /* qhull warning (memsi */, "i8", ALLOC_NONE, 5291324);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,109,105,110,105,109,117,109,32,118,105,115,105,98,105,108,105,116,121,32,86,37,46,50,103,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,10,109,105,110,105,109,117,109,32,111,117,116,115,105,100,101,32,87,37,46,50,103,46,32,32,70,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,114,101,32,108,105,107,101,108,121,46,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5291396);
allocate([32,110,111,110,99,111,110,118,101,120,0] /*  nonconvex\00 */, "i8", ALLOC_NONE, 5291512);
allocate([100,101,108,101,116,101,100,32,114,105,100,103,101,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0] /* deleted ridges due t */, "i8", ALLOC_NONE, 5291524);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,37,100,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,119,101,114,101,32,110,101,118,101,114,32,112,114,111,99,101,115,115,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5291564);
allocate([32,32,32,32,32,45,32,114,37,100,0] /*      - r%d\00 */, "i8", ALLOC_NONE, 5291644);
allocate([32,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,32,100,101,116,101,99,116,101,100,0] /*   duplicate ridges d */, "i8", ALLOC_NONE, 5291656);
allocate([32,37,56,46,52,103,0] /*  %8.4g\00 */, "i8", ALLOC_NONE, 5291684);
allocate([114,101,110,97,109,101,32,102,97,105,108,117,114,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0] /* rename failures due  */, "i8", ALLOC_NONE, 5291692);
allocate([32,112,37,100,58,32,0] /*  p%d: \00 */, "i8", ALLOC_NONE, 5291736);
allocate([37,54,46,49,54,103,32,0] /* %6.16g \00 */, "i8", ALLOC_NONE, 5291744);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,109,117,108,116,105,112,108,101,32,102,97,99,101,116,115,0] /* renamed vertices sha */, "i8", ALLOC_NONE, 5291752);
allocate([37,115,32,79,84,72,69,82,32,70,65,67,69,84,58,10,0] /* %s OTHER FACET:\0A\0 */, "i8", ALLOC_NONE, 5291796);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5291816);
allocate([114,105,100,103,101,115,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,110,101,105,103,104,98,111,114,115,0] /* ridges with multiple */, "i8", ALLOC_NONE, 5291820);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,105,110,32,97,32,112,105,110,99,104,101,100,32,102,97,99,101,116,0] /* renamed vertices in  */, "i8", ALLOC_NONE, 5291852);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,102,114,101,101,41,58,32,115,101,116,32,37,112,40,115,105,122,101,32,37,100,41,32,119,97,115,32,110,111,116,32,108,97,115,116,32,116,101,109,112,111,114,97,114,121,32,97,108,108,111,99,97,116,101,100,40,100,101,112,116,104,32,37,100,44,32,115,101,116,32,37,112,44,32,115,105,122,101,32,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5291888);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,10,0] /* %8.4g %8.4g %8.4g 1\ */, "i8", ALLOC_NONE, 5292004);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,116,119,111,32,102,97,99,101,116,115,0] /* renamed vertices sha */, "i8", ALLOC_NONE, 5292028);
allocate([113,104,95,98,97,99,107,110,111,114,109,97,108,58,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,97,116,32,99,111,108,117,109,110,32,37,100,46,10,0] /* qh_backnormal: zero  */, "i8", ALLOC_NONE, 5292068);
allocate([114,101,97,115,111,110,0] /* reason\00 */, "i8", ALLOC_NONE, 5292112);
allocate([86,69,67,84,32,49,32,49,32,49,32,49,32,49,10,0] /* VECT 1 1 1 1 1\0A\00 */, "i8", ALLOC_NONE, 5292120);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,101,120,32,115,116,97,116,105,115,116,105,99,115,0] /* renamed vertex stati */, "i8", ALLOC_NONE, 5292136);
allocate([32,35,32,112,37,100,10,0] /*  # p%d\0A\00 */, "i8", ALLOC_NONE, 5292164);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0] /* merges due to duplic */, "i8", ALLOC_NONE, 5292172);
allocate([113,104,95,109,97,107,101,110,101,119,95,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,32,102,97,99,101,116,32,102,37,100,32,116,111,112,32,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,104,111,114,105,122,111,110,32,102,37,100,32,115,107,105,112,32,37,100,32,116,111,112,32,37,100,32,97,110,100,32,118,105,115,105,98,108,101,32,102,37,100,32,115,107,105,112,32,37,100,44,32,102,108,105,112,63,32,37,100,10,0] /* qh_makenew_simplicia */, "i8", ALLOC_NONE, 5292204);
allocate([86,69,67,84,32,49,32,50,32,49,32,50,32,49,10,0] /* VECT 1 2 1 2 1\0A\00 */, "i8", ALLOC_NONE, 5292328);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,109,111,118,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* merges due to removi */, "i8", ALLOC_NONE, 5292344);
allocate([51,32,48,32,49,32,50,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,10,0] /* 3 0 1 2 %8.4g %8.4g  */, "i8", ALLOC_NONE, 5292384);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,0] /* merges due to degene */, "i8", ALLOC_NONE, 5292416);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,116,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,46,32,32,118,37,100,32,100,105,115,116,32,37,46,50,103,10,0] /* qh_checkzero: facet  */, "i8", ALLOC_NONE, 5292448);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,113,117,105,99,107,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5292520);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,105,122,101,41,58,32,99,97,108,108,101,100,32,97,102,116,101,114,32,113,104,109,101,109,95,115,101,116,117,112,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5292576);
allocate([95,119,105,100,101,45,102,97,99,101,116,0] /* _wide-facet\00 */, "i8", ALLOC_NONE, 5292628);
allocate([112,114,111,106,101,99,116,101,100,32,112,37,100,10,0] /* projected p%d\0A\00 */, "i8", ALLOC_NONE, 5292640);
allocate([99,111,112,108,97,110,97,114,47,99,111,110,99,97,118,101,32,109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,118,111,105,100,105,110,103,32,111,108,100,32,109,101,114,103,101,0] /* coplanar/concave mer */, "i8", ALLOC_NONE, 5292656);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,111,112,32,112,111,105,110,116,32,111,114,32,99,111,110,101,32,80,37,100,32,105,110,32,105,110,105,116,105,97,108,32,104,117,108,108,10,0] /* qh_buildhull: stop p */, "i8", ALLOC_NONE, 5292708);
allocate([112,37,100,40,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,41,10,0] /* p%d(coplanar facets) */, "i8", ALLOC_NONE, 5292764);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,0] /* merges due to concav */, "i8", ALLOC_NONE, 5292788);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,35,32,0] /* %8.4g %8.4g %8.4g %8 */, "i8", ALLOC_NONE, 5292820);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0] /* merges due to coplan */, "i8", ALLOC_NONE, 5292848);
allocate([113,104,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,100,101,116,101,114,109,105,110,103,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,32,102,111,114,32,101,97,99,104,32,118,101,114,116,101,120,10,0] /* qh_vertexneighbors:  */, "i8", ALLOC_NONE, 5292880);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,35,32,0] /* %8.4g %8.4g %8.4g #  */, "i8", ALLOC_NONE, 5292948);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,41,58,32,110,111,32,110,101,105,103,104,98,111,114,32,111,102,32,118,37,100,32,102,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5292972);
allocate([32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0] /*   maximum merge dist */, "i8", ALLOC_NONE, 5293052);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,110,117,108,108,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate_null: */, "i8", ALLOC_NONE, 5293080);
allocate([37,115,32,70,65,67,69,84,58,10,0] /* %s FACET:\0A\00 */, "i8", ALLOC_NONE, 5293124);
allocate([35,32,105,110,116,101,114,115,101,99,116,32,102,37,100,32,102,37,100,10,0] /* # intersect f%d f%d\ */, "i8", ALLOC_NONE, 5293136);
allocate([122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0] /* zero divisors during */, "i8", ALLOC_NONE, 5293160);
allocate([32,32,97,118,101,114,97,103,101,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0] /*   average merge dist */, "i8", ALLOC_NONE, 5293204);
allocate([113,104,95,115,101,116,116,101,109,112,58,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,44,32,100,101,112,116,104,32,37,100,10,0] /* qh_settemp: temp set */, "i8", ALLOC_NONE, 5293232);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,109,105,114,114,111,114,58,32,100,101,108,101,116,101,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_triangulate_mirro */, "i8", ALLOC_NONE, 5293284);
allocate([79,70,70,32,51,32,49,32,49,32,0] /* OFF 3 1 1 \00 */, "i8", ALLOC_NONE, 5293344);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,110,103,108,101,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0] /* merges due to angle  */, "i8", ALLOC_NONE, 5293356);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbestnew: best */, "i8", ALLOC_NONE, 5293392);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,41,58,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,102,111,114,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5293440);
allocate([86,69,67,84,32,49,32,37,100,32,49,32,37,100,32,49,32,0] /* VECT 1 %d 1 %d 1 \00 */, "i8", ALLOC_NONE, 5293544);
allocate([110,111,110,45,99,111,110,118,101,120,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0] /* non-convex vertex ne */, "i8", ALLOC_NONE, 5293564);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,58,32,114,101,108,105,110,107,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,98,101,116,119,101,101,110,32,110,101,105,103,104,98,111,114,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_triangulate_link: */, "i8", ALLOC_NONE, 5293592);
allocate([37,54,46,49,54,103,32,37,54,46,49,54,103,10,0] /* %6.16g %6.16g\0A\00 */, "i8", ALLOC_NONE, 5293676);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,100,117,110,100,97,110,116,32,110,101,105,103,104,98,111,114,115,0] /* merges due to redund */, "i8", ALLOC_NONE, 5293692);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,102,97,99,101,116,58,32,116,114,105,97,110,103,117,108,97,116,101,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate_facet */, "i8", ALLOC_NONE, 5293728);
allocate([113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,114,37,100,32,111,102,32,104,111,114,105,122,111,110,32,102,37,100,10,0] /* qh_makenew_nonsimpli */, "i8", ALLOC_NONE, 5293776);
allocate([49,48,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,10,50,32,0] /* 10 %d %d %d %d %d %d */, "i8", ALLOC_NONE, 5293856);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,0] /* merges due to flippe */, "i8", ALLOC_NONE, 5293892);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,108,97,115,116,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate: all  */, "i8", ALLOC_NONE, 5293944);
allocate([48,10,50,32,0] /* 0\0A2 \00 */, "i8", ALLOC_NONE, 5294032);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5294040);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,110,101,101,100,115,32,112,114,101,45,109,101,114,103,105,110,103,10,0] /* qh_checkzero: facet  */, "i8", ALLOC_NONE, 5294080);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,32,102,37,100,32,110,111,116,32,111,119,110,101,100,32,98,121,32,105,116,115,32,118,105,115,105,98,108,101,44,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5294124);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5294228);
allocate([37,115,32,124,32,37,115,10,0] /* %s | %s\0A\00 */, "i8", ALLOC_NONE, 5294276);
allocate([87,105,100,116,104,45,111,117,116,115,105,100,101,0] /* Width-outside\00 */, "i8", ALLOC_NONE, 5294288);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5294304);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate: all  */, "i8", ALLOC_NONE, 5294356);
allocate([70,105,114,115,116,32,112,111,115,116,45,109,101,114,103,101,0] /* First post-merge\00 */, "i8", ALLOC_NONE, 5294436);
allocate([69,82,82,79,78,69,79,85,83,0] /* ERRONEOUS\00 */, "i8", ALLOC_NONE, 5294456);
allocate([79,112,116,105,111,110,115,32,115,101,108,101,99,116,101,100,32,102,111,114,32,81,104,117,108,108,32,37,115,58,10,37,115,10,0] /* Options selected for */, "i8", ALLOC_NONE, 5294468);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5294504);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,45,45,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,44,32,110,117,108,108,44,32,97,110,100,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5294532);
allocate([37,100,32,49,10,0] /* %d 1\0A\00 */, "i8", ALLOC_NONE, 5294616);
allocate([104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,110,101,119,32,102,97,99,101,116,115,0] /* horizon facets merge */, "i8", ALLOC_NONE, 5294624);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,110,100,32,114,101,112,108,97,99,101,32,102,97,99,101,116,45,62,102,46,116,114,105,111,119,110,101,114,32,119,105,116,104,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,116,104,97,116,32,111,119,110,32,99,101,110,116,101,114,44,32,110,111,114,109,97,108,44,32,101,116,99,46,10,0] /* qh_triangulate: and  */, "i8", ALLOC_NONE, 5294664);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,67,68,68,32,102,111,114,109,97,116,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,99,101,110,116,114,117,109,115,44,32,104,97,108,102,115,112,97,99,101,10,105,110,116,101,114,115,101,99,116,105,111,110,115,44,32,97,110,100,32,79,70,70,32,102,105,108,101,32,102,111,114,109,97,116,46,10,0] /* qhull warning: CDD f */, "i8", ALLOC_NONE, 5294768);
allocate([113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,111,114,100,101,114,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,37,100,32,102,111,114,32,51,45,100,10,0] /* qh_order_vertexneigh */, "i8", ALLOC_NONE, 5294872);
allocate([110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0] /* new facets merged\00 */, "i8", ALLOC_NONE, 5294932);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,105,100,101,110,116,105,102,121,32,100,101,103,101,110,101,114,97,116,101,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0] /* qh_triangulate: iden */, "i8", ALLOC_NONE, 5294952);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,101,110,100,105,110,103,32,112,114,111,103,114,97,109,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0] /* qhull error while en */, "i8", ALLOC_NONE, 5295020);
allocate([32,32,32,32,32,45,32,97,108,108,32,114,105,100,103,101,115,58,0] /*      - all ridges:\0 */, "i8", ALLOC_NONE, 5295072);
allocate([122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,98,97,99,107,32,115,117,98,115,116,105,116,117,116,101,0] /* zero divisors during */, "i8", ALLOC_NONE, 5295092);
allocate([110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,104,111,114,105,122,111,110,0] /* new facets merged in */, "i8", ALLOC_NONE, 5295132);
allocate([115,101,116,58,32,0] /* set: \00 */, "i8", ALLOC_NONE, 5295164);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,32,108,105,115,116,115,32,102,111,114,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,118,37,100,10,0] /* qh_triangulate: upda */, "i8", ALLOC_NONE, 5295172);
allocate([32,32,32,32,45,32,114,105,100,103,101,115,58,10,0] /*     - ridges:\0A\00 */, "i8", ALLOC_NONE, 5295236);
allocate([32,32,109,97,120,46,32,102,97,99,101,116,115,0] /*   max. facets\00 */, "i8", ALLOC_NONE, 5295252);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,101,114,109,105,110,97,116,101,41,58,32,111,110,108,121,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,62,61,32,50,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5295268);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,10,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5295344);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,37,100,32,111,114,32,109,111,114,101,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,45,45,32,115,97,109,101,32,118,101,114,116,105,99,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5295368);
allocate([32,114,37,100,0] /*  r%d\00 */, "i8", ALLOC_NONE, 5295448);
allocate([32,32,97,118,101,46,32,102,97,99,101,116,115,32,112,101,114,32,99,121,99,108,101,0] /*   ave. facets per cy */, "i8", ALLOC_NONE, 5295456);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,114,105,100,103,101,115,32,115,116,105,108,108,32,100,101,102,105,110,101,100,32,102,111,114,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5295480);
allocate([32,32,32,32,45,32,114,105,100,103,101,115,40,105,100,115,32,109,97,121,32,98,101,32,103,97,114,98,97,103,101,41,58,0] /*     - ridges(ids may */, "i8", ALLOC_NONE, 5295540);
allocate([99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* cycles of facets mer */, "i8", ALLOC_NONE, 5295576);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,109,97,120,111,117,116,115,105,100,101,32,37,50,46,50,103,44,32,109,105,110,95,118,101,114,116,101,120,32,37,50,46,50,103,44,32,111,117,116,115,105,100,101,32,111,102,32,110,111,116,32,103,111,111,100,32,37,100,10,0] /* qh_check_maxout: max */, "i8", ALLOC_NONE, 5295624);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,32,45,45,32,97,112,101,120,32,115,97,109,101,32,97,115,32,115,101,99,111,110,100,32,118,101,114,116,101,120,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5295704);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,41,58,32,115,105,109,112,108,105,99,105,97,108,32,102,37,100,32,115,104,97,114,105,110,103,32,116,119,111,32,114,105,100,103,101,115,32,119,105,116,104,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5295780);
allocate([32,102,37,100,0] /*  f%d\00 */, "i8", ALLOC_NONE, 5295876);
allocate([115,105,109,112,108,105,99,101,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* simplices merged int */, "i8", ALLOC_NONE, 5295884);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,116,114,105,97,110,103,117,108,97,116,101,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,0] /* qh_triangulate: tria */, "i8", ALLOC_NONE, 5295924);
allocate([32,68,85,80,0] /*  DUP\00 */, "i8", ALLOC_NONE, 5295976);
allocate([109,101,114,103,101,100,32,97,32,115,105,109,112,108,101,120,0] /* merged a simplex\00 */, "i8", ALLOC_NONE, 5295984);
allocate([99,108,101,97,114,108,121,32,99,111,110,118,101,120,0] /* clearly convex\00 */, "i8", ALLOC_NONE, 5296004);
allocate([10,32,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,32,110,101,120,116,32,102,97,99,101,116,32,102,111,114,32,113,104,95,97,100,100,112,111,105,110,116,32,37,100,10,32,32,118,101,114,116,105,99,101,115,40,110,101,119,32,37,100,41,58,0] /* \0A  new facets %d v */, "i8", ALLOC_NONE, 5296020);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,108,97,114,103,101,115,116,32,109,101,109,32,115,105,122,101,32,37,100,32,105,115,32,62,61,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,32,111,114,32,105,110,105,116,105,97,108,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5296108);
allocate([32,77,69,82,71,69,0] /*  MERGE\00 */, "i8", ALLOC_NONE, 5296204);
allocate([85,45,99,111,112,108,97,110,97,114,45,100,105,115,116,97,110,99,101,0] /* U-coplanar-distance\ */, "i8", ALLOC_NONE, 5296212);
allocate([116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,111,114,32,99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0] /* total number of face */, "i8", ALLOC_NONE, 5296232);
allocate([10,32,32,32,32,32,0] /* \0A     \00 */, "i8", ALLOC_NONE, 5296284);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,110,101,119,32,118,101,114,116,101,120,32,102,37,100,32,105,110,32,118,101,114,116,101,120,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5296292);
allocate([32,32,32,32,45,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,58,0] /*     - neighboring fa */, "i8", ALLOC_NONE, 5296360);
allocate([99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,0] /* centrums frozen due  */, "i8", ALLOC_NONE, 5296388);
allocate([81,82,97,110,100,111,109,45,115,101,101,100,0] /* QRandom-seed\00 */, "i8", ALLOC_NONE, 5296428);
allocate([113,104,95,112,114,105,110,116,108,105,115,116,115,58,32,102,97,99,101,116,115,58,0] /* qh_printlists: facet */, "i8", ALLOC_NONE, 5296444);
allocate([32,32,32,32,45,32,118,101,114,116,105,99,101,115,58,0] /*     - vertices:\00 */, "i8", ALLOC_NONE, 5296468);
allocate([99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,97,32,119,105,100,101,32,109,101,114,103,101,0] /* centrums frozen due  */, "i8", ALLOC_NONE, 5296484);
allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_NONE, 5296520);
allocate([32,32,32,32,32,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0] /*       furthest dista */, "i8", ALLOC_NONE, 5296524);
allocate([113,104,95,109,97,114,107,118,111,114,111,110,111,105,58,32,105,115,76,111,119,101,114,32,37,100,32,110,117,109,99,101,110,116,101,114,115,32,37,100,10,0] /* qh_markvoronoi: isLo */, "i8", ALLOC_NONE, 5296556);
allocate([109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,109,101,114,103,101,100,32,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,40,111,114,32,114,111,117,110,100,111,102,102,41,0] /* max distance of merg */, "i8", ALLOC_NONE, 5296600);
allocate([10,32,110,101,105,103,104,98,111,114,115,58,0] /* \0A neighbors:\00 */, "i8", ALLOC_NONE, 5296656);
allocate([97,116,32,101,114,114,111,114,32,101,120,105,116,0] /* at error exit\00 */, "i8", ALLOC_NONE, 5296672);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0] /*     - coplanar set:  */, "i8", ALLOC_NONE, 5296688);
allocate([110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,45,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,115,0] /* nearly singular or a */, "i8", ALLOC_NONE, 5296720);
allocate([109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,118,101,114,116,101,120,32,111,114,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,40,119,47,114,111,117,110,100,111,102,102,41,0] /* max distance of vert */, "i8", ALLOC_NONE, 5296768);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,115,105,122,101,41,58,32,99,117,114,114,101,110,116,32,115,101,116,32,115,105,122,101,32,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,32,115,105,122,101,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5296836);
allocate([118,37,100,32,0] /* v%d \00 */, "i8", ALLOC_NONE, 5296924);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,0] /*     - coplanar set:\ */, "i8", ALLOC_NONE, 5296932);
allocate([32,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,0] /*   additional non-con */, "i8", ALLOC_NONE, 5296952);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,112,37,100,32,118,105,115,105,116,105,100,32,37,100,46,0] /*   Last point added p */, "i8", ALLOC_NONE, 5296984);
allocate([104,97,115,104,32,37,100,32,102,37,100,32,0] /* hash %d f%d \00 */, "i8", ALLOC_NONE, 5297020);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0] /*     - coplanar set(f */, "i8", ALLOC_NONE, 5297036);
allocate([105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,102,111,114,32,112,111,115,116,32,109,101,114,103,105,110,103,0] /* initial non-convex r */, "i8", ALLOC_NONE, 5297072);
allocate([113,104,95,112,114,101,112,101,110,100,102,97,99,101,116,58,32,112,114,101,112,101,110,100,32,102,37,100,32,98,101,102,111,114,101,32,102,37,100,10,0] /* qh_prependfacet: pre */, "i8", ALLOC_NONE, 5297116);
allocate([32,32,32,32,45,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0] /*     - furthest dista */, "i8", ALLOC_NONE, 5297160);
allocate([32,32,109,97,120,105,109,117,109,32,97,100,100,105,116,105,111,110,97,108,32,105,110,32,111,110,101,32,112,97,115,115,0] /*   maximum additional */, "i8", ALLOC_NONE, 5297192);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,112,37,100,32,105,115,32,37,46,50,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qh_check_maxout: p%d */, "i8", ALLOC_NONE, 5297228);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,114,111,114,40,112,111,105,110,116,95,97,100,100,41,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,40,37,100,41,10,0] /* qhull internal errro */, "i8", ALLOC_NONE, 5297268);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,110,101,103,97,116,105,118,101,32,104,97,115,104,115,105,122,101,32,37,100,32,112,97,115,115,101,100,32,116,111,32,113,104,95,103,101,116,104,97,115,104,32,91,112,111,108,121,46,99,93,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5297336);
allocate([32,32,70,117,114,116,104,101,115,116,0] /*   Furthest\00 */, "i8", ALLOC_NONE, 5297412);
allocate([32,32,97,118,101,46,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*   ave. additional no */, "i8", ALLOC_NONE, 5297424);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,119,97,114,110,105,110,103,32,40,112,111,105,110,116,95,97,100,100,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,105,100,32,37,100,10,0] /* qhull internal warni */, "i8", ALLOC_NONE, 5297476);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0] /*     - outside set:   */, "i8", ALLOC_NONE, 5297536);
allocate([32,32,109,97,120,105,109,117,109,0] /*   maximum\00 */, "i8", ALLOC_NONE, 5297568);
allocate([110,111,116,32,99,111,110,99,97,118,101,44,32,102,108,105,112,112,101,100,44,32,111,114,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,100,0] /* not concave, flipped */, "i8", ALLOC_NONE, 5297580);
allocate([113,104,95,111,117,116,99,111,112,108,97,110,97,114,58,32,109,111,118,101,32,111,117,116,115,105,100,101,115,101,116,32,116,111,32,99,111,112,108,97,110,97,114,115,101,116,32,102,111,114,32,113,104,32,78,65,82,82,79,87,104,117,108,108,10,0] /* qh_outcoplanar: move */, "i8", ALLOC_NONE, 5297624);
allocate([113,104,95,109,101,109,105,110,105,116,98,117,102,102,101,114,115,58,32,109,101,109,111,114,121,32,105,110,105,116,105,97,108,105,122,101,100,32,119,105,116,104,32,97,108,105,103,110,109,101,110,116,32,37,100,10,0] /* qh_meminitbuffers: m */, "i8", ALLOC_NONE, 5297692);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,0] /*     - outside set:\0 */, "i8", ALLOC_NONE, 5297752);
allocate([97,118,101,46,32,105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. initial non-con */, "i8", ALLOC_NONE, 5297772);
allocate([86,105,115,105,98,108,101,45,100,105,115,116,97,110,99,101,0] /* Visible-distance\00 */, "i8", ALLOC_NONE, 5297820);
allocate([113,104,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,99,114,101,97,116,101,100,10,0] /* qh_newvertex: vertex */, "i8", ALLOC_NONE, 5297840);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,118,105,115,105,98,108,101,32,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,105,110,32,102,97,99,101,116,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5297880);
allocate([32,32,32,32,32,0] /*      \00 */, "i8", ALLOC_NONE, 5297960);
allocate([109,101,114,103,101,32,105,116,101,114,97,116,105,111,110,115,0] /* merge iterations\00 */, "i8", ALLOC_NONE, 5297968);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,118,101,114,116,105,99,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,86,101,114,116,105,99,101,115,32,119,105,108,108,32,110,111,116,32,98,101,32,115,111,114,116,101,100,32,99,111,114,114,101,99,116,108,121,46,10,0] /* qhull error: more th */, "i8", ALLOC_NONE, 5297988);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0] /*     - outside set(fu */, "i8", ALLOC_NONE, 5298132);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,101,114,103,105,110,103,0] /* statistics for mergi */, "i8", ALLOC_NONE, 5298168);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,110,101,119,104,97,115,104,116,97,98,108,101,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,40,37,100,41,32,111,114,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0] /* qhull error (qh_newh */, "i8", ALLOC_NONE, 5298192);
allocate([113,104,95,118,101,114,116,101,120,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0] /* qh_vertexridges: fou */, "i8", ALLOC_NONE, 5298296);
allocate([32,32,32,32,45,32,109,97,120,111,117,116,115,105,100,101,58,32,37,49,48,46,55,103,10,0] /*     - maxoutside: %1 */, "i8", ALLOC_NONE, 5298340);
allocate([113,104,95,109,97,114,107,107,101,101,112,58,32,111,110,108,121,32,107,101,101,112,32,37,100,32,108,97,114,103,101,115,116,32,97,110,100,47,111,114,32,37,100,32,109,111,115,116,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,97,110,100,47,111,114,32,109,105,110,32,97,114,101,97,32,37,46,50,103,10,0] /* qh_markkeep: only ke */, "i8", ALLOC_NONE, 5298368);
allocate([99,111,110,99,97,118,101,32,114,105,100,103,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* concave ridges in ge */, "i8", ALLOC_NONE, 5298456);
allocate(1, "i8", ALLOC_NONE, 5298488);
allocate([113,104,95,110,101,97,114,118,101,114,116,101,120,58,32,118,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0] /* qh_nearvertex: v%d d */, "i8", ALLOC_NONE, 5298492);
allocate([10,65,116,32,37,100,58,37,100,58,37,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,46,32,32,84,104,101,32,104,117,108,108,10,32,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,10,0] /* \0AAt %d:%d:%d & %2. */, "i8", ALLOC_NONE, 5298536);
allocate([10,65,116,32,101,114,114,111,114,32,101,120,105,116,58,10,0] /* \0AAt error exit:\0A */, "i8", ALLOC_NONE, 5298644);
allocate([32,32,32,32,45,32,99,101,110,116,101,114,58,32,0] /*     - center: \00 */, "i8", ALLOC_NONE, 5298664);
allocate([100,101,103,101,110,101,114,97,116,101,32,104,121,112,101,114,112,108,97,110,101,115,32,114,101,99,111,109,112,117,116,101,100,32,119,105,116,104,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0] /* degenerate hyperplan */, "i8", ALLOC_NONE, 5298680);
allocate([99,111,112,108,97,110,97,114,32,99,101,110,116,114,117,109,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* coplanar centrums in */, "i8", ALLOC_NONE, 5298740);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,114,101,112,108,97,99,101,41,58,32,101,108,101,109,32,37,112,32,110,111,116,32,102,111,117,110,100,32,105,110,32,115,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5298776);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,97,114,118,101,114,116,101,120,41,58,32,113,104,46,86,69,82,84,69,88,110,101,105,103,104,98,111,114,115,32,97,110,100,32,102,97,99,101,116,45,62,99,101,110,116,101,114,32,114,101,113,117,105,114,101,100,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5298840);
allocate([113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,118,101,114,116,101,120,32,100,101,108,101,116,101,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0] /* qh_tracemerge: trace */, "i8", ALLOC_NONE, 5298948);
allocate([32,32,32,32,45,32,111,102,102,115,101,116,58,32,37,49,48,46,55,103,10,0] /*     - offset: %10.7g */, "i8", ALLOC_NONE, 5299004);
allocate([99,111,112,108,97,110,97,114,32,97,110,103,108,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* coplanar angles in g */, "i8", ALLOC_NONE, 5299028);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,46,32,83,116,111,112,63,32,37,100,32,105,102,32,100,105,115,116,32,62,32,37,50,46,50,103,10,0] /* qh_findbestnew: poin */, "i8", ALLOC_NONE, 5299060);
allocate([68,85,80,76,73,67,65,84,69,68,47,77,65,84,67,72,0] /* DUPLICATED/MATCH\00 */, "i8", ALLOC_NONE, 5299124);
allocate([113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,102,97,99,101,116,32,97,110,100,32,118,101,114,116,101,120,32,97,102,116,101,114,32,109,101,114,103,101,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0] /* qh_tracemerge: trace */, "i8", ALLOC_NONE, 5299144);
allocate([32,32,32,32,45,32,110,111,114,109,97,108,58,32,0] /*     - normal: \00 */, "i8", ALLOC_NONE, 5299224);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,115,105,109,112,108,105,99,105,97,108,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5299240);
allocate([114,105,100,103,101,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,110,101,105,103,104,98,111,114,115,0] /* ridge with multiple  */, "i8", ALLOC_NONE, 5299292);
allocate([77,69,82,71,69,68,0] /* MERGED\00 */, "i8", ALLOC_NONE, 5299324);
allocate([32,32,32,32,45,32,109,101,114,103,101,115,58,32,37,100,10,0] /*     - merges: %d\0A\ */, "i8", ALLOC_NONE, 5299332);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,101,110,116,114,117,109,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5299352);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,112,37,100,40,118,37,100,41,32,105,115,32,37,46,50,103,32,102,114,111,109,32,102,37,100,10,0] /* qh_check_maxout: p%d */, "i8", ALLOC_NONE, 5299392);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,107,101,101,112,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5299436);
allocate([113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,102,111,117,110,100,32,37,100,32,110,111,110,45,99,111,110,118,101,120,44,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_test_vneighbors:  */, "i8", ALLOC_NONE, 5299516);
allocate([113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,115,32,102,37,100,32,115,107,105,112,32,37,100,10,0] /* qh_facetintersect: f */, "i8", ALLOC_NONE, 5299576);
allocate([32,32,32,32,45,32,119,97,115,32,104,111,114,105,122,111,110,32,116,111,32,102,37,100,10,0] /*     - was horizon to */, "i8", ALLOC_NONE, 5299628);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,98,101,115,116,32,109,101,114,103,101,0] /* distance tests for b */, "i8", ALLOC_NONE, 5299656);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,110,111,32,109,97,120,105,109,117,109,32,109,97,116,99,104,32,97,116,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5299688);
allocate([113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,105,110,103,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,10,0] /* qh_test_vneighbors:  */, "i8", ALLOC_NONE, 5299788);
allocate([32,32,32,32,45,32,111,119,110,101,114,32,111,102,32,110,111,114,109,97,108,32,38,32,99,101,110,116,114,117,109,32,105,115,32,102,97,99,101,116,32,102,37,100,10,0] /*     - owner of norma */, "i8", ALLOC_NONE, 5299848);
allocate([98,101,115,116,32,109,101,114,103,101,115,32,117,115,101,100,32,99,101,110,116,114,117,109,32,105,110,115,116,101,97,100,32,111,102,32,118,101,114,116,105,99,101,115,0] /* best merges used cen */, "i8", ALLOC_NONE, 5299896);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,116,101,115,116,97,108,108,32,37,100,44,32,102,97,99,101,116,115,32,97,114,101,32,37,115,10,0] /* qh_checkzero: testal */, "i8", ALLOC_NONE, 5299944);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,110,111,32,77,69,82,71,69,114,105,100,103,101,32,109,97,116,99,104,32,102,111,114,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5299988);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,44,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5300092);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,105,110,105,116,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0] /* qhull error (qh_memi */, "i8", ALLOC_NONE, 5300180);
allocate([32,32,32,32,45,32,115,104,97,114,101,115,32,115,97,109,101,32,118,105,115,105,98,108,101,47,104,111,114,105,122,111,110,32,97,115,32,102,37,100,10,0] /*     - shares same vi */, "i8", ALLOC_NONE, 5300228);
allocate([97,110,103,108,101,115,32,99,111,109,112,117,116,101,100,32,102,111,114,32,114,105,100,103,101,32,99,111,110,118,101,120,105,116,121,0] /* angles computed for  */, "i8", ALLOC_NONE, 5300272);
allocate([112,114,101,99,105,115,105,111,110,32,115,116,97,116,105,115,116,105,99,115,0] /* precision statistics */, "i8", ALLOC_NONE, 5300308);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,116,104,101,32,106,111,103,103,108,101,32,102,111,114,32,39,81,74,110,39,44,32,37,46,50,103,44,32,105,115,32,98,101,108,111,119,32,114,111,117,110,100,111,102,102,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,115,44,32,37,46,50,103,10,0] /* qhull error: the jog */, "i8", ALLOC_NONE, 5300332);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,100,105,115,116,32,37,50,46,50,103,44,32,109,97,120,32,105,115,32,110,111,119,32,102,37,100,32,102,37,100,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5300424);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,110,99,97,118,101,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5300520);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,97,114,116,32,98,117,105,108,100,32,104,117,108,108,10,0] /* qh_buildhull: start  */, "i8", ALLOC_NONE, 5300620);
allocate([32,32,32,32,45,32,114,101,112,108,97,99,101,109,101,110,116,58,32,102,37,100,10,0] /*     - replacement: f */, "i8", ALLOC_NONE, 5300652);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,100,101,116,101,114,109,105,110,105,110,103,32,109,101,114,103,101,115,0] /* statistics for deter */, "i8", ALLOC_NONE, 5300676);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,109,101,114,103,101,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5300712);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,97,110,103,108,101,32,37,52,46,52,103,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5300792);
allocate([32,32,32,32,45,32,97,114,101,97,58,32,37,50,46,50,103,10,0] /*     - area: %2.2g\0A */, "i8", ALLOC_NONE, 5300856);
allocate([100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* duplicated ridges wi */, "i8", ALLOC_NONE, 5300876);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,109,105,115,115,105,110,103,32,100,117,112,114,105,100,103,101,32,97,116,32,102,37,100,32,115,107,105,112,32,37,100,32,102,111,114,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5300916);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,112,105,110,99,104,101,100,32,118,37,100,32,116,111,32,118,37,100,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5301020);
allocate([32,114,101,100,117,110,100,97,110,116,0] /*  redundant\00 */, "i8", ALLOC_NONE, 5301088);
allocate([113,104,95,101,97,99,104,118,111,114,111,110,111,105,58,32,86,111,114,111,110,111,105,32,114,105,100,103,101,32,111,102,32,37,100,32,118,101,114,116,105,99,101,115,32,98,101,116,119,101,101,110,32,115,105,116,101,115,32,37,100,32,97,110,100,32,37,100,10,0] /* qh_eachvoronoi: Voro */, "i8", ALLOC_NONE, 5301100);
allocate([100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,105,110,32,115,97,109,101,32,109,101,114,103,101,32,99,121,99,108,101,0] /* duplicated ridges in */, "i8", ALLOC_NONE, 5301172);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,102,105,110,100,32,100,117,112,108,105,99,97,116,101,32,109,97,116,99,104,101,115,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5301212);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,111,108,100,102,97,99,101,116,32,102,37,100,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5301296);
allocate([97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,40,33,48,115,41,0] /* ave. distance of a n */, "i8", ALLOC_NONE, 5301352);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5301400);
allocate([32,100,101,103,101,110,101,114,97,116,101,0] /*  degenerate\00 */, "i8", ALLOC_NONE, 5301404);
allocate([99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,100,117,114,105,110,103,32,112,97,114,116,105,116,105,111,110,105,110,103,0] /* coplanar points duri */, "i8", ALLOC_NONE, 5301416);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,112,101,114,32,115,117,98,114,105,100,103,101,0] /* average number of te */, "i8", ALLOC_NONE, 5301452);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5301492);
allocate([46,101,120,101,0] /* .exe\00 */, "i8", ALLOC_NONE, 5301496);
allocate([113,104,95,109,97,107,101,110,101,119,102,97,99,101,116,115,58,32,99,114,101,97,116,101,100,32,37,100,32,110,101,119,32,102,97,99,101,116,115,32,102,114,111,109,32,112,111,105,110,116,32,112,37,100,32,116,111,32,104,111,114,105,122,111,110,10,0] /* qh_makenewfacets: cr */, "i8", ALLOC_NONE, 5301504);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,115,101,118,101,114,97,108,32,102,97,99,101,116,115,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5301572);
allocate([32,110,111,116,102,117,114,116,104,101,115,116,0] /*  notfurthest\00 */, "i8", ALLOC_NONE, 5301628);
allocate([116,111,116,97,108,32,108,111,111,107,117,112,115,32,111,102,32,115,117,98,114,105,100,103,101,115,40,100,117,112,108,105,99,97,116,101,115,32,97,110,100,32,98,111,117,110,100,97,114,121,41,0] /* total lookups of sub */, "i8", ALLOC_NONE, 5301644);
allocate(1, "i8", ALLOC_NONE, 5301696);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,110,111,32,110,101,119,32,102,97,99,101,116,115,32,102,111,114,32,112,111,105,110,116,32,112,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5301700);
allocate([46,69,88,69,0] /* .EXE\00 */, "i8", ALLOC_NONE, 5301768);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5301776);
allocate([113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,115,119,97,112,112,101,100,32,116,104,101,32,116,111,112,32,97,110,100,32,98,111,116,116,111,109,32,111,102,32,114,105,100,103,101,32,114,37,100,10,0] /* qh_renameridgevertex */, "i8", ALLOC_NONE, 5301780);
allocate([32,102,108,105,112,112,101,100,0] /*  flipped\00 */, "i8", ALLOC_NONE, 5301844);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,116,111,32,109,97,116,99,104,32,97,32,114,105,100,103,101,0] /* average number of te */, "i8", ALLOC_NONE, 5301856);
allocate([32,37,54,46,52,103,0] /*  %6.4g\00 */, "i8", ALLOC_NONE, 5301900);
allocate([113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,114,105,100,103,101,32,114,37,100,32,100,101,108,101,116,101,100,46,32,32,73,116,32,99,111,110,116,97,105,110,101,100,32,98,111,116,104,32,118,37,100,32,97,110,100,32,118,37,100,10,0] /* qh_renameridgevertex */, "i8", ALLOC_NONE, 5301908);
allocate([32,110,101,119,109,101,114,103,101,0] /*  newmerge\00 */, "i8", ALLOC_NONE, 5301984);
allocate([116,111,116,97,108,32,108,111,111,107,117,112,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,0] /* total lookups for ma */, "i8", ALLOC_NONE, 5301996);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,100,101,116,101,114,109,105,110,101,32,97,99,116,117,97,108,32,109,97,120,111,117,116,115,105,100,101,32,97,110,100,32,109,105,110,118,101,114,116,101,120,10,0] /* qh_check_maxout: det */, "i8", ALLOC_NONE, 5302044);
allocate([113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,115,105,109,112,108,101,120,32,99,111,110,115,116,114,117,99,116,101,100,44,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,58,0] /* qh_initialhull: simp */, "i8", ALLOC_NONE, 5302104);
allocate([113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,58,32,112,37,100,40,118,37,100,41,32,105,115,32,115,104,97,114,101,100,32,98,121,32,102,37,100,40,37,100,32,114,105,100,103,101,115,41,32,97,110,100,32,102,37,100,10,0] /* qh_rename_sharedvert */, "i8", ALLOC_NONE, 5302160);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,41,58,32,102,37,100,32,111,114,32,102,37,100,32,110,111,116,32,105,110,32,111,116,104,101,114,115,32,110,101,105,103,104,98,111,114,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5302232);
allocate([32,109,101,114,103,101,114,105,100,103,101,50,0] /*  mergeridge2\00 */, "i8", ALLOC_NONE, 5302312);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,0] /* statistics for match */, "i8", ALLOC_NONE, 5302328);
allocate([95,110,97,114,114,111,119,45,104,117,108,108,0] /* _narrow-hull\00 */, "i8", ALLOC_NONE, 5302360);
allocate([69,82,82,79,78,69,79,85,83,0] /* ERRONEOUS\00 */, "i8", ALLOC_NONE, 5302376);
allocate([32,109,101,114,103,101,114,105,100,103,101,49,0] /*  mergeridge1\00 */, "i8", ALLOC_NONE, 5302388);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,111,109,112,117,116,105,110,103,32,102,117,114,116,104,101,115,116,0] /* distance tests for c */, "i8", ALLOC_NONE, 5302404);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,115,107,105,112,32,99,111,110,118,101,120,105,116,121,32,99,104,101,99,107,32,117,110,116,105,108,32,102,105,114,115,116,32,112,114,101,45,109,101,114,103,101,10,0] /* qh_checkzero: skip c */, "i8", ALLOC_NONE, 5302444);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,102,97,99,101,116,32,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5302504);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,41,58,32,118,37,100,39,115,32,110,101,105,103,104,98,111,114,115,32,110,111,116,32,105,110,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5302584);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,105,110,105,116,41,58,32,109,101,109,111,114,121,32,97,108,105,103,110,109,101,110,116,32,37,100,32,105,115,32,110,111,116,32,97,32,112,111,119,101,114,32,111,102,32,50,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5302660);
allocate([32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,58,32,37,50,46,50,103,0] /*   Maximum distance o */, "i8", ALLOC_NONE, 5302736);
allocate([32,100,117,112,114,105,100,103,101,0] /*  dupridge\00 */, "i8", ALLOC_NONE, 5302788);
allocate([32,32,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,116,104,101,115,101,32,112,97,114,116,105,116,105,111,110,115,0] /*    distance tests fo */, "i8", ALLOC_NONE, 5302800);
allocate([95,110,101,97,114,45,105,110,115,105,100,101,0] /* _near-inside\00 */, "i8", ALLOC_NONE, 5302840);
allocate([105,110,105,116,105,97,108,32,102,97,99,101,116,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,0] /* initial facet is cop */, "i8", ALLOC_NONE, 5302856);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,37,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5302904);
allocate([95,114,117,110,0] /* _run\00 */, "i8", ALLOC_NONE, 5302980);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5302988);
allocate([32,107,101,101,112,99,101,110,116,114,117,109,0] /*  keepcentrum\00 */, "i8", ALLOC_NONE, 5302992);
allocate([112,97,114,116,105,116,105,111,110,115,32,111,102,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,111,114,32,100,101,108,101,116,101,100,32,118,101,114,116,105,99,101,115,0] /* partitions of coplan */, "i8", ALLOC_NONE, 5303008);
allocate([81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,102,111,114,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,32,32,79,112,116,105,111,110,32,39,81,122,39,32,97,100,100,115,32,97,32,112,111,105,110,116,32,34,97,116,32,105,110,102,105,110,105,116,121,34,32,40,97,98,111,118,101,32,116,104,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,112,97,114,97,98,111,108,111,105,100,41,46,10,0] /* Qhull input error: U */, "i8", ALLOC_NONE, 5303060);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5303260);
allocate([32,40,37,46,49,102,120,41,10,0] /*  (%.1fx)\0A\00 */, "i8", ALLOC_NONE, 5303328);
allocate([32,109,101,114,103,101,104,111,114,105,122,111,110,0] /*  mergehorizon\00 */, "i8", ALLOC_NONE, 5303340);
allocate([116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,0] /* total number of dist */, "i8", ALLOC_NONE, 5303356);
allocate([81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,67,97,110,32,110,111,116,32,99,111,109,112,117,116,101,32,116,104,101,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,117,112,112,101,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,10,0] /* Qhull input error: C */, "i8", ALLOC_NONE, 5303388);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5303516);
allocate([109,101,114,103,101,100,32,0] /* merged \00 */, "i8", ALLOC_NONE, 5303572);
allocate([32,99,111,112,108,97,110,97,114,0] /*  coplanar\00 */, "i8", ALLOC_NONE, 5303580);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,114,105,100,103,101,51,41,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,101,114,116,101,120,32,112,37,100,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,32,97,116,32,102,97,99,101,116,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5303592);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,115,116,97,116,105,115,116,105,99,115,0] /* distance tests for s */, "i8", ALLOC_NONE, 5303688);
allocate([81,105,110,116,101,114,105,111,114,45,107,101,101,112,0] /* Qinterior-keep\00 */, "i8", ALLOC_NONE, 5303720);
allocate([113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,105,110,105,116,105,97,108,32,111,114,105,101,110,116,97,116,105,111,110,32,105,110,99,111,114,114,101,99,116,46,32,32,67,111,114,114,101,99,116,32,97,108,108,32,102,97,99,101,116,115,10,0] /* qh_initialhull: init */, "i8", ALLOC_NONE, 5303736);
allocate([113,104,95,114,101,100,117,110,100,97,110,116,95,118,101,114,116,101,120,58,32,99,104,101,99,107,32,105,102,32,118,37,100,32,99,97,110,32,98,101,32,114,101,110,97,109,101,100,10,0] /* qh_redundant_vertex: */, "i8", ALLOC_NONE, 5303804);
allocate([32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,58,32,37,50,46,50,103,0] /*   Maximum distance o */, "i8", ALLOC_NONE, 5303856);
allocate([10,81,104,117,108,108,32,104,97,115,32,115,116,97,114,116,101,100,32,112,111,115,116,45,109,101,114,103,105,110,103,46,0] /* \0AQhull has started */, "i8", ALLOC_NONE, 5303908);
allocate([32,115,101,101,110,0] /*  seen\00 */, "i8", ALLOC_NONE, 5303944);
allocate([99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,102,111,114,32,110,101,119,32,118,101,114,116,105,99,101,115,0] /* coplanar horizon fac */, "i8", ALLOC_NONE, 5303952);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,111,117,116,112,117,116,0] /* distance tests for o */, "i8", ALLOC_NONE, 5303996);
allocate([32,37,112,0] /*  %p\00 */, "i8", ALLOC_NONE, 5304024);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,99,111,109,109,97,110,100,32,108,105,110,101,10,0] /* qhull input error: m */, "i8", ALLOC_NONE, 5304028);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,97,100,100,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5304088);
allocate([113,104,95,105,110,105,116,98,117,105,108,100,58,32,105,110,105,116,105,97,108,32,104,117,108,108,32,99,114,101,97,116,101,100,32,97,110,100,32,112,111,105,110,116,115,32,112,97,114,116,105,116,105,111,110,101,100,10,0] /* qh_initbuild: initia */, "i8", ALLOC_NONE, 5304160);
allocate([113,104,95,114,101,100,117,99,101,118,101,114,116,105,99,101,115,58,32,114,101,110,97,109,101,100,32,37,100,32,115,104,97,114,101,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,46,32,68,101,103,101,110,63,32,37,100,10,0] /* qh_reducevertices: r */, "i8", ALLOC_NONE, 5304220);
allocate([32,32,37,115,32,118,111,108,117,109,101,58,32,32,32,32,32,32,32,37,50,46,56,103,10,0] /*   %s volume:       % */, "i8", ALLOC_NONE, 5304304);
allocate([32,110,111,116,71,0] /*  notG\00 */, "i8", ALLOC_NONE, 5304332);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,103,111,111,100,32,112,111,105,110,116,0] /* distance tests for c */, "i8", ALLOC_NONE, 5304340);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,109,101,114,103,105,110,103,32,104,97,115,32,102,111,114,109,101,100,32,97,110,100,32,100,101,108,101,116,101,100,32,97,32,99,111,110,101,32,111,102,32,110,101,119,32,102,97,99,101,116,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5304380);
allocate([37,54,46,49,54,103,32,0] /* %6.16g \00 */, "i8", ALLOC_NONE, 5304496);
allocate([113,104,95,100,105,115,116,112,108,97,110,101,58,32,0] /* qh_distplane: \00 */, "i8", ALLOC_NONE, 5304504);
allocate(468, "i8", ALLOC_NONE, 5304520);
allocate([0,16,0,0], "i8", ALLOC_NONE, 5304988);
allocate(4, "i8", ALLOC_NONE, 5304992);
allocate(4, "i8", ALLOC_NONE, 5304996);
HEAP32[((5242996)>>2)]=((5252468)|0);

  var _sqrt=Math.sqrt;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        if (HEAP8[((pdest)+(len+i))] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[((pdest)+(len+i))]=0
          break;
        }
      }
      return pdest;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  var _fabs=Math.abs;

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var comparator = function(x, y) {
        return Runtime.dynCall('iii', cmp, [x, y]);
      }
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }
var _setjmp; // stub for _setjmp

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  var _floor=Math.floor;

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  var _abs=Math.abs;

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        //assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  var _vfprintf;

  function _llvm_va_end() {}
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_qh_printvridge,0,_qh_compareangle,0,_qh_compare_facetarea,0,_qh_comparevisit,0,_qh_intcompare,0,_qh_printvnorm,0,_qh_compare_facetvisit,0,_qh_compare_facetmerge,0,_qh_comparemerge,0];

function _qh_distplane($point, $facet, $dist) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $facet_addr;
      var $dist_addr;
      var $normal;
      var $coordp;
      var $randr;
      var $k;
      $point_addr=$point;
      $facet_addr=$facet;
      $dist_addr=$dist;
      var $0=$facet_addr;
      var $normal1=(($0+24)|0);
      var $1=HEAP32[(($normal1)>>2)];
      $normal=$1;
      var $2=HEAP32[((((5247508)|0))>>2)];
      if ((($2)|0)==2) {
        label = 3; break;
      }
      else if ((($2)|0)==3) {
        label = 4; break;
      }
      else if ((($2)|0)==4) {
        label = 5; break;
      }
      else if ((($2)|0)==5) {
        label = 6; break;
      }
      else if ((($2)|0)==6) {
        label = 7; break;
      }
      else if ((($2)|0)==7) {
        label = 8; break;
      }
      else if ((($2)|0)==8) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 3: 
      var $3=$facet_addr;
      var $offset=(($3+16)|0);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=$point_addr;
      var $arrayidx=(($5)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$normal;
      var $arrayidx2=(($7)|0);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($6)*($8);
      var $add=($4)+($mul);
      var $9=$point_addr;
      var $arrayidx3=(($9+8)|0);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$normal;
      var $arrayidx4=(($11+8)|0);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul5=($10)*($12);
      var $add6=($add)+($mul5);
      var $13=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add6,HEAP32[(($13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 4: 
      var $14=$facet_addr;
      var $offset8=(($14+16)|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=$point_addr;
      var $arrayidx9=(($16)|0);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=$normal;
      var $arrayidx10=(($18)|0);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul11=($17)*($19);
      var $add12=($15)+($mul11);
      var $20=$point_addr;
      var $arrayidx13=(($20+8)|0);
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $22=$normal;
      var $arrayidx14=(($22+8)|0);
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul15=($21)*($23);
      var $add16=($add12)+($mul15);
      var $24=$point_addr;
      var $arrayidx17=(($24+16)|0);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $26=$normal;
      var $arrayidx18=(($26+16)|0);
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul19=($25)*($27);
      var $add20=($add16)+($mul19);
      var $28=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add20,HEAP32[(($28)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($28)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 5: 
      var $29=$facet_addr;
      var $offset22=(($29+16)|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=$point_addr;
      var $arrayidx23=(($31)|0);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx23)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx23)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$normal;
      var $arrayidx24=(($33)|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul25=($32)*($34);
      var $add26=($30)+($mul25);
      var $35=$point_addr;
      var $arrayidx27=(($35+8)|0);
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx27)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx27)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=$normal;
      var $arrayidx28=(($37+8)|0);
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx28)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx28)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul29=($36)*($38);
      var $add30=($add26)+($mul29);
      var $39=$point_addr;
      var $arrayidx31=(($39+16)|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx31)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx31)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $41=$normal;
      var $arrayidx32=(($41+16)|0);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx32)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx32)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul33=($40)*($42);
      var $add34=($add30)+($mul33);
      var $43=$point_addr;
      var $arrayidx35=(($43+24)|0);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $45=$normal;
      var $arrayidx36=(($45+24)|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx36)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx36)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul37=($44)*($46);
      var $add38=($add34)+($mul37);
      var $47=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add38,HEAP32[(($47)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($47)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 6: 
      var $48=$facet_addr;
      var $offset40=(($48+16)|0);
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $50=$point_addr;
      var $arrayidx41=(($50)|0);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $52=$normal;
      var $arrayidx42=(($52)|0);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul43=($51)*($53);
      var $add44=($49)+($mul43);
      var $54=$point_addr;
      var $arrayidx45=(($54+8)|0);
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx45)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx45)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=$normal;
      var $arrayidx46=(($56+8)|0);
      var $57=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx46)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx46)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul47=($55)*($57);
      var $add48=($add44)+($mul47);
      var $58=$point_addr;
      var $arrayidx49=(($58+16)|0);
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $60=$normal;
      var $arrayidx50=(($60+16)|0);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul51=($59)*($61);
      var $add52=($add48)+($mul51);
      var $62=$point_addr;
      var $arrayidx53=(($62+24)|0);
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $64=$normal;
      var $arrayidx54=(($64+24)|0);
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx54)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx54)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul55=($63)*($65);
      var $add56=($add52)+($mul55);
      var $66=$point_addr;
      var $arrayidx57=(($66+32)|0);
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx57)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx57)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $68=$normal;
      var $arrayidx58=(($68+32)|0);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx58)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx58)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul59=($67)*($69);
      var $add60=($add56)+($mul59);
      var $70=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add60,HEAP32[(($70)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($70)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 7: 
      var $71=$facet_addr;
      var $offset62=(($71+16)|0);
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset62)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset62)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $73=$point_addr;
      var $arrayidx63=(($73)|0);
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx63)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx63)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $75=$normal;
      var $arrayidx64=(($75)|0);
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx64)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx64)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul65=($74)*($76);
      var $add66=($72)+($mul65);
      var $77=$point_addr;
      var $arrayidx67=(($77+8)|0);
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx67)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx67)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $79=$normal;
      var $arrayidx68=(($79+8)|0);
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx68)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx68)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul69=($78)*($80);
      var $add70=($add66)+($mul69);
      var $81=$point_addr;
      var $arrayidx71=(($81+16)|0);
      var $82=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx71)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx71)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $83=$normal;
      var $arrayidx72=(($83+16)|0);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx72)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx72)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul73=($82)*($84);
      var $add74=($add70)+($mul73);
      var $85=$point_addr;
      var $arrayidx75=(($85+24)|0);
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx75)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx75)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $87=$normal;
      var $arrayidx76=(($87+24)|0);
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx76)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx76)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul77=($86)*($88);
      var $add78=($add74)+($mul77);
      var $89=$point_addr;
      var $arrayidx79=(($89+32)|0);
      var $90=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx79)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx79)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $91=$normal;
      var $arrayidx80=(($91+32)|0);
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx80)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx80)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul81=($90)*($92);
      var $add82=($add78)+($mul81);
      var $93=$point_addr;
      var $arrayidx83=(($93+40)|0);
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx83)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx83)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $95=$normal;
      var $arrayidx84=(($95+40)|0);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul85=($94)*($96);
      var $add86=($add82)+($mul85);
      var $97=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add86,HEAP32[(($97)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($97)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 8: 
      var $98=$facet_addr;
      var $offset88=(($98+16)|0);
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset88)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset88)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $100=$point_addr;
      var $arrayidx89=(($100)|0);
      var $101=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx89)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx89)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $102=$normal;
      var $arrayidx90=(($102)|0);
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx90)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx90)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul91=($101)*($103);
      var $add92=($99)+($mul91);
      var $104=$point_addr;
      var $arrayidx93=(($104+8)|0);
      var $105=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx93)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx93)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $106=$normal;
      var $arrayidx94=(($106+8)|0);
      var $107=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx94)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx94)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul95=($105)*($107);
      var $add96=($add92)+($mul95);
      var $108=$point_addr;
      var $arrayidx97=(($108+16)|0);
      var $109=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx97)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx97)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $110=$normal;
      var $arrayidx98=(($110+16)|0);
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx98)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx98)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul99=($109)*($111);
      var $add100=($add96)+($mul99);
      var $112=$point_addr;
      var $arrayidx101=(($112+24)|0);
      var $113=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx101)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx101)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $114=$normal;
      var $arrayidx102=(($114+24)|0);
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx102)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx102)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul103=($113)*($115);
      var $add104=($add100)+($mul103);
      var $116=$point_addr;
      var $arrayidx105=(($116+32)|0);
      var $117=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx105)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx105)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $118=$normal;
      var $arrayidx106=(($118+32)|0);
      var $119=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx106)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx106)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul107=($117)*($119);
      var $add108=($add104)+($mul107);
      var $120=$point_addr;
      var $arrayidx109=(($120+40)|0);
      var $121=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx109)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx109)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $122=$normal;
      var $arrayidx110=(($122+40)|0);
      var $123=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx110)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx110)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul111=($121)*($123);
      var $add112=($add108)+($mul111);
      var $124=$point_addr;
      var $arrayidx113=(($124+48)|0);
      var $125=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx113)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx113)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $126=$normal;
      var $arrayidx114=(($126+48)|0);
      var $127=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx114)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx114)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul115=($125)*($127);
      var $add116=($add112)+($mul115);
      var $128=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add116,HEAP32[(($128)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($128)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 9: 
      var $129=$facet_addr;
      var $offset118=(($129+16)|0);
      var $130=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset118)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset118)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $131=$point_addr;
      var $arrayidx119=(($131)|0);
      var $132=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx119)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx119)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $133=$normal;
      var $arrayidx120=(($133)|0);
      var $134=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx120)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx120)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul121=($132)*($134);
      var $add122=($130)+($mul121);
      var $135=$point_addr;
      var $arrayidx123=(($135+8)|0);
      var $136=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx123)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx123)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $137=$normal;
      var $arrayidx124=(($137+8)|0);
      var $138=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx124)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx124)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul125=($136)*($138);
      var $add126=($add122)+($mul125);
      var $139=$point_addr;
      var $arrayidx127=(($139+16)|0);
      var $140=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx127)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx127)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $141=$normal;
      var $arrayidx128=(($141+16)|0);
      var $142=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx128)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx128)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul129=($140)*($142);
      var $add130=($add126)+($mul129);
      var $143=$point_addr;
      var $arrayidx131=(($143+24)|0);
      var $144=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx131)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx131)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $145=$normal;
      var $arrayidx132=(($145+24)|0);
      var $146=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx132)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx132)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul133=($144)*($146);
      var $add134=($add130)+($mul133);
      var $147=$point_addr;
      var $arrayidx135=(($147+32)|0);
      var $148=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx135)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx135)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $149=$normal;
      var $arrayidx136=(($149+32)|0);
      var $150=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx136)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx136)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul137=($148)*($150);
      var $add138=($add134)+($mul137);
      var $151=$point_addr;
      var $arrayidx139=(($151+40)|0);
      var $152=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx139)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx139)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $153=$normal;
      var $arrayidx140=(($153+40)|0);
      var $154=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx140)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx140)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul141=($152)*($154);
      var $add142=($add138)+($mul141);
      var $155=$point_addr;
      var $arrayidx143=(($155+48)|0);
      var $156=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx143)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx143)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $157=$normal;
      var $arrayidx144=(($157+48)|0);
      var $158=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx144)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx144)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul145=($156)*($158);
      var $add146=($add142)+($mul145);
      var $159=$point_addr;
      var $arrayidx147=(($159+56)|0);
      var $160=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx147)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx147)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $161=$normal;
      var $arrayidx148=(($161+56)|0);
      var $162=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx148)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx148)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul149=($160)*($162);
      var $add150=($add146)+($mul149);
      var $163=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add150,HEAP32[(($163)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($163)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 10: 
      var $164=$facet_addr;
      var $offset151=(($164+16)|0);
      var $165=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset151)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset151)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $166=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$165,HEAP32[(($166)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($166)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $167=$point_addr;
      $coordp=$167;
      var $168=HEAP32[((((5247508)|0))>>2)];
      $k=$168;
      label = 11; break;
    case 11: 
      var $169=$k;
      var $dec=((($169)-(1))|0);
      $k=$dec;
      var $tobool=(($169)|0)!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $170=$coordp;
      var $incdec_ptr=(($170+8)|0);
      $coordp=$incdec_ptr;
      var $171=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($170)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($170)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $172=$normal;
      var $incdec_ptr152=(($172+8)|0);
      $normal=$incdec_ptr152;
      var $173=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($172)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($172)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul153=($171)*($173);
      var $174=$dist_addr;
      var $175=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($174)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($174)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add154=($175)+($mul153);
      (HEAPF64[(tempDoublePtr)>>3]=$add154,HEAP32[(($174)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($174)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $176=HEAP32[(((((5243436)|0)))>>2)];
      var $inc=((($176)+(1))|0);
      HEAP32[(((((5243436)|0)))>>2)]=$inc;
      var $177=HEAP32[((((5247340)|0))>>2)];
      var $tobool155=(($177)|0)!=0;
      if ($tobool155) { label = 17; break; } else { label = 15; break; }
    case 15: 
      var $178=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($178)|0) < 4;
      if ($cmp) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 22; break;
    case 17: 
      var $179=HEAP32[((((5247340)|0))>>2)];
      var $tobool156=(($179)|0)!=0;
      if ($tobool156) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $call=_qh_rand();
      var $conv=(($call)|0);
      $randr=$conv;
      var $180=$randr;
      var $mul158=($180)*(2);
      var $div=($mul158)/(2147483646);
      var $sub=($div)-(1);
      var $181=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul159=($sub)*($181);
      var $182=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul160=($mul159)*($182);
      var $183=$dist_addr;
      var $184=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($183)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($183)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add161=($184)+($mul160);
      (HEAPF64[(tempDoublePtr)>>3]=$add161,HEAP32[(($183)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($183)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 19; break;
    case 19: 
      var $185=HEAP32[((((5247040)|0))>>2)];
      var $cmp163=(($185)|0) >= 4;
      if ($cmp163) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $186=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($186, 8001, ((5304504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $187=HEAP32[((((5248924)|0))>>2)];
      var $188=$dist_addr;
      var $189=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($188)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($188)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($187, 8002, ((5304496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$189,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $190=HEAP32[((((5248924)|0))>>2)];
      var $191=$point_addr;
      var $call166=_qh_pointid($191);
      var $192=$facet_addr;
      var $id=(($192+72)|0);
      var $193=HEAP32[(($id)>>2)];
      _qh_fprintf($190, 8003, ((5284928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call166,HEAP32[(((tempInt)+(4))>>2)]=$193,tempInt));
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_distplane["X"]=1;

function _qh_findbest($point, $startfacet, $bestoutside, $isnewfacets, $noupper, $dist, $isoutside, $numpart) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $startfacet_addr;
      var $bestoutside_addr;
      var $isnewfacets_addr;
      var $noupper_addr;
      var $dist_addr;
      var $isoutside_addr;
      var $numpart_addr;
      var $bestdist=__stackBase__;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $bestfacet;
      var $lastfacet;
      var $oldtrace;
      var $visitid;
      var $numpartnew=(__stackBase__)+(8);
      var $testhorizon;
      $point_addr=$point;
      $startfacet_addr=$startfacet;
      $bestoutside_addr=$bestoutside;
      $isnewfacets_addr=$isnewfacets;
      $noupper_addr=$noupper;
      $dist_addr=$dist;
      $isoutside_addr=$isoutside;
      $numpart_addr=$numpart;
      (HEAPF64[(tempDoublePtr)>>3]=-8.988465674311579e+307,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $bestfacet=0;
      $lastfacet=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      $oldtrace=$0;
      var $1=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $visitid=$inc;
      HEAP32[(($numpartnew)>>2)]=0;
      $testhorizon=1;
      var $2=HEAP32[(((((5243660)|0)))>>2)];
      var $inc1=((($2)+(1))|0);
      HEAP32[(((((5243660)|0)))>>2)]=$inc1;
      var $3=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($3)|0) >= 3;
      if ($cmp) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=HEAP32[((((5247428)|0))>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $5=HEAP32[((((5247436)|0))>>2)];
      var $cmp2=(($5)|0) >= 0;
      if ($cmp2) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $6=HEAP32[((((5247436)|0))>>2)];
      var $7=$point_addr;
      var $call=_qh_pointid($7);
      var $cmp4=(($6)|0)==(($call)|0);
      if ($cmp4) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $8=HEAP32[((((5247428)|0))>>2)];
      var $9=HEAP32[((((5247040)|0))>>2)];
      var $cmp5=(($8)|0) > (($9)|0);
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$10;
      label = 8; break;
    case 8: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      var $12=$point_addr;
      var $call7=_qh_pointid($12);
      var $13=$startfacet_addr;
      var $id=(($13+72)|0);
      var $14=HEAP32[(($id)>>2)];
      var $15=$isnewfacets_addr;
      var $16=$bestoutside_addr;
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($11, 8004, ((5275108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call7,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$15,HEAP32[(((tempInt)+(12))>>2)]=$16,(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $18=HEAP32[((((5248924)|0))>>2)];
      var $19=$testhorizon;
      var $20=$noupper_addr;
      _qh_fprintf($18, 8005, ((5269096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$20,tempInt));
      var $21=HEAP32[((((5248924)|0))>>2)];
      var $22=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($21, 8006, ((5265428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
      var $23=HEAP32[((((5248924)|0))>>2)];
      var $24=HEAP32[(((((5244580)|0)))>>2)];
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($23, 8007, ((5260968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,(HEAPF64[(tempDoublePtr)>>3]=$25,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 9; break;
    case 9: 
      var $26=$isoutside_addr;
      var $tobool9=(($26)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$isoutside_addr;
      HEAP32[(($27)>>2)]=1;
      label = 11; break;
    case 11: 
      var $28=$startfacet_addr;
      var $29=$28;
      var $bf_field_offs=(($29+76)|0);
      var $30=$bf_field_offs;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 >>> 16;
      var $bf_clear=$32 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 20; break; } else { label = 12; break; }
    case 12: 
      var $33=$numpart_addr;
      HEAP32[(($33)>>2)]=1;
      var $34=$point_addr;
      var $35=$startfacet_addr;
      var $36=$dist_addr;
      _qh_distplane($34, $35, $36);
      var $37=$bestoutside_addr;
      var $tobool14=(($37)|0)!=0;
      if ($tobool14) { label = 17; break; } else { label = 13; break; }
    case 13: 
      var $38=$dist_addr;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp16=$39 >= $40;
      if ($cmp16) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $41=$startfacet_addr;
      var $42=$41;
      var $bf_field_offs18=(($42+76)|0);
      var $43=$bf_field_offs18;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 17;
      var $bf_clear19=$45 & 1;
      var $tobool20=(($bf_clear19)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $46=$noupper_addr;
      var $tobool22=(($46)|0)!=0;
      if ($tobool22) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $47=$startfacet_addr;
      $bestfacet=$47;
      label = 72; break;
    case 17: 
      var $48=$dist_addr;
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $50=$startfacet_addr;
      var $51=$50;
      var $bf_field_offs25=(($51+76)|0);
      var $52=$bf_field_offs25;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 >>> 17;
      var $bf_clear26=$54 & 1;
      var $tobool27=(($bf_clear26)|0)!=0;
      if ($tobool27) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $55=$startfacet_addr;
      $bestfacet=$55;
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $56=$numpart_addr;
      HEAP32[(($56)>>2)]=0;
      label = 21; break;
    case 21: 
      var $57=$visitid;
      var $58=$startfacet_addr;
      var $visitid31=(($58+68)|0);
      HEAP32[(($visitid31)>>2)]=$57;
      var $59=$startfacet_addr;
      $facet=$59;
      label = 22; break;
    case 22: 
      var $60=$facet;
      var $tobool32=(($60)|0)!=0;
      if ($tobool32) { label = 23; break; } else { label = 53; break; }
    case 23: 
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp33=(($61)|0) >= 4;
      if ($cmp33) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$facet;
      var $id35=(($63+72)|0);
      var $64=HEAP32[(($id35)>>2)];
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $66=$bestfacet;
      var $tobool36=(($66)|0)!=0;
      if ($tobool36) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $67=$bestfacet;
      var $id37=(($67+72)|0);
      var $68=HEAP32[(($id37)>>2)];
      var $cond = $68;label = 27; break;
    case 26: 
      var $cond = -1;label = 27; break;
    case 27: 
      var $cond;
      _qh_fprintf($62, 4001, ((5257896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,(HEAPF64[(tempDoublePtr)>>3]=$65,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$cond,tempInt));
      label = 28; break;
    case 28: 
      var $69=$facet;
      $lastfacet=$69;
      $neighbor=0;
      var $70=$facet;
      var $neighbors=(($70+56)|0);
      var $71=HEAP32[(($neighbors)>>2)];
      var $tobool39=(($71)|0)!=0;
      if ($tobool39) { label = 29; break; } else { label = 52; break; }
    case 29: 
      var $72=$facet;
      var $neighbors41=(($72+56)|0);
      var $73=HEAP32[(($neighbors41)>>2)];
      var $e=(($73+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $74=$p;
      $neighborp=$74;
      label = 30; break;
    case 30: 
      var $75=$neighborp;
      var $incdec_ptr=(($75+4)|0);
      $neighborp=$incdec_ptr;
      var $76=HEAP32[(($75)>>2)];
      $neighbor=$76;
      var $tobool42=(($76)|0)!=0;
      if ($tobool42) { label = 31; break; } else { label = 51; break; }
    case 31: 
      var $77=$neighbor;
      var $78=$77;
      var $bf_field_offs43=(($78+76)|0);
      var $79=$bf_field_offs43;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 >>> 10;
      var $bf_clear44=$81 & 1;
      var $tobool45=(($bf_clear44)|0)!=0;
      if ($tobool45) { label = 34; break; } else { label = 32; break; }
    case 32: 
      var $82=$isnewfacets_addr;
      var $tobool47=(($82)|0)!=0;
      if ($tobool47) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 30; break;
    case 34: 
      var $83=$neighbor;
      var $visitid50=(($83+68)|0);
      var $84=HEAP32[(($visitid50)>>2)];
      var $85=$visitid;
      var $cmp51=(($84)|0)==(($85)|0);
      if ($cmp51) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 30; break;
    case 36: 
      var $86=$visitid;
      var $87=$neighbor;
      var $visitid54=(($87+68)|0);
      HEAP32[(($visitid54)>>2)]=$86;
      var $88=$neighbor;
      var $89=$88;
      var $bf_field_offs55=(($89+76)|0);
      var $90=$bf_field_offs55;
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 >>> 16;
      var $bf_clear56=$92 & 1;
      var $tobool57=(($bf_clear56)|0)!=0;
      if ($tobool57) { label = 50; break; } else { label = 37; break; }
    case 37: 
      var $93=$numpart_addr;
      var $94=HEAP32[(($93)>>2)];
      var $inc59=((($94)+(1))|0);
      HEAP32[(($93)>>2)]=$inc59;
      var $95=$point_addr;
      var $96=$neighbor;
      var $97=$dist_addr;
      _qh_distplane($95, $96, $97);
      var $98=$dist_addr;
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($98)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($98)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $100=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp60=$99 > $100;
      if ($cmp60) { label = 38; break; } else { label = 49; break; }
    case 38: 
      var $101=$bestoutside_addr;
      var $tobool62=(($101)|0)!=0;
      if ($tobool62) { label = 43; break; } else { label = 39; break; }
    case 39: 
      var $102=$dist_addr;
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($102)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($102)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp64=$103 >= $104;
      if ($cmp64) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $105=$neighbor;
      var $106=$105;
      var $bf_field_offs66=(($106+76)|0);
      var $107=$bf_field_offs66;
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 >>> 17;
      var $bf_clear67=$109 & 1;
      var $tobool68=(($bf_clear67)|0)!=0;
      if ($tobool68) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $110=$noupper_addr;
      var $tobool70=(($110)|0)!=0;
      if ($tobool70) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $111=$neighbor;
      $bestfacet=$111;
      label = 72; break;
    case 43: 
      var $112=$neighbor;
      var $113=$112;
      var $bf_field_offs73=(($113+76)|0);
      var $114=$bf_field_offs73;
      var $115=HEAP32[(($114)>>2)];
      var $116=$115 >>> 17;
      var $bf_clear74=$116 & 1;
      var $tobool75=(($bf_clear74)|0)!=0;
      if ($tobool75) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $117=$neighbor;
      $bestfacet=$117;
      var $118=$dist_addr;
      var $119=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($118)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($118)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$119,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 51; break;
    case 45: 
      var $120=$bestfacet;
      var $tobool78=(($120)|0)!=0;
      if ($tobool78) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $121=$dist_addr;
      var $122=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($121)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($121)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$122,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 51; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 30; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $123=$neighbor;
      $facet=$123;
      label = 22; break;
    case 53: 
      var $124=$isnewfacets_addr;
      var $tobool85=(($124)|0)!=0;
      if ($tobool85) { label = 54; break; } else { label = 64; break; }
    case 54: 
      var $125=$bestfacet;
      var $tobool87=(($125)|0)!=0;
      if ($tobool87) { label = 56; break; } else { label = 55; break; }
    case 55: 
      (HEAPF64[(tempDoublePtr)>>3]=-8.988465674311579e+307,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $126=$point_addr;
      var $127=$startfacet_addr;
      var $next=(($127+44)|0);
      var $128=HEAP32[(($next)>>2)];
      var $129=$bestoutside_addr;
      var $130=$isoutside_addr;
      var $call89=_qh_findbestnew($126, $128, $bestdist, $129, $130, $numpartnew);
      $bestfacet=$call89;
      $testhorizon=0;
      label = 63; break;
    case 56: 
      var $131=HEAP32[((((5249100)|0))>>2)];
      var $tobool91=(($131)|0)!=0;
      if ($tobool91) { label = 62; break; } else { label = 57; break; }
    case 57: 
      var $132=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $133=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$133);
      var $cmp93=$132 < $sub;
      if ($cmp93) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $call95=_qh_sharpnewfacets();
      var $tobool96=(($call95)|0)!=0;
      if ($tobool96) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $134=HEAP32[(((((5243764)|0)))>>2)];
      var $inc98=((($134)+(1))|0);
      HEAP32[(((((5243764)|0)))>>2)]=$inc98;
      var $135=$point_addr;
      var $136=$bestfacet;
      var $137=$bestoutside_addr;
      var $138=$isoutside_addr;
      var $call99=_qh_findbestnew($135, $136, $bestdist, $137, $138, $numpartnew);
      $bestfacet=$call99;
      $testhorizon=0;
      HEAP32[((((5249096)|0))>>2)]=1;
      label = 61; break;
    case 60: 
      HEAP32[((((5249100)|0))>>2)]=1;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $139=$bestfacet;
      var $tobool105=(($139)|0)!=0;
      if ($tobool105) { label = 66; break; } else { label = 65; break; }
    case 65: 
      var $140=$lastfacet;
      var $141=$point_addr;
      var $142=$numpart_addr;
      var $call107=_qh_findbestlower($140, $141, $bestdist, $142);
      $bestfacet=$call107;
      label = 66; break;
    case 66: 
      var $143=$testhorizon;
      var $tobool109=(($143)|0)!=0;
      if ($tobool109) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $144=$point_addr;
      var $145=$bestfacet;
      var $146=$noupper_addr;
      var $call111=_qh_findbesthorizon(0, $144, $145, $146, $bestdist, $numpartnew);
      $bestfacet=$call111;
      label = 68; break;
    case 68: 
      var $147=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $148=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$147,HEAP32[(($148)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($148)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $149=$isoutside_addr;
      var $tobool113=(($149)|0)!=0;
      if ($tobool113) { label = 69; break; } else { label = 71; break; }
    case 69: 
      var $150=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $151=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp115=$150 < $151;
      if ($cmp115) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $152=$isoutside_addr;
      HEAP32[(($152)>>2)]=0;
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $153=$numpart_addr;
      var $154=HEAP32[(($153)>>2)];
      var $155=HEAP32[(((((5243676)|0)))>>2)];
      var $add=((($155)+($154))|0);
      HEAP32[(((((5243676)|0)))>>2)]=$add;
      var $156=HEAP32[(((((5243668)|0)))>>2)];
      var $157=$numpart_addr;
      var $158=HEAP32[(($157)>>2)];
      var $cmp118=(($156)|0) < (($158)|0);
      if ($cmp118) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $159=$numpart_addr;
      var $160=HEAP32[(($159)>>2)];
      HEAP32[(((((5243668)|0)))>>2)]=$160;
      label = 74; break;
    case 74: 
      var $161=HEAP32[(($numpartnew)>>2)];
      var $162=$numpart_addr;
      var $163=HEAP32[(($162)>>2)];
      var $add121=((($163)+($161))|0);
      HEAP32[(($162)>>2)]=$add121;
      var $164=$oldtrace;
      HEAP32[((((5247040)|0))>>2)]=$164;
      var $165=$bestfacet;
      STACKTOP = __stackBase__;
      return $165;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbest["X"]=1;

function _qh_findbestnew($point, $startfacet, $dist, $bestoutside, $isoutside, $numpart) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $startfacet_addr;
      var $dist_addr;
      var $bestoutside_addr;
      var $isoutside_addr;
      var $numpart_addr;
      var $bestdist=__stackBase__;
      var $bestfacet;
      var $facet;
      var $oldtrace;
      var $i;
      var $visitid;
      var $distoutside;
      var $isdistoutside;
      var $testhorizon;
      $point_addr=$point;
      $startfacet_addr=$startfacet;
      $dist_addr=$dist;
      $bestoutside_addr=$bestoutside;
      $isoutside_addr=$isoutside;
      $numpart_addr=$numpart;
      (HEAPF64[(tempDoublePtr)>>3]=-8.988465674311579e+307,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $bestfacet=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      $oldtrace=$0;
      var $1=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $visitid=$inc;
      $distoutside=0;
      $testhorizon=1;
      var $2=$startfacet_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $3=HEAP32[((((5247084)|0))>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($4, 6001, ((5304380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 5: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      var $6=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($5, 6002, ((5301700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
      label = 6; break;
    case 6: 
      _qh_errexit(5, 0, 0);
      label = 7; break;
    case 7: 
      var $7=HEAP32[(((((5243732)|0)))>>2)];
      var $inc4=((($7)+(1))|0);
      HEAP32[(((((5243732)|0)))>>2)]=$inc4;
      var $8=HEAP32[((((5246968)|0))>>2)];
      var $tobool5=(($8)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $9=$bestoutside_addr;
      var $tobool6=(($9)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $isdistoutside=0;
      label = 14; break;
    case 10: 
      $isdistoutside=1;
      var $10=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp=(($10)|0) > 50;
      var $cond=$cmp ? 2 : 1;
      var $conv=(($cond)|0);
      var $11=HEAP32[((((5247084)|0))>>2)];
      var $tobool9=(($11)|0)!=0;
      var $cond10=$tobool9 ? 2 : 1;
      var $conv11=(($cond10)|0);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($conv11)*($12);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp12=$mul < $13;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond18 = $14;label = 13; break;
    case 12: 
      var $15=HEAP32[((((5247084)|0))>>2)];
      var $tobool14=(($15)|0)!=0;
      var $cond15=$tobool14 ? 2 : 1;
      var $conv16=(($cond15)|0);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul17=($conv16)*($16);
      var $cond18 = $mul17;label = 13; break;
    case 13: 
      var $cond18;
      var $mul19=($conv)*($cond18);
      $distoutside=$mul19;
      label = 14; break;
    case 14: 
      var $17=$isoutside_addr;
      var $tobool21=(($17)|0)!=0;
      if ($tobool21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $18=$isoutside_addr;
      HEAP32[(($18)>>2)]=1;
      label = 16; break;
    case 16: 
      var $19=$numpart_addr;
      HEAP32[(($19)>>2)]=0;
      var $20=HEAP32[((((5247040)|0))>>2)];
      var $cmp24=(($20)|0) >= 3;
      if ($cmp24) { label = 20; break; } else { label = 17; break; }
    case 17: 
      var $21=HEAP32[((((5247428)|0))>>2)];
      var $tobool27=(($21)|0)!=0;
      if ($tobool27) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $22=HEAP32[((((5247436)|0))>>2)];
      var $cmp28=(($22)|0) >= 0;
      if ($cmp28) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $23=HEAP32[((((5247436)|0))>>2)];
      var $24=$point_addr;
      var $call=_qh_pointid($24);
      var $cmp31=(($23)|0)==(($call)|0);
      if ($cmp31) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $25=HEAP32[((((5247428)|0))>>2)];
      var $26=HEAP32[((((5247040)|0))>>2)];
      var $cmp34=(($25)|0) > (($26)|0);
      if ($cmp34) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $27=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$27;
      label = 22; break;
    case 22: 
      var $28=HEAP32[((((5248924)|0))>>2)];
      var $29=$point_addr;
      var $call38=_qh_pointid($29);
      var $30=$startfacet_addr;
      var $id=(($30+72)|0);
      var $31=HEAP32[(($id)>>2)];
      var $32=$isdistoutside;
      var $33=$distoutside;
      _qh_fprintf($28, 8008, ((5299060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call38,HEAP32[(((tempInt)+(4))>>2)]=$31,HEAP32[(((tempInt)+(8))>>2)]=$32,(HEAPF64[(tempDoublePtr)>>3]=$33,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=HEAP32[((((5249040)|0))>>2)];
      var $36=$visitid;
      _qh_fprintf($34, 8009, ((5296984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,HEAP32[(((tempInt)+(4))>>2)]=$36,tempInt));
      var $37=HEAP32[((((5248924)|0))>>2)];
      var $38=HEAP32[(((((5244580)|0)))>>2)];
      _qh_fprintf($37, 8010, ((5295344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$38,tempInt));
      label = 23; break;
    case 23: 
      $i=0;
      var $39=$startfacet_addr;
      $facet=$39;
      label = 24; break;
    case 24: 
      var $40=$i;
      var $cmp40=(($40)|0) < 2;
      if ($cmp40) { label = 25; break; } else { label = 48; break; }
    case 25: 
      var $41=$facet;
      var $tobool42=(($41)|0)!=0;
      if ($tobool42) { label = 26; break; } else { label = 46; break; }
    case 26: 
      var $42=$facet;
      $facet=$42;
      label = 27; break;
    case 27: 
      var $43=$facet;
      var $tobool45=(($43)|0)!=0;
      if ($tobool45) { label = 28; break; } else { var $46 = 0;label = 29; break; }
    case 28: 
      var $44=$facet;
      var $next=(($44+44)|0);
      var $45=HEAP32[(($next)>>2)];
      var $tobool46=(($45)|0)!=0;
      var $46 = $tobool46;label = 29; break;
    case 29: 
      var $46;
      if ($46) { label = 30; break; } else { label = 45; break; }
    case 30: 
      var $47=$facet;
      var $48=$startfacet_addr;
      var $cmp48=(($47)|0)==(($48)|0);
      if ($cmp48) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $49=$i;
      var $tobool51=(($49)|0)!=0;
      if ($tobool51) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 45; break;
    case 33: 
      var $50=$visitid;
      var $51=$facet;
      var $visitid54=(($51+68)|0);
      HEAP32[(($visitid54)>>2)]=$50;
      var $52=$facet;
      var $53=$52;
      var $bf_field_offs=(($53+76)|0);
      var $54=$bf_field_offs;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 >>> 16;
      var $bf_clear=$56 & 1;
      var $tobool55=(($bf_clear)|0)!=0;
      if ($tobool55) { label = 43; break; } else { label = 34; break; }
    case 34: 
      var $57=$point_addr;
      var $58=$facet;
      var $59=$dist_addr;
      _qh_distplane($57, $58, $59);
      var $60=$numpart_addr;
      var $61=HEAP32[(($60)>>2)];
      var $inc57=((($61)+(1))|0);
      HEAP32[(($60)>>2)]=$inc57;
      var $62=$dist_addr;
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($62)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($62)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp58=$63 > $64;
      if ($cmp58) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $65=$facet;
      var $66=$65;
      var $bf_field_offs61=(($66+76)|0);
      var $67=$bf_field_offs61;
      var $68=HEAP32[(($67)>>2)];
      var $69=$68 >>> 17;
      var $bf_clear62=$69 & 1;
      var $tobool63=(($bf_clear62)|0)!=0;
      if ($tobool63) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $70=$dist_addr;
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($70)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($70)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp65=$71 >= $72;
      if ($cmp65) { label = 37; break; } else { label = 41; break; }
    case 37: 
      var $73=$facet;
      $bestfacet=$73;
      var $74=$isdistoutside;
      var $tobool68=(($74)|0)!=0;
      if ($tobool68) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $75=$dist_addr;
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($75)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($75)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $77=$distoutside;
      var $cmp70=$76 >= $77;
      if ($cmp70) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 58; break;
    case 40: 
      var $78=$dist_addr;
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($78)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($78)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$79,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $80=$facet;
      var $next77=(($80+44)|0);
      var $81=HEAP32[(($next77)>>2)];
      $facet=$81;
      label = 27; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $82=$i;
      var $inc80=((($82)+(1))|0);
      $i=$inc80;
      var $83=HEAP32[((((5248956)|0))>>2)];
      $facet=$83;
      label = 24; break;
    case 48: 
      var $84=$testhorizon;
      var $tobool82=(($84)|0)!=0;
      if ($tobool82) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $85=$bestfacet;
      var $tobool84=(($85)|0)!=0;
      if ($tobool84) { label = 54; break; } else { label = 50; break; }
    case 50: 
      var $86=$point_addr;
      var $87=$bestfacet;
      var $tobool86=(($87)|0)!=0;
      if ($tobool86) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $88=$bestfacet;
      var $cond90 = $88;label = 53; break;
    case 52: 
      var $89=$startfacet_addr;
      var $cond90 = $89;label = 53; break;
    case 53: 
      var $cond90;
      var $90=$numpart_addr;
      var $call91=_qh_findbesthorizon(0, $86, $cond90, 0, $bestdist, $90);
      $bestfacet=$call91;
      label = 54; break;
    case 54: 
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $92=$dist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$91,HEAP32[(($92)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($92)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $93=$isoutside_addr;
      var $tobool93=(($93)|0)!=0;
      if ($tobool93) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $94=$dist_addr;
      var $95=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($94)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($94)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp95=$95 < $96;
      if ($cmp95) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $97=$isoutside_addr;
      HEAP32[(($97)>>2)]=0;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $98=$numpart_addr;
      var $99=HEAP32[(($98)>>2)];
      var $100=HEAP32[(((((5243748)|0)))>>2)];
      var $add=((($100)+($99))|0);
      HEAP32[(((((5243748)|0)))>>2)]=$add;
      var $101=HEAP32[(((((5243740)|0)))>>2)];
      var $102=$numpart_addr;
      var $103=HEAP32[(($102)>>2)];
      var $cmp99=(($101)|0) < (($103)|0);
      if ($cmp99) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $104=$numpart_addr;
      var $105=HEAP32[(($104)>>2)];
      HEAP32[(((((5243740)|0)))>>2)]=$105;
      label = 60; break;
    case 60: 
      var $106=HEAP32[((((5247040)|0))>>2)];
      var $cmp103=(($106)|0) >= 4;
      if ($cmp103) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $107=HEAP32[((((5248924)|0))>>2)];
      var $108=$bestfacet;
      var $tobool106=(($108)|0)!=0;
      if ($tobool106) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $109=$bestfacet;
      var $id108=(($109+72)|0);
      var $110=HEAP32[(($id108)>>2)];
      var $cond111 = $110;label = 64; break;
    case 63: 
      var $cond111 = -1;label = 64; break;
    case 64: 
      var $cond111;
      var $111=$dist_addr;
      var $112=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($111)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($111)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($107, 4004, ((5293392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond111,(HEAPF64[(tempDoublePtr)>>3]=$112,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 65; break;
    case 65: 
      var $113=$oldtrace;
      HEAP32[((((5247040)|0))>>2)]=$113;
      var $114=$bestfacet;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbestnew["X"]=1;

function _qh_findbesthorizon($ischeckmax, $point, $startfacet, $noupper, $bestdist, $numpart) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ischeckmax_addr;
      var $point_addr;
      var $startfacet_addr;
      var $noupper_addr;
      var $bestdist_addr;
      var $numpart_addr;
      var $bestfacet;
      var $dist=__stackBase__;
      var $neighbor;
      var $neighborp;
      var $facet;
      var $nextfacet;
      var $numpartinit;
      var $coplanarfacetset_size;
      var $visitid;
      var $newbest;
      var $minsearch;
      var $searchdist;
      $ischeckmax_addr=$ischeckmax;
      $point_addr=$point;
      $startfacet_addr=$startfacet;
      $noupper_addr=$noupper;
      $bestdist_addr=$bestdist;
      $numpart_addr=$numpart;
      var $0=$startfacet_addr;
      $bestfacet=$0;
      $nextfacet=0;
      var $1=$numpart_addr;
      var $2=HEAP32[(($1)>>2)];
      $numpartinit=$2;
      var $3=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $visitid=$inc;
      $newbest=0;
      var $4=$ischeckmax_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=HEAP32[(((((5243700)|0)))>>2)];
      var $inc1=((($5)+(1))|0);
      HEAP32[(((((5243700)|0)))>>2)]=$inc1;
      label = 9; break;
    case 4: 
      var $6=HEAP32[((((5247128)|0))>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$startfacet_addr;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 19;
      var $bf_clear=$11 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$bestdist_addr;
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=$startfacet_addr;
      var $maxoutside=(($14+8)|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$13 > $15;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$bestdist_addr;
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=$startfacet_addr;
      var $maxoutside5=(($18+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(($maxoutside5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $19=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp7=(($19)|0) > 50;
      var $cond=$cmp7 ? 2 : 1;
      var $conv=(($cond)|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($21)*(2);
      var $add=($20)+($mul);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp8=$22 < $23;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond10 = $24;label = 12; break;
    case 11: 
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond10 = $25;label = 12; break;
    case 12: 
      var $cond10;
      var $add11=($add)+($cond10);
      var $mul12=($conv)*($add11);
      $searchdist=$mul12;
      var $26=$bestdist_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($26)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($26)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $28=$searchdist;
      var $sub=($27)-($28);
      $minsearch=$sub;
      var $29=$ischeckmax_addr;
      var $tobool13=(($29)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $30=$minsearch;
      var $31=$searchdist;
      var $sub15=(-$31);
      var $cmp16=$30 > $sub15;
      if ($cmp16) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $32=$searchdist;
      var $sub19=(-$32);
      $minsearch=$sub19;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $coplanarfacetset_size=0;
      var $33=$startfacet_addr;
      $facet=$33;
      label = 17; break;
    case 17: 
      var $34=HEAP32[((((5247040)|0))>>2)];
      var $cmp22=(($34)|0) >= 4;
      if ($cmp22) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      var $36=$facet;
      var $id=(($36+72)|0);
      var $37=HEAP32[(($id)>>2)];
      var $38=$bestdist_addr;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=$bestfacet;
      var $tobool25=(($40)|0)!=0;
      if ($tobool25) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $41=$bestfacet;
      var $id27=(($41+72)|0);
      var $42=HEAP32[(($id27)>>2)];
      var $cond30 = $42;label = 21; break;
    case 20: 
      var $cond30 = -1;label = 21; break;
    case 21: 
      var $cond30;
      var $43=$ischeckmax_addr;
      var $44=$noupper_addr;
      var $45=$minsearch;
      var $46=$searchdist;
      _qh_fprintf($35, 4002, ((5254772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 40)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$37,(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$cond30,HEAP32[(((tempInt)+(16))>>2)]=$43,HEAP32[(((tempInt)+(20))>>2)]=$44,(HEAPF64[(tempDoublePtr)>>3]=$45,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[(((tempInt)+(32))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(32))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 22; break;
    case 22: 
      $neighbor=0;
      var $47=$facet;
      var $neighbors=(($47+56)|0);
      var $48=HEAP32[(($neighbors)>>2)];
      var $tobool32=(($48)|0)!=0;
      if ($tobool32) { label = 23; break; } else { label = 53; break; }
    case 23: 
      var $49=$facet;
      var $neighbors34=(($49+56)|0);
      var $50=HEAP32[(($neighbors34)>>2)];
      var $e=(($50+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $51=$p;
      $neighborp=$51;
      label = 24; break;
    case 24: 
      var $52=$neighborp;
      var $incdec_ptr=(($52+4)|0);
      $neighborp=$incdec_ptr;
      var $53=HEAP32[(($52)>>2)];
      $neighbor=$53;
      var $tobool35=(($53)|0)!=0;
      if ($tobool35) { label = 25; break; } else { label = 52; break; }
    case 25: 
      var $54=$neighbor;
      var $visitid36=(($54+68)|0);
      var $55=HEAP32[(($visitid36)>>2)];
      var $56=$visitid;
      var $cmp37=(($55)|0)==(($56)|0);
      if ($cmp37) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 24; break;
    case 27: 
      var $57=$visitid;
      var $58=$neighbor;
      var $visitid41=(($58+68)|0);
      HEAP32[(($visitid41)>>2)]=$57;
      var $59=$neighbor;
      var $60=$59;
      var $bf_field_offs42=(($60+76)|0);
      var $61=$bf_field_offs42;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 >>> 16;
      var $bf_clear43=$63 & 1;
      var $tobool44=(($bf_clear43)|0)!=0;
      if ($tobool44) { label = 46; break; } else { label = 28; break; }
    case 28: 
      var $64=$point_addr;
      var $65=$neighbor;
      _qh_distplane($64, $65, $dist);
      var $66=$numpart_addr;
      var $67=HEAP32[(($66)>>2)];
      var $inc46=((($67)+(1))|0);
      HEAP32[(($66)>>2)]=$inc46;
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $69=$bestdist_addr;
      var $70=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($69)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($69)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp47=$68 > $70;
      if ($cmp47) { label = 29; break; } else { label = 39; break; }
    case 29: 
      var $71=$neighbor;
      var $72=$71;
      var $bf_field_offs50=(($72+76)|0);
      var $73=$bf_field_offs50;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 >>> 17;
      var $bf_clear51=$75 & 1;
      var $tobool52=(($bf_clear51)|0)!=0;
      if ($tobool52) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $76=$ischeckmax_addr;
      var $tobool54=(($76)|0)!=0;
      if ($tobool54) { label = 33; break; } else { label = 31; break; }
    case 31: 
      var $77=$noupper_addr;
      var $tobool56=(($77)|0)!=0;
      if ($tobool56) { label = 38; break; } else { label = 32; break; }
    case 32: 
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp58=$78 >= $79;
      if ($cmp58) { label = 33; break; } else { label = 38; break; }
    case 33: 
      var $80=$neighbor;
      $bestfacet=$80;
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $82=$bestdist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$81,HEAP32[(($82)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($82)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $newbest=1;
      var $83=$ischeckmax_addr;
      var $tobool61=(($83)|0)!=0;
      if ($tobool61) { label = 37; break; } else { label = 34; break; }
    case 34: 
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $85=$searchdist;
      var $sub63=($84)-($85);
      $minsearch=$sub63;
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $87=$bestdist_addr;
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($87)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($87)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $89=$searchdist;
      var $add64=($88)+($89);
      var $cmp65=$86 > $add64;
      if ($cmp65) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $90=HEAP32[(((((5243724)|0)))>>2)];
      var $inc68=((($90)+(1))|0);
      HEAP32[(((((5243724)|0)))>>2)]=$inc68;
      $coplanarfacetset_size=0;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 42; break;
    case 39: 
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $92=$minsearch;
      var $cmp73=$91 < $92;
      if ($cmp73) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 24; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $93=$ischeckmax_addr;
      var $tobool78=(($93)|0)!=0;
      if ($tobool78) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $95=$neighbor;
      var $maxoutside80=(($95+8)|0);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside80)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside80)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp81=$94 > $96;
      if ($cmp81) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $97=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $98=$neighbor;
      var $maxoutside84=(($98+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$97,HEAP32[(($maxoutside84)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside84)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $99=$nextfacet;
      var $tobool87=(($99)|0)!=0;
      if ($tobool87) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $100=$coplanarfacetset_size;
      var $inc89=((($100)+(1))|0);
      $coplanarfacetset_size=$inc89;
      var $tobool90=(($100)|0)!=0;
      if ($tobool90) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $101=$nextfacet;
      var $102=$101;
      var $103=HEAP32[((((5249228)|0))>>2)];
      var $e92=(($103+4)|0);
      var $arrayidx93=(($e92)|0);
      var $p94=$arrayidx93;
      HEAP32[(($p94)>>2)]=$102;
      var $104=HEAP32[((((5249228)|0))>>2)];
      var $maxsize=(($104)|0);
      var $105=HEAP32[(($maxsize)>>2)];
      var $106=HEAP32[((((5249228)|0))>>2)];
      var $e95=(($106+4)|0);
      var $arrayidx96=(($e95+($105<<2))|0);
      var $i=$arrayidx96;
      HEAP32[(($i)>>2)]=2;
      var $107=HEAP32[((((5249228)|0))>>2)];
      var $e97=(($107+4)|0);
      var $arrayidx98=(($e97+4)|0);
      var $p99=$arrayidx98;
      HEAP32[(($p99)>>2)]=0;
      label = 50; break;
    case 49: 
      var $108=$nextfacet;
      var $109=$108;
      _qh_setappend(((5249228)|0), $109);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $110=$neighbor;
      $nextfacet=$110;
      label = 24; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $111=$nextfacet;
      $facet=$111;
      var $112=$facet;
      var $tobool104=(($112)|0)!=0;
      if ($tobool104) { label = 54; break; } else { label = 55; break; }
    case 54: 
      $nextfacet=0;
      label = 62; break;
    case 55: 
      var $113=$coplanarfacetset_size;
      var $tobool107=(($113)|0)!=0;
      if ($tobool107) { label = 57; break; } else { label = 56; break; }
    case 56: 
      label = 63; break;
    case 57: 
      var $114=$coplanarfacetset_size;
      var $dec=((($114)-(1))|0);
      $coplanarfacetset_size=$dec;
      var $tobool110=(($dec)|0)!=0;
      if ($tobool110) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $115=HEAP32[((((5249228)|0))>>2)];
      var $e112=(($115+4)|0);
      var $arrayidx113=(($e112)|0);
      var $p114=$arrayidx113;
      var $116=HEAP32[(($p114)>>2)];
      var $117=$116;
      $facet=$117;
      var $118=HEAP32[((((5249228)|0))>>2)];
      var $maxsize115=(($118)|0);
      var $119=HEAP32[(($maxsize115)>>2)];
      var $120=HEAP32[((((5249228)|0))>>2)];
      var $e116=(($120+4)|0);
      var $arrayidx117=(($e116+($119<<2))|0);
      var $i118=$arrayidx117;
      HEAP32[(($i118)>>2)]=1;
      var $121=HEAP32[((((5249228)|0))>>2)];
      var $e119=(($121+4)|0);
      var $arrayidx120=(($e119)|0);
      var $p121=$arrayidx120;
      HEAP32[(($p121)>>2)]=0;
      label = 60; break;
    case 59: 
      var $122=HEAP32[((((5249228)|0))>>2)];
      var $call=_qh_setdellast($122);
      var $123=$call;
      $facet=$123;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 17; break;
    case 63: 
      var $124=$ischeckmax_addr;
      var $tobool126=(($124)|0)!=0;
      if ($tobool126) { label = 69; break; } else { label = 64; break; }
    case 64: 
      var $125=$numpart_addr;
      var $126=HEAP32[(($125)>>2)];
      var $127=$numpartinit;
      var $sub128=((($126)-($127))|0);
      var $128=HEAP32[(((((5243716)|0)))>>2)];
      var $add129=((($128)+($sub128))|0);
      HEAP32[(((((5243716)|0)))>>2)]=$add129;
      var $129=HEAP32[(((((5243708)|0)))>>2)];
      var $130=$numpart_addr;
      var $131=HEAP32[(($130)>>2)];
      var $132=$numpartinit;
      var $sub130=((($131)-($132))|0);
      var $cmp131=(($129)|0) < (($sub130)|0);
      if ($cmp131) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $133=$numpart_addr;
      var $134=HEAP32[(($133)>>2)];
      var $135=$numpartinit;
      var $sub134=((($134)-($135))|0);
      HEAP32[(((((5243708)|0)))>>2)]=$sub134;
      label = 66; break;
    case 66: 
      var $136=$newbest;
      var $tobool136=(($136)|0)!=0;
      if ($tobool136) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $137=HEAP32[(((((5244300)|0)))>>2)];
      var $inc138=((($137)+(1))|0);
      HEAP32[(((((5244300)|0)))>>2)]=$inc138;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $138=HEAP32[((((5247040)|0))>>2)];
      var $cmp141=(($138)|0) >= 4;
      if ($cmp141) { label = 70; break; } else { label = 74; break; }
    case 70: 
      var $139=HEAP32[((((5248924)|0))>>2)];
      var $140=$newbest;
      var $141=$bestfacet;
      var $tobool144=(($141)|0)!=0;
      if ($tobool144) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $142=$bestfacet;
      var $id146=(($142+72)|0);
      var $143=HEAP32[(($id146)>>2)];
      var $cond149 = $143;label = 73; break;
    case 72: 
      var $cond149 = -1;label = 73; break;
    case 73: 
      var $cond149;
      var $144=$bestdist_addr;
      var $145=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($144)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($144)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($139, 4003, ((5252164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$140,HEAP32[(((tempInt)+(4))>>2)]=$cond149,(HEAPF64[(tempDoublePtr)>>3]=$145,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 74; break;
    case 74: 
      var $146=$bestfacet;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbesthorizon["X"]=1;

function _qh_backnormal($rows, $numrow, $numcol, $sign, $normal, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $rows_addr;
      var $numrow_addr;
      var $numcol_addr;
      var $sign_addr;
      var $normal_addr;
      var $nearzero_addr;
      var $i;
      var $j;
      var $normalp;
      var $normal_tail;
      var $ai;
      var $ak;
      var $diagonal;
      var $waszero=__stackBase__;
      var $zerocol;
      $rows_addr=$rows;
      $numrow_addr=$numrow;
      $numcol_addr=$numcol;
      $sign_addr=$sign;
      $normal_addr=$normal;
      $nearzero_addr=$nearzero;
      $zerocol=-1;
      var $0=$normal_addr;
      var $1=$numcol_addr;
      var $add_ptr=(($0+($1<<3))|0);
      var $add_ptr1=((($add_ptr)-(8))|0);
      $normalp=$add_ptr1;
      var $2=$sign_addr;
      var $tobool=(($2)|0)!=0;
      var $cond=$tobool ? -1 : 1;
      var $3=$normalp;
      var $incdec_ptr=((($3)-(8))|0);
      $normalp=$incdec_ptr;
      (HEAPF64[(tempDoublePtr)>>3]=$cond,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $4=$numrow_addr;
      $i=$4;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $dec=((($5)-(1))|0);
      $i=$dec;
      var $tobool2=(($5)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 22; break; }
    case 4: 
      var $6=$normalp;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $7=$i;
      var $8=$rows_addr;
      var $arrayidx=(($8+($7<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $10=$i;
      var $add_ptr3=(($9+($10<<3))|0);
      var $add_ptr4=(($add_ptr3+8)|0);
      $ai=$add_ptr4;
      var $11=$normalp;
      var $add_ptr5=(($11+8)|0);
      $ak=$add_ptr5;
      var $12=$i;
      var $add=((($12)+(1))|0);
      $j=$add;
      label = 5; break;
    case 5: 
      var $13=$j;
      var $14=$numcol_addr;
      var $cmp=(($13)|0) < (($14)|0);
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $15=$ai;
      var $incdec_ptr8=(($15+8)|0);
      $ai=$incdec_ptr8;
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=$ak;
      var $incdec_ptr9=(($17+8)|0);
      $ak=$incdec_ptr9;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($16)*($18);
      var $19=$normalp;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($20)-($mul);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      var $21=$j;
      var $inc=((($21)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $22=$i;
      var $23=$i;
      var $24=$rows_addr;
      var $arrayidx10=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx10)>>2)];
      var $arrayidx11=(($25+($22<<3))|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $diagonal=$26;
      var $27=$diagonal;
      var $cmp12=$27 < 0;
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$diagonal;
      var $sub13=(-$28);
      var $cond14 = $sub13;label = 11; break;
    case 10: 
      var $29=$diagonal;
      var $cond14 = $29;label = 11; break;
    case 11: 
      var $cond14;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248692)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248692)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp15=$cond14 > $30;
      if ($cmp15) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $31=$diagonal;
      var $32=$normalp;
      var $incdec_ptr16=((($32)-(8))|0);
      $normalp=$incdec_ptr16;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($32)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($32)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($33)/($31);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($32)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($32)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 21; break;
    case 13: 
      HEAP32[(($waszero)>>2)]=0;
      var $34=$normalp;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=$diagonal;
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248684)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248684)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_divzero($35, $36, $37, $waszero);
      var $38=$normalp;
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[(($38)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($38)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $39=HEAP32[(($waszero)>>2)];
      var $tobool17=(($39)|0)!=0;
      if ($tobool17) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $40=$i;
      $zerocol=$40;
      var $41=$sign_addr;
      var $tobool19=(($41)|0)!=0;
      var $cond20=$tobool19 ? -1 : 1;
      var $42=$normalp;
      var $incdec_ptr21=((($42)-(8))|0);
      $normalp=$incdec_ptr21;
      (HEAPF64[(tempDoublePtr)>>3]=$cond20,HEAP32[(($42)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($42)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $43=$normalp;
      var $add_ptr22=(($43+16)|0);
      $normal_tail=$add_ptr22;
      label = 15; break;
    case 15: 
      var $44=$normal_tail;
      var $45=$normal_addr;
      var $46=$numcol_addr;
      var $add_ptr24=(($45+($46<<3))|0);
      var $cmp25=(($44)>>>0) < (($add_ptr24)>>>0);
      if ($cmp25) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $47=$normal_tail;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($47)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($47)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 17; break;
    case 17: 
      var $48=$normal_tail;
      var $incdec_ptr28=(($48+8)|0);
      $normal_tail=$incdec_ptr28;
      label = 15; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $49=$normalp;
      var $incdec_ptr31=((($49)-(8))|0);
      $normalp=$incdec_ptr31;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 3; break;
    case 22: 
      var $50=$zerocol;
      var $cmp34=(($50)|0)!=-1;
      if ($cmp34) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $51=HEAP32[(((((5243116)|0)))>>2)];
      var $inc36=((($51)+(1))|0);
      HEAP32[(((((5243116)|0)))>>2)]=$inc36;
      var $52=$nearzero_addr;
      HEAP32[(($52)>>2)]=1;
      var $53=HEAP32[((((5247040)|0))>>2)];
      var $cmp37=(($53)|0) >= 4;
      if ($cmp37) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $54=HEAP32[((((5248924)|0))>>2)];
      var $55=$i;
      _qh_fprintf($54, 4005, ((5292068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$55,tempInt));
      label = 25; break;
    case 25: 
      _qh_precision(((5290184)|0));
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_backnormal["X"]=1;

function _qh_gausselim($rows, $numrow, $numcol, $sign, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $rows_addr;
      var $numrow_addr;
      var $numcol_addr;
      var $sign_addr;
      var $nearzero_addr;
      var $ai;
      var $ak;
      var $rowp;
      var $pivotrow;
      var $n;
      var $pivot;
      var $pivot_abs;
      var $temp;
      var $i;
      var $j;
      var $k;
      var $pivoti;
      var $flip;
      $rows_addr=$rows;
      $numrow_addr=$numrow;
      $numcol_addr=$numcol;
      $sign_addr=$sign;
      $nearzero_addr=$nearzero;
      $pivot_abs=0;
      $flip=0;
      var $0=$nearzero_addr;
      HEAP32[(($0)>>2)]=0;
      $k=0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $2=$numrow_addr;
      var $cmp=(($1)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 34; break; }
    case 4: 
      var $3=$k;
      var $4=$k;
      var $5=$rows_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $arrayidx1=(($6+($3<<3))|0);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2=$7 < 0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$k;
      var $9=$k;
      var $10=$rows_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx3)>>2)];
      var $arrayidx4=(($11+($8<<3))|0);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$12);
      var $cond = $sub;label = 7; break;
    case 6: 
      var $13=$k;
      var $14=$k;
      var $15=$rows_addr;
      var $arrayidx5=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx5)>>2)];
      var $arrayidx6=(($16+($13<<3))|0);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $17;label = 7; break;
    case 7: 
      var $cond;
      $pivot_abs=$cond;
      var $18=$k;
      $pivoti=$18;
      var $19=$k;
      var $add=((($19)+(1))|0);
      $i=$add;
      label = 8; break;
    case 8: 
      var $20=$i;
      var $21=$numrow_addr;
      var $cmp8=(($20)|0) < (($21)|0);
      if ($cmp8) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $22=$k;
      var $23=$i;
      var $24=$rows_addr;
      var $arrayidx10=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx10)>>2)];
      var $arrayidx11=(($25+($22<<3))|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp12=$26 < 0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$k;
      var $28=$i;
      var $29=$rows_addr;
      var $arrayidx14=(($29+($28<<2))|0);
      var $30=HEAP32[(($arrayidx14)>>2)];
      var $arrayidx15=(($30+($27<<3))|0);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub16=(-$31);
      var $cond21 = $sub16;label = 12; break;
    case 11: 
      var $32=$k;
      var $33=$i;
      var $34=$rows_addr;
      var $arrayidx18=(($34+($33<<2))|0);
      var $35=HEAP32[(($arrayidx18)>>2)];
      var $arrayidx19=(($35+($32<<3))|0);
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond21 = $36;label = 12; break;
    case 12: 
      var $cond21;
      $temp=$cond21;
      var $37=$pivot_abs;
      var $cmp22=$cond21 > $37;
      if ($cmp22) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $38=$temp;
      $pivot_abs=$38;
      var $39=$i;
      $pivoti=$39;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $40=$i;
      var $inc=((($40)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 16: 
      var $41=$pivoti;
      var $42=$k;
      var $cmp23=(($41)|0)!=(($42)|0);
      if ($cmp23) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $43=$pivoti;
      var $44=$rows_addr;
      var $arrayidx25=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx25)>>2)];
      $rowp=$45;
      var $46=$k;
      var $47=$rows_addr;
      var $arrayidx26=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx26)>>2)];
      var $49=$pivoti;
      var $50=$rows_addr;
      var $arrayidx27=(($50+($49<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$48;
      var $51=$rowp;
      var $52=$k;
      var $53=$rows_addr;
      var $arrayidx28=(($53+($52<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$51;
      var $54=$sign_addr;
      var $55=HEAP32[(($54)>>2)];
      var $xor=$55 ^ 1;
      HEAP32[(($54)>>2)]=$xor;
      var $56=$flip;
      var $xor29=$56 ^ 1;
      $flip=$xor29;
      label = 18; break;
    case 18: 
      var $57=$pivot_abs;
      var $58=$k;
      var $59=HEAP32[((((5248712)|0))>>2)];
      var $arrayidx31=(($59+($58<<3))|0);
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx31)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx31)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp32=$57 <= $60;
      if ($cmp32) { label = 19; break; } else { label = 24; break; }
    case 19: 
      var $61=$nearzero_addr;
      HEAP32[(($61)>>2)]=1;
      var $62=$pivot_abs;
      var $cmp34=$62 == 0;
      if ($cmp34) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $63=HEAP32[((((5247040)|0))>>2)];
      var $cmp36=(($63)|0) >= 4;
      if ($cmp36) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $64=HEAP32[((((5248924)|0))>>2)];
      var $65=$k;
      var $66=$pivot_abs;
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($64, 8011, ((5288792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$65,(HEAPF64[(tempDoublePtr)>>3]=$66,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$67,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $68=HEAP32[((((5248924)|0))>>2)];
      var $69=$rows_addr;
      var $70=$numrow_addr;
      var $71=$numcol_addr;
      _qh_printmatrix($68, ((5286540)|0), $69, $70, $71);
      label = 22; break;
    case 22: 
      var $72=HEAP32[(((((5243772)|0)))>>2)];
      var $inc39=((($72)+(1))|0);
      HEAP32[(((((5243772)|0)))>>2)]=$inc39;
      _qh_precision(((5284892)|0));
      label = 32; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $73=$k;
      var $74=$rows_addr;
      var $arrayidx42=(($74+($73<<2))|0);
      var $75=HEAP32[(($arrayidx42)>>2)];
      var $76=$k;
      var $add_ptr=(($75+($76<<3))|0);
      $pivotrow=$add_ptr;
      var $77=$pivotrow;
      var $incdec_ptr=(($77+8)|0);
      $pivotrow=$incdec_ptr;
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($77)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($77)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $pivot=$78;
      var $79=$k;
      var $add43=((($79)+(1))|0);
      $i=$add43;
      label = 25; break;
    case 25: 
      var $80=$i;
      var $81=$numrow_addr;
      var $cmp45=(($80)|0) < (($81)|0);
      if ($cmp45) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $82=$i;
      var $83=$rows_addr;
      var $arrayidx47=(($83+($82<<2))|0);
      var $84=HEAP32[(($arrayidx47)>>2)];
      var $85=$k;
      var $add_ptr48=(($84+($85<<3))|0);
      $ai=$add_ptr48;
      var $86=$pivotrow;
      $ak=$86;
      var $87=$ai;
      var $incdec_ptr49=(($87+8)|0);
      $ai=$incdec_ptr49;
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($87)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($87)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $89=$pivot;
      var $div=($88)/($89);
      $n=$div;
      var $90=$numcol_addr;
      var $91=$k;
      var $add50=((($91)+(1))|0);
      var $sub51=((($90)-($add50))|0);
      $j=$sub51;
      label = 27; break;
    case 27: 
      var $92=$j;
      var $dec=((($92)-(1))|0);
      $j=$dec;
      var $tobool=(($92)|0)!=0;
      if ($tobool) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $93=$n;
      var $94=$ak;
      var $incdec_ptr54=(($94+8)|0);
      $ak=$incdec_ptr54;
      var $95=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($94)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($94)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($93)*($95);
      var $96=$ai;
      var $incdec_ptr55=(($96+8)|0);
      $ai=$incdec_ptr55;
      var $97=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($96)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($96)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub56=($97)-($mul);
      (HEAPF64[(tempDoublePtr)>>3]=$sub56,HEAP32[(($96)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($96)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 27; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $98=$i;
      var $inc59=((($98)+(1))|0);
      $i=$inc59;
      label = 25; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $99=$k;
      var $inc62=((($99)+(1))|0);
      $k=$inc62;
      label = 3; break;
    case 34: 
      var $100=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244052)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244052)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $101=$pivot_abs;
      var $cmp64=$100 > $101;
      if ($cmp64) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $102=$pivot_abs;
      (HEAPF64[(tempDoublePtr)>>3]=$102,HEAP32[((((5244052)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244052)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 36; break;
    case 36: 
      var $103=HEAP32[((((5247040)|0))>>2)];
      var $cmp67=(($103)|0) >= 5;
      if ($cmp67) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $104=HEAP32[((((5248924)|0))>>2)];
      var $105=$rows_addr;
      var $106=$numrow_addr;
      var $107=$numcol_addr;
      _qh_printmatrix($104, ((5282544)|0), $105, $106, $107);
      label = 38; break;
    case 38: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_gausselim["X"]=1;

function _qh_getangle($vect1, $vect2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vect1_addr;
      var $vect2_addr;
      var $angle;
      var $randr;
      var $k;
      $vect1_addr=$vect1;
      $vect2_addr=$vect2;
      $angle=0;
      var $0=HEAP32[((((5247508)|0))>>2)];
      $k=$0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $dec=((($1)-(1))|0);
      $k=$dec;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$vect1_addr;
      var $incdec_ptr=(($2+8)|0);
      $vect1_addr=$incdec_ptr;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=$vect2_addr;
      var $incdec_ptr1=(($4+8)|0);
      $vect2_addr=$incdec_ptr1;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($3)*($5);
      var $6=$angle;
      var $add=($6)+($mul);
      $angle=$add;
      label = 3; break;
    case 5: 
      var $7=HEAP32[((((5247340)|0))>>2)];
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $call=_qh_rand();
      var $conv=(($call)|0);
      $randr=$conv;
      var $8=$randr;
      var $mul3=($8)*(2);
      var $div=($mul3)/(2147483646);
      var $sub=($div)-(1);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul4=($sub)*($9);
      var $10=$angle;
      var $add5=($10)+($mul4);
      $angle=$add5;
      label = 7; break;
    case 7: 
      var $11=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($11)|0) >= 4;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=HEAP32[((((5248924)|0))>>2)];
      var $13=$angle;
      _qh_fprintf($12, 4006, ((5280728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 9; break;
    case 9: 
      var $14=$angle;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getangle["X"]=1;

function _qh_getcenter($vertices) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $k;
      var $center;
      var $coord;
      var $vertex;
      var $vertexp;
      var $count;
      $vertices_addr=$vertices;
      var $0=$vertices_addr;
      var $call=_qh_setsize($0);
      $count=$call;
      var $1=$count;
      var $cmp=(($1)|0) < 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=$count;
      _qh_fprintf($2, 6003, ((5279928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5248932)|0))>>2)];
      var $call1=_qh_memalloc($4);
      var $5=$call1;
      $center=$5;
      $k=0;
      label = 5; break;
    case 5: 
      var $6=$k;
      var $7=HEAP32[((((5247508)|0))>>2)];
      var $cmp2=(($6)|0) < (($7)|0);
      if ($cmp2) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $8=$center;
      var $9=$k;
      var $add_ptr=(($8+($9<<3))|0);
      $coord=$add_ptr;
      var $10=$coord;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($10)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($10)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $vertex=0;
      var $11=$vertices_addr;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $12=$vertices_addr;
      var $e=(($12+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $13=$p;
      $vertexp=$13;
      label = 8; break;
    case 8: 
      var $14=$vertexp;
      var $incdec_ptr=(($14+4)|0);
      $vertexp=$incdec_ptr;
      var $15=HEAP32[(($14)>>2)];
      $vertex=$15;
      var $tobool5=(($15)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$k;
      var $17=$vertex;
      var $point=(($17+8)|0);
      var $18=HEAP32[(($point)>>2)];
      var $arrayidx7=(($18+($16<<3))|0);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=$coord;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($21)+($19);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $22=$count;
      var $conv=(($22)|0);
      var $23=$coord;
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($23)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($23)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($24)/($conv);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($23)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($23)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 12; break;
    case 12: 
      var $25=$k;
      var $inc=((($25)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 13: 
      var $26=$center;
      STACKTOP = __stackBase__;
      return $26;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getcenter["X"]=1;

function _qh_getcentrum($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $dist=__stackBase__;
      var $centrum;
      var $point;
      $facet_addr=$facet;
      var $0=$facet_addr;
      var $vertices=(($0+48)|0);
      var $1=HEAP32[(($vertices)>>2)];
      var $call=_qh_getcenter($1);
      $point=$call;
      var $2=HEAP32[(((((5243156)|0)))>>2)];
      var $inc=((($2)+(1))|0);
      HEAP32[(((((5243156)|0)))>>2)]=$inc;
      var $3=$point;
      var $4=$facet_addr;
      _qh_distplane($3, $4, $dist);
      var $5=$point;
      var $6=$facet_addr;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call1=_qh_projectpoint($5, $6, $7);
      $centrum=$call1;
      var $8=$point;
      var $9=$8;
      var $10=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($9, $10);
      var $11=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($11)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=HEAP32[((((5248924)|0))>>2)];
      var $13=$facet_addr;
      var $id=(($13+72)|0);
      var $14=HEAP32[(($id)>>2)];
      var $15=$facet_addr;
      var $vertices2=(($15+48)|0);
      var $16=HEAP32[(($vertices2)>>2)];
      var $call3=_qh_setsize($16);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($12, 4007, ((5279304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$call3,(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 4; break;
    case 4: 
      var $18=$centrum;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_projectpoint($point, $facet, $dist) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $facet_addr;
      var $dist_addr;
      var $newpoint;
      var $np;
      var $normal;
      var $normsize;
      var $k;
      var $freelistp;
      $point_addr=$point;
      $facet_addr=$facet;
      $dist_addr=$dist;
      var $0=HEAP32[((((5248932)|0))>>2)];
      $normsize=$0;
      $freelistp=0;
      var $1=$normsize;
      var $call=_qh_memalloc($1);
      var $2=$call;
      $newpoint=$2;
      var $3=$newpoint;
      $np=$3;
      var $4=$facet_addr;
      var $normal1=(($4+24)|0);
      var $5=HEAP32[(($normal1)>>2)];
      $normal=$5;
      var $6=HEAP32[((((5247508)|0))>>2)];
      $k=$6;
      label = 3; break;
    case 3: 
      var $7=$k;
      var $dec=((($7)-(1))|0);
      $k=$dec;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$point_addr;
      var $incdec_ptr=(($8+8)|0);
      $point_addr=$incdec_ptr;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=$dist_addr;
      var $11=$normal;
      var $incdec_ptr2=(($11+8)|0);
      $normal=$incdec_ptr2;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($10)*($12);
      var $sub=($9)-($mul);
      var $13=$np;
      var $incdec_ptr3=(($13+8)|0);
      $np=$incdec_ptr3;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 5: 
      var $14=$newpoint;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}
_qh_projectpoint["X"]=1;

function _qh_getdistance($facet, $neighbor, $mindist, $maxdist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facet_addr;
      var $neighbor_addr;
      var $mindist_addr;
      var $maxdist_addr;
      var $vertex;
      var $vertexp;
      var $dist=__stackBase__;
      var $maxd;
      var $mind;
      $facet_addr=$facet;
      $neighbor_addr=$neighbor;
      $mindist_addr=$mindist;
      $maxdist_addr=$maxdist;
      $vertex=0;
      var $0=$facet_addr;
      var $vertices=(($0+48)|0);
      var $1=HEAP32[(($vertices)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$facet_addr;
      var $vertices1=(($2+48)|0);
      var $3=HEAP32[(($vertices1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $vertexp=$4;
      label = 4; break;
    case 4: 
      var $5=$vertexp;
      var $incdec_ptr=(($5+4)|0);
      $vertexp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $vertex=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$vertex;
      var $8=$7;
      var $bf_field_offs=(($8+20)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & -268435457;
      HEAP32[(($9)>>2)]=$11;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      $vertex=0;
      var $12=$neighbor_addr;
      var $vertices3=(($12+48)|0);
      var $13=HEAP32[(($vertices3)>>2)];
      var $tobool4=(($13)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $14=$neighbor_addr;
      var $vertices6=(($14+48)|0);
      var $15=HEAP32[(($vertices6)>>2)];
      var $e7=(($15+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $16=$p9;
      $vertexp=$16;
      label = 9; break;
    case 9: 
      var $17=$vertexp;
      var $incdec_ptr11=(($17+4)|0);
      $vertexp=$incdec_ptr11;
      var $18=HEAP32[(($17)>>2)];
      $vertex=$18;
      var $tobool12=(($18)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$vertex;
      var $20=$19;
      var $bf_field_offs14=(($20+20)|0);
      var $21=$bf_field_offs14;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & -268435457;
      var $24=$23 | 268435456;
      HEAP32[(($21)>>2)]=$24;
      label = 9; break;
    case 11: 
      label = 12; break;
    case 12: 
      $mind=0;
      $maxd=0;
      $vertex=0;
      var $25=$facet_addr;
      var $vertices17=(($25+48)|0);
      var $26=HEAP32[(($vertices17)>>2)];
      var $tobool18=(($26)|0)!=0;
      if ($tobool18) { label = 13; break; } else { label = 24; break; }
    case 13: 
      var $27=$facet_addr;
      var $vertices20=(($27+48)|0);
      var $28=HEAP32[(($vertices20)>>2)];
      var $e21=(($28+4)|0);
      var $arrayidx22=(($e21)|0);
      var $p23=$arrayidx22;
      var $29=$p23;
      $vertexp=$29;
      label = 14; break;
    case 14: 
      var $30=$vertexp;
      var $incdec_ptr25=(($30+4)|0);
      $vertexp=$incdec_ptr25;
      var $31=HEAP32[(($30)>>2)];
      $vertex=$31;
      var $tobool26=(($31)|0)!=0;
      if ($tobool26) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $32=$vertex;
      var $33=$32;
      var $bf_field_offs28=(($33+20)|0);
      var $34=$bf_field_offs28;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 >>> 28;
      var $bf_clear=$36 & 1;
      var $tobool29=(($bf_clear)|0)!=0;
      if ($tobool29) { label = 22; break; } else { label = 16; break; }
    case 16: 
      var $37=HEAP32[(((((5243132)|0)))>>2)];
      var $inc=((($37)+(1))|0);
      HEAP32[(((((5243132)|0)))>>2)]=$inc;
      var $38=$vertex;
      var $point=(($38+8)|0);
      var $39=HEAP32[(($point)>>2)];
      var $40=$neighbor_addr;
      _qh_distplane($39, $40, $dist);
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $42=$mind;
      var $cmp=$41 < $42;
      if ($cmp) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mind=$43;
      label = 21; break;
    case 18: 
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $45=$maxd;
      var $cmp32=$44 > $45;
      if ($cmp32) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxd=$46;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 14; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $47=$mind;
      var $48=$mindist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$47,HEAP32[(($48)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($48)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $49=$maxd;
      var $50=$maxdist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[(($50)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($50)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $51=$mind;
      var $sub=(-$51);
      $mind=$sub;
      var $52=$maxd;
      var $53=$mind;
      var $cmp39=$52 > $53;
      if ($cmp39) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $54=$maxd;
      $retval=$54;
      label = 27; break;
    case 26: 
      var $55=$mind;
      $retval=$55;
      label = 27; break;
    case 27: 
      var $56=$retval;
      STACKTOP = __stackBase__;
      return $56;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getdistance["X"]=1;

function _qh_normalize($normal, $dim, $toporient) {
  var label = 0;


  var $normal_addr;
  var $dim_addr;
  var $toporient_addr;
  $normal_addr=$normal;
  $dim_addr=$dim;
  $toporient_addr=$toporient;
  var $0=$normal_addr;
  var $1=$dim_addr;
  var $2=$toporient_addr;
  _qh_normalize2($0, $1, $2, 0, 0);

  return;
}


function _qh_normalize2($normal, $dim, $toporient, $minnorm, $ismin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $normal_addr;
      var $dim_addr;
      var $toporient_addr;
      var $minnorm_addr;
      var $ismin_addr;
      var $k;
      var $colp;
      var $maxp;
      var $norm;
      var $temp;
      var $norm1;
      var $norm2;
      var $norm3;
      var $zerodiv=__stackBase__;
      $normal_addr=$normal;
      $dim_addr=$dim;
      $toporient_addr=$toporient;
      $minnorm_addr=$minnorm;
      $ismin_addr=$ismin;
      $norm=0;
      var $0=$normal_addr;
      var $add_ptr=(($0+8)|0);
      $norm1=$add_ptr;
      var $1=$normal_addr;
      var $add_ptr1=(($1+16)|0);
      $norm2=$add_ptr1;
      var $2=$normal_addr;
      var $add_ptr2=(($2+24)|0);
      $norm3=$add_ptr2;
      var $3=$dim_addr;
      var $cmp=(($3)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$normal_addr;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=$normal_addr;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($5)*($7);
      var $8=$norm1;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=$norm1;
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul3=($9)*($11);
      var $add=($mul)+($mul3);
      var $call=Math.sqrt($add);
      $norm=$call;
      label = 17; break;
    case 4: 
      var $12=$dim_addr;
      var $cmp4=(($12)|0)==3;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$normal_addr;
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=$normal_addr;
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul6=($14)*($16);
      var $17=$norm1;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$norm1;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul7=($18)*($20);
      var $add8=($mul6)+($mul7);
      var $21=$norm2;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=$norm2;
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($23)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($23)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul9=($22)*($24);
      var $add10=($add8)+($mul9);
      var $call11=Math.sqrt($add10);
      $norm=$call11;
      label = 16; break;
    case 6: 
      var $25=$dim_addr;
      var $cmp13=(($25)|0)==4;
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$normal_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($26)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($26)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $28=$normal_addr;
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($28)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($28)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul15=($27)*($29);
      var $30=$norm1;
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $32=$norm1;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($32)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($32)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul16=($31)*($33);
      var $add17=($mul15)+($mul16);
      var $34=$norm2;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=$norm2;
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($36)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($36)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul18=($35)*($37);
      var $add19=($add17)+($mul18);
      var $38=$norm3;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=$norm3;
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul20=($39)*($41);
      var $add21=($add19)+($mul20);
      var $call22=Math.sqrt($add21);
      $norm=$call22;
      label = 15; break;
    case 8: 
      var $42=$dim_addr;
      var $cmp24=(($42)|0) > 4;
      if ($cmp24) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $43=$normal_addr;
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($43)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($43)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $45=$normal_addr;
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($45)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($45)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul26=($44)*($46);
      var $47=$norm1;
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=$norm1;
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul27=($48)*($50);
      var $add28=($mul26)+($mul27);
      var $51=$norm2;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $53=$norm2;
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul29=($52)*($54);
      var $add30=($add28)+($mul29);
      var $55=$norm3;
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($55)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($55)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $57=$norm3;
      var $58=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($57)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($57)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul31=($56)*($58);
      var $add32=($add30)+($mul31);
      $norm=$add32;
      var $59=$dim_addr;
      var $sub=((($59)-(4))|0);
      $k=$sub;
      var $60=$normal_addr;
      var $add_ptr33=(($60+32)|0);
      $colp=$add_ptr33;
      label = 10; break;
    case 10: 
      var $61=$k;
      var $dec=((($61)-(1))|0);
      $k=$dec;
      var $tobool=(($61)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $62=$colp;
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($62)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($62)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $64=$colp;
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($64)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($64)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul34=($63)*($65);
      var $66=$norm;
      var $add35=($66)+($mul34);
      $norm=$add35;
      label = 12; break;
    case 12: 
      var $67=$colp;
      var $incdec_ptr=(($67+8)|0);
      $colp=$incdec_ptr;
      label = 10; break;
    case 13: 
      var $68=$norm;
      var $call36=Math.sqrt($68);
      $norm=$call36;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $69=$minnorm_addr;
      var $tobool40=(($69)|0)!=0;
      if ($tobool40) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $70=$norm;
      var $71=$minnorm_addr;
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($71)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($71)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp42=$70 < $72;
      if ($cmp42) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $73=$ismin_addr;
      HEAP32[(($73)>>2)]=1;
      label = 21; break;
    case 20: 
      var $74=$ismin_addr;
      HEAP32[(($74)>>2)]=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244052)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244052)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=$norm;
      var $cmp47=$75 > $76;
      if ($cmp47) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $77=$norm;
      (HEAPF64[(tempDoublePtr)>>3]=$77,HEAP32[((((5244052)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244052)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 24; break;
    case 24: 
      var $78=$norm;
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248676)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248676)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp50=$78 > $79;
      if ($cmp50) { label = 25; break; } else { label = 42; break; }
    case 25: 
      var $80=$toporient_addr;
      var $tobool52=(($80)|0)!=0;
      if ($tobool52) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $81=$norm;
      var $sub54=(-$81);
      $norm=$sub54;
      label = 27; break;
    case 27: 
      var $82=$norm;
      var $83=$normal_addr;
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($83)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($83)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($84)/($82);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($83)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($83)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $85=$norm;
      var $86=$norm1;
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($86)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($86)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div56=($87)/($85);
      (HEAPF64[(tempDoublePtr)>>3]=$div56,HEAP32[(($86)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($86)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $88=$dim_addr;
      var $cmp57=(($88)|0)==2;
      if ($cmp57) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 41; break;
    case 29: 
      var $89=$dim_addr;
      var $cmp60=(($89)|0)==3;
      if ($cmp60) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $90=$norm;
      var $91=$norm2;
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($91)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($91)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div62=($92)/($90);
      (HEAPF64[(tempDoublePtr)>>3]=$div62,HEAP32[(($91)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($91)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 31: 
      var $93=$dim_addr;
      var $cmp64=(($93)|0)==4;
      if ($cmp64) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $94=$norm;
      var $95=$norm2;
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($95)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($95)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div66=($96)/($94);
      (HEAPF64[(tempDoublePtr)>>3]=$div66,HEAP32[(($95)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($95)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $97=$norm;
      var $98=$norm3;
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($98)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($98)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div67=($99)/($97);
      (HEAPF64[(tempDoublePtr)>>3]=$div67,HEAP32[(($98)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($98)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 39; break;
    case 33: 
      var $100=$dim_addr;
      var $cmp69=(($100)|0) > 4;
      if ($cmp69) { label = 34; break; } else { label = 38; break; }
    case 34: 
      var $101=$norm;
      var $102=$norm2;
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($102)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($102)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div71=($103)/($101);
      (HEAPF64[(tempDoublePtr)>>3]=$div71,HEAP32[(($102)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($102)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $104=$norm;
      var $105=$norm3;
      var $106=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($105)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($105)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div72=($106)/($104);
      (HEAPF64[(tempDoublePtr)>>3]=$div72,HEAP32[(($105)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($105)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $107=$dim_addr;
      var $sub73=((($107)-(4))|0);
      $k=$sub73;
      var $108=$normal_addr;
      var $add_ptr74=(($108+32)|0);
      $colp=$add_ptr74;
      label = 35; break;
    case 35: 
      var $109=$k;
      var $dec76=((($109)-(1))|0);
      $k=$dec76;
      var $tobool77=(($109)|0)!=0;
      if ($tobool77) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $110=$norm;
      var $111=$colp;
      var $incdec_ptr79=(($111+8)|0);
      $colp=$incdec_ptr79;
      var $112=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($111)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($111)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div80=($112)/($110);
      (HEAPF64[(tempDoublePtr)>>3]=$div80,HEAP32[(($111)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($111)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 64; break;
    case 42: 
      var $113=$norm;
      var $cmp87=$113 == 0;
      if ($cmp87) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $114=$dim_addr;
      var $conv=(($114)|0);
      var $div89=(1)/($conv);
      var $call90=Math.sqrt($div89);
      $temp=$call90;
      var $115=$dim_addr;
      $k=$115;
      var $116=$normal_addr;
      $colp=$116;
      label = 44; break;
    case 44: 
      var $117=$k;
      var $dec92=((($117)-(1))|0);
      $k=$dec92;
      var $tobool93=(($117)|0)!=0;
      if ($tobool93) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $118=$temp;
      var $119=$colp;
      var $incdec_ptr95=(($119+8)|0);
      $colp=$incdec_ptr95;
      (HEAPF64[(tempDoublePtr)>>3]=$118,HEAP32[(($119)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($119)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 44; break;
    case 46: 
      label = 63; break;
    case 47: 
      var $120=$toporient_addr;
      var $tobool98=(($120)|0)!=0;
      if ($tobool98) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $121=$norm;
      var $sub100=(-$121);
      $norm=$sub100;
      label = 49; break;
    case 49: 
      var $122=$dim_addr;
      $k=$122;
      var $123=$normal_addr;
      $colp=$123;
      label = 50; break;
    case 50: 
      var $124=$k;
      var $dec103=((($124)-(1))|0);
      $k=$dec103;
      var $tobool104=(($124)|0)!=0;
      if ($tobool104) { label = 51; break; } else { label = 62; break; }
    case 51: 
      var $125=$colp;
      var $126=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($125)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($125)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $127=$norm;
      var $128=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call106=_qh_divzero($126, $127, $128, $zerodiv);
      $temp=$call106;
      var $129=HEAP32[(($zerodiv)>>2)];
      var $tobool107=(($129)|0)!=0;
      if ($tobool107) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $130=$temp;
      var $131=$colp;
      (HEAPF64[(tempDoublePtr)>>3]=$130,HEAP32[(($131)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($131)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 60; break;
    case 53: 
      var $132=$normal_addr;
      var $133=$dim_addr;
      var $call110=_qh_maxabsval($132, $133);
      $maxp=$call110;
      var $134=$maxp;
      var $135=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($134)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($134)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $136=$norm;
      var $mul111=($135)*($136);
      var $cmp112=$mul111 >= 0;
      var $cond=$cmp112 ? 1 : -1;
      $temp=$cond;
      var $137=$dim_addr;
      $k=$137;
      var $138=$normal_addr;
      $colp=$138;
      label = 54; break;
    case 54: 
      var $139=$k;
      var $dec115=((($139)-(1))|0);
      $k=$dec115;
      var $tobool116=(($139)|0)!=0;
      if ($tobool116) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $140=$colp;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($140)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($140)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 56; break;
    case 56: 
      var $141=$colp;
      var $incdec_ptr119=(($141+8)|0);
      $colp=$incdec_ptr119;
      label = 54; break;
    case 57: 
      var $142=$temp;
      var $143=$maxp;
      (HEAPF64[(tempDoublePtr)>>3]=$142,HEAP32[(($143)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($143)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $144=HEAP32[(((((5244084)|0)))>>2)];
      var $inc=((($144)+(1))|0);
      HEAP32[(((((5244084)|0)))>>2)]=$inc;
      var $145=HEAP32[((((5247040)|0))>>2)];
      var $tobool121=(($145)|0)!=0;
      if ($tobool121) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $146=HEAP32[((((5248924)|0))>>2)];
      var $147=$norm;
      var $148=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($146, 1, ((5278296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$147,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$148,tempInt));
      label = 59; break;
    case 59: 
      label = 64; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $149=$colp;
      var $incdec_ptr126=(($149+8)|0);
      $colp=$incdec_ptr126;
      label = 50; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_normalize2["X"]=1;

function _qh_setfacetplane($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $point;
      var $vertex;
      var $vertexp;
      var $normsize;
      var $k;
      var $i;
      var $oldtrace;
      var $dist=__stackBase__;
      var $freelistp;
      var $coord;
      var $gmcoord;
      var $point0;
      var $nearzero=(__stackBase__)+(8);
      var $istrace;
      $facet_addr=$facet;
      var $0=HEAP32[((((5248932)|0))>>2)];
      $normsize=$0;
      $oldtrace=0;
      var $1=$facet_addr;
      var $vertices=(($1+48)|0);
      var $2=HEAP32[(($vertices)>>2)];
      var $e=(($2+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $point1=(($4+8)|0);
      var $5=HEAP32[(($point1)>>2)];
      $point0=$5;
      HEAP32[(($nearzero)>>2)]=0;
      var $6=HEAP32[(((((5244548)|0)))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[(((((5244548)|0)))>>2)]=$inc;
      var $7=$facet_addr;
      var $normal=(($7+24)|0);
      var $8=HEAP32[(($normal)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $freelistp=0;
      var $9=$normsize;
      var $call=_qh_memalloc($9);
      var $10=$call;
      var $11=$facet_addr;
      var $normal2=(($11+24)|0);
      HEAP32[(($normal2)>>2)]=$10;
      label = 4; break;
    case 4: 
      var $12=$facet_addr;
      var $13=HEAP32[((((5248972)|0))>>2)];
      var $cmp=(($12)|0)==(($13)|0);
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $14=HEAP32[((((5247040)|0))>>2)];
      $oldtrace=$14;
      HEAP32[((((5247040)|0))>>2)]=5;
      var $15=HEAP32[((((5248924)|0))>>2)];
      var $16=$facet_addr;
      var $id=(($16+72)|0);
      var $17=HEAP32[(($id)>>2)];
      _qh_fprintf($15, 8012, ((5277496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
      var $18=HEAP32[((((5248924)|0))>>2)];
      var $19=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($18, 8013, ((5276908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      var $20=HEAP32[(((((5244580)|0)))>>2)];
      var $tobool4=(($20)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=HEAP32[((((5248924)|0))>>2)];
      var $22=HEAP32[(((((5244580)|0)))>>2)];
      _qh_fprintf($21, 8014, ((5276396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
      label = 7; break;
    case 7: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($23, 8015, ((5276064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $24=HEAP32[((((5248924)|0))>>2)];
      _qh_printsummary($24);
      label = 8; break;
    case 8: 
      var $25=HEAP32[((((5247508)|0))>>2)];
      var $cmp8=(($25)|0) <= 4;
      if ($cmp8) { label = 9; break; } else { label = 26; break; }
    case 9: 
      $i=0;
      var $26=HEAP32[((((5247340)|0))>>2)];
      var $tobool10=(($26)|0)!=0;
      if ($tobool10) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $27=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$27;
      $vertex=0;
      var $28=$facet_addr;
      var $vertices12=(($28+48)|0);
      var $29=HEAP32[(($vertices12)>>2)];
      var $tobool13=(($29)|0)!=0;
      if ($tobool13) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $30=$facet_addr;
      var $vertices15=(($30+48)|0);
      var $31=HEAP32[(($vertices15)>>2)];
      var $e16=(($31+4)|0);
      var $arrayidx17=(($e16)|0);
      var $p18=$arrayidx17;
      var $32=$p18;
      $vertexp=$32;
      label = 12; break;
    case 12: 
      var $33=$vertexp;
      var $incdec_ptr=(($33+4)|0);
      $vertexp=$incdec_ptr;
      var $34=HEAP32[(($33)>>2)];
      $vertex=$34;
      var $tobool19=(($34)|0)!=0;
      if ($tobool19) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $35=$gmcoord;
      var $36=$i;
      var $inc20=((($36)+(1))|0);
      $i=$inc20;
      var $37=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx21=(($37+($36<<2))|0);
      HEAP32[(($arrayidx21)>>2)]=$35;
      var $38=$vertex;
      var $point22=(($38+8)|0);
      var $39=HEAP32[(($point22)>>2)];
      $coord=$39;
      var $40=HEAP32[((((5247508)|0))>>2)];
      $k=$40;
      label = 14; break;
    case 14: 
      var $41=$k;
      var $dec=((($41)-(1))|0);
      $k=$dec;
      var $tobool24=(($41)|0)!=0;
      if ($tobool24) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=$coord;
      var $incdec_ptr26=(($42+8)|0);
      $coord=$incdec_ptr26;
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247352)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247352)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $45=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247360)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247360)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call27=_qh_randomfactor($44, $45);
      var $mul=($43)*($call27);
      var $46=$gmcoord;
      var $incdec_ptr28=(($46+8)|0);
      $gmcoord=$incdec_ptr28;
      (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($46)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($46)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 16: 
      label = 12; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 25; break;
    case 19: 
      $vertex=0;
      var $47=$facet_addr;
      var $vertices31=(($47+48)|0);
      var $48=HEAP32[(($vertices31)>>2)];
      var $tobool32=(($48)|0)!=0;
      if ($tobool32) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $49=$facet_addr;
      var $vertices34=(($49+48)|0);
      var $50=HEAP32[(($vertices34)>>2)];
      var $e35=(($50+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      var $51=$p37;
      $vertexp=$51;
      label = 21; break;
    case 21: 
      var $52=$vertexp;
      var $incdec_ptr39=(($52+4)|0);
      $vertexp=$incdec_ptr39;
      var $53=HEAP32[(($52)>>2)];
      $vertex=$53;
      var $tobool40=(($53)|0)!=0;
      if ($tobool40) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $54=$vertex;
      var $point42=(($54+8)|0);
      var $55=HEAP32[(($point42)>>2)];
      var $56=$i;
      var $inc43=((($56)+(1))|0);
      $i=$inc43;
      var $57=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx44=(($57+($56<<2))|0);
      HEAP32[(($arrayidx44)>>2)]=$55;
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $58=HEAP32[((((5247508)|0))>>2)];
      var $59=HEAP32[((((5249196)|0))>>2)];
      var $60=$point0;
      var $61=$facet_addr;
      var $62=$61;
      var $bf_field_offs=(($62+76)|0);
      var $63=$bf_field_offs;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 >>> 12;
      var $bf_clear=$65 & 1;
      var $66=$facet_addr;
      var $normal48=(($66+24)|0);
      var $67=HEAP32[(($normal48)>>2)];
      var $68=$facet_addr;
      var $offset=(($68+16)|0);
      _qh_sethyperplane_det($58, $59, $60, $bf_clear, $67, $offset, $nearzero);
      label = 26; break;
    case 26: 
      var $69=HEAP32[((((5247508)|0))>>2)];
      var $cmp50=(($69)|0) > 4;
      if ($cmp50) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $70=HEAP32[(($nearzero)>>2)];
      var $tobool51=(($70)|0)!=0;
      if ($tobool51) { label = 28; break; } else { label = 53; break; }
    case 28: 
      $i=0;
      var $71=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$71;
      $vertex=0;
      var $72=$facet_addr;
      var $vertices53=(($72+48)|0);
      var $73=HEAP32[(($vertices53)>>2)];
      var $tobool54=(($73)|0)!=0;
      if ($tobool54) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $74=$facet_addr;
      var $vertices56=(($74+48)|0);
      var $75=HEAP32[(($vertices56)>>2)];
      var $e57=(($75+4)|0);
      var $arrayidx58=(($e57)|0);
      var $p59=$arrayidx58;
      var $76=$p59;
      $vertexp=$76;
      label = 30; break;
    case 30: 
      var $77=$vertexp;
      var $incdec_ptr61=(($77+4)|0);
      $vertexp=$incdec_ptr61;
      var $78=HEAP32[(($77)>>2)];
      $vertex=$78;
      var $tobool62=(($78)|0)!=0;
      if ($tobool62) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $79=$vertex;
      var $point64=(($79+8)|0);
      var $80=HEAP32[(($point64)>>2)];
      var $81=$point0;
      var $cmp65=(($80)|0)!=(($81)|0);
      if ($cmp65) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $82=$gmcoord;
      var $83=$i;
      var $inc67=((($83)+(1))|0);
      $i=$inc67;
      var $84=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx68=(($84+($83<<2))|0);
      HEAP32[(($arrayidx68)>>2)]=$82;
      var $85=$vertex;
      var $point69=(($85+8)|0);
      var $86=HEAP32[(($point69)>>2)];
      $coord=$86;
      var $87=$point0;
      $point=$87;
      var $88=HEAP32[((((5247508)|0))>>2)];
      $k=$88;
      label = 33; break;
    case 33: 
      var $89=$k;
      var $dec71=((($89)-(1))|0);
      $k=$dec71;
      var $tobool72=(($89)|0)!=0;
      if ($tobool72) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $90=$coord;
      var $incdec_ptr74=(($90+8)|0);
      $coord=$incdec_ptr74;
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($90)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($90)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $92=$point;
      var $incdec_ptr75=(($92+8)|0);
      $point=$incdec_ptr75;
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($92)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($92)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($91)-($93);
      var $94=$gmcoord;
      var $incdec_ptr76=(($94+8)|0);
      $gmcoord=$incdec_ptr76;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($94)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($94)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 33; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 30; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $95=$gmcoord;
      var $96=$i;
      var $97=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx81=(($97+($96<<2))|0);
      HEAP32[(($arrayidx81)>>2)]=$95;
      var $98=HEAP32[((((5247340)|0))>>2)];
      var $tobool82=(($98)|0)!=0;
      if ($tobool82) { label = 39; break; } else { label = 46; break; }
    case 39: 
      var $99=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$99;
      var $100=HEAP32[((((5247508)|0))>>2)];
      var $sub84=((($100)-(1))|0);
      $i=$sub84;
      label = 40; break;
    case 40: 
      var $101=$i;
      var $dec86=((($101)-(1))|0);
      $i=$dec86;
      var $tobool87=(($101)|0)!=0;
      if ($tobool87) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $102=HEAP32[((((5247508)|0))>>2)];
      $k=$102;
      label = 42; break;
    case 42: 
      var $103=$k;
      var $dec90=((($103)-(1))|0);
      $k=$dec90;
      var $tobool91=(($103)|0)!=0;
      if ($tobool91) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247352)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247352)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $105=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247360)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247360)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call93=_qh_randomfactor($104, $105);
      var $106=$gmcoord;
      var $incdec_ptr94=(($106+8)|0);
      $gmcoord=$incdec_ptr94;
      var $107=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($106)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($106)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul95=($107)*($call93);
      (HEAPF64[(tempDoublePtr)>>3]=$mul95,HEAP32[(($106)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($106)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 42; break;
    case 44: 
      label = 40; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $108=HEAP32[((((5247508)|0))>>2)];
      var $109=HEAP32[((((5249196)|0))>>2)];
      var $110=$point0;
      var $111=$facet_addr;
      var $112=$111;
      var $bf_field_offs99=(($112+76)|0);
      var $113=$bf_field_offs99;
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 >>> 12;
      var $bf_clear100=$115 & 1;
      var $116=$facet_addr;
      var $normal101=(($116+24)|0);
      var $117=HEAP32[(($normal101)>>2)];
      var $118=$facet_addr;
      var $offset102=(($118+16)|0);
      _qh_sethyperplane_gauss($108, $109, $110, $bf_clear100, $117, $offset102, $nearzero);
      var $119=HEAP32[(($nearzero)>>2)];
      var $tobool103=(($119)|0)!=0;
      if ($tobool103) { label = 47; break; } else { label = 52; break; }
    case 47: 
      var $120=$facet_addr;
      var $call105=_qh_orientoutside($120);
      var $tobool106=(($call105)|0)!=0;
      if ($tobool106) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $121=HEAP32[((((5247040)|0))>>2)];
      var $tobool108=(($121)|0)!=0;
      if ($tobool108) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $122=HEAP32[((((5248924)|0))>>2)];
      var $123=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($122, 2, ((5275028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$123,tempInt));
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $124=$facet_addr;
      var $125=$124;
      var $bf_field_offs114=(($125+76)|0);
      var $126=$bf_field_offs114;
      var $127=HEAP32[(($126)>>2)];
      var $128=$127 & -131073;
      HEAP32[(($126)>>2)]=$128;
      var $129=HEAP32[((((5247000)|0))>>2)];
      var $tobool115=(($129)|0)!=0;
      if ($tobool115) { label = 54; break; } else { label = 62; break; }
    case 54: 
      var $130=HEAP32[((((5247460)|0))>>2)];
      var $tobool117=(($130)|0)!=0;
      if ($tobool117) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $131=HEAP32[((((5247508)|0))>>2)];
      var $sub119=((($131)-(1))|0);
      var $132=$facet_addr;
      var $normal120=(($132+24)|0);
      var $133=HEAP32[(($normal120)>>2)];
      var $arrayidx121=(($133+($sub119<<3))|0);
      var $134=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx121)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx121)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $135=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul122=($135)*(2);
      var $cmp123=$134 >= $mul122;
      if ($cmp123) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $136=$facet_addr;
      var $137=$136;
      var $bf_field_offs125=(($137+76)|0);
      var $138=$bf_field_offs125;
      var $139=HEAP32[(($138)>>2)];
      var $140=$139 & -131073;
      var $141=$140 | 131072;
      HEAP32[(($138)>>2)]=$141;
      label = 57; break;
    case 57: 
      label = 61; break;
    case 58: 
      var $142=HEAP32[((((5247508)|0))>>2)];
      var $sub128=((($142)-(1))|0);
      var $143=$facet_addr;
      var $normal129=(($143+24)|0);
      var $144=HEAP32[(($normal129)>>2)];
      var $arrayidx130=(($144+($sub128<<3))|0);
      var $145=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx130)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx130)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $146=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub131=(-$146);
      var $mul132=($sub131)*(2);
      var $cmp133=$145 > $mul132;
      if ($cmp133) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $147=$facet_addr;
      var $148=$147;
      var $bf_field_offs135=(($148+76)|0);
      var $149=$bf_field_offs135;
      var $150=HEAP32[(($149)>>2)];
      var $151=$150 & -131073;
      var $152=$151 | 131072;
      HEAP32[(($149)>>2)]=$152;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $153=HEAP32[((((5247316)|0))>>2)];
      var $tobool139=(($153)|0)!=0;
      if ($tobool139) { label = 66; break; } else { label = 63; break; }
    case 63: 
      var $154=HEAP32[((((5247040)|0))>>2)];
      var $tobool141=(($154)|0)!=0;
      if ($tobool141) { label = 66; break; } else { label = 64; break; }
    case 64: 
      var $155=HEAP32[((((5247428)|0))>>2)];
      var $tobool143=(($155)|0)!=0;
      if ($tobool143) { label = 66; break; } else { label = 65; break; }
    case 65: 
      var $156=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp145=$156 < 1.7976931348623157e+308;
      if ($cmp145) { label = 66; break; } else { label = 88; break; }
    case 66: 
      var $157=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$157;
      HEAP32[((((5247340)|0))>>2)]=0;
      $vertex=0;
      var $158=$facet_addr;
      var $vertices147=(($158+48)|0);
      var $159=HEAP32[(($vertices147)>>2)];
      var $tobool148=(($159)|0)!=0;
      if ($tobool148) { label = 67; break; } else { label = 87; break; }
    case 67: 
      var $160=$facet_addr;
      var $vertices150=(($160+48)|0);
      var $161=HEAP32[(($vertices150)>>2)];
      var $e151=(($161+4)|0);
      var $arrayidx152=(($e151)|0);
      var $p153=$arrayidx152;
      var $162=$p153;
      $vertexp=$162;
      label = 68; break;
    case 68: 
      var $163=$vertexp;
      var $incdec_ptr155=(($163+4)|0);
      $vertexp=$incdec_ptr155;
      var $164=HEAP32[(($163)>>2)];
      $vertex=$164;
      var $tobool156=(($164)|0)!=0;
      if ($tobool156) { label = 69; break; } else { label = 86; break; }
    case 69: 
      var $165=$vertex;
      var $point158=(($165+8)|0);
      var $166=HEAP32[(($point158)>>2)];
      var $167=$point0;
      var $cmp159=(($166)|0)!=(($167)|0);
      if ($cmp159) { label = 70; break; } else { label = 85; break; }
    case 70: 
      $istrace=0;
      var $168=HEAP32[(((((5243444)|0)))>>2)];
      var $inc161=((($168)+(1))|0);
      HEAP32[(((((5243444)|0)))>>2)]=$inc161;
      var $169=$vertex;
      var $point162=(($169+8)|0);
      var $170=HEAP32[(($point162)>>2)];
      var $171=$facet_addr;
      _qh_distplane($170, $171, $dist);
      var $172=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp163=$172 < 0;
      if ($cmp163) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $173=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub164=(-$173);
      var $cond = $sub164;label = 73; break;
    case 72: 
      var $174=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $174;label = 73; break;
    case 73: 
      var $cond;
      (HEAPF64[(tempDoublePtr)>>3]=$cond,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $175=HEAP32[(((((5244132)|0)))>>2)];
      var $inc165=((($175)+(1))|0);
      HEAP32[(((((5244132)|0)))>>2)]=$inc165;
      var $176=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $177=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($177)+($176);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5244140)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244140)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $178=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $179=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp166=$178 > $179;
      if ($cmp166) { label = 74; break; } else { label = 79; break; }
    case 74: 
      var $180=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$180,HEAP32[((((5244148)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244148)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $181=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $182=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp168=$181 > $182;
      if ($cmp168) { label = 75; break; } else { label = 78; break; }
    case 75: 
      var $183=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$183,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $184=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $185=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp170=$184 > $185;
      if ($cmp170) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $istrace=1;
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 82; break;
    case 79: 
      var $186=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub175=(-$186);
      var $187=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp176=$sub175 > $187;
      if ($cmp176) { label = 80; break; } else { label = 81; break; }
    case 80: 
      $istrace=1;
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $188=$istrace;
      var $tobool180=(($188)|0)!=0;
      if ($tobool180) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $189=HEAP32[((((5248924)|0))>>2)];
      var $190=$vertex;
      var $point182=(($190+8)|0);
      var $191=HEAP32[(($point182)>>2)];
      var $call183=_qh_pointid($191);
      var $192=$vertex;
      var $193=$192;
      var $bf_field_offs184=(($193+20)|0);
      var $194=$bf_field_offs184;
      var $195=HEAP32[(($194)>>2)];
      var $bf_clear185=$195 & 16777215;
      var $196=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $197=$facet_addr;
      var $id186=(($197+72)|0);
      var $198=HEAP32[(($id186)>>2)];
      var $199=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($189, 8016, ((5274556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call183,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear185,(HEAPF64[(tempDoublePtr)>>3]=$196,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$198,HEAP32[(((tempInt)+(20))>>2)]=$199,tempInt));
      var $200=$facet_addr;
      _qh_errprint(((5273952)|0), $200, 0, 0, 0);
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 68; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $201=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$201;
      label = 88; break;
    case 88: 
      var $202=HEAP32[((((5247040)|0))>>2)];
      var $cmp192=(($202)|0) >= 3;
      if ($cmp192) { label = 89; break; } else { label = 94; break; }
    case 89: 
      var $203=HEAP32[((((5248924)|0))>>2)];
      var $204=$facet_addr;
      var $id194=(($204+72)|0);
      var $205=HEAP32[(($id194)>>2)];
      var $206=$facet_addr;
      var $offset195=(($206+16)|0);
      var $207=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset195)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset195)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($203, 8017, ((5273348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$205,(HEAPF64[(tempDoublePtr)>>3]=$207,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $k=0;
      label = 90; break;
    case 90: 
      var $208=$k;
      var $209=HEAP32[((((5247508)|0))>>2)];
      var $cmp197=(($208)|0) < (($209)|0);
      if ($cmp197) { label = 91; break; } else { label = 93; break; }
    case 91: 
      var $210=HEAP32[((((5248924)|0))>>2)];
      var $211=$k;
      var $212=$facet_addr;
      var $normal199=(($212+24)|0);
      var $213=HEAP32[(($normal199)>>2)];
      var $arrayidx200=(($213+($211<<3))|0);
      var $214=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx200)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx200)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($210, 8018, ((5272868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$214,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 92; break;
    case 92: 
      var $215=$k;
      var $inc201=((($215)+(1))|0);
      $k=$inc201;
      label = 90; break;
    case 93: 
      var $216=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($216, 8019, ((5272348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 94; break;
    case 94: 
      var $217=$facet_addr;
      var $218=HEAP32[((((5248972)|0))>>2)];
      var $cmp204=(($217)|0)==(($218)|0);
      if ($cmp204) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $219=$oldtrace;
      HEAP32[((((5247040)|0))>>2)]=$219;
      label = 96; break;
    case 96: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setfacetplane["X"]=1;

function _qh_sethyperplane_det($dim, $rows, $point0, $toporient, $normal, $offset, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $rows_addr;
      var $point0_addr;
      var $toporient_addr;
      var $normal_addr;
      var $offset_addr;
      var $nearzero_addr;
      var $maxround;
      var $dist;
      var $i;
      var $point;
      $dim_addr=$dim;
      $rows_addr=$rows;
      $point0_addr=$point0;
      $toporient_addr=$toporient;
      $normal_addr=$normal;
      $offset_addr=$offset;
      $nearzero_addr=$nearzero;
      var $0=$dim_addr;
      var $cmp=(($0)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$rows_addr;
      var $arrayidx=(($1+4)|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      var $add_ptr=(($2+8)|0);
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=$rows_addr;
      var $arrayidx1=(($4)|0);
      var $5=HEAP32[(($arrayidx1)>>2)];
      var $add_ptr2=(($5+8)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($3)-($6);
      var $7=$normal_addr;
      var $arrayidx3=(($7)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($arrayidx3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=$rows_addr;
      var $arrayidx4=(($8)|0);
      var $9=HEAP32[(($arrayidx4)>>2)];
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$rows_addr;
      var $arrayidx5=(($11+4)|0);
      var $12=HEAP32[(($arrayidx5)>>2)];
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub6=($10)-($13);
      var $14=$normal_addr;
      var $arrayidx7=(($14+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub6,HEAP32[(($arrayidx7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $15=$normal_addr;
      var $16=$dim_addr;
      var $17=$toporient_addr;
      _qh_normalize2($15, $16, $17, 0, 0);
      var $18=$point0_addr;
      var $arrayidx8=(($18)|0);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=$normal_addr;
      var $arrayidx9=(($20)|0);
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($19)*($21);
      var $22=$point0_addr;
      var $arrayidx10=(($22+8)|0);
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $24=$normal_addr;
      var $arrayidx11=(($24+8)|0);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul12=($23)*($25);
      var $add=($mul)+($mul12);
      var $sub13=(-$add);
      var $26=$offset_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub13,HEAP32[(($26)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($26)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $27=$nearzero_addr;
      HEAP32[(($27)>>2)]=0;
      label = 26; break;
    case 4: 
      var $28=$dim_addr;
      var $cmp14=(($28)|0)==3;
      if ($cmp14) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $29=$rows_addr;
      var $arrayidx16=(($29+8)|0);
      var $30=HEAP32[(($arrayidx16)>>2)];
      var $add_ptr17=(($30+8)|0);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $32=$rows_addr;
      var $arrayidx18=(($32)|0);
      var $33=HEAP32[(($arrayidx18)>>2)];
      var $add_ptr19=(($33+8)|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub20=($31)-($34);
      var $35=$rows_addr;
      var $arrayidx21=(($35+4)|0);
      var $36=HEAP32[(($arrayidx21)>>2)];
      var $add_ptr22=(($36+16)|0);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $38=$rows_addr;
      var $arrayidx23=(($38)|0);
      var $39=HEAP32[(($arrayidx23)>>2)];
      var $add_ptr24=(($39+16)|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub25=($37)-($40);
      var $mul26=($sub20)*($sub25);
      var $41=$rows_addr;
      var $arrayidx27=(($41+8)|0);
      var $42=HEAP32[(($arrayidx27)>>2)];
      var $add_ptr28=(($42+16)|0);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr28)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr28)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $44=$rows_addr;
      var $arrayidx29=(($44)|0);
      var $45=HEAP32[(($arrayidx29)>>2)];
      var $add_ptr30=(($45+16)|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub31=($43)-($46);
      var $47=$rows_addr;
      var $arrayidx32=(($47+4)|0);
      var $48=HEAP32[(($arrayidx32)>>2)];
      var $add_ptr33=(($48+8)|0);
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr33)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr33)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $50=$rows_addr;
      var $arrayidx34=(($50)|0);
      var $51=HEAP32[(($arrayidx34)>>2)];
      var $add_ptr35=(($51+8)|0);
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub36=($49)-($52);
      var $mul37=($sub31)*($sub36);
      var $sub38=($mul26)-($mul37);
      var $53=$normal_addr;
      var $arrayidx39=(($53)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub38,HEAP32[(($arrayidx39)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx39)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $54=$rows_addr;
      var $arrayidx40=(($54+4)|0);
      var $55=HEAP32[(($arrayidx40)>>2)];
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($55)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($55)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $57=$rows_addr;
      var $arrayidx41=(($57)|0);
      var $58=HEAP32[(($arrayidx41)>>2)];
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($58)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($58)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub42=($56)-($59);
      var $60=$rows_addr;
      var $arrayidx43=(($60+8)|0);
      var $61=HEAP32[(($arrayidx43)>>2)];
      var $add_ptr44=(($61+16)|0);
      var $62=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr44)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr44)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $63=$rows_addr;
      var $arrayidx45=(($63)|0);
      var $64=HEAP32[(($arrayidx45)>>2)];
      var $add_ptr46=(($64+16)|0);
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr46)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr46)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub47=($62)-($65);
      var $mul48=($sub42)*($sub47);
      var $66=$rows_addr;
      var $arrayidx49=(($66+4)|0);
      var $67=HEAP32[(($arrayidx49)>>2)];
      var $add_ptr50=(($67+16)|0);
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $69=$rows_addr;
      var $arrayidx51=(($69)|0);
      var $70=HEAP32[(($arrayidx51)>>2)];
      var $add_ptr52=(($70+16)|0);
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr52)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr52)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub53=($68)-($71);
      var $72=$rows_addr;
      var $arrayidx54=(($72+8)|0);
      var $73=HEAP32[(($arrayidx54)>>2)];
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($73)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($73)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $75=$rows_addr;
      var $arrayidx55=(($75)|0);
      var $76=HEAP32[(($arrayidx55)>>2)];
      var $77=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($76)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($76)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub56=($74)-($77);
      var $mul57=($sub53)*($sub56);
      var $sub58=($mul48)-($mul57);
      var $78=$normal_addr;
      var $arrayidx59=(($78+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub58,HEAP32[(($arrayidx59)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx59)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $79=$rows_addr;
      var $arrayidx60=(($79+8)|0);
      var $80=HEAP32[(($arrayidx60)>>2)];
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($80)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($80)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $82=$rows_addr;
      var $arrayidx61=(($82)|0);
      var $83=HEAP32[(($arrayidx61)>>2)];
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($83)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($83)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub62=($81)-($84);
      var $85=$rows_addr;
      var $arrayidx63=(($85+4)|0);
      var $86=HEAP32[(($arrayidx63)>>2)];
      var $add_ptr64=(($86+8)|0);
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr64)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr64)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $88=$rows_addr;
      var $arrayidx65=(($88)|0);
      var $89=HEAP32[(($arrayidx65)>>2)];
      var $add_ptr66=(($89+8)|0);
      var $90=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr66)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr66)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub67=($87)-($90);
      var $mul68=($sub62)*($sub67);
      var $91=$rows_addr;
      var $arrayidx69=(($91+8)|0);
      var $92=HEAP32[(($arrayidx69)>>2)];
      var $add_ptr70=(($92+8)|0);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr70)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr70)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $94=$rows_addr;
      var $arrayidx71=(($94)|0);
      var $95=HEAP32[(($arrayidx71)>>2)];
      var $add_ptr72=(($95+8)|0);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr72)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr72)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub73=($93)-($96);
      var $97=$rows_addr;
      var $arrayidx74=(($97+4)|0);
      var $98=HEAP32[(($arrayidx74)>>2)];
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($98)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($98)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $100=$rows_addr;
      var $arrayidx75=(($100)|0);
      var $101=HEAP32[(($arrayidx75)>>2)];
      var $102=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($101)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($101)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub76=($99)-($102);
      var $mul77=($sub73)*($sub76);
      var $sub78=($mul68)-($mul77);
      var $103=$normal_addr;
      var $arrayidx79=(($103+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub78,HEAP32[(($arrayidx79)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx79)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $104=$normal_addr;
      var $105=$dim_addr;
      var $106=$toporient_addr;
      _qh_normalize2($104, $105, $106, 0, 0);
      var $107=$point0_addr;
      var $arrayidx80=(($107)|0);
      var $108=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx80)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx80)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $109=$normal_addr;
      var $arrayidx81=(($109)|0);
      var $110=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx81)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx81)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul82=($108)*($110);
      var $111=$point0_addr;
      var $arrayidx83=(($111+8)|0);
      var $112=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx83)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx83)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $113=$normal_addr;
      var $arrayidx84=(($113+8)|0);
      var $114=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul85=($112)*($114);
      var $add86=($mul82)+($mul85);
      var $115=$point0_addr;
      var $arrayidx87=(($115+16)|0);
      var $116=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx87)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx87)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $117=$normal_addr;
      var $arrayidx88=(($117+16)|0);
      var $118=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx88)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx88)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul89=($116)*($118);
      var $add90=($add86)+($mul89);
      var $sub91=(-$add90);
      var $119=$offset_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub91,HEAP32[(($119)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($119)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $120=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxround=$120;
      var $121=$dim_addr;
      $i=$121;
      label = 6; break;
    case 6: 
      var $122=$i;
      var $dec=((($122)-(1))|0);
      $i=$dec;
      var $tobool=(($122)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $123=$i;
      var $124=$rows_addr;
      var $arrayidx92=(($124+($123<<2))|0);
      var $125=HEAP32[(($arrayidx92)>>2)];
      $point=$125;
      var $126=$point;
      var $127=$point0_addr;
      var $cmp93=(($126)|0)!=(($127)|0);
      if ($cmp93) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $128=$offset_addr;
      var $129=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($128)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($128)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $130=$point;
      var $arrayidx95=(($130)|0);
      var $131=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx95)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx95)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $132=$normal_addr;
      var $arrayidx96=(($132)|0);
      var $133=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx96)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx96)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul97=($131)*($133);
      var $134=$point;
      var $arrayidx98=(($134+8)|0);
      var $135=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx98)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx98)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $136=$normal_addr;
      var $arrayidx99=(($136+8)|0);
      var $137=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx99)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx99)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul100=($135)*($137);
      var $add101=($mul97)+($mul100);
      var $138=$point;
      var $arrayidx102=(($138+16)|0);
      var $139=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx102)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx102)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $140=$normal_addr;
      var $arrayidx103=(($140+16)|0);
      var $141=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx103)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx103)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul104=($139)*($141);
      var $add105=($add101)+($mul104);
      var $add106=($129)+($add105);
      $dist=$add106;
      var $142=$dist;
      var $143=$maxround;
      var $cmp107=$142 > $143;
      if ($cmp107) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $144=$dist;
      var $145=$maxround;
      var $sub108=(-$145);
      var $cmp109=$144 < $sub108;
      if ($cmp109) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $146=$nearzero_addr;
      HEAP32[(($146)>>2)]=1;
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 6; break;
    case 13: 
      label = 25; break;
    case 14: 
      var $147=$dim_addr;
      var $cmp113=(($147)|0)==4;
      if ($cmp113) { label = 15; break; } else { label = 24; break; }
    case 15: 
      var $148=$rows_addr;
      var $arrayidx115=(($148+8)|0);
      var $149=HEAP32[(($arrayidx115)>>2)];
      var $add_ptr116=(($149+8)|0);
      var $150=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr116)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr116)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $151=$rows_addr;
      var $arrayidx117=(($151)|0);
      var $152=HEAP32[(($arrayidx117)>>2)];
      var $add_ptr118=(($152+8)|0);
      var $153=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr118)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr118)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub119=($150)-($153);
      var $154=$rows_addr;
      var $arrayidx120=(($154+4)|0);
      var $155=HEAP32[(($arrayidx120)>>2)];
      var $add_ptr121=(($155+16)|0);
      var $156=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr121)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr121)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $157=$rows_addr;
      var $arrayidx122=(($157)|0);
      var $158=HEAP32[(($arrayidx122)>>2)];
      var $add_ptr123=(($158+16)|0);
      var $159=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr123)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr123)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub124=($156)-($159);
      var $160=$rows_addr;
      var $arrayidx125=(($160+12)|0);
      var $161=HEAP32[(($arrayidx125)>>2)];
      var $add_ptr126=(($161+24)|0);
      var $162=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr126)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr126)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $163=$rows_addr;
      var $arrayidx127=(($163)|0);
      var $164=HEAP32[(($arrayidx127)>>2)];
      var $add_ptr128=(($164+24)|0);
      var $165=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr128)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr128)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub129=($162)-($165);
      var $mul130=($sub124)*($sub129);
      var $166=$rows_addr;
      var $arrayidx131=(($166+4)|0);
      var $167=HEAP32[(($arrayidx131)>>2)];
      var $add_ptr132=(($167+24)|0);
      var $168=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr132)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr132)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $169=$rows_addr;
      var $arrayidx133=(($169)|0);
      var $170=HEAP32[(($arrayidx133)>>2)];
      var $add_ptr134=(($170+24)|0);
      var $171=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr134)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr134)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub135=($168)-($171);
      var $172=$rows_addr;
      var $arrayidx136=(($172+12)|0);
      var $173=HEAP32[(($arrayidx136)>>2)];
      var $add_ptr137=(($173+16)|0);
      var $174=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr137)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr137)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $175=$rows_addr;
      var $arrayidx138=(($175)|0);
      var $176=HEAP32[(($arrayidx138)>>2)];
      var $add_ptr139=(($176+16)|0);
      var $177=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr139)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr139)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub140=($174)-($177);
      var $mul141=($sub135)*($sub140);
      var $sub142=($mul130)-($mul141);
      var $mul143=($sub119)*($sub142);
      var $178=$rows_addr;
      var $arrayidx144=(($178+4)|0);
      var $179=HEAP32[(($arrayidx144)>>2)];
      var $add_ptr145=(($179+8)|0);
      var $180=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr145)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr145)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $181=$rows_addr;
      var $arrayidx146=(($181)|0);
      var $182=HEAP32[(($arrayidx146)>>2)];
      var $add_ptr147=(($182+8)|0);
      var $183=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr147)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr147)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub148=($180)-($183);
      var $184=$rows_addr;
      var $arrayidx149=(($184+8)|0);
      var $185=HEAP32[(($arrayidx149)>>2)];
      var $add_ptr150=(($185+16)|0);
      var $186=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr150)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr150)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $187=$rows_addr;
      var $arrayidx151=(($187)|0);
      var $188=HEAP32[(($arrayidx151)>>2)];
      var $add_ptr152=(($188+16)|0);
      var $189=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr152)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr152)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub153=($186)-($189);
      var $190=$rows_addr;
      var $arrayidx154=(($190+12)|0);
      var $191=HEAP32[(($arrayidx154)>>2)];
      var $add_ptr155=(($191+24)|0);
      var $192=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr155)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr155)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $193=$rows_addr;
      var $arrayidx156=(($193)|0);
      var $194=HEAP32[(($arrayidx156)>>2)];
      var $add_ptr157=(($194+24)|0);
      var $195=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr157)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr157)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub158=($192)-($195);
      var $mul159=($sub153)*($sub158);
      var $196=$rows_addr;
      var $arrayidx160=(($196+8)|0);
      var $197=HEAP32[(($arrayidx160)>>2)];
      var $add_ptr161=(($197+24)|0);
      var $198=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr161)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr161)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $199=$rows_addr;
      var $arrayidx162=(($199)|0);
      var $200=HEAP32[(($arrayidx162)>>2)];
      var $add_ptr163=(($200+24)|0);
      var $201=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr163)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr163)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub164=($198)-($201);
      var $202=$rows_addr;
      var $arrayidx165=(($202+12)|0);
      var $203=HEAP32[(($arrayidx165)>>2)];
      var $add_ptr166=(($203+16)|0);
      var $204=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr166)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr166)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $205=$rows_addr;
      var $arrayidx167=(($205)|0);
      var $206=HEAP32[(($arrayidx167)>>2)];
      var $add_ptr168=(($206+16)|0);
      var $207=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr168)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr168)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub169=($204)-($207);
      var $mul170=($sub164)*($sub169);
      var $sub171=($mul159)-($mul170);
      var $mul172=($sub148)*($sub171);
      var $sub173=($mul143)-($mul172);
      var $208=$rows_addr;
      var $arrayidx174=(($208+12)|0);
      var $209=HEAP32[(($arrayidx174)>>2)];
      var $add_ptr175=(($209+8)|0);
      var $210=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr175)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr175)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $211=$rows_addr;
      var $arrayidx176=(($211)|0);
      var $212=HEAP32[(($arrayidx176)>>2)];
      var $add_ptr177=(($212+8)|0);
      var $213=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr177)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr177)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub178=($210)-($213);
      var $214=$rows_addr;
      var $arrayidx179=(($214+8)|0);
      var $215=HEAP32[(($arrayidx179)>>2)];
      var $add_ptr180=(($215+16)|0);
      var $216=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr180)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr180)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $217=$rows_addr;
      var $arrayidx181=(($217)|0);
      var $218=HEAP32[(($arrayidx181)>>2)];
      var $add_ptr182=(($218+16)|0);
      var $219=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr182)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr182)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub183=($216)-($219);
      var $220=$rows_addr;
      var $arrayidx184=(($220+4)|0);
      var $221=HEAP32[(($arrayidx184)>>2)];
      var $add_ptr185=(($221+24)|0);
      var $222=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr185)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr185)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $223=$rows_addr;
      var $arrayidx186=(($223)|0);
      var $224=HEAP32[(($arrayidx186)>>2)];
      var $add_ptr187=(($224+24)|0);
      var $225=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr187)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr187)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub188=($222)-($225);
      var $mul189=($sub183)*($sub188);
      var $226=$rows_addr;
      var $arrayidx190=(($226+8)|0);
      var $227=HEAP32[(($arrayidx190)>>2)];
      var $add_ptr191=(($227+24)|0);
      var $228=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr191)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr191)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $229=$rows_addr;
      var $arrayidx192=(($229)|0);
      var $230=HEAP32[(($arrayidx192)>>2)];
      var $add_ptr193=(($230+24)|0);
      var $231=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr193)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr193)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub194=($228)-($231);
      var $232=$rows_addr;
      var $arrayidx195=(($232+4)|0);
      var $233=HEAP32[(($arrayidx195)>>2)];
      var $add_ptr196=(($233+16)|0);
      var $234=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr196)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr196)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $235=$rows_addr;
      var $arrayidx197=(($235)|0);
      var $236=HEAP32[(($arrayidx197)>>2)];
      var $add_ptr198=(($236+16)|0);
      var $237=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr198)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr198)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub199=($234)-($237);
      var $mul200=($sub194)*($sub199);
      var $sub201=($mul189)-($mul200);
      var $mul202=($sub178)*($sub201);
      var $add203=($sub173)+($mul202);
      var $sub204=(-$add203);
      var $238=$normal_addr;
      var $arrayidx205=(($238)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub204,HEAP32[(($arrayidx205)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx205)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $239=$rows_addr;
      var $arrayidx206=(($239+8)|0);
      var $240=HEAP32[(($arrayidx206)>>2)];
      var $241=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($240)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($240)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $242=$rows_addr;
      var $arrayidx207=(($242)|0);
      var $243=HEAP32[(($arrayidx207)>>2)];
      var $244=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($243)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($243)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub208=($241)-($244);
      var $245=$rows_addr;
      var $arrayidx209=(($245+4)|0);
      var $246=HEAP32[(($arrayidx209)>>2)];
      var $add_ptr210=(($246+16)|0);
      var $247=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr210)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr210)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $248=$rows_addr;
      var $arrayidx211=(($248)|0);
      var $249=HEAP32[(($arrayidx211)>>2)];
      var $add_ptr212=(($249+16)|0);
      var $250=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr212)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr212)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub213=($247)-($250);
      var $251=$rows_addr;
      var $arrayidx214=(($251+12)|0);
      var $252=HEAP32[(($arrayidx214)>>2)];
      var $add_ptr215=(($252+24)|0);
      var $253=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr215)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr215)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $254=$rows_addr;
      var $arrayidx216=(($254)|0);
      var $255=HEAP32[(($arrayidx216)>>2)];
      var $add_ptr217=(($255+24)|0);
      var $256=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr217)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr217)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub218=($253)-($256);
      var $mul219=($sub213)*($sub218);
      var $257=$rows_addr;
      var $arrayidx220=(($257+4)|0);
      var $258=HEAP32[(($arrayidx220)>>2)];
      var $add_ptr221=(($258+24)|0);
      var $259=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr221)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr221)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $260=$rows_addr;
      var $arrayidx222=(($260)|0);
      var $261=HEAP32[(($arrayidx222)>>2)];
      var $add_ptr223=(($261+24)|0);
      var $262=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr223)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr223)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub224=($259)-($262);
      var $263=$rows_addr;
      var $arrayidx225=(($263+12)|0);
      var $264=HEAP32[(($arrayidx225)>>2)];
      var $add_ptr226=(($264+16)|0);
      var $265=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr226)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr226)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $266=$rows_addr;
      var $arrayidx227=(($266)|0);
      var $267=HEAP32[(($arrayidx227)>>2)];
      var $add_ptr228=(($267+16)|0);
      var $268=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr228)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr228)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub229=($265)-($268);
      var $mul230=($sub224)*($sub229);
      var $sub231=($mul219)-($mul230);
      var $mul232=($sub208)*($sub231);
      var $269=$rows_addr;
      var $arrayidx233=(($269+4)|0);
      var $270=HEAP32[(($arrayidx233)>>2)];
      var $271=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($270)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($270)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $272=$rows_addr;
      var $arrayidx234=(($272)|0);
      var $273=HEAP32[(($arrayidx234)>>2)];
      var $274=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($273)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($273)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub235=($271)-($274);
      var $275=$rows_addr;
      var $arrayidx236=(($275+8)|0);
      var $276=HEAP32[(($arrayidx236)>>2)];
      var $add_ptr237=(($276+16)|0);
      var $277=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr237)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr237)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $278=$rows_addr;
      var $arrayidx238=(($278)|0);
      var $279=HEAP32[(($arrayidx238)>>2)];
      var $add_ptr239=(($279+16)|0);
      var $280=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr239)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr239)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub240=($277)-($280);
      var $281=$rows_addr;
      var $arrayidx241=(($281+12)|0);
      var $282=HEAP32[(($arrayidx241)>>2)];
      var $add_ptr242=(($282+24)|0);
      var $283=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr242)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr242)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $284=$rows_addr;
      var $arrayidx243=(($284)|0);
      var $285=HEAP32[(($arrayidx243)>>2)];
      var $add_ptr244=(($285+24)|0);
      var $286=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr244)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr244)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub245=($283)-($286);
      var $mul246=($sub240)*($sub245);
      var $287=$rows_addr;
      var $arrayidx247=(($287+8)|0);
      var $288=HEAP32[(($arrayidx247)>>2)];
      var $add_ptr248=(($288+24)|0);
      var $289=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr248)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr248)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $290=$rows_addr;
      var $arrayidx249=(($290)|0);
      var $291=HEAP32[(($arrayidx249)>>2)];
      var $add_ptr250=(($291+24)|0);
      var $292=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr250)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr250)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub251=($289)-($292);
      var $293=$rows_addr;
      var $arrayidx252=(($293+12)|0);
      var $294=HEAP32[(($arrayidx252)>>2)];
      var $add_ptr253=(($294+16)|0);
      var $295=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr253)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr253)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $296=$rows_addr;
      var $arrayidx254=(($296)|0);
      var $297=HEAP32[(($arrayidx254)>>2)];
      var $add_ptr255=(($297+16)|0);
      var $298=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr255)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr255)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub256=($295)-($298);
      var $mul257=($sub251)*($sub256);
      var $sub258=($mul246)-($mul257);
      var $mul259=($sub235)*($sub258);
      var $sub260=($mul232)-($mul259);
      var $299=$rows_addr;
      var $arrayidx261=(($299+12)|0);
      var $300=HEAP32[(($arrayidx261)>>2)];
      var $301=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($300)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($300)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $302=$rows_addr;
      var $arrayidx262=(($302)|0);
      var $303=HEAP32[(($arrayidx262)>>2)];
      var $304=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($303)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($303)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub263=($301)-($304);
      var $305=$rows_addr;
      var $arrayidx264=(($305+8)|0);
      var $306=HEAP32[(($arrayidx264)>>2)];
      var $add_ptr265=(($306+16)|0);
      var $307=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr265)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr265)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $308=$rows_addr;
      var $arrayidx266=(($308)|0);
      var $309=HEAP32[(($arrayidx266)>>2)];
      var $add_ptr267=(($309+16)|0);
      var $310=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr267)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr267)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub268=($307)-($310);
      var $311=$rows_addr;
      var $arrayidx269=(($311+4)|0);
      var $312=HEAP32[(($arrayidx269)>>2)];
      var $add_ptr270=(($312+24)|0);
      var $313=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr270)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr270)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $314=$rows_addr;
      var $arrayidx271=(($314)|0);
      var $315=HEAP32[(($arrayidx271)>>2)];
      var $add_ptr272=(($315+24)|0);
      var $316=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr272)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr272)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub273=($313)-($316);
      var $mul274=($sub268)*($sub273);
      var $317=$rows_addr;
      var $arrayidx275=(($317+8)|0);
      var $318=HEAP32[(($arrayidx275)>>2)];
      var $add_ptr276=(($318+24)|0);
      var $319=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr276)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr276)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $320=$rows_addr;
      var $arrayidx277=(($320)|0);
      var $321=HEAP32[(($arrayidx277)>>2)];
      var $add_ptr278=(($321+24)|0);
      var $322=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr278)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr278)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub279=($319)-($322);
      var $323=$rows_addr;
      var $arrayidx280=(($323+4)|0);
      var $324=HEAP32[(($arrayidx280)>>2)];
      var $add_ptr281=(($324+16)|0);
      var $325=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr281)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr281)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $326=$rows_addr;
      var $arrayidx282=(($326)|0);
      var $327=HEAP32[(($arrayidx282)>>2)];
      var $add_ptr283=(($327+16)|0);
      var $328=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr283)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr283)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub284=($325)-($328);
      var $mul285=($sub279)*($sub284);
      var $sub286=($mul274)-($mul285);
      var $mul287=($sub263)*($sub286);
      var $add288=($sub260)+($mul287);
      var $329=$normal_addr;
      var $arrayidx289=(($329+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$add288,HEAP32[(($arrayidx289)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx289)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $330=$rows_addr;
      var $arrayidx290=(($330+8)|0);
      var $331=HEAP32[(($arrayidx290)>>2)];
      var $332=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($331)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($331)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $333=$rows_addr;
      var $arrayidx291=(($333)|0);
      var $334=HEAP32[(($arrayidx291)>>2)];
      var $335=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($334)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($334)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub292=($332)-($335);
      var $336=$rows_addr;
      var $arrayidx293=(($336+4)|0);
      var $337=HEAP32[(($arrayidx293)>>2)];
      var $add_ptr294=(($337+8)|0);
      var $338=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr294)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr294)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $339=$rows_addr;
      var $arrayidx295=(($339)|0);
      var $340=HEAP32[(($arrayidx295)>>2)];
      var $add_ptr296=(($340+8)|0);
      var $341=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr296)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr296)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub297=($338)-($341);
      var $342=$rows_addr;
      var $arrayidx298=(($342+12)|0);
      var $343=HEAP32[(($arrayidx298)>>2)];
      var $add_ptr299=(($343+24)|0);
      var $344=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr299)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr299)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $345=$rows_addr;
      var $arrayidx300=(($345)|0);
      var $346=HEAP32[(($arrayidx300)>>2)];
      var $add_ptr301=(($346+24)|0);
      var $347=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr301)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr301)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub302=($344)-($347);
      var $mul303=($sub297)*($sub302);
      var $348=$rows_addr;
      var $arrayidx304=(($348+4)|0);
      var $349=HEAP32[(($arrayidx304)>>2)];
      var $add_ptr305=(($349+24)|0);
      var $350=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr305)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr305)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $351=$rows_addr;
      var $arrayidx306=(($351)|0);
      var $352=HEAP32[(($arrayidx306)>>2)];
      var $add_ptr307=(($352+24)|0);
      var $353=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr307)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr307)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub308=($350)-($353);
      var $354=$rows_addr;
      var $arrayidx309=(($354+12)|0);
      var $355=HEAP32[(($arrayidx309)>>2)];
      var $add_ptr310=(($355+8)|0);
      var $356=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr310)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr310)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $357=$rows_addr;
      var $arrayidx311=(($357)|0);
      var $358=HEAP32[(($arrayidx311)>>2)];
      var $add_ptr312=(($358+8)|0);
      var $359=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr312)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr312)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub313=($356)-($359);
      var $mul314=($sub308)*($sub313);
      var $sub315=($mul303)-($mul314);
      var $mul316=($sub292)*($sub315);
      var $360=$rows_addr;
      var $arrayidx317=(($360+4)|0);
      var $361=HEAP32[(($arrayidx317)>>2)];
      var $362=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($361)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($361)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $363=$rows_addr;
      var $arrayidx318=(($363)|0);
      var $364=HEAP32[(($arrayidx318)>>2)];
      var $365=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($364)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($364)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub319=($362)-($365);
      var $366=$rows_addr;
      var $arrayidx320=(($366+8)|0);
      var $367=HEAP32[(($arrayidx320)>>2)];
      var $add_ptr321=(($367+8)|0);
      var $368=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr321)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr321)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $369=$rows_addr;
      var $arrayidx322=(($369)|0);
      var $370=HEAP32[(($arrayidx322)>>2)];
      var $add_ptr323=(($370+8)|0);
      var $371=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr323)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr323)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub324=($368)-($371);
      var $372=$rows_addr;
      var $arrayidx325=(($372+12)|0);
      var $373=HEAP32[(($arrayidx325)>>2)];
      var $add_ptr326=(($373+24)|0);
      var $374=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr326)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr326)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $375=$rows_addr;
      var $arrayidx327=(($375)|0);
      var $376=HEAP32[(($arrayidx327)>>2)];
      var $add_ptr328=(($376+24)|0);
      var $377=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr328)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr328)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub329=($374)-($377);
      var $mul330=($sub324)*($sub329);
      var $378=$rows_addr;
      var $arrayidx331=(($378+8)|0);
      var $379=HEAP32[(($arrayidx331)>>2)];
      var $add_ptr332=(($379+24)|0);
      var $380=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr332)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr332)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $381=$rows_addr;
      var $arrayidx333=(($381)|0);
      var $382=HEAP32[(($arrayidx333)>>2)];
      var $add_ptr334=(($382+24)|0);
      var $383=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr334)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr334)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub335=($380)-($383);
      var $384=$rows_addr;
      var $arrayidx336=(($384+12)|0);
      var $385=HEAP32[(($arrayidx336)>>2)];
      var $add_ptr337=(($385+8)|0);
      var $386=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr337)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr337)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $387=$rows_addr;
      var $arrayidx338=(($387)|0);
      var $388=HEAP32[(($arrayidx338)>>2)];
      var $add_ptr339=(($388+8)|0);
      var $389=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr339)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr339)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub340=($386)-($389);
      var $mul341=($sub335)*($sub340);
      var $sub342=($mul330)-($mul341);
      var $mul343=($sub319)*($sub342);
      var $sub344=($mul316)-($mul343);
      var $390=$rows_addr;
      var $arrayidx345=(($390+12)|0);
      var $391=HEAP32[(($arrayidx345)>>2)];
      var $392=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($391)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($391)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $393=$rows_addr;
      var $arrayidx346=(($393)|0);
      var $394=HEAP32[(($arrayidx346)>>2)];
      var $395=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($394)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($394)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub347=($392)-($395);
      var $396=$rows_addr;
      var $arrayidx348=(($396+8)|0);
      var $397=HEAP32[(($arrayidx348)>>2)];
      var $add_ptr349=(($397+8)|0);
      var $398=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr349)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr349)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $399=$rows_addr;
      var $arrayidx350=(($399)|0);
      var $400=HEAP32[(($arrayidx350)>>2)];
      var $add_ptr351=(($400+8)|0);
      var $401=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr351)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr351)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub352=($398)-($401);
      var $402=$rows_addr;
      var $arrayidx353=(($402+4)|0);
      var $403=HEAP32[(($arrayidx353)>>2)];
      var $add_ptr354=(($403+24)|0);
      var $404=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr354)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr354)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $405=$rows_addr;
      var $arrayidx355=(($405)|0);
      var $406=HEAP32[(($arrayidx355)>>2)];
      var $add_ptr356=(($406+24)|0);
      var $407=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr356)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr356)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub357=($404)-($407);
      var $mul358=($sub352)*($sub357);
      var $408=$rows_addr;
      var $arrayidx359=(($408+8)|0);
      var $409=HEAP32[(($arrayidx359)>>2)];
      var $add_ptr360=(($409+24)|0);
      var $410=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr360)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr360)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $411=$rows_addr;
      var $arrayidx361=(($411)|0);
      var $412=HEAP32[(($arrayidx361)>>2)];
      var $add_ptr362=(($412+24)|0);
      var $413=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr362)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr362)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub363=($410)-($413);
      var $414=$rows_addr;
      var $arrayidx364=(($414+4)|0);
      var $415=HEAP32[(($arrayidx364)>>2)];
      var $add_ptr365=(($415+8)|0);
      var $416=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr365)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr365)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $417=$rows_addr;
      var $arrayidx366=(($417)|0);
      var $418=HEAP32[(($arrayidx366)>>2)];
      var $add_ptr367=(($418+8)|0);
      var $419=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr367)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr367)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub368=($416)-($419);
      var $mul369=($sub363)*($sub368);
      var $sub370=($mul358)-($mul369);
      var $mul371=($sub347)*($sub370);
      var $add372=($sub344)+($mul371);
      var $sub373=(-$add372);
      var $420=$normal_addr;
      var $arrayidx374=(($420+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub373,HEAP32[(($arrayidx374)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx374)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $421=$rows_addr;
      var $arrayidx375=(($421+8)|0);
      var $422=HEAP32[(($arrayidx375)>>2)];
      var $423=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($422)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($422)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $424=$rows_addr;
      var $arrayidx376=(($424)|0);
      var $425=HEAP32[(($arrayidx376)>>2)];
      var $426=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($425)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($425)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub377=($423)-($426);
      var $427=$rows_addr;
      var $arrayidx378=(($427+4)|0);
      var $428=HEAP32[(($arrayidx378)>>2)];
      var $add_ptr379=(($428+8)|0);
      var $429=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr379)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr379)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $430=$rows_addr;
      var $arrayidx380=(($430)|0);
      var $431=HEAP32[(($arrayidx380)>>2)];
      var $add_ptr381=(($431+8)|0);
      var $432=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr381)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr381)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub382=($429)-($432);
      var $433=$rows_addr;
      var $arrayidx383=(($433+12)|0);
      var $434=HEAP32[(($arrayidx383)>>2)];
      var $add_ptr384=(($434+16)|0);
      var $435=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr384)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr384)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $436=$rows_addr;
      var $arrayidx385=(($436)|0);
      var $437=HEAP32[(($arrayidx385)>>2)];
      var $add_ptr386=(($437+16)|0);
      var $438=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr386)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr386)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub387=($435)-($438);
      var $mul388=($sub382)*($sub387);
      var $439=$rows_addr;
      var $arrayidx389=(($439+4)|0);
      var $440=HEAP32[(($arrayidx389)>>2)];
      var $add_ptr390=(($440+16)|0);
      var $441=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr390)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr390)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $442=$rows_addr;
      var $arrayidx391=(($442)|0);
      var $443=HEAP32[(($arrayidx391)>>2)];
      var $add_ptr392=(($443+16)|0);
      var $444=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr392)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr392)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub393=($441)-($444);
      var $445=$rows_addr;
      var $arrayidx394=(($445+12)|0);
      var $446=HEAP32[(($arrayidx394)>>2)];
      var $add_ptr395=(($446+8)|0);
      var $447=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr395)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr395)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $448=$rows_addr;
      var $arrayidx396=(($448)|0);
      var $449=HEAP32[(($arrayidx396)>>2)];
      var $add_ptr397=(($449+8)|0);
      var $450=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr397)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr397)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub398=($447)-($450);
      var $mul399=($sub393)*($sub398);
      var $sub400=($mul388)-($mul399);
      var $mul401=($sub377)*($sub400);
      var $451=$rows_addr;
      var $arrayidx402=(($451+4)|0);
      var $452=HEAP32[(($arrayidx402)>>2)];
      var $453=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($452)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($452)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $454=$rows_addr;
      var $arrayidx403=(($454)|0);
      var $455=HEAP32[(($arrayidx403)>>2)];
      var $456=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($455)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($455)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub404=($453)-($456);
      var $457=$rows_addr;
      var $arrayidx405=(($457+8)|0);
      var $458=HEAP32[(($arrayidx405)>>2)];
      var $add_ptr406=(($458+8)|0);
      var $459=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr406)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr406)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $460=$rows_addr;
      var $arrayidx407=(($460)|0);
      var $461=HEAP32[(($arrayidx407)>>2)];
      var $add_ptr408=(($461+8)|0);
      var $462=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr408)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr408)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub409=($459)-($462);
      var $463=$rows_addr;
      var $arrayidx410=(($463+12)|0);
      var $464=HEAP32[(($arrayidx410)>>2)];
      var $add_ptr411=(($464+16)|0);
      var $465=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr411)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr411)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $466=$rows_addr;
      var $arrayidx412=(($466)|0);
      var $467=HEAP32[(($arrayidx412)>>2)];
      var $add_ptr413=(($467+16)|0);
      var $468=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr413)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr413)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub414=($465)-($468);
      var $mul415=($sub409)*($sub414);
      var $469=$rows_addr;
      var $arrayidx416=(($469+8)|0);
      var $470=HEAP32[(($arrayidx416)>>2)];
      var $add_ptr417=(($470+16)|0);
      var $471=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr417)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr417)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $472=$rows_addr;
      var $arrayidx418=(($472)|0);
      var $473=HEAP32[(($arrayidx418)>>2)];
      var $add_ptr419=(($473+16)|0);
      var $474=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr419)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr419)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub420=($471)-($474);
      var $475=$rows_addr;
      var $arrayidx421=(($475+12)|0);
      var $476=HEAP32[(($arrayidx421)>>2)];
      var $add_ptr422=(($476+8)|0);
      var $477=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr422)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr422)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $478=$rows_addr;
      var $arrayidx423=(($478)|0);
      var $479=HEAP32[(($arrayidx423)>>2)];
      var $add_ptr424=(($479+8)|0);
      var $480=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr424)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr424)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub425=($477)-($480);
      var $mul426=($sub420)*($sub425);
      var $sub427=($mul415)-($mul426);
      var $mul428=($sub404)*($sub427);
      var $sub429=($mul401)-($mul428);
      var $481=$rows_addr;
      var $arrayidx430=(($481+12)|0);
      var $482=HEAP32[(($arrayidx430)>>2)];
      var $483=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($482)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($482)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $484=$rows_addr;
      var $arrayidx431=(($484)|0);
      var $485=HEAP32[(($arrayidx431)>>2)];
      var $486=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($485)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($485)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub432=($483)-($486);
      var $487=$rows_addr;
      var $arrayidx433=(($487+8)|0);
      var $488=HEAP32[(($arrayidx433)>>2)];
      var $add_ptr434=(($488+8)|0);
      var $489=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr434)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr434)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $490=$rows_addr;
      var $arrayidx435=(($490)|0);
      var $491=HEAP32[(($arrayidx435)>>2)];
      var $add_ptr436=(($491+8)|0);
      var $492=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr436)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr436)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub437=($489)-($492);
      var $493=$rows_addr;
      var $arrayidx438=(($493+4)|0);
      var $494=HEAP32[(($arrayidx438)>>2)];
      var $add_ptr439=(($494+16)|0);
      var $495=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr439)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr439)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $496=$rows_addr;
      var $arrayidx440=(($496)|0);
      var $497=HEAP32[(($arrayidx440)>>2)];
      var $add_ptr441=(($497+16)|0);
      var $498=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr441)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr441)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub442=($495)-($498);
      var $mul443=($sub437)*($sub442);
      var $499=$rows_addr;
      var $arrayidx444=(($499+8)|0);
      var $500=HEAP32[(($arrayidx444)>>2)];
      var $add_ptr445=(($500+16)|0);
      var $501=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr445)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr445)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $502=$rows_addr;
      var $arrayidx446=(($502)|0);
      var $503=HEAP32[(($arrayidx446)>>2)];
      var $add_ptr447=(($503+16)|0);
      var $504=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr447)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr447)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub448=($501)-($504);
      var $505=$rows_addr;
      var $arrayidx449=(($505+4)|0);
      var $506=HEAP32[(($arrayidx449)>>2)];
      var $add_ptr450=(($506+8)|0);
      var $507=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr450)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr450)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $508=$rows_addr;
      var $arrayidx451=(($508)|0);
      var $509=HEAP32[(($arrayidx451)>>2)];
      var $add_ptr452=(($509+8)|0);
      var $510=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($add_ptr452)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($add_ptr452)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub453=($507)-($510);
      var $mul454=($sub448)*($sub453);
      var $sub455=($mul443)-($mul454);
      var $mul456=($sub432)*($sub455);
      var $add457=($sub429)+($mul456);
      var $511=$normal_addr;
      var $arrayidx458=(($511+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$add457,HEAP32[(($arrayidx458)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx458)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $512=$normal_addr;
      var $513=$dim_addr;
      var $514=$toporient_addr;
      _qh_normalize2($512, $513, $514, 0, 0);
      var $515=$point0_addr;
      var $arrayidx459=(($515)|0);
      var $516=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx459)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx459)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $517=$normal_addr;
      var $arrayidx460=(($517)|0);
      var $518=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx460)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx460)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul461=($516)*($518);
      var $519=$point0_addr;
      var $arrayidx462=(($519+8)|0);
      var $520=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx462)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx462)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $521=$normal_addr;
      var $arrayidx463=(($521+8)|0);
      var $522=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx463)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx463)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul464=($520)*($522);
      var $add465=($mul461)+($mul464);
      var $523=$point0_addr;
      var $arrayidx466=(($523+16)|0);
      var $524=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx466)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx466)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $525=$normal_addr;
      var $arrayidx467=(($525+16)|0);
      var $526=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx467)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx467)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul468=($524)*($526);
      var $add469=($add465)+($mul468);
      var $527=$point0_addr;
      var $arrayidx470=(($527+24)|0);
      var $528=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx470)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx470)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $529=$normal_addr;
      var $arrayidx471=(($529+24)|0);
      var $530=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx471)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx471)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul472=($528)*($530);
      var $add473=($add469)+($mul472);
      var $sub474=(-$add473);
      var $531=$offset_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub474,HEAP32[(($531)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($531)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $532=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxround=$532;
      var $533=$dim_addr;
      $i=$533;
      label = 16; break;
    case 16: 
      var $534=$i;
      var $dec476=((($534)-(1))|0);
      $i=$dec476;
      var $tobool477=(($534)|0)!=0;
      if ($tobool477) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $535=$i;
      var $536=$rows_addr;
      var $arrayidx479=(($536+($535<<2))|0);
      var $537=HEAP32[(($arrayidx479)>>2)];
      $point=$537;
      var $538=$point;
      var $539=$point0_addr;
      var $cmp480=(($538)|0)!=(($539)|0);
      if ($cmp480) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $540=$offset_addr;
      var $541=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($540)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($540)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $542=$point;
      var $arrayidx482=(($542)|0);
      var $543=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx482)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx482)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $544=$normal_addr;
      var $arrayidx483=(($544)|0);
      var $545=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx483)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx483)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul484=($543)*($545);
      var $546=$point;
      var $arrayidx485=(($546+8)|0);
      var $547=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx485)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx485)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $548=$normal_addr;
      var $arrayidx486=(($548+8)|0);
      var $549=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx486)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx486)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul487=($547)*($549);
      var $add488=($mul484)+($mul487);
      var $550=$point;
      var $arrayidx489=(($550+16)|0);
      var $551=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx489)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx489)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $552=$normal_addr;
      var $arrayidx490=(($552+16)|0);
      var $553=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx490)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx490)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul491=($551)*($553);
      var $add492=($add488)+($mul491);
      var $554=$point;
      var $arrayidx493=(($554+24)|0);
      var $555=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx493)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx493)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $556=$normal_addr;
      var $arrayidx494=(($556+24)|0);
      var $557=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx494)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx494)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul495=($555)*($557);
      var $add496=($add492)+($mul495);
      var $add497=($541)+($add496);
      $dist=$add497;
      var $558=$dist;
      var $559=$maxround;
      var $cmp498=$558 > $559;
      if ($cmp498) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $560=$dist;
      var $561=$maxround;
      var $sub500=(-$561);
      var $cmp501=$560 < $sub500;
      if ($cmp501) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $562=$nearzero_addr;
      HEAP32[(($562)>>2)]=1;
      label = 23; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 16; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $563=$nearzero_addr;
      var $564=HEAP32[(($563)>>2)];
      var $tobool509=(($564)|0)!=0;
      if ($tobool509) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $565=HEAP32[(((((5244068)|0)))>>2)];
      var $inc=((($565)+(1))|0);
      HEAP32[(((((5244068)|0)))>>2)]=$inc;
      var $566=HEAP32[((((5247040)|0))>>2)];
      var $tobool511=(($566)|0)!=0;
      if ($tobool511) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $567=HEAP32[((((5248924)|0))>>2)];
      var $568=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($567, 3, ((5271620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$568,tempInt));
      label = 29; break;
    case 29: 
      var $569=HEAP32[(((((5244084)|0)))>>2)];
      var $inc514=((($569)+(1))|0);
      HEAP32[(((((5244084)|0)))>>2)]=$inc514;
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_sethyperplane_det["X"]=1;

function _qh_crossproduct($dim, $vecA, $vecB, $vecC) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $vecA_addr;
      var $vecB_addr;
      var $vecC_addr;
      $dim_addr=$dim;
      $vecA_addr=$vecA;
      $vecB_addr=$vecB;
      $vecC_addr=$vecC;
      var $0=$dim_addr;
      var $cmp=(($0)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$vecA_addr;
      var $arrayidx=(($1+8)|0);
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3=$vecB_addr;
      var $arrayidx1=(($3+16)|0);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($2)*($4);
      var $5=$vecA_addr;
      var $arrayidx2=(($5+16)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$vecB_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul4=($6)*($8);
      var $sub=($mul)-($mul4);
      var $9=$vecC_addr;
      var $arrayidx5=(($9)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($arrayidx5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $10=$vecA_addr;
      var $arrayidx6=(($10)|0);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $12=$vecB_addr;
      var $arrayidx7=(($12+16)|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul8=($11)*($13);
      var $14=$vecA_addr;
      var $arrayidx9=(($14+16)|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=$vecB_addr;
      var $arrayidx10=(($16)|0);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul11=($15)*($17);
      var $sub12=($mul8)-($mul11);
      var $sub13=(-$sub12);
      var $18=$vecC_addr;
      var $arrayidx14=(($18+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub13,HEAP32[(($arrayidx14)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx14)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $19=$vecA_addr;
      var $arrayidx15=(($19)|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=$vecB_addr;
      var $arrayidx16=(($21+8)|0);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul17=($20)*($22);
      var $23=$vecA_addr;
      var $arrayidx18=(($23+8)|0);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=$vecB_addr;
      var $arrayidx19=(($25)|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul20=($24)*($26);
      var $sub21=($mul17)-($mul20);
      var $27=$vecC_addr;
      var $arrayidx22=(($27+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub21,HEAP32[(($arrayidx22)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx22)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_crossproduct["X"]=1;

function _qh_sethyperplane_gauss($dim, $rows, $point0, $toporient, $normal, $offset, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $rows_addr;
      var $point0_addr;
      var $toporient_addr;
      var $normal_addr;
      var $offset_addr;
      var $nearzero_addr;
      var $pointcoord;
      var $normalcoef;
      var $k;
      var $sign=__stackBase__;
      var $nearzero2=(__stackBase__)+(4);
      $dim_addr=$dim;
      $rows_addr=$rows;
      $point0_addr=$point0;
      $toporient_addr=$toporient;
      $normal_addr=$normal;
      $offset_addr=$offset;
      $nearzero_addr=$nearzero;
      var $0=$toporient_addr;
      HEAP32[(($sign)>>2)]=$0;
      HEAP32[(($nearzero2)>>2)]=0;
      var $1=$rows_addr;
      var $2=$dim_addr;
      var $sub=((($2)-(1))|0);
      var $3=$dim_addr;
      var $4=$nearzero_addr;
      _qh_gausselim($1, $sub, $3, $sign, $4);
      var $5=$dim_addr;
      var $sub1=((($5)-(1))|0);
      $k=$sub1;
      label = 3; break;
    case 3: 
      var $6=$k;
      var $dec=((($6)-(1))|0);
      $k=$dec;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $7=$k;
      var $8=$k;
      var $9=$rows_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $arrayidx2=(($10+($7<<3))|0);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$11 < 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=HEAP32[(($sign)>>2)];
      var $xor=$12 ^ 1;
      HEAP32[(($sign)>>2)]=$xor;
      label = 6; break;
    case 6: 
      label = 3; break;
    case 7: 
      var $13=$nearzero_addr;
      var $14=HEAP32[(($13)>>2)];
      var $tobool3=(($14)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $15=HEAP32[(((((5244084)|0)))>>2)];
      var $inc=((($15)+(1))|0);
      HEAP32[(((((5244084)|0)))>>2)]=$inc;
      var $16=HEAP32[((((5247040)|0))>>2)];
      var $tobool5=(($16)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=HEAP32[((((5248924)|0))>>2)];
      var $18=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($17, 4, ((5270968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,tempInt));
      label = 10; break;
    case 10: 
      var $19=$rows_addr;
      var $20=$dim_addr;
      var $sub8=((($20)-(1))|0);
      var $21=$dim_addr;
      var $22=HEAP32[(($sign)>>2)];
      var $23=$normal_addr;
      _qh_backnormal($19, $sub8, $21, $22, $23, $nearzero2);
      label = 16; break;
    case 11: 
      var $24=$rows_addr;
      var $25=$dim_addr;
      var $sub9=((($25)-(1))|0);
      var $26=$dim_addr;
      var $27=HEAP32[(($sign)>>2)];
      var $28=$normal_addr;
      _qh_backnormal($24, $sub9, $26, $27, $28, $nearzero2);
      var $29=HEAP32[(($nearzero2)>>2)];
      var $tobool10=(($29)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $30=HEAP32[(((((5244084)|0)))>>2)];
      var $inc12=((($30)+(1))|0);
      HEAP32[(((((5244084)|0)))>>2)]=$inc12;
      var $31=HEAP32[((((5247040)|0))>>2)];
      var $tobool13=(($31)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $32=HEAP32[((((5248924)|0))>>2)];
      var $33=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($32, 5, ((5270332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,tempInt));
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $34=HEAP32[(($nearzero2)>>2)];
      var $tobool18=(($34)|0)!=0;
      if ($tobool18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $35=$nearzero_addr;
      HEAP32[(($35)>>2)]=1;
      label = 18; break;
    case 18: 
      var $36=$normal_addr;
      var $37=$dim_addr;
      _qh_normalize2($36, $37, 1, 0, 0);
      var $38=$point0_addr;
      $pointcoord=$38;
      var $39=$normal_addr;
      $normalcoef=$39;
      var $40=$pointcoord;
      var $incdec_ptr=(($40+8)|0);
      $pointcoord=$incdec_ptr;
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $42=$normalcoef;
      var $incdec_ptr21=(($42+8)|0);
      $normalcoef=$incdec_ptr21;
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($41)*($43);
      var $sub22=(-$mul);
      var $44=$offset_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub22,HEAP32[(($44)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($44)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $45=$dim_addr;
      var $sub23=((($45)-(1))|0);
      $k=$sub23;
      label = 19; break;
    case 19: 
      var $46=$k;
      var $dec25=((($46)-(1))|0);
      $k=$dec25;
      var $tobool26=(($46)|0)!=0;
      if ($tobool26) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $47=$pointcoord;
      var $incdec_ptr28=(($47+8)|0);
      $pointcoord=$incdec_ptr28;
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=$normalcoef;
      var $incdec_ptr29=(($49+8)|0);
      $normalcoef=$incdec_ptr29;
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul30=($48)*($50);
      var $51=$offset_addr;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub31=($52)-($mul30);
      (HEAPF64[(tempDoublePtr)>>3]=$sub31,HEAP32[(($51)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($51)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 19; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_sethyperplane_gauss["X"]=1;

function _qh_copypoints($points, $numpoints, $dimension) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dimension_addr;
      var $size;
      var $newpoints;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dimension_addr=$dimension;
      var $0=$numpoints_addr;
      var $1=$dimension_addr;
      var $mul=((($0)*($1))&-1);
      var $mul1=((($mul<<3))&-1);
      $size=$mul1;
      var $2=$size;
      var $call=_qh_malloc($2);
      var $3=$call;
      $newpoints=$3;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      var $5=$numpoints_addr;
      _qh_fprintf($4, 6004, ((5269936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _qh_errexit(4, 0, 0);
      label = 4; break;
    case 4: 
      var $6=$newpoints;
      var $7=$6;
      var $8=$points_addr;
      var $9=$8;
      var $10=$size;
      assert($10 % 1 === 0);_memcpy($7, $9, $10);
      var $11=$newpoints;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_determinant($rows, $dim, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $rows_addr;
      var $dim_addr;
      var $nearzero_addr;
      var $det;
      var $i;
      var $sign=__stackBase__;
      $rows_addr=$rows;
      $dim_addr=$dim;
      $nearzero_addr=$nearzero;
      $det=0;
      HEAP32[(($sign)>>2)]=0;
      var $0=$nearzero_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$dim_addr;
      var $cmp=(($1)|0) < 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 6005, ((5295268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 26; break;
    case 4: 
      var $3=$dim_addr;
      var $cmp1=(($3)|0)==2;
      if ($cmp1) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $4=$rows_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $arrayidx3=(($5)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$rows_addr;
      var $arrayidx4=(($7+4)|0);
      var $8=HEAP32[(($arrayidx4)>>2)];
      var $arrayidx5=(($8+8)|0);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($6)*($9);
      var $10=$rows_addr;
      var $arrayidx6=(($10)|0);
      var $11=HEAP32[(($arrayidx6)>>2)];
      var $arrayidx7=(($11+8)|0);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=$rows_addr;
      var $arrayidx8=(($13+4)|0);
      var $14=HEAP32[(($arrayidx8)>>2)];
      var $arrayidx9=(($14)|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul10=($12)*($15);
      var $sub=($mul)-($mul10);
      $det=$sub;
      var $16=$det;
      var $cmp11=$16 < 0;
      if ($cmp11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$det;
      var $sub12=(-$17);
      var $cond = $sub12;label = 8; break;
    case 7: 
      var $18=$det;
      var $cond = $18;label = 8; break;
    case 8: 
      var $cond;
      var $19=HEAP32[((((5248712)|0))>>2)];
      var $arrayidx13=(($19+8)|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp14=$cond < $20;
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $21=$nearzero_addr;
      HEAP32[(($21)>>2)]=1;
      label = 10; break;
    case 10: 
      label = 25; break;
    case 11: 
      var $22=$dim_addr;
      var $cmp17=(($22)|0)==3;
      if ($cmp17) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $23=$rows_addr;
      var $arrayidx19=(($23)|0);
      var $24=HEAP32[(($arrayidx19)>>2)];
      var $arrayidx20=(($24)|0);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $26=$rows_addr;
      var $arrayidx21=(($26+4)|0);
      var $27=HEAP32[(($arrayidx21)>>2)];
      var $arrayidx22=(($27+8)|0);
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $29=$rows_addr;
      var $arrayidx23=(($29+8)|0);
      var $30=HEAP32[(($arrayidx23)>>2)];
      var $arrayidx24=(($30+16)|0);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul25=($28)*($31);
      var $32=$rows_addr;
      var $arrayidx26=(($32+4)|0);
      var $33=HEAP32[(($arrayidx26)>>2)];
      var $arrayidx27=(($33+16)|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx27)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx27)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $35=$rows_addr;
      var $arrayidx28=(($35+8)|0);
      var $36=HEAP32[(($arrayidx28)>>2)];
      var $arrayidx29=(($36+8)|0);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx29)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx29)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul30=($34)*($37);
      var $sub31=($mul25)-($mul30);
      var $mul32=($25)*($sub31);
      var $38=$rows_addr;
      var $arrayidx33=(($38+4)|0);
      var $39=HEAP32[(($arrayidx33)>>2)];
      var $arrayidx34=(($39)|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $41=$rows_addr;
      var $arrayidx35=(($41)|0);
      var $42=HEAP32[(($arrayidx35)>>2)];
      var $arrayidx36=(($42+8)|0);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx36)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx36)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $44=$rows_addr;
      var $arrayidx37=(($44+8)|0);
      var $45=HEAP32[(($arrayidx37)>>2)];
      var $arrayidx38=(($45+16)|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul39=($43)*($46);
      var $47=$rows_addr;
      var $arrayidx40=(($47)|0);
      var $48=HEAP32[(($arrayidx40)>>2)];
      var $arrayidx41=(($48+16)|0);
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $50=$rows_addr;
      var $arrayidx42=(($50+8)|0);
      var $51=HEAP32[(($arrayidx42)>>2)];
      var $arrayidx43=(($51+8)|0);
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx43)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx43)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul44=($49)*($52);
      var $sub45=($mul39)-($mul44);
      var $mul46=($40)*($sub45);
      var $sub47=($mul32)-($mul46);
      var $53=$rows_addr;
      var $arrayidx48=(($53+8)|0);
      var $54=HEAP32[(($arrayidx48)>>2)];
      var $arrayidx49=(($54)|0);
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=$rows_addr;
      var $arrayidx50=(($56)|0);
      var $57=HEAP32[(($arrayidx50)>>2)];
      var $arrayidx51=(($57+8)|0);
      var $58=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $59=$rows_addr;
      var $arrayidx52=(($59+4)|0);
      var $60=HEAP32[(($arrayidx52)>>2)];
      var $arrayidx53=(($60+16)|0);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul54=($58)*($61);
      var $62=$rows_addr;
      var $arrayidx55=(($62)|0);
      var $63=HEAP32[(($arrayidx55)>>2)];
      var $arrayidx56=(($63+16)|0);
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx56)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx56)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $65=$rows_addr;
      var $arrayidx57=(($65+4)|0);
      var $66=HEAP32[(($arrayidx57)>>2)];
      var $arrayidx58=(($66+8)|0);
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx58)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx58)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul59=($64)*($67);
      var $sub60=($mul54)-($mul59);
      var $mul61=($55)*($sub60);
      var $add=($sub47)+($mul61);
      $det=$add;
      var $68=$det;
      var $cmp62=$68 < 0;
      if ($cmp62) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $69=$det;
      var $sub64=(-$69);
      var $cond67 = $sub64;label = 15; break;
    case 14: 
      var $70=$det;
      var $cond67 = $70;label = 15; break;
    case 15: 
      var $cond67;
      var $71=HEAP32[((((5248712)|0))>>2)];
      var $arrayidx68=(($71+16)|0);
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx68)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx68)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp69=$cond67 < $72;
      if ($cmp69) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $73=$nearzero_addr;
      HEAP32[(($73)>>2)]=1;
      label = 17; break;
    case 17: 
      label = 24; break;
    case 18: 
      var $74=$rows_addr;
      var $75=$dim_addr;
      var $76=$dim_addr;
      var $77=$nearzero_addr;
      _qh_gausselim($74, $75, $76, $sign, $77);
      $det=1;
      var $78=$dim_addr;
      $i=$78;
      label = 19; break;
    case 19: 
      var $79=$i;
      var $dec=((($79)-(1))|0);
      $i=$dec;
      var $tobool=(($79)|0)!=0;
      if ($tobool) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $80=$i;
      var $81=$i;
      var $82=$rows_addr;
      var $arrayidx73=(($82+($81<<2))|0);
      var $83=HEAP32[(($arrayidx73)>>2)];
      var $arrayidx74=(($83+($80<<3))|0);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx74)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx74)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $85=$det;
      var $mul75=($85)*($84);
      $det=$mul75;
      label = 19; break;
    case 21: 
      var $86=HEAP32[(($sign)>>2)];
      var $tobool76=(($86)|0)!=0;
      if ($tobool76) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $87=$det;
      var $sub78=(-$87);
      $det=$sub78;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $88=$det;
      STACKTOP = __stackBase__;
      return $88;
    default: assert(0, "bad label: " + label);
  }

}
_qh_determinant["X"]=1;

function _qh_detjoggle($points, $numpoints, $dimension) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dimension_addr;
      var $abscoord;
      var $distround;
      var $joggle;
      var $maxcoord;
      var $mincoord;
      var $point;
      var $pointtemp;
      var $maxabs;
      var $sumabs;
      var $maxwidth;
      var $k;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dimension_addr=$dimension;
      $maxabs=-1.7976931348623157e+308;
      $sumabs=0;
      $maxwidth=0;
      $k=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=$dimension_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 29; break; }
    case 4: 
      var $2=HEAP32[((((5247392)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $3=$k;
      var $4=$dimension_addr;
      var $sub=((($4)-(1))|0);
      var $cmp1=(($3)|0)==(($sub)|0);
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$maxwidth;
      $abscoord=$5;
      label = 25; break;
    case 7: 
      var $6=HEAP32[((((5247000)|0))>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $7=$k;
      var $8=$dimension_addr;
      var $sub4=((($8)-(1))|0);
      var $cmp5=(($7)|0)==(($sub4)|0);
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $9=$maxabs;
      var $mul=($9)*(2);
      var $10=$maxabs;
      var $mul7=($mul)*($10);
      $abscoord=$mul7;
      label = 24; break;
    case 10: 
      $maxcoord=-1.7976931348623157e+308;
      $mincoord=1.7976931348623157e+308;
      var $11=$points_addr;
      $point=$11;
      var $12=$points_addr;
      var $13=HEAP32[((((5247508)|0))>>2)];
      var $14=$numpoints_addr;
      var $mul9=((($13)*($14))&-1);
      var $add_ptr=(($12+($mul9<<3))|0);
      $pointtemp=$add_ptr;
      label = 11; break;
    case 11: 
      var $15=$point;
      var $16=$pointtemp;
      var $cmp11=(($15)>>>0) < (($16)>>>0);
      if ($cmp11) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $17=$maxcoord;
      var $18=$k;
      var $19=$point;
      var $arrayidx=(($19+($18<<3))|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp13=$17 < $20;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$k;
      var $22=$point;
      var $arrayidx15=(($22+($21<<3))|0);
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxcoord=$23;
      label = 14; break;
    case 14: 
      var $24=$mincoord;
      var $25=$k;
      var $26=$point;
      var $arrayidx16=(($26+($25<<3))|0);
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp17=$24 > $27;
      if ($cmp17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $28=$k;
      var $29=$point;
      var $arrayidx19=(($29+($28<<3))|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mincoord=$30;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $31=HEAP32[((((5247508)|0))>>2)];
      var $32=$point;
      var $add_ptr21=(($32+($31<<3))|0);
      $point=$add_ptr21;
      label = 11; break;
    case 18: 
      var $33=$maxwidth;
      var $34=$maxcoord;
      var $35=$mincoord;
      var $sub22=($34)-($35);
      var $cmp23=$33 < $sub22;
      if ($cmp23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $36=$maxcoord;
      var $37=$mincoord;
      var $sub25=($36)-($37);
      $maxwidth=$sub25;
      label = 20; break;
    case 20: 
      var $38=$maxcoord;
      var $39=$mincoord;
      var $sub27=(-$39);
      var $cmp28=$38 < $sub27;
      if ($cmp28) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $40=$mincoord;
      var $sub29=(-$40);
      var $cond = $sub29;label = 23; break;
    case 22: 
      var $41=$maxcoord;
      var $cond = $41;label = 23; break;
    case 23: 
      var $cond;
      $abscoord=$cond;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $42=$abscoord;
      var $43=$sumabs;
      var $add=($43)+($42);
      $sumabs=$add;
      var $44=$maxabs;
      var $45=$abscoord;
      var $cmp32=$44 < $45;
      if ($cmp32) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $46=$abscoord;
      $maxabs=$46;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $47=$k;
      var $inc=((($47)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 29: 
      var $48=HEAP32[((((5247508)|0))>>2)];
      var $49=$maxabs;
      var $50=$sumabs;
      var $call=_qh_distround($48, $49, $50);
      $distround=$call;
      var $51=$distround;
      var $mul37=($51)*(30000);
      $joggle=$mul37;
      var $52=$joggle;
      var $cmp38=$52 < 6.661338147750939e-12;
      if ($cmp38) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $joggle=6.661338147750939e-12;
      label = 31; break;
    case 31: 
      var $53=HEAP32[((((5247040)|0))>>2)];
      var $cmp41=(($53)|0) >= 2;
      if ($cmp41) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $54=HEAP32[((((5248924)|0))>>2)];
      var $55=$joggle;
      var $56=$maxwidth;
      _qh_fprintf($54, 2001, ((5279260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 33; break;
    case 33: 
      var $57=$joggle;
      STACKTOP = __stackBase__;
      return $57;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detjoggle["X"]=1;

function _qh_distround($dimension, $maxabs, $maxsumabs) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dimension_addr;
      var $maxabs_addr;
      var $maxsumabs_addr;
      var $maxdistsum;
      var $maxround;
      $dimension_addr=$dimension;
      $maxabs_addr=$maxabs;
      $maxsumabs_addr=$maxsumabs;
      var $0=$dimension_addr;
      var $conv=(($0)|0);
      var $call=Math.sqrt($conv);
      var $1=$maxabs_addr;
      var $mul=($call)*($1);
      $maxdistsum=$mul;
      var $2=$maxdistsum;
      var $3=$maxsumabs_addr;
      var $cmp=$2 > $3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$maxsumabs_addr;
      $maxdistsum=$4;
      label = 4; break;
    case 4: 
      var $5=$dimension_addr;
      var $conv2=(($5)|0);
      var $6=$maxdistsum;
      var $mul3=($conv2)*($6);
      var $mul4=($mul3)*(1.01);
      var $7=$maxabs_addr;
      var $add=($mul4)+($7);
      var $mul5=($add)*(2.220446049250313e-16);
      $maxround=$mul5;
      var $8=HEAP32[((((5247040)|0))>>2)];
      var $cmp6=(($8)|0) >= 4;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=HEAP32[((((5248924)|0))>>2)];
      var $10=$maxround;
      var $11=$maxabs_addr;
      var $12=$maxsumabs_addr;
      var $13=$maxdistsum;
      _qh_fprintf($9, 4008, ((5285424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$10,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$11,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 6; break;
    case 6: 
      var $14=$maxround;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_divzero($numer, $denom, $mindenom1, $zerodiv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $numer_addr;
      var $denom_addr;
      var $mindenom1_addr;
      var $zerodiv_addr;
      var $temp;
      var $numerx;
      var $denomx;
      $numer_addr=$numer;
      $denom_addr=$denom;
      $mindenom1_addr=$mindenom1;
      $zerodiv_addr=$zerodiv;
      var $0=$numer_addr;
      var $1=$mindenom1_addr;
      var $cmp=$0 < $1;
      if ($cmp) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $2=$numer_addr;
      var $3=$mindenom1_addr;
      var $sub=(-$3);
      var $cmp1=$2 > $sub;
      if ($cmp1) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $4=$numer_addr;
      var $cmp2=$4 < 0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$numer_addr;
      var $sub3=(-$5);
      var $cond = $sub3;label = 7; break;
    case 6: 
      var $6=$numer_addr;
      var $cond = $6;label = 7; break;
    case 7: 
      var $cond;
      $numerx=$cond;
      var $7=$denom_addr;
      var $cmp4=$7 < 0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$denom_addr;
      var $sub6=(-$8);
      var $cond9 = $sub6;label = 10; break;
    case 9: 
      var $9=$denom_addr;
      var $cond9 = $9;label = 10; break;
    case 10: 
      var $cond9;
      $denomx=$cond9;
      var $10=$numerx;
      var $11=$denomx;
      var $cmp10=$10 < $11;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $12=$zerodiv_addr;
      HEAP32[(($12)>>2)]=0;
      var $13=$numer_addr;
      var $14=$denom_addr;
      var $div=($13)/($14);
      $retval=$div;
      label = 17; break;
    case 12: 
      var $15=$zerodiv_addr;
      HEAP32[(($15)>>2)]=1;
      $retval=0;
      label = 17; break;
    case 13: 
      var $16=$denom_addr;
      var $17=$numer_addr;
      var $div12=($16)/($17);
      $temp=$div12;
      var $18=$temp;
      var $19=$mindenom1_addr;
      var $cmp13=$18 > $19;
      if ($cmp13) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $20=$temp;
      var $21=$mindenom1_addr;
      var $sub14=(-$21);
      var $cmp15=$20 < $sub14;
      if ($cmp15) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $22=$zerodiv_addr;
      HEAP32[(($22)>>2)]=0;
      var $23=$numer_addr;
      var $24=$denom_addr;
      var $div17=($23)/($24);
      $retval=$div17;
      label = 17; break;
    case 16: 
      var $25=$zerodiv_addr;
      HEAP32[(($25)>>2)]=1;
      $retval=0;
      label = 17; break;
    case 17: 
      var $26=$retval;

      return $26;
    default: assert(0, "bad label: " + label);
  }

}
_qh_divzero["X"]=1;

function _qh_distnorm($dim, $point, $normal, $offsetp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $point_addr;
      var $normal_addr;
      var $offsetp_addr;
      var $normalp;
      var $coordp;
      var $dist;
      var $k;
      $dim_addr=$dim;
      $point_addr=$point;
      $normal_addr=$normal;
      $offsetp_addr=$offsetp;
      var $0=$normal_addr;
      $normalp=$0;
      var $1=$point_addr;
      $coordp=$1;
      var $2=$offsetp_addr;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dist=$3;
      var $4=$dim_addr;
      $k=$4;
      label = 3; break;
    case 3: 
      var $5=$k;
      var $dec=((($5)-(1))|0);
      $k=$dec;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$coordp;
      var $incdec_ptr=(($6+8)|0);
      $coordp=$incdec_ptr;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $8=$normalp;
      var $incdec_ptr1=(($8+8)|0);
      $normalp=$incdec_ptr1;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($7)*($9);
      var $10=$dist;
      var $add=($10)+($mul);
      $dist=$add;
      label = 3; break;
    case 5: 
      var $11=$dist;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_detroundoff() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $maxangle;
      var $maxrho;
      var $maxdist;
      _qh_option(((5272720)|0), 0, ((5248660)|0));
      var $0=HEAP32[((((5247396)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247508)|0))>>2)];
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248652)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248652)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_distround($1, $2, $3);
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[((((5248628)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248628)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $4=HEAP32[((((5247340)|0))>>2)];
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($5)*($6);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($7)+($mul);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5248628)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248628)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 5; break;
    case 5: 
      _qh_option(((5267584)|0), 0, ((5248628)|0));
      label = 6; break;
    case 6: 
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul4=($8)*($9);
      (HEAPF64[(tempDoublePtr)>>3]=$mul4,HEAP32[((((5248676)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248676)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($11)|0);
      var $mul5=($10)*($conv);
      var $call6=Math.sqrt($mul5);
      (HEAPF64[(tempDoublePtr)>>3]=$call6,HEAP32[((((5248684)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248684)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248684)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248684)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul7=($12)*($13);
      (HEAPF64[(tempDoublePtr)>>3]=$mul7,HEAP32[((((5248692)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248692)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $14=HEAP32[((((5247508)|0))>>2)];
      var $conv8=(($14)|0);
      var $mul9=($conv8)*(1.01);
      var $mul10=($mul9)*(2.220446049250313e-16);
      (HEAPF64[(tempDoublePtr)>>3]=$mul10,HEAP32[((((5248604)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248604)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $15=HEAP32[((((5247340)|0))>>2)];
      var $tobool11=(($15)|0)!=0;
      if ($tobool11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add13=($17)+($16);
      (HEAPF64[(tempDoublePtr)>>3]=$add13,HEAP32[((((5248604)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248604)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$18 < 8.988465674311579e+307;
      if ($cmp) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($20)-($19);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[((((5246984)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246984)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $21=HEAP32[((((5247340)|0))>>2)];
      var $tobool17=(($21)|0)!=0;
      if ($tobool17) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _qh_option(((5263652)|0), 0, ((5246984)|0));
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp21=$22 < 8.988465674311579e+307;
      if ($cmp21) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub24=($24)-($23);
      (HEAPF64[(tempDoublePtr)>>3]=$sub24,HEAP32[((((5246992)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246992)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $25=HEAP32[((((5247340)|0))>>2)];
      var $tobool25=(($25)|0)!=0;
      if ($tobool25) { label = 14; break; } else { label = 15; break; }
    case 14: 
      _qh_option(((5259544)|0), 0, ((5246992)|0));
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul29=($26)*(2);
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add30=($27)+($mul29);
      (HEAPF64[(tempDoublePtr)>>3]=$add30,HEAP32[((((5247088)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247088)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul31=($28)*(2);
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add32=($29)+($mul31);
      (HEAPF64[(tempDoublePtr)>>3]=$add32,HEAP32[((((5247096)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247096)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $30=HEAP32[((((5247340)|0))>>2)];
      var $tobool33=(($30)|0)!=0;
      if ($tobool33) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $31=HEAP32[((((5247076)|0))>>2)];
      var $tobool34=(($31)|0)!=0;
      if ($tobool34) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $32=HEAP32[((((5247144)|0))>>2)];
      var $tobool35=(($32)|0)!=0;
      if ($tobool35) { label = 19; break; } else { label = 20; break; }
    case 19: 
      _qh_option(((5256344)|0), 0, ((5247088)|0));
      label = 20; break;
    case 20: 
      var $33=HEAP32[((((5247340)|0))>>2)];
      var $tobool38=(($33)|0)!=0;
      if ($tobool38) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $34=HEAP32[((((5247140)|0))>>2)];
      var $tobool40=(($34)|0)!=0;
      if ($tobool40) { label = 22; break; } else { label = 23; break; }
    case 22: 
      _qh_option(((5253484)|0), 0, ((5247096)|0));
      label = 23; break;
    case 23: 
      $maxangle=1;
      var $35=$maxangle;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp43=$35 > $36;
      if ($cmp43) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxangle=$37;
      label = 25; break;
    case 25: 
      var $38=$maxangle;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp47=$38 > $39;
      if ($cmp47) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxangle=$40;
      label = 27; break;
    case 27: 
      var $41=HEAP32[((((5247508)|0))>>2)];
      var $conv51=(($41)|0);
      var $call52=Math.sqrt($conv51);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul53=($call52)*($42);
      var $43=$maxangle;
      var $44=$maxangle;
      var $mul54=($43)*($44);
      var $sub55=(1)-($mul54);
      var $call56=Math.sqrt($sub55);
      var $mul57=($mul53)*($call56);
      var $45=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add58=($mul57)+($45);
      (HEAPF64[(tempDoublePtr)>>3]=$add58,HEAP32[((((5248724)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248724)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $46=HEAP32[((((5247508)|0))>>2)];
      var $conv59=(($46)|0);
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul60=($conv59)*($47);
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add61=($mul60)+($48);
      $maxrho=$add61;
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $50=$maxrho;
      var $cmp62=$49 < $50;
      if ($cmp62) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $51=$maxrho;
      (HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[((((5248724)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248724)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      var $52=HEAP32[((((5247508)|0))>>2)];
      var $conv66=(($52)|0);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul67=($conv66)*($53);
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add68=($mul67)+($54);
      $maxrho=$add68;
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=$maxrho;
      var $cmp69=$55 < $56;
      if ($cmp69) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $57=$maxrho;
      (HEAPF64[(tempDoublePtr)>>3]=$57,HEAP32[((((5248724)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248724)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 31: 
      var $58=HEAP32[((((5247084)|0))>>2)];
      var $tobool73=(($58)|0)!=0;
      if ($tobool73) { label = 32; break; } else { label = 33; break; }
    case 32: 
      _qh_option(((5250780)|0), 0, ((5248724)|0));
      label = 33; break;
    case 33: 
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul76=($59)*(5);
      (HEAPF64[(tempDoublePtr)>>3]=$mul76,HEAP32[((((5248716)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248716)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp77=$60 < 8.988465674311579e+307;
      if ($cmp77) { label = 34; break; } else { label = 39; break; }
    case 34: 
      var $61=HEAP32[((((5247048)|0))>>2)];
      var $tobool80=(($61)|0)!=0;
      if ($tobool80) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $62=HEAP32[((((5247052)|0))>>2)];
      var $tobool82=(($62)|0)!=0;
      if ($tobool82) { label = 36; break; } else { label = 39; break; }
    case 36: 
      HEAP32[((((5247504)|0))>>2)]=1;
      var $63=HEAP32[((((5247508)|0))>>2)];
      var $conv84=(($63)|0);
      var $call85=Math.sqrt($conv84);
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul86=($call85)*($64);
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add87=($mul86)+($65);
      $maxdist=$add87;
      var $66=$maxdist;
      var $mul88=($66)*(2);
      $maxdist=$mul88;
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248716)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248716)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $68=$maxdist;
      var $cmp89=$67 < $68;
      if ($cmp89) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $69=$maxdist;
      (HEAPF64[(tempDoublePtr)>>3]=$69,HEAP32[((((5248716)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248716)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $70=HEAP32[((((5247504)|0))>>2)];
      var $tobool94=(($70)|0)!=0;
      if ($tobool94) { label = 40; break; } else { label = 41; break; }
    case 40: 
      _qh_option(((5302840)|0), 0, ((5248716)|0));
      label = 41; break;
    case 41: 
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp97=$71 < $72;
      if ($cmp97) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $73=HEAP32[((((5248924)|0))>>2)];
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($73, 6006, ((5300332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$74,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$75,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(1, 0, 0);
      label = 43; break;
    case 43: 
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp101=$76 > 8.988465674311579e+307;
      if ($cmp101) { label = 44; break; } else { label = 54; break; }
    case 44: 
      var $77=HEAP32[((((5247084)|0))>>2)];
      var $tobool104=(($77)|0)!=0;
      if ($tobool104) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$78,HEAP32[((((5247108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 50; break;
    case 46: 
      var $79=HEAP32[((((5247508)|0))>>2)];
      var $cmp106=(($79)|0) <= 3;
      if ($cmp106) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$80,HEAP32[((((5247108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 49; break;
    case 48: 
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul110=($81)*(3);
      (HEAPF64[(tempDoublePtr)>>3]=$mul110,HEAP32[((((5247108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $82=HEAP32[((((5246944)|0))>>2)];
      var $tobool113=(($82)|0)!=0;
      if ($tobool113) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp115=$83 > $84;
      if ($cmp115) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$85,HEAP32[((((5247108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 53; break;
    case 53: 
      _qh_option(((5297820)|0), 0, ((5247108)|0));
      label = 54; break;
    case 54: 
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp120=$86 > 8.988465674311579e+307;
      if ($cmp120) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$87,HEAP32[((((5247068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      _qh_option(((5296212)|0), 0, ((5247068)|0));
      label = 56; break;
    case 56: 
      var $88=HEAP32[((((5246944)|0))>>2)];
      var $tobool124=(($88)|0)!=0;
      if ($tobool124) { label = 62; break; } else { label = 57; break; }
    case 57: 
      var $89=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul126=($89)*(2);
      (HEAPF64[(tempDoublePtr)>>3]=$mul126,HEAP32[((((5246948)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246948)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $90=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp127=$90 < 8.988465674311579e+307;
      if ($cmp127) { label = 58; break; } else { label = 61; break; }
    case 58: 
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub130=(1)-($92);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul131=($sub130)*($93);
      var $cmp132=$91 < $mul131;
      if ($cmp132) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub135=(1)-($94);
      var $95=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul136=($sub135)*($95);
      (HEAPF64[(tempDoublePtr)>>3]=$mul136,HEAP32[((((5246948)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246948)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      _qh_option(((5294288)|0), 0, ((5246948)|0));
      label = 62; break;
    case 62: 
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$96,HEAP32[((((5248740)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248740)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $97=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $98=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul140=($98)*(6);
      var $cmp141=$97 < $mul140;
      if ($cmp141) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul144=($99)*(6);
      (HEAPF64[(tempDoublePtr)>>3]=$mul144,HEAP32[((((5248740)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248740)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 64; break;
    case 64: 
      var $100=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $101=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul146=($101)*(6);
      var $cmp147=$100 < $mul146;
      if ($cmp147) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $102=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul150=($102)*(6);
      (HEAPF64[(tempDoublePtr)>>3]=$mul150,HEAP32[((((5248740)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248740)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 66; break;
    case 66: 
      _qh_option(((5292628)|0), 0, ((5248740)|0));
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add152=($104)+(6.661338147750939e-16);
      var $cmp153=$103 > $add152;
      if ($cmp153) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $105=HEAP32[((((5246968)|0))>>2)];
      var $tobool156=(($105)|0)!=0;
      if ($tobool156) { label = 70; break; } else { label = 68; break; }
    case 68: 
      var $106=HEAP32[((((5247012)|0))>>2)];
      var $tobool158=(($106)|0)!=0;
      if ($tobool158) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $107=HEAP32[((((5248924)|0))>>2)];
      var $108=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $109=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($107, 7001, ((5291396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$108,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$109,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 70; break;
    case 70: 
      var $110=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$110,HEAP32[((((5249076)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249076)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub161=(-$111);
      (HEAPF64[(tempDoublePtr)>>3]=$sub161,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detroundoff["X"]=1;

function _qh_detsimplex($apex, $points, $dim, $nearzero) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $apex_addr;
      var $points_addr;
      var $dim_addr;
      var $nearzero_addr;
      var $coorda;
      var $coordp;
      var $gmcoord;
      var $point;
      var $pointp;
      var $rows;
      var $k;
      var $i;
      var $det;
      $apex_addr=$apex;
      $points_addr=$points;
      $dim_addr=$dim;
      $nearzero_addr=$nearzero;
      $i=0;
      var $0=HEAP32[(((((5243396)|0)))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[(((((5243396)|0)))>>2)]=$inc;
      var $1=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$1;
      var $2=HEAP32[((((5249196)|0))>>2)];
      $rows=$2;
      $point=0;
      var $3=$points_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $4=$points_addr;
      var $e=(($4+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $5=$p;
      $pointp=$5;
      label = 4; break;
    case 4: 
      var $6=$pointp;
      var $incdec_ptr=(($6+4)|0);
      $pointp=$incdec_ptr;
      var $7=HEAP32[(($6)>>2)];
      $point=$7;
      var $tobool1=(($7)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $8=$i;
      var $9=$dim_addr;
      var $cmp=(($8)|0)==(($9)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 11; break;
    case 7: 
      var $10=$gmcoord;
      var $11=$i;
      var $inc3=((($11)+(1))|0);
      $i=$inc3;
      var $12=$rows;
      var $arrayidx4=(($12+($11<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$10;
      var $13=$point;
      $coordp=$13;
      var $14=$apex_addr;
      $coorda=$14;
      var $15=$dim_addr;
      $k=$15;
      label = 8; break;
    case 8: 
      var $16=$k;
      var $dec=((($16)-(1))|0);
      $k=$dec;
      var $tobool6=(($16)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$coordp;
      var $incdec_ptr8=(($17+8)|0);
      $coordp=$incdec_ptr8;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$coorda;
      var $incdec_ptr9=(($19+8)|0);
      $coorda=$incdec_ptr9;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($18)-($20);
      var $21=$gmcoord;
      var $incdec_ptr10=(($21+8)|0);
      $gmcoord=$incdec_ptr10;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($21)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($21)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 10: 
      label = 4; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=$i;
      var $23=$dim_addr;
      var $cmp13=(($22)|0) < (($23)|0);
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $24=HEAP32[((((5248924)|0))>>2)];
      var $25=$i;
      var $26=$dim_addr;
      _qh_fprintf($24, 6007, ((5289524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$26,tempInt));
      _qh_errexit(5, 0, 0);
      label = 14; break;
    case 14: 
      var $27=$rows;
      var $28=$dim_addr;
      var $29=$nearzero_addr;
      var $call=_qh_determinant($27, $28, $29);
      $det=$call;
      var $30=HEAP32[((((5247040)|0))>>2)];
      var $cmp16=(($30)|0) >= 2;
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $31=HEAP32[((((5248924)|0))>>2)];
      var $32=$det;
      var $33=$apex_addr;
      var $call18=_qh_pointid($33);
      var $34=$dim_addr;
      var $35=$nearzero_addr;
      var $36=HEAP32[(($35)>>2)];
      _qh_fprintf($31, 2002, ((5287624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$32,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$call18,HEAP32[(((tempInt)+(12))>>2)]=$34,HEAP32[(((tempInt)+(16))>>2)]=$36,tempInt));
      label = 16; break;
    case 16: 
      var $37=$det;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detsimplex["X"]=1;

function _qh_facetarea($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $apex;
      var $centrum;
      var $area;
      var $ridge;
      var $ridgep;
      $facet_addr=$facet;
      $area=0;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 13;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$facet_addr;
      var $vertices=(($5+48)|0);
      var $6=HEAP32[(($vertices)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      $apex=$8;
      var $9=HEAP32[((((5247508)|0))>>2)];
      var $10=$apex;
      var $point=(($10+8)|0);
      var $11=HEAP32[(($point)>>2)];
      var $12=$facet_addr;
      var $vertices1=(($12+48)|0);
      var $13=HEAP32[(($vertices1)>>2)];
      var $14=$apex;
      var $15=$facet_addr;
      var $16=$15;
      var $bf_field_offs2=(($16+76)|0);
      var $17=$bf_field_offs2;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 >>> 12;
      var $bf_clear3=$19 & 1;
      var $20=$facet_addr;
      var $normal=(($20+24)|0);
      var $21=HEAP32[(($normal)>>2)];
      var $22=$facet_addr;
      var $offset=(($22+16)|0);
      var $call=_qh_facetarea_simplex($9, $11, $13, $14, $bf_clear3, $21, $offset);
      $area=$call;
      label = 15; break;
    case 4: 
      var $23=HEAP32[((((5249036)|0))>>2)];
      var $cmp=(($23)|0)==2;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=$facet_addr;
      var $center=(($24+36)|0);
      var $25=HEAP32[(($center)>>2)];
      $centrum=$25;
      label = 7; break;
    case 6: 
      var $26=$facet_addr;
      var $call6=_qh_getcentrum($26);
      $centrum=$call6;
      label = 7; break;
    case 7: 
      $ridge=0;
      var $27=$facet_addr;
      var $ridges=(($27+52)|0);
      var $28=HEAP32[(($ridges)>>2)];
      var $tobool7=(($28)|0)!=0;
      if ($tobool7) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $29=$facet_addr;
      var $ridges9=(($29+52)|0);
      var $30=HEAP32[(($ridges9)>>2)];
      var $e10=(($30+4)|0);
      var $arrayidx11=(($e10)|0);
      var $p12=$arrayidx11;
      var $31=$p12;
      $ridgep=$31;
      label = 9; break;
    case 9: 
      var $32=$ridgep;
      var $incdec_ptr=(($32+4)|0);
      $ridgep=$incdec_ptr;
      var $33=HEAP32[(($32)>>2)];
      $ridge=$33;
      var $tobool13=(($33)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=HEAP32[((((5247508)|0))>>2)];
      var $35=$centrum;
      var $36=$ridge;
      var $vertices14=(($36)|0);
      var $37=HEAP32[(($vertices14)>>2)];
      var $38=$ridge;
      var $top=(($38+4)|0);
      var $39=HEAP32[(($top)>>2)];
      var $40=$facet_addr;
      var $cmp15=(($39)|0)==(($40)|0);
      var $conv=(($cmp15)&1);
      var $41=$facet_addr;
      var $normal16=(($41+24)|0);
      var $42=HEAP32[(($normal16)>>2)];
      var $43=$facet_addr;
      var $offset17=(($43+16)|0);
      var $call18=_qh_facetarea_simplex($34, $35, $37, 0, $conv, $42, $offset17);
      var $44=$area;
      var $add=($44)+($call18);
      $area=$add;
      label = 9; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $45=HEAP32[((((5249036)|0))>>2)];
      var $cmp20=(($45)|0)!=2;
      if ($cmp20) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $46=$centrum;
      var $47=$46;
      var $48=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($47, $48);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $49=$facet_addr;
      var $50=$49;
      var $bf_field_offs25=(($50+76)|0);
      var $51=$bf_field_offs25;
      var $52=HEAP32[(($51)>>2)];
      var $53=$52 >>> 17;
      var $bf_clear26=$53 & 1;
      var $tobool27=(($bf_clear26)|0)!=0;
      if ($tobool27) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $54=HEAP32[((((5247000)|0))>>2)];
      var $tobool28=(($54)|0)!=0;
      if ($tobool28) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $55=$area;
      var $sub=(-$55);
      $area=$sub;
      label = 18; break;
    case 18: 
      var $56=HEAP32[((((5247040)|0))>>2)];
      var $cmp31=(($56)|0) >= 4;
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $57=HEAP32[((((5248924)|0))>>2)];
      var $58=$facet_addr;
      var $id=(($58+72)|0);
      var $59=HEAP32[(($id)>>2)];
      var $60=$area;
      _qh_fprintf($57, 4009, ((5283184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$59,(HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 20; break;
    case 20: 
      var $61=$area;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facetarea["X"]=1;

function _qh_facetarea_simplex($dim, $apex, $vertices, $notvertex, $toporient, $normal, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_addr;
      var $apex_addr;
      var $vertices_addr;
      var $notvertex_addr;
      var $toporient_addr;
      var $normal_addr;
      var $offset_addr;
      var $coorda;
      var $coordp;
      var $gmcoord;
      var $rows;
      var $normalp;
      var $k;
      var $i;
      var $area;
      var $dist;
      var $vertex;
      var $vertexp;
      var $nearzero=__stackBase__;
      $dim_addr=$dim;
      $apex_addr=$apex;
      $vertices_addr=$vertices;
      $notvertex_addr=$notvertex;
      $toporient_addr=$toporient;
      $normal_addr=$normal;
      $offset_addr=$offset;
      $i=0;
      var $0=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$0;
      var $1=HEAP32[((((5249196)|0))>>2)];
      $rows=$1;
      $vertex=0;
      var $2=$vertices_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 23; break; }
    case 3: 
      var $3=$vertices_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $vertexp=$4;
      label = 4; break;
    case 4: 
      var $5=$vertexp;
      var $incdec_ptr=(($5+4)|0);
      $vertexp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $vertex=$6;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 22; break; }
    case 5: 
      var $7=$vertex;
      var $8=$notvertex_addr;
      var $cmp=(($7)|0)==(($8)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 4; break;
    case 7: 
      var $9=$gmcoord;
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      var $11=$rows;
      var $arrayidx3=(($11+($10<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$9;
      var $12=$apex_addr;
      $coorda=$12;
      var $13=$vertex;
      var $point=(($13+8)|0);
      var $14=HEAP32[(($point)>>2)];
      $coordp=$14;
      var $15=$normal_addr;
      $normalp=$15;
      var $16=$notvertex_addr;
      var $tobool4=(($16)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $17=$dim_addr;
      $k=$17;
      label = 9; break;
    case 9: 
      var $18=$k;
      var $dec=((($18)-(1))|0);
      $k=$dec;
      var $tobool7=(($18)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$coordp;
      var $incdec_ptr9=(($19+8)|0);
      $coordp=$incdec_ptr9;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=$coorda;
      var $incdec_ptr10=(($21+8)|0);
      $coorda=$incdec_ptr10;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($20)-($22);
      var $23=$gmcoord;
      var $incdec_ptr11=(($23+8)|0);
      $gmcoord=$incdec_ptr11;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($23)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($23)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 11: 
      label = 21; break;
    case 12: 
      var $24=$offset_addr;
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dist=$25;
      var $26=$dim_addr;
      $k=$26;
      label = 13; break;
    case 13: 
      var $27=$k;
      var $dec13=((($27)-(1))|0);
      $k=$dec13;
      var $tobool14=(($27)|0)!=0;
      if ($tobool14) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$coordp;
      var $incdec_ptr16=(($28+8)|0);
      $coordp=$incdec_ptr16;
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($28)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($28)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $30=$normalp;
      var $incdec_ptr17=(($30+8)|0);
      $normalp=$incdec_ptr17;
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($29)*($31);
      var $32=$dist;
      var $add=($32)+($mul);
      $dist=$add;
      label = 13; break;
    case 15: 
      var $33=$dist;
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub19=(-$34);
      var $cmp20=$33 < $sub19;
      if ($cmp20) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=HEAP32[(((((5244156)|0)))>>2)];
      var $inc22=((($35)+(1))|0);
      HEAP32[(((((5244156)|0)))>>2)]=$inc22;
      $retval=0;
      label = 43; break;
    case 17: 
      var $36=$vertex;
      var $point24=(($36+8)|0);
      var $37=HEAP32[(($point24)>>2)];
      $coordp=$37;
      var $38=$normal_addr;
      $normalp=$38;
      var $39=$dim_addr;
      $k=$39;
      label = 18; break;
    case 18: 
      var $40=$k;
      var $dec26=((($40)-(1))|0);
      $k=$dec26;
      var $tobool27=(($40)|0)!=0;
      if ($tobool27) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $41=$coordp;
      var $incdec_ptr29=(($41+8)|0);
      $coordp=$incdec_ptr29;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $43=$dist;
      var $44=$normalp;
      var $incdec_ptr30=(($44+8)|0);
      $normalp=$incdec_ptr30;
      var $45=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($44)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($44)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul31=($43)*($45);
      var $sub32=($42)-($mul31);
      var $46=$coorda;
      var $incdec_ptr33=(($46+8)|0);
      $coorda=$incdec_ptr33;
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($46)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($46)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub34=($sub32)-($47);
      var $48=$gmcoord;
      var $incdec_ptr35=(($48+8)|0);
      $gmcoord=$incdec_ptr35;
      (HEAPF64[(tempDoublePtr)>>3]=$sub34,HEAP32[(($48)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($48)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 4; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $49=$i;
      var $50=$dim_addr;
      var $sub40=((($50)-(1))|0);
      var $cmp41=(($49)|0)!=(($sub40)|0);
      if ($cmp41) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$i;
      var $53=$dim_addr;
      _qh_fprintf($51, 6008, ((5280964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$52,HEAP32[(((tempInt)+(4))>>2)]=$53,tempInt));
      _qh_errexit(5, 0, 0);
      label = 25; break;
    case 25: 
      var $54=$gmcoord;
      var $55=$i;
      var $56=$rows;
      var $arrayidx44=(($56+($55<<2))|0);
      HEAP32[(($arrayidx44)>>2)]=$54;
      var $57=HEAP32[((((5247000)|0))>>2)];
      var $tobool45=(($57)|0)!=0;
      if ($tobool45) { label = 26; break; } else { label = 34; break; }
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $58=$i;
      var $59=$dim_addr;
      var $sub48=((($59)-(1))|0);
      var $cmp49=(($58)|0) < (($sub48)|0);
      if ($cmp49) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $60=$dim_addr;
      var $sub51=((($60)-(1))|0);
      var $61=$i;
      var $62=$rows;
      var $arrayidx52=(($62+($61<<2))|0);
      var $63=HEAP32[(($arrayidx52)>>2)];
      var $arrayidx53=(($63+($sub51<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx53)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx53)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      var $64=$i;
      var $inc54=((($64)+(1))|0);
      $i=$inc54;
      label = 27; break;
    case 30: 
      var $65=$dim_addr;
      $k=$65;
      label = 31; break;
    case 31: 
      var $66=$k;
      var $dec57=((($66)-(1))|0);
      $k=$dec57;
      var $tobool58=(($66)|0)!=0;
      if ($tobool58) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $67=$gmcoord;
      var $incdec_ptr60=(($67+8)|0);
      $gmcoord=$incdec_ptr60;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($67)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($67)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 33: 
      var $68=$dim_addr;
      var $sub62=((($68)-(1))|0);
      var $69=$dim_addr;
      var $sub63=((($69)-(1))|0);
      var $70=$rows;
      var $arrayidx64=(($70+($sub63<<2))|0);
      var $71=HEAP32[(($arrayidx64)>>2)];
      var $arrayidx65=(($71+($sub62<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1,HEAP32[(($arrayidx65)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx65)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 38; break;
    case 34: 
      var $72=$normal_addr;
      $normalp=$72;
      var $73=$dim_addr;
      $k=$73;
      label = 35; break;
    case 35: 
      var $74=$k;
      var $dec68=((($74)-(1))|0);
      $k=$dec68;
      var $tobool69=(($74)|0)!=0;
      if ($tobool69) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $75=$normalp;
      var $incdec_ptr71=(($75+8)|0);
      $normalp=$incdec_ptr71;
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($75)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($75)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $77=$gmcoord;
      var $incdec_ptr72=(($77+8)|0);
      $gmcoord=$incdec_ptr72;
      (HEAPF64[(tempDoublePtr)>>3]=$76,HEAP32[(($77)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($77)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $78=HEAP32[(((((5243396)|0)))>>2)];
      var $inc75=((($78)+(1))|0);
      HEAP32[(((((5243396)|0)))>>2)]=$inc75;
      var $79=$rows;
      var $80=$dim_addr;
      var $call=_qh_determinant($79, $80, $nearzero);
      $area=$call;
      var $81=$toporient_addr;
      var $tobool76=(($81)|0)!=0;
      if ($tobool76) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $82=$area;
      var $sub78=(-$82);
      $area=$sub78;
      label = 40; break;
    case 40: 
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247480)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247480)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $84=$area;
      var $mul80=($84)*($83);
      $area=$mul80;
      var $85=HEAP32[((((5247040)|0))>>2)];
      var $cmp81=(($85)|0) >= 4;
      if ($cmp81) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $86=HEAP32[((((5248924)|0))>>2)];
      var $87=$area;
      var $88=$apex_addr;
      var $call83=_qh_pointid($88);
      var $89=$toporient_addr;
      var $90=HEAP32[(($nearzero)>>2)];
      _qh_fprintf($86, 4010, ((5280160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$87,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$call83,HEAP32[(((tempInt)+(12))>>2)]=$89,HEAP32[(((tempInt)+(16))>>2)]=$90,tempInt));
      label = 42; break;
    case 42: 
      var $91=$area;
      $retval=$91;
      label = 43; break;
    case 43: 
      var $92=$retval;
      STACKTOP = __stackBase__;
      return $92;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facetarea_simplex["X"]=1;

function _qh_facetcenter($vertices) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $points=__stackBase__;
      var $vertex;
      var $vertexp;
      var $center;
      $vertices_addr=$vertices;
      var $0=$vertices_addr;
      var $call=_qh_setsize($0);
      var $call1=_qh_settemp($call);
      HEAP32[(($points)>>2)]=$call1;
      $vertex=0;
      var $1=$vertices_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$vertices_addr;
      var $e=(($2+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $3=$p;
      $vertexp=$3;
      label = 4; break;
    case 4: 
      var $4=$vertexp;
      var $incdec_ptr=(($4+4)|0);
      $vertexp=$incdec_ptr;
      var $5=HEAP32[(($4)>>2)];
      $vertex=$5;
      var $tobool2=(($5)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$vertex;
      var $point=(($6+8)|0);
      var $7=HEAP32[(($point)>>2)];
      var $8=$7;
      _qh_setappend($points, $8);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($9)-(1))|0);
      var $10=HEAP32[(($points)>>2)];
      var $call3=_qh_voronoi_center($sub, $10);
      $center=$call3;
      _qh_settempfree($points);
      var $11=$center;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_voronoi_center($dim, $points) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $points_addr;
      var $point;
      var $pointp;
      var $point0;
      var $center=__stackBase__;
      var $simplex=(__stackBase__)+(4);
      var $i;
      var $j;
      var $k;
      var $size;
      var $gmcoord;
      var $diffp;
      var $sum2;
      var $sum2row;
      var $sum2p;
      var $det;
      var $factor;
      var $nearzero=(__stackBase__)+(8);
      var $infinite=(__stackBase__)+(12);
      $dim_addr=$dim;
      $points_addr=$points;
      var $0=HEAP32[((((5248936)|0))>>2)];
      var $call=_qh_memalloc($0);
      var $1=$call;
      HEAP32[(($center)>>2)]=$1;
      var $2=$points_addr;
      var $call1=_qh_setsize($2);
      $size=$call1;
      var $3=$size;
      var $4=$dim_addr;
      var $add=((($4)+(1))|0);
      var $cmp=(($3)|0)==(($add)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$points_addr;
      HEAP32[(($simplex)>>2)]=$5;
      label = 8; break;
    case 4: 
      var $6=$size;
      var $7=$dim_addr;
      var $add2=((($7)+(1))|0);
      var $cmp3=(($6)|0) < (($add2)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=HEAP32[((((5248924)|0))>>2)];
      var $9=$dim_addr;
      var $add5=((($9)+(1))|0);
      _qh_fprintf($8, 6025, ((5256764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add5,tempInt));
      _qh_errexit(5, 0, 0);
      var $10=$points_addr;
      HEAP32[(($simplex)>>2)]=$10;
      label = 7; break;
    case 6: 
      var $11=$dim_addr;
      var $add7=((($11)+(1))|0);
      var $call8=_qh_settemp($add7);
      HEAP32[(($simplex)>>2)]=$call8;
      var $12=$dim_addr;
      var $13=$points_addr;
      _qh_maxsimplex($12, $13, 0, 0, $simplex);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=HEAP32[(($simplex)>>2)];
      var $e=(($14+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $15=HEAP32[(($p)>>2)];
      var $16=$15;
      $point0=$16;
      var $17=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$17;
      $k=0;
      label = 9; break;
    case 9: 
      var $18=$k;
      var $19=$dim_addr;
      var $cmp10=(($18)|0) < (($19)|0);
      if ($cmp10) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $20=$gmcoord;
      var $21=$k;
      var $22=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx11=(($22+($21<<2))|0);
      HEAP32[(($arrayidx11)>>2)]=$20;
      $point=0;
      var $23=HEAP32[(($simplex)>>2)];
      var $tobool=(($23)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $24=HEAP32[(($simplex)>>2)];
      var $e13=(($24+4)|0);
      var $arrayidx14=(($e13)|0);
      var $p15=$arrayidx14;
      var $25=$p15;
      $pointp=$25;
      label = 12; break;
    case 12: 
      var $26=$pointp;
      var $incdec_ptr=(($26+4)|0);
      $pointp=$incdec_ptr;
      var $27=HEAP32[(($26)>>2)];
      $point=$27;
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $28=$point;
      var $29=$point0;
      var $cmp19=(($28)|0)!=(($29)|0);
      if ($cmp19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $30=$k;
      var $31=$point;
      var $arrayidx21=(($31+($30<<3))|0);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$k;
      var $34=$point0;
      var $arrayidx22=(($34+($33<<3))|0);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($32)-($35);
      var $36=$gmcoord;
      var $incdec_ptr23=(($36+8)|0);
      $gmcoord=$incdec_ptr23;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($36)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($36)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 15; break;
    case 15: 
      label = 12; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $37=$k;
      var $inc=((($37)+(1))|0);
      $k=$inc;
      label = 9; break;
    case 19: 
      var $38=$gmcoord;
      $sum2row=$38;
      $i=0;
      label = 20; break;
    case 20: 
      var $39=$i;
      var $40=$dim_addr;
      var $cmp28=(($39)|0) < (($40)|0);
      if ($cmp28) { label = 21; break; } else { label = 27; break; }
    case 21: 
      $sum2=0;
      $k=0;
      label = 22; break;
    case 22: 
      var $41=$k;
      var $42=$dim_addr;
      var $cmp31=(($41)|0) < (($42)|0);
      if ($cmp31) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $43=$k;
      var $44=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx33=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx33)>>2)];
      var $46=$i;
      var $add_ptr=(($45+($46<<3))|0);
      $diffp=$add_ptr;
      var $47=$diffp;
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=$diffp;
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($48)*($50);
      var $51=$sum2;
      var $add34=($51)+($mul);
      $sum2=$add34;
      label = 24; break;
    case 24: 
      var $52=$k;
      var $inc36=((($52)+(1))|0);
      $k=$inc36;
      label = 22; break;
    case 25: 
      var $53=$sum2;
      var $54=$gmcoord;
      var $incdec_ptr38=(($54+8)|0);
      $gmcoord=$incdec_ptr38;
      (HEAPF64[(tempDoublePtr)>>3]=$53,HEAP32[(($54)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($54)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 26; break;
    case 26: 
      var $55=$i;
      var $inc40=((($55)+(1))|0);
      $i=$inc40;
      label = 20; break;
    case 27: 
      var $56=HEAP32[((((5249196)|0))>>2)];
      var $57=$dim_addr;
      var $call42=_qh_determinant($56, $57, $nearzero);
      $det=$call42;
      var $58=$det;
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248676)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248676)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call43=_qh_divzero(0.5, $58, $59, $infinite);
      $factor=$call43;
      var $60=HEAP32[(($infinite)>>2)];
      var $tobool44=(($60)|0)!=0;
      if ($tobool44) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $61=$dim_addr;
      $k=$61;
      label = 29; break;
    case 29: 
      var $62=$k;
      var $dec=((($62)-(1))|0);
      $k=$dec;
      var $tobool47=(($62)|0)!=0;
      if ($tobool47) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $63=$k;
      var $64=HEAP32[(($center)>>2)];
      var $arrayidx49=(($64+($63<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-10.101,HEAP32[(($arrayidx49)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx49)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 31: 
      var $65=HEAP32[((((5247040)|0))>>2)];
      var $tobool51=(($65)|0)!=0;
      if ($tobool51) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $66=HEAP32[((((5248924)|0))>>2)];
      var $67=HEAP32[(($simplex)>>2)];
      _qh_printpoints($66, ((5256544)|0), $67);
      label = 33; break;
    case 33: 
      label = 65; break;
    case 34: 
      $i=0;
      label = 35; break;
    case 35: 
      var $68=$i;
      var $69=$dim_addr;
      var $cmp56=(($68)|0) < (($69)|0);
      if ($cmp56) { label = 36; break; } else { label = 55; break; }
    case 36: 
      var $70=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$70;
      var $71=$sum2row;
      $sum2p=$71;
      $k=0;
      label = 37; break;
    case 37: 
      var $72=$k;
      var $73=$dim_addr;
      var $cmp59=(($72)|0) < (($73)|0);
      if ($cmp59) { label = 38; break; } else { label = 53; break; }
    case 38: 
      var $74=$gmcoord;
      var $75=$k;
      var $76=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx61=(($76+($75<<2))|0);
      HEAP32[(($arrayidx61)>>2)]=$74;
      var $77=$k;
      var $78=$i;
      var $cmp62=(($77)|0)==(($78)|0);
      if ($cmp62) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $79=$dim_addr;
      $j=$79;
      label = 40; break;
    case 40: 
      var $80=$j;
      var $dec65=((($80)-(1))|0);
      $j=$dec65;
      var $tobool66=(($80)|0)!=0;
      if ($tobool66) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $81=$sum2p;
      var $incdec_ptr68=(($81+8)|0);
      $sum2p=$incdec_ptr68;
      var $82=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($81)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($81)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $83=$gmcoord;
      var $incdec_ptr69=(($83+8)|0);
      $gmcoord=$incdec_ptr69;
      (HEAPF64[(tempDoublePtr)>>3]=$82,HEAP32[(($83)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($83)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 42: 
      label = 51; break;
    case 43: 
      $point=0;
      var $84=HEAP32[(($simplex)>>2)];
      var $tobool72=(($84)|0)!=0;
      if ($tobool72) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $85=HEAP32[(($simplex)>>2)];
      var $e74=(($85+4)|0);
      var $arrayidx75=(($e74)|0);
      var $p76=$arrayidx75;
      var $86=$p76;
      $pointp=$86;
      label = 45; break;
    case 45: 
      var $87=$pointp;
      var $incdec_ptr78=(($87+4)|0);
      $pointp=$incdec_ptr78;
      var $88=HEAP32[(($87)>>2)];
      $point=$88;
      var $tobool79=(($88)|0)!=0;
      if ($tobool79) { label = 46; break; } else { label = 49; break; }
    case 46: 
      var $89=$point;
      var $90=$point0;
      var $cmp81=(($89)|0)!=(($90)|0);
      if ($cmp81) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $91=$k;
      var $92=$point;
      var $arrayidx83=(($92+($91<<3))|0);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx83)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx83)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $94=$k;
      var $95=$point0;
      var $arrayidx84=(($95+($94<<3))|0);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub85=($93)-($96);
      var $97=$gmcoord;
      var $incdec_ptr86=(($97+8)|0);
      $gmcoord=$incdec_ptr86;
      (HEAPF64[(tempDoublePtr)>>3]=$sub85,HEAP32[(($97)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($97)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 48; break;
    case 48: 
      label = 45; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $98=$k;
      var $inc92=((($98)+(1))|0);
      $k=$inc92;
      label = 37; break;
    case 53: 
      var $99=HEAP32[((((5249196)|0))>>2)];
      var $100=$dim_addr;
      var $call94=_qh_determinant($99, $100, $nearzero);
      var $101=$factor;
      var $mul95=($call94)*($101);
      var $102=$i;
      var $103=$point0;
      var $arrayidx96=(($103+($102<<3))|0);
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx96)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx96)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add97=($mul95)+($104);
      var $105=$i;
      var $106=HEAP32[(($center)>>2)];
      var $arrayidx98=(($106+($105<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$add97,HEAP32[(($arrayidx98)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx98)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 54; break;
    case 54: 
      var $107=$i;
      var $inc100=((($107)+(1))|0);
      $i=$inc100;
      label = 35; break;
    case 55: 
      var $108=HEAP32[((((5247040)|0))>>2)];
      var $cmp102=(($108)|0) >= 3;
      if ($cmp102) { label = 56; break; } else { label = 64; break; }
    case 56: 
      var $109=HEAP32[((((5248924)|0))>>2)];
      var $110=$det;
      var $111=$factor;
      _qh_fprintf($109, 8033, ((5256176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$110,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$111,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $112=HEAP32[((((5248924)|0))>>2)];
      var $113=$dim_addr;
      _qh_printmatrix($112, ((5255888)|0), $center, 1, $113);
      var $114=HEAP32[((((5247040)|0))>>2)];
      var $cmp104=(($114)|0) >= 5;
      if ($cmp104) { label = 57; break; } else { label = 63; break; }
    case 57: 
      var $115=HEAP32[((((5248924)|0))>>2)];
      var $116=HEAP32[(($simplex)>>2)];
      _qh_printpoints($115, ((5255628)|0), $116);
      $point=0;
      var $117=HEAP32[(($simplex)>>2)];
      var $tobool106=(($117)|0)!=0;
      if ($tobool106) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $118=HEAP32[(($simplex)>>2)];
      var $e108=(($118+4)|0);
      var $arrayidx109=(($e108)|0);
      var $p110=$arrayidx109;
      var $119=$p110;
      $pointp=$119;
      label = 59; break;
    case 59: 
      var $120=$pointp;
      var $incdec_ptr112=(($120+4)|0);
      $pointp=$incdec_ptr112;
      var $121=HEAP32[(($120)>>2)];
      $point=$121;
      var $tobool113=(($121)|0)!=0;
      if ($tobool113) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $122=HEAP32[((((5248924)|0))>>2)];
      var $123=$point;
      var $call115=_qh_pointid($123);
      var $124=$point;
      var $125=HEAP32[(($center)>>2)];
      var $126=$dim_addr;
      var $call116=_qh_pointdist($124, $125, $126);
      _qh_fprintf($122, 8034, ((5255396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call115,(HEAPF64[(tempDoublePtr)>>3]=$call116,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 59; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $127=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($127, 8035, ((5267960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $128=HEAP32[(($simplex)>>2)];
      var $129=$points_addr;
      var $cmp122=(($128)|0)!=(($129)|0);
      if ($cmp122) { label = 66; break; } else { label = 67; break; }
    case 66: 
      _qh_settempfree($simplex);
      label = 67; break;
    case 67: 
      var $130=HEAP32[(($center)>>2)];
      STACKTOP = __stackBase__;
      return $130;
    default: assert(0, "bad label: " + label);
  }

}
_qh_voronoi_center["X"]=1;

function _qh_inthresholds($normal, $angle) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $normal_addr;
      var $angle_addr;
      var $within;
      var $k;
      var $threshold;
      $normal_addr=$normal;
      $angle_addr=$angle;
      $within=1;
      var $0=$angle_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$angle_addr;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $2=$k;
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $4=$k;
      var $5=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx=(($5+($4<<3))|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $threshold=$6;
      var $7=$threshold;
      var $cmp1=$7 > -8.988465674311579e+307;
      if ($cmp1) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $8=$k;
      var $9=$normal_addr;
      var $arrayidx3=(($9+($8<<3))|0);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$threshold;
      var $cmp4=$10 < $11;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $within=0;
      label = 9; break;
    case 9: 
      var $12=$angle_addr;
      var $tobool7=(($12)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $13=$k;
      var $14=$normal_addr;
      var $arrayidx9=(($14+($13<<3))|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=$threshold;
      var $sub=($16)-($15);
      $threshold=$sub;
      var $17=$threshold;
      var $cmp10=$17 < 0;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $18=$threshold;
      var $sub11=(-$18);
      var $cond = $sub11;label = 13; break;
    case 12: 
      var $19=$threshold;
      var $cond = $19;label = 13; break;
    case 13: 
      var $cond;
      var $20=$angle_addr;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($21)+($cond);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $22=$k;
      var $23=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx14=(($23+($22<<3))|0);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp15=$24 < 8.988465674311579e+307;
      if ($cmp15) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $25=$k;
      var $26=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx17=(($26+($25<<3))|0);
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $threshold=$27;
      var $28=$k;
      var $29=$normal_addr;
      var $arrayidx18=(($29+($28<<3))|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=$threshold;
      var $cmp19=$30 > $31;
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $within=0;
      label = 18; break;
    case 18: 
      var $32=$angle_addr;
      var $tobool22=(($32)|0)!=0;
      if ($tobool22) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $33=$k;
      var $34=$normal_addr;
      var $arrayidx24=(($34+($33<<3))|0);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=$threshold;
      var $sub25=($36)-($35);
      $threshold=$sub25;
      var $37=$threshold;
      var $cmp26=$37 < 0;
      if ($cmp26) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$threshold;
      var $sub28=(-$38);
      var $cond31 = $sub28;label = 22; break;
    case 21: 
      var $39=$threshold;
      var $cond31 = $39;label = 22; break;
    case 22: 
      var $cond31;
      var $40=$angle_addr;
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add32=($41)+($cond31);
      (HEAPF64[(tempDoublePtr)>>3]=$add32,HEAP32[(($40)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($40)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $42=$k;
      var $inc=((($42)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 26: 
      var $43=$within;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
_qh_inthresholds["X"]=1;

function _qh_findgooddist($point, $facetA, $distp, $facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $point_addr;
      var $facetA_addr;
      var $distp_addr;
      var $facetlist_addr;
      var $bestdist=__stackBase__;
      var $dist=(__stackBase__)+(8);
      var $neighbor;
      var $neighborp;
      var $bestfacet;
      var $facet;
      var $goodseen;
      $point_addr=$point;
      $facetA_addr=$facetA;
      $distp_addr=$distp;
      $facetlist_addr=$facetlist;
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $bestfacet=0;
      $goodseen=0;
      var $0=$facetA_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 19;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[(((((5243164)|0)))>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(((((5243164)|0)))>>2)]=$inc;
      var $6=$point_addr;
      var $7=$facetA_addr;
      _qh_distplane($6, $7, $bestdist);
      var $8=$facetA_addr;
      $bestfacet=$8;
      $goodseen=1;
      label = 4; break;
    case 4: 
      var $9=$facetA_addr;
      _qh_removefacet($9);
      var $10=$facetA_addr;
      _qh_appendfacet($10);
      var $11=$facetA_addr;
      var $12=$facetlist_addr;
      HEAP32[(($12)>>2)]=$11;
      var $13=HEAP32[((((5249156)|0))>>2)];
      var $inc1=((($13)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc1;
      var $14=$facetA_addr;
      var $visitid=(($14+68)|0);
      HEAP32[(($visitid)>>2)]=$inc1;
      var $15=$facetlist_addr;
      var $16=HEAP32[(($15)>>2)];
      var $tobool2=(($16)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 28; break; }
    case 5: 
      var $17=$facetlist_addr;
      var $18=HEAP32[(($17)>>2)];
      $facet=$18;
      label = 6; break;
    case 6: 
      var $19=$facet;
      var $tobool4=(($19)|0)!=0;
      if ($tobool4) { label = 7; break; } else { var $22 = 0;label = 8; break; }
    case 7: 
      var $20=$facet;
      var $next=(($20+44)|0);
      var $21=HEAP32[(($next)>>2)];
      var $tobool5=(($21)|0)!=0;
      var $22 = $tobool5;label = 8; break;
    case 8: 
      var $22;
      if ($22) { label = 9; break; } else { label = 27; break; }
    case 9: 
      $neighbor=0;
      var $23=$facet;
      var $neighbors=(($23+56)|0);
      var $24=HEAP32[(($neighbors)>>2)];
      var $tobool6=(($24)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $25=$facet;
      var $neighbors8=(($25+56)|0);
      var $26=HEAP32[(($neighbors8)>>2)];
      var $e=(($26+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $27=$p;
      $neighborp=$27;
      label = 11; break;
    case 11: 
      var $28=$neighborp;
      var $incdec_ptr=(($28+4)|0);
      $neighborp=$incdec_ptr;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool10=(($29)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $30=$neighbor;
      var $visitid12=(($30+68)|0);
      var $31=HEAP32[(($visitid12)>>2)];
      var $32=HEAP32[((((5249156)|0))>>2)];
      var $cmp=(($31)|0)==(($32)|0);
      if ($cmp) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 11; break;
    case 14: 
      var $33=HEAP32[((((5249156)|0))>>2)];
      var $34=$neighbor;
      var $visitid15=(($34+68)|0);
      HEAP32[(($visitid15)>>2)]=$33;
      var $35=$goodseen;
      var $tobool16=(($35)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $36=$neighbor;
      var $37=$36;
      var $bf_field_offs17=(($37+76)|0);
      var $38=$bf_field_offs17;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 19;
      var $bf_clear18=$40 & 1;
      var $tobool19=(($bf_clear18)|0)!=0;
      if ($tobool19) { label = 17; break; } else { label = 16; break; }
    case 16: 
      label = 11; break;
    case 17: 
      var $41=HEAP32[(((((5243164)|0)))>>2)];
      var $inc22=((($41)+(1))|0);
      HEAP32[(((((5243164)|0)))>>2)]=$inc22;
      var $42=$point_addr;
      var $43=$neighbor;
      _qh_distplane($42, $43, $dist);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp23=$44 > 0;
      if ($cmp23) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $45=$neighbor;
      _qh_removefacet($45);
      var $46=$neighbor;
      _qh_appendfacet($46);
      var $47=$neighbor;
      var $48=$47;
      var $bf_field_offs25=(($48+76)|0);
      var $49=$bf_field_offs25;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50 >>> 19;
      var $bf_clear26=$51 & 1;
      var $tobool27=(($bf_clear26)|0)!=0;
      if ($tobool27) { label = 19; break; } else { label = 22; break; }
    case 19: 
      $goodseen=1;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp29=$52 > $53;
      if ($cmp29) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$54,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $55=$neighbor;
      $bestfacet=$55;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 11; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$facet;
      var $next35=(($56+44)|0);
      var $57=HEAP32[(($next35)>>2)];
      $facet=$57;
      label = 6; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $58=$bestfacet;
      var $tobool38=(($58)|0)!=0;
      if ($tobool38) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $60=$distp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[(($60)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($60)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp40=(($61)|0) >= 2;
      if ($cmp40) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$point_addr;
      var $call=_qh_pointid($63);
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $65=$bestfacet;
      var $id=(($65+72)|0);
      var $66=HEAP32[(($id)>>2)];
      _qh_fprintf($62, 2003, ((5279548)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,(HEAPF64[(tempDoublePtr)>>3]=$64,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$66,tempInt));
      label = 31; break;
    case 31: 
      var $67=$bestfacet;
      $retval=$67;
      label = 35; break;
    case 32: 
      var $68=HEAP32[((((5247040)|0))>>2)];
      var $cmp44=(($68)|0) >= 4;
      if ($cmp44) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $69=HEAP32[((((5248924)|0))>>2)];
      var $70=$point_addr;
      var $call46=_qh_pointid($70);
      var $71=$facetA_addr;
      var $id47=(($71+72)|0);
      var $72=HEAP32[(($id47)>>2)];
      _qh_fprintf($69, 4011, ((5278412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call46,HEAP32[(((tempInt)+(4))>>2)]=$72,tempInt));
      label = 34; break;
    case 34: 
      $retval=0;
      label = 35; break;
    case 35: 
      var $73=$retval;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findgooddist["X"]=1;

function _qh_getarea($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $area;
      var $dist=__stackBase__;
      var $facet;
      $facetlist_addr=$facetlist;
      var $0=HEAP32[((((5249048)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 36; break;
    case 4: 
      var $1=HEAP32[((((5247372)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 8020, ((5277712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 9; break;
    case 6: 
      var $3=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($3)|0) >= 1;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($4, 1001, ((5277048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249148)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249148)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249140)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249140)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $5=$facetlist_addr;
      var $tobool6=(($5)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 35; break; }
    case 10: 
      var $6=$facetlist_addr;
      $facet=$6;
      label = 11; break;
    case 11: 
      var $7=$facet;
      var $tobool8=(($7)|0)!=0;
      if ($tobool8) { label = 12; break; } else { var $10 = 0;label = 13; break; }
    case 12: 
      var $8=$facet;
      var $next=(($8+44)|0);
      var $9=HEAP32[(($next)>>2)];
      var $tobool9=(($9)|0)!=0;
      var $10 = $tobool9;label = 13; break;
    case 13: 
      var $10;
      if ($10) { label = 14; break; } else { label = 34; break; }
    case 14: 
      var $11=$facet;
      var $normal=(($11+24)|0);
      var $12=HEAP32[(($normal)>>2)];
      var $tobool10=(($12)|0)!=0;
      if ($tobool10) { label = 16; break; } else { label = 15; break; }
    case 15: 
      label = 33; break;
    case 16: 
      var $13=$facet;
      var $14=$13;
      var $bf_field_offs=(($14+76)|0);
      var $15=$bf_field_offs;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 17;
      var $bf_clear=$17 & 1;
      var $tobool13=(($bf_clear)|0)!=0;
      if ($tobool13) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $18=HEAP32[((((5246960)|0))>>2)];
      var $tobool14=(($18)|0)!=0;
      if ($tobool14) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 33; break;
    case 19: 
      var $19=$facet;
      var $20=$19;
      var $bf_field_offs17=(($20+76)|0);
      var $21=$bf_field_offs17;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 >>> 20;
      var $bf_clear18=$23 & 1;
      var $tobool19=(($bf_clear18)|0)!=0;
      if ($tobool19) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $24=$facet;
      var $call=_qh_facetarea($24);
      var $25=$facet;
      var $f=(($25+28)|0);
      var $area21=$f;
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[(($area21)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($area21)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $26=$facet;
      var $27=$26;
      var $bf_field_offs22=(($27+76)|0);
      var $28=$bf_field_offs22;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & -1048577;
      var $31=$30 | 1048576;
      HEAP32[(($28)>>2)]=$31;
      label = 21; break;
    case 21: 
      var $32=$facet;
      var $f24=(($32+28)|0);
      var $area25=$f24;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area25)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area25)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $area=$33;
      var $34=HEAP32[((((5247000)|0))>>2)];
      var $tobool26=(($34)|0)!=0;
      if ($tobool26) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $35=$facet;
      var $36=$35;
      var $bf_field_offs28=(($36+76)|0);
      var $37=$bf_field_offs28;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 >>> 17;
      var $bf_clear29=$39 & 1;
      var $40=HEAP32[((((5247460)|0))>>2)];
      var $cmp30=(($bf_clear29)|0)==(($40)|0);
      if ($cmp30) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $41=$area;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($42)+($41);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5249140)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249140)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 24; break;
    case 24: 
      label = 26; break;
    case 25: 
      var $43=$area;
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add34=($44)+($43);
      (HEAPF64[(tempDoublePtr)>>3]=$add34,HEAP32[((((5249140)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249140)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $45=HEAP32[((((5248928)|0))>>2)];
      var $46=$facet;
      _qh_distplane($45, $46, $dist);
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$47);
      var $48=$area;
      var $mul=($sub)*($48);
      var $49=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($49)|0);
      var $div=($mul)/($conv);
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add35=($50)+($div);
      (HEAPF64[(tempDoublePtr)>>3]=$add35,HEAP32[((((5249148)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249148)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 26; break;
    case 26: 
      var $51=HEAP32[((((5247316)|0))>>2)];
      var $tobool37=(($51)|0)!=0;
      if ($tobool37) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $52=$area;
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add39=($53)+($52);
      (HEAPF64[(tempDoublePtr)>>3]=$add39,HEAP32[((((5243068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243076)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243076)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $55=$area;
      var $cmp40=$54 < $55;
      if ($cmp40) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $56=$area;
      (HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[((((5243076)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243076)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      var $57=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $58=$area;
      var $cmp44=$57 > $58;
      if ($cmp44) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $59=$area;
      (HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[((((5243084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $60=$facet;
      var $next49=(($60+44)|0);
      var $61=HEAP32[(($next49)>>2)];
      $facet=$61;
      label = 11; break;
    case 34: 
      label = 35; break;
    case 35: 
      HEAP32[((((5249048)|0))>>2)]=1;
      label = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getarea["X"]=1;

function _qh_gram_schmidt($dim, $row) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_addr;
      var $row_addr;
      var $rowi;
      var $rowj;
      var $norm;
      var $i;
      var $j;
      var $k;
      $dim_addr=$dim;
      $row_addr=$row;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 27; break; }
    case 4: 
      var $2=$i;
      var $3=$row_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $rowi=$4;
      $norm=0;
      var $5=$dim_addr;
      $k=$5;
      label = 5; break;
    case 5: 
      var $6=$k;
      var $dec=((($6)-(1))|0);
      $k=$dec;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$rowi;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $9=$rowi;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($8)*($10);
      var $11=$norm;
      var $add=($11)+($mul);
      $norm=$add;
      label = 7; break;
    case 7: 
      var $12=$rowi;
      var $incdec_ptr=(($12+8)|0);
      $rowi=$incdec_ptr;
      label = 5; break;
    case 8: 
      var $13=$norm;
      var $call=Math.sqrt($13);
      $norm=$call;
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244052)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244052)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=$norm;
      var $cmp3=$14 > $15;
      if ($cmp3) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$norm;
      (HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[((((5244052)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244052)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      var $17=$norm;
      var $cmp4=$17 == 0;
      if ($cmp4) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 28; break;
    case 12: 
      var $18=$dim_addr;
      $k=$18;
      label = 13; break;
    case 13: 
      var $19=$k;
      var $dec8=((($19)-(1))|0);
      $k=$dec8;
      var $tobool9=(($19)|0)!=0;
      if ($tobool9) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $20=$norm;
      var $21=$rowi;
      var $incdec_ptr11=((($21)-(8))|0);
      $rowi=$incdec_ptr11;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($incdec_ptr11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($incdec_ptr11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($22)/($20);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($incdec_ptr11)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($incdec_ptr11)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 13; break;
    case 15: 
      var $23=$i;
      var $add13=((($23)+(1))|0);
      $j=$add13;
      label = 16; break;
    case 16: 
      var $24=$j;
      var $25=$dim_addr;
      var $cmp15=(($24)|0) < (($25)|0);
      if ($cmp15) { label = 17; break; } else { label = 25; break; }
    case 17: 
      var $26=$j;
      var $27=$row_addr;
      var $arrayidx17=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx17)>>2)];
      $rowj=$28;
      $norm=0;
      var $29=$dim_addr;
      $k=$29;
      label = 18; break;
    case 18: 
      var $30=$k;
      var $dec19=((($30)-(1))|0);
      $k=$dec19;
      var $tobool20=(($30)|0)!=0;
      if ($tobool20) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $31=$rowi;
      var $incdec_ptr22=(($31+8)|0);
      $rowi=$incdec_ptr22;
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($31)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($31)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$rowj;
      var $incdec_ptr23=(($33+8)|0);
      $rowj=$incdec_ptr23;
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($33)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($33)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul24=($32)*($34);
      var $35=$norm;
      var $add25=($35)+($mul24);
      $norm=$add25;
      label = 18; break;
    case 20: 
      var $36=$dim_addr;
      $k=$36;
      label = 21; break;
    case 21: 
      var $37=$k;
      var $dec28=((($37)-(1))|0);
      $k=$dec28;
      var $tobool29=(($37)|0)!=0;
      if ($tobool29) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $38=$rowi;
      var $incdec_ptr31=((($38)-(8))|0);
      $rowi=$incdec_ptr31;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($incdec_ptr31)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($incdec_ptr31)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=$norm;
      var $mul32=($39)*($40);
      var $41=$rowj;
      var $incdec_ptr33=((($41)-(8))|0);
      $rowj=$incdec_ptr33;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($incdec_ptr33)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($incdec_ptr33)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($42)-($mul32);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($incdec_ptr33)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($incdec_ptr33)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $43=$j;
      var $inc=((($43)+(1))|0);
      $j=$inc;
      label = 16; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $44=$i;
      var $inc38=((($44)+(1))|0);
      $i=$inc38;
      label = 3; break;
    case 27: 
      $retval=1;
      label = 28; break;
    case 28: 
      var $45=$retval;

      return $45;
    default: assert(0, "bad label: " + label);
  }

}
_qh_gram_schmidt["X"]=1;

function _qh_maxabsval($normal, $dim) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $normal_addr;
      var $dim_addr;
      var $maxval;
      var $maxp;
      var $colp;
      var $absval;
      var $k;
      $normal_addr=$normal;
      $dim_addr=$dim;
      $maxval=-1.7976931348623157e+308;
      $maxp=0;
      var $0=$dim_addr;
      $k=$0;
      var $1=$normal_addr;
      $colp=$1;
      label = 3; break;
    case 3: 
      var $2=$k;
      var $dec=((($2)-(1))|0);
      $k=$dec;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $3=$colp;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$4 < 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$colp;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$6);
      var $cond = $sub;label = 7; break;
    case 6: 
      var $7=$colp;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $8;label = 7; break;
    case 7: 
      var $cond;
      $absval=$cond;
      var $9=$absval;
      var $10=$maxval;
      var $cmp1=$9 > $10;
      if ($cmp1) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$absval;
      $maxval=$11;
      var $12=$colp;
      $maxp=$12;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$colp;
      var $incdec_ptr=(($13+8)|0);
      $colp=$incdec_ptr;
      label = 3; break;
    case 11: 
      var $14=$maxp;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}
_qh_maxabsval["X"]=1;

function _qh_joggleinput() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $seed=__stackBase__;
      var $size;
      var $coordp;
      var $inputp;
      var $randr;
      var $randa;
      var $randb;
      var $maxjoggle;
      var $0=HEAP32[((((5247528)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247520)|0))>>2)];
      HEAP32[((((5247528)|0))>>2)]=$1;
      var $2=HEAP32[((((5247524)|0))>>2)];
      HEAP32[((((5247532)|0))>>2)]=$2;
      var $3=HEAP32[((((5247516)|0))>>2)];
      var $4=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($3)*($4))&-1);
      var $mul1=((($mul<<3))&-1);
      $size=$mul1;
      var $5=$size;
      var $call=_qh_malloc($5);
      var $6=$call;
      HEAP32[((((5247520)|0))>>2)]=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $7=HEAP32[((((5248924)|0))>>2)];
      var $8=HEAP32[((((5247516)|0))>>2)];
      _qh_fprintf($7, 6009, ((5276564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      _qh_errexit(4, 0, 0);
      label = 5; break;
    case 5: 
      HEAP32[((((5247524)|0))>>2)]=1;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$9 == 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=HEAP32[((((5247528)|0))>>2)];
      var $11=HEAP32[((((5247516)|0))>>2)];
      var $12=HEAP32[((((5247508)|0))>>2)];
      var $call5=_qh_detjoggle($10, $11, $12);
      (HEAPF64[(tempDoublePtr)>>3]=$call5,HEAP32[((((5249056)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249056)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      _qh_option(((5276136)|0), 0, ((5249056)|0));
      label = 7; break;
    case 7: 
      label = 18; break;
    case 8: 
      var $13=HEAP32[((((5247380)|0))>>2)];
      var $tobool7=(($13)|0)!=0;
      if ($tobool7) { label = 17; break; } else { label = 9; break; }
    case 9: 
      var $14=HEAP32[((((5249032)|0))>>2)];
      var $cmp8=(($14)|0) > 2;
      if ($cmp8) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $15=HEAP32[((((5249032)|0))>>2)];
      var $sub=((($15)-(2))|0);
      var $sub10=((($sub)-(1))|0);
      var $rem=((($sub10)|0))%(1);
      var $cmp11=(($rem)|0)==0;
      if ($cmp11) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul13=($16)*(0.01);
      $maxjoggle=$mul13;
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=$maxjoggle;
      var $cmp14=$17 < $18;
      if ($cmp14) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul16=($19)*(10);
      (HEAPF64[(tempDoublePtr)>>3]=$mul16,HEAP32[((((5249056)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249056)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=$maxjoggle;
      var $cmp17=$20 > $21;
      if ($cmp17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=$maxjoggle;
      (HEAPF64[(tempDoublePtr)>>3]=$22,HEAP32[((((5249056)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249056)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      _qh_option(((5276136)|0), 0, ((5249056)|0));
      label = 18; break;
    case 18: 
      var $23=HEAP32[((((5249032)|0))>>2)];
      var $cmp24=(($23)|0) > 1;
      if ($cmp24) { label = 19; break; } else { label = 24; break; }
    case 19: 
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($25)/(4);
      var $cmp26=$div < 0.1;
      if ($cmp26) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $cond = 0.1;label = 22; break;
    case 21: 
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div27=($26)/(4);
      var $cond = $div27;label = 22; break;
    case 22: 
      var $cond;
      var $cmp28=$24 > $cond;
      if ($cmp28) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $27=HEAP32[((((5248924)|0))>>2)];
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($27, 6010, ((5275396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$28,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(5, 0, 0);
      label = 24; break;
    case 24: 
      var $call31=_qh_rand();
      HEAP32[(($seed)>>2)]=$call31;
      _qh_option(((5274704)|0), $seed, 0);
      var $29=HEAP32[((((5247040)|0))>>2)];
      var $tobool32=(($29)|0)!=0;
      if ($tobool32) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $30=HEAP32[((((5248924)|0))>>2)];
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $32=HEAP32[(($seed)>>2)];
      _qh_fprintf($30, 6, ((5274092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$32,tempInt));
      label = 26; break;
    case 26: 
      var $33=HEAP32[((((5247528)|0))>>2)];
      $inputp=$33;
      var $34=HEAP32[((((5247520)|0))>>2)];
      $coordp=$34;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul35=($35)*(2);
      var $div36=($mul35)/(2147483646);
      $randa=$div36;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub37=(-$36);
      $randb=$sub37;
      var $37=HEAP32[((((5247516)|0))>>2)];
      var $38=HEAP32[((((5247508)|0))>>2)];
      var $mul38=((($37)*($38))&-1);
      $size=$mul38;
      var $39=$size;
      $i=$39;
      label = 27; break;
    case 27: 
      var $40=$i;
      var $dec=((($40)-(1))|0);
      $i=$dec;
      var $tobool39=(($40)|0)!=0;
      if ($tobool39) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $call40=_qh_rand();
      var $conv=(($call40)|0);
      $randr=$conv;
      var $41=$inputp;
      var $incdec_ptr=(($41+8)|0);
      $inputp=$incdec_ptr;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $43=$randr;
      var $44=$randa;
      var $mul41=($43)*($44);
      var $45=$randb;
      var $add=($mul41)+($45);
      var $add42=($42)+($add);
      var $46=$coordp;
      var $incdec_ptr43=(($46+8)|0);
      $coordp=$incdec_ptr43;
      (HEAPF64[(tempDoublePtr)>>3]=$add42,HEAP32[(($46)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($46)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 27; break;
    case 29: 
      var $47=HEAP32[((((5247000)|0))>>2)];
      var $tobool44=(($47)|0)!=0;
      if ($tobool44) { label = 30; break; } else { label = 31; break; }
    case 30: 
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249248)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249248)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249240)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249240)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249232)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249232)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $48=HEAP32[((((5247508)|0))>>2)];
      var $49=HEAP32[((((5247516)|0))>>2)];
      var $50=HEAP32[((((5247520)|0))>>2)];
      _qh_setdelaunay($48, $49, $50);
      label = 31; break;
    case 31: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_joggleinput["X"]=1;

function _qh_setdelaunay($dim, $count, $points) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $count_addr;
      var $points_addr;
      var $i;
      var $k;
      var $coordp;
      var $coord;
      var $paraboloid;
      $dim_addr=$dim;
      $count_addr=$count;
      $points_addr=$points;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$count_addr;
      _qh_fprintf($1, 11, ((5260600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      label = 4; break;
    case 4: 
      var $3=$points_addr;
      $coordp=$3;
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $5=$count_addr;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $6=$coordp;
      var $incdec_ptr=(($6+8)|0);
      $coordp=$incdec_ptr;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $coord=$7;
      var $8=$coord;
      var $9=$coord;
      var $mul=($8)*($9);
      $paraboloid=$mul;
      var $10=$dim_addr;
      var $sub=((($10)-(2))|0);
      $k=$sub;
      label = 7; break;
    case 7: 
      var $11=$k;
      var $dec=((($11)-(1))|0);
      $k=$dec;
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$coordp;
      var $incdec_ptr4=(($12+8)|0);
      $coordp=$incdec_ptr4;
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $coord=$13;
      var $14=$coord;
      var $15=$coord;
      var $mul5=($14)*($15);
      var $16=$paraboloid;
      var $add=($16)+($mul5);
      $paraboloid=$add;
      label = 7; break;
    case 9: 
      var $17=$paraboloid;
      var $18=$coordp;
      var $incdec_ptr6=(($18+8)|0);
      $coordp=$incdec_ptr6;
      (HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(($18)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($18)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249232)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249232)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp8=$20 < 8.988465674311579e+307;
      if ($cmp8) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$points_addr;
      var $22=$count_addr;
      var $23=$dim_addr;
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249232)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249232)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249240)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249240)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249248)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249248)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_scalelast($21, $22, $23, $24, $25, $26);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdelaunay["X"]=1;

function _qh_maxmin($points, $numpoints, $dimension) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dimension_addr;
      var $k;
      var $maxcoord;
      var $temp;
      var $minimum;
      var $maximum;
      var $point;
      var $pointtemp;
      var $set=__stackBase__;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dimension_addr=$dimension;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5248636)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248636)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[((((5248660)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248660)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5248652)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248652)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[((((5249168)|0))>>2)]=0;
      var $0=HEAP32[((((5248584)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((((5249164)|0))>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$dimension_addr;
      var $mul=((($1<<1))&-1);
      var $call=_qh_settemp($mul);
      HEAP32[(($set)>>2)]=$call;
      $k=0;
      label = 5; break;
    case 5: 
      var $2=$k;
      var $3=$dimension_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { label = 6; break; } else { label = 42; break; }
    case 6: 
      var $4=$points_addr;
      var $5=HEAP32[((((5247020)|0))>>2)];
      var $cmp1=(($4)|0)==(($5)|0);
      if ($cmp1) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $6=$points_addr;
      var $7=$dimension_addr;
      var $add_ptr=(($6+($7<<3))|0);
      $maximum=$add_ptr;
      $minimum=$add_ptr;
      label = 9; break;
    case 8: 
      var $8=$points_addr;
      $maximum=$8;
      $minimum=$8;
      label = 9; break;
    case 9: 
      var $9=$points_addr;
      $point=$9;
      var $10=$points_addr;
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $12=$numpoints_addr;
      var $mul4=((($11)*($12))&-1);
      var $add_ptr5=(($10+($mul4<<3))|0);
      $pointtemp=$add_ptr5;
      label = 10; break;
    case 10: 
      var $13=$point;
      var $14=$pointtemp;
      var $cmp7=(($13)>>>0) < (($14)>>>0);
      if ($cmp7) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $15=$point;
      var $16=HEAP32[((((5247020)|0))>>2)];
      var $cmp9=(($15)|0)==(($16)|0);
      if ($cmp9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 19; break;
    case 13: 
      var $17=$k;
      var $18=$maximum;
      var $arrayidx=(($18+($17<<3))|0);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=$k;
      var $21=$point;
      var $arrayidx12=(($21+($20<<3))|0);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp13=$19 < $22;
      if ($cmp13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $23=$point;
      $maximum=$23;
      label = 18; break;
    case 15: 
      var $24=$k;
      var $25=$minimum;
      var $arrayidx16=(($25+($24<<3))|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $27=$k;
      var $28=$point;
      var $arrayidx17=(($28+($27<<3))|0);
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp18=$26 > $29;
      if ($cmp18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=$point;
      $minimum=$30;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $31=HEAP32[((((5247508)|0))>>2)];
      var $32=$point;
      var $add_ptr22=(($32+($31<<3))|0);
      $point=$add_ptr22;
      label = 10; break;
    case 20: 
      var $33=$k;
      var $34=$dimension_addr;
      var $sub=((($34)-(1))|0);
      var $cmp23=(($33)|0)==(($sub)|0);
      if ($cmp23) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $35=$k;
      var $36=$minimum;
      var $arrayidx25=(($36+($35<<3))|0);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx25)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx25)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$37,HEAP32[((((5248700)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248700)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $38=$k;
      var $39=$maximum;
      var $arrayidx26=(($39+($38<<3))|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx26)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx26)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$40,HEAP32[((((5248644)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248644)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 22; break;
    case 22: 
      var $41=HEAP32[((((5247392)|0))>>2)];
      var $tobool28=(($41)|0)!=0;
      if ($tobool28) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $42=$k;
      var $43=$dimension_addr;
      var $sub29=((($43)-(1))|0);
      var $cmp30=(($42)|0)==(($sub29)|0);
      if ($cmp30) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxcoord=$44;
      label = 38; break;
    case 25: 
      var $45=$k;
      var $46=$maximum;
      var $arrayidx33=(($46+($45<<3))|0);
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx33)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx33)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $48=$k;
      var $49=$minimum;
      var $arrayidx34=(($49+($48<<3))|0);
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub35=(-$50);
      var $cmp36=$47 < $sub35;
      if ($cmp36) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $51=$k;
      var $52=$minimum;
      var $arrayidx37=(($52+($51<<3))|0);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx37)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx37)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub38=(-$53);
      var $cond = $sub38;label = 28; break;
    case 27: 
      var $54=$k;
      var $55=$maximum;
      var $arrayidx39=(($55+($54<<3))|0);
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx39)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx39)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $56;label = 28; break;
    case 28: 
      var $cond;
      $maxcoord=$cond;
      var $57=HEAP32[((((5247020)|0))>>2)];
      var $tobool40=(($57)|0)!=0;
      if ($tobool40) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $58=$k;
      var $59=HEAP32[((((5247020)|0))>>2)];
      var $arrayidx42=(($59+($58<<3))|0);
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $61=$k;
      var $62=HEAP32[((((5247020)|0))>>2)];
      var $arrayidx43=(($62+($61<<3))|0);
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx43)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx43)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub44=(-$63);
      var $cmp45=$60 < $sub44;
      if ($cmp45) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $64=$k;
      var $65=HEAP32[((((5247020)|0))>>2)];
      var $arrayidx47=(($65+($64<<3))|0);
      var $66=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub48=(-$66);
      var $cond52 = $sub48;label = 32; break;
    case 31: 
      var $67=$k;
      var $68=HEAP32[((((5247020)|0))>>2)];
      var $arrayidx50=(($68+($67<<3))|0);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond52 = $69;label = 32; break;
    case 32: 
      var $cond52;
      $temp=$cond52;
      var $70=$maxcoord;
      var $71=$temp;
      var $cmp53=$70 < $71;
      if ($cmp53) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $72=$temp;
      $maxcoord=$72;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $73=$k;
      var $74=$maximum;
      var $arrayidx57=(($74+($73<<3))|0);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx57)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx57)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=$k;
      var $77=$minimum;
      var $arrayidx58=(($77+($76<<3))|0);
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx58)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx58)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub59=($75)-($78);
      $temp=$sub59;
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $80=$temp;
      var $cmp60=$79 < $80;
      if ($cmp60) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $81=$temp;
      (HEAPF64[(tempDoublePtr)>>3]=$81,HEAP32[((((5248660)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248660)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $82=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $83=$maxcoord;
      var $cmp64=$82 < $83;
      if ($cmp64) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $84=$maxcoord;
      (HEAPF64[(tempDoublePtr)>>3]=$84,HEAP32[((((5248636)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248636)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 40: 
      var $85=$maxcoord;
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248652)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248652)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($86)+($85);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5248652)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248652)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $87=$maximum;
      var $88=$87;
      _qh_setappend($set, $88);
      var $89=$minimum;
      var $90=$89;
      _qh_setappend($set, $90);
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248652)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248652)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul67=($91)*(80);
      var $mul68=($mul67)*(2.220446049250313e-16);
      var $92=$k;
      var $93=HEAP32[((((5248712)|0))>>2)];
      var $arrayidx69=(($93+($92<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul68,HEAP32[(($arrayidx69)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx69)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 41; break;
    case 41: 
      var $94=$k;
      var $inc=((($94)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 42: 
      var $95=HEAP32[((((5247040)|0))>>2)];
      var $cmp72=(($95)|0) >= 1;
      if ($cmp72) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $96=HEAP32[((((5248924)|0))>>2)];
      var $97=HEAP32[(($set)>>2)];
      _qh_printpoints($96, ((5273536)|0), $97);
      label = 44; break;
    case 44: 
      var $98=HEAP32[(($set)>>2)];
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }

}
_qh_maxmin["X"]=1;

function _qh_printpoints($fp, $string, $points) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $points_addr;
      var $point;
      var $pointp;
      $fp_addr=$fp;
      $string_addr=$string;
      $points_addr=$points;
      var $0=$string_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$fp_addr;
      var $2=$string_addr;
      _qh_fprintf($1, 9004, ((5267676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      $point=0;
      var $3=$points_addr;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$points_addr;
      var $e=(($4+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $5=$p;
      $pointp=$5;
      label = 5; break;
    case 5: 
      var $6=$pointp;
      var $incdec_ptr=(($6+4)|0);
      $pointp=$incdec_ptr;
      var $7=HEAP32[(($6)>>2)];
      $point=$7;
      var $tobool3=(($7)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$fp_addr;
      var $9=$point;
      var $call=_qh_pointid($9);
      _qh_fprintf($8, 9005, ((5267276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,tempInt));
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $10=$fp_addr;
      _qh_fprintf($10, 9006, ((5267960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 9: 
      $point=0;
      var $11=$points_addr;
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $12=$points_addr;
      var $e6=(($12+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $13=$p8;
      $pointp=$13;
      label = 11; break;
    case 11: 
      var $14=$pointp;
      var $incdec_ptr10=(($14+4)|0);
      $pointp=$incdec_ptr10;
      var $15=HEAP32[(($14)>>2)];
      $point=$15;
      var $tobool11=(($15)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $16=$fp_addr;
      var $17=$point;
      var $call13=_qh_pointid($17);
      _qh_fprintf($16, 9007, ((5266976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call13,tempInt));
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $18=$fp_addr;
      _qh_fprintf($18, 9008, ((5267960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printpoints["X"]=1;

function _qh_maxouter() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$0 < $1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $2;label = 5; break;
    case 4: 
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $3;label = 5; break;
    case 5: 
      var $cond;
      $dist=$cond;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=$dist;
      var $add=($5)+($4);
      $dist=$add;
      var $6=HEAP32[((((5247040)|0))>>2)];
      var $cmp1=(($6)|0) >= 4;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=HEAP32[((((5248924)|0))>>2)];
      var $8=$dist;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($7, 4012, ((5273052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 7; break;
    case 7: 
      var $10=$dist;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_maxsimplex($dim, $maxpoints, $points, $numpoints, $simplex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $maxpoints_addr;
      var $points_addr;
      var $numpoints_addr;
      var $simplex_addr;
      var $point;
      var $pointp;
      var $pointtemp;
      var $maxpoint;
      var $minx;
      var $maxx;
      var $nearzero=__stackBase__;
      var $maxnearzero;
      var $k;
      var $sizinit;
      var $maxdet;
      var $det;
      var $mincoord;
      var $maxcoord;
      $dim_addr=$dim;
      $maxpoints_addr=$maxpoints;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $simplex_addr=$simplex;
      $minx=0;
      $maxx=0;
      $maxnearzero=0;
      $maxdet=-1.7976931348623157e+308;
      $mincoord=1.7976931348623157e+308;
      $maxcoord=-1.7976931348623157e+308;
      var $0=$simplex_addr;
      var $1=HEAP32[(($0)>>2)];
      var $call=_qh_setsize($1);
      $sizinit=$call;
      var $2=$sizinit;
      var $cmp=(($2)|0) < 2;
      if ($cmp) { label = 3; break; } else { label = 33; break; }
    case 3: 
      var $3=$maxpoints_addr;
      var $call1=_qh_setsize($3);
      var $cmp2=(($call1)|0) >= 2;
      if ($cmp2) { label = 4; break; } else { label = 14; break; }
    case 4: 
      $point=0;
      var $4=$maxpoints_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $5=$maxpoints_addr;
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $pointp=$6;
      label = 6; break;
    case 6: 
      var $7=$pointp;
      var $incdec_ptr=(($7+4)|0);
      $pointp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $point=$8;
      var $tobool5=(($8)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $9=$maxcoord;
      var $10=$point;
      var $arrayidx6=(($10)|0);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp7=$9 < $11;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$point;
      var $arrayidx9=(($12)|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxcoord=$13;
      var $14=$point;
      $maxx=$14;
      label = 9; break;
    case 9: 
      var $15=$mincoord;
      var $16=$point;
      var $arrayidx10=(($16)|0);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp11=$15 > $17;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$point;
      var $arrayidx13=(($18)|0);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mincoord=$19;
      var $20=$point;
      $minx=$20;
      label = 11; break;
    case 11: 
      label = 6; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 25; break;
    case 14: 
      var $21=$points_addr;
      $point=$21;
      var $22=$points_addr;
      var $23=HEAP32[((((5247508)|0))>>2)];
      var $24=$numpoints_addr;
      var $mul=((($23)*($24))&-1);
      var $add_ptr=(($22+($mul<<3))|0);
      $pointtemp=$add_ptr;
      label = 15; break;
    case 15: 
      var $25=$point;
      var $26=$pointtemp;
      var $cmp17=(($25)>>>0) < (($26)>>>0);
      if ($cmp17) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $27=$point;
      var $28=HEAP32[((((5247020)|0))>>2)];
      var $cmp19=(($27)|0)==(($28)|0);
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 23; break;
    case 18: 
      var $29=$maxcoord;
      var $30=$point;
      var $arrayidx22=(($30)|0);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp23=$29 < $31;
      if ($cmp23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $32=$point;
      var $arrayidx25=(($32)|0);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx25)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx25)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxcoord=$33;
      var $34=$point;
      $maxx=$34;
      label = 20; break;
    case 20: 
      var $35=$mincoord;
      var $36=$point;
      var $arrayidx27=(($36)|0);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx27)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx27)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp28=$35 > $37;
      if ($cmp28) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $38=$point;
      var $arrayidx30=(($38)|0);
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mincoord=$39;
      var $40=$point;
      $minx=$40;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $41=HEAP32[((((5247508)|0))>>2)];
      var $42=$point;
      var $add_ptr32=(($42+($41<<3))|0);
      $point=$add_ptr32;
      label = 15; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $43=$simplex_addr;
      var $44=$minx;
      var $45=$44;
      var $call35=_qh_setunique($43, $45);
      var $46=$simplex_addr;
      var $47=HEAP32[(($46)>>2)];
      var $call36=_qh_setsize($47);
      var $cmp37=(($call36)|0) < 2;
      if ($cmp37) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $48=$simplex_addr;
      var $49=$maxx;
      var $50=$49;
      var $call39=_qh_setunique($48, $50);
      label = 27; break;
    case 27: 
      var $51=$simplex_addr;
      var $52=HEAP32[(($51)>>2)];
      var $call41=_qh_setsize($52);
      $sizinit=$call41;
      var $53=$sizinit;
      var $cmp42=(($53)|0) < 2;
      if ($cmp42) { label = 28; break; } else { label = 32; break; }
    case 28: 
      _qh_precision(((5272488)|0));
      var $54=HEAP32[(((((5244548)|0)))>>2)];
      var $55=HEAP32[((((5247508)|0))>>2)];
      var $add=((($55)+(1))|0);
      var $cmp44=(($54)|0) > (($add)|0);
      if ($cmp44) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $56=HEAP32[((((5248924)|0))>>2)];
      var $57=$maxpoints_addr;
      var $call46=_qh_setsize($57);
      var $58=$numpoints_addr;
      var $add47=((($call46)+($58))|0);
      _qh_fprintf($56, 6012, ((5271768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add47,tempInt));
      _qh_errexit(3, 0, 0);
      label = 31; break;
    case 30: 
      var $59=HEAP32[((((5248924)|0))>>2)];
      var $60=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($59, 6013, ((5271124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$60,tempInt));
      _qh_errexit(1, 0, 0);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $61=$sizinit;
      $k=$61;
      label = 34; break;
    case 34: 
      var $62=$k;
      var $63=$dim_addr;
      var $add53=((($63)+(1))|0);
      var $cmp54=(($62)|0) < (($add53)|0);
      if ($cmp54) { label = 35; break; } else { label = 76; break; }
    case 35: 
      $maxpoint=0;
      $maxdet=-1.7976931348623157e+308;
      $point=0;
      var $64=$maxpoints_addr;
      var $tobool56=(($64)|0)!=0;
      if ($tobool56) { label = 36; break; } else { label = 47; break; }
    case 36: 
      var $65=$maxpoints_addr;
      var $e58=(($65+4)|0);
      var $arrayidx59=(($e58)|0);
      var $p60=$arrayidx59;
      var $66=$p60;
      $pointp=$66;
      label = 37; break;
    case 37: 
      var $67=$pointp;
      var $incdec_ptr62=(($67+4)|0);
      $pointp=$incdec_ptr62;
      var $68=HEAP32[(($67)>>2)];
      $point=$68;
      var $tobool63=(($68)|0)!=0;
      if ($tobool63) { label = 38; break; } else { label = 46; break; }
    case 38: 
      var $69=$simplex_addr;
      var $70=HEAP32[(($69)>>2)];
      var $71=$point;
      var $72=$71;
      var $call65=_qh_setin($70, $72);
      var $tobool66=(($call65)|0)!=0;
      if ($tobool66) { label = 45; break; } else { label = 39; break; }
    case 39: 
      var $73=$point;
      var $74=$simplex_addr;
      var $75=HEAP32[(($74)>>2)];
      var $76=$k;
      var $call68=_qh_detsimplex($73, $75, $76, $nearzero);
      $det=$call68;
      var $77=$det;
      var $cmp69=$77 < 0;
      if ($cmp69) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $78=$det;
      var $sub=(-$78);
      var $cond = $sub;label = 42; break;
    case 41: 
      var $79=$det;
      var $cond = $79;label = 42; break;
    case 42: 
      var $cond;
      $det=$cond;
      var $80=$maxdet;
      var $cmp70=$cond > $80;
      if ($cmp70) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $81=$det;
      $maxdet=$81;
      var $82=$point;
      $maxpoint=$82;
      var $83=HEAP32[(($nearzero)>>2)];
      $maxnearzero=$83;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 37; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $84=$maxpoint;
      var $tobool76=(($84)|0)!=0;
      if ($tobool76) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $85=$maxnearzero;
      var $tobool77=(($85)|0)!=0;
      if ($tobool77) { label = 49; break; } else { label = 70; break; }
    case 49: 
      var $86=HEAP32[(((((5244540)|0)))>>2)];
      var $inc=((($86)+(1))|0);
      HEAP32[(((((5244540)|0)))>>2)]=$inc;
      var $87=$maxpoint;
      var $tobool79=(($87)|0)!=0;
      if ($tobool79) { label = 53; break; } else { label = 50; break; }
    case 50: 
      var $88=HEAP32[((((5247040)|0))>>2)];
      var $tobool81=(($88)|0)!=0;
      if ($tobool81) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $89=HEAP32[((((5248924)|0))>>2)];
      var $90=$k;
      var $add83=((($90)+(1))|0);
      _qh_fprintf($89, 7, ((5270500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add83,tempInt));
      label = 52; break;
    case 52: 
      label = 56; break;
    case 53: 
      var $91=HEAP32[((((5247040)|0))>>2)];
      var $tobool86=(($91)|0)!=0;
      if ($tobool86) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $92=HEAP32[((((5248924)|0))>>2)];
      var $93=$k;
      var $add88=((($93)+(1))|0);
      var $94=$maxpoint;
      var $call89=_qh_pointid($94);
      var $95=$maxdet;
      _qh_fprintf($92, 8, ((5270004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add88,HEAP32[(((tempInt)+(4))>>2)]=$call89,(HEAPF64[(tempDoublePtr)>>3]=$95,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $96=$points_addr;
      $point=$96;
      var $97=$points_addr;
      var $98=HEAP32[((((5247508)|0))>>2)];
      var $99=$numpoints_addr;
      var $mul92=((($98)*($99))&-1);
      var $add_ptr93=(($97+($mul92<<3))|0);
      $pointtemp=$add_ptr93;
      label = 57; break;
    case 57: 
      var $100=$point;
      var $101=$pointtemp;
      var $cmp95=(($100)>>>0) < (($101)>>>0);
      if ($cmp95) { label = 58; break; } else { label = 69; break; }
    case 58: 
      var $102=$point;
      var $103=HEAP32[((((5247020)|0))>>2)];
      var $cmp97=(($102)|0)==(($103)|0);
      if ($cmp97) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 68; break;
    case 60: 
      var $104=$simplex_addr;
      var $105=HEAP32[(($104)>>2)];
      var $106=$point;
      var $107=$106;
      var $call100=_qh_setin($105, $107);
      var $tobool101=(($call100)|0)!=0;
      if ($tobool101) { label = 67; break; } else { label = 61; break; }
    case 61: 
      var $108=$point;
      var $109=$simplex_addr;
      var $110=HEAP32[(($109)>>2)];
      var $111=$k;
      var $call103=_qh_detsimplex($108, $110, $111, $nearzero);
      $det=$call103;
      var $112=$det;
      var $cmp104=$112 < 0;
      if ($cmp104) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $113=$det;
      var $sub106=(-$113);
      var $cond109 = $sub106;label = 64; break;
    case 63: 
      var $114=$det;
      var $cond109 = $114;label = 64; break;
    case 64: 
      var $cond109;
      $det=$cond109;
      var $115=$maxdet;
      var $cmp110=$cond109 > $115;
      if ($cmp110) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $116=$det;
      $maxdet=$116;
      var $117=$point;
      $maxpoint=$117;
      var $118=HEAP32[(($nearzero)>>2)];
      $maxnearzero=$118;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $119=HEAP32[((((5247508)|0))>>2)];
      var $120=$point;
      var $add_ptr115=(($120+($119<<3))|0);
      $point=$add_ptr115;
      label = 57; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $121=$maxpoint;
      var $tobool118=(($121)|0)!=0;
      if ($tobool118) { label = 72; break; } else { label = 71; break; }
    case 71: 
      var $122=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($122, 6014, ((5269144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 72; break;
    case 72: 
      var $123=$simplex_addr;
      var $124=$maxpoint;
      var $125=$124;
      _qh_setappend($123, $125);
      var $126=HEAP32[((((5247040)|0))>>2)];
      var $cmp121=(($126)|0) >= 1;
      if ($cmp121) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $127=HEAP32[((((5248924)|0))>>2)];
      var $128=$maxpoint;
      var $call123=_qh_pointid($128);
      var $129=$k;
      var $add124=((($129)+(1))|0);
      var $130=$maxdet;
      _qh_fprintf($127, 1002, ((5269024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call123,HEAP32[(((tempInt)+(4))>>2)]=$add124,(HEAPF64[(tempDoublePtr)>>3]=$130,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $131=$k;
      var $inc127=((($131)+(1))|0);
      $k=$inc127;
      label = 34; break;
    case 76: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_maxsimplex["X"]=1;

function _qh_orientoutside($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facet_addr;
      var $k;
      var $dist=__stackBase__;
      $facet_addr=$facet;
      var $0=HEAP32[((((5248928)|0))>>2)];
      var $1=$facet_addr;
      _qh_distplane($0, $1, $dist);
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$2 > 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=HEAP32[((((5247508)|0))>>2)];
      $k=$3;
      label = 4; break;
    case 4: 
      var $4=$k;
      var $dec=((($4)-(1))|0);
      $k=$dec;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$k;
      var $6=$facet_addr;
      var $normal=(($6+24)|0);
      var $7=HEAP32[(($normal)>>2)];
      var $arrayidx=(($7+($5<<3))|0);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$8);
      var $9=$k;
      var $10=$facet_addr;
      var $normal1=(($10+24)|0);
      var $11=HEAP32[(($normal1)>>2)];
      var $arrayidx2=(($11+($9<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($arrayidx2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 6: 
      var $12=$facet_addr;
      var $offset=(($12+16)|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub3=(-$13);
      var $14=$facet_addr;
      var $offset4=(($14+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub3,HEAP32[(($offset4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($offset4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $retval=1;
      label = 8; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_outerinner($facet, $outerplane, $innerplane) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $outerplane_addr;
      var $innerplane_addr;
      var $dist=__stackBase__;
      var $mindist;
      var $vertex;
      var $vertexp;
      $facet_addr=$facet;
      $outerplane_addr=$outerplane;
      $innerplane_addr=$innerplane;
      var $0=$outerplane_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$facet_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=HEAP32[((((5249064)|0))>>2)];
      var $tobool2=(($2)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $call=_qh_maxouter();
      var $3=$outerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 6: 
      var $4=$facet_addr;
      var $maxoutside=(($4+8)|0);
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($5)+($6);
      var $7=$outerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$8 < 8.988465674311579e+307;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($10)|0);
      var $call5=Math.sqrt($conv);
      var $mul=($9)*($call5);
      var $11=$outerplane_addr;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add6=($12)+($mul);
      (HEAPF64[(tempDoublePtr)>>3]=$add6,HEAP32[(($11)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($11)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$innerplane_addr;
      var $tobool9=(($13)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 24; break; }
    case 11: 
      var $14=$facet_addr;
      var $tobool11=(($14)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 20; break; }
    case 12: 
      $mindist=1.7976931348623157e+308;
      $vertex=0;
      var $15=$facet_addr;
      var $vertices=(($15+48)|0);
      var $16=HEAP32[(($vertices)>>2)];
      var $tobool13=(($16)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $17=$facet_addr;
      var $vertices15=(($17+48)|0);
      var $18=HEAP32[(($vertices15)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=$p;
      $vertexp=$19;
      label = 14; break;
    case 14: 
      var $20=$vertexp;
      var $incdec_ptr=(($20+4)|0);
      $vertexp=$incdec_ptr;
      var $21=HEAP32[(($20)>>2)];
      $vertex=$21;
      var $tobool16=(($21)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $22=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($22)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $23=$vertex;
      var $point=(($23+8)|0);
      var $24=HEAP32[(($point)>>2)];
      var $25=$facet_addr;
      _qh_distplane($24, $25, $dist);
      var $26=$mindist;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp17=$26 > $27;
      if ($cmp17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mindist=$28;
      label = 17; break;
    case 17: 
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $29=$mindist;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($29)-($30);
      var $31=$innerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($31)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($31)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 21; break;
    case 20: 
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub23=($32)-($33);
      var $34=$innerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$sub23,HEAP32[(($34)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($34)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 21; break;
    case 21: 
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp25=$35 < 8.988465674311579e+307;
      if ($cmp25) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=HEAP32[((((5247508)|0))>>2)];
      var $conv28=(($37)|0);
      var $call29=Math.sqrt($conv28);
      var $mul30=($36)*($call29);
      var $38=$innerplane_addr;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub31=($39)-($mul30);
      (HEAPF64[(tempDoublePtr)>>3]=$sub31,HEAP32[(($38)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($38)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_outerinner["X"]=1;

function _qh_pointdist($point1, $point2, $dim) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $point1_addr;
      var $point2_addr;
      var $dim_addr;
      var $dist;
      var $diff;
      var $k;
      $point1_addr=$point1;
      $point2_addr=$point2;
      $dim_addr=$dim;
      $dist=0;
      var $0=$dim_addr;
      var $cmp=(($0)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$dim_addr;
      var $cond = $1;label = 5; break;
    case 4: 
      var $2=$dim_addr;
      var $sub=(((-$2))|0);
      var $cond = $sub;label = 5; break;
    case 5: 
      var $cond;
      $k=$cond;
      label = 6; break;
    case 6: 
      var $3=$k;
      var $dec=((($3)-(1))|0);
      $k=$dec;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $4=$point1_addr;
      var $incdec_ptr=(($4+8)|0);
      $point1_addr=$incdec_ptr;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=$point2_addr;
      var $incdec_ptr1=(($6+8)|0);
      $point2_addr=$incdec_ptr1;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub2=($5)-($7);
      $diff=$sub2;
      var $8=$diff;
      var $9=$diff;
      var $mul=($8)*($9);
      var $10=$dist;
      var $add=($10)+($mul);
      $dist=$add;
      label = 6; break;
    case 8: 
      var $11=$dim_addr;
      var $cmp3=(($11)|0) > 0;
      if ($cmp3) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$dist;
      var $call=Math.sqrt($12);
      $retval=$call;
      label = 11; break;
    case 10: 
      var $13=$dist;
      $retval=$13;
      label = 11; break;
    case 11: 
      var $14=$retval;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}
_qh_pointdist["X"]=1;

function _qh_printmatrix($fp, $string, $rows, $numrow, $numcol) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $rows_addr;
      var $numrow_addr;
      var $numcol_addr;
      var $rowp;
      var $r;
      var $i;
      var $k;
      $fp_addr=$fp;
      $string_addr=$string;
      $rows_addr=$rows;
      $numrow_addr=$numrow;
      $numcol_addr=$numcol;
      var $0=$fp_addr;
      var $1=$string_addr;
      _qh_fprintf($0, 9001, ((5268444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$numrow_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $4=$i;
      var $5=$rows_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $rowp=$6;
      $k=0;
      label = 5; break;
    case 5: 
      var $7=$k;
      var $8=$numcol_addr;
      var $cmp2=(($7)|0) < (($8)|0);
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$rowp;
      var $incdec_ptr=(($9+8)|0);
      $rowp=$incdec_ptr;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $r=$10;
      var $11=$fp_addr;
      var $12=$r;
      _qh_fprintf($11, 9002, ((5268200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 7; break;
    case 7: 
      var $13=$k;
      var $inc=((($13)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 8: 
      var $14=$fp_addr;
      _qh_fprintf($14, 9003, ((5267960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc5=((($15)+(1))|0);
      $i=$inc5;
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printmatrix["X"]=1;

function _qh_projectinput() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $k;
      var $i;
      var $newdim;
      var $newnum;
      var $project;
      var $size;
      var $newpoints;
      var $coord;
      var $infinity;
      var $paraboloid;
      var $maxboloid;
      var $0=HEAP32[((((5247512)|0))>>2)];
      $newdim=$0;
      var $1=HEAP32[((((5247516)|0))>>2)];
      $newnum=$1;
      var $2=HEAP32[((((5247512)|0))>>2)];
      var $add=((($2)+(1))|0);
      var $mul=(($add)&-1);
      $size=$mul;
      $maxboloid=0;
      var $3=$size;
      var $call=_qh_memalloc($3);
      $project=$call;
      var $4=$project;
      var $5=$size;
      _memset($4, 0, $5);
      $k=0;
      label = 3; break;
    case 3: 
      var $6=$k;
      var $7=HEAP32[((((5247512)|0))>>2)];
      var $cmp=(($6)|0) < (($7)|0);
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $8=$k;
      var $9=HEAP32[((((5248600)|0))>>2)];
      var $arrayidx=(($9+($8<<3))|0);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp1=$10 == 0;
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $11=$k;
      var $12=HEAP32[((((5248596)|0))>>2)];
      var $arrayidx2=(($12+($11<<3))|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp3=$13 == 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$k;
      var $15=$project;
      var $arrayidx4=(($15+$14)|0);
      HEAP8[($arrayidx4)]=-1;
      var $16=$newdim;
      var $dec=((($16)-(1))|0);
      $newdim=$dec;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$k;
      var $inc=((($17)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 9: 
      var $18=HEAP32[((((5247000)|0))>>2)];
      var $tobool=(($18)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $19=$k;
      var $20=$project;
      var $arrayidx6=(($20+$19)|0);
      HEAP8[($arrayidx6)]=1;
      var $21=$newdim;
      var $inc7=((($21)+(1))|0);
      $newdim=$inc7;
      var $22=HEAP32[((((5246960)|0))>>2)];
      var $tobool8=(($22)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$newnum;
      var $inc10=((($23)+(1))|0);
      $newnum=$inc10;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $24=$newdim;
      var $25=HEAP32[((((5247508)|0))>>2)];
      var $cmp13=(($24)|0)!=(($25)|0);
      if ($cmp13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $26=HEAP32[((((5248924)|0))>>2)];
      var $27=$newdim;
      var $28=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($26, 6015, ((5266532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));
      _qh_errexit(5, 0, 0);
      label = 15; break;
    case 15: 
      var $29=$newnum;
      var $30=$newdim;
      var $mul16=((($29)*($30))&-1);
      var $mul17=((($mul16<<3))&-1);
      var $call18=_qh_malloc($mul17);
      var $31=$call18;
      $newpoints=$31;
      var $tobool19=(($31)|0)!=0;
      if ($tobool19) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $32=HEAP32[((((5248924)|0))>>2)];
      var $33=HEAP32[((((5247516)|0))>>2)];
      _qh_fprintf($32, 6016, ((5266080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,tempInt));
      _qh_errexit(4, 0, 0);
      label = 17; break;
    case 17: 
      var $34=$project;
      var $35=HEAP32[((((5247512)|0))>>2)];
      var $add22=((($35)+(1))|0);
      var $36=HEAP32[((((5247520)|0))>>2)];
      var $37=HEAP32[((((5247516)|0))>>2)];
      var $38=HEAP32[((((5247512)|0))>>2)];
      var $39=$newpoints;
      var $40=$newdim;
      _qh_projectpoints($34, $add22, $36, $37, $38, $39, $40);
      var $41=HEAP32[((((5247040)|0))>>2)];
      var $cmp23=(($41)|0) >= 1;
      if ($cmp23) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $42=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($42, 1003, ((5265748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 19; break;
    case 19: 
      var $43=$project;
      var $44=HEAP32[((((5247512)|0))>>2)];
      var $add26=((($44)+(1))|0);
      var $45=HEAP32[((((5248600)|0))>>2)];
      var $46=HEAP32[((((5247512)|0))>>2)];
      var $add27=((($46)+(1))|0);
      var $47=HEAP32[((((5248600)|0))>>2)];
      var $48=$newdim;
      var $add28=((($48)+(1))|0);
      _qh_projectpoints($43, $add26, $45, 1, $add27, $47, $add28);
      var $49=$project;
      var $50=HEAP32[((((5247512)|0))>>2)];
      var $add29=((($50)+(1))|0);
      var $51=HEAP32[((((5248596)|0))>>2)];
      var $52=HEAP32[((((5247512)|0))>>2)];
      var $add30=((($52)+(1))|0);
      var $53=HEAP32[((((5248596)|0))>>2)];
      var $54=$newdim;
      var $add31=((($54)+(1))|0);
      _qh_projectpoints($49, $add29, $51, 1, $add30, $53, $add31);
      var $55=HEAP32[((((5247036)|0))>>2)];
      var $tobool32=(($55)|0)!=0;
      if ($tobool32) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $56=HEAP32[((((5247496)|0))>>2)];
      var $tobool34=(($56)|0)!=0;
      if ($tobool34) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $57=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($57, 6017, ((5265340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 22; break;
    case 22: 
      var $58=$project;
      var $59=HEAP32[((((5247512)|0))>>2)];
      var $60=HEAP32[((((5247496)|0))>>2)];
      var $61=HEAP32[((((5247512)|0))>>2)];
      var $62=HEAP32[((((5247496)|0))>>2)];
      var $63=$newdim;
      _qh_projectpoints($58, $59, $60, 1, $61, $62, $63);
      label = 23; break;
    case 23: 
      var $64=$project;
      var $65=HEAP32[((((5247512)|0))>>2)];
      var $add38=((($65)+(1))|0);
      var $mul39=(($add38)&-1);
      _qh_memfree($64, $mul39);
      var $66=HEAP32[((((5247524)|0))>>2)];
      var $tobool40=(($66)|0)!=0;
      if ($tobool40) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $67=HEAP32[((((5247520)|0))>>2)];
      var $68=$67;
      _qh_free($68);
      label = 25; break;
    case 25: 
      var $69=$newpoints;
      HEAP32[((((5247520)|0))>>2)]=$69;
      HEAP32[((((5247524)|0))>>2)]=1;
      var $70=HEAP32[((((5247000)|0))>>2)];
      var $tobool43=(($70)|0)!=0;
      if ($tobool43) { label = 26; break; } else { label = 45; break; }
    case 26: 
      var $71=HEAP32[((((5246960)|0))>>2)];
      var $tobool45=(($71)|0)!=0;
      if ($tobool45) { label = 27; break; } else { label = 45; break; }
    case 27: 
      var $72=HEAP32[((((5247520)|0))>>2)];
      $coord=$72;
      var $73=HEAP32[((((5247520)|0))>>2)];
      var $74=HEAP32[((((5247508)|0))>>2)];
      var $75=HEAP32[((((5247516)|0))>>2)];
      var $mul47=((($74)*($75))&-1);
      var $add_ptr=(($73+($mul47<<3))|0);
      $infinity=$add_ptr;
      var $76=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($76)-(1))|0);
      $k=$sub;
      label = 28; break;
    case 28: 
      var $77=$k;
      var $dec49=((($77)-(1))|0);
      $k=$dec49;
      var $tobool50=(($77)|0)!=0;
      if ($tobool50) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $78=$k;
      var $79=$infinity;
      var $arrayidx52=(($79+($78<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx52)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx52)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 28; break;
    case 30: 
      var $80=HEAP32[((((5247516)|0))>>2)];
      $i=$80;
      label = 31; break;
    case 31: 
      var $81=$i;
      var $dec55=((($81)-(1))|0);
      $i=$dec55;
      var $tobool56=(($81)|0)!=0;
      if ($tobool56) { label = 32; break; } else { label = 39; break; }
    case 32: 
      $paraboloid=0;
      $k=0;
      label = 33; break;
    case 33: 
      var $82=$k;
      var $83=HEAP32[((((5247508)|0))>>2)];
      var $sub59=((($83)-(1))|0);
      var $cmp60=(($82)|0) < (($sub59)|0);
      if ($cmp60) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $84=$coord;
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $86=$coord;
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($86)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($86)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul62=($85)*($87);
      var $88=$paraboloid;
      var $add63=($88)+($mul62);
      $paraboloid=$add63;
      var $89=$coord;
      var $90=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($89)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($89)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $91=$k;
      var $92=$infinity;
      var $arrayidx64=(($92+($91<<3))|0);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx64)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx64)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add65=($93)+($90);
      (HEAPF64[(tempDoublePtr)>>3]=$add65,HEAP32[(($arrayidx64)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx64)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $94=$coord;
      var $incdec_ptr=(($94+8)|0);
      $coord=$incdec_ptr;
      label = 35; break;
    case 35: 
      var $95=$k;
      var $inc67=((($95)+(1))|0);
      $k=$inc67;
      label = 33; break;
    case 36: 
      var $96=$paraboloid;
      var $97=$coord;
      var $incdec_ptr69=(($97+8)|0);
      $coord=$incdec_ptr69;
      (HEAPF64[(tempDoublePtr)>>3]=$96,HEAP32[(($97)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($97)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $98=$maxboloid;
      var $99=$paraboloid;
      var $cmp70=$98 < $99;
      if ($cmp70) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $100=$paraboloid;
      $maxboloid=$100;
      label = 38; break;
    case 38: 
      label = 31; break;
    case 39: 
      var $101=HEAP32[((((5247508)|0))>>2)];
      var $sub74=((($101)-(1))|0);
      $k=$sub74;
      label = 40; break;
    case 40: 
      var $102=$k;
      var $dec76=((($102)-(1))|0);
      $k=$dec76;
      var $tobool77=(($102)|0)!=0;
      if ($tobool77) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $103=HEAP32[((((5247516)|0))>>2)];
      var $conv=(($103)|0);
      var $104=$coord;
      var $incdec_ptr79=(($104+8)|0);
      $coord=$incdec_ptr79;
      var $105=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($104)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($104)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($105)/($conv);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($104)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($104)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 42: 
      var $106=$maxboloid;
      var $mul81=($106)*(1.1);
      var $107=$coord;
      var $incdec_ptr82=(($107+8)|0);
      $coord=$incdec_ptr82;
      (HEAPF64[(tempDoublePtr)>>3]=$mul81,HEAP32[(($107)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($107)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $108=HEAP32[((((5247516)|0))>>2)];
      var $inc83=((($108)+(1))|0);
      HEAP32[((((5247516)|0))>>2)]=$inc83;
      var $109=HEAP32[((((5247040)|0))>>2)];
      var $tobool84=(($109)|0)!=0;
      if ($tobool84) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $110=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($110, 9, ((5264968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 44; break;
    case 44: 
      label = 48; break;
    case 45: 
      var $111=HEAP32[((((5247000)|0))>>2)];
      var $tobool87=(($111)|0)!=0;
      if ($tobool87) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $112=HEAP32[((((5247508)|0))>>2)];
      var $113=HEAP32[((((5247516)|0))>>2)];
      var $114=HEAP32[((((5247520)|0))>>2)];
      _qh_setdelaunay($112, $113, $114);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_projectinput["X"]=1;

function _qh_projectpoints($project, $n, $points, $numpoints, $dim, $newpoints, $newdim) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $project_addr;
      var $n_addr;
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $newpoints_addr;
      var $newdim_addr;
      var $testdim;
      var $oldk;
      var $newk;
      var $i;
      var $j;
      var $k;
      var $newp;
      var $oldp;
      $project_addr=$project;
      $n_addr=$n;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $newpoints_addr=$newpoints;
      $newdim_addr=$newdim;
      var $0=$dim_addr;
      $testdim=$0;
      $oldk=0;
      $newk=0;
      $j=0;
      $k=0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $2=$n_addr;
      var $cmp=(($1)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$k;
      var $4=$project_addr;
      var $arrayidx=(($4+$3)|0);
      var $5=HEAP8[($arrayidx)];
      var $conv=(($5 << 24) >> 24);
      var $6=$testdim;
      var $add=((($6)+($conv))|0);
      $testdim=$add;
      label = 5; break;
    case 5: 
      var $7=$k;
      var $inc=((($7)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 6: 
      var $8=$testdim;
      var $9=$newdim_addr;
      var $cmp1=(($8)|0)!=(($9)|0);
      if ($cmp1) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=$newdim_addr;
      var $12=$testdim;
      _qh_fprintf($10, 6018, ((5264576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));
      _qh_errexit(5, 0, 0);
      label = 8; break;
    case 8: 
      $j=0;
      label = 9; break;
    case 9: 
      var $13=$j;
      var $14=$n_addr;
      var $cmp4=(($13)|0) < (($14)|0);
      if ($cmp4) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $15=$j;
      var $16=$project_addr;
      var $arrayidx7=(($16+$15)|0);
      var $17=HEAP8[($arrayidx7)];
      var $conv8=(($17 << 24) >> 24);
      var $cmp9=(($conv8)|0)==-1;
      if ($cmp9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $18=$oldk;
      var $inc12=((($18)+(1))|0);
      $oldk=$inc12;
      label = 21; break;
    case 12: 
      var $19=$newpoints_addr;
      var $20=$newk;
      var $inc13=((($20)+(1))|0);
      $newk=$inc13;
      var $add_ptr=(($19+($20<<3))|0);
      $newp=$add_ptr;
      var $21=$j;
      var $22=$project_addr;
      var $arrayidx14=(($22+$21)|0);
      var $23=HEAP8[($arrayidx14)];
      var $conv15=(($23 << 24) >> 24);
      var $cmp16=(($conv15)|0)==1;
      if ($cmp16) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $24=$oldk;
      var $25=$dim_addr;
      var $cmp19=(($24)|0) >= (($25)|0);
      if ($cmp19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 24; break;
    case 15: 
      var $26=$points_addr;
      var $27=$oldk;
      var $add_ptr23=(($26+($27<<3))|0);
      $oldp=$add_ptr23;
      label = 17; break;
    case 16: 
      var $28=$points_addr;
      var $29=$oldk;
      var $inc25=((($29)+(1))|0);
      $oldk=$inc25;
      var $add_ptr26=(($28+($29<<3))|0);
      $oldp=$add_ptr26;
      label = 17; break;
    case 17: 
      var $30=$numpoints_addr;
      $i=$30;
      label = 18; break;
    case 18: 
      var $31=$i;
      var $dec=((($31)-(1))|0);
      $i=$dec;
      var $tobool=(($31)|0)!=0;
      if ($tobool) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $32=$oldp;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($32)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($32)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $34=$newp;
      (HEAPF64[(tempDoublePtr)>>3]=$33,HEAP32[(($34)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($34)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $35=$newdim_addr;
      var $36=$newp;
      var $add_ptr30=(($36+($35<<3))|0);
      $newp=$add_ptr30;
      var $37=$dim_addr;
      var $38=$oldp;
      var $add_ptr31=(($38+($37<<3))|0);
      $oldp=$add_ptr31;
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $39=$oldk;
      var $40=$dim_addr;
      var $cmp34=(($39)|0) >= (($40)|0);
      if ($cmp34) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $41=$j;
      var $inc39=((($41)+(1))|0);
      $j=$inc39;
      label = 9; break;
    case 25: 
      var $42=HEAP32[((((5247040)|0))>>2)];
      var $cmp41=(($42)|0) >= 1;
      if ($cmp41) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $43=HEAP32[((((5248924)|0))>>2)];
      var $44=$numpoints_addr;
      var $45=$dim_addr;
      var $46=$newdim_addr;
      _qh_fprintf($43, 1004, ((5264208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$44,HEAP32[(((tempInt)+(4))>>2)]=$45,HEAP32[(((tempInt)+(8))>>2)]=$46,tempInt));
      label = 27; break;
    case 27: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_projectpoints["X"]=1;

function _qh_rotateinput($rows) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $rows_addr;
      $rows_addr=$rows;
      var $0=HEAP32[((((5247524)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247520)|0))>>2)];
      var $2=HEAP32[((((5247516)|0))>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $call=_qh_copypoints($1, $2, $3);
      HEAP32[((((5247520)|0))>>2)]=$call;
      HEAP32[((((5247524)|0))>>2)]=1;
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5247520)|0))>>2)];
      var $5=HEAP32[((((5247516)|0))>>2)];
      var $6=HEAP32[((((5247508)|0))>>2)];
      var $7=$rows_addr;
      _qh_rotatepoints($4, $5, $6, $7);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_rotatepoints($points, $numpoints, $dim, $row) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $row_addr;
      var $point;
      var $rowi;
      var $coord;
      var $sum;
      var $newval;
      var $i;
      var $j;
      var $k;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $row_addr=$row;
      $coord=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$row_addr;
      var $3=$dim_addr;
      var $4=$dim_addr;
      _qh_printmatrix($1, ((5263764)|0), $2, $3, $4);
      label = 4; break;
    case 4: 
      var $5=$points_addr;
      $point=$5;
      var $6=$numpoints_addr;
      $j=$6;
      label = 5; break;
    case 5: 
      var $7=$j;
      var $dec=((($7)-(1))|0);
      $j=$dec;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 18; break; }
    case 6: 
      var $8=$dim_addr;
      var $9=$row_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $newval=$10;
      $i=0;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $12=$dim_addr;
      var $cmp2=(($11)|0) < (($12)|0);
      if ($cmp2) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $13=$i;
      var $14=$row_addr;
      var $arrayidx4=(($14+($13<<2))|0);
      var $15=HEAP32[(($arrayidx4)>>2)];
      $rowi=$15;
      var $16=$point;
      $coord=$16;
      $sum=0;
      var $17=$dim_addr;
      $k=$17;
      label = 9; break;
    case 9: 
      var $18=$k;
      var $dec6=((($18)-(1))|0);
      $k=$dec6;
      var $tobool7=(($18)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$rowi;
      var $incdec_ptr=(($19+8)|0);
      $rowi=$incdec_ptr;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=$coord;
      var $incdec_ptr9=(($21+8)|0);
      $coord=$incdec_ptr9;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($20)*($22);
      var $23=$sum;
      var $add=($23)+($mul);
      $sum=$add;
      label = 9; break;
    case 11: 
      var $24=$sum;
      var $25=$newval;
      var $incdec_ptr10=(($25+8)|0);
      $newval=$incdec_ptr10;
      (HEAPF64[(tempDoublePtr)>>3]=$24,HEAP32[(($25)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($25)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 12; break;
    case 12: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 13: 
      var $27=$dim_addr;
      $k=$27;
      label = 14; break;
    case 14: 
      var $28=$k;
      var $dec13=((($28)-(1))|0);
      $k=$dec13;
      var $tobool14=(($28)|0)!=0;
      if ($tobool14) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $29=$newval;
      var $incdec_ptr16=((($29)-(8))|0);
      $newval=$incdec_ptr16;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($incdec_ptr16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($incdec_ptr16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=$coord;
      var $incdec_ptr17=((($31)-(8))|0);
      $coord=$incdec_ptr17;
      (HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[(($incdec_ptr17)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($incdec_ptr17)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$dim_addr;
      var $33=$point;
      var $add_ptr=(($33+($32<<3))|0);
      $point=$add_ptr;
      label = 5; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_rotatepoints["X"]=1;

function _qh_scaleinput() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $0=HEAP32[((((5247524)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247520)|0))>>2)];
      var $2=HEAP32[((((5247516)|0))>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $call=_qh_copypoints($1, $2, $3);
      HEAP32[((((5247520)|0))>>2)]=$call;
      HEAP32[((((5247524)|0))>>2)]=1;
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5247520)|0))>>2)];
      var $5=HEAP32[((((5247516)|0))>>2)];
      var $6=HEAP32[((((5247508)|0))>>2)];
      var $7=HEAP32[((((5248600)|0))>>2)];
      var $8=HEAP32[((((5248596)|0))>>2)];
      _qh_scalepoints($4, $5, $6, $7, $8);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_scalepoints($points, $numpoints, $dim, $newlows, $newhighs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $newlows_addr;
      var $newhighs_addr;
      var $i;
      var $k;
      var $shift;
      var $scale;
      var $coord;
      var $low;
      var $high;
      var $newlow;
      var $newhigh;
      var $mincoord;
      var $maxcoord;
      var $nearzero=__stackBase__;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $newlows_addr=$newlows;
      $newhighs_addr=$newhighs;
      HEAP32[(($nearzero)>>2)]=0;
      $k=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=$dim_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 44; break; }
    case 4: 
      var $2=$k;
      var $3=$newhighs_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $newhigh=$4;
      var $5=$k;
      var $6=$newlows_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $newlow=$7;
      var $8=$newhigh;
      var $cmp2=$8 > 8.988465674311579e+307;
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $9=$newlow;
      var $cmp3=$9 < -8.988465674311579e+307;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 43; break;
    case 7: 
      $low=1.7976931348623157e+308;
      $high=-1.7976931348623157e+308;
      var $10=$numpoints_addr;
      $i=$10;
      var $11=$points_addr;
      var $12=$k;
      var $add_ptr=(($11+($12<<3))|0);
      $coord=$add_ptr;
      label = 8; break;
    case 8: 
      var $13=$i;
      var $dec=((($13)-(1))|0);
      $i=$dec;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $14=$low;
      var $15=$coord;
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp6=$14 > $16;
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $17=$coord;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $low=$18;
      label = 11; break;
    case 11: 
      var $19=$high;
      var $20=$coord;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp9=$19 < $21;
      if ($cmp9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=$coord;
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $high=$23;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $24=$dim_addr;
      var $25=$coord;
      var $add_ptr12=(($25+($24<<3))|0);
      $coord=$add_ptr12;
      label = 8; break;
    case 15: 
      var $26=$newhigh;
      var $cmp13=$26 > 8.988465674311579e+307;
      if ($cmp13) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $27=$high;
      $newhigh=$27;
      label = 17; break;
    case 17: 
      var $28=$newlow;
      var $cmp16=$28 < -8.988465674311579e+307;
      if ($cmp16) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $29=$low;
      $newlow=$29;
      label = 19; break;
    case 19: 
      var $30=HEAP32[((((5247000)|0))>>2)];
      var $tobool19=(($30)|0)!=0;
      if ($tobool19) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $31=$k;
      var $32=$dim_addr;
      var $sub=((($32)-(1))|0);
      var $cmp21=(($31)|0)==(($sub)|0);
      if ($cmp21) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $33=$newhigh;
      var $34=$newlow;
      var $cmp23=$33 < $34;
      if ($cmp23) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      var $36=$k;
      var $37=$k;
      var $38=$newhigh;
      var $39=$newlow;
      _qh_fprintf($35, 6021, ((5261836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$37,(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(1, 0, 0);
      label = 23; break;
    case 23: 
      var $40=$newhigh;
      var $41=$newlow;
      var $sub26=($40)-($41);
      var $42=$high;
      var $43=$low;
      var $sub27=($42)-($43);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_divzero($sub26, $sub27, $44, $nearzero);
      $scale=$call;
      var $45=HEAP32[(($nearzero)>>2)];
      var $tobool28=(($45)|0)!=0;
      if ($tobool28) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $46=HEAP32[((((5248924)|0))>>2)];
      var $47=$k;
      var $48=$newlow;
      var $49=$newhigh;
      var $50=$low;
      var $51=$high;
      _qh_fprintf($46, 6022, ((5261292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,(HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(28))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(28))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(1, 0, 0);
      label = 25; break;
    case 25: 
      var $52=$newlow;
      var $53=$high;
      var $mul=($52)*($53);
      var $54=$low;
      var $55=$newhigh;
      var $mul31=($54)*($55);
      var $sub32=($mul)-($mul31);
      var $56=$high;
      var $57=$low;
      var $sub33=($56)-($57);
      var $div=($sub32)/($sub33);
      $shift=$div;
      var $58=$points_addr;
      var $59=$k;
      var $add_ptr34=(($58+($59<<3))|0);
      $coord=$add_ptr34;
      var $60=$numpoints_addr;
      $i=$60;
      label = 26; break;
    case 26: 
      var $61=$i;
      var $dec36=((($61)-(1))|0);
      $i=$dec36;
      var $tobool37=(($61)|0)!=0;
      if ($tobool37) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $62=$coord;
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($62)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($62)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $64=$scale;
      var $mul39=($63)*($64);
      var $65=$shift;
      var $add=($mul39)+($65);
      var $66=$coord;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($66)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($66)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 28; break;
    case 28: 
      var $67=$dim_addr;
      var $68=$coord;
      var $add_ptr41=(($68+($67<<3))|0);
      $coord=$add_ptr41;
      label = 26; break;
    case 29: 
      var $69=$points_addr;
      var $70=$k;
      var $add_ptr43=(($69+($70<<3))|0);
      $coord=$add_ptr43;
      var $71=$newlow;
      var $72=$newhigh;
      var $cmp44=$71 < $72;
      if ($cmp44) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $73=$newlow;
      $mincoord=$73;
      var $74=$newhigh;
      $maxcoord=$74;
      label = 32; break;
    case 31: 
      var $75=$newhigh;
      $mincoord=$75;
      var $76=$newlow;
      $maxcoord=$76;
      label = 32; break;
    case 32: 
      var $77=$numpoints_addr;
      $i=$77;
      label = 33; break;
    case 33: 
      var $78=$i;
      var $dec48=((($78)-(1))|0);
      $i=$dec48;
      var $tobool49=(($78)|0)!=0;
      if ($tobool49) { label = 34; break; } else { label = 40; break; }
    case 34: 
      var $79=$coord;
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($79)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($79)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $81=$maxcoord;
      var $cmp51=$80 > $81;
      if ($cmp51) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $82=$maxcoord;
      var $83=$coord;
      (HEAPF64[(tempDoublePtr)>>3]=$82,HEAP32[(($83)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($83)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 36; break;
    case 36: 
      var $84=$coord;
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $86=$mincoord;
      var $cmp54=$85 < $86;
      if ($cmp54) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $87=$mincoord;
      var $88=$coord;
      (HEAPF64[(tempDoublePtr)>>3]=$87,HEAP32[(($88)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($88)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $89=$dim_addr;
      var $90=$coord;
      var $add_ptr58=(($90+($89<<3))|0);
      $coord=$add_ptr58;
      label = 33; break;
    case 40: 
      var $91=HEAP32[((((5247040)|0))>>2)];
      var $tobool60=(($91)|0)!=0;
      if ($tobool60) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $92=HEAP32[((((5248924)|0))>>2)];
      var $93=$k;
      var $94=$low;
      var $95=$high;
      var $96=$newlow;
      var $97=$newhigh;
      var $98=$numpoints_addr;
      var $99=$scale;
      var $100=$shift;
      _qh_fprintf($92, 10, ((5260852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 56)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$93,(HEAPF64[(tempDoublePtr)>>3]=$94,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$95,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$96,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$97,HEAP32[(((tempInt)+(28))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(28))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(36))>>2)]=$98,(HEAPF64[(tempDoublePtr)>>3]=$99,HEAP32[(((tempInt)+(40))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(40))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$100,HEAP32[(((tempInt)+(48))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(48))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $101=$k;
      var $inc=((($101)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 44: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_scalepoints["X"]=1;

function _qh_scalelast($points, $numpoints, $dim, $low, $high, $newhigh) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $low_addr;
      var $high_addr;
      var $newhigh_addr;
      var $scale;
      var $shift;
      var $coord;
      var $i;
      var $nearzero=__stackBase__;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $low_addr=$low;
      $high_addr=$high;
      $newhigh_addr=$newhigh;
      HEAP32[(($nearzero)>>2)]=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$low_addr;
      var $3=$high_addr;
      var $4=$newhigh_addr;
      _qh_fprintf($1, 4013, ((5263328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$2,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$3,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 4; break;
    case 4: 
      var $5=$low_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[((((5249232)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249232)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $6=$high_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[((((5249240)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249240)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $7=$newhigh_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[((((5249248)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249248)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=$newhigh_addr;
      var $9=$high_addr;
      var $10=$low_addr;
      var $sub=($9)-($10);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_divzero($8, $sub, $11, $nearzero);
      $scale=$call;
      var $12=HEAP32[(($nearzero)>>2)];
      var $tobool=(($12)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $13=HEAP32[((((5247000)|0))>>2)];
      var $tobool2=(($13)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($14, 6019, ((5262736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 7: 
      var $15=HEAP32[((((5248924)|0))>>2)];
      var $16=$newhigh_addr;
      var $17=$low_addr;
      var $18=$high_addr;
      var $19=$high_addr;
      var $20=$low_addr;
      var $sub4=($19)-($20);
      _qh_fprintf($15, 6020, ((5262276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$sub4,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 8; break;
    case 8: 
      _qh_errexit(1, 0, 0);
      label = 9; break;
    case 9: 
      var $21=$low_addr;
      var $sub7=(-$21);
      var $22=$newhigh_addr;
      var $mul=($sub7)*($22);
      var $23=$high_addr;
      var $24=$low_addr;
      var $sub8=($23)-($24);
      var $div=($mul)/($sub8);
      $shift=$div;
      var $25=$points_addr;
      var $26=$dim_addr;
      var $add_ptr=(($25+($26<<3))|0);
      var $add_ptr9=((($add_ptr)-(8))|0);
      $coord=$add_ptr9;
      var $27=$numpoints_addr;
      $i=$27;
      label = 10; break;
    case 10: 
      var $28=$i;
      var $dec=((($28)-(1))|0);
      $i=$dec;
      var $tobool10=(($28)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $29=$coord;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($29)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($29)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=$scale;
      var $mul11=($30)*($31);
      var $32=$shift;
      var $add=($mul11)+($32);
      var $33=$coord;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($33)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($33)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 12; break;
    case 12: 
      var $34=$dim_addr;
      var $35=$coord;
      var $add_ptr12=(($35+($34<<3))|0);
      $coord=$add_ptr12;
      label = 10; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_scalelast["X"]=1;

function _qh_sharpnewfacets() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $issharp;
      var $quadrant;
      var $k;
      $issharp=0;
      var $0=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($0<<2))&-1);
      var $call=_qh_memalloc($mul);
      var $1=$call;
      $quadrant=$1;
      var $2=HEAP32[((((5248956)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 23; break; }
    case 3: 
      var $3=HEAP32[((((5248956)|0))>>2)];
      $facet=$3;
      label = 4; break;
    case 4: 
      var $4=$facet;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $7 = 0;label = 6; break; }
    case 5: 
      var $5=$facet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool2=(($6)|0)!=0;
      var $7 = $tobool2;label = 6; break;
    case 6: 
      var $7;
      if ($7) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $8=$facet;
      var $9=HEAP32[((((5248956)|0))>>2)];
      var $cmp=(($8)|0)==(($9)|0);
      if ($cmp) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $10=HEAP32[((((5247508)|0))>>2)];
      $k=$10;
      label = 9; break;
    case 9: 
      var $11=$k;
      var $dec=((($11)-(1))|0);
      $k=$dec;
      var $tobool5=(($11)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $12=$k;
      var $13=$facet;
      var $normal=(($13+24)|0);
      var $14=HEAP32[(($normal)>>2)];
      var $arrayidx=(($14+($12<<3))|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp7=$15 > 0;
      var $conv=(($cmp7)&1);
      var $16=$k;
      var $17=$quadrant;
      var $arrayidx8=(($17+($16<<2))|0);
      HEAP32[(($arrayidx8)>>2)]=$conv;
      label = 9; break;
    case 11: 
      label = 18; break;
    case 12: 
      var $18=HEAP32[((((5247508)|0))>>2)];
      $k=$18;
      label = 13; break;
    case 13: 
      var $19=$k;
      var $dec10=((($19)-(1))|0);
      $k=$dec10;
      var $tobool11=(($19)|0)!=0;
      if ($tobool11) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $20=$k;
      var $21=$quadrant;
      var $arrayidx13=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx13)>>2)];
      var $23=$k;
      var $24=$facet;
      var $normal14=(($24+24)|0);
      var $25=HEAP32[(($normal14)>>2)];
      var $arrayidx15=(($25+($23<<3))|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp16=$26 > 0;
      var $conv17=(($cmp16)&1);
      var $cmp18=(($22)|0)!=(($conv17)|0);
      if ($cmp18) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $issharp=1;
      label = 17; break;
    case 16: 
      label = 13; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $27=$issharp;
      var $tobool23=(($27)|0)!=0;
      if ($tobool23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 22; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $28=$facet;
      var $next26=(($28+44)|0);
      var $29=HEAP32[(($next26)>>2)];
      $facet=$29;
      label = 4; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $30=$quadrant;
      var $31=$30;
      var $32=HEAP32[((((5247508)|0))>>2)];
      var $mul29=((($32<<2))&-1);
      _qh_memfree($31, $mul29);
      var $33=HEAP32[((((5247040)|0))>>2)];
      var $cmp30=(($33)|0) >= 3;
      if ($cmp30) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=$issharp;
      _qh_fprintf($34, 3001, ((5257228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      label = 25; break;
    case 25: 
      var $36=$issharp;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }

}
_qh_sharpnewfacets["X"]=1;

function _qh_freebuffers() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 5001, ((5258056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5248712)|0))>>2)];
      var $3=$2;
      var $4=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($4<<3))&-1);
      _qh_memfree($3, $mul);
      var $5=HEAP32[((((5248592)|0))>>2)];
      var $6=$5;
      var $7=HEAP32[((((5247512)|0))>>2)];
      var $add=((($7)+(1))|0);
      var $mul1=((($add<<3))&-1);
      _qh_memfree($6, $mul1);
      var $8=HEAP32[((((5248588)|0))>>2)];
      var $9=$8;
      var $10=HEAP32[((((5247512)|0))>>2)];
      var $add2=((($10)+(1))|0);
      var $mul3=((($add2<<3))&-1);
      _qh_memfree($9, $mul3);
      var $11=HEAP32[((((5248600)|0))>>2)];
      var $12=$11;
      var $13=HEAP32[((((5247512)|0))>>2)];
      var $add4=((($13)+(1))|0);
      var $mul5=((($add4<<3))&-1);
      _qh_memfree($12, $mul5);
      var $14=HEAP32[((((5248596)|0))>>2)];
      var $15=$14;
      var $16=HEAP32[((((5247512)|0))>>2)];
      var $add6=((($16)+(1))|0);
      var $mul7=((($add6<<3))&-1);
      _qh_memfree($15, $mul7);
      var $17=HEAP32[((((5249192)|0))>>2)];
      var $18=$17;
      var $19=HEAP32[((((5247508)|0))>>2)];
      var $add8=((($19)+(1))|0);
      var $20=HEAP32[((((5247508)|0))>>2)];
      var $mul9=((($add8)*($20))&-1);
      var $mul10=((($mul9<<3))&-1);
      _qh_memfree($18, $mul10);
      var $21=HEAP32[((((5249196)|0))>>2)];
      var $22=$21;
      var $23=HEAP32[((((5247508)|0))>>2)];
      var $add11=((($23)+(1))|0);
      var $mul12=((($add11<<2))&-1);
      _qh_memfree($22, $mul12);
      HEAP32[((((5248588)|0))>>2)]=0;
      HEAP32[((((5248592)|0))>>2)]=0;
      HEAP32[((((5248712)|0))>>2)]=0;
      HEAP32[((((5248596)|0))>>2)]=0;
      HEAP32[((((5248600)|0))>>2)]=0;
      HEAP32[((((5249192)|0))>>2)]=0;
      HEAP32[((((5249196)|0))>>2)]=0;
      _qh_setfree(((5249184)|0));
      _qh_setfree(((5249188)|0));
      _qh_setfree(((5249228)|0));
      var $24=HEAP32[((((5249200)|0))>>2)];
      var $tobool=(($24)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=HEAP32[((((5249200)|0))>>2)];
      _qh_free($25);
      label = 6; break;
    case 6: 
      var $26=HEAP32[((((5249208)|0))>>2)];
      var $tobool15=(($26)|0)!=0;
      if ($tobool15) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=HEAP32[((((5249208)|0))>>2)];
      var $28=$27;
      _qh_free($28);
      label = 8; break;
    case 8: 
      var $29=HEAP32[((((5249212)|0))>>2)];
      var $tobool18=(($29)|0)!=0;
      if ($tobool18) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $30=HEAP32[((((5249212)|0))>>2)];
      var $31=$30;
      _qh_free($31);
      label = 10; break;
    case 10: 
      var $32=HEAP32[((((5247496)|0))>>2)];
      var $tobool21=(($32)|0)!=0;
      if ($tobool21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $33=HEAP32[((((5247496)|0))>>2)];
      var $34=$33;
      _qh_free($34);
      label = 12; break;
    case 12: 
      var $35=HEAP32[((((5247492)|0))>>2)];
      var $tobool24=(($35)|0)!=0;
      if ($tobool24) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $36=HEAP32[((((5247492)|0))>>2)];
      _qh_free($36);
      label = 14; break;
    case 14: 
      HEAP32[((((5247492)|0))>>2)]=0;
      HEAP32[((((5249200)|0))>>2)]=0;
      HEAP32[((((5249212)|0))>>2)]=0;
      HEAP32[((((5247496)|0))>>2)]=0;
      HEAP32[((((5249208)|0))>>2)]=0;
      var $37=HEAP32[((((5247520)|0))>>2)];
      var $tobool27=(($37)|0)!=0;
      if ($tobool27) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $38=HEAP32[((((5247524)|0))>>2)];
      var $tobool28=(($38)|0)!=0;
      if ($tobool28) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $39=HEAP32[((((5247520)|0))>>2)];
      var $40=$39;
      _qh_free($40);
      HEAP32[((((5247520)|0))>>2)]=0;
      label = 17; break;
    case 17: 
      var $41=HEAP32[((((5247528)|0))>>2)];
      var $tobool31=(($41)|0)!=0;
      if ($tobool31) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $42=HEAP32[((((5247532)|0))>>2)];
      var $tobool33=(($42)|0)!=0;
      if ($tobool33) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $43=HEAP32[((((5247528)|0))>>2)];
      var $44=$43;
      _qh_free($44);
      HEAP32[((((5247528)|0))>>2)]=0;
      label = 20; break;
    case 20: 
      var $45=HEAP32[((((5247040)|0))>>2)];
      var $cmp36=(($45)|0) >= 5;
      if ($cmp36) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $46=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($46, 5002, ((5254988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_freebuffers["X"]=1;

function _qh_freebuild($allmem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $allmem_addr;
      var $facet;
      var $vertex;
      var $ridge;
      var $ridgep;
      var $merge;
      var $mergep;
      $allmem_addr=$allmem;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1005, ((5252228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5249188)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=HEAP32[((((5249188)|0))>>2)];
      _qh_settruncate($3, 0);
      label = 6; break;
    case 6: 
      var $4=$allmem_addr;
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 14; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $5=HEAP32[((((5248984)|0))>>2)];
      $vertex=$5;
      var $tobool5=(($5)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $6=$vertex;
      var $next=(($6)|0);
      var $7=HEAP32[(($next)>>2)];
      var $tobool6=(($7)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $8=$vertex;
      _qh_delvertex($8);
      label = 12; break;
    case 11: 
      var $9=$vertex;
      var $10=$9;
      _qh_memfree($10, 24);
      HEAP32[((((5248984)|0))>>2)]=0;
      HEAP32[((((5248992)|0))>>2)]=0;
      label = 12; break;
    case 12: 
      label = 8; break;
    case 13: 
      label = 23; break;
    case 14: 
      var $11=HEAP32[((((5248580)|0))>>2)];
      var $tobool10=(($11)|0)!=0;
      if ($tobool10) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $12=HEAP32[((((5248984)|0))>>2)];
      $vertex=$12;
      label = 16; break;
    case 16: 
      var $13=$vertex;
      var $tobool12=(($13)|0)!=0;
      if ($tobool12) { label = 17; break; } else { var $16 = 0;label = 18; break; }
    case 17: 
      var $14=$vertex;
      var $next13=(($14)|0);
      var $15=HEAP32[(($next13)>>2)];
      var $tobool14=(($15)|0)!=0;
      var $16 = $tobool14;label = 18; break;
    case 18: 
      var $16;
      if ($16) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $17=$vertex;
      var $neighbors=(($17+12)|0);
      _qh_setfreelong($neighbors);
      label = 20; break;
    case 20: 
      var $18=$vertex;
      var $next15=(($18)|0);
      var $19=HEAP32[(($next15)>>2)];
      $vertex=$19;
      label = 16; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      HEAP32[((((5248580)|0))>>2)]=0;
      HEAP32[((((5249044)|0))>>2)]=0;
      var $20=$allmem_addr;
      var $tobool18=(($20)|0)!=0;
      if ($tobool18) { label = 24; break; } else { label = 68; break; }
    case 24: 
      var $21=HEAP32[((((5248944)|0))>>2)];
      $facet=$21;
      label = 25; break;
    case 25: 
      var $22=$facet;
      var $tobool21=(($22)|0)!=0;
      if ($tobool21) { label = 26; break; } else { var $25 = 0;label = 27; break; }
    case 26: 
      var $23=$facet;
      var $next23=(($23+44)|0);
      var $24=HEAP32[(($next23)>>2)];
      var $tobool24=(($24)|0)!=0;
      var $25 = $tobool24;label = 27; break;
    case 27: 
      var $25;
      if ($25) { label = 28; break; } else { label = 35; break; }
    case 28: 
      $ridge=0;
      var $26=$facet;
      var $ridges=(($26+52)|0);
      var $27=HEAP32[(($ridges)>>2)];
      var $tobool27=(($27)|0)!=0;
      if ($tobool27) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $28=$facet;
      var $ridges29=(($28+52)|0);
      var $29=HEAP32[(($ridges29)>>2)];
      var $e=(($29+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $30=$p;
      $ridgep=$30;
      label = 30; break;
    case 30: 
      var $31=$ridgep;
      var $incdec_ptr=(($31+4)|0);
      $ridgep=$incdec_ptr;
      var $32=HEAP32[(($31)>>2)];
      $ridge=$32;
      var $tobool31=(($32)|0)!=0;
      if ($tobool31) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $33=$ridge;
      var $34=$33;
      var $bf_field_offs=(($34+12)|0);
      var $35=$bf_field_offs;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & -16777217;
      HEAP32[(($35)>>2)]=$37;
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $38=$facet;
      var $next36=(($38+44)|0);
      var $39=HEAP32[(($next36)>>2)];
      $facet=$39;
      label = 25; break;
    case 35: 
      var $40=HEAP32[((((5248944)|0))>>2)];
      $facet=$40;
      label = 36; break;
    case 36: 
      var $41=$facet;
      var $tobool39=(($41)|0)!=0;
      if ($tobool39) { label = 37; break; } else { var $44 = 0;label = 38; break; }
    case 37: 
      var $42=$facet;
      var $next41=(($42+44)|0);
      var $43=HEAP32[(($next41)>>2)];
      var $tobool42=(($43)|0)!=0;
      var $44 = $tobool42;label = 38; break;
    case 38: 
      var $44;
      if ($44) { label = 39; break; } else { label = 53; break; }
    case 39: 
      var $45=$facet;
      var $46=$45;
      var $bf_field_offs45=(($46+76)|0);
      var $47=$bf_field_offs45;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 11;
      var $bf_clear=$49 & 1;
      var $tobool46=(($bf_clear)|0)!=0;
      if ($tobool46) { label = 40; break; } else { label = 51; break; }
    case 40: 
      $ridge=0;
      var $50=$facet;
      var $ridges48=(($50+52)|0);
      var $51=HEAP32[(($ridges48)>>2)];
      var $tobool49=(($51)|0)!=0;
      if ($tobool49) { label = 41; break; } else { label = 50; break; }
    case 41: 
      var $52=$facet;
      var $ridges51=(($52+52)|0);
      var $53=HEAP32[(($ridges51)>>2)];
      var $e52=(($53+4)|0);
      var $arrayidx53=(($e52)|0);
      var $p54=$arrayidx53;
      var $54=$p54;
      $ridgep=$54;
      label = 42; break;
    case 42: 
      var $55=$ridgep;
      var $incdec_ptr56=(($55+4)|0);
      $ridgep=$incdec_ptr56;
      var $56=HEAP32[(($55)>>2)];
      $ridge=$56;
      var $tobool57=(($56)|0)!=0;
      if ($tobool57) { label = 43; break; } else { label = 49; break; }
    case 43: 
      var $57=$ridge;
      var $top=(($57+4)|0);
      var $58=HEAP32[(($top)>>2)];
      var $59=$facet;
      var $cmp59=(($58)|0)==(($59)|0);
      if ($cmp59) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $60=$ridge;
      var $bottom=(($60+8)|0);
      var $61=HEAP32[(($bottom)>>2)];
      var $cond = $61;label = 46; break;
    case 45: 
      var $62=$ridge;
      var $top60=(($62+4)|0);
      var $63=HEAP32[(($top60)>>2)];
      var $cond = $63;label = 46; break;
    case 46: 
      var $cond;
      var $64=$cond;
      var $bf_field_offs61=(($64+76)|0);
      var $65=$bf_field_offs61;
      var $66=HEAP32[(($65)>>2)];
      var $67=$66 >>> 11;
      var $bf_clear62=$67 & 1;
      var $tobool63=(($bf_clear62)|0)!=0;
      if ($tobool63) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $68=$ridge;
      var $69=$68;
      var $bf_field_offs65=(($69+12)|0);
      var $70=$bf_field_offs65;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & -16777217;
      var $73=$72 | 16777216;
      HEAP32[(($70)>>2)]=$73;
      label = 48; break;
    case 48: 
      label = 42; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $74=$facet;
      var $next71=(($74+44)|0);
      var $75=HEAP32[(($next71)>>2)];
      $facet=$75;
      label = 36; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $76=HEAP32[((((5248944)|0))>>2)];
      $facet=$76;
      var $tobool74=(($76)|0)!=0;
      if ($tobool74) { label = 55; break; } else { label = 67; break; }
    case 55: 
      $ridge=0;
      var $77=$facet;
      var $ridges76=(($77+52)|0);
      var $78=HEAP32[(($ridges76)>>2)];
      var $tobool77=(($78)|0)!=0;
      if ($tobool77) { label = 56; break; } else { label = 63; break; }
    case 56: 
      var $79=$facet;
      var $ridges79=(($79+52)|0);
      var $80=HEAP32[(($ridges79)>>2)];
      var $e80=(($80+4)|0);
      var $arrayidx81=(($e80)|0);
      var $p82=$arrayidx81;
      var $81=$p82;
      $ridgep=$81;
      label = 57; break;
    case 57: 
      var $82=$ridgep;
      var $incdec_ptr84=(($82+4)|0);
      $ridgep=$incdec_ptr84;
      var $83=HEAP32[(($82)>>2)];
      $ridge=$83;
      var $tobool85=(($83)|0)!=0;
      if ($tobool85) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $84=$ridge;
      var $85=$84;
      var $bf_field_offs87=(($85+12)|0);
      var $86=$bf_field_offs87;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 >>> 24;
      var $bf_clear88=$88 & 1;
      var $tobool89=(($bf_clear88)|0)!=0;
      if ($tobool89) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $89=$ridge;
      var $vertices=(($89)|0);
      _qh_setfree($vertices);
      var $90=$ridge;
      var $91=$90;
      _qh_memfree($91, 16);
      label = 61; break;
    case 60: 
      var $92=$ridge;
      var $93=$92;
      var $bf_field_offs92=(($93+12)|0);
      var $94=$bf_field_offs92;
      var $95=HEAP32[(($94)>>2)];
      var $96=$95 & -16777217;
      var $97=$96 | 16777216;
      HEAP32[(($94)>>2)]=$97;
      label = 61; break;
    case 61: 
      label = 57; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $98=$facet;
      var $outsideset=(($98+60)|0);
      _qh_setfree($outsideset);
      var $99=$facet;
      var $coplanarset=(($99+64)|0);
      _qh_setfree($coplanarset);
      var $100=$facet;
      var $neighbors96=(($100+56)|0);
      _qh_setfree($neighbors96);
      var $101=$facet;
      var $ridges97=(($101+52)|0);
      _qh_setfree($ridges97);
      var $102=$facet;
      var $vertices98=(($102+48)|0);
      _qh_setfree($vertices98);
      var $103=$facet;
      var $next99=(($103+44)|0);
      var $104=HEAP32[(($next99)>>2)];
      var $tobool100=(($104)|0)!=0;
      if ($tobool100) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $105=$facet;
      _qh_delfacet($105);
      label = 66; break;
    case 65: 
      var $106=$facet;
      var $107=$106;
      _qh_memfree($107, 80);
      HEAP32[((((5248944)|0))>>2)]=0;
      HEAP32[((((5248956)|0))>>2)]=0;
      HEAP32[((((5248960)|0))>>2)]=0;
      label = 66; break;
    case 66: 
      label = 54; break;
    case 67: 
      label = 77; break;
    case 68: 
      var $108=HEAP32[((((5248944)|0))>>2)];
      $facet=$108;
      label = 69; break;
    case 69: 
      var $109=$facet;
      var $tobool107=(($109)|0)!=0;
      if ($tobool107) { label = 70; break; } else { var $112 = 0;label = 71; break; }
    case 70: 
      var $110=$facet;
      var $next109=(($110+44)|0);
      var $111=HEAP32[(($next109)>>2)];
      var $tobool110=(($111)|0)!=0;
      var $112 = $tobool110;label = 71; break;
    case 71: 
      var $112;
      if ($112) { label = 72; break; } else { label = 76; break; }
    case 72: 
      var $113=$facet;
      var $outsideset113=(($113+60)|0);
      _qh_setfreelong($outsideset113);
      var $114=$facet;
      var $coplanarset114=(($114+64)|0);
      _qh_setfreelong($coplanarset114);
      var $115=$facet;
      var $116=$115;
      var $bf_field_offs115=(($116+76)|0);
      var $117=$bf_field_offs115;
      var $118=HEAP32[(($117)>>2)];
      var $119=$118 >>> 13;
      var $bf_clear116=$119 & 1;
      var $tobool117=(($bf_clear116)|0)!=0;
      if ($tobool117) { label = 74; break; } else { label = 73; break; }
    case 73: 
      var $120=$facet;
      var $neighbors119=(($120+56)|0);
      _qh_setfreelong($neighbors119);
      var $121=$facet;
      var $ridges120=(($121+52)|0);
      _qh_setfreelong($ridges120);
      var $122=$facet;
      var $vertices121=(($122+48)|0);
      _qh_setfreelong($vertices121);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $123=$facet;
      var $next124=(($123+44)|0);
      var $124=HEAP32[(($next124)>>2)];
      $facet=$124;
      label = 69; break;
    case 76: 
      label = 77; break;
    case 77: 
      _qh_setfree(((5249180)|0));
      var $125=HEAP32[((((5248928)|0))>>2)];
      var $126=$125;
      var $127=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($126, $127);
      HEAP32[((((5248928)|0))>>2)]=0;
      $merge=0;
      var $128=HEAP32[((((5249172)|0))>>2)];
      var $tobool127=(($128)|0)!=0;
      if ($tobool127) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $129=HEAP32[((((5249172)|0))>>2)];
      var $e129=(($129+4)|0);
      var $arrayidx130=(($e129)|0);
      var $p131=$arrayidx130;
      var $130=$p131;
      $mergep=$130;
      label = 79; break;
    case 79: 
      var $131=$mergep;
      var $incdec_ptr133=(($131+4)|0);
      $mergep=$incdec_ptr133;
      var $132=HEAP32[(($131)>>2)];
      $merge=$132;
      var $tobool134=(($132)|0)!=0;
      if ($tobool134) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $133=$merge;
      var $134=$133;
      _qh_memfree($134, 20);
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      HEAP32[((((5249172)|0))>>2)]=0;
      HEAP32[((((5249176)|0))>>2)]=0;
      _qh_settempfree_all();
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_freebuild["X"]=1;

function _qh_freeqhull($allmem) {
  var label = 0;


  var $allmem_addr;
  $allmem_addr=$allmem;
  var $0=$allmem_addr;
  _qh_freeqhull2($0);

  return;
}


function _qh_freeqhull2($allmem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $allmem_addr;
      $allmem_addr=$allmem;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1006, ((5251924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      HEAP32[((((5249104)|0))>>2)]=1;
      var $2=$allmem_addr;
      _qh_freebuild($2);
      _qh_freebuffers();
      _qh_freestatistics();
      _memset(5246936, 0, 2340);
      HEAP32[((((5249104)|0))>>2)]=1;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_init_A($infile, $outfile, $errfile, $argc, $argv) {
  var label = 0;


  var $infile_addr;
  var $outfile_addr;
  var $errfile_addr;
  var $argc_addr;
  var $argv_addr;
  $infile_addr=$infile;
  $outfile_addr=$outfile;
  $errfile_addr=$errfile;
  $argc_addr=$argc;
  $argv_addr=$argv;
  var $0=$errfile_addr;
  _qh_meminit($0);
  var $1=$infile_addr;
  var $2=$outfile_addr;
  var $3=$errfile_addr;
  _qh_initqhull_start($1, $2, $3);
  var $4=$argc_addr;
  var $5=$argv_addr;
  _qh_init_qhull_command($4, $5);

  return;
}


function _qh_initqhull_start($infile, $outfile, $errfile) {
  var label = 0;


  var $infile_addr;
  var $outfile_addr;
  var $errfile_addr;
  $infile_addr=$infile;
  $outfile_addr=$outfile;
  $errfile_addr=$errfile;
  _qh_initstatistics();
  var $0=$infile_addr;
  var $1=$outfile_addr;
  var $2=$errfile_addr;
  _qh_initqhull_start2($0, $1, $2);

  return;
}


function _qh_init_qhull_command($argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $argc_addr;
      var $argv_addr;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$argc_addr;
      var $1=$argv_addr;
      var $call=_qh_argv_to_command($0, $1, ((5247536)|0), 256);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 6033, ((5304028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=256,tempInt));
      _qh_exit(1);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_init_B($points, $numpoints, $dim, $ismalloc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $ismalloc_addr;
      var $k;
      var $lastk;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $ismalloc_addr=$ismalloc;
      var $0=$points_addr;
      var $1=$numpoints_addr;
      var $2=$dim_addr;
      var $3=$ismalloc_addr;
      _qh_initqhull_globals($0, $1, $2, $3);
      var $4=HEAP32[((((5242896)|0))>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _qh_initqhull_mem();
      label = 4; break;
    case 4: 
      _qh_initqhull_buffers();
      _qh_initthresholds(((5247536)|0));
      var $5=HEAP32[((((5247332)|0))>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $6=HEAP32[((((5247000)|0))>>2)];
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=HEAP32[((((5247328)|0))>>2)];
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _qh_projectinput();
      label = 8; break;
    case 8: 
      var $8=HEAP32[((((5247388)|0))>>2)];
      var $tobool5=(($8)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _qh_scaleinput();
      label = 10; break;
    case 10: 
      var $9=HEAP32[((((5247384)|0))>>2)];
      var $cmp8=(($9)|0) >= 0;
      if ($cmp8) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $10=HEAP32[((((5249192)|0))>>2)];
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $12=HEAP32[((((5249196)|0))>>2)];
      _qh_randommatrix($10, $11, $12);
      var $13=HEAP32[((((5247000)|0))>>2)];
      var $tobool10=(($13)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $14=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($14)-(1))|0);
      $lastk=$sub;
      $k=0;
      label = 13; break;
    case 13: 
      var $15=$k;
      var $16=$lastk;
      var $cmp12=(($15)|0) < (($16)|0);
      if ($cmp12) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $17=$lastk;
      var $18=$k;
      var $19=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx)>>2)];
      var $arrayidx13=(($20+($17<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $21=$k;
      var $22=$lastk;
      var $23=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx14=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx14)>>2)];
      var $arrayidx15=(($24+($21<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx15)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx15)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 15; break;
    case 15: 
      var $25=$k;
      var $inc=((($25)+(1))|0);
      $k=$inc;
      label = 13; break;
    case 16: 
      var $26=$lastk;
      var $27=$lastk;
      var $28=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx16=(($28+($27<<2))|0);
      var $29=HEAP32[(($arrayidx16)>>2)];
      var $arrayidx17=(($29+($26<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($arrayidx17)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx17)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 17; break;
    case 17: 
      var $30=HEAP32[((((5247508)|0))>>2)];
      var $31=HEAP32[((((5249196)|0))>>2)];
      var $call=_qh_gram_schmidt($30, $31);
      var $32=HEAP32[((((5249196)|0))>>2)];
      _qh_rotateinput($32);
      label = 18; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_init_B["X"]=1;

function _qh_initqhull_globals($points, $numpoints, $dim, $ismalloc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $numpoints_addr;
      var $dim_addr;
      var $ismalloc_addr;
      var $seed=__stackBase__;
      var $pointsneeded;
      var $extra;
      var $i;
      var $randi;
      var $k;
      var $randr;
      var $factorial;
      var $timedata=(__stackBase__)+(4);
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $dim_addr=$dim;
      $ismalloc_addr=$ismalloc;
      $extra=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 13, ((5289800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      label = 4; break;
    case 4: 
      var $2=$ismalloc_addr;
      HEAP32[((((5247524)|0))>>2)]=$2;
      var $3=$points_addr;
      HEAP32[((((5247520)|0))>>2)]=$3;
      var $4=$numpoints_addr;
      HEAP32[((((5247516)|0))>>2)]=$4;
      var $5=$dim_addr;
      HEAP32[((((5247512)|0))>>2)]=$5;
      HEAP32[((((5247508)|0))>>2)]=$5;
      var $6=HEAP32[((((5247124)|0))>>2)];
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 12; break; } else { label = 5; break; }
    case 5: 
      var $7=HEAP32[((((5247076)|0))>>2)];
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { label = 12; break; } else { label = 6; break; }
    case 6: 
      var $8=HEAP32[((((5247144)|0))>>2)];
      var $tobool4=(($8)|0)!=0;
      if ($tobool4) { label = 12; break; } else { label = 7; break; }
    case 7: 
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$9 > 8.988465674311579e+307;
      if ($cmp) { label = 8; break; } else { label = 12; break; }
    case 8: 
      HEAP32[((((5247084)|0))>>2)]=1;
      var $10=HEAP32[((((5247508)|0))>>2)];
      var $cmp7=(($10)|0) <= 4;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      HEAP32[((((5247144)|0))>>2)]=1;
      _qh_option(((5289732)|0), 0, 0);
      label = 11; break;
    case 10: 
      HEAP32[((((5247076)|0))>>2)]=1;
      _qh_option(((5289628)|0), 0, 0);
      label = 11; break;
    case 11: 
      label = 15; break;
    case 12: 
      var $11=HEAP32[((((5247076)|0))>>2)];
      var $tobool11=(($11)|0)!=0;
      if ($tobool11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      HEAP32[((((5247084)|0))>>2)]=1;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $12=HEAP32[((((5247124)|0))>>2)];
      var $tobool15=(($12)|0)!=0;
      if ($tobool15) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp17=$13 > 8.988465674311579e+307;
      if ($cmp17) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $14=HEAP32[((((5247452)|0))>>2)];
      var $tobool20=(($14)|0)!=0;
      if ($tobool20) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp22=$15 < 8.988465674311579e+307;
      if ($cmp22) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $16=HEAP32[((((5247188)|0))>>2)];
      var $tobool24=(($16)|0)!=0;
      if ($tobool24) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $17=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($17, 7038, ((5289340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp27=$18 < 8.988465674311579e+307;
      if ($cmp27) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $19=HEAP32[((((5247000)|0))>>2)];
      var $tobool29=(($19)|0)!=0;
      if ($tobool29) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $20=HEAP32[((((5247388)|0))>>2)];
      var $tobool31=(($20)|0)!=0;
      if ($tobool31) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $21=HEAP32[((((5247392)|0))>>2)];
      var $tobool33=(($21)|0)!=0;
      if ($tobool33) { label = 27; break; } else { label = 26; break; }
    case 26: 
      HEAP32[((((5247392)|0))>>2)]=1;
      _qh_option(((5289204)|0), 0, 0);
      label = 27; break;
    case 27: 
      var $22=HEAP32[((((5247084)|0))>>2)];
      var $tobool36=(($22)|0)!=0;
      if ($tobool36) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $23=HEAP32[((((5247140)|0))>>2)];
      var $tobool38=(($23)|0)!=0;
      if ($tobool38) { label = 32; break; } else { label = 29; break; }
    case 29: 
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp40=$24 > 8.988465674311579e+307;
      if ($cmp40) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp42=$25 == 0;
      if ($cmp42) { label = 31; break; } else { label = 32; break; }
    case 31: 
      HEAP32[((((5248584)|0))>>2)]=1;
      HEAP32[((((5249164)|0))>>2)]=1;
      _qh_option(((5289092)|0), 0, 0);
      label = 32; break;
    case 32: 
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp45=$26 < 8.988465674311579e+307;
      if ($cmp45) { label = 33; break; } else { label = 36; break; }
    case 33: 
      if (0) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $27=HEAP32[((((5247188)|0))>>2)];
      var $tobool48=(($27)|0)!=0;
      if ($tobool48) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $28=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($28, 7039, ((5288912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=2.220446049250313e-16,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 36; break;
    case 36: 
      var $29=HEAP32[((((5247000)|0))>>2)];
      var $tobool51=(($29)|0)!=0;
      if ($tobool51) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $30=HEAP32[((((5247048)|0))>>2)];
      var $tobool53=(($30)|0)!=0;
      if ($tobool53) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $31=HEAP32[((((5247052)|0))>>2)];
      var $tobool55=(($31)|0)!=0;
      if ($tobool55) { label = 40; break; } else { label = 39; break; }
    case 39: 
      HEAP32[((((5247052)|0))>>2)]=1;
      _qh_option(((5303720)|0), 0, 0);
      label = 40; break;
    case 40: 
      var $32=HEAP32[((((5247000)|0))>>2)];
      var $tobool58=(($32)|0)!=0;
      if ($tobool58) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $33=HEAP32[((((5247036)|0))>>2)];
      var $tobool60=(($33)|0)!=0;
      if ($tobool60) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($34, 6046, ((5288696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 43; break;
    case 43: 
      var $35=HEAP32[((((5247000)|0))>>2)];
      var $tobool63=(($35)|0)!=0;
      if ($tobool63) { label = 47; break; } else { label = 44; break; }
    case 44: 
      var $36=HEAP32[((((5247460)|0))>>2)];
      var $tobool65=(($36)|0)!=0;
      if ($tobool65) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $37=HEAP32[((((5246960)|0))>>2)];
      var $tobool66=(($37)|0)!=0;
      if ($tobool66) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $38=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($38, 6047, ((5288540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 47; break;
    case 47: 
      var $39=HEAP32[((((5247460)|0))>>2)];
      var $tobool69=(($39)|0)!=0;
      if ($tobool69) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $40=HEAP32[((((5246960)|0))>>2)];
      var $tobool71=(($40)|0)!=0;
      if ($tobool71) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $41=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($41, 6048, ((5288308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 50; break;
    case 50: 
      var $42=HEAP32[((((5247392)|0))>>2)];
      var $tobool74=(($42)|0)!=0;
      if ($tobool74) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $43=HEAP32[((((5247000)|0))>>2)];
      var $tobool76=(($43)|0)!=0;
      if ($tobool76) { label = 54; break; } else { label = 52; break; }
    case 52: 
      var $44=HEAP32[((((5247188)|0))>>2)];
      var $tobool78=(($44)|0)!=0;
      if ($tobool78) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $45=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($45, 7040, ((5288108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 54; break;
    case 54: 
      var $46=HEAP32[((((5247400)|0))>>2)];
      var $tobool81=(($46)|0)!=0;
      if ($tobool81) { var $48 = 0;label = 56; break; } else { label = 55; break; }
    case 55: 
      var $47=HEAP32[((((5247084)|0))>>2)];
      var $tobool82=(($47)|0)!=0;
      var $48 = $tobool82;label = 56; break;
    case 56: 
      var $48;
      var $land_ext=(($48)&1);
      HEAP32[((((5247488)|0))>>2)]=$land_ext;
      var $49=HEAP32[((((5247488)|0))>>2)];
      var $tobool83=(($49)|0)!=0;
      if ($tobool83) { label = 57; break; } else { var $53 = 0;label = 60; break; }
    case 57: 
      var $50=HEAP32[((((5247052)|0))>>2)];
      var $tobool85=(($50)|0)!=0;
      if ($tobool85) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $51=HEAP32[((((5247048)|0))>>2)];
      var $tobool87=(($51)|0)!=0;
      if ($tobool87) { var $53 = 0;label = 60; break; } else { label = 59; break; }
    case 59: 
      var $52=HEAP32[((((5247120)|0))>>2)];
      var $tobool89=(($52)|0)!=0;
      var $lnot=$tobool89 ^ 1;
      var $53 = $lnot;label = 60; break;
    case 60: 
      var $53;
      var $land_ext91=(($53)&1);
      HEAP32[((((5247504)|0))>>2)]=$land_ext91;
      var $54=HEAP32[((((5247084)|0))>>2)];
      var $tobool92=(($54)|0)!=0;
      if ($tobool92) { label = 61; break; } else { label = 62; break; }
    case 61: 
      HEAP32[((((5249036)|0))>>2)]=2;
      label = 65; break;
    case 62: 
      var $55=HEAP32[((((5247476)|0))>>2)];
      var $tobool95=(($55)|0)!=0;
      if ($tobool95) { label = 63; break; } else { label = 64; break; }
    case 63: 
      HEAP32[((((5249036)|0))>>2)]=1;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $56=HEAP32[((((5247424)|0))>>2)];
      var $tobool99=(($56)|0)!=0;
      if ($tobool99) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $57=HEAP32[((((5247084)|0))>>2)];
      var $tobool101=(($57)|0)!=0;
      if ($tobool101) { label = 68; break; } else { label = 67; break; }
    case 67: 
      var $58=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($58, 6049, ((5287996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 68; break;
    case 68: 
      var $59=HEAP32[((((5247332)|0))>>2)];
      var $tobool104=(($59)|0)!=0;
      if ($tobool104) { label = 71; break; } else { label = 69; break; }
    case 69: 
      var $60=HEAP32[((((5247000)|0))>>2)];
      var $tobool106=(($60)|0)!=0;
      if ($tobool106) { label = 70; break; } else { label = 76; break; }
    case 70: 
      var $61=HEAP32[((((5247328)|0))>>2)];
      var $tobool108=(($61)|0)!=0;
      if ($tobool108) { label = 71; break; } else { label = 76; break; }
    case 71: 
      var $62=HEAP32[((((5247332)|0))>>2)];
      var $63=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($63)-($62))|0);
      HEAP32[((((5247508)|0))>>2)]=$sub;
      var $64=HEAP32[((((5247000)|0))>>2)];
      var $tobool110=(($64)|0)!=0;
      if ($tobool110) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $65=HEAP32[((((5247508)|0))>>2)];
      var $inc=((($65)+(1))|0);
      HEAP32[((((5247508)|0))>>2)]=$inc;
      var $66=HEAP32[((((5246960)|0))>>2)];
      var $tobool112=(($66)|0)!=0;
      if ($tobool112) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $extra=1;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $67=HEAP32[((((5247508)|0))>>2)];
      var $cmp117=(($67)|0) <= 1;
      if ($cmp117) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $68=HEAP32[((((5248924)|0))>>2)];
      var $69=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($68, 6050, ((5287728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$69,tempInt));
      _qh_errexit(1, 0, 0);
      label = 78; break;
    case 78: 
      $k=2;
      $factorial=1;
      label = 79; break;
    case 79: 
      var $70=$k;
      var $71=HEAP32[((((5247508)|0))>>2)];
      var $cmp120=(($70)|0) < (($71)|0);
      if ($cmp120) { label = 80; break; } else { label = 82; break; }
    case 80: 
      var $72=$k;
      var $conv=(($72)|0);
      var $73=$factorial;
      var $mul=($73)*($conv);
      $factorial=$mul;
      label = 81; break;
    case 81: 
      var $74=$k;
      var $inc121=((($74)+(1))|0);
      $k=$inc121;
      label = 79; break;
    case 82: 
      var $75=$factorial;
      var $div=(1)/($75);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[((((5247480)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247480)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $76=HEAP32[((((5247040)|0))>>2)];
      var $cmp122=(($76)|0) >= 2;
      if ($cmp122) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $77=HEAP32[((((5248924)|0))>>2)];
      var $78=$dim_addr;
      var $79=$numpoints_addr;
      var $80=$ismalloc_addr;
      var $81=HEAP32[((((5247332)|0))>>2)];
      var $82=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($77, 2005, ((5287040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$78,HEAP32[(((tempInt)+(4))>>2)]=$79,HEAP32[(((tempInt)+(8))>>2)]=$80,HEAP32[(((tempInt)+(12))>>2)]=$81,HEAP32[(((tempInt)+(16))>>2)]=$82,tempInt));
      label = 84; break;
    case 84: 
      var $83=HEAP32[((((5247508)|0))>>2)];
      var $mul126=((($83<<3))&-1);
      HEAP32[((((5248932)|0))>>2)]=$mul126;
      var $84=HEAP32[((((5248932)|0))>>2)];
      var $sub127=((($84)-(8))|0);
      HEAP32[((((5248936)|0))>>2)]=$sub127;
      var $85=HEAP32[((((5247508)|0))>>2)];
      var $add=((($85)+(1))|0);
      $pointsneeded=$add;
      var $86=HEAP32[((((5247508)|0))>>2)];
      var $cmp128=(($86)|0) > 6;
      if ($cmp128) { label = 85; break; } else { label = 86; break; }
    case 85: 
      HEAP32[((((5247104)|0))>>2)]=0;
      _qh_option(((5286904)|0), 0, 0);
      label = 86; break;
    case 86: 
      var $87=HEAP32[((((5247016)|0))>>2)];
      var $tobool132=(($87)|0)!=0;
      if ($tobool132) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $88=$pointsneeded;
      var $inc134=((($88)+(1))|0);
      $pointsneeded=$inc134;
      label = 88; break;
    case 88: 
      var $89=HEAP32[((((5247380)|0))>>2)];
      var $cmp136=(($89)|0) > 1;
      if ($cmp136) { label = 89; break; } else { label = 92; break; }
    case 89: 
      var $90=HEAP32[((((5247040)|0))>>2)];
      HEAP32[((((5247432)|0))>>2)]=$90;
      var $91=HEAP32[((((5247040)|0))>>2)];
      var $cmp139=(($91)|0)!=-1;
      if ($cmp139) { label = 90; break; } else { label = 91; break; }
    case 90: 
      HEAP32[((((5247040)|0))>>2)]=0;
      label = 91; break;
    case 91: 
      label = 100; break;
    case 92: 
      var $92=HEAP32[((((5247436)|0))>>2)];
      var $cmp144=(($92)|0)!=-1;
      if ($cmp144) { label = 95; break; } else { label = 93; break; }
    case 93: 
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp147=$93 < 8.988465674311579e+307;
      if ($cmp147) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $94=HEAP32[((((5247448)|0))>>2)];
      var $tobool150=(($94)|0)!=0;
      if ($tobool150) { label = 95; break; } else { label = 99; break; }
    case 95: 
      var $95=HEAP32[((((5247040)|0))>>2)];
      var $tobool152=(($95)|0)!=0;
      if ($tobool152) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $96=HEAP32[((((5247040)|0))>>2)];
      var $cond = $96;label = 98; break;
    case 97: 
      var $cond = 3;label = 98; break;
    case 98: 
      var $cond;
      HEAP32[((((5247428)|0))>>2)]=$cond;
      HEAP32[((((5247040)|0))>>2)]=0;
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $97=HEAP32[((((5247384)|0))>>2)];
      var $cmp155=(($97)|0)==0;
      if ($cmp155) { label = 102; break; } else { label = 101; break; }
    case 101: 
      var $98=HEAP32[((((5247384)|0))>>2)];
      var $cmp158=(($98)|0)==-1;
      if ($cmp158) { label = 102; break; } else { label = 106; break; }
    case 102: 
      var $call=_time($timedata);
      HEAP32[(($seed)>>2)]=$call;
      var $99=HEAP32[((((5247384)|0))>>2)];
      var $cmp161=(($99)|0)==-1;
      if ($cmp161) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $100=HEAP32[(($seed)>>2)];
      var $sub164=(((-$100))|0);
      HEAP32[(($seed)>>2)]=$sub164;
      _qh_option(((5296428)|0), $seed, 0);
      label = 105; break;
    case 104: 
      _qh_option(((5286748)|0), $seed, 0);
      label = 105; break;
    case 105: 
      var $101=HEAP32[(($seed)>>2)];
      HEAP32[((((5247384)|0))>>2)]=$101;
      label = 106; break;
    case 106: 
      var $102=HEAP32[((((5247384)|0))>>2)];
      HEAP32[(($seed)>>2)]=$102;
      var $103=HEAP32[(($seed)>>2)];
      var $cmp168=(($103)|0)==-2147483648;
      if ($cmp168) { label = 107; break; } else { label = 108; break; }
    case 107: 
      HEAP32[(($seed)>>2)]=1;
      label = 111; break;
    case 108: 
      var $104=HEAP32[(($seed)>>2)];
      var $cmp172=(($104)|0) < 0;
      if ($cmp172) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $105=HEAP32[(($seed)>>2)];
      var $sub175=(((-$105))|0);
      HEAP32[(($seed)>>2)]=$sub175;
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $106=HEAP32[(($seed)>>2)];
      _qh_srand($106);
      $randr=0;
      $i=1000;
      label = 112; break;
    case 112: 
      var $107=$i;
      var $dec=((($107)-(1))|0);
      $i=$dec;
      var $tobool179=(($107)|0)!=0;
      if ($tobool179) { label = 113; break; } else { label = 116; break; }
    case 113: 
      var $call181=_qh_rand();
      $randi=$call181;
      var $108=$randi;
      var $conv182=(($108)|0);
      var $109=$randr;
      var $add183=($109)+($conv182);
      $randr=$add183;
      var $110=$randi;
      var $conv184=(($110)|0);
      var $cmp185=$conv184 > 2147483646;
      if ($cmp185) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $111=HEAP32[((((5248924)|0))>>2)];
      var $112=$randi;
      _qh_fprintf($111, 8036, ((5286600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$112,(HEAPF64[(tempDoublePtr)>>3]=2147483646,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(1, 0, 0);
      label = 115; break;
    case 115: 
      label = 112; break;
    case 116: 
      var $113=HEAP32[(($seed)>>2)];
      _qh_srand($113);
      var $114=$randr;
      var $div190=($114)/(1000);
      $randr=$div190;
      var $115=$randr;
      var $cmp191=$115 < 214748364.60000002;
      if ($cmp191) { label = 118; break; } else { label = 117; break; }
    case 117: 
      var $116=$randr;
      var $cmp194=$116 > 1932735281.4;
      if ($cmp194) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $117=HEAP32[((((5248924)|0))>>2)];
      var $118=$randr;
      _qh_fprintf($117, 8037, ((5286368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$118,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=1073741823,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=2147483646,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 119; break;
    case 119: 
      var $119=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul198=($119)*(2);
      var $div199=($mul198)/(2147483646);
      (HEAPF64[(tempDoublePtr)>>3]=$div199,HEAP32[((((5247352)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247352)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $120=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247344)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247344)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub200=(1)-($120);
      (HEAPF64[(tempDoublePtr)>>3]=$sub200,HEAP32[((((5247360)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247360)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $121=$numpoints_addr;
      var $122=$extra;
      var $add201=((($121)+($122))|0);
      var $123=$pointsneeded;
      var $cmp202=(($add201)|0) < (($123)|0);
      if ($cmp202) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $124=HEAP32[((((5248924)|0))>>2)];
      var $125=$numpoints_addr;
      var $126=$pointsneeded;
      _qh_fprintf($124, 6214, ((5286252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$125,HEAP32[(((tempInt)+(4))>>2)]=$126,tempInt));
      _qh_errexit(1, 0, 0);
      label = 121; break;
    case 121: 
      _qh_initqhull_outputflags();
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initqhull_globals["X"]=1;

function _qh_initqhull_mem() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $numsizes;
      var $i;
      $numsizes=18;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $1=$numsizes;
      _qh_meminitbuffers($0, 8, $1, 65536, 131072);
      _qh_memsize(24);
      var $2=HEAP32[((((5247084)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _qh_memsize(16);
      _qh_memsize(20);
      label = 4; break;
    case 4: 
      _qh_memsize(80);
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($3)-(1))|0);
      var $mul=((($sub<<2))&-1);
      var $add=((($mul)+(8))|0);
      $i=$add;
      var $4=$i;
      _qh_memsize($4);
      var $5=HEAP32[((((5248932)|0))>>2)];
      _qh_memsize($5);
      var $6=$i;
      var $add1=((($6)+(4))|0);
      $i=$add1;
      var $7=$i;
      _qh_memsize($7);
      _qh_user_memsizes();
      _qh_memsetup();

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_initqhull_buffers() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $k;
      var $0=HEAP32[((((5242896)|0))>>2)];
      var $sub=((($0)-(8))|0);
      var $div=Math.floor(((($sub)>>>0))/(4));
      HEAP32[((((5248940)|0))>>2)]=$div;
      var $1=HEAP32[((((5248940)|0))>>2)];
      var $cmp=(($1)|0) <= 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=HEAP32[((((5248940)|0))>>2)];
      var $3=HEAP32[((((5242896)|0))>>2)];
      var $cmp1=(($2)|0) > (($3)|0);
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      HEAP32[((((5248940)|0))>>2)]=8;
      label = 5; break;
    case 5: 
      var $4=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_setnew($4);
      HEAP32[((((5249184)|0))>>2)]=$call;
      var $5=HEAP32[((((5248940)|0))>>2)];
      var $call2=_qh_setnew($5);
      HEAP32[((((5249188)|0))>>2)]=$call2;
      var $6=HEAP32[((((5248940)|0))>>2)];
      var $call3=_qh_setnew($6);
      HEAP32[((((5249228)|0))>>2)]=$call3;
      var $7=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($7<<3))&-1);
      var $call4=_qh_memalloc($mul);
      var $8=$call4;
      HEAP32[((((5248712)|0))>>2)]=$8;
      var $9=HEAP32[((((5247512)|0))>>2)];
      var $add=((($9)+(1))|0);
      var $mul5=((($add<<3))&-1);
      var $call6=_qh_memalloc($mul5);
      var $10=$call6;
      HEAP32[((((5248592)|0))>>2)]=$10;
      var $11=HEAP32[((((5247512)|0))>>2)];
      var $add7=((($11)+(1))|0);
      var $mul8=((($add7<<3))&-1);
      var $call9=_qh_memalloc($mul8);
      var $12=$call9;
      HEAP32[((((5248588)|0))>>2)]=$12;
      var $13=HEAP32[((((5247512)|0))>>2)];
      var $add10=((($13)+(1))|0);
      var $mul11=((($add10<<3))&-1);
      var $call12=_qh_memalloc($mul11);
      var $14=$call12;
      HEAP32[((((5248600)|0))>>2)]=$14;
      var $15=HEAP32[((((5247512)|0))>>2)];
      var $add13=((($15)+(1))|0);
      var $mul14=((($add13<<3))&-1);
      var $call15=_qh_memalloc($mul14);
      var $16=$call15;
      HEAP32[((((5248596)|0))>>2)]=$16;
      var $17=HEAP32[((((5247512)|0))>>2)];
      var $add16=((($17)+(1))|0);
      $k=$add16;
      label = 6; break;
    case 6: 
      var $18=$k;
      var $dec=((($18)-(1))|0);
      $k=$dec;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$k;
      var $20=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx=(($20+($19<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[(($arrayidx)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $21=$k;
      var $22=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx17=(($22+($21<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[(($arrayidx17)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx17)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $23=$k;
      var $24=HEAP32[((((5248600)|0))>>2)];
      var $arrayidx18=(($24+($23<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[(($arrayidx18)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx18)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $25=$k;
      var $26=HEAP32[((((5248596)|0))>>2)];
      var $arrayidx19=(($26+($25<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[(($arrayidx19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 6; break;
    case 8: 
      var $27=HEAP32[((((5247508)|0))>>2)];
      var $add20=((($27)+(1))|0);
      var $28=HEAP32[((((5247508)|0))>>2)];
      var $mul21=((($add20)*($28))&-1);
      var $mul22=((($mul21<<3))&-1);
      var $call23=_qh_memalloc($mul22);
      var $29=$call23;
      HEAP32[((((5249192)|0))>>2)]=$29;
      var $30=HEAP32[((((5247508)|0))>>2)];
      var $add24=((($30)+(1))|0);
      var $mul25=((($add24<<2))&-1);
      var $call26=_qh_memalloc($mul25);
      var $31=$call26;
      HEAP32[((((5249196)|0))>>2)]=$31;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initqhull_buffers["X"]=1;

function _qh_initthresholds($command) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $command_addr;
      var $value;
      var $idx;
      var $maxdim;
      var $k;
      var $s=__stackBase__;
      var $key;
      $command_addr=$command;
      var $0=$command_addr;
      HEAP32[(($s)>>2)]=$0;
      var $1=HEAP32[((((5247512)|0))>>2)];
      $maxdim=$1;
      var $2=HEAP32[((((5247000)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=HEAP32[((((5247328)|0))>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=HEAP32[((((5247332)|0))>>2)];
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$maxdim;
      var $inc=((($5)+(1))|0);
      $maxdim=$inc;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=HEAP32[(($s)>>2)];
      var $7=HEAP8[($6)];
      var $tobool3=(($7 << 24) >> 24)!=0;
      if ($tobool3) { label = 8; break; } else { label = 77; break; }
    case 8: 
      var $8=HEAP32[(($s)>>2)];
      var $9=HEAP8[($8)];
      var $conv=(($9 << 24) >> 24);
      var $cmp=(($conv)|0)==45;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=HEAP32[(($s)>>2)];
      var $incdec_ptr=(($10+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr;
      label = 10; break;
    case 10: 
      var $11=HEAP32[(($s)>>2)];
      var $12=HEAP8[($11)];
      var $conv7=(($12 << 24) >> 24);
      var $cmp8=(($conv7)|0)==80;
      if ($cmp8) { label = 11; break; } else { label = 32; break; }
    case 11: 
      var $13=HEAP32[(($s)>>2)];
      var $incdec_ptr11=(($13+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr11;
      label = 12; break;
    case 12: 
      var $14=HEAP32[(($s)>>2)];
      var $15=HEAP8[($14)];
      var $conv13=(($15 << 24) >> 24);
      var $tobool14=(($conv13)|0)!=0;
      if ($tobool14) { label = 13; break; } else { var $18 = 0;label = 14; break; }
    case 13: 
      var $16=HEAP32[(($s)>>2)];
      var $incdec_ptr15=(($16+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr15;
      var $17=HEAP8[($16)];
      $key=$17;
      var $conv16=(($17 << 24) >> 24);
      var $call=_isspace($conv16);
      var $tobool17=(($call)|0)!=0;
      var $lnot=$tobool17 ^ 1;
      var $18 = $lnot;label = 14; break;
    case 14: 
      var $18;
      if ($18) { label = 15; break; } else { label = 31; break; }
    case 15: 
      var $19=$key;
      var $conv19=(($19 << 24) >> 24);
      var $cmp20=(($conv19)|0)==100;
      if ($cmp20) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $20=$key;
      var $conv23=(($20 << 24) >> 24);
      var $cmp24=(($conv23)|0)==68;
      if ($cmp24) { label = 17; break; } else { label = 30; break; }
    case 17: 
      var $21=HEAP32[(($s)>>2)];
      var $22=HEAP8[($21)];
      var $conv27=(($22 << 24) >> 24);
      var $call28=_isdigit($conv27);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      var $24=$key;
      var $conv31=(($24 << 24) >> 24);
      var $25=HEAP32[(($s)>>2)];
      var $add_ptr=((($25)-(1))|0);
      _qh_fprintf($23, 7044, ((5282364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$conv31,HEAP32[(((tempInt)+(4))>>2)]=$add_ptr,tempInt));
      label = 12; break;
    case 19: 
      var $26=HEAP32[(($s)>>2)];
      var $call33=_qh_strtol($26, $s);
      $idx=$call33;
      var $27=$idx;
      var $28=HEAP32[((((5247508)|0))>>2)];
      var $cmp34=(($27)|0) >= (($28)|0);
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $29=HEAP32[((((5248924)|0))>>2)];
      var $30=$idx;
      var $31=$key;
      var $conv37=(($31 << 24) >> 24);
      var $32=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($29, 7045, ((5281352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$conv37,HEAP32[(((tempInt)+(8))>>2)]=$32,tempInt));
      label = 12; break;
    case 21: 
      var $33=HEAP32[(($s)>>2)];
      var $34=HEAP8[($33)];
      var $conv39=(($34 << 24) >> 24);
      var $cmp40=(($conv39)|0)==58;
      if ($cmp40) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $35=HEAP32[(($s)>>2)];
      var $incdec_ptr43=(($35+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr43;
      var $36=HEAP32[(($s)>>2)];
      var $call44=_qh_strtod($36, $s);
      $value=$call44;
      var $37=$value;
      var $call45=Math.abs($37);
      var $cmp46=$call45 > 1;
      if ($cmp46) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $38=HEAP32[((((5248924)|0))>>2)];
      var $39=$value;
      var $40=$key;
      var $conv49=(($40 << 24) >> 24);
      _qh_fprintf($38, 7046, ((5281268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$conv49,tempInt));
      label = 12; break;
    case 24: 
      label = 26; break;
    case 25: 
      $value=0;
      label = 26; break;
    case 26: 
      var $41=$key;
      var $conv52=(($41 << 24) >> 24);
      var $cmp53=(($conv52)|0)==100;
      if ($cmp53) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $42=$value;
      var $43=$idx;
      var $44=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx=(($44+($43<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$42,HEAP32[(($arrayidx)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 28: 
      var $45=$value;
      var $46=$idx;
      var $47=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx57=(($47+($46<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$45,HEAP32[(($arrayidx57)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx57)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 12; break;
    case 31: 
      label = 73; break;
    case 32: 
      var $48=HEAP32[(($s)>>2)];
      var $49=HEAP8[($48)];
      var $conv61=(($49 << 24) >> 24);
      var $cmp62=(($conv61)|0)==81;
      if ($cmp62) { label = 33; break; } else { label = 66; break; }
    case 33: 
      var $50=HEAP32[(($s)>>2)];
      var $incdec_ptr65=(($50+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr65;
      label = 34; break;
    case 34: 
      var $51=HEAP32[(($s)>>2)];
      var $52=HEAP8[($51)];
      var $conv67=(($52 << 24) >> 24);
      var $tobool68=(($conv67)|0)!=0;
      if ($tobool68) { label = 35; break; } else { var $55 = 0;label = 36; break; }
    case 35: 
      var $53=HEAP32[(($s)>>2)];
      var $incdec_ptr70=(($53+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr70;
      var $54=HEAP8[($53)];
      $key=$54;
      var $conv71=(($54 << 24) >> 24);
      var $call72=_isspace($conv71);
      var $tobool73=(($call72)|0)!=0;
      var $lnot74=$tobool73 ^ 1;
      var $55 = $lnot74;label = 36; break;
    case 36: 
      var $55;
      if ($55) { label = 37; break; } else { label = 65; break; }
    case 37: 
      var $56=$key;
      var $conv77=(($56 << 24) >> 24);
      var $cmp78=(($conv77)|0)==98;
      if ($cmp78) { label = 38; break; } else { label = 43; break; }
    case 38: 
      var $57=HEAP32[(($s)>>2)];
      var $58=HEAP8[($57)];
      var $conv81=(($58 << 24) >> 24);
      var $cmp82=(($conv81)|0)==66;
      if ($cmp82) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $59=HEAP32[(($s)>>2)];
      var $incdec_ptr85=(($59+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr85;
      var $60=$maxdim;
      $k=$60;
      label = 40; break;
    case 40: 
      var $61=$k;
      var $dec=((($61)-(1))|0);
      $k=$dec;
      var $tobool86=(($61)|0)!=0;
      if ($tobool86) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $62=$k;
      var $63=HEAP32[((((5248600)|0))>>2)];
      var $arrayidx87=(($63+($62<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-0.5,HEAP32[(($arrayidx87)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx87)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $64=$k;
      var $65=HEAP32[((((5248596)|0))>>2)];
      var $arrayidx88=(($65+($64<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0.5,HEAP32[(($arrayidx88)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx88)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 42: 
      label = 64; break;
    case 43: 
      var $66=$key;
      var $conv90=(($66 << 24) >> 24);
      var $cmp91=(($conv90)|0)==98;
      if ($cmp91) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $67=HEAP32[(($s)>>2)];
      var $68=HEAP8[($67)];
      var $conv94=(($68 << 24) >> 24);
      var $cmp95=(($conv94)|0)==98;
      if ($cmp95) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $69=HEAP32[(($s)>>2)];
      var $incdec_ptr98=(($69+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr98;
      label = 63; break;
    case 46: 
      var $70=$key;
      var $conv100=(($70 << 24) >> 24);
      var $cmp101=(($conv100)|0)==98;
      if ($cmp101) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $71=$key;
      var $conv104=(($71 << 24) >> 24);
      var $cmp105=(($conv104)|0)==66;
      if ($cmp105) { label = 48; break; } else { label = 62; break; }
    case 48: 
      var $72=HEAP32[(($s)>>2)];
      var $73=HEAP8[($72)];
      var $conv108=(($73 << 24) >> 24);
      var $call109=_isdigit($conv108);
      var $tobool110=(($call109)|0)!=0;
      if ($tobool110) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $74=HEAP32[((((5248924)|0))>>2)];
      var $75=$key;
      var $conv112=(($75 << 24) >> 24);
      _qh_fprintf($74, 7047, ((5281188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$conv112,tempInt));
      label = 34; break;
    case 50: 
      var $76=HEAP32[(($s)>>2)];
      var $call114=_qh_strtol($76, $s);
      $idx=$call114;
      var $77=$idx;
      var $78=$maxdim;
      var $cmp115=(($77)|0) >= (($78)|0);
      if ($cmp115) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $79=HEAP32[((((5248924)|0))>>2)];
      var $80=$idx;
      var $81=$key;
      var $conv118=(($81 << 24) >> 24);
      var $82=$maxdim;
      _qh_fprintf($79, 7048, ((5281056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$80,HEAP32[(((tempInt)+(4))>>2)]=$conv118,HEAP32[(((tempInt)+(8))>>2)]=$82,tempInt));
      label = 34; break;
    case 52: 
      var $83=HEAP32[(($s)>>2)];
      var $84=HEAP8[($83)];
      var $conv120=(($84 << 24) >> 24);
      var $cmp121=(($conv120)|0)==58;
      if ($cmp121) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $85=HEAP32[(($s)>>2)];
      var $incdec_ptr124=(($85+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr124;
      var $86=HEAP32[(($s)>>2)];
      var $call125=_qh_strtod($86, $s);
      $value=$call125;
      label = 58; break;
    case 54: 
      var $87=$key;
      var $conv127=(($87 << 24) >> 24);
      var $cmp128=(($conv127)|0)==98;
      if ($cmp128) { label = 55; break; } else { label = 56; break; }
    case 55: 
      $value=-0.5;
      label = 57; break;
    case 56: 
      $value=0.5;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $88=$key;
      var $conv134=(($88 << 24) >> 24);
      var $cmp135=(($conv134)|0)==98;
      if ($cmp135) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $89=$value;
      var $90=$idx;
      var $91=HEAP32[((((5248600)|0))>>2)];
      var $arrayidx138=(($91+($90<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$89,HEAP32[(($arrayidx138)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx138)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 61; break;
    case 60: 
      var $92=$value;
      var $93=$idx;
      var $94=HEAP32[((((5248596)|0))>>2)];
      var $arrayidx140=(($94+($93<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$92,HEAP32[(($arrayidx140)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx140)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 34; break;
    case 65: 
      label = 72; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $95=HEAP32[(($s)>>2)];
      var $96=HEAP8[($95)];
      var $conv148=(($96 << 24) >> 24);
      var $tobool149=(($conv148)|0)!=0;
      if ($tobool149) { label = 68; break; } else { var $99 = 0;label = 69; break; }
    case 68: 
      var $97=HEAP32[(($s)>>2)];
      var $98=HEAP8[($97)];
      var $conv151=(($98 << 24) >> 24);
      var $call152=_isspace($conv151);
      var $tobool153=(($call152)|0)!=0;
      var $lnot154=$tobool153 ^ 1;
      var $99 = $lnot154;label = 69; break;
    case 69: 
      var $99;
      if ($99) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $100=HEAP32[(($s)>>2)];
      var $incdec_ptr157=(($100+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr157;
      label = 67; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $101=HEAP32[(($s)>>2)];
      var $102=HEAP8[($101)];
      var $conv162=(($102 << 24) >> 24);
      var $call163=_isspace($conv162);
      var $tobool164=(($call163)|0)!=0;
      if ($tobool164) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $103=HEAP32[(($s)>>2)];
      var $incdec_ptr166=(($103+1)|0);
      HEAP32[(($s)>>2)]=$incdec_ptr166;
      label = 74; break;
    case 76: 
      label = 7; break;
    case 77: 
      var $104=HEAP32[((((5247508)|0))>>2)];
      $k=$104;
      label = 78; break;
    case 78: 
      var $105=$k;
      var $dec170=((($105)-(1))|0);
      $k=$dec170;
      var $tobool171=(($105)|0)!=0;
      if ($tobool171) { label = 79; break; } else { label = 87; break; }
    case 79: 
      var $106=$k;
      var $107=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx173=(($107+($106<<3))|0);
      var $108=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx173)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx173)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp174=$108 > -8.988465674311579e+307;
      if ($cmp174) { label = 80; break; } else { label = 83; break; }
    case 80: 
      HEAP32[((((5247024)|0))>>2)]=1;
      var $109=$k;
      var $110=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx177=(($110+($109<<3))|0);
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx177)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx177)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp178=$111 < 8.988465674311579e+307;
      if ($cmp178) { label = 81; break; } else { label = 82; break; }
    case 81: 
      HEAP32[((((5247408)|0))>>2)]=1;
      HEAP32[((((5247024)|0))>>2)]=0;
      label = 87; break;
    case 82: 
      label = 86; break;
    case 83: 
      var $112=$k;
      var $113=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx183=(($113+($112<<3))|0);
      var $114=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx183)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx183)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp184=$114 < 8.988465674311579e+307;
      if ($cmp184) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5247024)|0))>>2)]=1;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 78; break;
    case 87: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initthresholds["X"]=1;

function _qh_option($option, $i, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 200)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $option_addr;
      var $i_addr;
      var $r_addr;
      var $buf=__stackBase__;
      var $len;
      var $maxlen;
      $option_addr=$option;
      $i_addr=$i;
      $r_addr=$r;
      var $arraydecay=(($buf)|0);
      var $0=$option_addr;
      var $call=_sprintf($arraydecay, ((5281036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$0,tempInt));
      var $1=$i_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $arraydecay1=(($buf)|0);
      var $arraydecay2=(($buf)|0);
      var $call3=_strlen($arraydecay2);
      var $add_ptr=(($arraydecay1+$call3)|0);
      var $2=$i_addr;
      var $3=HEAP32[(($2)>>2)];
      var $call4=_sprintf($add_ptr, ((5280884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      var $4=$r_addr;
      var $tobool5=(($4)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arraydecay7=(($buf)|0);
      var $arraydecay8=(($buf)|0);
      var $call9=_strlen($arraydecay8);
      var $add_ptr10=(($arraydecay7+$call9)|0);
      var $5=$r_addr;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call11=_sprintf($add_ptr10, ((5280756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 6; break;
    case 6: 
      var $arraydecay13=(($buf)|0);
      var $call14=_strlen($arraydecay13);
      $len=$call14;
      var $7=$len;
      var $8=HEAP32[((((5248564)|0))>>2)];
      var $add=((($8)+($7))|0);
      HEAP32[((((5248564)|0))>>2)]=$add;
      var $9=$len;
      var $sub=(((512)-($9))|0);
      var $sub15=((($sub)-(1))|0);
      $maxlen=$sub15;
      var $10=$maxlen;
      var $cmp=(($10)|0) < 0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $maxlen=0;
      label = 8; break;
    case 8: 
      var $11=HEAP32[((((5248564)|0))>>2)];
      var $cmp18=(($11)|0) >= 80;
      if ($cmp18) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $12=$maxlen;
      var $cmp19=(($12)|0) > 0;
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=$len;
      HEAP32[((((5248564)|0))>>2)]=$13;
      var $14=$maxlen;
      var $dec=((($14)-(1))|0);
      $maxlen=$dec;
      var $call21=_strncat(((5248052)|0), ((5280748)|0), $14);
      label = 11; break;
    case 11: 
      var $arraydecay23=(($buf)|0);
      var $15=$maxlen;
      var $call24=_strncat(((5248052)|0), $arraydecay23, $15);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_option["X"]=1;

function _qh_initqhull_outputflags() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $printgeom;
      var $printmath;
      var $printcoplanar;
      var $i;
      $printgeom=0;
      $printmath=0;
      $printcoplanar=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 3024, ((5286044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247536)|0),tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5247164)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 15; break; } else { label = 5; break; }
    case 5: 
      var $3=HEAP32[((((5247172)|0))>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 15; break; } else { label = 6; break; }
    case 6: 
      var $4=HEAP32[((((5247044)|0))>>2)];
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { label = 13; break; } else { label = 7; break; }
    case 7: 
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$5 < 8.988465674311579e+307;
      if ($cmp5) { label = 13; break; } else { label = 8; break; }
    case 8: 
      var $6=HEAP32[((((5247056)|0))>>2)];
      var $tobool7=(($6)|0)!=0;
      if ($tobool7) { label = 13; break; } else { label = 9; break; }
    case 9: 
      var $7=HEAP32[((((5247000)|0))>>2)];
      var $tobool9=(($7)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 10; break; }
    case 10: 
      var $8=HEAP32[((((5247128)|0))>>2)];
      var $tobool11=(($8)|0)!=0;
      if ($tobool11) { label = 14; break; } else { label = 11; break; }
    case 11: 
      var $9=HEAP32[((((5247028)|0))>>2)];
      var $tobool12=(($9)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $10=HEAP32[((((5247016)|0))>>2)];
      var $tobool14=(($10)|0)!=0;
      if ($tobool14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      HEAP32[((((5247164)|0))>>2)]=1;
      _qh_option(((5286032)|0), 0, 0);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $11=HEAP32[((((5247324)|0))>>2)];
      var $tobool18=(($11)|0)!=0;
      if ($tobool18) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $12=HEAP32[((((5247508)|0))>>2)];
      var $cmp20=(($12)|0)!=4;
      if ($cmp20) { label = 20; break; } else { label = 17; break; }
    case 17: 
      var $13=HEAP32[((((5247000)|0))>>2)];
      var $tobool22=(($13)|0)!=0;
      if ($tobool22) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $14=HEAP32[((((5247476)|0))>>2)];
      var $tobool24=(($14)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $15=HEAP32[((((5247008)|0))>>2)];
      var $cmp26=(($15)|0) >= 0;
      if ($cmp26) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $16=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($16, 6215, ((5285908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 21; break;
    case 21: 
      HEAP32[((((5247008)|0))>>2)]=3;
      HEAP32[((((5247308)|0))>>2)]=1;
      label = 22; break;
    case 22: 
      $i=29;
      label = 23; break;
    case 23: 
      var $17=$i;
      var $dec=((($17)-(1))|0);
      $i=$dec;
      var $tobool30=(($17)|0)!=0;
      if ($tobool30) { label = 24; break; } else { label = 56; break; }
    case 24: 
      var $18=$i;
      var $arrayidx=((((5247192)|0)+($18<<2))|0);
      var $19=HEAP32[(($arrayidx)>>2)];
      var $cmp31=(($19)|0)==7;
      if ($cmp31) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $printgeom=1;
      label = 55; break;
    case 26: 
      var $20=$i;
      var $arrayidx33=((((5247192)|0)+($20<<2))|0);
      var $21=HEAP32[(($arrayidx33)>>2)];
      var $cmp34=(($21)|0)==15;
      if ($cmp34) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $22=$i;
      var $arrayidx36=((((5247192)|0)+($22<<2))|0);
      var $23=HEAP32[(($arrayidx36)>>2)];
      var $cmp37=(($23)|0)==13;
      if ($cmp37) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $printmath=1;
      label = 54; break;
    case 29: 
      var $24=$i;
      var $arrayidx40=((((5247192)|0)+($24<<2))|0);
      var $25=HEAP32[(($arrayidx40)>>2)];
      var $cmp41=(($25)|0)==3;
      if ($cmp41) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $printcoplanar=1;
      label = 53; break;
    case 31: 
      var $26=$i;
      var $arrayidx44=((((5247192)|0)+($26<<2))|0);
      var $27=HEAP32[(($arrayidx44)>>2)];
      var $cmp45=(($27)|0)==20;
      if ($cmp45) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $printcoplanar=1;
      label = 52; break;
    case 33: 
      var $28=$i;
      var $arrayidx48=((((5247192)|0)+($28<<2))|0);
      var $29=HEAP32[(($arrayidx48)>>2)];
      var $cmp49=(($29)|0)==19;
      if ($cmp49) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $30=HEAP32[((((5247036)|0))>>2)];
      var $tobool51=(($30)|0)!=0;
      if ($tobool51) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $31=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($31, 6053, ((5285584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 51; break;
    case 36: 
      var $32=$i;
      var $arrayidx54=((((5247192)|0)+($32<<2))|0);
      var $33=HEAP32[(($arrayidx54)>>2)];
      var $cmp55=(($33)|0)==25;
      if ($cmp55) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $34=HEAP32[((((5247036)|0))>>2)];
      var $tobool57=(($34)|0)!=0;
      if ($tobool57) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $35=HEAP32[((((5247476)|0))>>2)];
      var $tobool59=(($35)|0)!=0;
      if ($tobool59) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $36=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($36, 6054, ((5285328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 50; break;
    case 40: 
      var $37=$i;
      var $arrayidx62=((((5247192)|0)+($37<<2))|0);
      var $38=HEAP32[(($arrayidx62)>>2)];
      var $cmp63=(($38)|0)==4;
      if ($cmp63) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $39=HEAP32[((((5247476)|0))>>2)];
      var $tobool65=(($39)|0)!=0;
      if ($tobool65) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $40=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($40, 6055, ((5285156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 49; break;
    case 43: 
      var $41=$i;
      var $arrayidx68=((((5247192)|0)+($41<<2))|0);
      var $42=HEAP32[(($arrayidx68)>>2)];
      var $cmp69=(($42)|0)==26;
      if ($cmp69) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $43=HEAP32[((((5247476)|0))>>2)];
      var $tobool71=(($43)|0)!=0;
      if ($tobool71) { label = 45; break; } else { label = 46; break; }
    case 45: 
      _qh_option(((5285056)|0), 0, 0);
      label = 47; break;
    case 46: 
      _qh_option(((5285000)|0), 0, 0);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 23; break;
    case 56: 
      var $44=$printcoplanar;
      var $tobool83=(($44)|0)!=0;
      if ($tobool83) { label = 57; break; } else { label = 62; break; }
    case 57: 
      var $45=HEAP32[((((5247000)|0))>>2)];
      var $tobool85=(($45)|0)!=0;
      if ($tobool85) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp87=$46 < 8.988465674311579e+307;
      if ($cmp87) { label = 59; break; } else { label = 62; break; }
    case 59: 
      var $47=HEAP32[((((5247188)|0))>>2)];
      var $tobool89=(($47)|0)!=0;
      if ($tobool89) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $48=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($48, 7041, ((5284784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $49=$printmath;
      var $tobool93=(($49)|0)!=0;
      if ($tobool93) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $50=HEAP32[((((5247508)|0))>>2)];
      var $cmp95=(($50)|0) > 3;
      if ($cmp95) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $51=HEAP32[((((5247476)|0))>>2)];
      var $tobool97=(($51)|0)!=0;
      if ($tobool97) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $52=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($52, 6056, ((5284612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 66; break;
    case 66: 
      var $53=$printgeom;
      var $tobool100=(($53)|0)!=0;
      if ($tobool100) { label = 67; break; } else { label = 83; break; }
    case 67: 
      var $54=HEAP32[((((5247508)|0))>>2)];
      var $cmp102=(($54)|0) > 4;
      if ($cmp102) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $55=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($55, 6057, ((5284160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 69; break;
    case 69: 
      var $56=HEAP32[((((5247176)|0))>>2)];
      var $tobool105=(($56)|0)!=0;
      if ($tobool105) { label = 70; break; } else { label = 72; break; }
    case 70: 
      var $57=HEAP32[((((5247152)|0))>>2)];
      var $58=HEAP32[((((5247148)|0))>>2)];
      var $add=((($57)+($58))|0);
      var $59=HEAP32[((((5247160)|0))>>2)];
      var $add107=((($add)+($59))|0);
      var $60=HEAP32[((((5247312)|0))>>2)];
      var $add108=((($add107)+($60))|0);
      var $61=HEAP32[((((5247004)|0))>>2)];
      var $add109=((($add108)+($61))|0);
      var $62=HEAP32[((((5247308)|0))>>2)];
      var $add110=((($add109)+($62))|0);
      var $tobool111=(($add110)|0)!=0;
      if ($tobool111) { label = 72; break; } else { label = 71; break; }
    case 71: 
      var $63=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($63, 6058, ((5284048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 72; break;
    case 72: 
      var $64=HEAP32[((((5247476)|0))>>2)];
      var $tobool114=(($64)|0)!=0;
      if ($tobool114) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $65=HEAP32[((((5247508)|0))>>2)];
      var $cmp116=(($65)|0) > 3;
      if ($cmp116) { label = 75; break; } else { label = 74; break; }
    case 74: 
      var $66=HEAP32[((((5247008)|0))>>2)];
      var $cmp118=(($66)|0) >= 0;
      if ($cmp118) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $67=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($67, 6059, ((5283580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 76; break;
    case 76: 
      var $68=HEAP32[((((5247508)|0))>>2)];
      var $cmp121=(($68)|0)==4;
      if ($cmp121) { label = 77; break; } else { label = 82; break; }
    case 77: 
      var $69=HEAP32[((((5247008)|0))>>2)];
      var $cmp123=(($69)|0)==-1;
      if ($cmp123) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $70=HEAP32[((((5247152)|0))>>2)];
      var $tobool125=(($70)|0)!=0;
      if ($tobool125) { label = 81; break; } else { label = 79; break; }
    case 79: 
      var $71=HEAP32[((((5247312)|0))>>2)];
      var $tobool127=(($71)|0)!=0;
      if ($tobool127) { label = 81; break; } else { label = 80; break; }
    case 80: 
      var $72=HEAP32[((((5247148)|0))>>2)];
      var $tobool129=(($72)|0)!=0;
      if ($tobool129) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $73=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($73, 7042, ((5283284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      HEAP32[((((5247148)|0))>>2)]=0;
      HEAP32[((((5247312)|0))>>2)]=0;
      HEAP32[((((5247152)|0))>>2)]=0;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $74=HEAP32[((((5247048)|0))>>2)];
      var $tobool133=(($74)|0)!=0;
      if ($tobool133) { label = 94; break; } else { label = 84; break; }
    case 84: 
      var $75=HEAP32[((((5247052)|0))>>2)];
      var $tobool135=(($75)|0)!=0;
      if ($tobool135) { label = 94; break; } else { label = 85; break; }
    case 85: 
      var $76=HEAP32[((((5247128)|0))>>2)];
      var $tobool137=(($76)|0)!=0;
      if ($tobool137) { label = 94; break; } else { label = 86; break; }
    case 86: 
      var $77=HEAP32[((((5247152)|0))>>2)];
      var $tobool139=(($77)|0)!=0;
      if ($tobool139) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $78=HEAP32[((((5247312)|0))>>2)];
      var $tobool141=(($78)|0)!=0;
      if ($tobool141) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $79=$printcoplanar;
      var $tobool143=(($79)|0)!=0;
      if ($tobool143) { label = 89; break; } else { label = 93; break; }
    case 89: 
      var $80=HEAP32[((((5249136)|0))>>2)];
      var $tobool145=(($80)|0)!=0;
      if ($tobool145) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $81=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($81, 7072, ((5283080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 92; break;
    case 91: 
      HEAP32[((((5247048)|0))>>2)]=1;
      _qh_option(((5282960)|0), 0, 0);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $82=HEAP32[((((5247508)|0))>>2)];
      HEAP32[((((5247156)|0))>>2)]=$82;
      var $83=HEAP32[((((5247008)|0))>>2)];
      var $cmp151=(($83)|0) >= 0;
      if ($cmp151) { label = 95; break; } else { label = 102; break; }
    case 95: 
      var $84=HEAP32[((((5247008)|0))>>2)];
      var $85=HEAP32[((((5247508)|0))>>2)];
      var $cmp153=(($84)|0) < (($85)|0);
      if ($cmp153) { label = 96; break; } else { label = 100; break; }
    case 96: 
      var $86=HEAP32[((((5247156)|0))>>2)];
      var $dec155=((($86)-(1))|0);
      HEAP32[((((5247156)|0))>>2)]=$dec155;
      var $87=$printgeom;
      var $tobool156=(($87)|0)!=0;
      if ($tobool156) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $88=HEAP32[((((5247508)|0))>>2)];
      var $cmp158=(($88)|0) < 3;
      if ($cmp158) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $89=HEAP32[((((5248924)|0))>>2)];
      var $90=HEAP32[((((5247008)|0))>>2)];
      _qh_fprintf($89, 7043, ((5282792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$90,tempInt));
      label = 99; break;
    case 99: 
      label = 101; break;
    case 100: 
      HEAP32[((((5247008)|0))>>2)]=-1;
      label = 101; break;
    case 101: 
      label = 105; break;
    case 102: 
      var $91=HEAP32[((((5247476)|0))>>2)];
      var $tobool164=(($91)|0)!=0;
      if ($tobool164) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $92=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($92)-(1))|0);
      HEAP32[((((5247008)|0))>>2)]=$sub;
      var $93=HEAP32[((((5247508)|0))>>2)];
      var $sub166=((($93)-(1))|0);
      HEAP32[((((5247156)|0))>>2)]=$sub166;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initqhull_outputflags["X"]=1;

function _qh_initqhull_start2($infile, $outfile, $errfile) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $infile_addr;
  var $outfile_addr;
  var $errfile_addr;
  var $timedata=__stackBase__;
  var $seed;
  $infile_addr=$infile;
  $outfile_addr=$outfile;
  $errfile_addr=$errfile;
  var $call=_clock();
  _memset(5246936, 0, 2340);
  HEAP32[((((5246940)|0))>>2)]=1;
  HEAP32[((((5247008)|0))>>2)]=-1;
  var $0=$errfile_addr;
  HEAP32[((((5248924)|0))>>2)]=$0;
  var $1=$infile_addr;
  HEAP32[((((5248916)|0))>>2)]=$1;
  var $2=$outfile_addr;
  HEAP32[((((5248920)|0))>>2)]=$2;
  HEAP32[((((5249040)|0))>>2)]=-1;
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249056)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249056)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5247060)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247060)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249232)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249232)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249240)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249240)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5249248)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249248)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249076)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249076)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5248636)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248636)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5248652)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248652)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[((((5248660)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248660)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  HEAP32[((((5247080)|0))>>2)]=1;
  (HEAPF64[(tempDoublePtr)>>3]=2.2250738585072014e-308,HEAP32[((((5248668)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248668)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5246948)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246948)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5247108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5247068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5248732)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248732)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5247088)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247088)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5246984)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246984)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  HEAP32[((((5247188)|0))>>2)]=1;
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5246992)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246992)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5247096)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247096)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  HEAP32[((((5247384)|0))>>2)]=-2147483648;
  HEAP32[((((5247104)|0))>>2)]=1;
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249140)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249140)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5249148)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249148)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5247440)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5247440)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  HEAP32[((((5247436)|0))>>2)]=-1;
  HEAP32[((((5248968)|0))>>2)]=-1;
  HEAP32[((((5248976)|0))>>2)]=-1;
  var $call1=_time($timedata);
  $seed=$call1;
  var $3=$seed;
  _qh_srand($3);
  var $call2=_qh_rand();
  var $add=((($call2)+(1))|0);
  HEAP32[((((5248576)|0))>>2)]=$add;
  _qh_option(((5282744)|0), ((5248576)|0), 0);
  var $call3=_strcat(((5248748)|0), ((5282536)|0));
  STACKTOP = __stackBase__;
  return;
}
_qh_initqhull_start2["X"]=1;

function _qh_produce_output() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tempsize;
      var $0=HEAP32[((((5242928)|0))>>2)];
      var $call=_qh_setsize($0);
      $tempsize=$call;
      _qh_prepare_output();
      _qh_produce_output2();
      var $1=HEAP32[((((5242928)|0))>>2)];
      var $call1=_qh_setsize($1);
      var $2=$tempsize;
      var $cmp=(($call1)|0)!=(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=HEAP32[((((5248924)|0))>>2)];
      var $4=HEAP32[((((5242928)|0))>>2)];
      var $call2=_qh_setsize($4);
      _qh_fprintf($3, 6206, ((5280656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call2,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_prepare_output() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $0=HEAP32[((((5247476)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _qh_clearcenters(1);
      _qh_vertexneighbors();
      label = 4; break;
    case 4: 
      var $1=HEAP32[((((5247452)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $2=HEAP32[((((5249052)|0))>>2)];
      var $tobool2=(($2)|0)!=0;
      if ($tobool2) { label = 10; break; } else { label = 6; break; }
    case 6: 
      _qh_triangulate();
      var $3=HEAP32[((((5247468)|0))>>2)];
      var $tobool4=(($3)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $4=HEAP32[((((5246980)|0))>>2)];
      var $tobool6=(($4)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $5=HEAP32[((((5248944)|0))>>2)];
      _qh_checkpolygon($5);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $6=HEAP32[((((5248944)|0))>>2)];
      _qh_findgood_all($6);
      var $7=HEAP32[((((5247500)|0))>>2)];
      var $tobool10=(($7)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $8=HEAP32[((((5248944)|0))>>2)];
      _qh_getarea($8);
      label = 12; break;
    case 12: 
      var $9=HEAP32[((((5247044)|0))>>2)];
      var $tobool13=(($9)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $10=HEAP32[((((5247056)|0))>>2)];
      var $tobool14=(($10)|0)!=0;
      if ($tobool14) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$11 < 8.988465674311579e+307;
      if ($cmp) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $12=HEAP32[((((5248944)|0))>>2)];
      _qh_markkeep($12);
      label = 16; break;
    case 16: 
      var $13=HEAP32[((((5247316)|0))>>2)];
      var $tobool18=(($13)|0)!=0;
      if ($tobool18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      _qh_collectstatistics();
      label = 18; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_produce_output2() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $tempsize;
      var $d_1;
      var $0=HEAP32[((((5242928)|0))>>2)];
      var $call=_qh_setsize($0);
      $tempsize=$call;
      var $1=HEAP32[((((5247320)|0))>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_printsummary($2);
      label = 7; break;
    case 4: 
      var $3=HEAP32[((((5247192)|0))>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=HEAP32[((((5248920)|0))>>2)];
      _qh_printsummary($4);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $5=$i;
      var $cmp3=(($5)|0) < 29;
      if ($cmp3) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $6=HEAP32[((((5248920)|0))>>2)];
      var $7=$i;
      var $arrayidx=((((5247192)|0)+($7<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $9=HEAP32[((((5248944)|0))>>2)];
      _qh_printfacets($6, $8, $9, 0, 0);
      label = 10; break;
    case 10: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      _qh_allstatistics();
      var $11=HEAP32[((((5247188)|0))>>2)];
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $12=HEAP32[((((5247084)|0))>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp7=$13 > 8.988465674311579e+307;
      if ($cmp7) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $14=HEAP32[((((5247380)|0))>>2)];
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $15=HEAP32[((((5248924)|0))>>2)];
      var $16=HEAP32[((((5246916)|0))>>2)];
      _qh_printstats($15, $16, 0);
      label = 16; break;
    case 16: 
      var $17=HEAP32[((((5247468)|0))>>2)];
      var $tobool11=(($17)|0)!=0;
      if ($tobool11) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $18=HEAP32[(((((5244444)|0)))>>2)];
      var $cmp13=(($18)|0) > 0;
      if ($cmp13) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $19=HEAP32[(((((5244492)|0)))>>2)];
      var $cmp15=(($19)|0) > 0;
      if ($cmp15) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $20=HEAP32[((((5248924)|0))>>2)];
      var $21=HEAP32[((((5246920)|0))>>2)];
      _qh_printstats($20, $21, 0);
      label = 20; break;
    case 20: 
      var $22=HEAP32[((((5247316)|0))>>2)];
      var $tobool18=(($22)|0)!=0;
      if ($tobool18) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      _qh_printstatistics($23, ((5298488)|0));
      var $24=HEAP32[((((5248924)|0))>>2)];
      _qh_memstatistics($24);
      var $25=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($25)-(1))|0);
      var $mul=((($sub<<2))&-1);
      var $add=((($mul)+(8))|0);
      $d_1=$add;
      var $26=HEAP32[((((5248924)|0))>>2)];
      var $27=HEAP32[((((5248932)|0))>>2)];
      var $28=$d_1;
      var $29=$d_1;
      var $add20=((($29)+(4))|0);
      _qh_fprintf($26, 8040, ((5280276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=20,HEAP32[(((tempInt)+(4))>>2)]=16,HEAP32[(((tempInt)+(8))>>2)]=24,HEAP32[(((tempInt)+(12))>>2)]=80,HEAP32[(((tempInt)+(16))>>2)]=$27,HEAP32[(((tempInt)+(20))>>2)]=$28,HEAP32[(((tempInt)+(24))>>2)]=$add20,tempInt));
      label = 22; break;
    case 22: 
      var $30=HEAP32[((((5242928)|0))>>2)];
      var $call22=_qh_setsize($30);
      var $31=$tempsize;
      var $cmp23=(($call22)|0)!=(($31)|0);
      if ($cmp23) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $32=HEAP32[((((5248924)|0))>>2)];
      var $33=HEAP32[((((5242928)|0))>>2)];
      var $call25=_qh_setsize($33);
      _qh_fprintf($32, 6065, ((5273840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call25,tempInt));
      _qh_errexit(5, 0, 0);
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_produce_output2["X"]=1;

function _qh_compare_facetarea($p1, $p2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $a;
      var $b;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      $a=$2;
      var $3=$p2_addr;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      $b=$5;
      var $6=$a;
      var $7=$6;
      var $bf_field_offs=(($7+76)|0);
      var $8=$bf_field_offs;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 20;
      var $bf_clear=$10 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-1;
      label = 12; break;
    case 4: 
      var $11=$b;
      var $12=$11;
      var $bf_field_offs1=(($12+76)|0);
      var $13=$bf_field_offs1;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 20;
      var $bf_clear2=$15 & 1;
      var $tobool3=(($bf_clear2)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=1;
      label = 12; break;
    case 6: 
      var $16=$a;
      var $f=(($16+28)|0);
      var $area=$f;
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=$b;
      var $f6=(($18+28)|0);
      var $area7=$f6;
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$17 > $19;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=1;
      label = 12; break;
    case 8: 
      var $20=$a;
      var $f9=(($20+28)|0);
      var $area10=$f9;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $22=$b;
      var $f11=(($22+28)|0);
      var $area12=$f11;
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp13=$21 == $23;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      $retval=-1;
      label = 12; break;
    case 12: 
      var $24=$retval;

      return $24;
    default: assert(0, "bad label: " + label);
  }

}
_qh_compare_facetarea["X"]=1;

function _qh_compare_facetmerge($p1, $p2) {
  var label = 0;


  var $p1_addr;
  var $p2_addr;
  var $a;
  var $b;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  $a=$2;
  var $3=$p2_addr;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  $b=$5;
  var $6=$a;
  var $7=$6;
  var $bf_field_offs=(($7+76)|0);
  var $8=$bf_field_offs;
  var $9=HEAP32[(($8)>>2)];
  var $bf_clear=$9 & 511;
  var $10=$b;
  var $11=$10;
  var $bf_field_offs1=(($11+76)|0);
  var $12=$bf_field_offs1;
  var $13=HEAP32[(($12)>>2)];
  var $bf_clear2=$13 & 511;
  var $sub=((($bf_clear)-($bf_clear2))|0);

  return $sub;
}


function _qh_compare_facetvisit($p1, $p2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $a;
      var $b;
      var $i;
      var $j;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      $a=$2;
      var $3=$p2_addr;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      $b=$5;
      var $6=$a;
      var $visitid=(($6+68)|0);
      var $7=HEAP32[(($visitid)>>2)];
      $i=$7;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=$a;
      var $id=(($8+72)|0);
      var $9=HEAP32[(($id)>>2)];
      var $sub=(((-$9))|0);
      $i=$sub;
      label = 4; break;
    case 4: 
      var $10=$b;
      var $visitid1=(($10+68)|0);
      var $11=HEAP32[(($visitid1)>>2)];
      $j=$11;
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $12=$b;
      var $id4=(($12+72)|0);
      var $13=HEAP32[(($id4)>>2)];
      var $sub5=(((-$13))|0);
      $j=$sub5;
      label = 6; break;
    case 6: 
      var $14=$i;
      var $15=$j;
      var $sub7=((($14)-($15))|0);

      return $sub7;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printfacets($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $numfacets=__stackBase__;
      var $numsimplicial=(__stackBase__)+(4);
      var $numridges=(__stackBase__)+(8);
      var $totneighbors=(__stackBase__)+(12);
      var $numcoplanars=(__stackBase__)+(16);
      var $numtricoplanars=(__stackBase__)+(20);
      var $facet;
      var $facetp;
      var $vertices=(__stackBase__)+(24);
      var $center;
      var $outerplane=(__stackBase__)+(28);
      var $innerplane=(__stackBase__)+(36);
      $fp_addr=$fp;
      $format_addr=$format;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$0;
      HEAP32[((((5247340)|0))>>2)]=0;
      var $1=HEAP32[((((5246976)|0))>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$format_addr;
      var $cmp=(($2)|0)==4;
      if ($cmp) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $3=$format_addr;
      var $cmp1=(($3)|0)==19;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$format_addr;
      var $cmp3=(($4)|0)==17;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($5, 7056, ((5294768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 7: 
      var $6=$format_addr;
      var $cmp4=(($6)|0)==0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 68; break;
    case 9: 
      var $7=$format_addr;
      var $cmp6=(($7)|0)==2;
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $8=$facetlist_addr;
      var $9=$facets_addr;
      var $10=$printall_addr;
      var $call=_qh_facetvertices($8, $9, $10);
      HEAP32[(($vertices)>>2)]=$call;
      var $11=HEAP32[(($vertices)>>2)];
      var $call8=_qh_getcenter($11);
      $center=$call8;
      var $12=$fp_addr;
      var $13=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($12, 9186, ((5294616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $14=$fp_addr;
      var $15=HEAP32[((((5247508)|0))>>2)];
      var $16=$center;
      _qh_printpointid($14, 0, $15, $16, -1);
      var $17=$center;
      var $18=$17;
      var $19=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($18, $19);
      _qh_settempfree($vertices);
      label = 67; break;
    case 11: 
      var $20=$format_addr;
      var $cmp10=(($20)|0)==28;
      if ($cmp10) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $21=HEAP32[((((5247000)|0))>>2)];
      var $tobool12=(($21)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=$fp_addr;
      var $23=$facetlist_addr;
      var $24=$facets_addr;
      var $25=$printall_addr;
      _qh_printextremes_d($22, $23, $24, $25);
      label = 18; break;
    case 14: 
      var $26=HEAP32[((((5247508)|0))>>2)];
      var $cmp15=(($26)|0)==2;
      if ($cmp15) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $27=$fp_addr;
      var $28=$facetlist_addr;
      var $29=$facets_addr;
      var $30=$printall_addr;
      _qh_printextremes_2d($27, $28, $29, $30);
      label = 17; break;
    case 16: 
      var $31=$fp_addr;
      var $32=$facetlist_addr;
      var $33=$facets_addr;
      var $34=$printall_addr;
      _qh_printextremes($31, $32, $33, $34);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 66; break;
    case 19: 
      var $35=$format_addr;
      var $cmp21=(($35)|0)==18;
      if ($cmp21) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $36=$fp_addr;
      var $37=HEAP32[((5242996)>>2)];
      _qh_fprintf($36, 9187, ((5294468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=((5248052)|0),tempInt));
      label = 65; break;
    case 21: 
      var $38=$format_addr;
      var $cmp24=(($38)|0)==21;
      if ($cmp24) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $39=HEAP32[((((5247476)|0))>>2)];
      var $tobool26=(($39)|0)!=0;
      if ($tobool26) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $40=$fp_addr;
      var $41=$facetlist_addr;
      var $42=$facets_addr;
      var $43=$printall_addr;
      _qh_printpoints_out($40, $41, $42, $43);
      label = 64; break;
    case 24: 
      var $44=$format_addr;
      var $cmp29=(($44)|0)==22;
      if ($cmp29) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $45=$fp_addr;
      _qh_fprintf($45, 9188, ((5294276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      label = 63; break;
    case 26: 
      var $46=$format_addr;
      var $cmp32=(($46)|0)==23;
      if ($cmp32) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $47=$fp_addr;
      _qh_fprintf($47, 9189, ((5294032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $48=$fp_addr;
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($48, 9190, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $50=$fp_addr;
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($50, 9191, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $52=$fp_addr;
      _qh_fprintf($52, 9192, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 62; break;
    case 28: 
      var $53=$format_addr;
      var $cmp35=(($53)|0)==24;
      if ($cmp35) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $54=$facetlist_addr;
      var $55=$facets_addr;
      var $56=$printall_addr;
      _qh_countfacets($54, $55, $56, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
      var $57=$facetlist_addr;
      var $58=$facets_addr;
      var $59=$printall_addr;
      var $call37=_qh_facetvertices($57, $58, $59);
      HEAP32[(($vertices)>>2)]=$call37;
      var $60=$fp_addr;
      var $61=HEAP32[((((5247508)|0))>>2)];
      var $62=HEAP32[((((5247516)|0))>>2)];
      var $63=HEAP32[((((5249184)|0))>>2)];
      var $call38=_qh_setsize($63);
      var $add=((($62)+($call38))|0);
      var $64=HEAP32[((((5249000)|0))>>2)];
      var $65=HEAP32[((((5248996)|0))>>2)];
      var $66=HEAP32[((((5248964)|0))>>2)];
      var $sub=((($65)-($66))|0);
      var $67=HEAP32[(($vertices)>>2)];
      var $call39=_qh_setsize($67);
      var $68=HEAP32[(($numfacets)>>2)];
      var $69=HEAP32[(($numcoplanars)>>2)];
      var $70=HEAP32[(($numfacets)>>2)];
      var $71=HEAP32[(($numsimplicial)>>2)];
      var $sub40=((($70)-($71))|0);
      var $72=HEAP32[(((((5243380)|0)))>>2)];
      var $73=HEAP32[(($numtricoplanars)>>2)];
      _qh_fprintf($60, 9193, ((5293856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 40)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,HEAP32[(((tempInt)+(4))>>2)]=$add,HEAP32[(((tempInt)+(8))>>2)]=$64,HEAP32[(((tempInt)+(12))>>2)]=$sub,HEAP32[(((tempInt)+(16))>>2)]=$call39,HEAP32[(((tempInt)+(20))>>2)]=$68,HEAP32[(((tempInt)+(24))>>2)]=$69,HEAP32[(((tempInt)+(28))>>2)]=$sub40,HEAP32[(((tempInt)+(32))>>2)]=$72,HEAP32[(((tempInt)+(36))>>2)]=$73,tempInt));
      _qh_settempfree($vertices);
      _qh_outerinner(0, $outerplane, $innerplane);
      var $74=$fp_addr;
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($74, 9194, ((5293676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$75,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$76,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 61; break;
    case 30: 
      var $77=$format_addr;
      var $cmp42=(($77)|0)==27;
      if ($cmp42) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $78=$fp_addr;
      var $79=$facetlist_addr;
      var $80=$facets_addr;
      var $81=$printall_addr;
      _qh_printvneighbors($78, $79, $80, $81);
      label = 60; break;
    case 32: 
      var $82=HEAP32[((((5247476)|0))>>2)];
      var $tobool45=(($82)|0)!=0;
      if ($tobool45) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $83=$format_addr;
      var $cmp47=(($83)|0)==17;
      if ($cmp47) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $84=$fp_addr;
      var $85=$format_addr;
      var $86=$facetlist_addr;
      var $87=$facets_addr;
      var $88=$printall_addr;
      _qh_printvoronoi($84, $85, $86, $87, $88);
      label = 59; break;
    case 35: 
      var $89=HEAP32[((((5247476)|0))>>2)];
      var $tobool50=(($89)|0)!=0;
      if ($tobool50) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $90=$format_addr;
      var $cmp52=(($90)|0)==7;
      if ($cmp52) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $91=$fp_addr;
      var $92=$format_addr;
      var $93=$facetlist_addr;
      var $94=$facets_addr;
      var $95=$printall_addr;
      _qh_printbegin($91, $92, $93, $94, $95);
      var $96=$fp_addr;
      var $97=$format_addr;
      var $98=$facetlist_addr;
      var $99=$facets_addr;
      var $100=$printall_addr;
      _qh_printvoronoi($96, $97, $98, $99, $100);
      var $101=$fp_addr;
      var $102=$format_addr;
      var $103=$facetlist_addr;
      var $104=$facets_addr;
      var $105=$printall_addr;
      _qh_printend($101, $102, $103, $104, $105);
      label = 58; break;
    case 38: 
      var $106=HEAP32[((((5247476)|0))>>2)];
      var $tobool55=(($106)|0)!=0;
      if ($tobool55) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $107=$format_addr;
      var $cmp57=(($107)|0)==26;
      if ($cmp57) { label = 42; break; } else { label = 40; break; }
    case 40: 
      var $108=$format_addr;
      var $cmp59=(($108)|0)==9;
      if ($cmp59) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $109=$format_addr;
      var $cmp61=(($109)|0)==12;
      if ($cmp61) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $110=$fp_addr;
      var $111=$format_addr;
      var $112=$facetlist_addr;
      var $113=$facets_addr;
      var $114=$printall_addr;
      _qh_printvdiagram($110, $111, $112, $113, $114);
      label = 57; break;
    case 43: 
      var $115=$fp_addr;
      var $116=$format_addr;
      var $117=$facetlist_addr;
      var $118=$facets_addr;
      var $119=$printall_addr;
      _qh_printbegin($115, $116, $117, $118, $119);
      var $120=$facetlist_addr;
      var $tobool64=(($120)|0)!=0;
      if ($tobool64) { label = 44; break; } else { label = 51; break; }
    case 44: 
      var $121=$facetlist_addr;
      $facet=$121;
      label = 45; break;
    case 45: 
      var $122=$facet;
      var $tobool66=(($122)|0)!=0;
      if ($tobool66) { label = 46; break; } else { var $125 = 0;label = 47; break; }
    case 46: 
      var $123=$facet;
      var $next=(($123+44)|0);
      var $124=HEAP32[(($next)>>2)];
      var $tobool67=(($124)|0)!=0;
      var $125 = $tobool67;label = 47; break;
    case 47: 
      var $125;
      if ($125) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $126=$fp_addr;
      var $127=$format_addr;
      var $128=$facet;
      var $129=$printall_addr;
      _qh_printafacet($126, $127, $128, $129);
      label = 49; break;
    case 49: 
      var $130=$facet;
      var $next68=(($130+44)|0);
      var $131=HEAP32[(($next68)>>2)];
      $facet=$131;
      label = 45; break;
    case 50: 
      label = 51; break;
    case 51: 
      $facet=0;
      var $132=$facets_addr;
      var $tobool70=(($132)|0)!=0;
      if ($tobool70) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $133=$facets_addr;
      var $e=(($133+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $134=$p;
      $facetp=$134;
      label = 53; break;
    case 53: 
      var $135=$facetp;
      var $incdec_ptr=(($135+4)|0);
      $facetp=$incdec_ptr;
      var $136=HEAP32[(($135)>>2)];
      $facet=$136;
      var $tobool73=(($136)|0)!=0;
      if ($tobool73) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $137=$fp_addr;
      var $138=$format_addr;
      var $139=$facet;
      var $140=$printall_addr;
      _qh_printafacet($137, $138, $139, $140);
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $141=$fp_addr;
      var $142=$format_addr;
      var $143=$facetlist_addr;
      var $144=$facets_addr;
      var $145=$printall_addr;
      _qh_printend($141, $142, $143, $144, $145);
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $146=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$146;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacets["X"]=1;

function _qh_printfacet($fp, $facet) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      $fp_addr=$fp;
      $facet_addr=$facet;
      var $0=$fp_addr;
      var $1=$facet_addr;
      _qh_printfacetheader($0, $1);
      var $2=$facet_addr;
      var $ridges=(($2+52)|0);
      var $3=HEAP32[(($ridges)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$fp_addr;
      var $5=$facet_addr;
      _qh_printfacetridges($4, $5);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printvertex($fp, $vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $vertex_addr;
      var $point;
      var $k;
      var $count;
      var $neighbor;
      var $neighborp;
      var $r;
      $fp_addr=$fp;
      $vertex_addr=$vertex;
      $count=0;
      var $0=$vertex_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$fp_addr;
      _qh_fprintf($1, 9234, ((5289744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 4: 
      var $2=$fp_addr;
      var $3=$vertex_addr;
      var $point1=(($3+8)|0);
      var $4=HEAP32[(($point1)>>2)];
      var $call=_qh_pointid($4);
      var $5=$vertex_addr;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $bf_clear=$8 & 16777215;
      _qh_fprintf($2, 9235, ((5289688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,tempInt));
      var $9=$vertex_addr;
      var $point2=(($9+8)|0);
      var $10=HEAP32[(($point2)>>2)];
      $point=$10;
      var $11=$point;
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $12=HEAP32[((((5247508)|0))>>2)];
      $k=$12;
      label = 6; break;
    case 6: 
      var $13=$k;
      var $dec=((($13)-(1))|0);
      $k=$dec;
      var $tobool5=(($13)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$point;
      var $incdec_ptr=(($14+8)|0);
      $point=$incdec_ptr;
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $r=$15;
      var $16=$fp_addr;
      var $17=$r;
      _qh_fprintf($16, 9236, ((5289592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $18=$vertex_addr;
      var $19=$18;
      var $bf_field_offs7=(($19+20)|0);
      var $20=$bf_field_offs7;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 30;
      var $bf_clear8=$22 & 1;
      var $tobool9=(($bf_clear8)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=$fp_addr;
      _qh_fprintf($23, 9237, ((5289220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 11; break;
    case 11: 
      var $24=$vertex_addr;
      var $25=$24;
      var $bf_field_offs12=(($25+20)|0);
      var $26=$bf_field_offs12;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 >>> 29;
      var $bf_clear13=$28 & 1;
      var $tobool14=(($bf_clear13)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $29=$fp_addr;
      _qh_fprintf($29, 9238, ((5289144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      var $30=$fp_addr;
      _qh_fprintf($30, 9239, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=$vertex_addr;
      var $neighbors=(($31+12)|0);
      var $32=HEAP32[(($neighbors)>>2)];
      var $tobool17=(($32)|0)!=0;
      if ($tobool17) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $33=$fp_addr;
      _qh_fprintf($33, 9240, ((5289040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $neighbor=0;
      var $34=$vertex_addr;
      var $neighbors19=(($34+12)|0);
      var $35=HEAP32[(($neighbors19)>>2)];
      var $tobool20=(($35)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $36=$vertex_addr;
      var $neighbors22=(($36+12)|0);
      var $37=HEAP32[(($neighbors22)>>2)];
      var $e=(($37+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $38=$p;
      $neighborp=$38;
      label = 16; break;
    case 16: 
      var $39=$neighborp;
      var $incdec_ptr24=(($39+4)|0);
      $neighborp=$incdec_ptr24;
      var $40=HEAP32[(($39)>>2)];
      $neighbor=$40;
      var $tobool25=(($40)|0)!=0;
      if ($tobool25) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $41=$count;
      var $inc=((($41)+(1))|0);
      $count=$inc;
      var $rem=((($inc)|0))%(100);
      var $cmp=(($rem)|0)==0;
      if ($cmp) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $42=$fp_addr;
      _qh_fprintf($42, 9241, ((5288848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 19; break;
    case 19: 
      var $43=$fp_addr;
      var $44=$neighbor;
      var $id=(($44+72)|0);
      var $45=HEAP32[(($id)>>2)];
      _qh_fprintf($43, 9242, ((5295876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$45,tempInt));
      label = 16; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $46=$fp_addr;
      _qh_fprintf($46, 9243, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvertex["X"]=1;

function _qh_countfacets($facetlist, $facets, $printall, $numfacetsp, $numsimplicialp, $totneighborsp, $numridgesp, $numcoplanarsp, $numtricoplanarsp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $numfacetsp_addr;
      var $numsimplicialp_addr;
      var $totneighborsp_addr;
      var $numridgesp_addr;
      var $numcoplanarsp_addr;
      var $numtricoplanarsp_addr;
      var $facet;
      var $facetp;
      var $numfacets;
      var $numsimplicial;
      var $numridges;
      var $totneighbors;
      var $numcoplanars;
      var $numtricoplanars;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $numfacetsp_addr=$numfacetsp;
      $numsimplicialp_addr=$numsimplicialp;
      $totneighborsp_addr=$totneighborsp;
      $numridgesp_addr=$numridgesp;
      $numcoplanarsp_addr=$numcoplanarsp;
      $numtricoplanarsp_addr=$numtricoplanarsp;
      $numfacets=0;
      $numsimplicial=0;
      $numridges=0;
      $totneighbors=0;
      $numcoplanars=0;
      $numtricoplanars=0;
      var $0=$facetlist_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 24; break; }
    case 3: 
      var $1=$facetlist_addr;
      $facet=$1;
      label = 4; break;
    case 4: 
      var $2=$facet;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $5 = 0;label = 6; break; }
    case 5: 
      var $3=$facet;
      var $next=(($3+44)|0);
      var $4=HEAP32[(($next)>>2)];
      var $tobool2=(($4)|0)!=0;
      var $5 = $tobool2;label = 6; break;
    case 6: 
      var $5;
      if ($5) { label = 7; break; } else { label = 23; break; }
    case 7: 
      var $6=$facet;
      var $7=$6;
      var $bf_field_offs=(($7+76)|0);
      var $8=$bf_field_offs;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $bf_clear=$10 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=HEAP32[((((5249092)|0))>>2)];
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $12=$printall_addr;
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $13=$facet;
      var $call=_qh_skipfacet($13);
      var $tobool7=(($call)|0)!=0;
      if ($tobool7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $14=$facet;
      var $visitid=(($14+68)|0);
      HEAP32[(($visitid)>>2)]=0;
      label = 21; break;
    case 12: 
      var $15=$numfacets;
      var $inc=((($15)+(1))|0);
      $numfacets=$inc;
      var $16=$facet;
      var $visitid9=(($16+68)|0);
      HEAP32[(($visitid9)>>2)]=$inc;
      var $17=$facet;
      var $neighbors=(($17+56)|0);
      var $18=HEAP32[(($neighbors)>>2)];
      var $call10=_qh_setsize($18);
      var $19=$totneighbors;
      var $add=((($19)+($call10))|0);
      $totneighbors=$add;
      var $20=$facet;
      var $21=$20;
      var $bf_field_offs11=(($21+76)|0);
      var $22=$bf_field_offs11;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 13;
      var $bf_clear12=$24 & 1;
      var $tobool13=(($bf_clear12)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $25=$numsimplicial;
      var $inc15=((($25)+(1))|0);
      $numsimplicial=$inc15;
      var $26=$facet;
      var $27=$26;
      var $bf_field_offs16=(($27+76)|0);
      var $28=$bf_field_offs16;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 28;
      var $bf_clear17=$30 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $31=$facet;
      var $32=$31;
      var $bf_field_offs20=(($32+76)|0);
      var $33=$bf_field_offs20;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 9;
      var $bf_clear21=$35 & 1;
      var $tobool22=(($bf_clear21)|0)!=0;
      if ($tobool22) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $36=$numtricoplanars;
      var $inc24=((($36)+(1))|0);
      $numtricoplanars=$inc24;
      label = 16; break;
    case 16: 
      label = 18; break;
    case 17: 
      var $37=$facet;
      var $ridges=(($37+52)|0);
      var $38=HEAP32[(($ridges)>>2)];
      var $call26=_qh_setsize($38);
      var $39=$numridges;
      var $add27=((($39)+($call26))|0);
      $numridges=$add27;
      label = 18; break;
    case 18: 
      var $40=$facet;
      var $coplanarset=(($40+64)|0);
      var $41=HEAP32[(($coplanarset)>>2)];
      var $tobool29=(($41)|0)!=0;
      if ($tobool29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $42=$facet;
      var $coplanarset31=(($42+64)|0);
      var $43=HEAP32[(($coplanarset31)>>2)];
      var $call32=_qh_setsize($43);
      var $44=$numcoplanars;
      var $add33=((($44)+($call32))|0);
      $numcoplanars=$add33;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $45=$facet;
      var $next36=(($45+44)|0);
      var $46=HEAP32[(($next36)>>2)];
      $facet=$46;
      label = 4; break;
    case 23: 
      label = 24; break;
    case 24: 
      $facet=0;
      var $47=$facets_addr;
      var $tobool38=(($47)|0)!=0;
      if ($tobool38) { label = 25; break; } else { label = 43; break; }
    case 25: 
      var $48=$facets_addr;
      var $e=(($48+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $49=$p;
      $facetp=$49;
      label = 26; break;
    case 26: 
      var $50=$facetp;
      var $incdec_ptr=(($50+4)|0);
      $facetp=$incdec_ptr;
      var $51=HEAP32[(($50)>>2)];
      $facet=$51;
      var $tobool41=(($51)|0)!=0;
      if ($tobool41) { label = 27; break; } else { label = 42; break; }
    case 27: 
      var $52=$facet;
      var $53=$52;
      var $bf_field_offs43=(($53+76)|0);
      var $54=$bf_field_offs43;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 >>> 11;
      var $bf_clear44=$56 & 1;
      var $tobool45=(($bf_clear44)|0)!=0;
      if ($tobool45) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $57=HEAP32[((((5249092)|0))>>2)];
      var $tobool47=(($57)|0)!=0;
      if ($tobool47) { label = 31; break; } else { label = 29; break; }
    case 29: 
      var $58=$printall_addr;
      var $tobool49=(($58)|0)!=0;
      if ($tobool49) { label = 32; break; } else { label = 30; break; }
    case 30: 
      var $59=$facet;
      var $call51=_qh_skipfacet($59);
      var $tobool52=(($call51)|0)!=0;
      if ($tobool52) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $60=$facet;
      var $visitid54=(($60+68)|0);
      HEAP32[(($visitid54)>>2)]=0;
      label = 41; break;
    case 32: 
      var $61=$numfacets;
      var $inc56=((($61)+(1))|0);
      $numfacets=$inc56;
      var $62=$facet;
      var $visitid57=(($62+68)|0);
      HEAP32[(($visitid57)>>2)]=$inc56;
      var $63=$facet;
      var $neighbors58=(($63+56)|0);
      var $64=HEAP32[(($neighbors58)>>2)];
      var $call59=_qh_setsize($64);
      var $65=$totneighbors;
      var $add60=((($65)+($call59))|0);
      $totneighbors=$add60;
      var $66=$facet;
      var $67=$66;
      var $bf_field_offs61=(($67+76)|0);
      var $68=$bf_field_offs61;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 13;
      var $bf_clear62=$70 & 1;
      var $tobool63=(($bf_clear62)|0)!=0;
      if ($tobool63) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $71=$numsimplicial;
      var $inc65=((($71)+(1))|0);
      $numsimplicial=$inc65;
      var $72=$facet;
      var $73=$72;
      var $bf_field_offs66=(($73+76)|0);
      var $74=$bf_field_offs66;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 28;
      var $bf_clear67=$76 & 1;
      var $tobool68=(($bf_clear67)|0)!=0;
      if ($tobool68) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $77=$facet;
      var $78=$77;
      var $bf_field_offs70=(($78+76)|0);
      var $79=$bf_field_offs70;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 >>> 9;
      var $bf_clear71=$81 & 1;
      var $tobool72=(($bf_clear71)|0)!=0;
      if ($tobool72) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $82=$numtricoplanars;
      var $inc74=((($82)+(1))|0);
      $numtricoplanars=$inc74;
      label = 36; break;
    case 36: 
      label = 38; break;
    case 37: 
      var $83=$facet;
      var $ridges77=(($83+52)|0);
      var $84=HEAP32[(($ridges77)>>2)];
      var $call78=_qh_setsize($84);
      var $85=$numridges;
      var $add79=((($85)+($call78))|0);
      $numridges=$add79;
      label = 38; break;
    case 38: 
      var $86=$facet;
      var $coplanarset81=(($86+64)|0);
      var $87=HEAP32[(($coplanarset81)>>2)];
      var $tobool82=(($87)|0)!=0;
      if ($tobool82) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $88=$facet;
      var $coplanarset84=(($88+64)|0);
      var $89=HEAP32[(($coplanarset84)>>2)];
      var $call85=_qh_setsize($89);
      var $90=$numcoplanars;
      var $add86=((($90)+($call85))|0);
      $numcoplanars=$add86;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 26; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $91=$numfacets;
      var $add91=((($91)+(1))|0);
      var $92=HEAP32[((((5249156)|0))>>2)];
      var $add92=((($92)+($add91))|0);
      HEAP32[((((5249156)|0))>>2)]=$add92;
      var $93=$numfacets;
      var $94=$numfacetsp_addr;
      HEAP32[(($94)>>2)]=$93;
      var $95=$numsimplicial;
      var $96=$numsimplicialp_addr;
      HEAP32[(($96)>>2)]=$95;
      var $97=$totneighbors;
      var $98=$totneighborsp_addr;
      HEAP32[(($98)>>2)]=$97;
      var $99=$numridges;
      var $100=$numridgesp_addr;
      HEAP32[(($100)>>2)]=$99;
      var $101=$numcoplanars;
      var $102=$numcoplanarsp_addr;
      HEAP32[(($102)>>2)]=$101;
      var $103=$numtricoplanars;
      var $104=$numtricoplanarsp_addr;
      HEAP32[(($104)>>2)]=$103;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_countfacets["X"]=1;

function _qh_skipfacet($facet) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facet_addr;
      var $neighbor;
      var $neighborp;
      $facet_addr=$facet;
      var $0=HEAP32[((((5247172)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $1=$facet_addr;
      var $2=$1;
      var $bf_field_offs=(($2+76)|0);
      var $3=$bf_field_offs;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 19;
      var $bf_clear=$5 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=HEAP32[((((5247164)|0))>>2)];
      var $tobool3=(($6)|0)!=0;
      var $lnot=$tobool3 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 20; break;
    case 5: 
      $neighbor=0;
      var $7=$facet_addr;
      var $neighbors=(($7+56)|0);
      var $8=HEAP32[(($neighbors)>>2)];
      var $tobool4=(($8)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $9=$facet_addr;
      var $neighbors6=(($9+56)|0);
      var $10=HEAP32[(($neighbors6)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $neighborp=$11;
      label = 7; break;
    case 7: 
      var $12=$neighborp;
      var $incdec_ptr=(($12+4)|0);
      $neighborp=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $neighbor=$13;
      var $tobool7=(($13)|0)!=0;
      if ($tobool7) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $14=$neighbor;
      var $15=$14;
      var $bf_field_offs8=(($15+76)|0);
      var $16=$bf_field_offs8;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 19;
      var $bf_clear9=$18 & 1;
      var $tobool10=(($bf_clear9)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 20; break;
    case 10: 
      label = 7; break;
    case 11: 
      label = 12; break;
    case 12: 
      $retval=1;
      label = 20; break;
    case 13: 
      var $19=HEAP32[((((5247164)|0))>>2)];
      var $tobool14=(($19)|0)!=0;
      if ($tobool14) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $20=$facet_addr;
      var $21=$20;
      var $bf_field_offs16=(($21+76)|0);
      var $22=$bf_field_offs16;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 19;
      var $bf_clear17=$24 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      var $lnot19=$tobool18 ^ 1;
      var $lnot_ext20=(($lnot19)&1);
      $retval=$lnot_ext20;
      label = 20; break;
    case 15: 
      var $25=$facet_addr;
      var $normal=(($25+24)|0);
      var $26=HEAP32[(($normal)>>2)];
      var $tobool22=(($26)|0)!=0;
      if ($tobool22) { label = 17; break; } else { label = 16; break; }
    case 16: 
      $retval=1;
      label = 20; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $27=$facet_addr;
      var $normal27=(($27+24)|0);
      var $28=HEAP32[(($normal27)>>2)];
      var $call=_qh_inthresholds($28, 0);
      var $tobool28=(($call)|0)!=0;
      var $lnot29=$tobool28 ^ 1;
      var $lnot_ext30=(($lnot29)&1);
      $retval=$lnot_ext30;
      label = 20; break;
    case 20: 
      var $29=$retval;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_qh_skipfacet["X"]=1;

function _qh_detvnorm($vertex, $vertexA, $centers, $offsetp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $vertexA_addr;
      var $centers_addr;
      var $offsetp_addr;
      var $facet;
      var $facetp;
      var $i;
      var $k;
      var $pointid;
      var $pointidA;
      var $point_i;
      var $point_n;
      var $simplex=__stackBase__;
      var $point=(__stackBase__)+(4);
      var $pointp;
      var $point0;
      var $midpoint;
      var $normal;
      var $inpoint;
      var $coord;
      var $gmcoord;
      var $normalp;
      var $points=(__stackBase__)+(8);
      var $nearzero=(__stackBase__)+(12);
      var $unbounded;
      var $numcenters;
      var $dim;
      var $dist;
      var $offset=(__stackBase__)+(16);
      var $angle;
      var $zero=(__stackBase__)+(24);
      $vertex_addr=$vertex;
      $vertexA_addr=$vertexA;
      $centers_addr=$centers;
      $offsetp_addr=$offsetp;
      HEAP32[(($simplex)>>2)]=0;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($points)>>2)]=$call;
      HEAP32[(($nearzero)>>2)]=0;
      $unbounded=0;
      $numcenters=0;
      var $1=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($1)-(1))|0);
      $dim=$sub;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($zero)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($zero)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $2=HEAP32[((((5249192)|0))>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $4=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($3)*($4))&-1);
      var $add_ptr=(($2+($mul<<3))|0);
      $midpoint=$add_ptr;
      $k=0;
      label = 3; break;
    case 3: 
      var $5=$k;
      var $6=$dim;
      var $cmp=(($5)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$k;
      var $8=$vertex_addr;
      var $point1=(($8+8)|0);
      var $9=HEAP32[(($point1)>>2)];
      var $arrayidx=(($9+($7<<3))|0);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$k;
      var $12=$vertexA_addr;
      var $point2=(($12+8)|0);
      var $13=HEAP32[(($point2)>>2)];
      var $arrayidx3=(($13+($11<<3))|0);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($10)+($14);
      var $div=($add)/(2);
      var $15=$k;
      var $16=$midpoint;
      var $arrayidx4=(($16+($15<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($arrayidx4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 5; break;
    case 5: 
      var $17=$k;
      var $inc=((($17)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 6: 
      $facet=0;
      var $18=$centers_addr;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $19=$centers_addr;
      var $e=(($19+4)|0);
      var $arrayidx5=(($e)|0);
      var $p=$arrayidx5;
      var $20=$p;
      $facetp=$20;
      label = 8; break;
    case 8: 
      var $21=$facetp;
      var $incdec_ptr=(($21+4)|0);
      $facetp=$incdec_ptr;
      var $22=HEAP32[(($21)>>2)];
      $facet=$22;
      var $tobool7=(($22)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $23=$numcenters;
      var $inc9=((($23)+(1))|0);
      $numcenters=$inc9;
      var $24=$facet;
      var $visitid=(($24+68)|0);
      var $25=HEAP32[(($visitid)>>2)];
      var $tobool10=(($25)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 10; break; }
    case 10: 
      $unbounded=1;
      label = 14; break;
    case 11: 
      var $26=$facet;
      var $center=(($26+36)|0);
      var $27=HEAP32[(($center)>>2)];
      var $tobool12=(($27)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $28=$facet;
      var $vertices=(($28+48)|0);
      var $29=HEAP32[(($vertices)>>2)];
      var $call14=_qh_facetcenter($29);
      var $30=$facet;
      var $center15=(($30+36)|0);
      HEAP32[(($center15)>>2)]=$call14;
      label = 13; break;
    case 13: 
      var $31=$facet;
      var $center16=(($31+36)|0);
      var $32=HEAP32[(($center16)>>2)];
      var $33=$32;
      _qh_setappend($points, $33);
      label = 14; break;
    case 14: 
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $34=$numcenters;
      var $35=$dim;
      var $cmp20=(($34)|0) > (($35)|0);
      if ($cmp20) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $36=HEAP32[((((5248940)|0))>>2)];
      var $call22=_qh_settemp($36);
      HEAP32[(($simplex)>>2)]=$call22;
      var $37=$vertex_addr;
      var $point23=(($37+8)|0);
      var $38=HEAP32[(($point23)>>2)];
      var $39=$38;
      _qh_setappend($simplex, $39);
      var $40=$unbounded;
      var $tobool24=(($40)|0)!=0;
      if ($tobool24) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $41=$midpoint;
      var $42=$41;
      _qh_setappend($simplex, $42);
      label = 19; break;
    case 19: 
      var $43=$dim;
      var $44=HEAP32[(($points)>>2)];
      _qh_maxsimplex($43, $44, 0, 0, $simplex);
      var $45=HEAP32[(($simplex)>>2)];
      var $call27=_qh_setdelnth($45, 0);
      label = 26; break;
    case 20: 
      var $46=$numcenters;
      var $47=$dim;
      var $cmp29=(($46)|0)==(($47)|0);
      if ($cmp29) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $48=$unbounded;
      var $tobool31=(($48)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $49=$midpoint;
      var $50=$49;
      _qh_setappend($points, $50);
      label = 23; break;
    case 23: 
      var $51=HEAP32[(($points)>>2)];
      HEAP32[(($simplex)>>2)]=$51;
      label = 25; break;
    case 24: 
      var $52=HEAP32[((((5248924)|0))>>2)];
      var $53=$numcenters;
      _qh_fprintf($52, 6216, ((5264456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$53,tempInt));
      _qh_errexit(5, 0, 0);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $i=0;
      var $54=HEAP32[((((5249192)|0))>>2)];
      $gmcoord=$54;
      var $55=HEAP32[(($simplex)>>2)];
      var $e37=(($55+4)|0);
      var $arrayidx38=(($e37)|0);
      var $p39=$arrayidx38;
      var $56=HEAP32[(($p39)>>2)];
      var $57=$56;
      $point0=$57;
      HEAP32[(($point)>>2)]=0;
      var $58=HEAP32[(($simplex)>>2)];
      var $tobool40=(($58)|0)!=0;
      if ($tobool40) { label = 27; break; } else { label = 38; break; }
    case 27: 
      var $59=HEAP32[(($simplex)>>2)];
      var $e42=(($59+4)|0);
      var $arrayidx43=(($e42)|0);
      var $p44=$arrayidx43;
      var $60=$p44;
      $pointp=$60;
      label = 28; break;
    case 28: 
      var $61=$pointp;
      var $incdec_ptr46=(($61+4)|0);
      $pointp=$incdec_ptr46;
      var $62=HEAP32[(($61)>>2)];
      HEAP32[(($point)>>2)]=$62;
      var $tobool47=(($62)|0)!=0;
      if ($tobool47) { label = 29; break; } else { label = 37; break; }
    case 29: 
      var $63=HEAP32[((((5247040)|0))>>2)];
      var $cmp49=(($63)|0) >= 4;
      if ($cmp49) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $64=HEAP32[((((5248924)|0))>>2)];
      var $65=$dim;
      _qh_printmatrix($64, ((5260168)|0), $point, 1, $65);
      label = 31; break;
    case 31: 
      var $66=HEAP32[(($point)>>2)];
      var $67=$point0;
      var $cmp52=(($66)|0)!=(($67)|0);
      if ($cmp52) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $68=$gmcoord;
      var $69=$i;
      var $inc54=((($69)+(1))|0);
      $i=$inc54;
      var $70=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx55=(($70+($69<<2))|0);
      HEAP32[(($arrayidx55)>>2)]=$68;
      var $71=$point0;
      $coord=$71;
      var $72=$dim;
      $k=$72;
      label = 33; break;
    case 33: 
      var $73=$k;
      var $dec=((($73)-(1))|0);
      $k=$dec;
      var $tobool57=(($73)|0)!=0;
      if ($tobool57) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $74=HEAP32[(($point)>>2)];
      var $incdec_ptr59=(($74+8)|0);
      HEAP32[(($point)>>2)]=$incdec_ptr59;
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($74)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($74)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=$coord;
      var $incdec_ptr60=(($76+8)|0);
      $coord=$incdec_ptr60;
      var $77=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($76)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($76)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub61=($75)-($77);
      var $78=$gmcoord;
      var $incdec_ptr62=(($78+8)|0);
      $gmcoord=$incdec_ptr62;
      (HEAPF64[(tempDoublePtr)>>3]=$sub61,HEAP32[(($78)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($78)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 33; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 28; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $79=$gmcoord;
      var $80=$i;
      var $81=HEAP32[((((5249196)|0))>>2)];
      var $arrayidx67=(($81+($80<<2))|0);
      HEAP32[(($arrayidx67)>>2)]=$79;
      var $82=$gmcoord;
      $normal=$82;
      var $83=$dim;
      var $84=HEAP32[((((5249196)|0))>>2)];
      var $85=$point0;
      var $86=$normal;
      _qh_sethyperplane_gauss($83, $84, $85, 1, $86, $offset, $nearzero);
      var $87=HEAP32[((((5247032)|0))>>2)];
      var $88=$vertexA_addr;
      var $point68=(($88+8)|0);
      var $89=HEAP32[(($point68)>>2)];
      var $cmp69=(($87)|0)==(($89)|0);
      if ($cmp69) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $90=$vertexA_addr;
      var $point71=(($90+8)|0);
      var $91=HEAP32[(($point71)>>2)];
      $inpoint=$91;
      label = 41; break;
    case 40: 
      var $92=$vertex_addr;
      var $point73=(($92+8)|0);
      var $93=HEAP32[(($point73)>>2)];
      $inpoint=$93;
      label = 41; break;
    case 41: 
      var $94=HEAP32[(((((5243428)|0)))>>2)];
      var $inc75=((($94)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc75;
      var $95=$dim;
      var $96=$inpoint;
      var $97=$normal;
      var $call76=_qh_distnorm($95, $96, $97, $offset);
      $dist=$call76;
      var $98=$dist;
      var $cmp77=$98 > 0;
      if ($cmp77) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub79=(-$99);
      (HEAPF64[(tempDoublePtr)>>3]=$sub79,HEAP32[(($offset)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($offset)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $100=$normal;
      $normalp=$100;
      var $101=$dim;
      $k=$101;
      label = 43; break;
    case 43: 
      var $102=$k;
      var $dec81=((($102)-(1))|0);
      $k=$dec81;
      var $tobool82=(($102)|0)!=0;
      if ($tobool82) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $103=$normalp;
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($103)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($103)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub84=(-$104);
      var $105=$normalp;
      (HEAPF64[(tempDoublePtr)>>3]=$sub84,HEAP32[(($105)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($105)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $106=$normalp;
      var $incdec_ptr85=(($106+8)|0);
      $normalp=$incdec_ptr85;
      label = 43; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $107=HEAP32[((((5247468)|0))>>2)];
      var $tobool88=(($107)|0)!=0;
      if ($tobool88) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $108=HEAP32[((((5247316)|0))>>2)];
      var $tobool89=(($108)|0)!=0;
      if ($tobool89) { label = 48; break; } else { label = 91; break; }
    case 48: 
      var $109=$vertex_addr;
      var $point91=(($109+8)|0);
      var $110=HEAP32[(($point91)>>2)];
      var $call92=_qh_pointid($110);
      $pointid=$call92;
      var $111=$vertexA_addr;
      var $point93=(($111+8)|0);
      var $112=HEAP32[(($point93)>>2)];
      var $call94=_qh_pointid($112);
      $pointidA=$call94;
      var $113=$unbounded;
      var $tobool95=(($113)|0)!=0;
      if ($tobool95) { label = 74; break; } else { label = 49; break; }
    case 49: 
      var $114=HEAP32[(((((5243444)|0)))>>2)];
      var $inc97=((($114)+(1))|0);
      HEAP32[(((((5243444)|0)))>>2)]=$inc97;
      var $115=$dim;
      var $116=$midpoint;
      var $117=$normal;
      var $call98=_qh_distnorm($115, $116, $117, $offset);
      $dist=$call98;
      var $118=$dist;
      var $cmp99=$118 < 0;
      if ($cmp99) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $119=$dist;
      var $sub101=(-$119);
      $dist=$sub101;
      label = 51; break;
    case 51: 
      var $120=HEAP32[(((((5244492)|0)))>>2)];
      var $inc103=((($120)+(1))|0);
      HEAP32[(((((5244492)|0)))>>2)]=$inc103;
      var $121=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244508)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244508)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $122=$dist;
      var $cmp104=$121 < $122;
      if ($cmp104) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $123=$dist;
      (HEAPF64[(tempDoublePtr)>>3]=$123,HEAP32[((((5244508)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244508)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 53; break;
    case 53: 
      var $124=$dist;
      var $125=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244500)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244500)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add107=($125)+($124);
      (HEAPF64[(tempDoublePtr)>>3]=$add107,HEAP32[((((5244500)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244500)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $126=HEAP32[((((5247040)|0))>>2)];
      var $cmp108=(($126)|0) >= 4;
      if ($cmp108) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $127=HEAP32[((((5248924)|0))>>2)];
      var $128=$pointid;
      var $129=$pointidA;
      var $130=$dist;
      _qh_fprintf($127, 4014, ((5257152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$128,HEAP32[(((tempInt)+(4))>>2)]=$129,(HEAPF64[(tempDoublePtr)>>3]=$130,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 55; break;
    case 55: 
      $k=0;
      label = 56; break;
    case 56: 
      var $131=$k;
      var $132=$dim;
      var $cmp112=(($131)|0) < (($132)|0);
      if ($cmp112) { label = 57; break; } else { label = 59; break; }
    case 57: 
      var $133=$k;
      var $134=$vertexA_addr;
      var $point114=(($134+8)|0);
      var $135=HEAP32[(($point114)>>2)];
      var $arrayidx115=(($135+($133<<3))|0);
      var $136=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx115)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx115)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $137=$k;
      var $138=$vertex_addr;
      var $point116=(($138+8)|0);
      var $139=HEAP32[(($point116)>>2)];
      var $arrayidx117=(($139+($137<<3))|0);
      var $140=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx117)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx117)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub118=($136)-($140);
      var $141=$k;
      var $142=$midpoint;
      var $arrayidx119=(($142+($141<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub118,HEAP32[(($arrayidx119)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx119)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 58; break;
    case 58: 
      var $143=$k;
      var $inc121=((($143)+(1))|0);
      $k=$inc121;
      label = 56; break;
    case 59: 
      var $144=$midpoint;
      var $145=$dim;
      _qh_normalize($144, $145, 0);
      var $146=$dim;
      var $147=$midpoint;
      var $148=$normal;
      var $call123=_qh_distnorm($146, $147, $148, $zero);
      $angle=$call123;
      var $149=$angle;
      var $cmp124=$149 < 0;
      if ($cmp124) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $150=$angle;
      var $add126=($150)+(1);
      $angle=$add126;
      label = 62; break;
    case 61: 
      var $151=$angle;
      var $sub128=($151)-(1);
      $angle=$sub128;
      label = 62; break;
    case 62: 
      var $152=$angle;
      var $cmp130=$152 < 0;
      if ($cmp130) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $153=$angle;
      var $154=$angle;
      var $sub132=($154)-($153);
      $angle=$sub132;
      label = 64; break;
    case 64: 
      var $155=HEAP32[((((5247040)|0))>>2)];
      var $cmp134=(($155)|0) >= 4;
      if ($cmp134) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $156=HEAP32[((((5248924)|0))>>2)];
      var $157=$pointid;
      var $158=$pointidA;
      var $159=$angle;
      var $160=HEAP32[(($nearzero)>>2)];
      _qh_fprintf($156, 4015, ((5254136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$157,HEAP32[(((tempInt)+(4))>>2)]=$158,(HEAPF64[(tempDoublePtr)>>3]=$159,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$160,tempInt));
      label = 66; break;
    case 66: 
      var $161=HEAP32[(($nearzero)>>2)];
      var $tobool137=(($161)|0)!=0;
      if ($tobool137) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $162=HEAP32[(((((5244468)|0)))>>2)];
      var $inc139=((($162)+(1))|0);
      HEAP32[(((((5244468)|0)))>>2)]=$inc139;
      var $163=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244484)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244484)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $164=$angle;
      var $cmp140=$163 < $164;
      if ($cmp140) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $165=$angle;
      (HEAPF64[(tempDoublePtr)>>3]=$165,HEAP32[((((5244484)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244484)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 69; break;
    case 69: 
      var $166=$angle;
      var $167=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244476)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244476)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add143=($167)+($166);
      (HEAPF64[(tempDoublePtr)>>3]=$add143,HEAP32[((((5244476)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244476)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 73; break;
    case 70: 
      var $168=HEAP32[(((((5244516)|0)))>>2)];
      var $inc145=((($168)+(1))|0);
      HEAP32[(((((5244516)|0)))>>2)]=$inc145;
      var $169=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244532)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244532)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $170=$angle;
      var $cmp146=$169 < $170;
      if ($cmp146) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $171=$angle;
      (HEAPF64[(tempDoublePtr)>>3]=$171,HEAP32[((((5244532)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244532)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 72; break;
    case 72: 
      var $172=$angle;
      var $173=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244524)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244524)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add149=($173)+($172);
      (HEAPF64[(tempDoublePtr)>>3]=$add149,HEAP32[((((5244524)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244524)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $174=HEAP32[(($simplex)>>2)];
      var $175=HEAP32[(($points)>>2)];
      var $cmp152=(($174)|0)!=(($175)|0);
      if ($cmp152) { label = 75; break; } else { label = 90; break; }
    case 75: 
      HEAP32[(($point)>>2)]=0;
      var $176=HEAP32[(($points)>>2)];
      var $tobool154=(($176)|0)!=0;
      if ($tobool154) { label = 76; break; } else { label = 89; break; }
    case 76: 
      $point_i=0;
      var $177=HEAP32[(($points)>>2)];
      var $e156=(($177+4)|0);
      var $arrayidx157=(($e156)|0);
      var $p158=$arrayidx157;
      var $178=HEAP32[(($p158)>>2)];
      var $179=$178;
      HEAP32[(($point)>>2)]=$179;
      var $180=HEAP32[(($points)>>2)];
      var $call159=_qh_setsize($180);
      $point_n=$call159;
      label = 77; break;
    case 77: 
      var $181=$point_i;
      var $182=$point_n;
      var $cmp161=(($181)|0) < (($182)|0);
      if ($cmp161) { label = 78; break; } else { label = 88; break; }
    case 78: 
      var $183=HEAP32[(($simplex)>>2)];
      var $184=HEAP32[(($point)>>2)];
      var $185=$184;
      var $call163=_qh_setin($183, $185);
      var $tobool164=(($call163)|0)!=0;
      if ($tobool164) { label = 86; break; } else { label = 79; break; }
    case 79: 
      var $186=$point_i;
      var $187=$centers_addr;
      var $e166=(($187+4)|0);
      var $arrayidx167=(($e166+($186<<2))|0);
      var $p168=$arrayidx167;
      var $188=HEAP32[(($p168)>>2)];
      var $189=$188;
      $facet=$189;
      var $190=HEAP32[(((((5243444)|0)))>>2)];
      var $inc169=((($190)+(1))|0);
      HEAP32[(((((5243444)|0)))>>2)]=$inc169;
      var $191=$dim;
      var $192=HEAP32[(($point)>>2)];
      var $193=$normal;
      var $call170=_qh_distnorm($191, $192, $193, $offset);
      $dist=$call170;
      var $194=$dist;
      var $cmp171=$194 < 0;
      if ($cmp171) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $195=$dist;
      var $sub173=(-$195);
      $dist=$sub173;
      label = 81; break;
    case 81: 
      var $196=HEAP32[(((((5244444)|0)))>>2)];
      var $inc175=((($196)+(1))|0);
      HEAP32[(((((5244444)|0)))>>2)]=$inc175;
      var $197=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244460)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244460)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $198=$dist;
      var $cmp176=$197 < $198;
      if ($cmp176) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $199=$dist;
      (HEAPF64[(tempDoublePtr)>>3]=$199,HEAP32[((((5244460)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244460)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 83; break;
    case 83: 
      var $200=$dist;
      var $201=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244452)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244452)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add179=($201)+($200);
      (HEAPF64[(tempDoublePtr)>>3]=$add179,HEAP32[((((5244452)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244452)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $202=HEAP32[((((5247040)|0))>>2)];
      var $cmp180=(($202)|0) >= 4;
      if ($cmp180) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $203=HEAP32[((((5248924)|0))>>2)];
      var $204=$pointid;
      var $205=$pointidA;
      var $206=$facet;
      var $visitid182=(($206+68)|0);
      var $207=HEAP32[(($visitid182)>>2)];
      var $208=$dist;
      _qh_fprintf($203, 4016, ((5251532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$204,HEAP32[(((tempInt)+(4))>>2)]=$205,HEAP32[(((tempInt)+(8))>>2)]=$207,(HEAPF64[(tempDoublePtr)>>3]=$208,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $209=$point_i;
      var $inc186=((($209)+(1))|0);
      $point_i=$inc186;
      var $210=HEAP32[(($points)>>2)];
      var $e187=(($210+4)|0);
      var $arrayidx188=(($e187+($inc186<<2))|0);
      var $p189=$arrayidx188;
      var $211=HEAP32[(($p189)>>2)];
      var $212=$211;
      HEAP32[(($point)>>2)]=$212;
      label = 77; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $213=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $214=$offsetp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$213,HEAP32[(($214)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($214)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $215=HEAP32[(($simplex)>>2)];
      var $216=HEAP32[(($points)>>2)];
      var $cmp194=(($215)|0)!=(($216)|0);
      if ($cmp194) { label = 92; break; } else { label = 93; break; }
    case 92: 
      _qh_settempfree($simplex);
      label = 93; break;
    case 93: 
      _qh_settempfree($points);
      var $217=$normal;
      STACKTOP = __stackBase__;
      return $217;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detvnorm["X"]=1;

function _qh_detvridge($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $centers=__stackBase__;
      var $tricenters=(__stackBase__)+(4);
      var $neighbor;
      var $neighborp;
      var $firstinf;
      $vertex_addr=$vertex;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($centers)>>2)]=$call;
      var $1=HEAP32[((((5248940)|0))>>2)];
      var $call1=_qh_settemp($1);
      HEAP32[(($tricenters)>>2)]=$call1;
      $firstinf=1;
      $neighbor=0;
      var $2=$vertex_addr;
      var $neighbors=(($2+12)|0);
      var $3=HEAP32[(($neighbors)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 17; break; }
    case 3: 
      var $4=$vertex_addr;
      var $neighbors2=(($4+12)|0);
      var $5=HEAP32[(($neighbors2)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $neighborp=$6;
      label = 4; break;
    case 4: 
      var $7=$neighborp;
      var $incdec_ptr=(($7+4)|0);
      $neighborp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $neighbor=$8;
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 16; break; }
    case 5: 
      var $9=$neighbor;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 14;
      var $bf_clear=$13 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $14=$neighbor;
      var $visitid=(($14+68)|0);
      var $15=HEAP32[(($visitid)>>2)];
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $16=$neighbor;
      var $17=$16;
      var $bf_field_offs8=(($17+76)|0);
      var $18=$bf_field_offs8;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 9;
      var $bf_clear9=$20 & 1;
      var $tobool10=(($bf_clear9)|0)!=0;
      if ($tobool10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$neighbor;
      var $center=(($21+36)|0);
      var $22=HEAP32[(($center)>>2)];
      var $23=$22;
      var $call11=_qh_setunique($tricenters, $23);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$neighbor;
      var $25=$24;
      _qh_setappend($centers, $25);
      label = 10; break;
    case 10: 
      label = 14; break;
    case 11: 
      var $26=$firstinf;
      var $tobool14=(($26)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $firstinf=0;
      var $27=$neighbor;
      var $28=$27;
      _qh_setappend($centers, $28);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 4; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $29=HEAP32[(($centers)>>2)];
      var $e20=(($29+4)|0);
      var $arrayidx21=(($e20)|0);
      var $p22=$arrayidx21;
      var $30=$p22;
      var $31=$30;
      var $32=HEAP32[(($centers)>>2)];
      var $call23=_qh_setsize($32);
      _qsort($31, $call23, 4, 14);
      _qh_settempfree($tricenters);
      var $33=HEAP32[(($centers)>>2)];
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detvridge["X"]=1;

function _qh_detvridge3($atvertex, $vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $atvertex_addr;
      var $vertex_addr;
      var $centers=__stackBase__;
      var $tricenters=(__stackBase__)+(4);
      var $neighbor;
      var $neighborp;
      var $facet;
      var $firstinf;
      $atvertex_addr=$atvertex;
      $vertex_addr=$vertex;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($centers)>>2)]=$call;
      var $1=HEAP32[((((5248940)|0))>>2)];
      var $call1=_qh_settemp($1);
      HEAP32[(($tricenters)>>2)]=$call1;
      $facet=0;
      $firstinf=1;
      $neighbor=0;
      var $2=$atvertex_addr;
      var $neighbors=(($2+12)|0);
      var $3=HEAP32[(($neighbors)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$atvertex_addr;
      var $neighbors2=(($4+12)|0);
      var $5=HEAP32[(($neighbors2)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $neighborp=$6;
      label = 4; break;
    case 4: 
      var $7=$neighborp;
      var $incdec_ptr=(($7+4)|0);
      $neighborp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $neighbor=$8;
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$neighbor;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & -32769;
      HEAP32[(($11)>>2)]=$13;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      $neighbor=0;
      var $14=$vertex_addr;
      var $neighbors4=(($14+12)|0);
      var $15=HEAP32[(($neighbors4)>>2)];
      var $tobool5=(($15)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $16=$vertex_addr;
      var $neighbors7=(($16+12)|0);
      var $17=HEAP32[(($neighbors7)>>2)];
      var $e8=(($17+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      var $18=$p10;
      $neighborp=$18;
      label = 9; break;
    case 9: 
      var $19=$neighborp;
      var $incdec_ptr12=(($19+4)|0);
      $neighborp=$incdec_ptr12;
      var $20=HEAP32[(($19)>>2)];
      $neighbor=$20;
      var $tobool13=(($20)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $21=$neighbor;
      var $22=$21;
      var $bf_field_offs15=(($22+76)|0);
      var $23=$bf_field_offs15;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 15;
      var $bf_clear=$25 & 1;
      var $tobool16=(($bf_clear)|0)!=0;
      if ($tobool16) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $26=$neighbor;
      $facet=$26;
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $27=$facet;
      var $tobool21=(($27)|0)!=0;
      if ($tobool21) { label = 16; break; } else { label = 37; break; }
    case 16: 
      var $28=$facet;
      var $29=$28;
      var $bf_field_offs22=(($29+76)|0);
      var $30=$bf_field_offs22;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & -32769;
      var $33=$32 | 32768;
      HEAP32[(($30)>>2)]=$33;
      var $34=$neighbor;
      var $35=$34;
      var $bf_field_offs23=(($35+76)|0);
      var $36=$bf_field_offs23;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37 >>> 14;
      var $bf_clear24=$38 & 1;
      var $tobool25=(($bf_clear24)|0)!=0;
      if ($tobool25) { label = 17; break; } else { label = 26; break; }
    case 17: 
      var $39=$facet;
      var $visitid=(($39+68)|0);
      var $40=HEAP32[(($visitid)>>2)];
      var $tobool27=(($40)|0)!=0;
      if ($tobool27) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $41=$facet;
      var $42=$41;
      var $bf_field_offs29=(($42+76)|0);
      var $43=$bf_field_offs29;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 9;
      var $bf_clear30=$45 & 1;
      var $tobool31=(($bf_clear30)|0)!=0;
      if ($tobool31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $46=$facet;
      var $center=(($46+36)|0);
      var $47=HEAP32[(($center)>>2)];
      var $48=$47;
      var $call32=_qh_setunique($tricenters, $48);
      var $tobool33=(($call32)|0)!=0;
      if ($tobool33) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $49=$facet;
      var $50=$49;
      _qh_setappend($centers, $50);
      label = 21; break;
    case 21: 
      label = 25; break;
    case 22: 
      var $51=$firstinf;
      var $tobool36=(($51)|0)!=0;
      if ($tobool36) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $firstinf=0;
      var $52=$facet;
      var $53=$52;
      _qh_setappend($centers, $53);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $neighbor=0;
      var $54=$facet;
      var $neighbors41=(($54+56)|0);
      var $55=HEAP32[(($neighbors41)>>2)];
      var $tobool42=(($55)|0)!=0;
      if ($tobool42) { label = 27; break; } else { label = 36; break; }
    case 27: 
      var $56=$facet;
      var $neighbors44=(($56+56)|0);
      var $57=HEAP32[(($neighbors44)>>2)];
      var $e45=(($57+4)|0);
      var $arrayidx46=(($e45)|0);
      var $p47=$arrayidx46;
      var $58=$p47;
      $neighborp=$58;
      label = 28; break;
    case 28: 
      var $59=$neighborp;
      var $incdec_ptr49=(($59+4)|0);
      $neighborp=$incdec_ptr49;
      var $60=HEAP32[(($59)>>2)];
      $neighbor=$60;
      var $tobool50=(($60)|0)!=0;
      if ($tobool50) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $61=$neighbor;
      var $62=$61;
      var $bf_field_offs52=(($62+76)|0);
      var $63=$bf_field_offs52;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 >>> 15;
      var $bf_clear53=$65 & 1;
      var $tobool54=(($bf_clear53)|0)!=0;
      if ($tobool54) { label = 34; break; } else { label = 30; break; }
    case 30: 
      var $66=$vertex_addr;
      var $neighbors56=(($66+12)|0);
      var $67=HEAP32[(($neighbors56)>>2)];
      var $68=$neighbor;
      var $69=$68;
      var $call57=_qh_setin($67, $69);
      var $tobool58=(($call57)|0)!=0;
      if ($tobool58) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 35; break;
    case 32: 
      var $70=$neighbor;
      var $71=$70;
      var $bf_field_offs61=(($71+76)|0);
      var $72=$bf_field_offs61;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73 & -32769;
      var $75=$74 | 32768;
      HEAP32[(($72)>>2)]=$75;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 28; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $76=$neighbor;
      $facet=$76;
      label = 15; break;
    case 37: 
      var $77=HEAP32[((((5246980)|0))>>2)];
      var $tobool66=(($77)|0)!=0;
      if ($tobool66) { label = 38; break; } else { label = 46; break; }
    case 38: 
      $neighbor=0;
      var $78=$vertex_addr;
      var $neighbors68=(($78+12)|0);
      var $79=HEAP32[(($neighbors68)>>2)];
      var $tobool69=(($79)|0)!=0;
      if ($tobool69) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $80=$vertex_addr;
      var $neighbors71=(($80+12)|0);
      var $81=HEAP32[(($neighbors71)>>2)];
      var $e72=(($81+4)|0);
      var $arrayidx73=(($e72)|0);
      var $p74=$arrayidx73;
      var $82=$p74;
      $neighborp=$82;
      label = 40; break;
    case 40: 
      var $83=$neighborp;
      var $incdec_ptr76=(($83+4)|0);
      $neighborp=$incdec_ptr76;
      var $84=HEAP32[(($83)>>2)];
      $neighbor=$84;
      var $tobool77=(($84)|0)!=0;
      if ($tobool77) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $85=$neighbor;
      var $86=$85;
      var $bf_field_offs79=(($86+76)|0);
      var $87=$bf_field_offs79;
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 >>> 15;
      var $bf_clear80=$89 & 1;
      var $tobool81=(($bf_clear80)|0)!=0;
      if ($tobool81) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $90=HEAP32[((((5248924)|0))>>2)];
      var $91=$vertex_addr;
      var $point=(($91+8)|0);
      var $92=HEAP32[(($point)>>2)];
      var $call83=_qh_pointid($92);
      var $93=$neighbor;
      var $id=(($93+72)|0);
      var $94=HEAP32[(($id)>>2)];
      _qh_fprintf($90, 6217, ((5303592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call83,HEAP32[(((tempInt)+(4))>>2)]=$94,tempInt));
      var $95=$neighbor;
      _qh_errexit(5, $95, 0);
      label = 43; break;
    case 43: 
      label = 40; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      $neighbor=0;
      var $96=$atvertex_addr;
      var $neighbors88=(($96+12)|0);
      var $97=HEAP32[(($neighbors88)>>2)];
      var $tobool89=(($97)|0)!=0;
      if ($tobool89) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $98=$atvertex_addr;
      var $neighbors91=(($98+12)|0);
      var $99=HEAP32[(($neighbors91)>>2)];
      var $e92=(($99+4)|0);
      var $arrayidx93=(($e92)|0);
      var $p94=$arrayidx93;
      var $100=$p94;
      $neighborp=$100;
      label = 48; break;
    case 48: 
      var $101=$neighborp;
      var $incdec_ptr96=(($101+4)|0);
      $neighborp=$incdec_ptr96;
      var $102=HEAP32[(($101)>>2)];
      $neighbor=$102;
      var $tobool97=(($102)|0)!=0;
      if ($tobool97) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $103=$neighbor;
      var $104=$103;
      var $bf_field_offs99=(($104+76)|0);
      var $105=$bf_field_offs99;
      var $106=HEAP32[(($105)>>2)];
      var $107=$106 & -32769;
      var $108=$107 | 32768;
      HEAP32[(($105)>>2)]=$108;
      label = 48; break;
    case 50: 
      label = 51; break;
    case 51: 
      _qh_settempfree($tricenters);
      var $109=HEAP32[(($centers)>>2)];
      STACKTOP = __stackBase__;
      return $109;
    default: assert(0, "bad label: " + label);
  }

}
_qh_detvridge3["X"]=1;

function _qh_eachvoronoi($fp, $printvridge, $atvertex, $visitall, $innerouter, $inorder) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $printvridge_addr;
      var $atvertex_addr;
      var $visitall_addr;
      var $innerouter_addr;
      var $inorder_addr;
      var $unbounded;
      var $count;
      var $neighbor;
      var $neighborp;
      var $neighborA;
      var $neighborAp;
      var $centers=__stackBase__;
      var $tricenters=(__stackBase__)+(4);
      var $vertex;
      var $vertexp;
      var $firstinf;
      var $numfacets;
      var $totridges;
      $fp_addr=$fp;
      $printvridge_addr=$printvridge;
      $atvertex_addr=$atvertex;
      $visitall_addr=$visitall;
      $innerouter_addr=$innerouter;
      $inorder_addr=$inorder;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($tricenters)>>2)]=$call;
      var $1=HEAP32[((((5248996)|0))>>2)];
      $numfacets=$1;
      $totridges=0;
      var $2=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$2 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $3=$bf_value & 2147483647;
      var $4=HEAP32[(((((5249160)|0)))>>2)];
      var $5=$4 & -2147483648;
      var $6=$5 | $3;
      HEAP32[(((((5249160)|0)))>>2)]=$6;
      var $7=$atvertex_addr;
      var $8=$7;
      var $bf_field_offs=(($8+20)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & -268435457;
      var $12=$11 | 268435456;
      HEAP32[(($9)>>2)]=$12;
      var $13=$visitall_addr;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $14=HEAP32[((((5248984)|0))>>2)];
      $vertex=$14;
      label = 4; break;
    case 4: 
      var $15=$vertex;
      var $tobool1=(($15)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $18 = 0;label = 6; break; }
    case 5: 
      var $16=$vertex;
      var $next=(($16)|0);
      var $17=HEAP32[(($next)>>2)];
      var $tobool2=(($17)|0)!=0;
      var $18 = $tobool2;label = 6; break;
    case 6: 
      var $18;
      if ($18) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $19=$vertex;
      var $20=$19;
      var $bf_field_offs3=(($20+20)|0);
      var $21=$bf_field_offs3;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & -268435457;
      HEAP32[(($21)>>2)]=$23;
      label = 8; break;
    case 8: 
      var $24=$vertex;
      var $next4=(($24)|0);
      var $25=HEAP32[(($next4)>>2)];
      $vertex=$25;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 
      $neighbor=0;
      var $26=$atvertex_addr;
      var $neighbors=(($26+12)|0);
      var $27=HEAP32[(($neighbors)>>2)];
      var $tobool5=(($27)|0)!=0;
      if ($tobool5) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $28=$atvertex_addr;
      var $neighbors7=(($28+12)|0);
      var $29=HEAP32[(($neighbors7)>>2)];
      var $e=(($29+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $30=$p;
      $neighborp=$30;
      label = 12; break;
    case 12: 
      var $31=$neighborp;
      var $incdec_ptr=(($31+4)|0);
      $neighborp=$incdec_ptr;
      var $32=HEAP32[(($31)>>2)];
      $neighbor=$32;
      var $tobool9=(($32)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $33=$neighbor;
      var $visitid=(($33+68)|0);
      var $34=HEAP32[(($visitid)>>2)];
      var $35=$numfacets;
      var $cmp=(($34)>>>0) < (($35)>>>0);
      if ($cmp) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $36=$neighbor;
      var $37=$36;
      var $bf_field_offs12=(($37+76)|0);
      var $38=$bf_field_offs12;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & -16385;
      var $41=$40 | 16384;
      HEAP32[(($38)>>2)]=$41;
      label = 15; break;
    case 15: 
      label = 12; break;
    case 16: 
      label = 17; break;
    case 17: 
      $neighbor=0;
      var $42=$atvertex_addr;
      var $neighbors16=(($42+12)|0);
      var $43=HEAP32[(($neighbors16)>>2)];
      var $tobool17=(($43)|0)!=0;
      if ($tobool17) { label = 18; break; } else { label = 65; break; }
    case 18: 
      var $44=$atvertex_addr;
      var $neighbors19=(($44+12)|0);
      var $45=HEAP32[(($neighbors19)>>2)];
      var $e20=(($45+4)|0);
      var $arrayidx21=(($e20)|0);
      var $p22=$arrayidx21;
      var $46=$p22;
      $neighborp=$46;
      label = 19; break;
    case 19: 
      var $47=$neighborp;
      var $incdec_ptr24=(($47+4)|0);
      $neighborp=$incdec_ptr24;
      var $48=HEAP32[(($47)>>2)];
      $neighbor=$48;
      var $tobool25=(($48)|0)!=0;
      if ($tobool25) { label = 20; break; } else { label = 64; break; }
    case 20: 
      var $49=$neighbor;
      var $50=$49;
      var $bf_field_offs27=(($50+76)|0);
      var $51=$bf_field_offs27;
      var $52=HEAP32[(($51)>>2)];
      var $53=$52 >>> 14;
      var $bf_clear28=$53 & 1;
      var $tobool29=(($bf_clear28)|0)!=0;
      if ($tobool29) { label = 21; break; } else { label = 63; break; }
    case 21: 
      $vertex=0;
      var $54=$neighbor;
      var $vertices=(($54+48)|0);
      var $55=HEAP32[(($vertices)>>2)];
      var $tobool31=(($55)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 62; break; }
    case 22: 
      var $56=$neighbor;
      var $vertices33=(($56+48)|0);
      var $57=HEAP32[(($vertices33)>>2)];
      var $e34=(($57+4)|0);
      var $arrayidx35=(($e34)|0);
      var $p36=$arrayidx35;
      var $58=$p36;
      $vertexp=$58;
      label = 23; break;
    case 23: 
      var $59=$vertexp;
      var $incdec_ptr38=(($59+4)|0);
      $vertexp=$incdec_ptr38;
      var $60=HEAP32[(($59)>>2)];
      $vertex=$60;
      var $tobool39=(($60)|0)!=0;
      if ($tobool39) { label = 24; break; } else { label = 61; break; }
    case 24: 
      var $61=$vertex;
      var $62=$61;
      var $bf_field_offs41=(($62+16)|0);
      var $63=$bf_field_offs41;
      var $64=HEAP32[(($63)>>2)];
      var $bf_clear42=$64 & 2147483647;
      var $65=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear43=$65 & 2147483647;
      var $cmp44=(($bf_clear42)|0)!=(($bf_clear43)|0);
      if ($cmp44) { label = 25; break; } else { label = 60; break; }
    case 25: 
      var $66=$vertex;
      var $67=$66;
      var $bf_field_offs45=(($67+20)|0);
      var $68=$bf_field_offs45;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 28;
      var $bf_clear46=$70 & 1;
      var $tobool47=(($bf_clear46)|0)!=0;
      if ($tobool47) { label = 60; break; } else { label = 26; break; }
    case 26: 
      var $71=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear49=$71 & 2147483647;
      var $72=$vertex;
      var $bf_value50=$bf_clear49 & 2147483647;
      var $73=$72;
      var $bf_field_offs51=(($73+16)|0);
      var $74=$bf_field_offs51;
      var $75=$bf_value50 & 2147483647;
      var $76=HEAP32[(($74)>>2)];
      var $77=$76 & -2147483648;
      var $78=$77 | $75;
      HEAP32[(($74)>>2)]=$78;
      $count=0;
      $firstinf=1;
      var $79=HEAP32[(($tricenters)>>2)];
      _qh_settruncate($79, 0);
      $neighborA=0;
      var $80=$vertex;
      var $neighbors52=(($80+12)|0);
      var $81=HEAP32[(($neighbors52)>>2)];
      var $tobool53=(($81)|0)!=0;
      if ($tobool53) { label = 27; break; } else { label = 41; break; }
    case 27: 
      var $82=$vertex;
      var $neighbors55=(($82+12)|0);
      var $83=HEAP32[(($neighbors55)>>2)];
      var $e56=(($83+4)|0);
      var $arrayidx57=(($e56)|0);
      var $p58=$arrayidx57;
      var $84=$p58;
      $neighborAp=$84;
      label = 28; break;
    case 28: 
      var $85=$neighborAp;
      var $incdec_ptr60=(($85+4)|0);
      $neighborAp=$incdec_ptr60;
      var $86=HEAP32[(($85)>>2)];
      $neighborA=$86;
      var $tobool61=(($86)|0)!=0;
      if ($tobool61) { label = 29; break; } else { label = 40; break; }
    case 29: 
      var $87=$neighborA;
      var $88=$87;
      var $bf_field_offs63=(($88+76)|0);
      var $89=$bf_field_offs63;
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 >>> 14;
      var $bf_clear64=$91 & 1;
      var $tobool65=(($bf_clear64)|0)!=0;
      if ($tobool65) { label = 30; break; } else { label = 39; break; }
    case 30: 
      var $92=$neighborA;
      var $visitid67=(($92+68)|0);
      var $93=HEAP32[(($visitid67)>>2)];
      var $tobool68=(($93)|0)!=0;
      if ($tobool68) { label = 31; break; } else { label = 35; break; }
    case 31: 
      var $94=$neighborA;
      var $95=$94;
      var $bf_field_offs70=(($95+76)|0);
      var $96=$bf_field_offs70;
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 >>> 9;
      var $bf_clear71=$98 & 1;
      var $tobool72=(($bf_clear71)|0)!=0;
      if ($tobool72) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $99=$neighborA;
      var $center=(($99+36)|0);
      var $100=HEAP32[(($center)>>2)];
      var $101=$100;
      var $call73=_qh_setunique($tricenters, $101);
      var $tobool74=(($call73)|0)!=0;
      if ($tobool74) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $102=$count;
      var $inc76=((($102)+(1))|0);
      $count=$inc76;
      label = 34; break;
    case 34: 
      label = 38; break;
    case 35: 
      var $103=$firstinf;
      var $tobool78=(($103)|0)!=0;
      if ($tobool78) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $104=$count;
      var $inc80=((($104)+(1))|0);
      $count=$inc80;
      $firstinf=0;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 28; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $105=$count;
      var $106=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($106)-(1))|0);
      var $cmp86=(($105)|0) >= (($sub)|0);
      if ($cmp86) { label = 42; break; } else { label = 59; break; }
    case 42: 
      var $107=$firstinf;
      var $tobool88=(($107)|0)!=0;
      if ($tobool88) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $108=$innerouter_addr;
      var $cmp90=(($108)|0)==2;
      if ($cmp90) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 23; break;
    case 45: 
      $unbounded=0;
      label = 49; break;
    case 46: 
      var $109=$innerouter_addr;
      var $cmp94=(($109)|0)==1;
      if ($cmp94) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 23; break;
    case 48: 
      $unbounded=1;
      label = 49; break;
    case 49: 
      var $110=$totridges;
      var $inc98=((($110)+(1))|0);
      $totridges=$inc98;
      var $111=HEAP32[((((5247040)|0))>>2)];
      var $cmp99=(($111)|0) >= 4;
      if ($cmp99) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $112=HEAP32[((((5248924)|0))>>2)];
      var $113=$count;
      var $114=$atvertex_addr;
      var $point=(($114+8)|0);
      var $115=HEAP32[(($point)>>2)];
      var $call101=_qh_pointid($115);
      var $116=$vertex;
      var $point102=(($116+8)|0);
      var $117=HEAP32[(($point102)>>2)];
      var $call103=_qh_pointid($117);
      _qh_fprintf($112, 4017, ((5301100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$113,HEAP32[(((tempInt)+(4))>>2)]=$call101,HEAP32[(((tempInt)+(8))>>2)]=$call103,tempInt));
      label = 51; break;
    case 51: 
      var $118=$printvridge_addr;
      var $tobool105=(($118)|0)!=0;
      if ($tobool105) { label = 52; break; } else { label = 58; break; }
    case 52: 
      var $119=$fp_addr;
      var $tobool107=(($119)|0)!=0;
      if ($tobool107) { label = 53; break; } else { label = 58; break; }
    case 53: 
      var $120=$inorder_addr;
      var $tobool109=(($120)|0)!=0;
      if ($tobool109) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $121=HEAP32[((((5247508)|0))>>2)];
      var $cmp111=(($121)|0)==4;
      if ($cmp111) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $122=$atvertex_addr;
      var $123=$vertex;
      var $call113=_qh_detvridge3($122, $123);
      HEAP32[(($centers)>>2)]=$call113;
      label = 57; break;
    case 56: 
      var $124=$vertex;
      var $call115=_qh_detvridge($124);
      HEAP32[(($centers)>>2)]=$call115;
      label = 57; break;
    case 57: 
      var $125=$printvridge_addr;
      var $126=$fp_addr;
      var $127=$atvertex_addr;
      var $128=$vertex;
      var $129=HEAP32[(($centers)>>2)];
      var $130=$unbounded;
      FUNCTION_TABLE[$125]($126, $127, $128, $129, $130);
      _qh_settempfree($centers);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 23; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 19; break;
    case 64: 
      label = 65; break;
    case 65: 
      $neighbor=0;
      var $131=$atvertex_addr;
      var $neighbors125=(($131+12)|0);
      var $132=HEAP32[(($neighbors125)>>2)];
      var $tobool126=(($132)|0)!=0;
      if ($tobool126) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $133=$atvertex_addr;
      var $neighbors128=(($133+12)|0);
      var $134=HEAP32[(($neighbors128)>>2)];
      var $e129=(($134+4)|0);
      var $arrayidx130=(($e129)|0);
      var $p131=$arrayidx130;
      var $135=$p131;
      $neighborp=$135;
      label = 67; break;
    case 67: 
      var $136=$neighborp;
      var $incdec_ptr133=(($136+4)|0);
      $neighborp=$incdec_ptr133;
      var $137=HEAP32[(($136)>>2)];
      $neighbor=$137;
      var $tobool134=(($137)|0)!=0;
      if ($tobool134) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $138=$neighbor;
      var $139=$138;
      var $bf_field_offs136=(($139+76)|0);
      var $140=$bf_field_offs136;
      var $141=HEAP32[(($140)>>2)];
      var $142=$141 & -16385;
      HEAP32[(($140)>>2)]=$142;
      label = 67; break;
    case 69: 
      label = 70; break;
    case 70: 
      _qh_settempfree($tricenters);
      var $143=$totridges;
      STACKTOP = __stackBase__;
      return $143;
    default: assert(0, "bad label: " + label);
  }

}
_qh_eachvoronoi["X"]=1;

function _qh_facet2point($facet, $point0, $point1, $mindist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $point0_addr;
      var $point1_addr;
      var $mindist_addr;
      var $vertex0;
      var $vertex1;
      var $dist=__stackBase__;
      $facet_addr=$facet;
      $point0_addr=$point0;
      $point1_addr=$point1;
      $mindist_addr=$mindist;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 12;
      var $bf_clear=$4 & 1;
      var $xor=$bf_clear ^ 0;
      var $tobool=(($xor)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$facet_addr;
      var $vertices=(($5+48)|0);
      var $6=HEAP32[(($vertices)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      $vertex0=$8;
      var $9=$facet_addr;
      var $vertices1=(($9+48)|0);
      var $10=HEAP32[(($vertices1)>>2)];
      var $e2=(($10+4)|0);
      var $arrayidx3=(($e2+4)|0);
      var $p4=$arrayidx3;
      var $11=HEAP32[(($p4)>>2)];
      var $12=$11;
      $vertex1=$12;
      label = 5; break;
    case 4: 
      var $13=$facet_addr;
      var $vertices5=(($13+48)|0);
      var $14=HEAP32[(($vertices5)>>2)];
      var $e6=(($14+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $15=HEAP32[(($p8)>>2)];
      var $16=$15;
      $vertex1=$16;
      var $17=$facet_addr;
      var $vertices9=(($17+48)|0);
      var $18=HEAP32[(($vertices9)>>2)];
      var $e10=(($18+4)|0);
      var $arrayidx11=(($e10+4)|0);
      var $p12=$arrayidx11;
      var $19=HEAP32[(($p12)>>2)];
      var $20=$19;
      $vertex0=$20;
      label = 5; break;
    case 5: 
      var $21=HEAP32[(((((5243428)|0)))>>2)];
      var $add=((($21)+(2))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$add;
      var $22=$vertex0;
      var $point=(($22+8)|0);
      var $23=HEAP32[(($point)>>2)];
      var $24=$facet_addr;
      _qh_distplane($23, $24, $dist);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $26=$mindist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$25,HEAP32[(($26)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($26)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $27=$vertex0;
      var $point13=(($27+8)|0);
      var $28=HEAP32[(($point13)>>2)];
      var $29=$facet_addr;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_projectpoint($28, $29, $30);
      var $31=$point0_addr;
      HEAP32[(($31)>>2)]=$call;
      var $32=$vertex1;
      var $point14=(($32+8)|0);
      var $33=HEAP32[(($point14)>>2)];
      var $34=$facet_addr;
      _qh_distplane($33, $34, $dist);
      var $35=$mindist_addr;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$36 > $37;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $39=$mindist_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[(($39)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($39)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      var $40=$vertex1;
      var $point17=(($40+8)|0);
      var $41=HEAP32[(($point17)>>2)];
      var $42=$facet_addr;
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call18=_qh_projectpoint($41, $42, $43);
      var $44=$point1_addr;
      HEAP32[(($44)>>2)]=$call18;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facet2point["X"]=1;

function _qh_facetvertices($facetlist, $facets, $allfacets) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facets_addr;
      var $allfacets_addr;
      var $vertices=__stackBase__;
      var $facet;
      var $facetp;
      var $vertex;
      var $vertexp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $allfacets_addr=$allfacets;
      var $0=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$0 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $1=$bf_value & 2147483647;
      var $2=HEAP32[(((((5249160)|0)))>>2)];
      var $3=$2 & -2147483648;
      var $4=$3 | $1;
      HEAP32[(((((5249160)|0)))>>2)]=$4;
      var $5=$facetlist_addr;
      var $6=HEAP32[((((5248944)|0))>>2)];
      var $cmp=(($5)|0)==(($6)|0);
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $7=$allfacets_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $8=$facets_addr;
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 12; break; } else { label = 5; break; }
    case 5: 
      var $9=HEAP32[((((5249000)|0))>>2)];
      var $call=_qh_settemp($9);
      HEAP32[(($vertices)>>2)]=$call;
      var $10=HEAP32[((((5248984)|0))>>2)];
      $vertex=$10;
      label = 6; break;
    case 6: 
      var $11=$vertex;
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 7; break; } else { var $14 = 0;label = 8; break; }
    case 7: 
      var $12=$vertex;
      var $next=(($12)|0);
      var $13=HEAP32[(($next)>>2)];
      var $tobool4=(($13)|0)!=0;
      var $14 = $tobool4;label = 8; break;
    case 8: 
      var $14;
      if ($14) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $15=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear5=$15 & 2147483647;
      var $16=$vertex;
      var $bf_value6=$bf_clear5 & 2147483647;
      var $17=$16;
      var $bf_field_offs=(($17+16)|0);
      var $18=$bf_field_offs;
      var $19=$bf_value6 & 2147483647;
      var $20=HEAP32[(($18)>>2)];
      var $21=$20 & -2147483648;
      var $22=$21 | $19;
      HEAP32[(($18)>>2)]=$22;
      var $23=$vertex;
      var $24=$23;
      _qh_setappend($vertices, $24);
      label = 10; break;
    case 10: 
      var $25=$vertex;
      var $next7=(($25)|0);
      var $26=HEAP32[(($next7)>>2)];
      $vertex=$26;
      label = 6; break;
    case 11: 
      label = 31; break;
    case 12: 
      var $27=HEAP32[((((5248940)|0))>>2)];
      var $call8=_qh_settemp($27);
      HEAP32[(($vertices)>>2)]=$call8;
      var $28=$facetlist_addr;
      var $tobool9=(($28)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 30; break; }
    case 13: 
      var $29=$facetlist_addr;
      $facet=$29;
      label = 14; break;
    case 14: 
      var $30=$facet;
      var $tobool12=(($30)|0)!=0;
      if ($tobool12) { label = 15; break; } else { var $33 = 0;label = 16; break; }
    case 15: 
      var $31=$facet;
      var $next14=(($31+44)|0);
      var $32=HEAP32[(($next14)>>2)];
      var $tobool15=(($32)|0)!=0;
      var $33 = $tobool15;label = 16; break;
    case 16: 
      var $33;
      if ($33) { label = 17; break; } else { label = 29; break; }
    case 17: 
      var $34=$allfacets_addr;
      var $tobool18=(($34)|0)!=0;
      if ($tobool18) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $35=$facet;
      var $call20=_qh_skipfacet($35);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 28; break;
    case 20: 
      $vertex=0;
      var $36=$facet;
      var $vertices23=(($36+48)|0);
      var $37=HEAP32[(($vertices23)>>2)];
      var $tobool24=(($37)|0)!=0;
      if ($tobool24) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $38=$facet;
      var $vertices26=(($38+48)|0);
      var $39=HEAP32[(($vertices26)>>2)];
      var $e=(($39+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $40=$p;
      $vertexp=$40;
      label = 22; break;
    case 22: 
      var $41=$vertexp;
      var $incdec_ptr=(($41+4)|0);
      $vertexp=$incdec_ptr;
      var $42=HEAP32[(($41)>>2)];
      $vertex=$42;
      var $tobool28=(($42)|0)!=0;
      if ($tobool28) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $43=$vertex;
      var $44=$43;
      var $bf_field_offs30=(($44+16)|0);
      var $45=$bf_field_offs30;
      var $46=HEAP32[(($45)>>2)];
      var $bf_clear31=$46 & 2147483647;
      var $47=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear32=$47 & 2147483647;
      var $cmp33=(($bf_clear31)|0)!=(($bf_clear32)|0);
      if ($cmp33) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $48=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear35=$48 & 2147483647;
      var $49=$vertex;
      var $bf_value36=$bf_clear35 & 2147483647;
      var $50=$49;
      var $bf_field_offs37=(($50+16)|0);
      var $51=$bf_field_offs37;
      var $52=$bf_value36 & 2147483647;
      var $53=HEAP32[(($51)>>2)];
      var $54=$53 & -2147483648;
      var $55=$54 | $52;
      HEAP32[(($51)>>2)]=$55;
      var $56=$vertex;
      var $57=$56;
      _qh_setappend($vertices, $57);
      label = 25; break;
    case 25: 
      label = 22; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $58=$facet;
      var $next42=(($58+44)|0);
      var $59=HEAP32[(($next42)>>2)];
      $facet=$59;
      label = 14; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      $facet=0;
      var $60=$facets_addr;
      var $tobool46=(($60)|0)!=0;
      if ($tobool46) { label = 32; break; } else { label = 46; break; }
    case 32: 
      var $61=$facets_addr;
      var $e48=(($61+4)|0);
      var $arrayidx49=(($e48)|0);
      var $p50=$arrayidx49;
      var $62=$p50;
      $facetp=$62;
      label = 33; break;
    case 33: 
      var $63=$facetp;
      var $incdec_ptr52=(($63+4)|0);
      $facetp=$incdec_ptr52;
      var $64=HEAP32[(($63)>>2)];
      $facet=$64;
      var $tobool53=(($64)|0)!=0;
      if ($tobool53) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $65=$allfacets_addr;
      var $tobool55=(($65)|0)!=0;
      if ($tobool55) { label = 37; break; } else { label = 35; break; }
    case 35: 
      var $66=$facet;
      var $call57=_qh_skipfacet($66);
      var $tobool58=(($call57)|0)!=0;
      if ($tobool58) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 33; break;
    case 37: 
      $vertex=0;
      var $67=$facet;
      var $vertices61=(($67+48)|0);
      var $68=HEAP32[(($vertices61)>>2)];
      var $tobool62=(($68)|0)!=0;
      if ($tobool62) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $69=$facet;
      var $vertices64=(($69+48)|0);
      var $70=HEAP32[(($vertices64)>>2)];
      var $e65=(($70+4)|0);
      var $arrayidx66=(($e65)|0);
      var $p67=$arrayidx66;
      var $71=$p67;
      $vertexp=$71;
      label = 39; break;
    case 39: 
      var $72=$vertexp;
      var $incdec_ptr69=(($72+4)|0);
      $vertexp=$incdec_ptr69;
      var $73=HEAP32[(($72)>>2)];
      $vertex=$73;
      var $tobool70=(($73)|0)!=0;
      if ($tobool70) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $74=$vertex;
      var $75=$74;
      var $bf_field_offs72=(($75+16)|0);
      var $76=$bf_field_offs72;
      var $77=HEAP32[(($76)>>2)];
      var $bf_clear73=$77 & 2147483647;
      var $78=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear74=$78 & 2147483647;
      var $cmp75=(($bf_clear73)|0)!=(($bf_clear74)|0);
      if ($cmp75) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $79=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear77=$79 & 2147483647;
      var $80=$vertex;
      var $bf_value78=$bf_clear77 & 2147483647;
      var $81=$80;
      var $bf_field_offs79=(($81+16)|0);
      var $82=$bf_field_offs79;
      var $83=$bf_value78 & 2147483647;
      var $84=HEAP32[(($82)>>2)];
      var $85=$84 & -2147483648;
      var $86=$85 | $83;
      HEAP32[(($82)>>2)]=$86;
      var $87=$vertex;
      var $88=$87;
      _qh_setappend($vertices, $88);
      label = 42; break;
    case 42: 
      label = 39; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 33; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $89=HEAP32[(($vertices)>>2)];
      STACKTOP = __stackBase__;
      return $89;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facetvertices["X"]=1;

function _qh_geomplanes($facet, $outerplane, $innerplane) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $outerplane_addr;
      var $innerplane_addr;
      var $radius;
      $facet_addr=$facet;
      $outerplane_addr=$outerplane;
      $innerplane_addr=$innerplane;
      var $0=HEAP32[((((5247084)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$1 < 8.988465674311579e+307;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$facet_addr;
      var $3=$outerplane_addr;
      var $4=$innerplane_addr;
      _qh_outerinner($2, $3, $4);
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $radius=$5;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp1=$6 < 8.988465674311579e+307;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $8=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($8)|0);
      var $call=Math.sqrt($conv);
      var $mul=($7)*($call);
      var $9=$radius;
      var $sub=($9)-($mul);
      $radius=$sub;
      label = 6; break;
    case 6: 
      var $10=$radius;
      var $11=$outerplane_addr;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($12)+($10);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($11)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($11)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $13=$radius;
      var $14=$innerplane_addr;
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub3=($15)-($13);
      (HEAPF64[(tempDoublePtr)>>3]=$sub3,HEAP32[(($14)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($14)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $16=HEAP32[((((5247152)|0))>>2)];
      var $tobool4=(($16)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $17=HEAP32[((((5247312)|0))>>2)];
      var $tobool6=(($17)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul8=($18)*(0.002);
      var $19=$outerplane_addr;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add9=($20)+($mul8);
      (HEAPF64[(tempDoublePtr)>>3]=$add9,HEAP32[(($19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul10=($21)*(0.002);
      var $22=$innerplane_addr;
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($22)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($22)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub11=($23)-($mul10);
      (HEAPF64[(tempDoublePtr)>>3]=$sub11,HEAP32[(($22)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($22)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 9: 
      label = 11; break;
    case 10: 
      var $24=$outerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($24)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($24)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $25=$innerplane_addr;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($25)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($25)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_geomplanes["X"]=1;

function _qh_markkeep($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $facetp;
      var $facets=__stackBase__;
      var $size;
      var $count;
      $facetlist_addr=$facetlist;
      var $0=HEAP32[((((5248996)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($facets)>>2)]=$call;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=HEAP32[((((5247044)|0))>>2)];
      var $4=HEAP32[((((5247056)|0))>>2)];
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($2, 2006, ((5298368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$4,(HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 4; break;
    case 4: 
      var $6=$facetlist_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $7=$facetlist_addr;
      $facet=$7;
      label = 6; break;
    case 6: 
      var $8=$facet;
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $11 = 0;label = 8; break; }
    case 7: 
      var $9=$facet;
      var $next=(($9+44)|0);
      var $10=HEAP32[(($next)>>2)];
      var $tobool3=(($10)|0)!=0;
      var $11 = $tobool3;label = 8; break;
    case 8: 
      var $11;
      if ($11) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $12=$facet;
      var $13=$12;
      var $bf_field_offs=(($13+76)|0);
      var $14=$bf_field_offs;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 11;
      var $bf_clear=$16 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      if ($tobool4) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $17=$facet;
      var $18=$17;
      var $bf_field_offs5=(($18+76)|0);
      var $19=$bf_field_offs5;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 >>> 19;
      var $bf_clear6=$21 & 1;
      var $tobool7=(($bf_clear6)|0)!=0;
      if ($tobool7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=$facet;
      var $23=$22;
      _qh_setappend($facets, $23);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $24=$facet;
      var $next10=(($24+44)|0);
      var $25=HEAP32[(($next10)>>2)];
      $facet=$25;
      label = 6; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $26=HEAP32[(($facets)>>2)];
      var $call12=_qh_setsize($26);
      $size=$call12;
      var $27=HEAP32[((((5247044)|0))>>2)];
      var $tobool13=(($27)|0)!=0;
      if ($tobool13) { label = 16; break; } else { label = 26; break; }
    case 16: 
      var $28=HEAP32[(($facets)>>2)];
      var $e=(($28+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $29=$p;
      var $30=$29;
      var $31=$size;
      _qsort($30, $31, 4, 6);
      var $32=$size;
      var $33=HEAP32[((((5247044)|0))>>2)];
      var $sub=((($32)-($33))|0);
      $count=$sub;
      var $cmp15=(($sub)|0) > 0;
      if ($cmp15) { label = 17; break; } else { label = 25; break; }
    case 17: 
      $facet=0;
      var $34=HEAP32[(($facets)>>2)];
      var $tobool17=(($34)|0)!=0;
      if ($tobool17) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $35=HEAP32[(($facets)>>2)];
      var $e19=(($35+4)|0);
      var $arrayidx20=(($e19)|0);
      var $p21=$arrayidx20;
      var $36=$p21;
      $facetp=$36;
      label = 19; break;
    case 19: 
      var $37=$facetp;
      var $incdec_ptr=(($37+4)|0);
      $facetp=$incdec_ptr;
      var $38=HEAP32[(($37)>>2)];
      $facet=$38;
      var $tobool23=(($38)|0)!=0;
      if ($tobool23) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $39=$facet;
      var $40=$39;
      var $bf_field_offs25=(($40+76)|0);
      var $41=$bf_field_offs25;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & -524289;
      HEAP32[(($41)>>2)]=$43;
      var $44=$count;
      var $dec=((($44)-(1))|0);
      $count=$dec;
      var $cmp26=(($dec)|0)==0;
      if ($cmp26) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      label = 19; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $45=HEAP32[((((5247056)|0))>>2)];
      var $tobool33=(($45)|0)!=0;
      if ($tobool33) { label = 27; break; } else { label = 37; break; }
    case 27: 
      var $46=HEAP32[(($facets)>>2)];
      var $e35=(($46+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      var $47=$p37;
      var $48=$47;
      var $49=$size;
      _qsort($48, $49, 4, 16);
      var $50=$size;
      var $51=HEAP32[((((5247056)|0))>>2)];
      var $sub38=((($50)-($51))|0);
      $count=$sub38;
      var $cmp39=(($sub38)|0) > 0;
      if ($cmp39) { label = 28; break; } else { label = 36; break; }
    case 28: 
      $facet=0;
      var $52=HEAP32[(($facets)>>2)];
      var $tobool41=(($52)|0)!=0;
      if ($tobool41) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $53=HEAP32[(($facets)>>2)];
      var $e43=(($53+4)|0);
      var $arrayidx44=(($e43)|0);
      var $p45=$arrayidx44;
      var $54=$p45;
      $facetp=$54;
      label = 30; break;
    case 30: 
      var $55=$facetp;
      var $incdec_ptr47=(($55+4)|0);
      $facetp=$incdec_ptr47;
      var $56=HEAP32[(($55)>>2)];
      $facet=$56;
      var $tobool48=(($56)|0)!=0;
      if ($tobool48) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $57=$facet;
      var $58=$57;
      var $bf_field_offs50=(($58+76)|0);
      var $59=$bf_field_offs50;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60 & -524289;
      HEAP32[(($59)>>2)]=$61;
      var $62=$count;
      var $dec51=((($62)-(1))|0);
      $count=$dec51;
      var $cmp52=(($dec51)|0)==0;
      if ($cmp52) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      label = 30; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp59=$63 < 8.988465674311579e+307;
      if ($cmp59) { label = 38; break; } else { label = 47; break; }
    case 38: 
      $facet=0;
      var $64=HEAP32[(($facets)>>2)];
      var $tobool61=(($64)|0)!=0;
      if ($tobool61) { label = 39; break; } else { label = 46; break; }
    case 39: 
      var $65=HEAP32[(($facets)>>2)];
      var $e63=(($65+4)|0);
      var $arrayidx64=(($e63)|0);
      var $p65=$arrayidx64;
      var $66=$p65;
      $facetp=$66;
      label = 40; break;
    case 40: 
      var $67=$facetp;
      var $incdec_ptr67=(($67+4)|0);
      $facetp=$incdec_ptr67;
      var $68=HEAP32[(($67)>>2)];
      $facet=$68;
      var $tobool68=(($68)|0)!=0;
      if ($tobool68) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $69=$facet;
      var $70=$69;
      var $bf_field_offs70=(($70+76)|0);
      var $71=$bf_field_offs70;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72 >>> 20;
      var $bf_clear71=$73 & 1;
      var $tobool72=(($bf_clear71)|0)!=0;
      if ($tobool72) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $74=$facet;
      var $f=(($74+28)|0);
      var $area=$f;
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp73=$75 < $76;
      if ($cmp73) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $77=$facet;
      var $78=$77;
      var $bf_field_offs75=(($78+76)|0);
      var $79=$bf_field_offs75;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 & -524289;
      HEAP32[(($79)>>2)]=$81;
      label = 44; break;
    case 44: 
      label = 40; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      _qh_settempfree($facets);
      $count=0;
      var $82=$facetlist_addr;
      var $tobool80=(($82)|0)!=0;
      if ($tobool80) { label = 48; break; } else { label = 57; break; }
    case 48: 
      var $83=$facetlist_addr;
      $facet=$83;
      label = 49; break;
    case 49: 
      var $84=$facet;
      var $tobool83=(($84)|0)!=0;
      if ($tobool83) { label = 50; break; } else { var $87 = 0;label = 51; break; }
    case 50: 
      var $85=$facet;
      var $next85=(($85+44)|0);
      var $86=HEAP32[(($next85)>>2)];
      var $tobool86=(($86)|0)!=0;
      var $87 = $tobool86;label = 51; break;
    case 51: 
      var $87;
      if ($87) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $88=$facet;
      var $89=$88;
      var $bf_field_offs89=(($89+76)|0);
      var $90=$bf_field_offs89;
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 >>> 19;
      var $bf_clear90=$92 & 1;
      var $tobool91=(($bf_clear90)|0)!=0;
      if ($tobool91) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $93=$count;
      var $inc=((($93)+(1))|0);
      $count=$inc;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $94=$facet;
      var $next95=(($94+44)|0);
      var $95=HEAP32[(($next95)>>2)];
      $facet=$95;
      label = 49; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $96=$count;
      HEAP32[((((5249008)|0))>>2)]=$96;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_markkeep["X"]=1;

function _qh_markvoronoi($facetlist, $facets, $printall, $isLowerp, $numcentersp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $isLowerp_addr;
      var $numcentersp_addr;
      var $numcenters;
      var $facet;
      var $facetp;
      var $vertices;
      var $isLower;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $isLowerp_addr=$isLowerp;
      $numcentersp_addr=$numcentersp;
      $numcenters=0;
      $isLower=0;
      var $0=HEAP32[((((5249132)|0))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[((((5249132)|0))>>2)]=$inc;
      _qh_clearcenters(1);
      _qh_vertexneighbors();
      var $call=_qh_pointvertex();
      $vertices=$call;
      var $1=HEAP32[((((5246960)|0))>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5247516)|0))>>2)];
      var $sub=((($2)-(1))|0);
      var $3=$vertices;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($sub<<2))|0);
      var $p=$arrayidx;
      HEAP32[(($p)>>2)]=0;
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5249156)|0))>>2)];
      var $inc1=((($4)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc1;
      var $5=HEAP32[((((5249156)|0))>>2)];
      var $6=HEAP32[((((5248996)|0))>>2)];
      var $cmp=(($5)>>>0) < (($6)>>>0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=HEAP32[((((5248996)|0))>>2)];
      HEAP32[((((5249156)|0))>>2)]=$7;
      label = 6; break;
    case 6: 
      var $8=$facetlist_addr;
      var $tobool4=(($8)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 19; break; }
    case 7: 
      var $9=$facetlist_addr;
      $facet=$9;
      label = 8; break;
    case 8: 
      var $10=$facet;
      var $tobool6=(($10)|0)!=0;
      if ($tobool6) { label = 9; break; } else { var $13 = 0;label = 10; break; }
    case 9: 
      var $11=$facet;
      var $next=(($11+44)|0);
      var $12=HEAP32[(($next)>>2)];
      var $tobool7=(($12)|0)!=0;
      var $13 = $tobool7;label = 10; break;
    case 10: 
      var $13;
      if ($13) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $14=$printall_addr;
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $15=$facet;
      var $call9=_qh_skipfacet($15);
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $16=$facet;
      var $17=$16;
      var $bf_field_offs=(($17+76)|0);
      var $18=$bf_field_offs;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 17;
      var $bf_clear=$20 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 15; break; } else { label = 14; break; }
    case 14: 
      $isLower=1;
      label = 18; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $21=$facet;
      var $next16=(($21+44)|0);
      var $22=HEAP32[(($next16)>>2)];
      $facet=$22;
      label = 8; break;
    case 18: 
      label = 19; break;
    case 19: 
      $facet=0;
      var $23=$facets_addr;
      var $tobool18=(($23)|0)!=0;
      if ($tobool18) { label = 20; break; } else { label = 29; break; }
    case 20: 
      var $24=$facets_addr;
      var $e20=(($24+4)|0);
      var $arrayidx21=(($e20)|0);
      var $p22=$arrayidx21;
      var $25=$p22;
      $facetp=$25;
      label = 21; break;
    case 21: 
      var $26=$facetp;
      var $incdec_ptr=(($26+4)|0);
      $facetp=$incdec_ptr;
      var $27=HEAP32[(($26)>>2)];
      $facet=$27;
      var $tobool24=(($27)|0)!=0;
      if ($tobool24) { label = 22; break; } else { label = 28; break; }
    case 22: 
      var $28=$printall_addr;
      var $tobool26=(($28)|0)!=0;
      if ($tobool26) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $29=$facet;
      var $call28=_qh_skipfacet($29);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 27; break; } else { label = 24; break; }
    case 24: 
      var $30=$facet;
      var $31=$30;
      var $bf_field_offs31=(($31+76)|0);
      var $32=$bf_field_offs31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 17;
      var $bf_clear32=$34 & 1;
      var $tobool33=(($bf_clear32)|0)!=0;
      if ($tobool33) { label = 26; break; } else { label = 25; break; }
    case 25: 
      $isLower=1;
      label = 28; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 21; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $35=HEAP32[((((5248944)|0))>>2)];
      $facet=$35;
      label = 30; break;
    case 30: 
      var $36=$facet;
      var $tobool40=(($36)|0)!=0;
      if ($tobool40) { label = 31; break; } else { var $39 = 0;label = 32; break; }
    case 31: 
      var $37=$facet;
      var $next42=(($37+44)|0);
      var $38=HEAP32[(($next42)>>2)];
      var $tobool43=(($38)|0)!=0;
      var $39 = $tobool43;label = 32; break;
    case 32: 
      var $39;
      if ($39) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $40=$facet;
      var $normal=(($40+24)|0);
      var $41=HEAP32[(($normal)>>2)];
      var $tobool46=(($41)|0)!=0;
      if ($tobool46) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $42=$facet;
      var $43=$42;
      var $bf_field_offs47=(($43+76)|0);
      var $44=$bf_field_offs47;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 17;
      var $bf_clear48=$46 & 1;
      var $47=$isLower;
      var $cmp49=(($bf_clear48)|0)==(($47)|0);
      if ($cmp49) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $48=$facet;
      var $visitid=(($48+68)|0);
      HEAP32[(($visitid)>>2)]=0;
      label = 37; break;
    case 36: 
      var $49=HEAP32[((((5249156)|0))>>2)];
      var $50=$facet;
      var $visitid51=(($50+68)|0);
      HEAP32[(($visitid51)>>2)]=$49;
      label = 37; break;
    case 37: 
      var $51=$facet;
      var $52=$51;
      var $bf_field_offs53=(($52+76)|0);
      var $53=$bf_field_offs53;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -16385;
      HEAP32[(($53)>>2)]=$55;
      var $56=$facet;
      var $57=$56;
      var $bf_field_offs54=(($57+76)|0);
      var $58=$bf_field_offs54;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 & -32769;
      var $61=$60 | 32768;
      HEAP32[(($58)>>2)]=$61;
      label = 38; break;
    case 38: 
      var $62=$facet;
      var $next56=(($62+44)|0);
      var $63=HEAP32[(($next56)>>2)];
      $facet=$63;
      label = 30; break;
    case 39: 
      var $64=$numcenters;
      var $inc58=((($64)+(1))|0);
      $numcenters=$inc58;
      var $65=$facetlist_addr;
      var $tobool59=(($65)|0)!=0;
      if ($tobool59) { label = 40; break; } else { label = 50; break; }
    case 40: 
      var $66=$facetlist_addr;
      $facet=$66;
      label = 41; break;
    case 41: 
      var $67=$facet;
      var $tobool62=(($67)|0)!=0;
      if ($tobool62) { label = 42; break; } else { var $70 = 0;label = 43; break; }
    case 42: 
      var $68=$facet;
      var $next64=(($68+44)|0);
      var $69=HEAP32[(($next64)>>2)];
      var $tobool65=(($69)|0)!=0;
      var $70 = $tobool65;label = 43; break;
    case 43: 
      var $70;
      if ($70) { label = 44; break; } else { label = 49; break; }
    case 44: 
      var $71=$printall_addr;
      var $tobool68=(($71)|0)!=0;
      if ($tobool68) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $72=$facet;
      var $call70=_qh_skipfacet($72);
      var $tobool71=(($call70)|0)!=0;
      if ($tobool71) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $73=$numcenters;
      var $inc73=((($73)+(1))|0);
      $numcenters=$inc73;
      var $74=$facet;
      var $visitid74=(($74+68)|0);
      HEAP32[(($visitid74)>>2)]=$73;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $75=$facet;
      var $next77=(($75+44)|0);
      var $76=HEAP32[(($next77)>>2)];
      $facet=$76;
      label = 41; break;
    case 49: 
      label = 50; break;
    case 50: 
      $facet=0;
      var $77=$facets_addr;
      var $tobool80=(($77)|0)!=0;
      if ($tobool80) { label = 51; break; } else { label = 58; break; }
    case 51: 
      var $78=$facets_addr;
      var $e82=(($78+4)|0);
      var $arrayidx83=(($e82)|0);
      var $p84=$arrayidx83;
      var $79=$p84;
      $facetp=$79;
      label = 52; break;
    case 52: 
      var $80=$facetp;
      var $incdec_ptr86=(($80+4)|0);
      $facetp=$incdec_ptr86;
      var $81=HEAP32[(($80)>>2)];
      $facet=$81;
      var $tobool87=(($81)|0)!=0;
      if ($tobool87) { label = 53; break; } else { label = 57; break; }
    case 53: 
      var $82=$printall_addr;
      var $tobool89=(($82)|0)!=0;
      if ($tobool89) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $83=$facet;
      var $call91=_qh_skipfacet($83);
      var $tobool92=(($call91)|0)!=0;
      if ($tobool92) { label = 56; break; } else { label = 55; break; }
    case 55: 
      var $84=$numcenters;
      var $inc94=((($84)+(1))|0);
      $numcenters=$inc94;
      var $85=$facet;
      var $visitid95=(($85+68)|0);
      HEAP32[(($visitid95)>>2)]=$84;
      label = 56; break;
    case 56: 
      label = 52; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $86=$isLower;
      var $87=$isLowerp_addr;
      HEAP32[(($87)>>2)]=$86;
      var $88=$numcenters;
      var $89=$numcentersp_addr;
      HEAP32[(($89)>>2)]=$88;
      var $90=HEAP32[((((5247040)|0))>>2)];
      var $cmp99=(($90)|0) >= 2;
      if ($cmp99) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $91=HEAP32[((((5248924)|0))>>2)];
      var $92=$isLower;
      var $93=$numcenters;
      _qh_fprintf($91, 2007, ((5296556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$92,HEAP32[(((tempInt)+(4))>>2)]=$93,tempInt));
      label = 60; break;
    case 60: 
      var $94=$vertices;
      STACKTOP = __stackBase__;
      return $94;
    default: assert(0, "bad label: " + label);
  }

}
_qh_markvoronoi["X"]=1;

function _qh_order_vertexneighbors($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $newset=__stackBase__;
      var $facet;
      var $neighbor;
      var $neighborp;
      $vertex_addr=$vertex;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$vertex_addr;
      var $3=$2;
      var $bf_field_offs=(($3+20)|0);
      var $4=$bf_field_offs;
      var $5=HEAP32[(($4)>>2)];
      var $bf_clear=$5 & 16777215;
      _qh_fprintf($1, 4018, ((5294872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      label = 4; break;
    case 4: 
      var $6=$vertex_addr;
      var $neighbors=(($6+12)|0);
      var $7=HEAP32[(($neighbors)>>2)];
      var $call=_qh_setsize($7);
      var $call1=_qh_settemp($call);
      HEAP32[(($newset)>>2)]=$call1;
      var $8=$vertex_addr;
      var $neighbors2=(($8+12)|0);
      var $9=HEAP32[(($neighbors2)>>2)];
      var $call3=_qh_setdellast($9);
      var $10=$call3;
      $facet=$10;
      var $11=$facet;
      var $12=$11;
      _qh_setappend($newset, $12);
      label = 5; break;
    case 5: 
      var $13=$vertex_addr;
      var $neighbors4=(($13+12)|0);
      var $14=HEAP32[(($neighbors4)>>2)];
      var $call5=_qh_setsize($14);
      var $tobool=(($call5)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 16; break; }
    case 6: 
      $neighbor=0;
      var $15=$vertex_addr;
      var $neighbors6=(($15+12)|0);
      var $16=HEAP32[(($neighbors6)>>2)];
      var $tobool7=(($16)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $17=$vertex_addr;
      var $neighbors9=(($17+12)|0);
      var $18=HEAP32[(($neighbors9)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=$p;
      $neighborp=$19;
      label = 8; break;
    case 8: 
      var $20=$neighborp;
      var $incdec_ptr=(($20+4)|0);
      $neighborp=$incdec_ptr;
      var $21=HEAP32[(($20)>>2)];
      $neighbor=$21;
      var $tobool10=(($21)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $22=$facet;
      var $neighbors11=(($22+56)|0);
      var $23=HEAP32[(($neighbors11)>>2)];
      var $24=$neighbor;
      var $25=$24;
      var $call12=_qh_setin($23, $25);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$vertex_addr;
      var $neighbors15=(($26+12)|0);
      var $27=HEAP32[(($neighbors15)>>2)];
      var $28=$neighbor;
      var $29=$28;
      var $call16=_qh_setdel($27, $29);
      var $30=$neighbor;
      var $31=$30;
      _qh_setappend($newset, $31);
      var $32=$neighbor;
      $facet=$32;
      label = 12; break;
    case 11: 
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $33=$neighbor;
      var $tobool19=(($33)|0)!=0;
      if ($tobool19) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=$vertex_addr;
      var $36=$35;
      var $bf_field_offs21=(($36+20)|0);
      var $37=$bf_field_offs21;
      var $38=HEAP32[(($37)>>2)];
      var $bf_clear22=$38 & 16777215;
      var $39=$facet;
      var $id=(($39+72)|0);
      var $40=HEAP32[(($id)>>2)];
      _qh_fprintf($34, 6066, ((5292972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear22,HEAP32[(((tempInt)+(4))>>2)]=$40,tempInt));
      var $41=$facet;
      _qh_errexit(5, $41, 0);
      label = 15; break;
    case 15: 
      label = 5; break;
    case 16: 
      var $42=$vertex_addr;
      var $neighbors24=(($42+12)|0);
      _qh_setfree($neighbors24);
      var $call25=_qh_settemppop();
      var $43=HEAP32[(($newset)>>2)];
      var $44=$vertex_addr;
      var $neighbors26=(($44+12)|0);
      HEAP32[(($neighbors26)>>2)]=$43;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_order_vertexneighbors["X"]=1;

function _qh_printafacet($fp, $format, $facet, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facet_addr;
      var $printall_addr;
      var $color=__stackBase__;
      var $offset;
      var $dist=(__stackBase__)+(32);
      var $outerplane=(__stackBase__)+(40);
      var $innerplane=(__stackBase__)+(48);
      var $zerodiv=(__stackBase__)+(56);
      var $point;
      var $normp;
      var $coordp;
      var $pointp;
      var $feasiblep;
      var $k;
      var $vertex;
      var $vertexp;
      var $neighbor;
      var $neighborp;
      var $id216;
      var $id2;
      $fp_addr=$fp;
      $format_addr=$format;
      $facet_addr=$facet;
      $printall_addr=$printall;
      var $0=$printall_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $1=$facet_addr;
      var $call=_qh_skipfacet($1);
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 125; break;
    case 5: 
      var $2=$facet_addr;
      var $3=$2;
      var $bf_field_offs=(($3+76)|0);
      var $4=$bf_field_offs;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $bf_clear=$6 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $7=HEAP32[((((5249092)|0))>>2)];
      var $tobool4=(($7)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $8=$format_addr;
      var $cmp=(($8)|0)!=5;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 125; break;
    case 9: 
      var $9=HEAP32[((((5249132)|0))>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[((((5249132)|0))>>2)]=$inc;
      var $10=$format_addr;
      if ((($10)|0)==1) {
        label = 10; break;
      }
      else if ((($10)|0)==3) {
        label = 14; break;
      }
      else if ((($10)|0)==4) {
        label = 20; break;
      }
      else if ((($10)|0)==5) {
        label = 21; break;
      }
      else if ((($10)|0)==6) {
        label = 22; break;
      }
      else if ((($10)|0)==7) {
        label = 23; break;
      }
      else if ((($10)|0)==8) {
        label = 47; break;
      }
      else if ((($10)|0)==14 | (($10)|0)==17 | (($10)|0)==25) {
        label = 48; break;
      }
      else if ((($10)|0)==9) {
        label = 58; break;
      }
      else if ((($10)|0)==16) {
        label = 59; break;
      }
      else if ((($10)|0)==11) {
        label = 60; break;
      }
      else if ((($10)|0)==12) {
        label = 61; break;
      }
      else if ((($10)|0)==15 | (($10)|0)==13) {
        label = 76; break;
      }
      else if ((($10)|0)==10) {
        label = 80; break;
      }
      else if ((($10)|0)==19) {
        label = 89; break;
      }
      else if ((($10)|0)==20) {
        label = 109; break;
      }
      else if ((($10)|0)==21) {
        label = 115; break;
      }
      else if ((($10)|0)==26) {
        label = 118; break;
      }
      else {
      label = 124; break;
      }
      
    case 10: 
      var $11=$facet_addr;
      var $12=$11;
      var $bf_field_offs8=(($12+76)|0);
      var $13=$bf_field_offs8;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 20;
      var $bf_clear9=$15 & 1;
      var $tobool10=(($bf_clear9)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $16=$fp_addr;
      var $17=$facet_addr;
      var $f=(($17+28)|0);
      var $area=$f;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($16, 9009, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $19=$fp_addr;
      _qh_fprintf($19, 9010, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 12: 
      var $20=$fp_addr;
      _qh_fprintf($20, 9011, ((5288268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      label = 125; break;
    case 14: 
      var $21=$fp_addr;
      var $22=$facet_addr;
      var $coplanarset=(($22+64)|0);
      var $23=HEAP32[(($coplanarset)>>2)];
      var $call14=_qh_setsize($23);
      _qh_fprintf($21, 9012, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call14,tempInt));
      $point=0;
      var $24=$facet_addr;
      var $coplanarset15=(($24+64)|0);
      var $25=HEAP32[(($coplanarset15)>>2)];
      var $tobool16=(($25)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $26=$facet_addr;
      var $coplanarset18=(($26+64)|0);
      var $27=HEAP32[(($coplanarset18)>>2)];
      var $e=(($27+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $28=$p;
      $pointp=$28;
      label = 16; break;
    case 16: 
      var $29=$pointp;
      var $incdec_ptr=(($29+4)|0);
      $pointp=$incdec_ptr;
      var $30=HEAP32[(($29)>>2)];
      $point=$30;
      var $tobool19=(($30)|0)!=0;
      if ($tobool19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $31=$fp_addr;
      var $32=$point;
      var $call20=_qh_pointid($32);
      _qh_fprintf($31, 9013, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call20,tempInt));
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $33=$fp_addr;
      _qh_fprintf($33, 9014, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 125; break;
    case 20: 
      var $34=$fp_addr;
      var $35=$format_addr;
      var $36=$facet_addr;
      _qh_printcenter($34, $35, 0, $36);
      label = 125; break;
    case 21: 
      var $37=$fp_addr;
      var $38=$facet_addr;
      _qh_printfacet($37, $38);
      label = 125; break;
    case 22: 
      var $39=$fp_addr;
      var $40=$facet_addr;
      _qh_printfacetheader($39, $40);
      label = 125; break;
    case 23: 
      var $41=$facet_addr;
      var $normal=(($41+24)|0);
      var $42=HEAP32[(($normal)>>2)];
      var $tobool26=(($42)|0)!=0;
      if ($tobool26) { label = 25; break; } else { label = 24; break; }
    case 24: 
      label = 125; break;
    case 25: 
      var $43=HEAP32[((((5247508)|0))>>2)];
      $k=$43;
      label = 26; break;
    case 26: 
      var $44=$k;
      var $dec=((($44)-(1))|0);
      $k=$dec;
      var $tobool30=(($44)|0)!=0;
      if ($tobool30) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $45=$k;
      var $46=$facet_addr;
      var $normal32=(($46+24)|0);
      var $47=HEAP32[(($normal32)>>2)];
      var $arrayidx33=(($47+($45<<3))|0);
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx33)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx33)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($48)+(1);
      var $div=($add)/(2);
      var $49=$k;
      var $arrayidx34=(($color+($49<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($arrayidx34)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx34)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $50=$k;
      var $arrayidx35=(($color+($50<<3))|0);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp36=$51 < -1;
      if ($cmp36) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $52=$k;
      var $arrayidx38=(($color+($52<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1,HEAP32[(($arrayidx38)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx38)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      var $53=$k;
      var $arrayidx40=(($color+($53<<3))|0);
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp41=$54 > 1;
      if ($cmp41) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $55=$k;
      var $arrayidx43=(($color+($55<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($arrayidx43)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx43)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 31: 
      label = 26; break;
    case 32: 
      var $arraydecay=(($color)|0);
      var $arraydecay46=(($color)|0);
      _qh_projectdim3($arraydecay, $arraydecay46);
      var $56=HEAP32[((((5247156)|0))>>2)];
      var $57=HEAP32[((((5247508)|0))>>2)];
      var $cmp47=(($56)|0)!=(($57)|0);
      if ($cmp47) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $arraydecay49=(($color)|0);
      _qh_normalize2($arraydecay49, 3, 1, 0, 0);
      label = 34; break;
    case 34: 
      var $58=HEAP32[((((5247508)|0))>>2)];
      var $cmp51=(($58)|0) <= 2;
      if ($cmp51) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $59=$fp_addr;
      var $60=$facet_addr;
      var $arraydecay53=(($color)|0);
      _qh_printfacet2geom($59, $60, $arraydecay53);
      label = 46; break;
    case 36: 
      var $61=HEAP32[((((5247508)|0))>>2)];
      var $cmp55=(($61)|0)==3;
      if ($cmp55) { label = 37; break; } else { label = 41; break; }
    case 37: 
      var $62=$facet_addr;
      var $63=$62;
      var $bf_field_offs57=(($63+76)|0);
      var $64=$bf_field_offs57;
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 >>> 13;
      var $bf_clear58=$66 & 1;
      var $tobool59=(($bf_clear58)|0)!=0;
      if ($tobool59) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $67=$fp_addr;
      var $68=$facet_addr;
      var $arraydecay61=(($color)|0);
      _qh_printfacet3geom_simplicial($67, $68, $arraydecay61);
      label = 40; break;
    case 39: 
      var $69=$fp_addr;
      var $70=$facet_addr;
      var $arraydecay63=(($color)|0);
      _qh_printfacet3geom_nonsimplicial($69, $70, $arraydecay63);
      label = 40; break;
    case 40: 
      label = 45; break;
    case 41: 
      var $71=$facet_addr;
      var $72=$71;
      var $bf_field_offs66=(($72+76)|0);
      var $73=$bf_field_offs66;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 >>> 13;
      var $bf_clear67=$75 & 1;
      var $tobool68=(($bf_clear67)|0)!=0;
      if ($tobool68) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $76=$fp_addr;
      var $77=$facet_addr;
      var $arraydecay70=(($color)|0);
      _qh_printfacet4geom_simplicial($76, $77, $arraydecay70);
      label = 44; break;
    case 43: 
      var $78=$fp_addr;
      var $79=$facet_addr;
      var $arraydecay72=(($color)|0);
      _qh_printfacet4geom_nonsimplicial($78, $79, $arraydecay72);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 125; break;
    case 47: 
      var $80=$fp_addr;
      var $81=$facet_addr;
      var $id=(($81+72)|0);
      var $82=HEAP32[(($id)>>2)];
      _qh_fprintf($80, 9015, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$82,tempInt));
      label = 125; break;
    case 48: 
      var $83=HEAP32[((((5247508)|0))>>2)];
      var $cmp78=(($83)|0)==3;
      if ($cmp78) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $84=$format_addr;
      var $cmp80=(($84)|0)!=25;
      if ($cmp80) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $85=$fp_addr;
      var $86=$facet_addr;
      var $87=$format_addr;
      _qh_printfacet3vertex($85, $86, $87);
      label = 57; break;
    case 51: 
      var $88=$facet_addr;
      var $89=$88;
      var $bf_field_offs83=(($89+76)|0);
      var $90=$bf_field_offs83;
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 >>> 13;
      var $bf_clear84=$92 & 1;
      var $tobool85=(($bf_clear84)|0)!=0;
      if ($tobool85) { label = 54; break; } else { label = 52; break; }
    case 52: 
      var $93=HEAP32[((((5247508)|0))>>2)];
      var $cmp86=(($93)|0)==2;
      if ($cmp86) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $94=$format_addr;
      var $cmp88=(($94)|0)==17;
      if ($cmp88) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $95=$fp_addr;
      var $96=$facet_addr;
      var $97=$format_addr;
      _qh_printfacetNvertex_simplicial($95, $96, $97);
      label = 56; break;
    case 55: 
      var $98=$fp_addr;
      var $99=$facet_addr;
      var $100=HEAP32[((((5249128)|0))>>2)];
      var $inc91=((($100)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc91;
      var $101=$format_addr;
      _qh_printfacetNvertex_nonsimplicial($98, $99, $100, $101);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 125; break;
    case 58: 
      var $102=$facet_addr;
      _qh_outerinner($102, 0, $innerplane);
      var $103=$facet_addr;
      var $offset95=(($103+16)|0);
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset95)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset95)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $105=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($104)-($105);
      $offset=$sub;
      label = 62; break;
    case 59: 
      var $106=$fp_addr;
      var $107=$facet_addr;
      var $108=$107;
      var $bf_field_offs97=(($108+76)|0);
      var $109=$bf_field_offs97;
      var $110=HEAP32[(($109)>>2)];
      var $bf_clear98=$110 & 511;
      _qh_fprintf($106, 9016, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear98,tempInt));
      label = 125; break;
    case 60: 
      var $111=$facet_addr;
      var $offset100=(($111+16)|0);
      var $112=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset100)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset100)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $offset=$112;
      label = 62; break;
    case 61: 
      var $113=$facet_addr;
      _qh_outerinner($113, $outerplane, 0);
      var $114=$facet_addr;
      var $offset102=(($114+16)|0);
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset102)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset102)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $116=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub103=($115)-($116);
      $offset=$sub103;
      label = 62; break;
    case 62: 
      var $117=$facet_addr;
      var $normal104=(($117+24)|0);
      var $118=HEAP32[(($normal104)>>2)];
      var $tobool105=(($118)|0)!=0;
      if ($tobool105) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $119=$fp_addr;
      var $120=$facet_addr;
      var $id107=(($120+72)|0);
      var $121=HEAP32[(($id107)>>2)];
      _qh_fprintf($119, 9017, ((5280248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$121,tempInt));
      label = 125; break;
    case 64: 
      var $122=HEAP32[((((5246976)|0))>>2)];
      var $tobool109=(($122)|0)!=0;
      if ($tobool109) { label = 65; break; } else { label = 70; break; }
    case 65: 
      var $123=$fp_addr;
      var $124=$offset;
      var $sub111=(-$124);
      _qh_fprintf($123, 9018, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$sub111,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $k=0;
      label = 66; break;
    case 66: 
      var $125=$k;
      var $126=HEAP32[((((5247508)|0))>>2)];
      var $cmp113=(($125)|0) < (($126)|0);
      if ($cmp113) { label = 67; break; } else { label = 69; break; }
    case 67: 
      var $127=$fp_addr;
      var $128=$k;
      var $129=$facet_addr;
      var $normal115=(($129+24)|0);
      var $130=HEAP32[(($normal115)>>2)];
      var $arrayidx116=(($130+($128<<3))|0);
      var $131=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx116)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx116)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub117=(-$131);
      _qh_fprintf($127, 9019, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$sub117,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 68; break;
    case 68: 
      var $132=$k;
      var $inc118=((($132)+(1))|0);
      $k=$inc118;
      label = 66; break;
    case 69: 
      label = 75; break;
    case 70: 
      $k=0;
      label = 71; break;
    case 71: 
      var $133=$k;
      var $134=HEAP32[((((5247508)|0))>>2)];
      var $cmp122=(($133)|0) < (($134)|0);
      if ($cmp122) { label = 72; break; } else { label = 74; break; }
    case 72: 
      var $135=$fp_addr;
      var $136=$k;
      var $137=$facet_addr;
      var $normal124=(($137+24)|0);
      var $138=HEAP32[(($normal124)>>2)];
      var $arrayidx125=(($138+($136<<3))|0);
      var $139=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx125)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx125)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($135, 9020, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$139,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 73; break;
    case 73: 
      var $140=$k;
      var $inc127=((($140)+(1))|0);
      $k=$inc127;
      label = 71; break;
    case 74: 
      var $141=$fp_addr;
      var $142=$offset;
      _qh_fprintf($141, 9021, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$142,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 75; break;
    case 75: 
      var $143=$fp_addr;
      _qh_fprintf($143, 9022, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 125; break;
    case 76: 
      var $144=HEAP32[((((5247508)|0))>>2)];
      var $cmp131=(($144)|0)==2;
      if ($cmp131) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $145=$fp_addr;
      var $146=$facet_addr;
      var $147=$format_addr;
      var $148=HEAP32[((((5249128)|0))>>2)];
      var $inc133=((($148)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc133;
      _qh_printfacet2math($145, $146, $147, $148);
      label = 79; break;
    case 78: 
      var $149=$fp_addr;
      var $150=$facet_addr;
      var $151=$format_addr;
      var $152=HEAP32[((((5249128)|0))>>2)];
      var $inc135=((($152)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc135;
      _qh_printfacet3math($149, $150, $151, $152);
      label = 79; break;
    case 79: 
      label = 125; break;
    case 80: 
      var $153=$fp_addr;
      var $154=$facet_addr;
      var $neighbors=(($154+56)|0);
      var $155=HEAP32[(($neighbors)>>2)];
      var $call138=_qh_setsize($155);
      _qh_fprintf($153, 9023, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call138,tempInt));
      $neighbor=0;
      var $156=$facet_addr;
      var $neighbors139=(($156+56)|0);
      var $157=HEAP32[(($neighbors139)>>2)];
      var $tobool140=(($157)|0)!=0;
      if ($tobool140) { label = 81; break; } else { label = 88; break; }
    case 81: 
      var $158=$facet_addr;
      var $neighbors142=(($158+56)|0);
      var $159=HEAP32[(($neighbors142)>>2)];
      var $e143=(($159+4)|0);
      var $arrayidx144=(($e143)|0);
      var $p145=$arrayidx144;
      var $160=$p145;
      $neighborp=$160;
      label = 82; break;
    case 82: 
      var $161=$neighborp;
      var $incdec_ptr147=(($161+4)|0);
      $neighborp=$incdec_ptr147;
      var $162=HEAP32[(($161)>>2)];
      $neighbor=$162;
      var $tobool148=(($162)|0)!=0;
      if ($tobool148) { label = 83; break; } else { label = 87; break; }
    case 83: 
      var $163=$fp_addr;
      var $164=$neighbor;
      var $visitid=(($164+68)|0);
      var $165=HEAP32[(($visitid)>>2)];
      var $tobool150=(($165)|0)!=0;
      if ($tobool150) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $166=$neighbor;
      var $visitid151=(($166+68)|0);
      var $167=HEAP32[(($visitid151)>>2)];
      var $sub152=((($167)-(1))|0);
      var $cond = $sub152;label = 86; break;
    case 85: 
      var $168=$neighbor;
      var $id153=(($168+72)|0);
      var $169=HEAP32[(($id153)>>2)];
      var $sub154=(((-$169))|0);
      var $cond = $sub154;label = 86; break;
    case 86: 
      var $cond;
      _qh_fprintf($163, 9024, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      label = 82; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $170=$fp_addr;
      _qh_fprintf($170, 9025, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 125; break;
    case 89: 
      var $171=HEAP32[((((5247496)|0))>>2)];
      var $tobool158=(($171)|0)!=0;
      if ($tobool158) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $172=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($172, 6067, ((5279696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 91; break;
    case 91: 
      var $173=$facet_addr;
      var $offset161=(($173+16)|0);
      var $174=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset161)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset161)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp162=$174 > 0;
      if ($cmp162) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 105; break;
    case 93: 
      var $175=HEAP32[((((5248932)|0))>>2)];
      var $call165=_qh_memalloc($175);
      var $176=$call165;
      $coordp=$176;
      $point=$176;
      var $177=$facet_addr;
      var $normal166=(($177+24)|0);
      var $178=HEAP32[(($normal166)>>2)];
      $normp=$178;
      var $179=HEAP32[((((5247496)|0))>>2)];
      $feasiblep=$179;
      var $180=$facet_addr;
      var $offset167=(($180+16)|0);
      var $181=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset167)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset167)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $182=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248676)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248676)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub168=(-$182);
      var $cmp169=$181 < $sub168;
      if ($cmp169) { label = 94; break; } else { label = 98; break; }
    case 94: 
      var $183=HEAP32[((((5247508)|0))>>2)];
      $k=$183;
      label = 95; break;
    case 95: 
      var $184=$k;
      var $dec172=((($184)-(1))|0);
      $k=$dec172;
      var $tobool173=(($184)|0)!=0;
      if ($tobool173) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $185=$normp;
      var $incdec_ptr175=(($185+8)|0);
      $normp=$incdec_ptr175;
      var $186=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($185)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($185)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $187=$facet_addr;
      var $offset176=(($187+16)|0);
      var $188=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset176)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset176)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub177=(-$188);
      var $div178=($186)/($sub177);
      var $189=$feasiblep;
      var $incdec_ptr179=(($189+8)|0);
      $feasiblep=$incdec_ptr179;
      var $190=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($189)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($189)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add180=($div178)+($190);
      var $191=$coordp;
      var $incdec_ptr181=(($191+8)|0);
      $coordp=$incdec_ptr181;
      (HEAPF64[(tempDoublePtr)>>3]=$add180,HEAP32[(($191)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($191)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 95; break;
    case 97: 
      label = 104; break;
    case 98: 
      var $192=HEAP32[((((5247508)|0))>>2)];
      $k=$192;
      label = 99; break;
    case 99: 
      var $193=$k;
      var $dec185=((($193)-(1))|0);
      $k=$dec185;
      var $tobool186=(($193)|0)!=0;
      if ($tobool186) { label = 100; break; } else { label = 103; break; }
    case 100: 
      var $194=$normp;
      var $incdec_ptr188=(($194+8)|0);
      $normp=$incdec_ptr188;
      var $195=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($194)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($194)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $196=$facet_addr;
      var $offset189=(($196+16)|0);
      var $197=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset189)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset189)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $198=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248668)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248668)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call190=_qh_divzero($195, $197, $198, $zerodiv);
      var $199=$feasiblep;
      var $incdec_ptr191=(($199+8)|0);
      $feasiblep=$incdec_ptr191;
      var $200=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($199)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($199)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add192=($call190)+($200);
      var $201=$coordp;
      var $incdec_ptr193=(($201+8)|0);
      $coordp=$incdec_ptr193;
      (HEAPF64[(tempDoublePtr)>>3]=$add192,HEAP32[(($201)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($201)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $202=HEAP32[(($zerodiv)>>2)];
      var $tobool194=(($202)|0)!=0;
      if ($tobool194) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $203=$point;
      var $204=$203;
      var $205=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($204, $205);
      label = 105; break;
    case 102: 
      label = 99; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $206=$fp_addr;
      var $207=$point;
      _qh_printpoint($206, 0, $207);
      var $208=$point;
      var $209=$208;
      var $210=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($209, $210);
      label = 125; break;
    case 105: 
      var $211=HEAP32[((((5247508)|0))>>2)];
      $k=$211;
      label = 106; break;
    case 106: 
      var $212=$k;
      var $dec200=((($212)-(1))|0);
      $k=$dec200;
      var $tobool201=(($212)|0)!=0;
      if ($tobool201) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $213=$fp_addr;
      _qh_fprintf($213, 9026, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=-10.101,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 106; break;
    case 108: 
      var $214=$fp_addr;
      _qh_fprintf($214, 9027, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 125; break;
    case 109: 
      $point=0;
      var $215=$facet_addr;
      var $coplanarset205=(($215+64)|0);
      var $216=HEAP32[(($coplanarset205)>>2)];
      var $tobool206=(($216)|0)!=0;
      if ($tobool206) { label = 110; break; } else { label = 114; break; }
    case 110: 
      var $217=$facet_addr;
      var $coplanarset208=(($217+64)|0);
      var $218=HEAP32[(($coplanarset208)>>2)];
      var $e209=(($218+4)|0);
      var $arrayidx210=(($e209)|0);
      var $p211=$arrayidx210;
      var $219=$p211;
      $pointp=$219;
      label = 111; break;
    case 111: 
      var $220=$pointp;
      var $incdec_ptr213=(($220+4)|0);
      $pointp=$incdec_ptr213;
      var $221=HEAP32[(($220)>>2)];
      $point=$221;
      var $tobool214=(($221)|0)!=0;
      if ($tobool214) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $222=$facet_addr;
      var $223=$point;
      var $call217=_qh_nearvertex($222, $223, $dist);
      $vertex=$call217;
      var $224=$vertex;
      var $point218=(($224+8)|0);
      var $225=HEAP32[(($point218)>>2)];
      var $call219=_qh_pointid($225);
      $id216=$call219;
      var $226=$point;
      var $call220=_qh_pointid($226);
      $id2=$call220;
      var $227=$fp_addr;
      var $228=$id216;
      var $229=$id2;
      var $230=$facet_addr;
      var $id221=(($230+72)|0);
      var $231=HEAP32[(($id221)>>2)];
      var $232=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($227, 9028, ((5278568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$228,HEAP32[(((tempInt)+(4))>>2)]=$229,HEAP32[(((tempInt)+(8))>>2)]=$231,(HEAPF64[(tempDoublePtr)>>3]=$232,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 111; break;
    case 113: 
      label = 114; break;
    case 114: 
      label = 125; break;
    case 115: 
      var $233=HEAP32[((((5246976)|0))>>2)];
      var $tobool225=(($233)|0)!=0;
      if ($tobool225) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $234=$fp_addr;
      _qh_fprintf($234, 9029, ((5277964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 117; break;
    case 117: 
      var $235=$fp_addr;
      var $236=$format_addr;
      var $237=$facet_addr;
      _qh_printcenter($235, $236, 0, $237);
      label = 125; break;
    case 118: 
      var $238=$fp_addr;
      var $239=$facet_addr;
      var $vertices=(($239+48)|0);
      var $240=HEAP32[(($vertices)>>2)];
      var $call229=_qh_setsize($240);
      _qh_fprintf($238, 9030, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call229,tempInt));
      $vertex=0;
      var $241=$facet_addr;
      var $vertices230=(($241+48)|0);
      var $242=HEAP32[(($vertices230)>>2)];
      var $tobool231=(($242)|0)!=0;
      if ($tobool231) { label = 119; break; } else { label = 123; break; }
    case 119: 
      var $243=$facet_addr;
      var $vertices233=(($243+48)|0);
      var $244=HEAP32[(($vertices233)>>2)];
      var $e234=(($244+4)|0);
      var $arrayidx235=(($e234)|0);
      var $p236=$arrayidx235;
      var $245=$p236;
      $vertexp=$245;
      label = 120; break;
    case 120: 
      var $246=$vertexp;
      var $incdec_ptr238=(($246+4)|0);
      $vertexp=$incdec_ptr238;
      var $247=HEAP32[(($246)>>2)];
      $vertex=$247;
      var $tobool239=(($247)|0)!=0;
      if ($tobool239) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $248=$fp_addr;
      var $249=$vertex;
      var $point241=(($249+8)|0);
      var $250=HEAP32[(($point241)>>2)];
      var $call242=_qh_pointid($250);
      _qh_fprintf($248, 9031, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call242,tempInt));
      label = 120; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $251=$fp_addr;
      _qh_fprintf($251, 9032, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 125; break;
    case 124: 
      label = 125; break;
    case 125: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printafacet["X"]=1;

function _qh_printcenter($fp, $format, $string, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $string_addr;
      var $facet_addr;
      var $k;
      var $num;
      $fp_addr=$fp;
      $format_addr=$format;
      $string_addr=$string;
      $facet_addr=$facet;
      var $0=HEAP32[((((5249036)|0))>>2)];
      var $cmp=(($0)|0)!=1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=HEAP32[((((5249036)|0))>>2)];
      var $cmp1=(($1)|0)!=2;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 38; break;
    case 5: 
      var $2=$string_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=$fp_addr;
      var $4=$string_addr;
      _qh_fprintf($3, 9066, $4, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 7: 
      var $5=HEAP32[((((5249036)|0))>>2)];
      var $cmp4=(($5)|0)==1;
      if ($cmp4) { label = 8; break; } else { label = 24; break; }
    case 8: 
      var $6=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($6)-(1))|0);
      $num=$sub;
      var $7=$facet_addr;
      var $normal=(($7+24)|0);
      var $8=HEAP32[(($normal)>>2)];
      var $tobool6=(($8)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $9=$facet_addr;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 17;
      var $bf_clear=$13 & 1;
      var $tobool7=(($bf_clear)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=HEAP32[((((5246960)|0))>>2)];
      var $tobool9=(($14)|0)!=0;
      if ($tobool9) { label = 18; break; } else { label = 11; break; }
    case 11: 
      var $15=$facet_addr;
      var $center=(($15+36)|0);
      var $16=HEAP32[(($center)>>2)];
      var $tobool11=(($16)|0)!=0;
      if ($tobool11) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $17=$facet_addr;
      var $vertices=(($17+48)|0);
      var $18=HEAP32[(($vertices)>>2)];
      var $call=_qh_facetcenter($18);
      var $19=$facet_addr;
      var $center13=(($19+36)|0);
      HEAP32[(($center13)>>2)]=$call;
      label = 13; break;
    case 13: 
      $k=0;
      label = 14; break;
    case 14: 
      var $20=$k;
      var $21=$num;
      var $cmp15=(($20)|0) < (($21)|0);
      if ($cmp15) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $22=$fp_addr;
      var $23=$k;
      var $24=$facet_addr;
      var $center16=(($24+36)|0);
      var $25=HEAP32[(($center16)>>2)];
      var $arrayidx=(($25+($23<<3))|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($22, 9067, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$26,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 16; break;
    case 16: 
      var $27=$k;
      var $inc=((($27)+(1))|0);
      $k=$inc;
      label = 14; break;
    case 17: 
      label = 23; break;
    case 18: 
      $k=0;
      label = 19; break;
    case 19: 
      var $28=$k;
      var $29=$num;
      var $cmp18=(($28)|0) < (($29)|0);
      if ($cmp18) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $30=$fp_addr;
      _qh_fprintf($30, 9068, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=-10.101,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 21; break;
    case 21: 
      var $31=$k;
      var $inc21=((($31)+(1))|0);
      $k=$inc21;
      label = 19; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 34; break;
    case 24: 
      var $32=HEAP32[((((5247508)|0))>>2)];
      $num=$32;
      var $33=$format_addr;
      var $cmp25=(($33)|0)==25;
      if ($cmp25) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $34=HEAP32[((((5247000)|0))>>2)];
      var $tobool27=(($34)|0)!=0;
      if ($tobool27) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $35=$num;
      var $dec=((($35)-(1))|0);
      $num=$dec;
      label = 27; break;
    case 27: 
      var $36=$facet_addr;
      var $center30=(($36+36)|0);
      var $37=HEAP32[(($center30)>>2)];
      var $tobool31=(($37)|0)!=0;
      if ($tobool31) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $38=$facet_addr;
      var $call33=_qh_getcentrum($38);
      var $39=$facet_addr;
      var $center34=(($39+36)|0);
      HEAP32[(($center34)>>2)]=$call33;
      label = 29; break;
    case 29: 
      $k=0;
      label = 30; break;
    case 30: 
      var $40=$k;
      var $41=$num;
      var $cmp37=(($40)|0) < (($41)|0);
      if ($cmp37) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $42=$fp_addr;
      var $43=$k;
      var $44=$facet_addr;
      var $center39=(($44+36)|0);
      var $45=HEAP32[(($center39)>>2)];
      var $arrayidx40=(($45+($43<<3))|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($42, 9069, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 32; break;
    case 32: 
      var $47=$k;
      var $inc42=((($47)+(1))|0);
      $k=$inc42;
      label = 30; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $48=$format_addr;
      var $cmp45=(($48)|0)==7;
      if ($cmp45) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $49=$num;
      var $cmp47=(($49)|0)==2;
      if ($cmp47) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $50=$fp_addr;
      _qh_fprintf($50, 9070, ((5264836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 38; break;
    case 37: 
      var $51=$fp_addr;
      _qh_fprintf($51, 9071, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 38; break;
    case 38: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printcenter["X"]=1;

function _qh_printfacetheader($fp, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $point;
      var $pointp;
      var $furthest;
      var $neighbor;
      var $neighborp;
      var $dist=__stackBase__;
      $fp_addr=$fp;
      $facet_addr=$facet;
      var $0=$facet_addr;
      var $cmp=(($0)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$fp_addr;
      _qh_fprintf($1, 9133, ((5252928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 124; break;
    case 4: 
      var $2=$facet_addr;
      var $cmp1=(($2)|0)==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$fp_addr;
      _qh_fprintf($3, 9134, ((5252636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 124; break;
    case 6: 
      var $4=$facet_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $5=$fp_addr;
      _qh_fprintf($5, 9135, ((5252440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 124; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $6=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$6;
      HEAP32[((((5247340)|0))>>2)]=0;
      var $7=$fp_addr;
      var $8=$facet_addr;
      var $id=(($8+72)|0);
      var $9=HEAP32[(($id)>>2)];
      _qh_fprintf($7, 9136, ((5252120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,tempInt));
      var $10=$fp_addr;
      _qh_fprintf($10, 9137, ((5251808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=$facet_addr;
      var $12=$11;
      var $bf_field_offs=(($12+76)|0);
      var $13=$bf_field_offs;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 12;
      var $bf_clear=$15 & 1;
      var $tobool7=(($bf_clear)|0)!=0;
      if ($tobool7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $16=$fp_addr;
      _qh_fprintf($16, 9138, ((5251524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 12: 
      var $17=$fp_addr;
      _qh_fprintf($17, 9139, ((5251328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      var $18=$facet_addr;
      var $19=$18;
      var $bf_field_offs11=(($19+76)|0);
      var $20=$bf_field_offs11;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 13;
      var $bf_clear12=$22 & 1;
      var $tobool13=(($bf_clear12)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $23=$fp_addr;
      _qh_fprintf($23, 9140, ((5251080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $24=$facet_addr;
      var $25=$24;
      var $bf_field_offs16=(($25+76)|0);
      var $26=$bf_field_offs16;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 >>> 9;
      var $bf_clear17=$28 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $29=$fp_addr;
      _qh_fprintf($29, 9141, ((5250668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 17; break;
    case 17: 
      var $30=$facet_addr;
      var $31=$30;
      var $bf_field_offs21=(($31+76)|0);
      var $32=$bf_field_offs21;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 17;
      var $bf_clear22=$34 & 1;
      var $tobool23=(($bf_clear22)|0)!=0;
      if ($tobool23) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $35=$fp_addr;
      _qh_fprintf($35, 9142, ((5250424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 19; break;
    case 19: 
      var $36=$facet_addr;
      var $37=$36;
      var $bf_field_offs26=(($37+76)|0);
      var $38=$bf_field_offs26;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 11;
      var $bf_clear27=$40 & 1;
      var $tobool28=(($bf_clear27)|0)!=0;
      if ($tobool28) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $41=$fp_addr;
      _qh_fprintf($41, 9143, ((5250248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 21; break;
    case 21: 
      var $42=$facet_addr;
      var $43=$42;
      var $bf_field_offs31=(($43+76)|0);
      var $44=$bf_field_offs31;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 10;
      var $bf_clear32=$46 & 1;
      var $tobool33=(($bf_clear32)|0)!=0;
      if ($tobool33) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $47=$fp_addr;
      _qh_fprintf($47, 9144, ((5249864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 23; break;
    case 23: 
      var $48=$facet_addr;
      var $49=$48;
      var $bf_field_offs36=(($49+76)|0);
      var $50=$bf_field_offs36;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 >>> 27;
      var $bf_clear37=$52 & 1;
      var $tobool38=(($bf_clear37)|0)!=0;
      if ($tobool38) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $53=$fp_addr;
      _qh_fprintf($53, 9145, ((5249592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 25; break;
    case 25: 
      var $54=$facet_addr;
      var $55=$54;
      var $bf_field_offs41=(($55+76)|0);
      var $56=$bf_field_offs41;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 19;
      var $bf_clear42=$58 & 1;
      var $tobool43=(($bf_clear42)|0)!=0;
      if ($tobool43) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $59=$fp_addr;
      _qh_fprintf($59, 9146, ((5304332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 27; break;
    case 27: 
      var $60=$facet_addr;
      var $61=$60;
      var $bf_field_offs46=(($61+76)|0);
      var $62=$bf_field_offs46;
      var $63=HEAP32[(($62)>>2)];
      var $64=$63 >>> 14;
      var $bf_clear47=$64 & 1;
      var $tobool48=(($bf_clear47)|0)!=0;
      if ($tobool48) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $65=$fp_addr;
      _qh_fprintf($65, 9147, ((5303944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 29; break;
    case 29: 
      var $66=$facet_addr;
      var $67=$66;
      var $bf_field_offs51=(($67+76)|0);
      var $68=$bf_field_offs51;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 24;
      var $bf_clear52=$70 & 1;
      var $tobool53=(($bf_clear52)|0)!=0;
      if ($tobool53) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $71=$fp_addr;
      _qh_fprintf($71, 9148, ((5303580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 31; break;
    case 31: 
      var $72=$facet_addr;
      var $73=$72;
      var $bf_field_offs56=(($73+76)|0);
      var $74=$bf_field_offs56;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 25;
      var $bf_clear57=$76 & 1;
      var $tobool58=(($bf_clear57)|0)!=0;
      if ($tobool58) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $77=$fp_addr;
      _qh_fprintf($77, 9149, ((5303340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 33; break;
    case 33: 
      var $78=$facet_addr;
      var $79=$78;
      var $bf_field_offs61=(($79+76)|0);
      var $80=$bf_field_offs61;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 >>> 28;
      var $bf_clear62=$82 & 1;
      var $tobool63=(($bf_clear62)|0)!=0;
      if ($tobool63) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $83=$fp_addr;
      _qh_fprintf($83, 9150, ((5302992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 35; break;
    case 35: 
      var $84=$facet_addr;
      var $85=$84;
      var $bf_field_offs66=(($85+76)|0);
      var $86=$bf_field_offs66;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 >>> 21;
      var $bf_clear67=$88 & 1;
      var $tobool68=(($bf_clear67)|0)!=0;
      if ($tobool68) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $89=$fp_addr;
      _qh_fprintf($89, 9151, ((5302788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 37; break;
    case 37: 
      var $90=$facet_addr;
      var $91=$90;
      var $bf_field_offs71=(($91+76)|0);
      var $92=$bf_field_offs71;
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 >>> 22;
      var $bf_clear72=$94 & 1;
      var $tobool73=(($bf_clear72)|0)!=0;
      if ($tobool73) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $95=$facet_addr;
      var $96=$95;
      var $bf_field_offs74=(($96+76)|0);
      var $97=$bf_field_offs74;
      var $98=HEAP32[(($97)>>2)];
      var $99=$98 >>> 23;
      var $bf_clear75=$99 & 1;
      var $tobool76=(($bf_clear75)|0)!=0;
      if ($tobool76) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $100=$fp_addr;
      _qh_fprintf($100, 9152, ((5302388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 40; break;
    case 40: 
      var $101=$facet_addr;
      var $102=$101;
      var $bf_field_offs79=(($102+76)|0);
      var $103=$bf_field_offs79;
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 >>> 23;
      var $bf_clear80=$105 & 1;
      var $tobool81=(($bf_clear80)|0)!=0;
      if ($tobool81) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $106=$fp_addr;
      _qh_fprintf($106, 9153, ((5302312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 42: 
      var $107=$facet_addr;
      var $108=$107;
      var $bf_field_offs84=(($108+76)|0);
      var $109=$bf_field_offs84;
      var $110=HEAP32[(($109)>>2)];
      var $111=$110 >>> 29;
      var $bf_clear85=$111 & 1;
      var $tobool86=(($bf_clear85)|0)!=0;
      if ($tobool86) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $112=$fp_addr;
      _qh_fprintf($112, 9154, ((5301984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 44; break;
    case 44: 
      var $113=$facet_addr;
      var $114=$113;
      var $bf_field_offs89=(($114+76)|0);
      var $115=$bf_field_offs89;
      var $116=HEAP32[(($115)>>2)];
      var $117=$116 >>> 16;
      var $bf_clear90=$117 & 1;
      var $tobool91=(($bf_clear90)|0)!=0;
      if ($tobool91) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $118=$fp_addr;
      _qh_fprintf($118, 9155, ((5301844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 46; break;
    case 46: 
      var $119=$facet_addr;
      var $120=$119;
      var $bf_field_offs94=(($120+76)|0);
      var $121=$bf_field_offs94;
      var $122=HEAP32[(($121)>>2)];
      var $123=$122 >>> 18;
      var $bf_clear95=$123 & 1;
      var $tobool96=(($bf_clear95)|0)!=0;
      if ($tobool96) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $124=$fp_addr;
      _qh_fprintf($124, 9156, ((5301628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 48; break;
    case 48: 
      var $125=$facet_addr;
      var $126=$125;
      var $bf_field_offs99=(($126+76)|0);
      var $127=$bf_field_offs99;
      var $128=HEAP32[(($127)>>2)];
      var $129=$128 >>> 30;
      var $bf_clear100=$129 & 1;
      var $tobool101=(($bf_clear100)|0)!=0;
      if ($tobool101) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $130=$fp_addr;
      _qh_fprintf($130, 9157, ((5301404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 50; break;
    case 50: 
      var $131=$facet_addr;
      var $132=$131;
      var $bf_field_offs104=(($132+76)|0);
      var $133=$bf_field_offs104;
      var $134=HEAP32[(($133)>>2)];
      var $135=$134 >>> 31;
      var $bf_clear105=$135 & 1;
      var $tobool106=(($bf_clear105)|0)!=0;
      if ($tobool106) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $136=$fp_addr;
      _qh_fprintf($136, 9158, ((5301088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 52; break;
    case 52: 
      var $137=$fp_addr;
      _qh_fprintf($137, 9159, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $138=$facet_addr;
      var $139=$138;
      var $bf_field_offs109=(($139+76)|0);
      var $140=$bf_field_offs109;
      var $141=HEAP32[(($140)>>2)];
      var $142=$141 >>> 20;
      var $bf_clear110=$142 & 1;
      var $tobool111=(($bf_clear110)|0)!=0;
      if ($tobool111) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $143=$fp_addr;
      var $144=$facet_addr;
      var $f=(($144+28)|0);
      var $area=$f;
      var $145=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($area)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($area)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($143, 9160, ((5300856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$145,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 73; break;
    case 54: 
      var $146=HEAP32[((((5249092)|0))>>2)];
      var $tobool114=(($146)|0)!=0;
      if ($tobool114) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $147=$facet_addr;
      var $148=$147;
      var $bf_field_offs116=(($148+76)|0);
      var $149=$bf_field_offs116;
      var $150=HEAP32[(($149)>>2)];
      var $151=$150 >>> 11;
      var $bf_clear117=$151 & 1;
      var $tobool118=(($bf_clear117)|0)!=0;
      if ($tobool118) { label = 56; break; } else { label = 58; break; }
    case 56: 
      var $152=$facet_addr;
      var $f120=(($152+28)|0);
      var $replace=$f120;
      var $153=HEAP32[(($replace)>>2)];
      var $tobool121=(($153)|0)!=0;
      if ($tobool121) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $154=$fp_addr;
      var $155=$facet_addr;
      var $f123=(($155+28)|0);
      var $replace124=$f123;
      var $156=HEAP32[(($replace124)>>2)];
      var $id125=(($156+72)|0);
      var $157=HEAP32[(($id125)>>2)];
      _qh_fprintf($154, 9161, ((5300652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$157,tempInt));
      label = 72; break;
    case 58: 
      var $158=$facet_addr;
      var $159=$158;
      var $bf_field_offs127=(($159+76)|0);
      var $160=$bf_field_offs127;
      var $161=HEAP32[(($160)>>2)];
      var $162=$161 >>> 10;
      var $bf_clear128=$162 & 1;
      var $tobool129=(($bf_clear128)|0)!=0;
      if ($tobool129) { label = 59; break; } else { label = 63; break; }
    case 59: 
      var $163=$facet_addr;
      var $f131=(($163+28)|0);
      var $samecycle=$f131;
      var $164=HEAP32[(($samecycle)>>2)];
      var $tobool132=(($164)|0)!=0;
      if ($tobool132) { label = 60; break; } else { label = 62; break; }
    case 60: 
      var $165=$facet_addr;
      var $f134=(($165+28)|0);
      var $samecycle135=$f134;
      var $166=HEAP32[(($samecycle135)>>2)];
      var $167=$facet_addr;
      var $cmp136=(($166)|0)!=(($167)|0);
      if ($cmp136) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $168=$fp_addr;
      var $169=$facet_addr;
      var $f138=(($169+28)|0);
      var $samecycle139=$f138;
      var $170=HEAP32[(($samecycle139)>>2)];
      var $id140=(($170+72)|0);
      var $171=HEAP32[(($id140)>>2)];
      _qh_fprintf($168, 9162, ((5300228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$171,tempInt));
      label = 62; break;
    case 62: 
      label = 71; break;
    case 63: 
      var $172=$facet_addr;
      var $173=$172;
      var $bf_field_offs143=(($173+76)|0);
      var $174=$bf_field_offs143;
      var $175=HEAP32[(($174)>>2)];
      var $176=$175 >>> 9;
      var $bf_clear144=$176 & 1;
      var $tobool145=(($bf_clear144)|0)!=0;
      if ($tobool145) { label = 64; break; } else { label = 67; break; }
    case 64: 
      var $177=$facet_addr;
      var $f147=(($177+28)|0);
      var $triowner=$f147;
      var $178=HEAP32[(($triowner)>>2)];
      var $tobool148=(($178)|0)!=0;
      if ($tobool148) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $179=$fp_addr;
      var $180=$facet_addr;
      var $f150=(($180+28)|0);
      var $triowner151=$f150;
      var $181=HEAP32[(($triowner151)>>2)];
      var $id152=(($181+72)|0);
      var $182=HEAP32[(($id152)>>2)];
      _qh_fprintf($179, 9163, ((5299848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$182,tempInt));
      label = 66; break;
    case 66: 
      label = 70; break;
    case 67: 
      var $183=$facet_addr;
      var $f155=(($183+28)|0);
      var $newcycle=$f155;
      var $184=HEAP32[(($newcycle)>>2)];
      var $tobool156=(($184)|0)!=0;
      if ($tobool156) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $185=$fp_addr;
      var $186=$facet_addr;
      var $f158=(($186+28)|0);
      var $newcycle159=$f158;
      var $187=HEAP32[(($newcycle159)>>2)];
      var $id160=(($187+72)|0);
      var $188=HEAP32[(($id160)>>2)];
      _qh_fprintf($185, 9164, ((5299628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$188,tempInt));
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $189=$facet_addr;
      var $190=$189;
      var $bf_field_offs166=(($190+76)|0);
      var $191=$bf_field_offs166;
      var $192=HEAP32[(($191)>>2)];
      var $bf_clear167=$192 & 511;
      var $tobool168=(($bf_clear167)|0)!=0;
      if ($tobool168) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $193=$fp_addr;
      var $194=$facet_addr;
      var $195=$194;
      var $bf_field_offs170=(($195+76)|0);
      var $196=$bf_field_offs170;
      var $197=HEAP32[(($196)>>2)];
      var $bf_clear171=$197 & 511;
      _qh_fprintf($193, 9165, ((5299332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear171,tempInt));
      label = 75; break;
    case 75: 
      var $198=$fp_addr;
      var $199=HEAP32[((((5247508)|0))>>2)];
      var $200=$facet_addr;
      var $normal=(($200+24)|0);
      var $201=HEAP32[(($normal)>>2)];
      _qh_printpointid($198, ((5299224)|0), $199, $201, -1);
      var $202=$fp_addr;
      var $203=$facet_addr;
      var $offset=(($203+16)|0);
      var $204=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($202, 9166, ((5299004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$204,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $205=HEAP32[((((5249036)|0))>>2)];
      var $cmp173=(($205)|0)==1;
      if ($cmp173) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $206=$facet_addr;
      var $center=(($206+36)|0);
      var $207=HEAP32[(($center)>>2)];
      var $tobool174=(($207)|0)!=0;
      if ($tobool174) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $208=$fp_addr;
      var $209=$facet_addr;
      _qh_printcenter($208, 5, ((5298664)|0), $209);
      label = 78; break;
    case 78: 
      var $210=$facet_addr;
      var $maxoutside=(($210+8)|0);
      var $211=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $212=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp177=$211 > $212;
      if ($cmp177) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $213=$fp_addr;
      var $214=$facet_addr;
      var $maxoutside179=(($214+8)|0);
      var $215=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside179)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside179)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($213, 9167, ((5298340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$215,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 80; break;
    case 80: 
      var $216=$facet_addr;
      var $outsideset=(($216+60)|0);
      var $217=HEAP32[(($outsideset)>>2)];
      var $tobool181=(($217)|0)!=0;
      if ($tobool181) { label = 81; break; } else { label = 96; break; }
    case 81: 
      var $218=$facet_addr;
      var $outsideset183=(($218+60)|0);
      var $219=HEAP32[(($outsideset183)>>2)];
      var $e=(($219+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $220=HEAP32[(($p)>>2)];
      var $tobool184=(($220)|0)!=0;
      if ($tobool184) { label = 82; break; } else { label = 83; break; }
    case 82: 
      if (0) { label = 96; break; } else { label = 84; break; }
    case 83: 
      if (1) { label = 96; break; } else { label = 84; break; }
    case 84: 
      var $221=$facet_addr;
      var $outsideset186=(($221+60)|0);
      var $222=HEAP32[(($outsideset186)>>2)];
      var $call=_qh_setlast($222);
      var $223=$call;
      $furthest=$223;
      var $224=$facet_addr;
      var $outsideset187=(($224+60)|0);
      var $225=HEAP32[(($outsideset187)>>2)];
      var $call188=_qh_setsize($225);
      var $cmp189=(($call188)|0) < 6;
      if ($cmp189) { label = 85; break; } else { label = 91; break; }
    case 85: 
      var $226=$fp_addr;
      var $227=$furthest;
      var $call191=_qh_pointid($227);
      _qh_fprintf($226, 9168, ((5298132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call191,tempInt));
      $point=0;
      var $228=$facet_addr;
      var $outsideset192=(($228+60)|0);
      var $229=HEAP32[(($outsideset192)>>2)];
      var $tobool193=(($229)|0)!=0;
      if ($tobool193) { label = 86; break; } else { label = 90; break; }
    case 86: 
      var $230=$facet_addr;
      var $outsideset195=(($230+60)|0);
      var $231=HEAP32[(($outsideset195)>>2)];
      var $e196=(($231+4)|0);
      var $arrayidx197=(($e196)|0);
      var $p198=$arrayidx197;
      var $232=$p198;
      $pointp=$232;
      label = 87; break;
    case 87: 
      var $233=$pointp;
      var $incdec_ptr=(($233+4)|0);
      $pointp=$incdec_ptr;
      var $234=HEAP32[(($233)>>2)];
      $point=$234;
      var $tobool199=(($234)|0)!=0;
      if ($tobool199) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $235=$fp_addr;
      var $236=$point;
      _qh_printpoint($235, ((5297960)|0), $236);
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 95; break;
    case 91: 
      var $237=$facet_addr;
      var $outsideset202=(($237+60)|0);
      var $238=HEAP32[(($outsideset202)>>2)];
      var $call203=_qh_setsize($238);
      var $cmp204=(($call203)|0) < 21;
      if ($cmp204) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $239=$fp_addr;
      var $240=$facet_addr;
      var $outsideset206=(($240+60)|0);
      var $241=HEAP32[(($outsideset206)>>2)];
      _qh_printpoints($239, ((5297752)|0), $241);
      label = 94; break;
    case 93: 
      var $242=$fp_addr;
      var $243=$facet_addr;
      var $outsideset208=(($243+60)|0);
      var $244=HEAP32[(($outsideset208)>>2)];
      var $call209=_qh_setsize($244);
      _qh_fprintf($242, 9169, ((5297536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call209,tempInt));
      var $245=$fp_addr;
      var $246=$furthest;
      _qh_printpoint($245, ((5297412)|0), $246);
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $247=$fp_addr;
      var $248=$facet_addr;
      var $furthestdist=(($248)|0);
      var $249=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($furthestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($furthestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($247, 9170, ((5297160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$249,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 96; break;
    case 96: 
      var $250=$facet_addr;
      var $coplanarset=(($250+64)|0);
      var $251=HEAP32[(($coplanarset)>>2)];
      var $tobool213=(($251)|0)!=0;
      if ($tobool213) { label = 97; break; } else { label = 112; break; }
    case 97: 
      var $252=$facet_addr;
      var $coplanarset215=(($252+64)|0);
      var $253=HEAP32[(($coplanarset215)>>2)];
      var $e216=(($253+4)|0);
      var $arrayidx217=(($e216)|0);
      var $p218=$arrayidx217;
      var $254=HEAP32[(($p218)>>2)];
      var $tobool219=(($254)|0)!=0;
      if ($tobool219) { label = 98; break; } else { label = 99; break; }
    case 98: 
      if (0) { label = 112; break; } else { label = 100; break; }
    case 99: 
      if (1) { label = 112; break; } else { label = 100; break; }
    case 100: 
      var $255=$facet_addr;
      var $coplanarset223=(($255+64)|0);
      var $256=HEAP32[(($coplanarset223)>>2)];
      var $call224=_qh_setlast($256);
      var $257=$call224;
      $furthest=$257;
      var $258=$facet_addr;
      var $coplanarset225=(($258+64)|0);
      var $259=HEAP32[(($coplanarset225)>>2)];
      var $call226=_qh_setsize($259);
      var $cmp227=(($call226)|0) < 6;
      if ($cmp227) { label = 101; break; } else { label = 107; break; }
    case 101: 
      var $260=$fp_addr;
      var $261=$furthest;
      var $call229=_qh_pointid($261);
      _qh_fprintf($260, 9171, ((5297036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call229,tempInt));
      $point=0;
      var $262=$facet_addr;
      var $coplanarset230=(($262+64)|0);
      var $263=HEAP32[(($coplanarset230)>>2)];
      var $tobool231=(($263)|0)!=0;
      if ($tobool231) { label = 102; break; } else { label = 106; break; }
    case 102: 
      var $264=$facet_addr;
      var $coplanarset233=(($264+64)|0);
      var $265=HEAP32[(($coplanarset233)>>2)];
      var $e234=(($265+4)|0);
      var $arrayidx235=(($e234)|0);
      var $p236=$arrayidx235;
      var $266=$p236;
      $pointp=$266;
      label = 103; break;
    case 103: 
      var $267=$pointp;
      var $incdec_ptr238=(($267+4)|0);
      $pointp=$incdec_ptr238;
      var $268=HEAP32[(($267)>>2)];
      $point=$268;
      var $tobool239=(($268)|0)!=0;
      if ($tobool239) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $269=$fp_addr;
      var $270=$point;
      _qh_printpoint($269, ((5297960)|0), $270);
      label = 103; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 111; break;
    case 107: 
      var $271=$facet_addr;
      var $coplanarset244=(($271+64)|0);
      var $272=HEAP32[(($coplanarset244)>>2)];
      var $call245=_qh_setsize($272);
      var $cmp246=(($call245)|0) < 21;
      if ($cmp246) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $273=$fp_addr;
      var $274=$facet_addr;
      var $coplanarset248=(($274+64)|0);
      var $275=HEAP32[(($coplanarset248)>>2)];
      _qh_printpoints($273, ((5296932)|0), $275);
      label = 110; break;
    case 109: 
      var $276=$fp_addr;
      var $277=$facet_addr;
      var $coplanarset250=(($277+64)|0);
      var $278=HEAP32[(($coplanarset250)>>2)];
      var $call251=_qh_setsize($278);
      _qh_fprintf($276, 9172, ((5296688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call251,tempInt));
      var $279=$fp_addr;
      var $280=$furthest;
      _qh_printpoint($279, ((5297412)|0), $280);
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $281=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($281)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $282=$furthest;
      var $283=$facet_addr;
      _qh_distplane($282, $283, $dist);
      var $284=$fp_addr;
      var $285=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($284, 9173, ((5296524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$285,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 112; break;
    case 112: 
      var $286=$fp_addr;
      var $287=$facet_addr;
      var $vertices=(($287+48)|0);
      var $288=HEAP32[(($vertices)>>2)];
      _qh_printvertices($286, ((5296468)|0), $288);
      var $289=$fp_addr;
      _qh_fprintf($289, 9174, ((5296360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $neighbor=0;
      var $290=$facet_addr;
      var $neighbors=(($290+56)|0);
      var $291=HEAP32[(($neighbors)>>2)];
      var $tobool255=(($291)|0)!=0;
      if ($tobool255) { label = 113; break; } else { label = 123; break; }
    case 113: 
      var $292=$facet_addr;
      var $neighbors257=(($292+56)|0);
      var $293=HEAP32[(($neighbors257)>>2)];
      var $e258=(($293+4)|0);
      var $arrayidx259=(($e258)|0);
      var $p260=$arrayidx259;
      var $294=$p260;
      $neighborp=$294;
      label = 114; break;
    case 114: 
      var $295=$neighborp;
      var $incdec_ptr262=(($295+4)|0);
      $neighborp=$incdec_ptr262;
      var $296=HEAP32[(($295)>>2)];
      $neighbor=$296;
      var $tobool263=(($296)|0)!=0;
      if ($tobool263) { label = 115; break; } else { label = 122; break; }
    case 115: 
      var $297=$neighbor;
      var $cmp265=(($297)|0)==2;
      if ($cmp265) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $298=$fp_addr;
      _qh_fprintf($298, 9175, ((5296204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 121; break;
    case 117: 
      var $299=$neighbor;
      var $cmp268=(($299)|0)==1;
      if ($cmp268) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $300=$fp_addr;
      _qh_fprintf($300, 9176, ((5295976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 120; break;
    case 119: 
      var $301=$fp_addr;
      var $302=$neighbor;
      var $id271=(($302+72)|0);
      var $303=HEAP32[(($id271)>>2)];
      _qh_fprintf($301, 9177, ((5295876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$303,tempInt));
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 114; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $304=$fp_addr;
      _qh_fprintf($304, 9178, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $305=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$305;
      label = 124; break;
    case 124: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacetheader["X"]=1;

function _qh_projectdim3($source, $destination) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $source_addr;
      var $destination_addr;
      var $i;
      var $k;
      $source_addr=$source;
      $destination_addr=$destination;
      $k=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $2=HEAP32[((((5247508)|0))>>2)];
      var $cmp1=(($2)|0)==4;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $3=$k;
      var $4=HEAP32[((((5247008)|0))>>2)];
      var $cmp2=(($3)|0)!=(($4)|0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$k;
      var $6=$source_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      var $9=$destination_addr;
      var $arrayidx4=(($9+($8<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[(($arrayidx4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      label = 12; break;
    case 8: 
      var $10=$k;
      var $11=HEAP32[((((5247008)|0))>>2)];
      var $cmp5=(($10)|0)==(($11)|0);
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$i;
      var $inc7=((($12)+(1))|0);
      $i=$inc7;
      var $13=$destination_addr;
      var $arrayidx8=(($13+($12<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx8)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx8)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 10: 
      var $14=$k;
      var $15=$source_addr;
      var $arrayidx10=(($15+($14<<3))|0);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=$i;
      var $inc11=((($17)+(1))|0);
      $i=$inc11;
      var $18=$destination_addr;
      var $arrayidx12=(($18+($17<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(($arrayidx12)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx12)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$k;
      var $inc15=((($19)+(1))|0);
      $k=$inc15;
      label = 3; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $20=$i;
      var $cmp16=(($20)|0) < 3;
      if ($cmp16) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $21=$i;
      var $inc17=((($21)+(1))|0);
      $i=$inc17;
      var $22=$destination_addr;
      var $arrayidx18=(($22+($21<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx18)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx18)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 15; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_projectdim3["X"]=1;

function _qh_printfacet2geom($fp, $facet, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $color_addr;
      var $point0=__stackBase__;
      var $point1=(__stackBase__)+(4);
      var $mindist=(__stackBase__)+(8);
      var $innerplane=(__stackBase__)+(16);
      var $outerplane=(__stackBase__)+(24);
      var $k;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $color_addr=$color;
      var $0=$facet_addr;
      _qh_facet2point($0, $point0, $point1, $mindist);
      var $1=$facet_addr;
      _qh_geomplanes($1, $outerplane, $innerplane);
      var $2=HEAP32[((((5247184)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=HEAP32[((((5247176)|0))>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $4=HEAP32[((((5247168)|0))>>2)];
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$fp_addr;
      var $6=HEAP32[(($point0)>>2)];
      var $7=HEAP32[(($point1)>>2)];
      var $8=$facet_addr;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=$color_addr;
      _qh_printfacet2geom_points($5, $6, $7, $8, $9, $10);
      label = 6; break;
    case 6: 
      var $11=HEAP32[((((5247168)|0))>>2)];
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 10; break; } else { label = 7; break; }
    case 7: 
      var $12=HEAP32[((((5247176)|0))>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 14; break; } else { label = 8; break; }
    case 8: 
      var $13=HEAP32[((((5247184)|0))>>2)];
      var $tobool7=(($13)|0)!=0;
      if ($tobool7) { label = 14; break; } else { label = 9; break; }
    case 9: 
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($14)-($15);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($16)*(2);
      var $mul9=($mul)*(0.002);
      var $cmp=$sub > $mul9;
      if ($cmp) { label = 10; break; } else { label = 14; break; }
    case 10: 
      $k=3;
      label = 11; break;
    case 11: 
      var $17=$k;
      var $dec=((($17)-(1))|0);
      $k=$dec;
      var $tobool11=(($17)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $18=$k;
      var $19=$color_addr;
      var $arrayidx=(($19+($18<<3))|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub12=(1)-($20);
      var $21=$k;
      var $22=$color_addr;
      var $arrayidx13=(($22+($21<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub12,HEAP32[(($arrayidx13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 13: 
      var $23=$fp_addr;
      var $24=HEAP32[(($point0)>>2)];
      var $25=HEAP32[(($point1)>>2)];
      var $26=$facet_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $28=$color_addr;
      _qh_printfacet2geom_points($23, $24, $25, $26, $27, $28);
      label = 14; break;
    case 14: 
      var $29=HEAP32[(($point1)>>2)];
      var $30=$29;
      var $31=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($30, $31);
      var $32=HEAP32[(($point0)>>2)];
      var $33=$32;
      var $34=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($33, $34);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet2geom["X"]=1;


function _qh_printfacet3geom_simplicial($fp, $facet, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $color_addr;
      var $points=__stackBase__;
      var $vertices=(__stackBase__)+(4);
      var $vertex;
      var $vertexp;
      var $vertexA;
      var $vertexB;
      var $neighbor;
      var $neighborp;
      var $outerplane=(__stackBase__)+(8);
      var $innerplane=(__stackBase__)+(16);
      var $black=(__stackBase__)+(24);
      var $green=(__stackBase__)+(48);
      var $k;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $color_addr=$color;
      var $0=$black;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0; HEAP32[((($0)+(12))>>2)]=0; HEAP32[((($0)+(16))>>2)]=0; HEAP32[((($0)+(20))>>2)]=0;
      var $1=$green;
      assert(24 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((5249324)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((5249328)>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((5249332)>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((5249336)>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((5249340)>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((5249344)>>2)];
      var $2=$facet_addr;
      _qh_geomplanes($2, $outerplane, $innerplane);
      var $3=$facet_addr;
      var $call=_qh_facet3vertex($3);
      HEAP32[(($vertices)>>2)]=$call;
      var $4=HEAP32[((((5248940)|0))>>2)];
      var $call1=_qh_settemp($4);
      HEAP32[(($points)>>2)]=$call1;
      $vertex=0;
      var $5=HEAP32[(($vertices)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=HEAP32[(($vertices)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $7=$p;
      $vertexp=$7;
      label = 4; break;
    case 4: 
      var $8=$vertexp;
      var $incdec_ptr=(($8+4)|0);
      $vertexp=$incdec_ptr;
      var $9=HEAP32[(($8)>>2)];
      $vertex=$9;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$vertex;
      var $point=(($10+8)|0);
      var $11=HEAP32[(($point)>>2)];
      var $12=$11;
      _qh_setappend($points, $12);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $13=HEAP32[((((5247184)|0))>>2)];
      var $tobool3=(($13)|0)!=0;
      if ($tobool3) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $14=HEAP32[((((5247176)|0))>>2)];
      var $tobool4=(($14)|0)!=0;
      if ($tobool4) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $15=HEAP32[((((5247168)|0))>>2)];
      var $tobool5=(($15)|0)!=0;
      if ($tobool5) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $16=$fp_addr;
      var $17=HEAP32[(($points)>>2)];
      var $18=$facet_addr;
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=$color_addr;
      _qh_printfacet3geom_points($16, $17, $18, $19, $20);
      label = 11; break;
    case 11: 
      var $21=HEAP32[((((5247168)|0))>>2)];
      var $tobool8=(($21)|0)!=0;
      if ($tobool8) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $22=HEAP32[((((5247176)|0))>>2)];
      var $tobool10=(($22)|0)!=0;
      if ($tobool10) { label = 19; break; } else { label = 13; break; }
    case 13: 
      var $23=HEAP32[((((5247184)|0))>>2)];
      var $tobool12=(($23)|0)!=0;
      if ($tobool12) { label = 19; break; } else { label = 14; break; }
    case 14: 
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($24)-($25);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($26)*(2);
      var $mul14=($mul)*(0.002);
      var $cmp=$sub > $mul14;
      if ($cmp) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $k=3;
      label = 16; break;
    case 16: 
      var $27=$k;
      var $dec=((($27)-(1))|0);
      $k=$dec;
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $28=$k;
      var $29=$color_addr;
      var $arrayidx19=(($29+($28<<3))|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub20=(1)-($30);
      var $31=$k;
      var $32=$color_addr;
      var $arrayidx21=(($32+($31<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub20,HEAP32[(($arrayidx21)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx21)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 18: 
      var $33=$fp_addr;
      var $34=HEAP32[(($points)>>2)];
      var $35=$facet_addr;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=$color_addr;
      _qh_printfacet3geom_points($33, $34, $35, $36, $37);
      label = 19; break;
    case 19: 
      _qh_settempfree($points);
      _qh_settempfree($vertices);
      var $38=HEAP32[((((5247004)|0))>>2)];
      var $tobool24=(($38)|0)!=0;
      if ($tobool24) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $39=HEAP32[((((5247308)|0))>>2)];
      var $tobool26=(($39)|0)!=0;
      if ($tobool26) { label = 21; break; } else { label = 35; break; }
    case 21: 
      var $40=$facet_addr;
      var $41=$40;
      var $bf_field_offs=(($41+76)|0);
      var $42=$bf_field_offs;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 >>> 11;
      var $bf_clear=$44 & 1;
      var $tobool28=(($bf_clear)|0)!=0;
      if ($tobool28) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $45=HEAP32[((((5249092)|0))>>2)];
      var $tobool30=(($45)|0)!=0;
      if ($tobool30) { label = 35; break; } else { label = 23; break; }
    case 23: 
      var $46=HEAP32[((((5249156)|0))>>2)];
      var $47=$facet_addr;
      var $visitid=(($47+68)|0);
      HEAP32[(($visitid)>>2)]=$46;
      $neighbor=0;
      var $48=$facet_addr;
      var $neighbors=(($48+56)|0);
      var $49=HEAP32[(($neighbors)>>2)];
      var $tobool32=(($49)|0)!=0;
      if ($tobool32) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $50=$facet_addr;
      var $neighbors34=(($50+56)|0);
      var $51=HEAP32[(($neighbors34)>>2)];
      var $e35=(($51+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      var $52=$p37;
      $neighborp=$52;
      label = 25; break;
    case 25: 
      var $53=$neighborp;
      var $incdec_ptr39=(($53+4)|0);
      $neighborp=$incdec_ptr39;
      var $54=HEAP32[(($53)>>2)];
      $neighbor=$54;
      var $tobool40=(($54)|0)!=0;
      if ($tobool40) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $55=$neighbor;
      var $visitid42=(($55+68)|0);
      var $56=HEAP32[(($visitid42)>>2)];
      var $57=HEAP32[((((5249156)|0))>>2)];
      var $cmp43=(($56)|0)!=(($57)|0);
      if ($cmp43) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $58=$facet_addr;
      var $vertices45=(($58+48)|0);
      var $59=HEAP32[(($vertices45)>>2)];
      var $60=HEAP32[((((5247508)|0))>>2)];
      var $61=$neighborp;
      var $62=$61;
      var $63=$facet_addr;
      var $neighbors46=(($63+56)|0);
      var $64=HEAP32[(($neighbors46)>>2)];
      var $e47=(($64+4)|0);
      var $arrayidx48=(($e47+4)|0);
      var $p49=$arrayidx48;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$p49;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $call50=_qh_setnew_delnthsorted($59, $60, $sub_ptr_div, 0);
      HEAP32[(($vertices)>>2)]=$call50;
      var $65=HEAP32[((((5247004)|0))>>2)];
      var $tobool51=(($65)|0)!=0;
      if ($tobool51) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $66=$fp_addr;
      var $67=$facet_addr;
      var $68=$neighbor;
      var $69=HEAP32[(($vertices)>>2)];
      var $arraydecay=(($black)|0);
      _qh_printhyperplaneintersection($66, $67, $68, $69, $arraydecay);
      label = 29; break;
    case 29: 
      var $70=HEAP32[((((5247308)|0))>>2)];
      var $tobool54=(($70)|0)!=0;
      if ($tobool54) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $71=HEAP32[(($vertices)>>2)];
      var $e56=(($71+4)|0);
      var $arrayidx57=(($e56)|0);
      var $p58=$arrayidx57;
      var $72=HEAP32[(($p58)>>2)];
      var $73=$72;
      $vertexA=$73;
      var $74=HEAP32[(($vertices)>>2)];
      var $e59=(($74+4)|0);
      var $arrayidx60=(($e59+4)|0);
      var $p61=$arrayidx60;
      var $75=HEAP32[(($p61)>>2)];
      var $76=$75;
      $vertexB=$76;
      var $77=$fp_addr;
      var $78=$vertexA;
      var $point62=(($78+8)|0);
      var $79=HEAP32[(($point62)>>2)];
      var $80=$vertexB;
      var $point63=(($80+8)|0);
      var $81=HEAP32[(($point63)>>2)];
      var $arraydecay64=(($green)|0);
      _qh_printline3geom($77, $79, $81, $arraydecay64);
      label = 31; break;
    case 31: 
      _qh_setfree($vertices);
      label = 32; break;
    case 32: 
      label = 25; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet3geom_simplicial["X"]=1;

function _qh_printfacet3geom_nonsimplicial($fp, $facet, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $color_addr;
      var $ridge;
      var $ridgep;
      var $projectedpoints=__stackBase__;
      var $vertices=(__stackBase__)+(4);
      var $vertex;
      var $vertexp;
      var $vertexA;
      var $vertexB;
      var $projpt;
      var $point;
      var $pointp;
      var $neighbor;
      var $dist=(__stackBase__)+(8);
      var $outerplane=(__stackBase__)+(16);
      var $innerplane=(__stackBase__)+(24);
      var $cntvertices;
      var $k;
      var $black=(__stackBase__)+(32);
      var $green=(__stackBase__)+(56);
      $fp_addr=$fp;
      $facet_addr=$facet;
      $color_addr=$color;
      var $0=$black;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0; HEAP32[((($0)+(12))>>2)]=0; HEAP32[((($0)+(16))>>2)]=0; HEAP32[((($0)+(20))>>2)]=0;
      var $1=$green;
      assert(24 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((5249348)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((5249352)>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((5249356)>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((5249360)>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((5249364)>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((5249368)>>2)];
      var $2=$facet_addr;
      _qh_geomplanes($2, $outerplane, $innerplane);
      var $3=$facet_addr;
      var $call=_qh_facet3vertex($3);
      HEAP32[(($vertices)>>2)]=$call;
      var $4=HEAP32[(($vertices)>>2)];
      var $call1=_qh_setsize($4);
      $cntvertices=$call1;
      var $5=$cntvertices;
      var $call2=_qh_settemp($5);
      HEAP32[(($projectedpoints)>>2)]=$call2;
      $vertex=0;
      var $6=HEAP32[(($vertices)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $7=HEAP32[(($vertices)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=$p;
      $vertexp=$8;
      label = 4; break;
    case 4: 
      var $9=$vertexp;
      var $incdec_ptr=(($9+4)|0);
      $vertexp=$incdec_ptr;
      var $10=HEAP32[(($9)>>2)];
      $vertex=$10;
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($11)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $12=$vertex;
      var $point4=(($12+8)|0);
      var $13=HEAP32[(($point4)>>2)];
      var $14=$facet_addr;
      _qh_distplane($13, $14, $dist);
      var $15=$vertex;
      var $point5=(($15+8)|0);
      var $16=HEAP32[(($point5)>>2)];
      var $17=$facet_addr;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call6=_qh_projectpoint($16, $17, $18);
      $projpt=$call6;
      var $19=$projpt;
      var $20=$19;
      _qh_setappend($projectedpoints, $20);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $21=HEAP32[((((5247184)|0))>>2)];
      var $tobool7=(($21)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $22=HEAP32[((((5247176)|0))>>2)];
      var $tobool8=(($22)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $23=HEAP32[((((5247168)|0))>>2)];
      var $tobool9=(($23)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $24=$fp_addr;
      var $25=HEAP32[(($projectedpoints)>>2)];
      var $26=$facet_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $28=$color_addr;
      _qh_printfacet3geom_points($24, $25, $26, $27, $28);
      label = 11; break;
    case 11: 
      var $29=HEAP32[((((5247168)|0))>>2)];
      var $tobool12=(($29)|0)!=0;
      if ($tobool12) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $30=HEAP32[((((5247176)|0))>>2)];
      var $tobool14=(($30)|0)!=0;
      if ($tobool14) { label = 19; break; } else { label = 13; break; }
    case 13: 
      var $31=HEAP32[((((5247184)|0))>>2)];
      var $tobool16=(($31)|0)!=0;
      if ($tobool16) { label = 19; break; } else { label = 14; break; }
    case 14: 
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($32)-($33);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($34)*(2);
      var $mul18=($mul)*(0.002);
      var $cmp=$sub > $mul18;
      if ($cmp) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $k=3;
      label = 16; break;
    case 16: 
      var $35=$k;
      var $dec=((($35)-(1))|0);
      $k=$dec;
      var $tobool21=(($35)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $36=$k;
      var $37=$color_addr;
      var $arrayidx23=(($37+($36<<3))|0);
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx23)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx23)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub24=(1)-($38);
      var $39=$k;
      var $40=$color_addr;
      var $arrayidx25=(($40+($39<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub24,HEAP32[(($arrayidx25)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx25)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 18: 
      var $41=$fp_addr;
      var $42=HEAP32[(($projectedpoints)>>2)];
      var $43=$facet_addr;
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $45=$color_addr;
      _qh_printfacet3geom_points($41, $42, $43, $44, $45);
      label = 19; break;
    case 19: 
      $point=0;
      var $46=HEAP32[(($projectedpoints)>>2)];
      var $tobool28=(($46)|0)!=0;
      if ($tobool28) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $47=HEAP32[(($projectedpoints)>>2)];
      var $e30=(($47+4)|0);
      var $arrayidx31=(($e30)|0);
      var $p32=$arrayidx31;
      var $48=$p32;
      $pointp=$48;
      label = 21; break;
    case 21: 
      var $49=$pointp;
      var $incdec_ptr34=(($49+4)|0);
      $pointp=$incdec_ptr34;
      var $50=HEAP32[(($49)>>2)];
      $point=$50;
      var $tobool35=(($50)|0)!=0;
      if ($tobool35) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $51=$point;
      var $52=$51;
      var $53=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($52, $53);
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      _qh_settempfree($projectedpoints);
      _qh_settempfree($vertices);
      var $54=HEAP32[((((5247004)|0))>>2)];
      var $tobool39=(($54)|0)!=0;
      if ($tobool39) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $55=HEAP32[((((5247308)|0))>>2)];
      var $tobool41=(($55)|0)!=0;
      if ($tobool41) { label = 26; break; } else { label = 43; break; }
    case 26: 
      var $56=$facet_addr;
      var $57=$56;
      var $bf_field_offs=(($57+76)|0);
      var $58=$bf_field_offs;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 >>> 11;
      var $bf_clear=$60 & 1;
      var $tobool43=(($bf_clear)|0)!=0;
      if ($tobool43) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $61=HEAP32[((((5249092)|0))>>2)];
      var $tobool45=(($61)|0)!=0;
      if ($tobool45) { label = 43; break; } else { label = 28; break; }
    case 28: 
      var $62=HEAP32[((((5249156)|0))>>2)];
      var $63=$facet_addr;
      var $visitid=(($63+68)|0);
      HEAP32[(($visitid)>>2)]=$62;
      $ridge=0;
      var $64=$facet_addr;
      var $ridges=(($64+52)|0);
      var $65=HEAP32[(($ridges)>>2)];
      var $tobool47=(($65)|0)!=0;
      if ($tobool47) { label = 29; break; } else { label = 42; break; }
    case 29: 
      var $66=$facet_addr;
      var $ridges49=(($66+52)|0);
      var $67=HEAP32[(($ridges49)>>2)];
      var $e50=(($67+4)|0);
      var $arrayidx51=(($e50)|0);
      var $p52=$arrayidx51;
      var $68=$p52;
      $ridgep=$68;
      label = 30; break;
    case 30: 
      var $69=$ridgep;
      var $incdec_ptr54=(($69+4)|0);
      $ridgep=$incdec_ptr54;
      var $70=HEAP32[(($69)>>2)];
      $ridge=$70;
      var $tobool55=(($70)|0)!=0;
      if ($tobool55) { label = 31; break; } else { label = 41; break; }
    case 31: 
      var $71=$ridge;
      var $top=(($71+4)|0);
      var $72=HEAP32[(($top)>>2)];
      var $73=$facet_addr;
      var $cmp57=(($72)|0)==(($73)|0);
      if ($cmp57) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $74=$ridge;
      var $bottom=(($74+8)|0);
      var $75=HEAP32[(($bottom)>>2)];
      var $cond = $75;label = 34; break;
    case 33: 
      var $76=$ridge;
      var $top58=(($76+4)|0);
      var $77=HEAP32[(($top58)>>2)];
      var $cond = $77;label = 34; break;
    case 34: 
      var $cond;
      $neighbor=$cond;
      var $78=$neighbor;
      var $visitid59=(($78+68)|0);
      var $79=HEAP32[(($visitid59)>>2)];
      var $80=HEAP32[((((5249156)|0))>>2)];
      var $cmp60=(($79)|0)!=(($80)|0);
      if ($cmp60) { label = 35; break; } else { label = 40; break; }
    case 35: 
      var $81=HEAP32[((((5247004)|0))>>2)];
      var $tobool62=(($81)|0)!=0;
      if ($tobool62) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $82=$fp_addr;
      var $83=$facet_addr;
      var $84=$neighbor;
      var $85=$ridge;
      var $vertices64=(($85)|0);
      var $86=HEAP32[(($vertices64)>>2)];
      var $arraydecay=(($black)|0);
      _qh_printhyperplaneintersection($82, $83, $84, $86, $arraydecay);
      label = 37; break;
    case 37: 
      var $87=HEAP32[((((5247308)|0))>>2)];
      var $tobool66=(($87)|0)!=0;
      if ($tobool66) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $88=$ridge;
      var $vertices68=(($88)|0);
      var $89=HEAP32[(($vertices68)>>2)];
      var $e69=(($89+4)|0);
      var $arrayidx70=(($e69)|0);
      var $p71=$arrayidx70;
      var $90=HEAP32[(($p71)>>2)];
      var $91=$90;
      $vertexA=$91;
      var $92=$ridge;
      var $vertices72=(($92)|0);
      var $93=HEAP32[(($vertices72)>>2)];
      var $e73=(($93+4)|0);
      var $arrayidx74=(($e73+4)|0);
      var $p75=$arrayidx74;
      var $94=HEAP32[(($p75)>>2)];
      var $95=$94;
      $vertexB=$95;
      var $96=$fp_addr;
      var $97=$vertexA;
      var $point76=(($97+8)|0);
      var $98=HEAP32[(($point76)>>2)];
      var $99=$vertexB;
      var $point77=(($99+8)|0);
      var $100=HEAP32[(($point77)>>2)];
      var $arraydecay78=(($green)|0);
      _qh_printline3geom($96, $98, $100, $arraydecay78);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 30; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet3geom_nonsimplicial["X"]=1;

function _qh_printfacet4geom_simplicial($fp, $facet, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $color_addr;
      var $vertices=__stackBase__;
      var $neighbor;
      var $neighborp;
      var $vertex;
      var $vertexp;
      var $k;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $color_addr=$color;
      var $0=HEAP32[((((5249156)|0))>>2)];
      var $1=$facet_addr;
      var $visitid=(($1+68)|0);
      HEAP32[(($visitid)>>2)]=$0;
      var $2=HEAP32[((((5247176)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$facet_addr;
      var $4=$3;
      var $bf_field_offs=(($4+76)|0);
      var $5=$bf_field_offs;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $bf_clear=$7 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=HEAP32[((((5249092)|0))>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 35; break;
    case 6: 
      $neighbor=0;
      var $9=$facet_addr;
      var $neighbors=(($9+56)|0);
      var $10=HEAP32[(($neighbors)>>2)];
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 35; break; }
    case 7: 
      var $11=$facet_addr;
      var $neighbors5=(($11+56)|0);
      var $12=HEAP32[(($neighbors5)>>2)];
      var $e=(($12+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $13=$p;
      $neighborp=$13;
      label = 8; break;
    case 8: 
      var $14=$neighborp;
      var $incdec_ptr=(($14+4)|0);
      $neighborp=$incdec_ptr;
      var $15=HEAP32[(($14)>>2)];
      $neighbor=$15;
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 34; break; }
    case 9: 
      var $16=$neighbor;
      var $visitid7=(($16+68)|0);
      var $17=HEAP32[(($visitid7)>>2)];
      var $18=HEAP32[((((5249156)|0))>>2)];
      var $cmp=(($17)|0)==(($18)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 8; break;
    case 11: 
      var $19=HEAP32[((((5247324)|0))>>2)];
      var $tobool10=(($19)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $20=$neighbor;
      var $21=$20;
      var $bf_field_offs12=(($21+76)|0);
      var $22=$bf_field_offs12;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 19;
      var $bf_clear13=$24 & 1;
      var $tobool14=(($bf_clear13)|0)!=0;
      if ($tobool14) { label = 14; break; } else { label = 13; break; }
    case 13: 
      label = 8; break;
    case 14: 
      var $25=$facet_addr;
      var $vertices17=(($25+48)|0);
      var $26=HEAP32[(($vertices17)>>2)];
      var $27=HEAP32[((((5247508)|0))>>2)];
      var $28=$neighborp;
      var $29=$28;
      var $30=$facet_addr;
      var $neighbors18=(($30+56)|0);
      var $31=HEAP32[(($neighbors18)>>2)];
      var $e19=(($31+4)|0);
      var $arrayidx20=(($e19+4)|0);
      var $p21=$arrayidx20;
      var $sub_ptr_lhs_cast=$29;
      var $sub_ptr_rhs_cast=$p21;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $call=_qh_setnew_delnthsorted($26, $27, $sub_ptr_div, 0);
      HEAP32[(($vertices)>>2)]=$call;
      var $32=HEAP32[((((5247004)|0))>>2)];
      var $tobool22=(($32)|0)!=0;
      if ($tobool22) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $33=$fp_addr;
      var $34=$facet_addr;
      var $35=$neighbor;
      var $36=HEAP32[(($vertices)>>2)];
      var $37=$color_addr;
      _qh_printhyperplaneintersection($33, $34, $35, $36, $37);
      label = 33; break;
    case 16: 
      var $38=HEAP32[((((5247008)|0))>>2)];
      var $cmp24=(($38)|0) >= 0;
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$fp_addr;
      var $40=$facet_addr;
      var $id=(($40+72)|0);
      var $41=HEAP32[(($id)>>2)];
      var $42=$neighbor;
      var $id26=(($42+72)|0);
      var $43=HEAP32[(($id26)>>2)];
      _qh_fprintf($39, 9119, ((5253372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,HEAP32[(((tempInt)+(4))>>2)]=$43,tempInt));
      label = 19; break;
    case 18: 
      var $44=HEAP32[((((5249128)|0))>>2)];
      var $inc=((($44)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc;
      var $45=$fp_addr;
      var $46=$facet_addr;
      var $id28=(($46+72)|0);
      var $47=HEAP32[(($id28)>>2)];
      var $48=$neighbor;
      var $id29=(($48+72)|0);
      var $49=HEAP32[(($id29)>>2)];
      _qh_fprintf($45, 9120, ((5253144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,HEAP32[(((tempInt)+(4))>>2)]=$49,tempInt));
      label = 19; break;
    case 19: 
      $vertex=0;
      var $50=HEAP32[(($vertices)>>2)];
      var $tobool31=(($50)|0)!=0;
      if ($tobool31) { label = 20; break; } else { label = 30; break; }
    case 20: 
      var $51=HEAP32[(($vertices)>>2)];
      var $e33=(($51+4)|0);
      var $arrayidx34=(($e33)|0);
      var $p35=$arrayidx34;
      var $52=$p35;
      $vertexp=$52;
      label = 21; break;
    case 21: 
      var $53=$vertexp;
      var $incdec_ptr37=(($53+4)|0);
      $vertexp=$incdec_ptr37;
      var $54=HEAP32[(($53)>>2)];
      $vertex=$54;
      var $tobool38=(($54)|0)!=0;
      if ($tobool38) { label = 22; break; } else { label = 29; break; }
    case 22: 
      $k=0;
      label = 23; break;
    case 23: 
      var $55=$k;
      var $56=HEAP32[((((5247508)|0))>>2)];
      var $cmp41=(($55)|0) < (($56)|0);
      if ($cmp41) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $57=$k;
      var $58=HEAP32[((((5247008)|0))>>2)];
      var $cmp43=(($57)|0)!=(($58)|0);
      if ($cmp43) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $59=$fp_addr;
      var $60=$k;
      var $61=$vertex;
      var $point=(($61+8)|0);
      var $62=HEAP32[(($point)>>2)];
      var $arrayidx45=(($62+($60<<3))|0);
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx45)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx45)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($59, 9121, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$63,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $64=$k;
      var $inc47=((($64)+(1))|0);
      $k=$inc47;
      label = 23; break;
    case 28: 
      var $65=$fp_addr;
      _qh_fprintf($65, 9122, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 21; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $66=HEAP32[((((5247008)|0))>>2)];
      var $cmp50=(($66)|0) >= 0;
      if ($cmp50) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $67=$fp_addr;
      var $68=$color_addr;
      var $arrayidx52=(($68)|0);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx52)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx52)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $70=$color_addr;
      var $arrayidx53=(($70+8)|0);
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $72=$color_addr;
      var $arrayidx54=(($72+16)|0);
      var $73=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx54)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx54)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($67, 9123, ((5253640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$69,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$71,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$73,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      _qh_setfree($vertices);
      label = 8; break;
    case 34: 
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet4geom_simplicial["X"]=1;

function _qh_printfacet4geom_nonsimplicial($fp, $facet, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $color_addr;
      var $neighbor;
      var $ridge;
      var $ridgep;
      var $vertex;
      var $vertexp;
      var $point;
      var $k;
      var $dist=__stackBase__;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $color_addr=$color;
      var $0=HEAP32[((((5249156)|0))>>2)];
      var $1=$facet_addr;
      var $visitid=(($1+68)|0);
      HEAP32[(($visitid)>>2)]=$0;
      var $2=HEAP32[((((5247176)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$facet_addr;
      var $4=$3;
      var $bf_field_offs=(($4+76)|0);
      var $5=$bf_field_offs;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $bf_clear=$7 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=HEAP32[((((5249092)|0))>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 38; break;
    case 6: 
      $ridge=0;
      var $9=$facet_addr;
      var $ridges=(($9+52)|0);
      var $10=HEAP32[(($ridges)>>2)];
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 38; break; }
    case 7: 
      var $11=$facet_addr;
      var $ridges5=(($11+52)|0);
      var $12=HEAP32[(($ridges5)>>2)];
      var $e=(($12+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $13=$p;
      $ridgep=$13;
      label = 8; break;
    case 8: 
      var $14=$ridgep;
      var $incdec_ptr=(($14+4)|0);
      $ridgep=$incdec_ptr;
      var $15=HEAP32[(($14)>>2)];
      $ridge=$15;
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 37; break; }
    case 9: 
      var $16=$ridge;
      var $top=(($16+4)|0);
      var $17=HEAP32[(($top)>>2)];
      var $18=$facet_addr;
      var $cmp=(($17)|0)==(($18)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$ridge;
      var $bottom=(($19+8)|0);
      var $20=HEAP32[(($bottom)>>2)];
      var $cond = $20;label = 12; break;
    case 11: 
      var $21=$ridge;
      var $top7=(($21+4)|0);
      var $22=HEAP32[(($top7)>>2)];
      var $cond = $22;label = 12; break;
    case 12: 
      var $cond;
      $neighbor=$cond;
      var $23=$neighbor;
      var $visitid8=(($23+68)|0);
      var $24=HEAP32[(($visitid8)>>2)];
      var $25=HEAP32[((((5249156)|0))>>2)];
      var $cmp9=(($24)|0)==(($25)|0);
      if ($cmp9) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 8; break;
    case 14: 
      var $26=HEAP32[((((5247324)|0))>>2)];
      var $tobool12=(($26)|0)!=0;
      if ($tobool12) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $27=$neighbor;
      var $28=$27;
      var $bf_field_offs14=(($28+76)|0);
      var $29=$bf_field_offs14;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 19;
      var $bf_clear15=$31 & 1;
      var $tobool16=(($bf_clear15)|0)!=0;
      if ($tobool16) { label = 17; break; } else { label = 16; break; }
    case 16: 
      label = 8; break;
    case 17: 
      var $32=HEAP32[((((5247004)|0))>>2)];
      var $tobool19=(($32)|0)!=0;
      if ($tobool19) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $33=$fp_addr;
      var $34=$facet_addr;
      var $35=$neighbor;
      var $36=$ridge;
      var $vertices=(($36)|0);
      var $37=HEAP32[(($vertices)>>2)];
      var $38=$color_addr;
      _qh_printhyperplaneintersection($33, $34, $35, $37, $38);
      label = 36; break;
    case 19: 
      var $39=HEAP32[((((5247008)|0))>>2)];
      var $cmp21=(($39)|0) >= 0;
      if ($cmp21) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $40=$fp_addr;
      var $41=$facet_addr;
      var $id=(($41+72)|0);
      var $42=HEAP32[(($id)>>2)];
      _qh_fprintf($40, 9114, ((5254116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$42,tempInt));
      label = 22; break;
    case 21: 
      var $43=HEAP32[((((5249128)|0))>>2)];
      var $inc=((($43)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc;
      var $44=$fp_addr;
      var $45=$ridge;
      var $46=$45;
      var $bf_field_offs24=(($46+12)|0);
      var $47=$bf_field_offs24;
      var $48=HEAP32[(($47)>>2)];
      var $bf_clear25=$48 & 16777215;
      var $49=$facet_addr;
      var $id26=(($49+72)|0);
      var $50=HEAP32[(($id26)>>2)];
      var $51=$neighbor;
      var $id27=(($51+72)|0);
      var $52=HEAP32[(($id27)>>2)];
      _qh_fprintf($44, 9115, ((5253880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear25,HEAP32[(((tempInt)+(4))>>2)]=$50,HEAP32[(((tempInt)+(8))>>2)]=$52,tempInt));
      label = 22; break;
    case 22: 
      $vertex=0;
      var $53=$ridge;
      var $vertices29=(($53)|0);
      var $54=HEAP32[(($vertices29)>>2)];
      var $tobool30=(($54)|0)!=0;
      if ($tobool30) { label = 23; break; } else { label = 33; break; }
    case 23: 
      var $55=$ridge;
      var $vertices32=(($55)|0);
      var $56=HEAP32[(($vertices32)>>2)];
      var $e33=(($56+4)|0);
      var $arrayidx34=(($e33)|0);
      var $p35=$arrayidx34;
      var $57=$p35;
      $vertexp=$57;
      label = 24; break;
    case 24: 
      var $58=$vertexp;
      var $incdec_ptr37=(($58+4)|0);
      $vertexp=$incdec_ptr37;
      var $59=HEAP32[(($58)>>2)];
      $vertex=$59;
      var $tobool38=(($59)|0)!=0;
      if ($tobool38) { label = 25; break; } else { label = 32; break; }
    case 25: 
      var $60=HEAP32[(((((5243428)|0)))>>2)];
      var $inc40=((($60)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc40;
      var $61=$vertex;
      var $point41=(($61+8)|0);
      var $62=HEAP32[(($point41)>>2)];
      var $63=$facet_addr;
      _qh_distplane($62, $63, $dist);
      var $64=$vertex;
      var $point42=(($64+8)|0);
      var $65=HEAP32[(($point42)>>2)];
      var $66=$facet_addr;
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_projectpoint($65, $66, $67);
      $point=$call;
      $k=0;
      label = 26; break;
    case 26: 
      var $68=$k;
      var $69=HEAP32[((((5247508)|0))>>2)];
      var $cmp44=(($68)|0) < (($69)|0);
      if ($cmp44) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $70=$k;
      var $71=HEAP32[((((5247008)|0))>>2)];
      var $cmp46=(($70)|0)!=(($71)|0);
      if ($cmp46) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $72=$fp_addr;
      var $73=$k;
      var $74=$point;
      var $arrayidx48=(($74+($73<<3))|0);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($72, 9116, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$75,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $76=$k;
      var $inc50=((($76)+(1))|0);
      $k=$inc50;
      label = 26; break;
    case 31: 
      var $77=$fp_addr;
      _qh_fprintf($77, 9117, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $78=$point;
      var $79=$78;
      var $80=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($79, $80);
      label = 24; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $81=HEAP32[((((5247008)|0))>>2)];
      var $cmp53=(($81)|0) >= 0;
      if ($cmp53) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $82=$fp_addr;
      var $83=$color_addr;
      var $arrayidx55=(($83)|0);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx55)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx55)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $85=$color_addr;
      var $arrayidx56=(($85+8)|0);
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx56)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx56)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $87=$color_addr;
      var $arrayidx57=(($87+16)|0);
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx57)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx57)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($82, 9118, ((5253640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$84,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$86,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$88,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 8; break;
    case 37: 
      label = 38; break;
    case 38: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet4geom_nonsimplicial["X"]=1;

function _qh_printfacet3vertex($fp, $facet, $format) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $format_addr;
      var $vertex;
      var $vertexp;
      var $vertices=__stackBase__;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $format_addr=$format;
      var $0=$facet_addr;
      var $call=_qh_facet3vertex($0);
      HEAP32[(($vertices)>>2)]=$call;
      var $1=$format_addr;
      var $cmp=(($1)|0)==17;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$fp_addr;
      var $3=HEAP32[(($vertices)>>2)];
      var $call1=_qh_setsize($3);
      _qh_fprintf($2, 9111, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call1,tempInt));
      label = 4; break;
    case 4: 
      $vertex=0;
      var $4=HEAP32[(($vertices)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $5=HEAP32[(($vertices)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $vertexp=$6;
      label = 6; break;
    case 6: 
      var $7=$vertexp;
      var $incdec_ptr=(($7+4)|0);
      $vertexp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $vertex=$8;
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$fp_addr;
      var $10=$vertex;
      var $point=(($10+8)|0);
      var $11=HEAP32[(($point)>>2)];
      var $call4=_qh_pointid($11);
      _qh_fprintf($9, 9112, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call4,tempInt));
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $12=$fp_addr;
      _qh_fprintf($12, 9113, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet3vertex["X"]=1;

function _qh_printfacetNvertex_simplicial($fp, $facet, $format) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $format_addr;
      var $vertex;
      var $vertexp;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $format_addr=$format;
      var $0=$format_addr;
      var $cmp=(($0)|0)==17;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$format_addr;
      var $cmp1=(($1)|0)==25;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$fp_addr;
      var $3=$facet_addr;
      var $vertices=(($3+48)|0);
      var $4=HEAP32[(($vertices)>>2)];
      var $call=_qh_setsize($4);
      _qh_fprintf($2, 9129, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,tempInt));
      label = 5; break;
    case 5: 
      var $5=$facet_addr;
      var $6=$5;
      var $bf_field_offs=(($6+76)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 12;
      var $bf_clear=$9 & 1;
      var $xor=$bf_clear ^ 0;
      var $tobool=(($xor)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $10=HEAP32[((((5247508)|0))>>2)];
      var $cmp3=(($10)|0) > 2;
      if ($cmp3) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $11=$facet_addr;
      var $12=$11;
      var $bf_field_offs4=(($12+76)|0);
      var $13=$bf_field_offs4;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 13;
      var $bf_clear5=$15 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 14; break; } else { label = 8; break; }
    case 8: 
      $vertex=0;
      var $16=$facet_addr;
      var $vertices8=(($16+48)|0);
      var $17=HEAP32[(($vertices8)>>2)];
      var $tobool9=(($17)|0)!=0;
      if ($tobool9) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $18=$facet_addr;
      var $vertices11=(($18+48)|0);
      var $19=HEAP32[(($vertices11)>>2)];
      var $e=(($19+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $20=$p;
      $vertexp=$20;
      label = 10; break;
    case 10: 
      var $21=$vertexp;
      var $incdec_ptr=(($21+4)|0);
      $vertexp=$incdec_ptr;
      var $22=HEAP32[(($21)>>2)];
      $vertex=$22;
      var $tobool12=(($22)|0)!=0;
      if ($tobool12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$fp_addr;
      var $24=$vertex;
      var $point=(($24+8)|0);
      var $25=HEAP32[(($point)>>2)];
      var $call13=_qh_pointid($25);
      _qh_fprintf($23, 9130, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call13,tempInt));
      label = 10; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 27; break;
    case 14: 
      $vertex=0;
      var $26=$facet_addr;
      var $vertices15=(($26+48)|0);
      var $27=HEAP32[(($vertices15)>>2)];
      var $tobool16=(($27)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 26; break; }
    case 15: 
      var $28=$facet_addr;
      var $vertices18=(($28+48)|0);
      var $29=HEAP32[(($vertices18)>>2)];
      var $e19=(($29+4)|0);
      var $arrayidx20=(($e19+4)|0);
      var $p21=$arrayidx20;
      var $30=$p21;
      $vertexp=$30;
      label = 16; break;
    case 16: 
      var $31=$vertexp;
      var $32=HEAP32[(($31)>>2)];
      $vertex=$32;
      var $tobool23=(($32)|0)!=0;
      if ($tobool23) { label = 17; break; } else { label = 25; break; }
    case 17: 
      var $33=$fp_addr;
      var $34=$vertex;
      var $point25=(($34+8)|0);
      var $35=HEAP32[(($point25)>>2)];
      var $call26=_qh_pointid($35);
      _qh_fprintf($33, 9131, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call26,tempInt));
      label = 18; break;
    case 18: 
      var $36=$vertexp;
      var $37=$facet_addr;
      var $vertices27=(($37+48)|0);
      var $38=HEAP32[(($vertices27)>>2)];
      var $e28=(($38+4)|0);
      var $arrayidx29=(($e28)|0);
      var $p30=$arrayidx29;
      var $39=$p30;
      var $cmp31=(($36)|0)==(($39)|0);
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$vertexp;
      var $add_ptr=(($40+8)|0);
      $vertexp=$add_ptr;
      var $cond42 = $add_ptr;label = 24; break;
    case 20: 
      var $41=$vertexp;
      var $42=$facet_addr;
      var $vertices32=(($42+48)|0);
      var $43=HEAP32[(($vertices32)>>2)];
      var $e33=(($43+4)|0);
      var $arrayidx34=(($e33+4)|0);
      var $p35=$arrayidx34;
      var $44=$p35;
      var $cmp36=(($41)|0)==(($44)|0);
      if ($cmp36) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $45=$vertexp;
      var $incdec_ptr38=((($45)-(4))|0);
      $vertexp=$incdec_ptr38;
      var $cond = $45;label = 23; break;
    case 22: 
      var $46=$vertexp;
      var $incdec_ptr40=(($46+4)|0);
      $vertexp=$incdec_ptr40;
      var $cond = $46;label = 23; break;
    case 23: 
      var $cond;
      var $cond42 = $cond;label = 24; break;
    case 24: 
      var $cond42;
      label = 16; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $47=$fp_addr;
      _qh_fprintf($47, 9132, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacetNvertex_simplicial["X"]=1;

function _qh_printfacetNvertex_nonsimplicial($fp, $facet, $id, $format) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $id_addr;
      var $format_addr;
      var $vertex;
      var $vertexp;
      var $ridge;
      var $ridgep;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $id_addr=$id;
      $format_addr=$format;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 11;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=HEAP32[((((5249092)|0))>>2)];
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 32; break;
    case 5: 
      $ridge=0;
      var $6=$facet_addr;
      var $ridges=(($6+52)|0);
      var $7=HEAP32[(($ridges)>>2)];
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 32; break; }
    case 6: 
      var $8=$facet_addr;
      var $ridges4=(($8+52)|0);
      var $9=HEAP32[(($ridges4)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=$p;
      $ridgep=$10;
      label = 7; break;
    case 7: 
      var $11=$ridgep;
      var $incdec_ptr=(($11+4)|0);
      $ridgep=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $ridge=$12;
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 31; break; }
    case 8: 
      var $13=$format_addr;
      var $cmp=(($13)|0)==25;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$fp_addr;
      var $15=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($14, 9124, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15,tempInt));
      label = 10; break;
    case 10: 
      var $16=$fp_addr;
      var $17=$id_addr;
      _qh_fprintf($16, 9125, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
      var $18=$ridge;
      var $top=(($18+4)|0);
      var $19=HEAP32[(($top)>>2)];
      var $20=$facet_addr;
      var $cmp8=(($19)|0)==(($20)|0);
      var $conv=(($cmp8)&1);
      var $xor=$conv ^ 0;
      var $tobool9=(($xor)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 17; break; }
    case 11: 
      $vertex=0;
      var $21=$ridge;
      var $vertices=(($21)|0);
      var $22=HEAP32[(($vertices)>>2)];
      var $tobool11=(($22)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $23=$ridge;
      var $vertices13=(($23)|0);
      var $24=HEAP32[(($vertices13)>>2)];
      var $e14=(($24+4)|0);
      var $arrayidx15=(($e14)|0);
      var $p16=$arrayidx15;
      var $25=$p16;
      $vertexp=$25;
      label = 13; break;
    case 13: 
      var $26=$vertexp;
      var $incdec_ptr18=(($26+4)|0);
      $vertexp=$incdec_ptr18;
      var $27=HEAP32[(($26)>>2)];
      $vertex=$27;
      var $tobool19=(($27)|0)!=0;
      if ($tobool19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$fp_addr;
      var $29=$vertex;
      var $point=(($29+8)|0);
      var $30=HEAP32[(($point)>>2)];
      var $call=_qh_pointid($30);
      _qh_fprintf($28, 9126, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,tempInt));
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 30; break;
    case 17: 
      $vertex=0;
      var $31=$ridge;
      var $vertices22=(($31)|0);
      var $32=HEAP32[(($vertices22)>>2)];
      var $tobool23=(($32)|0)!=0;
      if ($tobool23) { label = 18; break; } else { label = 29; break; }
    case 18: 
      var $33=$ridge;
      var $vertices25=(($33)|0);
      var $34=HEAP32[(($vertices25)>>2)];
      var $e26=(($34+4)|0);
      var $arrayidx27=(($e26+4)|0);
      var $p28=$arrayidx27;
      var $35=$p28;
      $vertexp=$35;
      label = 19; break;
    case 19: 
      var $36=$vertexp;
      var $37=HEAP32[(($36)>>2)];
      $vertex=$37;
      var $tobool30=(($37)|0)!=0;
      if ($tobool30) { label = 20; break; } else { label = 28; break; }
    case 20: 
      var $38=$fp_addr;
      var $39=$vertex;
      var $point32=(($39+8)|0);
      var $40=HEAP32[(($point32)>>2)];
      var $call33=_qh_pointid($40);
      _qh_fprintf($38, 9127, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call33,tempInt));
      label = 21; break;
    case 21: 
      var $41=$vertexp;
      var $42=$ridge;
      var $vertices34=(($42)|0);
      var $43=HEAP32[(($vertices34)>>2)];
      var $e35=(($43+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      var $44=$p37;
      var $cmp38=(($41)|0)==(($44)|0);
      if ($cmp38) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $45=$vertexp;
      var $add_ptr=(($45+8)|0);
      $vertexp=$add_ptr;
      var $cond51 = $add_ptr;label = 27; break;
    case 23: 
      var $46=$vertexp;
      var $47=$ridge;
      var $vertices40=(($47)|0);
      var $48=HEAP32[(($vertices40)>>2)];
      var $e41=(($48+4)|0);
      var $arrayidx42=(($e41+4)|0);
      var $p43=$arrayidx42;
      var $49=$p43;
      var $cmp44=(($46)|0)==(($49)|0);
      if ($cmp44) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $50=$vertexp;
      var $incdec_ptr47=((($50)-(4))|0);
      $vertexp=$incdec_ptr47;
      var $cond = $50;label = 26; break;
    case 25: 
      var $51=$vertexp;
      var $incdec_ptr49=(($51+4)|0);
      $vertexp=$incdec_ptr49;
      var $cond = $51;label = 26; break;
    case 26: 
      var $cond;
      var $cond51 = $cond;label = 27; break;
    case 27: 
      var $cond51;
      label = 19; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $52=$fp_addr;
      _qh_fprintf($52, 9128, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 31: 
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacetNvertex_nonsimplicial["X"]=1;

function _qh_printfacet2math($fp, $facet, $format, $notfirst) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $format_addr;
      var $notfirst_addr;
      var $point0=__stackBase__;
      var $point1=(__stackBase__)+(4);
      var $mindist=(__stackBase__)+(8);
      var $pointfmt;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $format_addr=$format;
      $notfirst_addr=$notfirst;
      var $0=$facet_addr;
      _qh_facet2point($0, $point0, $point1, $mindist);
      var $1=$notfirst_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$fp_addr;
      _qh_fprintf($2, 9096, ((5258352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $3=$format_addr;
      var $cmp=(($3)|0)==13;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $pointfmt=((5258184)|0);
      label = 7; break;
    case 6: 
      $pointfmt=((5257820)|0);
      label = 7; break;
    case 7: 
      var $4=$fp_addr;
      var $5=$pointfmt;
      var $6=HEAP32[(($point0)>>2)];
      var $arrayidx=(($6)|0);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $8=HEAP32[(($point0)>>2)];
      var $arrayidx3=(($8+8)|0);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=HEAP32[(($point1)>>2)];
      var $arrayidx4=(($10)|0);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $12=HEAP32[(($point1)>>2)];
      var $arrayidx5=(($12+8)|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($4, 9097, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$11,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $14=HEAP32[(($point1)>>2)];
      var $15=$14;
      var $16=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($15, $16);
      var $17=HEAP32[(($point0)>>2)];
      var $18=$17;
      var $19=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($18, $19);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet2math["X"]=1;

function _qh_printfacet3math($fp, $facet, $format, $notfirst) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $format_addr;
      var $notfirst_addr;
      var $vertex;
      var $vertexp;
      var $points=__stackBase__;
      var $vertices=(__stackBase__)+(4);
      var $point;
      var $pointp;
      var $firstpoint;
      var $dist=(__stackBase__)+(8);
      var $pointfmt;
      var $endfmt;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $format_addr=$format;
      $notfirst_addr=$notfirst;
      $firstpoint=1;
      var $0=$notfirst_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$fp_addr;
      _qh_fprintf($1, 9105, ((5256116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$facet_addr;
      var $call=_qh_facet3vertex($2);
      HEAP32[(($vertices)>>2)]=$call;
      var $3=HEAP32[(($vertices)>>2)];
      var $call1=_qh_setsize($3);
      var $call2=_qh_settemp($call1);
      HEAP32[(($points)>>2)]=$call2;
      $vertex=0;
      var $4=HEAP32[(($vertices)>>2)];
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $5=HEAP32[(($vertices)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $vertexp=$6;
      label = 6; break;
    case 6: 
      var $7=$vertexp;
      var $incdec_ptr=(($7+4)|0);
      $vertexp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $vertex=$8;
      var $tobool5=(($8)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $10=$vertex;
      var $point6=(($10+8)|0);
      var $11=HEAP32[(($point6)>>2)];
      var $12=$facet_addr;
      _qh_distplane($11, $12, $dist);
      var $13=$vertex;
      var $point7=(($13+8)|0);
      var $14=HEAP32[(($point7)>>2)];
      var $15=$facet_addr;
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call8=_qh_projectpoint($14, $15, $16);
      $point=$call8;
      var $17=$point;
      var $18=$17;
      _qh_setappend($points, $18);
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $19=$format_addr;
      var $cmp=(($19)|0)==13;
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$fp_addr;
      _qh_fprintf($20, 9106, ((5255768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $pointfmt=((5255556)|0);
      $endfmt=((5255372)|0);
      label = 12; break;
    case 11: 
      var $21=$fp_addr;
      _qh_fprintf($21, 9107, ((5255132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $pointfmt=((5254724)|0);
      $endfmt=((5254540)|0);
      label = 12; break;
    case 12: 
      $point=0;
      var $22=HEAP32[(($points)>>2)];
      var $tobool12=(($22)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $23=HEAP32[(($points)>>2)];
      var $e14=(($23+4)|0);
      var $arrayidx15=(($e14)|0);
      var $p16=$arrayidx15;
      var $24=$p16;
      $pointp=$24;
      label = 14; break;
    case 14: 
      var $25=$pointp;
      var $incdec_ptr18=(($25+4)|0);
      $pointp=$incdec_ptr18;
      var $26=HEAP32[(($25)>>2)];
      $point=$26;
      var $tobool19=(($26)|0)!=0;
      if ($tobool19) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $27=$firstpoint;
      var $tobool21=(($27)|0)!=0;
      if ($tobool21) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $firstpoint=0;
      label = 18; break;
    case 17: 
      var $28=$fp_addr;
      _qh_fprintf($28, 9108, ((5256116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 18; break;
    case 18: 
      var $29=$fp_addr;
      var $30=$pointfmt;
      var $31=$point;
      var $arrayidx25=(($31)|0);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx25)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx25)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$point;
      var $arrayidx26=(($33+8)|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx26)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx26)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $35=$point;
      var $arrayidx27=(($35+16)|0);
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx27)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx27)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($29, 9109, $30, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$32,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$36,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 14; break;
    case 19: 
      label = 20; break;
    case 20: 
      $point=0;
      var $37=HEAP32[(($points)>>2)];
      var $tobool30=(($37)|0)!=0;
      if ($tobool30) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $38=HEAP32[(($points)>>2)];
      var $e32=(($38+4)|0);
      var $arrayidx33=(($e32)|0);
      var $p34=$arrayidx33;
      var $39=$p34;
      $pointp=$39;
      label = 22; break;
    case 22: 
      var $40=$pointp;
      var $incdec_ptr36=(($40+4)|0);
      $pointp=$incdec_ptr36;
      var $41=HEAP32[(($40)>>2)];
      $point=$41;
      var $tobool37=(($41)|0)!=0;
      if ($tobool37) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $42=$point;
      var $43=$42;
      var $44=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($43, $44);
      label = 22; break;
    case 24: 
      label = 25; break;
    case 25: 
      _qh_settempfree($points);
      _qh_settempfree($vertices);
      var $45=$fp_addr;
      var $46=$endfmt;
      _qh_fprintf($45, 9110, $46, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet3math["X"]=1;

function _qh_printpoint($fp, $string, $point) {
  var label = 0;


  var $fp_addr;
  var $string_addr;
  var $point_addr;
  var $id;
  $fp_addr=$fp;
  $string_addr=$string;
  $point_addr=$point;
  var $0=$point_addr;
  var $call=_qh_pointid($0);
  $id=$call;
  var $1=$fp_addr;
  var $2=$string_addr;
  var $3=HEAP32[((((5247508)|0))>>2)];
  var $4=$point_addr;
  var $5=$id;
  _qh_printpointid($1, $2, $3, $4, $5);

  return;
}


function _qh_printbegin($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $numfacets=__stackBase__;
      var $numsimplicial=(__stackBase__)+(4);
      var $numridges=(__stackBase__)+(8);
      var $totneighbors=(__stackBase__)+(12);
      var $numcoplanars=(__stackBase__)+(16);
      var $numtricoplanars=(__stackBase__)+(20);
      var $i;
      var $num=(__stackBase__)+(24);
      var $facet;
      var $facetp;
      var $vertex;
      var $vertexp;
      var $vertices=(__stackBase__)+(28);
      var $point;
      var $pointp;
      var $pointtemp;
      $fp_addr=$fp;
      $format_addr=$format;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      HEAP32[((((5249132)|0))>>2)]=0;
      var $0=$facetlist_addr;
      var $1=$facets_addr;
      var $2=$printall_addr;
      _qh_countfacets($0, $1, $2, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
      var $3=$format_addr;
      if ((($3)|0)==0) {
        label = 3; break;
      }
      else if ((($3)|0)==1) {
        label = 4; break;
      }
      else if ((($3)|0)==3) {
        label = 5; break;
      }
      else if ((($3)|0)==4) {
        label = 6; break;
      }
      else if ((($3)|0)==5 | (($3)|0)==6) {
        label = 9; break;
      }
      else if ((($3)|0)==7) {
        label = 12; break;
      }
      else if ((($3)|0)==8) {
        label = 196; break;
      }
      else if ((($3)|0)==14) {
        label = 197; break;
      }
      else if ((($3)|0)==9 | (($3)|0)==11 | (($3)|0)==12) {
        label = 204; break;
      }
      else if ((($3)|0)==15 | (($3)|0)==13) {
        label = 208; break;
      }
      else if ((($3)|0)==16) {
        label = 219; break;
      }
      else if ((($3)|0)==19) {
        label = 220; break;
      }
      else if ((($3)|0)==10) {
        label = 221; break;
      }
      else if ((($3)|0)==17 | (($3)|0)==25) {
        label = 222; break;
      }
      else if ((($3)|0)==20) {
        label = 252; break;
      }
      else if ((($3)|0)==21) {
        label = 253; break;
      }
      else if ((($3)|0)==26) {
        label = 259; break;
      }
      else if ((($3)|0)==24) {
        label = 260; break;
      }
      else {
      label = 261; break;
      }
      
    case 3: 
      label = 263; break;
    case 4: 
      var $4=$fp_addr;
      var $5=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($4, 9033, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      label = 263; break;
    case 5: 
      var $6=$fp_addr;
      var $7=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($6, 9034, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
      label = 263; break;
    case 6: 
      var $8=HEAP32[((((5249036)|0))>>2)];
      var $cmp=(($8)|0)==0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _qh_clearcenters(2);
      label = 8; break;
    case 8: 
      var $9=$fp_addr;
      var $10=HEAP32[((((5247508)|0))>>2)];
      var $11=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($9, 9035, ((5277120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$11,tempInt));
      label = 263; break;
    case 9: 
      var $12=$facetlist_addr;
      var $tobool=(($12)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=$fp_addr;
      var $14=$facetlist_addr;
      var $15=$facets_addr;
      var $16=$printall_addr;
      _qh_printvertexlist($13, ((5276684)|0), $14, $15, $16);
      label = 11; break;
    case 11: 
      label = 263; break;
    case 12: 
      var $17=HEAP32[((((5247508)|0))>>2)];
      var $cmp8=(($17)|0) > 4;
      if ($cmp8) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 262; break;
    case 14: 
      var $18=HEAP32[((((5247476)|0))>>2)];
      var $tobool11=(($18)|0)!=0;
      if ($tobool11) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $19=HEAP32[((((5247508)|0))>>2)];
      var $cmp12=(($19)|0) > 3;
      if ($cmp12) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 262; break;
    case 17: 
      var $20=HEAP32[((((5247508)|0))>>2)];
      var $cmp15=(($20)|0)==2;
      if ($cmp15) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $21=HEAP32[((((5247308)|0))>>2)];
      var $tobool17=(($21)|0)!=0;
      if ($tobool17) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $22=HEAP32[((((5247004)|0))>>2)];
      var $tobool18=(($22)|0)!=0;
      if ($tobool18) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($23, 7049, ((5276288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 21; break;
    case 21: 
      var $24=HEAP32[((((5247508)|0))>>2)];
      var $cmp21=(($24)|0)==4;
      if ($cmp21) { label = 22; break; } else { label = 27; break; }
    case 22: 
      var $25=HEAP32[((((5247168)|0))>>2)];
      var $tobool23=(($25)|0)!=0;
      if ($tobool23) { label = 26; break; } else { label = 23; break; }
    case 23: 
      var $26=HEAP32[((((5247184)|0))>>2)];
      var $tobool25=(($26)|0)!=0;
      if ($tobool25) { label = 26; break; } else { label = 24; break; }
    case 24: 
      var $27=HEAP32[((((5247156)|0))>>2)];
      var $cmp27=(($27)|0)==4;
      if ($cmp27) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $28=HEAP32[((((5247148)|0))>>2)];
      var $tobool29=(($28)|0)!=0;
      if ($tobool29) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $29=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($29, 7050, ((5275704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 27; break;
    case 27: 
      var $30=HEAP32[((((5247156)|0))>>2)];
      var $cmp32=(($30)|0)==4;
      if ($cmp32) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $31=HEAP32[((((5247312)|0))>>2)];
      var $tobool34=(($31)|0)!=0;
      if ($tobool34) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $32=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($32, 7051, ((5274916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 30; break;
    case 30: 
      var $33=HEAP32[((((5247156)|0))>>2)];
      var $cmp37=(($33)|0)==4;
      if ($cmp37) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $34=HEAP32[((((5247004)|0))>>2)];
      var $tobool39=(($34)|0)!=0;
      if ($tobool39) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $35=HEAP32[((((5247176)|0))>>2)];
      var $tobool41=(($35)|0)!=0;
      if ($tobool41) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $36=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($36, 7052, ((5274336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 34; break;
    case 34: 
      var $37=HEAP32[((((5247156)|0))>>2)];
      var $cmp44=(($37)|0)==2;
      if ($cmp44) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $38=$fp_addr;
      _qh_fprintf($38, 9036, ((5273796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      label = 55; break;
    case 36: 
      var $39=HEAP32[((((5247156)|0))>>2)];
      var $cmp46=(($39)|0)==3;
      if ($cmp46) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $40=$fp_addr;
      _qh_fprintf($40, 9037, ((5273244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      label = 54; break;
    case 38: 
      var $41=HEAP32[((((5247156)|0))>>2)];
      var $cmp49=(($41)|0)==4;
      if ($cmp49) { label = 39; break; } else { label = 53; break; }
    case 39: 
      var $42=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($42)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      HEAP32[(($num)>>2)]=0;
      var $43=$facetlist_addr;
      var $tobool51=(($43)|0)!=0;
      if ($tobool51) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $44=$facetlist_addr;
      $facet=$44;
      label = 41; break;
    case 41: 
      var $45=$facet;
      var $tobool53=(($45)|0)!=0;
      if ($tobool53) { label = 42; break; } else { var $48 = 0;label = 43; break; }
    case 42: 
      var $46=$facet;
      var $next=(($46+44)|0);
      var $47=HEAP32[(($next)>>2)];
      var $tobool54=(($47)|0)!=0;
      var $48 = $tobool54;label = 43; break;
    case 43: 
      var $48;
      if ($48) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $49=$facet;
      var $50=$printall_addr;
      _qh_printend4geom(0, $49, $num, $50);
      label = 45; break;
    case 45: 
      var $51=$facet;
      var $next55=(($51+44)|0);
      var $52=HEAP32[(($next55)>>2)];
      $facet=$52;
      label = 41; break;
    case 46: 
      label = 47; break;
    case 47: 
      $facet=0;
      var $53=$facets_addr;
      var $tobool57=(($53)|0)!=0;
      if ($tobool57) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $54=$facets_addr;
      var $e=(($54+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $55=$p;
      $facetp=$55;
      label = 49; break;
    case 49: 
      var $56=$facetp;
      var $incdec_ptr=(($56+4)|0);
      $facetp=$incdec_ptr;
      var $57=HEAP32[(($56)>>2)];
      $facet=$57;
      var $tobool60=(($57)|0)!=0;
      if ($tobool60) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $58=$facet;
      var $59=$printall_addr;
      _qh_printend4geom(0, $58, $num, $59);
      label = 49; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $60=HEAP32[(($num)>>2)];
      HEAP32[((((5249272)|0))>>2)]=$60;
      HEAP32[((((5249128)|0))>>2)]=0;
      var $61=$fp_addr;
      _qh_fprintf($61, 9038, ((5272704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $62=HEAP32[((((5247160)|0))>>2)];
      var $tobool67=(($62)|0)!=0;
      if ($tobool67) { label = 56; break; } else { label = 92; break; }
    case 56: 
      var $63=HEAP32[((((5249132)|0))>>2)];
      var $inc69=((($63)+(1))|0);
      HEAP32[((((5249132)|0))>>2)]=$inc69;
      var $64=HEAP32[((((5247516)|0))>>2)];
      var $65=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($65);
      var $add=((($64)+($call))|0);
      HEAP32[(($num)>>2)]=$add;
      var $66=HEAP32[((((5247000)|0))>>2)];
      var $tobool70=(($66)|0)!=0;
      if ($tobool70) { label = 57; break; } else { label = 59; break; }
    case 57: 
      var $67=HEAP32[((((5246960)|0))>>2)];
      var $tobool72=(($67)|0)!=0;
      if ($tobool72) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $68=HEAP32[(($num)>>2)];
      var $dec=((($68)-(1))|0);
      HEAP32[(($num)>>2)]=$dec;
      label = 59; break;
    case 59: 
      var $69=HEAP32[((((5247156)|0))>>2)];
      var $cmp75=(($69)|0)==4;
      if ($cmp75) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $70=$fp_addr;
      var $71=HEAP32[(($num)>>2)];
      var $72=HEAP32[(($num)>>2)];
      _qh_fprintf($70, 9039, ((5272104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$71,HEAP32[(((tempInt)+(4))>>2)]=$72,tempInt));
      label = 62; break;
    case 61: 
      var $73=$fp_addr;
      var $74=HEAP32[(($num)>>2)];
      var $75=HEAP32[(($num)>>2)];
      _qh_fprintf($73, 9040, ((5271248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$74,HEAP32[(((tempInt)+(4))>>2)]=$75,tempInt));
      label = 62; break;
    case 62: 
      var $76=HEAP32[(($num)>>2)];
      $i=$76;
      label = 63; break;
    case 63: 
      var $77=$i;
      var $dec80=((($77)-(1))|0);
      $i=$dec80;
      var $tobool81=(($77)|0)!=0;
      if ($tobool81) { label = 64; break; } else { label = 67; break; }
    case 64: 
      var $78=$i;
      var $rem=((($78)|0))%(20);
      var $cmp83=(($rem)|0)==0;
      if ($cmp83) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $79=$fp_addr;
      _qh_fprintf($79, 9041, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 66; break;
    case 66: 
      var $80=$fp_addr;
      _qh_fprintf($80, 9042, ((5277964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 63; break;
    case 67: 
      var $81=$fp_addr;
      _qh_fprintf($81, 9043, ((5270832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $82=HEAP32[(($num)>>2)];
      var $sub=((($82)-(1))|0);
      $i=$sub;
      label = 68; break;
    case 68: 
      var $83=$i;
      var $dec88=((($83)-(1))|0);
      $i=$dec88;
      var $tobool89=(($83)|0)!=0;
      if ($tobool89) { label = 69; break; } else { label = 72; break; }
    case 69: 
      var $84=$i;
      var $rem91=((($84)|0))%(20);
      var $cmp92=(($rem91)|0)==0;
      if ($cmp92) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $85=$fp_addr;
      _qh_fprintf($85, 9044, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 71; break;
    case 71: 
      var $86=$fp_addr;
      _qh_fprintf($86, 9045, ((5270232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 68; break;
    case 72: 
      var $87=$fp_addr;
      _qh_fprintf($87, 9046, ((5269372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $88=HEAP32[((((5247520)|0))>>2)];
      $point=$88;
      var $89=HEAP32[((((5247520)|0))>>2)];
      var $90=HEAP32[((((5247508)|0))>>2)];
      var $91=HEAP32[((((5247516)|0))>>2)];
      var $mul=((($90)*($91))&-1);
      var $add_ptr=(($89+($mul<<3))|0);
      $pointtemp=$add_ptr;
      label = 73; break;
    case 73: 
      var $92=$point;
      var $93=$pointtemp;
      var $cmp97=(($92)>>>0) < (($93)>>>0);
      if ($cmp97) { label = 74; break; } else { label = 83; break; }
    case 74: 
      var $94=HEAP32[((((5247000)|0))>>2)];
      var $tobool99=(($94)|0)!=0;
      if ($tobool99) { label = 75; break; } else { label = 77; break; }
    case 75: 
      var $95=HEAP32[((((5246960)|0))>>2)];
      var $tobool101=(($95)|0)!=0;
      if ($tobool101) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $96=$point;
      var $call103=_qh_pointid($96);
      var $97=HEAP32[((((5247516)|0))>>2)];
      var $sub104=((($97)-(1))|0);
      var $cmp105=(($call103)|0)!=(($sub104)|0);
      if ($cmp105) { label = 77; break; } else { label = 81; break; }
    case 77: 
      var $98=HEAP32[((((5247156)|0))>>2)];
      var $cmp107=(($98)|0)==4;
      if ($cmp107) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $99=$fp_addr;
      var $100=$point;
      _qh_printpoint($99, 0, $100);
      label = 80; break;
    case 79: 
      var $101=$fp_addr;
      var $102=$point;
      _qh_printpoint3($101, $102);
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $103=HEAP32[((((5247508)|0))>>2)];
      var $104=$point;
      var $add_ptr113=(($104+($103<<3))|0);
      $point=$add_ptr113;
      label = 73; break;
    case 83: 
      $point=0;
      var $105=HEAP32[((((5249184)|0))>>2)];
      var $tobool115=(($105)|0)!=0;
      if ($tobool115) { label = 84; break; } else { label = 91; break; }
    case 84: 
      var $106=HEAP32[((((5249184)|0))>>2)];
      var $e117=(($106+4)|0);
      var $arrayidx118=(($e117)|0);
      var $p119=$arrayidx118;
      var $107=$p119;
      $pointp=$107;
      label = 85; break;
    case 85: 
      var $108=$pointp;
      var $incdec_ptr121=(($108+4)|0);
      $pointp=$incdec_ptr121;
      var $109=HEAP32[(($108)>>2)];
      $point=$109;
      var $tobool122=(($109)|0)!=0;
      if ($tobool122) { label = 86; break; } else { label = 90; break; }
    case 86: 
      var $110=HEAP32[((((5247156)|0))>>2)];
      var $cmp124=(($110)|0)==4;
      if ($cmp124) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $111=$fp_addr;
      var $112=$point;
      _qh_printpoint($111, 0, $112);
      label = 89; break;
    case 88: 
      var $113=$fp_addr;
      var $114=$point;
      _qh_printpoint3($113, $114);
      label = 89; break;
    case 89: 
      label = 85; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $115=$fp_addr;
      _qh_fprintf($115, 9047, ((5268520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 92; break;
    case 92: 
      var $116=HEAP32[((((5247156)|0))>>2)];
      var $cmp131=(($116)|0)==4;
      if ($cmp131) { label = 93; break; } else { label = 95; break; }
    case 93: 
      var $117=HEAP32[((((5247176)|0))>>2)];
      var $tobool133=(($117)|0)!=0;
      if ($tobool133) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $118=$fp_addr;
      var $119=HEAP32[((((5249272)|0))>>2)];
      var $mul135=((($119)*(3))&-1);
      var $120=HEAP32[((((5249272)|0))>>2)];
      _qh_fprintf($118, 9048, ((5268344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$mul135,HEAP32[(((tempInt)+(4))>>2)]=$120,tempInt));
      label = 95; break;
    case 95: 
      var $121=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul137=($121)*(2);
      (HEAPF64[(tempDoublePtr)>>3]=$mul137,HEAP32[((((5249108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $122=HEAP32[((((5247144)|0))>>2)];
      var $tobool138=(($122)|0)!=0;
      if ($tobool138) { label = 96; break; } else { label = 99; break; }
    case 96: 
      var $123=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $124=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $125=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add140=($124)+($125);
      var $cmp141=$123 < $add140;
      if ($cmp141) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $126=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $127=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add143=($126)+($127);
      (HEAPF64[(tempDoublePtr)>>3]=$add143,HEAP32[((((5249108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 98; break;
    case 98: 
      label = 104; break;
    case 99: 
      var $128=HEAP32[((((5247140)|0))>>2)];
      var $tobool146=(($128)|0)!=0;
      if ($tobool146) { label = 100; break; } else { label = 103; break; }
    case 100: 
      var $129=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $130=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $131=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add148=($130)+($131);
      var $cmp149=$129 < $add148;
      if ($cmp149) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $132=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $133=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add151=($132)+($133);
      (HEAPF64[(tempDoublePtr)>>3]=$add151,HEAP32[((((5249108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $134=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$134,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $135=HEAP32[((((5247312)|0))>>2)];
      var $136=HEAP32[((((5247152)|0))>>2)];
      var $add155=((($135)+($136))|0);
      var $tobool156=(($add155)|0)!=0;
      if ($tobool156) { label = 105; break; } else { label = 108; break; }
    case 105: 
      var $137=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $138=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul158=($138)*(0.02);
      var $cmp159=$137 < $mul158;
      if ($cmp159) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $139=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul161=($139)*(0.02);
      (HEAPF64[(tempDoublePtr)>>3]=$mul161,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $140=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp164=$140 < 8.988465674311579e+307;
      if ($cmp164) { label = 109; break; } else { label = 112; break; }
    case 109: 
      var $141=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $142=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub166=(1)-($142);
      var $143=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul167=($sub166)*($143);
      var $cmp168=$141 < $mul167;
      if ($cmp168) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $144=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub170=(1)-($144);
      var $145=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul171=($sub170)*($145);
      (HEAPF64[(tempDoublePtr)>>3]=$mul171,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 111; break;
    case 111: 
      label = 119; break;
    case 112: 
      var $146=HEAP32[((((5247144)|0))>>2)];
      var $tobool174=(($146)|0)!=0;
      if ($tobool174) { label = 118; break; } else { label = 113; break; }
    case 113: 
      var $147=HEAP32[((((5247140)|0))>>2)];
      var $tobool176=(($147)|0)!=0;
      if ($tobool176) { label = 114; break; } else { label = 118; break; }
    case 114: 
      var $148=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp178=$148 < 8.988465674311579e+307;
      if ($cmp178) { label = 115; break; } else { label = 118; break; }
    case 115: 
      var $149=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $150=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub180=(1)-($150);
      var $151=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul181=($sub180)*($151);
      var $cmp182=$149 < $mul181;
      if ($cmp182) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $152=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub184=(1)-($152);
      var $153=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul185=($sub184)*($153);
      (HEAPF64[(tempDoublePtr)>>3]=$mul185,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $154=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $155=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp189=$154 < $155;
      if ($cmp189) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $156=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$156,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 121; break;
    case 121: 
      var $157=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp192=$157 < 8.988465674311579e+307;
      if ($cmp192) { label = 122; break; } else { label = 123; break; }
    case 122: 
      var $158=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $159=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($159)|0);
      var $call194=Math.sqrt($conv);
      var $mul195=($158)*($call194);
      var $160=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add196=($160)+($mul195);
      (HEAPF64[(tempDoublePtr)>>3]=$add196,HEAP32[((((5249116)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249116)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 123; break;
    case 123: 
      var $161=HEAP32[((((5247156)|0))>>2)];
      var $cmp198=(($161)|0)!=4;
      if ($cmp198) { label = 124; break; } else { label = 195; break; }
    case 124: 
      var $162=HEAP32[((((5247152)|0))>>2)];
      var $tobool201=(($162)|0)!=0;
      if ($tobool201) { label = 127; break; } else { label = 125; break; }
    case 125: 
      var $163=HEAP32[((((5247312)|0))>>2)];
      var $tobool203=(($163)|0)!=0;
      if ($tobool203) { label = 127; break; } else { label = 126; break; }
    case 126: 
      var $164=HEAP32[((((5247148)|0))>>2)];
      var $tobool205=(($164)|0)!=0;
      if ($tobool205) { label = 127; break; } else { label = 195; break; }
    case 127: 
      var $165=$facetlist_addr;
      var $166=$facets_addr;
      var $167=$printall_addr;
      var $call207=_qh_facetvertices($165, $166, $167);
      HEAP32[(($vertices)>>2)]=$call207;
      var $168=HEAP32[((((5247312)|0))>>2)];
      var $tobool208=(($168)|0)!=0;
      if ($tobool208) { label = 128; break; } else { label = 130; break; }
    case 128: 
      var $169=HEAP32[((((5247156)|0))>>2)];
      var $cmp210=(($169)|0) <= 3;
      if ($cmp210) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $170=$fp_addr;
      var $171=HEAP32[(($vertices)>>2)];
      var $172=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printspheres($170, $171, $172);
      label = 130; break;
    case 130: 
      var $173=HEAP32[((((5247152)|0))>>2)];
      var $tobool214=(($173)|0)!=0;
      if ($tobool214) { label = 132; break; } else { label = 131; break; }
    case 131: 
      var $174=HEAP32[((((5247148)|0))>>2)];
      var $tobool216=(($174)|0)!=0;
      if ($tobool216) { label = 132; break; } else { label = 194; break; }
    case 132: 
      HEAP32[((((5249220)|0))>>2)]=1;
      var $175=HEAP32[((((5247152)|0))>>2)];
      var $tobool218=(($175)|0)!=0;
      if ($tobool218) { label = 133; break; } else { label = 140; break; }
    case 133: 
      var $176=HEAP32[((((5247312)|0))>>2)];
      var $tobool220=(($176)|0)!=0;
      if ($tobool220) { label = 140; break; } else { label = 134; break; }
    case 134: 
      $vertex=0;
      var $177=HEAP32[(($vertices)>>2)];
      var $tobool222=(($177)|0)!=0;
      if ($tobool222) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $178=HEAP32[(($vertices)>>2)];
      var $e224=(($178+4)|0);
      var $arrayidx225=(($e224)|0);
      var $p226=$arrayidx225;
      var $179=$p226;
      $vertexp=$179;
      label = 136; break;
    case 136: 
      var $180=$vertexp;
      var $incdec_ptr228=(($180+4)|0);
      $vertexp=$incdec_ptr228;
      var $181=HEAP32[(($180)>>2)];
      $vertex=$181;
      var $tobool229=(($181)|0)!=0;
      if ($tobool229) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $182=$fp_addr;
      var $183=$vertex;
      var $point231=(($183+8)|0);
      var $184=HEAP32[(($point231)>>2)];
      var $185=HEAP32[((((5248928)|0))>>2)];
      var $186=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printpointvect2($182, $184, 0, $185, $186);
      label = 136; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      var $187=$facetlist_addr;
      var $tobool235=(($187)|0)!=0;
      if ($tobool235) { label = 141; break; } else { label = 168; break; }
    case 141: 
      var $188=$facetlist_addr;
      $facet=$188;
      label = 142; break;
    case 142: 
      var $189=$facet;
      var $tobool238=(($189)|0)!=0;
      if ($tobool238) { label = 143; break; } else { var $192 = 0;label = 144; break; }
    case 143: 
      var $190=$facet;
      var $next240=(($190+44)|0);
      var $191=HEAP32[(($next240)>>2)];
      var $tobool241=(($191)|0)!=0;
      var $192 = $tobool241;label = 144; break;
    case 144: 
      var $192;
      if ($192) { label = 145; break; } else { label = 167; break; }
    case 145: 
      var $193=$printall_addr;
      var $tobool244=(($193)|0)!=0;
      if ($tobool244) { label = 148; break; } else { label = 146; break; }
    case 146: 
      var $194=$facet;
      var $call246=_qh_skipfacet($194);
      var $tobool247=(($call246)|0)!=0;
      if ($tobool247) { label = 147; break; } else { label = 148; break; }
    case 147: 
      label = 166; break;
    case 148: 
      var $195=$facet;
      var $normal=(($195+24)|0);
      var $196=HEAP32[(($normal)>>2)];
      var $tobool250=(($196)|0)!=0;
      if ($tobool250) { label = 150; break; } else { label = 149; break; }
    case 149: 
      label = 166; break;
    case 150: 
      var $197=HEAP32[((((5247148)|0))>>2)];
      var $tobool253=(($197)|0)!=0;
      if ($tobool253) { label = 151; break; } else { label = 153; break; }
    case 151: 
      var $198=HEAP32[((((5247156)|0))>>2)];
      var $cmp255=(($198)|0) <= 3;
      if ($cmp255) { label = 152; break; } else { label = 153; break; }
    case 152: 
      var $199=$fp_addr;
      var $200=$facet;
      var $201=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printcentrum($199, $200, $201);
      label = 153; break;
    case 153: 
      var $202=HEAP32[((((5247152)|0))>>2)];
      var $tobool259=(($202)|0)!=0;
      if ($tobool259) { label = 155; break; } else { label = 154; break; }
    case 154: 
      label = 166; break;
    case 155: 
      $point=0;
      var $203=$facet;
      var $coplanarset=(($203+64)|0);
      var $204=HEAP32[(($coplanarset)>>2)];
      var $tobool262=(($204)|0)!=0;
      if ($tobool262) { label = 156; break; } else { label = 160; break; }
    case 156: 
      var $205=$facet;
      var $coplanarset264=(($205+64)|0);
      var $206=HEAP32[(($coplanarset264)>>2)];
      var $e265=(($206+4)|0);
      var $arrayidx266=(($e265)|0);
      var $p267=$arrayidx266;
      var $207=$p267;
      $pointp=$207;
      label = 157; break;
    case 157: 
      var $208=$pointp;
      var $incdec_ptr269=(($208+4)|0);
      $pointp=$incdec_ptr269;
      var $209=HEAP32[(($208)>>2)];
      $point=$209;
      var $tobool270=(($209)|0)!=0;
      if ($tobool270) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $210=$fp_addr;
      var $211=$point;
      var $212=$facet;
      var $normal272=(($212+24)|0);
      var $213=HEAP32[(($normal272)>>2)];
      var $214=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printpointvect2($210, $211, $213, 0, $214);
      label = 157; break;
    case 159: 
      label = 160; break;
    case 160: 
      $point=0;
      var $215=$facet;
      var $outsideset=(($215+60)|0);
      var $216=HEAP32[(($outsideset)>>2)];
      var $tobool275=(($216)|0)!=0;
      if ($tobool275) { label = 161; break; } else { label = 165; break; }
    case 161: 
      var $217=$facet;
      var $outsideset277=(($217+60)|0);
      var $218=HEAP32[(($outsideset277)>>2)];
      var $e278=(($218+4)|0);
      var $arrayidx279=(($e278)|0);
      var $p280=$arrayidx279;
      var $219=$p280;
      $pointp=$219;
      label = 162; break;
    case 162: 
      var $220=$pointp;
      var $incdec_ptr282=(($220+4)|0);
      $pointp=$incdec_ptr282;
      var $221=HEAP32[(($220)>>2)];
      $point=$221;
      var $tobool283=(($221)|0)!=0;
      if ($tobool283) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $222=$fp_addr;
      var $223=$point;
      var $224=$facet;
      var $normal285=(($224+24)|0);
      var $225=HEAP32[(($normal285)>>2)];
      var $226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printpointvect2($222, $223, $225, 0, $226);
      label = 162; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      var $227=$facet;
      var $next289=(($227+44)|0);
      var $228=HEAP32[(($next289)>>2)];
      $facet=$228;
      label = 142; break;
    case 167: 
      label = 168; break;
    case 168: 
      $facet=0;
      var $229=$facets_addr;
      var $tobool292=(($229)|0)!=0;
      if ($tobool292) { label = 169; break; } else { label = 193; break; }
    case 169: 
      var $230=$facets_addr;
      var $e294=(($230+4)|0);
      var $arrayidx295=(($e294)|0);
      var $p296=$arrayidx295;
      var $231=$p296;
      $facetp=$231;
      label = 170; break;
    case 170: 
      var $232=$facetp;
      var $incdec_ptr298=(($232+4)|0);
      $facetp=$incdec_ptr298;
      var $233=HEAP32[(($232)>>2)];
      $facet=$233;
      var $tobool299=(($233)|0)!=0;
      if ($tobool299) { label = 171; break; } else { label = 192; break; }
    case 171: 
      var $234=$printall_addr;
      var $tobool301=(($234)|0)!=0;
      if ($tobool301) { label = 174; break; } else { label = 172; break; }
    case 172: 
      var $235=$facet;
      var $call303=_qh_skipfacet($235);
      var $tobool304=(($call303)|0)!=0;
      if ($tobool304) { label = 173; break; } else { label = 174; break; }
    case 173: 
      label = 170; break;
    case 174: 
      var $236=$facet;
      var $normal307=(($236+24)|0);
      var $237=HEAP32[(($normal307)>>2)];
      var $tobool308=(($237)|0)!=0;
      if ($tobool308) { label = 176; break; } else { label = 175; break; }
    case 175: 
      label = 170; break;
    case 176: 
      var $238=HEAP32[((((5247148)|0))>>2)];
      var $tobool311=(($238)|0)!=0;
      if ($tobool311) { label = 177; break; } else { label = 179; break; }
    case 177: 
      var $239=HEAP32[((((5247156)|0))>>2)];
      var $cmp313=(($239)|0) <= 3;
      if ($cmp313) { label = 178; break; } else { label = 179; break; }
    case 178: 
      var $240=$fp_addr;
      var $241=$facet;
      var $242=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printcentrum($240, $241, $242);
      label = 179; break;
    case 179: 
      var $243=HEAP32[((((5247152)|0))>>2)];
      var $tobool317=(($243)|0)!=0;
      if ($tobool317) { label = 181; break; } else { label = 180; break; }
    case 180: 
      label = 170; break;
    case 181: 
      $point=0;
      var $244=$facet;
      var $coplanarset320=(($244+64)|0);
      var $245=HEAP32[(($coplanarset320)>>2)];
      var $tobool321=(($245)|0)!=0;
      if ($tobool321) { label = 182; break; } else { label = 186; break; }
    case 182: 
      var $246=$facet;
      var $coplanarset323=(($246+64)|0);
      var $247=HEAP32[(($coplanarset323)>>2)];
      var $e324=(($247+4)|0);
      var $arrayidx325=(($e324)|0);
      var $p326=$arrayidx325;
      var $248=$p326;
      $pointp=$248;
      label = 183; break;
    case 183: 
      var $249=$pointp;
      var $incdec_ptr328=(($249+4)|0);
      $pointp=$incdec_ptr328;
      var $250=HEAP32[(($249)>>2)];
      $point=$250;
      var $tobool329=(($250)|0)!=0;
      if ($tobool329) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $251=$fp_addr;
      var $252=$point;
      var $253=$facet;
      var $normal331=(($253+24)|0);
      var $254=HEAP32[(($normal331)>>2)];
      var $255=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printpointvect2($251, $252, $254, 0, $255);
      label = 183; break;
    case 185: 
      label = 186; break;
    case 186: 
      $point=0;
      var $256=$facet;
      var $outsideset334=(($256+60)|0);
      var $257=HEAP32[(($outsideset334)>>2)];
      var $tobool335=(($257)|0)!=0;
      if ($tobool335) { label = 187; break; } else { label = 191; break; }
    case 187: 
      var $258=$facet;
      var $outsideset337=(($258+60)|0);
      var $259=HEAP32[(($outsideset337)>>2)];
      var $e338=(($259+4)|0);
      var $arrayidx339=(($e338)|0);
      var $p340=$arrayidx339;
      var $260=$p340;
      $pointp=$260;
      label = 188; break;
    case 188: 
      var $261=$pointp;
      var $incdec_ptr342=(($261+4)|0);
      $pointp=$incdec_ptr342;
      var $262=HEAP32[(($261)>>2)];
      $point=$262;
      var $tobool343=(($262)|0)!=0;
      if ($tobool343) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $263=$fp_addr;
      var $264=$point;
      var $265=$facet;
      var $normal345=(($265+24)|0);
      var $266=HEAP32[(($normal345)>>2)];
      var $267=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249116)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249116)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_printpointvect2($263, $264, $266, 0, $267);
      label = 188; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 170; break;
    case 192: 
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      _qh_settempfree($vertices);
      label = 195; break;
    case 195: 
      var $268=HEAP32[((((5249156)|0))>>2)];
      var $inc352=((($268)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc352;
      label = 263; break;
    case 196: 
      var $269=$fp_addr;
      var $270=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($269, 9049, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$270,tempInt));
      label = 263; break;
    case 197: 
      var $271=HEAP32[((((5247476)|0))>>2)];
      var $tobool355=(($271)|0)!=0;
      if ($tobool355) { label = 198; break; } else { label = 200; break; }
    case 198: 
      var $272=HEAP32[((((5247188)|0))>>2)];
      var $tobool357=(($272)|0)!=0;
      if ($tobool357) { label = 199; break; } else { label = 200; break; }
    case 199: 
      var $273=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($273, 7053, ((5268104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 200; break;
    case 200: 
      var $274=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear=$274 & 16777215;
      HEAP32[((((5249128)|0))>>2)]=$bf_clear;
      var $275=HEAP32[((((5247508)|0))>>2)];
      var $cmp360=(($275)|0) <= 3;
      if ($cmp360) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $276=$fp_addr;
      var $277=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($276, 9050, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$277,tempInt));
      label = 203; break;
    case 202: 
      var $278=$fp_addr;
      var $279=HEAP32[(($numsimplicial)>>2)];
      var $280=HEAP32[(($numridges)>>2)];
      var $add364=((($279)+($280))|0);
      _qh_fprintf($278, 9051, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add364,tempInt));
      label = 203; break;
    case 203: 
      label = 263; break;
    case 204: 
      var $281=HEAP32[((((5246976)|0))>>2)];
      var $tobool367=(($281)|0)!=0;
      if ($tobool367) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $282=$fp_addr;
      var $283=HEAP32[(($numfacets)>>2)];
      var $284=HEAP32[((((5247508)|0))>>2)];
      var $add369=((($284)+(1))|0);
      _qh_fprintf($282, 9052, ((5267904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),HEAP32[(((tempInt)+(8))>>2)]=$283,HEAP32[(((tempInt)+(12))>>2)]=$add369,tempInt));
      label = 207; break;
    case 206: 
      var $285=$fp_addr;
      var $286=HEAP32[((((5247508)|0))>>2)];
      var $add371=((($286)+(1))|0);
      var $287=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($285, 9053, ((5277120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add371,HEAP32[(((tempInt)+(4))>>2)]=$287,tempInt));
      label = 207; break;
    case 207: 
      label = 263; break;
    case 208: 
      var $288=HEAP32[((((5247508)|0))>>2)];
      var $cmp374=(($288)|0) > 3;
      if ($cmp374) { label = 209; break; } else { label = 210; break; }
    case 209: 
      label = 262; break;
    case 210: 
      var $289=HEAP32[((((5247476)|0))>>2)];
      var $tobool378=(($289)|0)!=0;
      if ($tobool378) { label = 211; break; } else { label = 212; break; }
    case 211: 
      var $290=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($290, 7054, ((5267600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 212: 
      var $291=$format_addr;
      var $cmp381=(($291)|0)==13;
      if ($cmp381) { label = 213; break; } else { label = 217; break; }
    case 213: 
      var $292=HEAP32[((((5247508)|0))>>2)];
      var $cmp384=(($292)|0)==2;
      if ($cmp384) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $293=$fp_addr;
      _qh_fprintf($293, 9054, ((5267224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 216; break;
    case 215: 
      var $294=$fp_addr;
      _qh_fprintf($294, 9055, ((5266872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 216; break;
    case 216: 
      label = 218; break;
    case 217: 
      var $295=$fp_addr;
      _qh_fprintf($295, 9056, ((5266496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 218; break;
    case 218: 
      HEAP32[((((5249128)|0))>>2)]=0;
      label = 263; break;
    case 219: 
      var $296=$fp_addr;
      var $297=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($296, 9057, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$297,tempInt));
      label = 263; break;
    case 220: 
      var $298=$fp_addr;
      var $299=HEAP32[((((5247508)|0))>>2)];
      var $300=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($298, 9058, ((5277120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$299,HEAP32[(((tempInt)+(4))>>2)]=$300,tempInt));
      label = 263; break;
    case 221: 
      var $301=$fp_addr;
      var $302=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($301, 9059, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$302,tempInt));
      label = 263; break;
    case 222: 
      var $303=HEAP32[((((5247476)|0))>>2)];
      var $tobool395=(($303)|0)!=0;
      if ($tobool395) { label = 223; break; } else { label = 224; break; }
    case 223: 
      label = 262; break;
    case 224: 
      var $304=HEAP32[((((5247508)|0))>>2)];
      HEAP32[(($num)>>2)]=$304;
      var $305=$format_addr;
      var $cmp398=(($305)|0)==17;
      if ($cmp398) { label = 226; break; } else { label = 225; break; }
    case 225: 
      var $306=HEAP32[((((5247508)|0))>>2)];
      var $cmp401=(($306)|0)==2;
      if ($cmp401) { label = 226; break; } else { label = 227; break; }
    case 226: 
      var $307=$fp_addr;
      var $308=HEAP32[(($num)>>2)];
      var $309=HEAP32[((((5247516)|0))>>2)];
      var $310=HEAP32[((((5249184)|0))>>2)];
      var $call404=_qh_setsize($310);
      var $add405=((($309)+($call404))|0);
      var $311=HEAP32[(($numfacets)>>2)];
      var $312=HEAP32[(($totneighbors)>>2)];
      var $div=((((($312)|0))/(2))&-1);
      _qh_fprintf($307, 9060, ((5266028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$308,HEAP32[(((tempInt)+(4))>>2)]=$add405,HEAP32[(((tempInt)+(8))>>2)]=$311,HEAP32[(((tempInt)+(12))>>2)]=$div,tempInt));
      label = 230; break;
    case 227: 
      var $313=HEAP32[((((5247516)|0))>>2)];
      var $314=HEAP32[((((5249184)|0))>>2)];
      var $call407=_qh_setsize($314);
      var $add408=((($313)+($call407))|0);
      HEAP32[((((5249128)|0))>>2)]=$add408;
      var $315=HEAP32[((((5247000)|0))>>2)];
      var $tobool409=(($315)|0)!=0;
      if ($tobool409) { label = 228; break; } else { label = 229; break; }
    case 228: 
      var $316=HEAP32[(($num)>>2)];
      var $dec411=((($316)-(1))|0);
      HEAP32[(($num)>>2)]=$dec411;
      label = 229; break;
    case 229: 
      var $317=$fp_addr;
      var $318=HEAP32[(($num)>>2)];
      var $319=HEAP32[((((5249128)|0))>>2)];
      var $320=HEAP32[(($numfacets)>>2)];
      var $add413=((($319)+($320))|0);
      var $321=HEAP32[(($numsimplicial)>>2)];
      var $sub414=((($add413)-($321))|0);
      var $322=HEAP32[(($numsimplicial)>>2)];
      var $323=HEAP32[(($numridges)>>2)];
      var $add415=((($322)+($323))|0);
      var $324=HEAP32[(($totneighbors)>>2)];
      var $div416=((((($324)|0))/(2))&-1);
      _qh_fprintf($317, 9061, ((5266028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$318,HEAP32[(((tempInt)+(4))>>2)]=$sub414,HEAP32[(((tempInt)+(8))>>2)]=$add415,HEAP32[(((tempInt)+(12))>>2)]=$div416,tempInt));
      label = 230; break;
    case 230: 
      var $325=HEAP32[((((5247520)|0))>>2)];
      $point=$325;
      var $326=HEAP32[((((5247520)|0))>>2)];
      var $327=HEAP32[((((5247508)|0))>>2)];
      var $328=HEAP32[((((5247516)|0))>>2)];
      var $mul418=((($327)*($328))&-1);
      var $add_ptr419=(($326+($mul418<<3))|0);
      $pointtemp=$add_ptr419;
      label = 231; break;
    case 231: 
      var $329=$point;
      var $330=$pointtemp;
      var $cmp421=(($329)>>>0) < (($330)>>>0);
      if ($cmp421) { label = 232; break; } else { label = 234; break; }
    case 232: 
      var $331=HEAP32[((((5248920)|0))>>2)];
      var $332=HEAP32[(($num)>>2)];
      var $333=$point;
      _qh_printpointid($331, 0, $332, $333, -1);
      label = 233; break;
    case 233: 
      var $334=HEAP32[((((5247508)|0))>>2)];
      var $335=$point;
      var $add_ptr425=(($335+($334<<3))|0);
      $point=$add_ptr425;
      label = 231; break;
    case 234: 
      $point=0;
      var $336=HEAP32[((((5249184)|0))>>2)];
      var $tobool427=(($336)|0)!=0;
      if ($tobool427) { label = 235; break; } else { label = 239; break; }
    case 235: 
      var $337=HEAP32[((((5249184)|0))>>2)];
      var $e429=(($337+4)|0);
      var $arrayidx430=(($e429)|0);
      var $p431=$arrayidx430;
      var $338=$p431;
      $pointp=$338;
      label = 236; break;
    case 236: 
      var $339=$pointp;
      var $incdec_ptr433=(($339+4)|0);
      $pointp=$incdec_ptr433;
      var $340=HEAP32[(($339)>>2)];
      $point=$340;
      var $tobool434=(($340)|0)!=0;
      if ($tobool434) { label = 237; break; } else { label = 238; break; }
    case 237: 
      var $341=HEAP32[((((5248920)|0))>>2)];
      var $342=HEAP32[(($num)>>2)];
      var $343=$point;
      _qh_printpointid($341, 0, $342, $343, -1);
      label = 236; break;
    case 238: 
      label = 239; break;
    case 239: 
      var $344=$format_addr;
      var $cmp438=(($344)|0)==25;
      if ($cmp438) { label = 240; break; } else { label = 251; break; }
    case 240: 
      var $345=HEAP32[((((5247508)|0))>>2)];
      var $cmp441=(($345)|0) > 2;
      if ($cmp441) { label = 241; break; } else { label = 251; break; }
    case 241: 
      var $346=HEAP32[((((5248944)|0))>>2)];
      $facet=$346;
      label = 242; break;
    case 242: 
      var $347=$facet;
      var $tobool445=(($347)|0)!=0;
      if ($tobool445) { label = 243; break; } else { var $350 = 0;label = 244; break; }
    case 243: 
      var $348=$facet;
      var $next447=(($348+44)|0);
      var $349=HEAP32[(($next447)>>2)];
      var $tobool448=(($349)|0)!=0;
      var $350 = $tobool448;label = 244; break;
    case 244: 
      var $350;
      if ($350) { label = 245; break; } else { label = 250; break; }
    case 245: 
      var $351=$facet;
      var $352=$351;
      var $bf_field_offs=(($352+76)|0);
      var $353=$bf_field_offs;
      var $354=HEAP32[(($353)>>2)];
      var $355=$354 >>> 13;
      var $bf_clear451=$355 & 1;
      var $tobool452=(($bf_clear451)|0)!=0;
      if ($tobool452) { label = 248; break; } else { label = 246; break; }
    case 246: 
      var $356=$facet;
      var $visitid=(($356+68)|0);
      var $357=HEAP32[(($visitid)>>2)];
      var $tobool454=(($357)|0)!=0;
      if ($tobool454) { label = 247; break; } else { label = 248; break; }
    case 247: 
      var $358=HEAP32[((((5248920)|0))>>2)];
      var $359=$format_addr;
      var $360=$facet;
      _qh_printcenter($358, $359, 0, $360);
      label = 248; break;
    case 248: 
      label = 249; break;
    case 249: 
      var $361=$facet;
      var $next458=(($361+44)|0);
      var $362=HEAP32[(($next458)>>2)];
      $facet=$362;
      label = 242; break;
    case 250: 
      label = 251; break;
    case 251: 
      label = 263; break;
    case 252: 
      var $363=$fp_addr;
      var $364=HEAP32[(($numcoplanars)>>2)];
      _qh_fprintf($363, 9062, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$364,tempInt));
      label = 263; break;
    case 253: 
      var $365=HEAP32[((((5247476)|0))>>2)];
      var $tobool463=(($365)|0)!=0;
      if ($tobool463) { label = 255; break; } else { label = 254; break; }
    case 254: 
      label = 262; break;
    case 255: 
      var $366=HEAP32[((((5246976)|0))>>2)];
      var $tobool466=(($366)|0)!=0;
      if ($tobool466) { label = 256; break; } else { label = 257; break; }
    case 256: 
      var $367=$fp_addr;
      var $368=HEAP32[(($numfacets)>>2)];
      var $369=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($367, 9063, ((5265668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),HEAP32[(((tempInt)+(8))>>2)]=$368,HEAP32[(((tempInt)+(12))>>2)]=$369,tempInt));
      label = 258; break;
    case 257: 
      var $370=$fp_addr;
      var $371=HEAP32[((((5247508)|0))>>2)];
      var $sub469=((($371)-(1))|0);
      var $372=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($370, 9064, ((5277120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub469,HEAP32[(((tempInt)+(4))>>2)]=$372,tempInt));
      label = 258; break;
    case 258: 
      label = 263; break;
    case 259: 
      var $373=$fp_addr;
      var $374=HEAP32[(($numfacets)>>2)];
      _qh_fprintf($373, 9065, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$374,tempInt));
      label = 263; break;
    case 260: 
      label = 261; break;
    case 261: 
      label = 262; break;
    case 262: 
      var $375=HEAP32[((((5248924)|0))>>2)];
      var $376=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($375, 6068, ((5265224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$376,tempInt));
      _qh_errexit(5, 0, 0);
      label = 263; break;
    case 263: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printbegin["X"]=1;

function _qh_printvertexlist($fp, $string, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $vertex;
      var $vertexp;
      var $vertices=__stackBase__;
      $fp_addr=$fp;
      $string_addr=$string;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=$facetlist_addr;
      var $1=$facets_addr;
      var $2=$printall_addr;
      var $call=_qh_facetvertices($0, $1, $2);
      HEAP32[(($vertices)>>2)]=$call;
      var $3=$fp_addr;
      var $4=$string_addr;
      _qh_fprintf($3, 9244, ((5291816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      $vertex=0;
      var $5=HEAP32[(($vertices)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=HEAP32[(($vertices)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $7=$p;
      $vertexp=$7;
      label = 4; break;
    case 4: 
      var $8=$vertexp;
      var $incdec_ptr=(($8+4)|0);
      $vertexp=$incdec_ptr;
      var $9=HEAP32[(($8)>>2)];
      $vertex=$9;
      var $tobool1=(($9)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$fp_addr;
      var $11=$vertex;
      _qh_printvertex($10, $11);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printend4geom($fp, $facet, $nump, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $nump_addr;
      var $printall_addr;
      var $color=__stackBase__;
      var $i;
      var $num;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $nump_addr=$nump;
      $printall_addr=$printall;
      var $0=$nump_addr;
      var $1=HEAP32[(($0)>>2)];
      $num=$1;
      var $2=$printall_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$facet_addr;
      var $call=_qh_skipfacet($3);
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 46; break;
    case 5: 
      var $4=HEAP32[((((5247176)|0))>>2)];
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $5=$facet_addr;
      var $6=$5;
      var $bf_field_offs=(($6+76)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $bf_clear=$9 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $10=HEAP32[((((5249092)|0))>>2)];
      var $tobool5=(($10)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 46; break;
    case 9: 
      var $11=$facet_addr;
      var $normal=(($11+24)|0);
      var $12=HEAP32[(($normal)>>2)];
      var $tobool8=(($12)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 10; break; }
    case 10: 
      label = 46; break;
    case 11: 
      var $13=$fp_addr;
      var $tobool11=(($13)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 21; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $14=$i;
      var $cmp=(($14)|0) < 3;
      if ($cmp) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $15=$i;
      var $16=$facet_addr;
      var $normal13=(($16+24)|0);
      var $17=HEAP32[(($normal13)>>2)];
      var $arrayidx=(($17+($15<<3))|0);
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($18)+(1);
      var $div=($add)/(2);
      var $19=$i;
      var $arrayidx14=(($color+($19<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($arrayidx14)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx14)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $20=$i;
      var $arrayidx15=(($color+($20<<3))|0);
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp16=$21 < -1;
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $22=$i;
      var $arrayidx18=(($color+($22<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1,HEAP32[(($arrayidx18)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx18)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 16: 
      var $23=$i;
      var $arrayidx20=(($color+($23<<3))|0);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp21=$24 > 1;
      if ($cmp21) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $25=$i;
      var $arrayidx23=(($color+($25<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($arrayidx23)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx23)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 13; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $27=HEAP32[((((5249156)|0))>>2)];
      var $28=$facet_addr;
      var $visitid=(($28+68)|0);
      HEAP32[(($visitid)>>2)]=$27;
      var $29=$facet_addr;
      var $30=$29;
      var $bf_field_offs26=(($30+76)|0);
      var $31=$bf_field_offs26;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 13;
      var $bf_clear27=$33 & 1;
      var $tobool28=(($bf_clear27)|0)!=0;
      if ($tobool28) { label = 22; break; } else { label = 32; break; }
    case 22: 
      $neighbor=0;
      var $34=$facet_addr;
      var $neighbors=(($34+56)|0);
      var $35=HEAP32[(($neighbors)>>2)];
      var $tobool30=(($35)|0)!=0;
      if ($tobool30) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $36=$facet_addr;
      var $neighbors32=(($36+56)|0);
      var $37=HEAP32[(($neighbors32)>>2)];
      var $e=(($37+4)|0);
      var $arrayidx33=(($e)|0);
      var $p=$arrayidx33;
      var $38=$p;
      $neighborp=$38;
      label = 24; break;
    case 24: 
      var $39=$neighborp;
      var $incdec_ptr=(($39+4)|0);
      $neighborp=$incdec_ptr;
      var $40=HEAP32[(($39)>>2)];
      $neighbor=$40;
      var $tobool35=(($40)|0)!=0;
      if ($tobool35) { label = 25; break; } else { label = 30; break; }
    case 25: 
      var $41=$neighbor;
      var $visitid37=(($41+68)|0);
      var $42=HEAP32[(($visitid37)>>2)];
      var $43=HEAP32[((((5249156)|0))>>2)];
      var $cmp38=(($42)|0)!=(($43)|0);
      if ($cmp38) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $44=$fp_addr;
      var $tobool40=(($44)|0)!=0;
      if ($tobool40) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $45=$fp_addr;
      var $46=$num;
      var $mul=((($46)*(3))&-1);
      var $47=$num;
      var $mul42=((($47)*(3))&-1);
      var $add43=((($mul42)+(1))|0);
      var $48=$num;
      var $mul44=((($48)*(3))&-1);
      var $add45=((($mul44)+(2))|0);
      var $arrayidx46=(($color)|0);
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx46)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx46)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx47=(($color+8)|0);
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx48=(($color+16)|0);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $52=$facet_addr;
      var $id=(($52+72)|0);
      var $53=HEAP32[(($id)>>2)];
      var $54=$neighbor;
      var $id49=(($54+72)|0);
      var $55=HEAP32[(($id49)>>2)];
      _qh_fprintf($45, 9084, ((5260124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 44)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$mul,HEAP32[(((tempInt)+(4))>>2)]=$add43,HEAP32[(((tempInt)+(8))>>2)]=$add45,(HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(28))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(28))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(36))>>2)]=$53,HEAP32[(((tempInt)+(40))>>2)]=$55,tempInt));
      label = 28; break;
    case 28: 
      var $56=$num;
      var $inc51=((($56)+(1))|0);
      $num=$inc51;
      label = 29; break;
    case 29: 
      label = 24; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 45; break;
    case 32: 
      $ridge=0;
      var $57=$facet_addr;
      var $ridges=(($57+52)|0);
      var $58=HEAP32[(($ridges)>>2)];
      var $tobool55=(($58)|0)!=0;
      if ($tobool55) { label = 33; break; } else { label = 44; break; }
    case 33: 
      var $59=$facet_addr;
      var $ridges57=(($59+52)|0);
      var $60=HEAP32[(($ridges57)>>2)];
      var $e58=(($60+4)|0);
      var $arrayidx59=(($e58)|0);
      var $p60=$arrayidx59;
      var $61=$p60;
      $ridgep=$61;
      label = 34; break;
    case 34: 
      var $62=$ridgep;
      var $incdec_ptr62=(($62+4)|0);
      $ridgep=$incdec_ptr62;
      var $63=HEAP32[(($62)>>2)];
      $ridge=$63;
      var $tobool63=(($63)|0)!=0;
      if ($tobool63) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $64=$ridge;
      var $top=(($64+4)|0);
      var $65=HEAP32[(($top)>>2)];
      var $66=$facet_addr;
      var $cmp65=(($65)|0)==(($66)|0);
      if ($cmp65) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $67=$ridge;
      var $bottom=(($67+8)|0);
      var $68=HEAP32[(($bottom)>>2)];
      var $cond = $68;label = 38; break;
    case 37: 
      var $69=$ridge;
      var $top66=(($69+4)|0);
      var $70=HEAP32[(($top66)>>2)];
      var $cond = $70;label = 38; break;
    case 38: 
      var $cond;
      $neighbor=$cond;
      var $71=$neighbor;
      var $visitid67=(($71+68)|0);
      var $72=HEAP32[(($visitid67)>>2)];
      var $73=HEAP32[((((5249156)|0))>>2)];
      var $cmp68=(($72)|0)!=(($73)|0);
      if ($cmp68) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $74=$fp_addr;
      var $tobool70=(($74)|0)!=0;
      if ($tobool70) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $75=$fp_addr;
      var $76=$num;
      var $mul72=((($76)*(3))&-1);
      var $77=$num;
      var $mul73=((($77)*(3))&-1);
      var $add74=((($mul73)+(1))|0);
      var $78=$num;
      var $mul75=((($78)*(3))&-1);
      var $add76=((($mul75)+(2))|0);
      var $arrayidx77=(($color)|0);
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx77)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx77)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx78=(($color+8)|0);
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx78)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx78)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx79=(($color+16)|0);
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx79)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx79)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $82=$ridge;
      var $83=$82;
      var $bf_field_offs80=(($83+12)|0);
      var $84=$bf_field_offs80;
      var $85=HEAP32[(($84)>>2)];
      var $bf_clear81=$85 & 16777215;
      var $86=$facet_addr;
      var $id82=(($86+72)|0);
      var $87=HEAP32[(($id82)>>2)];
      var $88=$neighbor;
      var $id83=(($88+72)|0);
      var $89=HEAP32[(($id83)>>2)];
      _qh_fprintf($75, 9085, ((5259836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$mul72,HEAP32[(((tempInt)+(4))>>2)]=$add74,HEAP32[(((tempInt)+(8))>>2)]=$add76,(HEAPF64[(tempDoublePtr)>>3]=$79,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$80,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$81,HEAP32[(((tempInt)+(28))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(28))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(36))>>2)]=$bf_clear81,HEAP32[(((tempInt)+(40))>>2)]=$87,HEAP32[(((tempInt)+(44))>>2)]=$89,tempInt));
      label = 41; break;
    case 41: 
      var $90=$num;
      var $inc85=((($90)+(1))|0);
      $num=$inc85;
      label = 42; break;
    case 42: 
      label = 34; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $91=$num;
      var $92=$nump_addr;
      HEAP32[(($92)>>2)]=$91;
      label = 46; break;
    case 46: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printend4geom["X"]=1;

function _qh_printpoint3($fp, $point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $point_addr;
      var $k;
      var $p=__stackBase__;
      $fp_addr=$fp;
      $point_addr=$point;
      var $0=$point_addr;
      var $arraydecay=(($p)|0);
      _qh_projectdim3($0, $arraydecay);
      $k=0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $cmp=(($1)|0) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$fp_addr;
      var $3=$k;
      var $arrayidx=(($p+($3<<3))|0);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($2, 9216, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 5; break;
    case 5: 
      var $5=$k;
      var $inc=((($5)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 6: 
      var $6=$fp_addr;
      var $7=$point_addr;
      var $call=_qh_pointid($7);
      _qh_fprintf($6, 9217, ((5292164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printspheres($fp, $vertices, $radius) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $vertices_addr;
      var $radius_addr;
      var $vertex;
      var $vertexp;
      $fp_addr=$fp;
      $vertices_addr=$vertices;
      $radius_addr=$radius;
      var $0=HEAP32[((((5249132)|0))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[((((5249132)|0))>>2)]=$inc;
      var $1=$fp_addr;
      _qh_fprintf($1, 9227, ((5290312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $vertex=0;
      var $2=$vertices_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$vertices_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $vertexp=$4;
      label = 4; break;
    case 4: 
      var $5=$vertexp;
      var $incdec_ptr=(($5+4)|0);
      $vertexp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $vertex=$6;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$fp_addr;
      var $8=$radius_addr;
      var $9=$vertex;
      var $10=$9;
      var $bf_field_offs=(($10+20)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $bf_clear=$12 & 16777215;
      var $13=$radius_addr;
      var $14=$radius_addr;
      _qh_fprintf($7, 9228, ((5290220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$bf_clear,(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $15=$fp_addr;
      var $16=$vertex;
      var $point=(($16+8)|0);
      var $17=HEAP32[(($point)>>2)];
      _qh_printpoint3($15, $17);
      var $18=$fp_addr;
      _qh_fprintf($18, 9229, ((5290168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $19=$fp_addr;
      _qh_fprintf($19, 9230, ((5290012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printspheres["X"]=1;

function _qh_printpointvect2($fp, $point, $normal, $center, $radius) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $fp_addr;
  var $point_addr;
  var $normal_addr;
  var $center_addr;
  var $radius_addr;
  var $red=__stackBase__;
  var $yellow=(__stackBase__)+(24);
  $fp_addr=$fp;
  $point_addr=$point;
  $normal_addr=$normal;
  $center_addr=$center;
  $radius_addr=$radius;
  var $0=$red;
  assert(24 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[((5249300)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((5249304)>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((5249308)>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[((5249312)>>2)];HEAP32[((($0)+(16))>>2)]=HEAP32[((5249316)>>2)];HEAP32[((($0)+(20))>>2)]=HEAP32[((5249320)>>2)];
  var $1=$yellow;
  assert(24 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((5249276)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((5249280)>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((5249284)>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((5249288)>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((5249292)>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((5249296)>>2)];
  var $2=$fp_addr;
  var $3=$point_addr;
  var $4=$normal_addr;
  var $5=$center_addr;
  var $6=$radius_addr;
  var $arraydecay=(($red)|0);
  _qh_printpointvect($2, $3, $4, $5, $6, $arraydecay);
  var $7=$fp_addr;
  var $8=$point_addr;
  var $9=$normal_addr;
  var $10=$center_addr;
  var $11=$radius_addr;
  var $sub=(-$11);
  var $arraydecay1=(($yellow)|0);
  _qh_printpointvect($7, $8, $9, $10, $sub, $arraydecay1);
  STACKTOP = __stackBase__;
  return;
}


function _qh_printcentrum($fp, $facet, $radius) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $radius_addr;
      var $centrum;
      var $projpt;
      var $tempcentrum;
      var $xaxis=__stackBase__;
      var $yaxis=(__stackBase__)+(32);
      var $normal=(__stackBase__)+(64);
      var $dist=(__stackBase__)+(96);
      var $green=(__stackBase__)+(104);
      var $apex;
      var $k;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $radius_addr=$radius;
      $tempcentrum=0;
      var $0=$green;
      assert(24 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[((5249372)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((5249376)>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((5249380)>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[((5249384)>>2)];HEAP32[((($0)+(16))>>2)]=HEAP32[((5249388)>>2)];HEAP32[((($0)+(20))>>2)]=HEAP32[((5249392)>>2)];
      var $1=HEAP32[((((5249036)|0))>>2)];
      var $cmp=(($1)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$facet_addr;
      var $center=(($2+36)|0);
      var $3=HEAP32[(($center)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$facet_addr;
      var $call=_qh_getcentrum($4);
      var $5=$facet_addr;
      var $center2=(($5+36)|0);
      HEAP32[(($center2)>>2)]=$call;
      label = 5; break;
    case 5: 
      var $6=$facet_addr;
      var $center3=(($6+36)|0);
      var $7=HEAP32[(($center3)>>2)];
      $centrum=$7;
      label = 7; break;
    case 6: 
      var $8=$facet_addr;
      var $call4=_qh_getcentrum($8);
      $centrum=$call4;
      $tempcentrum=1;
      label = 7; break;
    case 7: 
      var $9=$fp_addr;
      _qh_fprintf($9, 9072, ((5264412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((((5249220)|0))>>2)];
      var $tobool6=(($10)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      HEAP32[((((5249220)|0))>>2)]=0;
      var $11=$fp_addr;
      var $12=$facet_addr;
      var $id=(($12+72)|0);
      var $13=HEAP32[(($id)>>2)];
      _qh_fprintf($11, 9073, ((5263996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      label = 10; break;
    case 9: 
      var $14=$fp_addr;
      var $15=$facet_addr;
      var $id9=(($15+72)|0);
      var $16=HEAP32[(($id9)>>2)];
      _qh_fprintf($14, 9074, ((5263680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      label = 10; break;
    case 10: 
      var $17=$facet_addr;
      var $vertices=(($17+48)|0);
      var $18=HEAP32[(($vertices)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=HEAP32[(($p)>>2)];
      var $20=$19;
      $apex=$20;
      var $21=$apex;
      var $point=(($21+8)|0);
      var $22=HEAP32[(($point)>>2)];
      var $23=$facet_addr;
      _qh_distplane($22, $23, $dist);
      var $24=$apex;
      var $point11=(($24+8)|0);
      var $25=HEAP32[(($point11)>>2)];
      var $26=$facet_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call12=_qh_projectpoint($25, $26, $27);
      $projpt=$call12;
      var $28=HEAP32[((((5247508)|0))>>2)];
      $k=$28;
      label = 11; break;
    case 11: 
      var $29=$k;
      var $dec=((($29)-(1))|0);
      $k=$dec;
      var $tobool13=(($29)|0)!=0;
      if ($tobool13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $30=$k;
      var $31=$projpt;
      var $arrayidx14=(($31+($30<<3))|0);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$k;
      var $34=$centrum;
      var $arrayidx15=(($34+($33<<3))|0);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($32)-($35);
      var $36=$k;
      var $arrayidx16=(($xaxis+($36<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($arrayidx16)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx16)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $37=$k;
      var $38=$facet_addr;
      var $normal17=(($38+24)|0);
      var $39=HEAP32[(($normal17)>>2)];
      var $arrayidx18=(($39+($37<<3))|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $41=$k;
      var $arrayidx19=(($normal+($41<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$40,HEAP32[(($arrayidx19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 13: 
      var $42=HEAP32[((((5247508)|0))>>2)];
      var $cmp20=(($42)|0)==2;
      if ($cmp20) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $arrayidx22=(($xaxis+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx22)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx22)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx23=(($normal+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx23)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx23)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 18; break;
    case 15: 
      var $43=HEAP32[((((5247508)|0))>>2)];
      var $cmp25=(($43)|0)==4;
      if ($cmp25) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $arraydecay=(($xaxis)|0);
      var $arraydecay27=(($xaxis)|0);
      _qh_projectdim3($arraydecay, $arraydecay27);
      var $arraydecay28=(($normal)|0);
      var $arraydecay29=(($normal)|0);
      _qh_projectdim3($arraydecay28, $arraydecay29);
      var $arraydecay30=(($normal)|0);
      var $44=HEAP32[((((5247156)|0))>>2)];
      _qh_normalize2($arraydecay30, $44, 1, 0, 0);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $arraydecay33=(($xaxis)|0);
      var $arraydecay34=(($normal)|0);
      var $arraydecay35=(($yaxis)|0);
      _qh_crossproduct(3, $arraydecay33, $arraydecay34, $arraydecay35);
      var $45=$fp_addr;
      var $arrayidx36=(($xaxis)|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx36)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx36)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx37=(($xaxis+8)|0);
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx37)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx37)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx38=(($xaxis+16)|0);
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($45, 9075, ((5263264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$47,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $49=$fp_addr;
      var $arrayidx39=(($yaxis)|0);
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx39)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx39)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx40=(($yaxis+8)|0);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx41=(($yaxis+16)|0);
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($49, 9076, ((5263264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$52,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $53=$fp_addr;
      var $arrayidx42=(($normal)|0);
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx43=(($normal+8)|0);
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx43)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx43)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx44=(($normal+16)|0);
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx44)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx44)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($53, 9077, ((5263264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$54,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $57=$fp_addr;
      var $58=$centrum;
      _qh_printpoint3($57, $58);
      var $59=$fp_addr;
      _qh_fprintf($59, 9078, ((5262604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $60=$projpt;
      var $61=$60;
      var $62=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($61, $62);
      var $63=$fp_addr;
      var $64=$centrum;
      var $65=$facet_addr;
      var $normal45=(($65+24)|0);
      var $66=HEAP32[(($normal45)>>2)];
      var $67=$radius_addr;
      var $arraydecay46=(($green)|0);
      _qh_printpointvect($63, $64, $66, 0, $67, $arraydecay46);
      var $68=$tempcentrum;
      var $tobool47=(($68)|0)!=0;
      if ($tobool47) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $69=$centrum;
      var $70=$69;
      var $71=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($70, $71);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printcentrum["X"]=1;

function _qh_printpointid($fp, $string, $dim, $point, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $dim_addr;
      var $point_addr;
      var $id_addr;
      var $k;
      var $r;
      $fp_addr=$fp;
      $string_addr=$string;
      $dim_addr=$dim;
      $point_addr=$point;
      $id_addr=$id;
      var $0=$point_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 15; break;
    case 4: 
      var $1=$string_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $2=$fp_addr;
      var $3=$string_addr;
      _qh_fprintf($2, 9211, ((5291816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      var $4=$id_addr;
      var $cmp=(($4)|0)!=-1;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$fp_addr;
      var $6=$id_addr;
      _qh_fprintf($5, 9212, ((5291736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $7=$dim_addr;
      $k=$7;
      label = 9; break;
    case 9: 
      var $8=$k;
      var $dec=((($8)-(1))|0);
      $k=$dec;
      var $tobool6=(($8)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $9=$point_addr;
      var $incdec_ptr=(($9+8)|0);
      $point_addr=$incdec_ptr;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $r=$10;
      var $11=$string_addr;
      var $tobool7=(($11)|0)!=0;
      if ($tobool7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $12=$fp_addr;
      var $13=$r;
      _qh_fprintf($12, 9213, ((5291684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 13; break;
    case 12: 
      var $14=$fp_addr;
      var $15=$r;
      _qh_fprintf($14, 9214, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 13; break;
    case 13: 
      label = 9; break;
    case 14: 
      var $16=$fp_addr;
      _qh_fprintf($16, 9215, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printpointid["X"]=1;

function _qh_printpointvect($fp, $point, $normal, $center, $radius, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $point_addr;
      var $normal_addr;
      var $center_addr;
      var $radius_addr;
      var $color_addr;
      var $diff=__stackBase__;
      var $pointA=(__stackBase__)+(32);
      var $k;
      $fp_addr=$fp;
      $point_addr=$point;
      $normal_addr=$normal;
      $center_addr=$center;
      $radius_addr=$radius;
      $color_addr=$color;
      var $0=HEAP32[((((5247508)|0))>>2)];
      $k=$0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $dec=((($1)-(1))|0);
      $k=$dec;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $2=$center_addr;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$k;
      var $4=$point_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=$k;
      var $7=$center_addr;
      var $arrayidx2=(($7+($6<<3))|0);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($5)-($8);
      var $9=$k;
      var $arrayidx3=(($diff+($9<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($arrayidx3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 6: 
      var $10=$normal_addr;
      var $tobool4=(($10)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$k;
      var $12=$normal_addr;
      var $arrayidx6=(($12+($11<<3))|0);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=$k;
      var $arrayidx7=(($diff+($14<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(($arrayidx7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 8: 
      var $15=$k;
      var $arrayidx9=(($diff+($15<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx9)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx9)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 3; break;
    case 11: 
      var $16=$center_addr;
      var $tobool11=(($16)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $arraydecay=(($diff)|0);
      var $17=HEAP32[((((5247508)|0))>>2)];
      _qh_normalize2($arraydecay, $17, 1, 0, 0);
      label = 13; break;
    case 13: 
      var $18=HEAP32[((((5247508)|0))>>2)];
      $k=$18;
      label = 14; break;
    case 14: 
      var $19=$k;
      var $dec15=((($19)-(1))|0);
      $k=$dec15;
      var $tobool16=(($19)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $20=$k;
      var $21=$point_addr;
      var $arrayidx18=(($21+($20<<3))|0);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=$k;
      var $arrayidx19=(($diff+($23<<3))|0);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=$radius_addr;
      var $mul=($24)*($25);
      var $add=($22)+($mul);
      var $26=$k;
      var $arrayidx20=(($pointA+($26<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($arrayidx20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 16: 
      var $27=$fp_addr;
      var $28=$point_addr;
      var $arraydecay22=(($pointA)|0);
      var $29=$color_addr;
      _qh_printline3geom($27, $28, $arraydecay22, $29);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printpointvect["X"]=1;

function _qh_printend($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $num=__stackBase__;
      var $facet;
      var $facetp;
      $fp_addr=$fp;
      $format_addr=$format;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=HEAP32[((((5249132)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 7055, ((5262216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$format_addr;
      if ((($2)|0)==7) {
        label = 5; break;
      }
      else if ((($2)|0)==9 | (($2)|0)==11 | (($2)|0)==12) {
        label = 27; break;
      }
      else if ((($2)|0)==13) {
        label = 30; break;
      }
      else if ((($2)|0)==15) {
        label = 31; break;
      }
      else if ((($2)|0)==21) {
        label = 32; break;
      }
      else {
      label = 35; break;
      }
      
    case 5: 
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($3)|0)==4;
      if ($cmp) { label = 6; break; } else { label = 25; break; }
    case 6: 
      var $4=HEAP32[((((5247008)|0))>>2)];
      var $cmp1=(($4)|0) < 0;
      if ($cmp1) { label = 7; break; } else { label = 25; break; }
    case 7: 
      var $5=HEAP32[((((5247176)|0))>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 25; break; } else { label = 8; break; }
    case 8: 
      var $6=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      HEAP32[(($num)>>2)]=0;
      var $7=$facetlist_addr;
      var $tobool5=(($7)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $8=$facetlist_addr;
      $facet=$8;
      label = 10; break;
    case 10: 
      var $9=$facet;
      var $tobool7=(($9)|0)!=0;
      if ($tobool7) { label = 11; break; } else { var $12 = 0;label = 12; break; }
    case 11: 
      var $10=$facet;
      var $next=(($10+44)|0);
      var $11=HEAP32[(($next)>>2)];
      var $tobool8=(($11)|0)!=0;
      var $12 = $tobool8;label = 12; break;
    case 12: 
      var $12;
      if ($12) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $13=$fp_addr;
      var $14=$facet;
      var $15=$printall_addr;
      _qh_printend4geom($13, $14, $num, $15);
      label = 14; break;
    case 14: 
      var $16=$facet;
      var $next9=(($16+44)|0);
      var $17=HEAP32[(($next9)>>2)];
      $facet=$17;
      label = 10; break;
    case 15: 
      label = 16; break;
    case 16: 
      $facet=0;
      var $18=$facets_addr;
      var $tobool11=(($18)|0)!=0;
      if ($tobool11) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $19=$facets_addr;
      var $e=(($19+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $20=$p;
      $facetp=$20;
      label = 18; break;
    case 18: 
      var $21=$facetp;
      var $incdec_ptr=(($21+4)|0);
      $facetp=$incdec_ptr;
      var $22=HEAP32[(($21)>>2)];
      $facet=$22;
      var $tobool14=(($22)|0)!=0;
      if ($tobool14) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $23=$fp_addr;
      var $24=$facet;
      var $25=$printall_addr;
      _qh_printend4geom($23, $24, $num, $25);
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $26=HEAP32[(($num)>>2)];
      var $27=HEAP32[((((5249272)|0))>>2)];
      var $cmp18=(($26)|0)!=(($27)|0);
      if ($cmp18) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $28=HEAP32[((((5249128)|0))>>2)];
      var $29=HEAP32[((((5249272)|0))>>2)];
      var $cmp19=(($28)|0)!=(($29)|0);
      if ($cmp19) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $30=HEAP32[((((5248924)|0))>>2)];
      var $31=HEAP32[((((5249272)|0))>>2)];
      var $32=HEAP32[((((5249128)|0))>>2)];
      var $33=HEAP32[(($num)>>2)];
      _qh_fprintf($30, 6069, ((5261716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,tempInt));
      _qh_errexit(5, 0, 0);
      label = 24; break;
    case 24: 
      label = 26; break;
    case 25: 
      var $34=$fp_addr;
      _qh_fprintf($34, 9079, ((5261268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 26; break;
    case 26: 
      label = 36; break;
    case 27: 
      var $35=HEAP32[((((5246976)|0))>>2)];
      var $tobool24=(($35)|0)!=0;
      if ($tobool24) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $36=$fp_addr;
      _qh_fprintf($36, 9080, ((5260800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 29; break;
    case 29: 
      label = 36; break;
    case 30: 
      var $37=$fp_addr;
      _qh_fprintf($37, 9081, ((5260412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 36; break;
    case 31: 
      var $38=$fp_addr;
      _qh_fprintf($38, 9082, ((5261268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 36; break;
    case 32: 
      var $39=HEAP32[((((5246976)|0))>>2)];
      var $tobool30=(($39)|0)!=0;
      if ($tobool30) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $40=$fp_addr;
      _qh_fprintf($40, 9083, ((5260800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 34; break;
    case 34: 
      label = 36; break;
    case 35: 
      label = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printend["X"]=1;

function _qh_printextremes($fp, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $vertices=__stackBase__;
      var $points=(__stackBase__)+(4);
      var $point;
      var $vertex;
      var $vertexp;
      var $id;
      var $numpoints;
      var $point_i;
      var $point_n;
      var $allpoints;
      $fp_addr=$fp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $numpoints=0;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($1);
      var $add=((($0)+($call))|0);
      $allpoints=$add;
      var $2=$allpoints;
      var $call1=_qh_settemp($2);
      HEAP32[(($points)>>2)]=$call1;
      var $3=HEAP32[(($points)>>2)];
      var $4=$allpoints;
      _qh_setzero($3, 0, $4);
      var $5=$facetlist_addr;
      var $6=$facets_addr;
      var $7=$printall_addr;
      var $call2=_qh_facetvertices($5, $6, $7);
      HEAP32[(($vertices)>>2)]=$call2;
      $vertex=0;
      var $8=HEAP32[(($vertices)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=HEAP32[(($vertices)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=$p;
      $vertexp=$10;
      label = 4; break;
    case 4: 
      var $11=$vertexp;
      var $incdec_ptr=(($11+4)|0);
      $vertexp=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $vertex=$12;
      var $tobool3=(($12)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $13=$vertex;
      var $point4=(($13+8)|0);
      var $14=HEAP32[(($point4)>>2)];
      var $call5=_qh_pointid($14);
      $id=$call5;
      var $15=$id;
      var $cmp=(($15)|0) >= 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$vertex;
      var $point7=(($16+8)|0);
      var $17=HEAP32[(($point7)>>2)];
      var $18=$17;
      var $19=$id;
      var $20=HEAP32[(($points)>>2)];
      var $e8=(($20+4)|0);
      var $arrayidx9=(($e8+($19<<2))|0);
      var $p10=$arrayidx9;
      HEAP32[(($p10)>>2)]=$18;
      var $21=$numpoints;
      var $inc=((($21)+(1))|0);
      $numpoints=$inc;
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      _qh_settempfree($vertices);
      var $22=$fp_addr;
      var $23=$numpoints;
      _qh_fprintf($22, 9086, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$23,tempInt));
      $point=0;
      var $24=HEAP32[(($points)>>2)];
      var $tobool12=(($24)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 17; break; }
    case 10: 
      $point_i=0;
      var $25=HEAP32[(($points)>>2)];
      var $e14=(($25+4)|0);
      var $arrayidx15=(($e14)|0);
      var $p16=$arrayidx15;
      var $26=HEAP32[(($p16)>>2)];
      var $27=$26;
      $point=$27;
      var $28=HEAP32[(($points)>>2)];
      var $call17=_qh_setsize($28);
      $point_n=$call17;
      label = 11; break;
    case 11: 
      var $29=$point_i;
      var $30=$point_n;
      var $cmp19=(($29)|0) < (($30)|0);
      if ($cmp19) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $31=$point;
      var $tobool21=(($31)|0)!=0;
      if ($tobool21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $32=$fp_addr;
      var $33=$point_i;
      _qh_fprintf($32, 9087, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,tempInt));
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $34=$point_i;
      var $inc24=((($34)+(1))|0);
      $point_i=$inc24;
      var $35=HEAP32[(($points)>>2)];
      var $e25=(($35+4)|0);
      var $arrayidx26=(($e25+($inc24<<2))|0);
      var $p27=$arrayidx26;
      var $36=HEAP32[(($p27)>>2)];
      var $37=$36;
      $point=$37;
      label = 11; break;
    case 16: 
      label = 17; break;
    case 17: 
      _qh_settempfree($points);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printextremes["X"]=1;

function _qh_printextremes_2d($fp, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $numfacets=__stackBase__;
      var $numridges=(__stackBase__)+(4);
      var $totneighbors=(__stackBase__)+(8);
      var $numcoplanars=(__stackBase__)+(12);
      var $numsimplicial=(__stackBase__)+(16);
      var $numtricoplanars=(__stackBase__)+(20);
      var $vertices=(__stackBase__)+(24);
      var $facet;
      var $startfacet;
      var $nextfacet;
      var $vertexA;
      var $vertexB;
      $fp_addr=$fp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=$facetlist_addr;
      var $1=$facets_addr;
      var $2=$printall_addr;
      _qh_countfacets($0, $1, $2, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
      var $3=$facetlist_addr;
      var $4=$facets_addr;
      var $5=$printall_addr;
      var $call=_qh_facetvertices($3, $4, $5);
      HEAP32[(($vertices)>>2)]=$call;
      var $6=$fp_addr;
      var $7=HEAP32[(($vertices)>>2)];
      var $call1=_qh_setsize($7);
      _qh_fprintf($6, 9088, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call1,tempInt));
      _qh_settempfree($vertices);
      var $8=HEAP32[(($numfacets)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 23; break;
    case 4: 
      var $9=$facetlist_addr;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$facetlist_addr;
      var $cond = $10;label = 7; break;
    case 6: 
      var $11=$facets_addr;
      var $e=(($11+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $12=HEAP32[(($p)>>2)];
      var $13=$12;
      var $cond = $13;label = 7; break;
    case 7: 
      var $cond;
      $startfacet=$cond;
      $facet=$cond;
      var $14=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$14 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $15=$bf_value & 2147483647;
      var $16=HEAP32[(((((5249160)|0)))>>2)];
      var $17=$16 & -2147483648;
      var $18=$17 | $15;
      HEAP32[(((((5249160)|0)))>>2)]=$18;
      var $19=HEAP32[((((5249156)|0))>>2)];
      var $inc3=((($19)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc3;
      label = 8; break;
    case 8: 
      var $20=$facet;
      var $21=$20;
      var $bf_field_offs=(($21+76)|0);
      var $22=$bf_field_offs;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 12;
      var $bf_clear4=$24 & 1;
      var $xor=$bf_clear4 ^ 0;
      var $tobool5=(($xor)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $25=$facet;
      var $vertices7=(($25+48)|0);
      var $26=HEAP32[(($vertices7)>>2)];
      var $e8=(($26+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      var $27=HEAP32[(($p10)>>2)];
      var $28=$27;
      $vertexA=$28;
      var $29=$facet;
      var $vertices11=(($29+48)|0);
      var $30=HEAP32[(($vertices11)>>2)];
      var $e12=(($30+4)|0);
      var $arrayidx13=(($e12+4)|0);
      var $p14=$arrayidx13;
      var $31=HEAP32[(($p14)>>2)];
      var $32=$31;
      $vertexB=$32;
      var $33=$facet;
      var $neighbors=(($33+56)|0);
      var $34=HEAP32[(($neighbors)>>2)];
      var $e15=(($34+4)|0);
      var $arrayidx16=(($e15)|0);
      var $p17=$arrayidx16;
      var $35=HEAP32[(($p17)>>2)];
      var $36=$35;
      $nextfacet=$36;
      label = 11; break;
    case 10: 
      var $37=$facet;
      var $vertices18=(($37+48)|0);
      var $38=HEAP32[(($vertices18)>>2)];
      var $e19=(($38+4)|0);
      var $arrayidx20=(($e19+4)|0);
      var $p21=$arrayidx20;
      var $39=HEAP32[(($p21)>>2)];
      var $40=$39;
      $vertexA=$40;
      var $41=$facet;
      var $vertices22=(($41+48)|0);
      var $42=HEAP32[(($vertices22)>>2)];
      var $e23=(($42+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $43=HEAP32[(($p25)>>2)];
      var $44=$43;
      $vertexB=$44;
      var $45=$facet;
      var $neighbors26=(($45+56)|0);
      var $46=HEAP32[(($neighbors26)>>2)];
      var $e27=(($46+4)|0);
      var $arrayidx28=(($e27+4)|0);
      var $p29=$arrayidx28;
      var $47=HEAP32[(($p29)>>2)];
      var $48=$47;
      $nextfacet=$48;
      label = 11; break;
    case 11: 
      var $49=$facet;
      var $visitid=(($49+68)|0);
      var $50=HEAP32[(($visitid)>>2)];
      var $51=HEAP32[((((5249156)|0))>>2)];
      var $cmp=(($50)|0)==(($51)|0);
      if ($cmp) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $52=HEAP32[((((5248924)|0))>>2)];
      var $53=$facet;
      var $id=(($53+72)|0);
      var $54=HEAP32[(($id)>>2)];
      var $55=$nextfacet;
      var $id32=(($55+72)|0);
      var $56=HEAP32[(($id32)>>2)];
      _qh_fprintf($52, 6218, ((5259572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$56,tempInt));
      var $57=$facet;
      var $58=$nextfacet;
      _qh_errexit2(5, $57, $58);
      label = 13; break;
    case 13: 
      var $59=$facet;
      var $visitid34=(($59+68)|0);
      var $60=HEAP32[(($visitid34)>>2)];
      var $tobool35=(($60)|0)!=0;
      if ($tobool35) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $61=$vertexA;
      var $62=$61;
      var $bf_field_offs37=(($62+16)|0);
      var $63=$bf_field_offs37;
      var $64=HEAP32[(($63)>>2)];
      var $bf_clear38=$64 & 2147483647;
      var $65=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear39=$65 & 2147483647;
      var $cmp40=(($bf_clear38)|0)!=(($bf_clear39)|0);
      if ($cmp40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $66=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear42=$66 & 2147483647;
      var $67=$vertexA;
      var $bf_value43=$bf_clear42 & 2147483647;
      var $68=$67;
      var $bf_field_offs44=(($68+16)|0);
      var $69=$bf_field_offs44;
      var $70=$bf_value43 & 2147483647;
      var $71=HEAP32[(($69)>>2)];
      var $72=$71 & -2147483648;
      var $73=$72 | $70;
      HEAP32[(($69)>>2)]=$73;
      var $74=$fp_addr;
      var $75=$vertexA;
      var $point=(($75+8)|0);
      var $76=HEAP32[(($point)>>2)];
      var $call45=_qh_pointid($76);
      _qh_fprintf($74, 9089, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call45,tempInt));
      label = 16; break;
    case 16: 
      var $77=$vertexB;
      var $78=$77;
      var $bf_field_offs47=(($78+16)|0);
      var $79=$bf_field_offs47;
      var $80=HEAP32[(($79)>>2)];
      var $bf_clear48=$80 & 2147483647;
      var $81=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear49=$81 & 2147483647;
      var $cmp50=(($bf_clear48)|0)!=(($bf_clear49)|0);
      if ($cmp50) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $82=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear52=$82 & 2147483647;
      var $83=$vertexB;
      var $bf_value53=$bf_clear52 & 2147483647;
      var $84=$83;
      var $bf_field_offs54=(($84+16)|0);
      var $85=$bf_field_offs54;
      var $86=$bf_value53 & 2147483647;
      var $87=HEAP32[(($85)>>2)];
      var $88=$87 & -2147483648;
      var $89=$88 | $86;
      HEAP32[(($85)>>2)]=$89;
      var $90=$fp_addr;
      var $91=$vertexB;
      var $point55=(($91+8)|0);
      var $92=HEAP32[(($point55)>>2)];
      var $call56=_qh_pointid($92);
      _qh_fprintf($90, 9090, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call56,tempInt));
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $93=HEAP32[((((5249156)|0))>>2)];
      var $94=$facet;
      var $visitid59=(($94+68)|0);
      HEAP32[(($visitid59)>>2)]=$93;
      var $95=$nextfacet;
      $facet=$95;
      label = 20; break;
    case 20: 
      var $96=$facet;
      var $tobool60=(($96)|0)!=0;
      if ($tobool60) { label = 21; break; } else { var $99 = 0;label = 22; break; }
    case 21: 
      var $97=$facet;
      var $98=$startfacet;
      var $cmp61=(($97)|0)!=(($98)|0);
      var $99 = $cmp61;label = 22; break;
    case 22: 
      var $99;
      if ($99) { label = 8; break; } else { label = 23; break; }
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printextremes_2d["X"]=1;

function _qh_printextremes_d($fp, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $vertices=__stackBase__;
      var $vertex;
      var $vertexp;
      var $upperseen;
      var $lowerseen;
      var $neighbor;
      var $neighborp;
      var $numpoints;
      $fp_addr=$fp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $numpoints=0;
      var $0=$facetlist_addr;
      var $1=$facets_addr;
      var $2=$printall_addr;
      var $call=_qh_facetvertices($0, $1, $2);
      HEAP32[(($vertices)>>2)]=$call;
      _qh_vertexneighbors();
      $vertex=0;
      var $3=HEAP32[(($vertices)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 19; break; }
    case 3: 
      var $4=HEAP32[(($vertices)>>2)];
      var $e=(($4+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $5=$p;
      $vertexp=$5;
      label = 4; break;
    case 4: 
      var $6=$vertexp;
      var $incdec_ptr=(($6+4)|0);
      $vertexp=$incdec_ptr;
      var $7=HEAP32[(($6)>>2)];
      $vertex=$7;
      var $tobool1=(($7)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 18; break; }
    case 5: 
      $lowerseen=0;
      $upperseen=0;
      $neighbor=0;
      var $8=$vertex;
      var $neighbors=(($8+12)|0);
      var $9=HEAP32[(($neighbors)>>2)];
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $10=$vertex;
      var $neighbors4=(($10+12)|0);
      var $11=HEAP32[(($neighbors4)>>2)];
      var $e5=(($11+4)|0);
      var $arrayidx6=(($e5)|0);
      var $p7=$arrayidx6;
      var $12=$p7;
      $neighborp=$12;
      label = 7; break;
    case 7: 
      var $13=$neighborp;
      var $incdec_ptr9=(($13+4)|0);
      $neighborp=$incdec_ptr9;
      var $14=HEAP32[(($13)>>2)];
      $neighbor=$14;
      var $tobool10=(($14)|0)!=0;
      if ($tobool10) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $15=$neighbor;
      var $16=$15;
      var $bf_field_offs=(($16+76)|0);
      var $17=$bf_field_offs;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 >>> 17;
      var $bf_clear=$19 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $upperseen=1;
      label = 11; break;
    case 10: 
      $lowerseen=1;
      label = 11; break;
    case 11: 
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$upperseen;
      var $tobool15=(($20)|0)!=0;
      if ($tobool15) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $21=$lowerseen;
      var $tobool16=(($21)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $22=$vertex;
      var $23=$22;
      var $bf_field_offs18=(($23+20)|0);
      var $24=$bf_field_offs18;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & -268435457;
      var $27=$26 | 268435456;
      HEAP32[(($24)>>2)]=$27;
      var $28=$numpoints;
      var $inc=((($28)+(1))|0);
      $numpoints=$inc;
      label = 17; break;
    case 16: 
      var $29=$vertex;
      var $30=$29;
      var $bf_field_offs20=(($30+20)|0);
      var $31=$bf_field_offs20;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & -268435457;
      HEAP32[(($31)>>2)]=$33;
      label = 17; break;
    case 17: 
      label = 4; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $34=$fp_addr;
      var $35=$numpoints;
      _qh_fprintf($34, 9091, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      $vertex=0;
      var $36=HEAP32[(($vertices)>>2)];
      var $tobool24=(($36)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 26; break; }
    case 20: 
      var $37=HEAP32[(($vertices)>>2)];
      var $e26=(($37+4)|0);
      var $arrayidx27=(($e26)|0);
      var $p28=$arrayidx27;
      var $38=$p28;
      $vertexp=$38;
      label = 21; break;
    case 21: 
      var $39=$vertexp;
      var $incdec_ptr30=(($39+4)|0);
      $vertexp=$incdec_ptr30;
      var $40=HEAP32[(($39)>>2)];
      $vertex=$40;
      var $tobool31=(($40)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $41=$vertex;
      var $42=$41;
      var $bf_field_offs33=(($42+20)|0);
      var $43=$bf_field_offs33;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 28;
      var $bf_clear34=$45 & 1;
      var $tobool35=(($bf_clear34)|0)!=0;
      if ($tobool35) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $46=$fp_addr;
      var $47=$vertex;
      var $point=(($47+8)|0);
      var $48=HEAP32[(($point)>>2)];
      var $call37=_qh_pointid($48);
      _qh_fprintf($46, 9092, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call37,tempInt));
      label = 24; break;
    case 24: 
      label = 21; break;
    case 25: 
      label = 26; break;
    case 26: 
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printextremes_d["X"]=1;

function _qh_printfacetridges($fp, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet_addr;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      var $numridges;
      $fp_addr=$fp;
      $facet_addr=$facet;
      $numridges=0;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 11;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $5=HEAP32[((((5249092)|0))>>2)];
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $6=$fp_addr;
      _qh_fprintf($6, 9179, ((5295540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ridge=0;
      var $7=$facet_addr;
      var $ridges=(($7+52)|0);
      var $8=HEAP32[(($ridges)>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $9=$facet_addr;
      var $ridges4=(($9+52)|0);
      var $10=HEAP32[(($ridges4)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $ridgep=$11;
      label = 6; break;
    case 6: 
      var $12=$ridgep;
      var $incdec_ptr=(($12+4)|0);
      $ridgep=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $ridge=$13;
      var $tobool5=(($13)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$fp_addr;
      var $15=$ridge;
      var $16=$15;
      var $bf_field_offs6=(($16+12)|0);
      var $17=$bf_field_offs6;
      var $18=HEAP32[(($17)>>2)];
      var $bf_clear7=$18 & 16777215;
      _qh_fprintf($14, 9180, ((5295448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear7,tempInt));
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $19=$fp_addr;
      _qh_fprintf($19, 9181, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 53; break;
    case 10: 
      var $20=$fp_addr;
      _qh_fprintf($20, 9182, ((5295236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ridge=0;
      var $21=$facet_addr;
      var $ridges8=(($21+52)|0);
      var $22=HEAP32[(($ridges8)>>2)];
      var $tobool9=(($22)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $23=$facet_addr;
      var $ridges11=(($23+52)|0);
      var $24=HEAP32[(($ridges11)>>2)];
      var $e12=(($24+4)|0);
      var $arrayidx13=(($e12)|0);
      var $p14=$arrayidx13;
      var $25=$p14;
      $ridgep=$25;
      label = 12; break;
    case 12: 
      var $26=$ridgep;
      var $incdec_ptr16=(($26+4)|0);
      $ridgep=$incdec_ptr16;
      var $27=HEAP32[(($26)>>2)];
      $ridge=$27;
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$ridge;
      var $29=$28;
      var $bf_field_offs19=(($29+12)|0);
      var $30=$bf_field_offs19;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & -16777217;
      HEAP32[(($30)>>2)]=$32;
      label = 12; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $33=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($33)|0)==3;
      if ($cmp) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $34=$facet_addr;
      var $ridges23=(($34+52)|0);
      var $35=HEAP32[(($ridges23)>>2)];
      var $e24=(($35+4)|0);
      var $arrayidx25=(($e24)|0);
      var $p26=$arrayidx25;
      var $36=HEAP32[(($p26)>>2)];
      var $37=$36;
      $ridge=$37;
      label = 17; break;
    case 17: 
      var $38=$ridge;
      var $tobool27=(($38)|0)!=0;
      if ($tobool27) { label = 18; break; } else { var $44 = 0;label = 19; break; }
    case 18: 
      var $39=$ridge;
      var $40=$39;
      var $bf_field_offs28=(($40+12)|0);
      var $41=$bf_field_offs28;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 >>> 24;
      var $bf_clear29=$43 & 1;
      var $tobool30=(($bf_clear29)|0)!=0;
      var $lnot=$tobool30 ^ 1;
      var $44 = $lnot;label = 19; break;
    case 19: 
      var $44;
      if ($44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $45=$ridge;
      var $46=$45;
      var $bf_field_offs31=(($46+12)|0);
      var $47=$bf_field_offs31;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 & -16777217;
      var $50=$49 | 16777216;
      HEAP32[(($47)>>2)]=$50;
      var $51=$fp_addr;
      var $52=$ridge;
      _qh_printridge($51, $52);
      var $53=$numridges;
      var $inc=((($53)+(1))|0);
      $numridges=$inc;
      var $54=$ridge;
      var $55=$facet_addr;
      var $call=_qh_nextridge3d($54, $55, 0);
      $ridge=$call;
      label = 17; break;
    case 21: 
      label = 38; break;
    case 22: 
      $neighbor=0;
      var $56=$facet_addr;
      var $neighbors=(($56+56)|0);
      var $57=HEAP32[(($neighbors)>>2)];
      var $tobool33=(($57)|0)!=0;
      if ($tobool33) { label = 23; break; } else { label = 37; break; }
    case 23: 
      var $58=$facet_addr;
      var $neighbors35=(($58+56)|0);
      var $59=HEAP32[(($neighbors35)>>2)];
      var $e36=(($59+4)|0);
      var $arrayidx37=(($e36)|0);
      var $p38=$arrayidx37;
      var $60=$p38;
      $neighborp=$60;
      label = 24; break;
    case 24: 
      var $61=$neighborp;
      var $incdec_ptr40=(($61+4)|0);
      $neighborp=$incdec_ptr40;
      var $62=HEAP32[(($61)>>2)];
      $neighbor=$62;
      var $tobool41=(($62)|0)!=0;
      if ($tobool41) { label = 25; break; } else { label = 36; break; }
    case 25: 
      $ridge=0;
      var $63=$facet_addr;
      var $ridges43=(($63+52)|0);
      var $64=HEAP32[(($ridges43)>>2)];
      var $tobool44=(($64)|0)!=0;
      if ($tobool44) { label = 26; break; } else { label = 35; break; }
    case 26: 
      var $65=$facet_addr;
      var $ridges46=(($65+52)|0);
      var $66=HEAP32[(($ridges46)>>2)];
      var $e47=(($66+4)|0);
      var $arrayidx48=(($e47)|0);
      var $p49=$arrayidx48;
      var $67=$p49;
      $ridgep=$67;
      label = 27; break;
    case 27: 
      var $68=$ridgep;
      var $incdec_ptr51=(($68+4)|0);
      $ridgep=$incdec_ptr51;
      var $69=HEAP32[(($68)>>2)];
      $ridge=$69;
      var $tobool52=(($69)|0)!=0;
      if ($tobool52) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $70=$ridge;
      var $top=(($70+4)|0);
      var $71=HEAP32[(($top)>>2)];
      var $72=$facet_addr;
      var $cmp54=(($71)|0)==(($72)|0);
      if ($cmp54) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $73=$ridge;
      var $bottom=(($73+8)|0);
      var $74=HEAP32[(($bottom)>>2)];
      var $cond = $74;label = 31; break;
    case 30: 
      var $75=$ridge;
      var $top55=(($75+4)|0);
      var $76=HEAP32[(($top55)>>2)];
      var $cond = $76;label = 31; break;
    case 31: 
      var $cond;
      var $77=$neighbor;
      var $cmp56=(($cond)|0)==(($77)|0);
      if ($cmp56) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $78=$ridge;
      var $79=$78;
      var $bf_field_offs58=(($79+12)|0);
      var $80=$bf_field_offs58;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & -16777217;
      var $83=$82 | 16777216;
      HEAP32[(($80)>>2)]=$83;
      var $84=$fp_addr;
      var $85=$ridge;
      _qh_printridge($84, $85);
      var $86=$numridges;
      var $inc59=((($86)+(1))|0);
      $numridges=$inc59;
      label = 33; break;
    case 33: 
      label = 27; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 24; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $87=$numridges;
      var $88=$facet_addr;
      var $ridges66=(($88+52)|0);
      var $89=HEAP32[(($ridges66)>>2)];
      var $call67=_qh_setsize($89);
      var $cmp68=(($87)|0)!=(($call67)|0);
      if ($cmp68) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $90=$fp_addr;
      _qh_fprintf($90, 9183, ((5295072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ridge=0;
      var $91=$facet_addr;
      var $ridges70=(($91+52)|0);
      var $92=HEAP32[(($ridges70)>>2)];
      var $tobool71=(($92)|0)!=0;
      if ($tobool71) { label = 40; break; } else { label = 44; break; }
    case 40: 
      var $93=$facet_addr;
      var $ridges73=(($93+52)|0);
      var $94=HEAP32[(($ridges73)>>2)];
      var $e74=(($94+4)|0);
      var $arrayidx75=(($e74)|0);
      var $p76=$arrayidx75;
      var $95=$p76;
      $ridgep=$95;
      label = 41; break;
    case 41: 
      var $96=$ridgep;
      var $incdec_ptr78=(($96+4)|0);
      $ridgep=$incdec_ptr78;
      var $97=HEAP32[(($96)>>2)];
      $ridge=$97;
      var $tobool79=(($97)|0)!=0;
      if ($tobool79) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $98=$fp_addr;
      var $99=$ridge;
      var $100=$99;
      var $bf_field_offs81=(($100+12)|0);
      var $101=$bf_field_offs81;
      var $102=HEAP32[(($101)>>2)];
      var $bf_clear82=$102 & 16777215;
      _qh_fprintf($98, 9184, ((5295448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear82,tempInt));
      label = 41; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $103=$fp_addr;
      _qh_fprintf($103, 9185, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 45; break;
    case 45: 
      $ridge=0;
      var $104=$facet_addr;
      var $ridges86=(($104+52)|0);
      var $105=HEAP32[(($ridges86)>>2)];
      var $tobool87=(($105)|0)!=0;
      if ($tobool87) { label = 46; break; } else { label = 52; break; }
    case 46: 
      var $106=$facet_addr;
      var $ridges89=(($106+52)|0);
      var $107=HEAP32[(($ridges89)>>2)];
      var $e90=(($107+4)|0);
      var $arrayidx91=(($e90)|0);
      var $p92=$arrayidx91;
      var $108=$p92;
      $ridgep=$108;
      label = 47; break;
    case 47: 
      var $109=$ridgep;
      var $incdec_ptr94=(($109+4)|0);
      $ridgep=$incdec_ptr94;
      var $110=HEAP32[(($109)>>2)];
      $ridge=$110;
      var $tobool95=(($110)|0)!=0;
      if ($tobool95) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $111=$ridge;
      var $112=$111;
      var $bf_field_offs97=(($112+12)|0);
      var $113=$bf_field_offs97;
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 >>> 24;
      var $bf_clear98=$115 & 1;
      var $tobool99=(($bf_clear98)|0)!=0;
      if ($tobool99) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $116=$fp_addr;
      var $117=$ridge;
      _qh_printridge($116, $117);
      label = 50; break;
    case 50: 
      label = 47; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacetridges["X"]=1;

function _qh_printfacet2geom_points($fp, $point1, $point2, $facet, $offset, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $point1_addr;
      var $point2_addr;
      var $facet_addr;
      var $offset_addr;
      var $color_addr;
      var $p1;
      var $p2;
      $fp_addr=$fp;
      $point1_addr=$point1;
      $point2_addr=$point2;
      $facet_addr=$facet;
      $offset_addr=$offset;
      $color_addr=$color;
      var $0=$point1_addr;
      $p1=$0;
      var $1=$point2_addr;
      $p2=$1;
      var $2=$fp_addr;
      var $3=$facet_addr;
      var $id=(($3+72)|0);
      var $4=HEAP32[(($id)>>2)];
      _qh_fprintf($2, 9093, ((5259264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      var $5=$offset_addr;
      var $cmp=$5 != 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$p1;
      var $7=$facet_addr;
      var $8=$offset_addr;
      var $sub=(-$8);
      var $call=_qh_projectpoint($6, $7, $sub);
      $p1=$call;
      var $9=$p2;
      var $10=$facet_addr;
      var $11=$offset_addr;
      var $sub1=(-$11);
      var $call2=_qh_projectpoint($9, $10, $sub1);
      $p2=$call2;
      label = 4; break;
    case 4: 
      var $12=$fp_addr;
      var $13=$p1;
      var $arrayidx=(($13)|0);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=$p1;
      var $arrayidx3=(($15+8)|0);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=$p2;
      var $arrayidx4=(($17)|0);
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$p2;
      var $arrayidx5=(($19+8)|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($12, 9094, ((5258848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$20,HEAP32[(((tempInt)+(32))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(32))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(((tempInt)+(40))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(40))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $21=$offset_addr;
      var $cmp6=$21 != 0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $22=$p1;
      var $23=$22;
      var $24=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($23, $24);
      var $25=$p2;
      var $26=$25;
      var $27=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($26, $27);
      label = 6; break;
    case 6: 
      var $28=$fp_addr;
      var $29=$color_addr;
      var $arrayidx9=(($29)|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=$color_addr;
      var $arrayidx10=(($31+8)|0);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=$color_addr;
      var $arrayidx11=(($33+16)|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($28, 9095, ((5258612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$32,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet2geom_points["X"]=1;

function _qh_printfacet3geom_points($fp, $points, $facet, $offset, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $points_addr;
      var $facet_addr;
      var $offset_addr;
      var $color_addr;
      var $k;
      var $n;
      var $i;
      var $point;
      var $pointp;
      var $printpoints=__stackBase__;
      $fp_addr=$fp;
      $points_addr=$points;
      $facet_addr=$facet;
      $offset_addr=$offset;
      $color_addr=$color;
      var $0=$points_addr;
      var $call=_qh_setsize($0);
      $n=$call;
      var $1=$fp_addr;
      var $2=$n;
      var $3=$facet_addr;
      var $id=(($3+72)|0);
      var $4=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 9098, ((5257460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt));
      var $5=$offset_addr;
      var $cmp=$5 != 0;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $6=$n;
      var $call1=_qh_settemp($6);
      HEAP32[(($printpoints)>>2)]=$call1;
      $point=0;
      var $7=$points_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $8=$points_addr;
      var $e=(($8+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $9=$p;
      $pointp=$9;
      label = 5; break;
    case 5: 
      var $10=$pointp;
      var $incdec_ptr=(($10+4)|0);
      $pointp=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $point=$11;
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$point;
      var $13=$facet_addr;
      var $14=$offset_addr;
      var $sub=(-$14);
      var $call4=_qh_projectpoint($12, $13, $sub);
      var $15=$call4;
      _qh_setappend($printpoints, $15);
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $16=$points_addr;
      HEAP32[(($printpoints)>>2)]=$16;
      label = 10; break;
    case 10: 
      $point=0;
      var $17=HEAP32[(($printpoints)>>2)];
      var $tobool6=(($17)|0)!=0;
      if ($tobool6) { label = 11; break; } else { label = 24; break; }
    case 11: 
      var $18=HEAP32[(($printpoints)>>2)];
      var $e8=(($18+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      var $19=$p10;
      $pointp=$19;
      label = 12; break;
    case 12: 
      var $20=$pointp;
      var $incdec_ptr12=(($20+4)|0);
      $pointp=$incdec_ptr12;
      var $21=HEAP32[(($20)>>2)];
      $point=$21;
      var $tobool13=(($21)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 23; break; }
    case 13: 
      $k=0;
      label = 14; break;
    case 14: 
      var $22=$k;
      var $23=HEAP32[((((5247508)|0))>>2)];
      var $cmp16=(($22)|0) < (($23)|0);
      if ($cmp16) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $24=$k;
      var $25=HEAP32[((((5247008)|0))>>2)];
      var $cmp18=(($24)|0)==(($25)|0);
      if ($cmp18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $26=$fp_addr;
      _qh_fprintf($26, 9099, ((5270232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 18; break;
    case 17: 
      var $27=$fp_addr;
      var $28=$k;
      var $29=$point;
      var $arrayidx21=(($29+($28<<3))|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($27, 9100, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $31=$k;
      var $inc=((($31)+(1))|0);
      $k=$inc;
      label = 14; break;
    case 20: 
      var $32=HEAP32[(($printpoints)>>2)];
      var $33=$points_addr;
      var $cmp24=(($32)|0)!=(($33)|0);
      if ($cmp24) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $34=$point;
      var $35=$34;
      var $36=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($35, $36);
      label = 22; break;
    case 22: 
      var $37=$fp_addr;
      _qh_fprintf($37, 9101, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 12; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $38=HEAP32[(($printpoints)>>2)];
      var $39=$points_addr;
      var $cmp29=(($38)|0)!=(($39)|0);
      if ($cmp29) { label = 25; break; } else { label = 26; break; }
    case 25: 
      _qh_settempfree($printpoints);
      label = 26; break;
    case 26: 
      var $40=$fp_addr;
      var $41=$n;
      _qh_fprintf($40, 9102, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,tempInt));
      $i=0;
      label = 27; break;
    case 27: 
      var $42=$i;
      var $43=$n;
      var $cmp33=(($42)|0) < (($43)|0);
      if ($cmp33) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $44=$fp_addr;
      var $45=$i;
      _qh_fprintf($44, 9103, ((5256740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$45,tempInt));
      label = 29; break;
    case 29: 
      var $46=$i;
      var $inc36=((($46)+(1))|0);
      $i=$inc36;
      label = 27; break;
    case 30: 
      var $47=$fp_addr;
      var $48=$color_addr;
      var $arrayidx38=(($48)|0);
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $50=$color_addr;
      var $arrayidx39=(($50+8)|0);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx39)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx39)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $52=$color_addr;
      var $arrayidx40=(($52+16)|0);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($47, 9104, ((5256492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$49,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$53,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacet3geom_points["X"]=1;

function _qh_printhyperplaneintersection($fp, $facet1, $facet2, $vertices, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet1_addr;
      var $facet2_addr;
      var $vertices_addr;
      var $color_addr;
      var $costheta;
      var $denominator;
      var $dist1=__stackBase__;
      var $dist2=(__stackBase__)+(8);
      var $s;
      var $t;
      var $mindenom;
      var $p=(__stackBase__)+(16);
      var $vertex;
      var $vertexp;
      var $i;
      var $k;
      var $nearzero1=(__stackBase__)+(48);
      var $nearzero2=(__stackBase__)+(52);
      $fp_addr=$fp;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      $vertices_addr=$vertices;
      $color_addr=$color;
      var $0=$facet1_addr;
      var $normal=(($0+24)|0);
      var $1=HEAP32[(($normal)>>2)];
      var $2=$facet2_addr;
      var $normal1=(($2+24)|0);
      var $3=HEAP32[(($normal1)>>2)];
      var $call=_qh_getangle($1, $3);
      $costheta=$call;
      var $4=$costheta;
      var $5=$costheta;
      var $mul=($4)*($5);
      var $sub=(1)-($mul);
      $denominator=$sub;
      var $6=$vertices_addr;
      var $call2=_qh_setsize($6);
      $i=$call2;
      var $7=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($7)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$fp_addr;
      var $9=$i;
      var $10=$i;
      _qh_fprintf($8, 9195, ((5293544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$10,tempInt));
      label = 9; break;
    case 4: 
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $cmp3=(($11)|0)==4;
      if ($cmp3) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $12=HEAP32[((((5247008)|0))>>2)];
      var $cmp4=(($12)|0) >= 0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$fp_addr;
      _qh_fprintf($13, 9196, ((5293344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 7: 
      var $14=HEAP32[((((5249128)|0))>>2)];
      var $inc=((($14)+(1))|0);
      HEAP32[((((5249128)|0))>>2)]=$inc;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$fp_addr;
      var $16=$facet1_addr;
      var $id=(($16+72)|0);
      var $17=HEAP32[(($id)>>2)];
      var $18=$facet2_addr;
      var $id8=(($18+72)|0);
      var $19=HEAP32[(($id8)>>2)];
      _qh_fprintf($15, 9197, ((5293136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$19,tempInt));
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul9=($20)*(10);
      var $div=(1)/($mul9);
      $mindenom=$div;
      $vertex=0;
      var $21=$vertices_addr;
      var $tobool=(($21)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 26; break; }
    case 10: 
      var $22=$vertices_addr;
      var $e=(($22+4)|0);
      var $arrayidx=(($e)|0);
      var $p11=$arrayidx;
      var $23=$p11;
      $vertexp=$23;
      label = 11; break;
    case 11: 
      var $24=$vertexp;
      var $incdec_ptr=(($24+4)|0);
      $vertexp=$incdec_ptr;
      var $25=HEAP32[(($24)>>2)];
      $vertex=$25;
      var $tobool12=(($25)|0)!=0;
      if ($tobool12) { label = 12; break; } else { label = 25; break; }
    case 12: 
      var $26=HEAP32[(((((5243428)|0)))>>2)];
      var $add=((($26)+(2))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$add;
      var $27=$vertex;
      var $point=(($27+8)|0);
      var $28=HEAP32[(($point)>>2)];
      var $29=$facet1_addr;
      _qh_distplane($28, $29, $dist1);
      var $30=$vertex;
      var $point13=(($30+8)|0);
      var $31=HEAP32[(($point13)>>2)];
      var $32=$facet2_addr;
      _qh_distplane($31, $32, $dist2);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub14=(-$33);
      var $34=$costheta;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul15=($34)*($35);
      var $add16=($sub14)+($mul15);
      var $36=$denominator;
      var $37=$mindenom;
      var $call17=_qh_divzero($add16, $36, $37, $nearzero1);
      $s=$call17;
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub18=(-$38);
      var $39=$costheta;
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul19=($39)*($40);
      var $add20=($sub18)+($mul19);
      var $41=$denominator;
      var $42=$mindenom;
      var $call21=_qh_divzero($add20, $41, $42, $nearzero2);
      $t=$call21;
      var $43=HEAP32[(($nearzero1)>>2)];
      var $tobool22=(($43)|0)!=0;
      if ($tobool22) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $44=HEAP32[(($nearzero2)>>2)];
      var $tobool23=(($44)|0)!=0;
      if ($tobool23) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $t=0;
      $s=0;
      label = 15; break;
    case 15: 
      var $45=HEAP32[((((5247508)|0))>>2)];
      $k=$45;
      label = 16; break;
    case 16: 
      var $46=$k;
      var $dec=((($46)-(1))|0);
      $k=$dec;
      var $tobool27=(($46)|0)!=0;
      if ($tobool27) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $47=$k;
      var $48=$vertex;
      var $point29=(($48+8)|0);
      var $49=HEAP32[(($point29)>>2)];
      var $arrayidx30=(($49+($47<<3))|0);
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $51=$k;
      var $52=$facet1_addr;
      var $normal31=(($52+24)|0);
      var $53=HEAP32[(($normal31)>>2)];
      var $arrayidx32=(($53+($51<<3))|0);
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx32)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx32)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $55=$s;
      var $mul33=($54)*($55);
      var $add34=($50)+($mul33);
      var $56=$k;
      var $57=$facet2_addr;
      var $normal35=(($57+24)|0);
      var $58=HEAP32[(($normal35)>>2)];
      var $arrayidx36=(($58+($56<<3))|0);
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx36)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx36)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $60=$t;
      var $mul37=($59)*($60);
      var $add38=($add34)+($mul37);
      var $61=$k;
      var $arrayidx39=(($p+($61<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$add38,HEAP32[(($arrayidx39)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx39)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 18: 
      var $62=HEAP32[((((5247156)|0))>>2)];
      var $cmp40=(($62)|0) <= 3;
      if ($cmp40) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $arraydecay=(($p)|0);
      var $arraydecay42=(($p)|0);
      _qh_projectdim3($arraydecay, $arraydecay42);
      var $63=$fp_addr;
      var $arrayidx43=(($p)|0);
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx43)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx43)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx44=(($p+8)|0);
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx44)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx44)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx45=(($p+16)|0);
      var $66=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx45)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx45)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($63, 9198, ((5292948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$64,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$65,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$66,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 21; break;
    case 20: 
      var $67=$fp_addr;
      var $arrayidx47=(($p)|0);
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx48=(($p+8)|0);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx49=(($p+16)|0);
      var $70=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx50=(($p+24)|0);
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($67, 9199, ((5292820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$68,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$69,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$70,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$71,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 21; break;
    case 21: 
      var $72=HEAP32[(($nearzero1)>>2)];
      var $73=HEAP32[(($nearzero2)>>2)];
      var $add52=((($72)+($73))|0);
      var $tobool53=(($add52)|0)!=0;
      if ($tobool53) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $74=$fp_addr;
      var $75=$vertex;
      var $point55=(($75+8)|0);
      var $76=HEAP32[(($point55)>>2)];
      var $call56=_qh_pointid($76);
      _qh_fprintf($74, 9200, ((5292764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call56,tempInt));
      label = 24; break;
    case 23: 
      var $77=$fp_addr;
      var $78=$vertex;
      var $point58=(($78+8)|0);
      var $79=HEAP32[(($point58)>>2)];
      var $call59=_qh_pointid($79);
      _qh_fprintf($77, 9201, ((5292640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call59,tempInt));
      label = 24; break;
    case 24: 
      label = 11; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $80=HEAP32[((((5247508)|0))>>2)];
      var $cmp63=(($80)|0)==3;
      if ($cmp63) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $81=$fp_addr;
      var $82=$color_addr;
      var $arrayidx65=(($82)|0);
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx65)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx65)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $84=$color_addr;
      var $arrayidx66=(($84+8)|0);
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx66)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx66)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $86=$color_addr;
      var $arrayidx67=(($86+16)|0);
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx67)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx67)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($81, 9202, ((5258612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$83,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$85,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$87,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 32; break;
    case 28: 
      var $88=HEAP32[((((5247508)|0))>>2)];
      var $cmp69=(($88)|0)==4;
      if ($cmp69) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $89=HEAP32[((((5247008)|0))>>2)];
      var $cmp71=(($89)|0) >= 0;
      if ($cmp71) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $90=$fp_addr;
      var $91=$color_addr;
      var $arrayidx73=(($91)|0);
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx73)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx73)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $93=$color_addr;
      var $arrayidx74=(($93+8)|0);
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx74)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx74)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $95=$color_addr;
      var $arrayidx75=(($95+16)|0);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx75)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx75)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($90, 9203, ((5292384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$92,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$94,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$96,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printhyperplaneintersection["X"]=1;

function _qh_printline3geom($fp, $pointA, $pointB, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $pointA_addr;
      var $pointB_addr;
      var $color_addr;
      var $k;
      var $pA=__stackBase__;
      var $pB=(__stackBase__)+(32);
      $fp_addr=$fp;
      $pointA_addr=$pointA;
      $pointB_addr=$pointB;
      $color_addr=$color;
      var $0=$pointA_addr;
      var $arraydecay=(($pA)|0);
      _qh_projectdim3($0, $arraydecay);
      var $1=$pointB_addr;
      var $arraydecay1=(($pB)|0);
      _qh_projectdim3($1, $arraydecay1);
      var $arrayidx=(($pA)|0);
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx2=(($pB)|0);
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($2)-($3);
      var $call=Math.abs($sub);
      var $cmp=$call > 0.001;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $arrayidx3=(($pA+8)|0);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx4=(($pB+8)|0);
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub5=($4)-($5);
      var $call6=Math.abs($sub5);
      var $cmp7=$call6 > 0.001;
      if ($cmp7) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $arrayidx9=(($pA+16)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx10=(($pB+16)|0);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx10)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx10)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub11=($6)-($7);
      var $call12=Math.abs($sub11);
      var $cmp13=$call12 > 0.001;
      if ($cmp13) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $8=$fp_addr;
      _qh_fprintf($8, 9204, ((5292328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $k=0;
      label = 6; break;
    case 6: 
      var $9=$k;
      var $cmp14=(($9)|0) < 3;
      if ($cmp14) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $10=$fp_addr;
      var $11=$k;
      var $arrayidx15=(($pB+($11<<3))|0);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($10, 9205, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 8; break;
    case 8: 
      var $13=$k;
      var $inc=((($13)+(1))|0);
      $k=$inc;
      label = 6; break;
    case 9: 
      var $14=$fp_addr;
      var $15=$pointB_addr;
      var $call16=_qh_pointid($15);
      _qh_fprintf($14, 9206, ((5292164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call16,tempInt));
      label = 11; break;
    case 10: 
      var $16=$fp_addr;
      _qh_fprintf($16, 9207, ((5292120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 11; break;
    case 11: 
      $k=0;
      label = 12; break;
    case 12: 
      var $17=$k;
      var $cmp18=(($17)|0) < 3;
      if ($cmp18) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $18=$fp_addr;
      var $19=$k;
      var $arrayidx20=(($pA+($19<<3))|0);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($18, 9208, ((5257144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$20,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 14; break;
    case 14: 
      var $21=$k;
      var $inc22=((($21)+(1))|0);
      $k=$inc22;
      label = 12; break;
    case 15: 
      var $22=$fp_addr;
      var $23=$pointA_addr;
      var $call24=_qh_pointid($23);
      _qh_fprintf($22, 9209, ((5292164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call24,tempInt));
      var $24=$fp_addr;
      var $25=$color_addr;
      var $arrayidx25=(($25)|0);
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx25)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx25)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $27=$color_addr;
      var $arrayidx26=(($27+8)|0);
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx26)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx26)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $29=$color_addr;
      var $arrayidx27=(($29+16)|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx27)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx27)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($24, 9210, ((5292004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$26,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$28,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printline3geom["X"]=1;

function _qh_printvertices($fp, $string, $vertices) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $vertices_addr;
      var $vertex;
      var $vertexp;
      $fp_addr=$fp;
      $string_addr=$string;
      $vertices_addr=$vertices;
      var $0=$fp_addr;
      var $1=$string_addr;
      _qh_fprintf($0, 9245, ((5291816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
      $vertex=0;
      var $2=$vertices_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$vertices_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $vertexp=$4;
      label = 4; break;
    case 4: 
      var $5=$vertexp;
      var $incdec_ptr=(($5+4)|0);
      $vertexp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $vertex=$6;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$fp_addr;
      var $8=$vertex;
      var $point=(($8+8)|0);
      var $9=HEAP32[(($point)>>2)];
      var $call=_qh_pointid($9);
      var $10=$vertex;
      var $11=$10;
      var $bf_field_offs=(($11+20)|0);
      var $12=$bf_field_offs;
      var $13=HEAP32[(($12)>>2)];
      var $bf_clear=$13 & 16777215;
      _qh_fprintf($7, 9246, ((5288644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,tempInt));
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $14=$fp_addr;
      _qh_fprintf($14, 9247, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printridge($fp, $ridge) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $ridge_addr;
      $fp_addr=$fp;
      $ridge_addr=$ridge;
      var $0=$fp_addr;
      var $1=$ridge_addr;
      var $2=$1;
      var $bf_field_offs=(($2+12)|0);
      var $3=$bf_field_offs;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 16777215;
      _qh_fprintf($0, 9222, ((5291644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      var $5=$ridge_addr;
      var $6=$5;
      var $bf_field_offs1=(($6+12)|0);
      var $7=$bf_field_offs1;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 25;
      var $bf_clear2=$9 & 1;
      var $tobool=(($bf_clear2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$fp_addr;
      _qh_fprintf($10, 9223, ((5249592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $11=$ridge_addr;
      var $12=$11;
      var $bf_field_offs3=(($12+12)|0);
      var $13=$bf_field_offs3;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 26;
      var $bf_clear4=$15 & 1;
      var $tobool5=(($bf_clear4)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$fp_addr;
      _qh_fprintf($16, 9224, ((5291512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      var $17=$fp_addr;
      _qh_fprintf($17, 9225, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $18=$fp_addr;
      var $19=$ridge_addr;
      var $vertices=(($19)|0);
      var $20=HEAP32[(($vertices)>>2)];
      _qh_printvertices($18, ((5291200)|0), $20);
      var $21=$ridge_addr;
      var $top=(($21+4)|0);
      var $22=HEAP32[(($top)>>2)];
      var $tobool8=(($22)|0)!=0;
      if ($tobool8) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $23=$ridge_addr;
      var $bottom=(($23+8)|0);
      var $24=HEAP32[(($bottom)>>2)];
      var $tobool9=(($24)|0)!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $25=$fp_addr;
      var $26=$ridge_addr;
      var $top11=(($26+4)|0);
      var $27=HEAP32[(($top11)>>2)];
      var $id=(($27+72)|0);
      var $28=HEAP32[(($id)>>2)];
      var $29=$ridge_addr;
      var $bottom12=(($29+8)|0);
      var $30=HEAP32[(($bottom12)>>2)];
      var $id13=(($30+72)|0);
      var $31=HEAP32[(($id13)>>2)];
      _qh_fprintf($25, 9226, ((5291124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$28,HEAP32[(((tempInt)+(4))>>2)]=$31,tempInt));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printridge["X"]=1;

function _qh_printpoints_out($fp, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $allpoints;
      var $numpoints;
      var $point_i;
      var $point_n;
      var $vertices=__stackBase__;
      var $points=(__stackBase__)+(4);
      var $facet;
      var $facetp;
      var $point;
      var $pointp;
      var $vertex;
      var $vertexp;
      var $id;
      $fp_addr=$fp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($1);
      var $add=((($0)+($call))|0);
      $allpoints=$add;
      $numpoints=0;
      var $2=$allpoints;
      var $call1=_qh_settemp($2);
      HEAP32[(($points)>>2)]=$call1;
      var $3=HEAP32[(($points)>>2)];
      var $4=$allpoints;
      _qh_setzero($3, 0, $4);
      var $5=$facetlist_addr;
      var $6=$facets_addr;
      var $7=$printall_addr;
      var $call2=_qh_facetvertices($5, $6, $7);
      HEAP32[(($vertices)>>2)]=$call2;
      $vertex=0;
      var $8=HEAP32[(($vertices)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=HEAP32[(($vertices)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=$p;
      $vertexp=$10;
      label = 4; break;
    case 4: 
      var $11=$vertexp;
      var $incdec_ptr=(($11+4)|0);
      $vertexp=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $vertex=$12;
      var $tobool3=(($12)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $13=$vertex;
      var $point4=(($13+8)|0);
      var $14=HEAP32[(($point4)>>2)];
      var $call5=_qh_pointid($14);
      $id=$call5;
      var $15=$id;
      var $cmp=(($15)|0) >= 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$vertex;
      var $point7=(($16+8)|0);
      var $17=HEAP32[(($point7)>>2)];
      var $18=$17;
      var $19=$id;
      var $20=HEAP32[(($points)>>2)];
      var $e8=(($20+4)|0);
      var $arrayidx9=(($e8+($19<<2))|0);
      var $p10=$arrayidx9;
      HEAP32[(($p10)>>2)]=$18;
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $21=HEAP32[((((5247052)|0))>>2)];
      var $tobool12=(($21)|0)!=0;
      if ($tobool12) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $22=HEAP32[((((5247048)|0))>>2)];
      var $tobool13=(($22)|0)!=0;
      if ($tobool13) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $23=HEAP32[((((5247504)|0))>>2)];
      var $tobool15=(($23)|0)!=0;
      if ($tobool15) { label = 12; break; } else { label = 46; break; }
    case 12: 
      var $24=$facetlist_addr;
      var $tobool17=(($24)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 30; break; }
    case 13: 
      var $25=$facetlist_addr;
      $facet=$25;
      label = 14; break;
    case 14: 
      var $26=$facet;
      var $tobool20=(($26)|0)!=0;
      if ($tobool20) { label = 15; break; } else { var $29 = 0;label = 16; break; }
    case 15: 
      var $27=$facet;
      var $next=(($27+44)|0);
      var $28=HEAP32[(($next)>>2)];
      var $tobool21=(($28)|0)!=0;
      var $29 = $tobool21;label = 16; break;
    case 16: 
      var $29;
      if ($29) { label = 17; break; } else { label = 29; break; }
    case 17: 
      var $30=$printall_addr;
      var $tobool23=(($30)|0)!=0;
      if ($tobool23) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $31=$facet;
      var $call24=_qh_skipfacet($31);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 28; break;
    case 20: 
      $point=0;
      var $32=$facet;
      var $coplanarset=(($32+64)|0);
      var $33=HEAP32[(($coplanarset)>>2)];
      var $tobool28=(($33)|0)!=0;
      if ($tobool28) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $34=$facet;
      var $coplanarset30=(($34+64)|0);
      var $35=HEAP32[(($coplanarset30)>>2)];
      var $e31=(($35+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      var $36=$p33;
      $pointp=$36;
      label = 22; break;
    case 22: 
      var $37=$pointp;
      var $incdec_ptr35=(($37+4)|0);
      $pointp=$incdec_ptr35;
      var $38=HEAP32[(($37)>>2)];
      $point=$38;
      var $tobool36=(($38)|0)!=0;
      if ($tobool36) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $39=$point;
      var $call38=_qh_pointid($39);
      $id=$call38;
      var $40=$id;
      var $cmp39=(($40)|0) >= 0;
      if ($cmp39) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $41=$point;
      var $42=$41;
      var $43=$id;
      var $44=HEAP32[(($points)>>2)];
      var $e41=(($44+4)|0);
      var $arrayidx42=(($e41+($43<<2))|0);
      var $p43=$arrayidx42;
      HEAP32[(($p43)>>2)]=$42;
      label = 25; break;
    case 25: 
      label = 22; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $45=$facet;
      var $next47=(($45+44)|0);
      var $46=HEAP32[(($next47)>>2)];
      $facet=$46;
      label = 14; break;
    case 29: 
      label = 30; break;
    case 30: 
      $facet=0;
      var $47=$facets_addr;
      var $tobool50=(($47)|0)!=0;
      if ($tobool50) { label = 31; break; } else { label = 45; break; }
    case 31: 
      var $48=$facets_addr;
      var $e52=(($48+4)|0);
      var $arrayidx53=(($e52)|0);
      var $p54=$arrayidx53;
      var $49=$p54;
      $facetp=$49;
      label = 32; break;
    case 32: 
      var $50=$facetp;
      var $incdec_ptr56=(($50+4)|0);
      $facetp=$incdec_ptr56;
      var $51=HEAP32[(($50)>>2)];
      $facet=$51;
      var $tobool57=(($51)|0)!=0;
      if ($tobool57) { label = 33; break; } else { label = 44; break; }
    case 33: 
      var $52=$printall_addr;
      var $tobool59=(($52)|0)!=0;
      if ($tobool59) { label = 36; break; } else { label = 34; break; }
    case 34: 
      var $53=$facet;
      var $call61=_qh_skipfacet($53);
      var $tobool62=(($call61)|0)!=0;
      if ($tobool62) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 32; break;
    case 36: 
      $point=0;
      var $54=$facet;
      var $coplanarset65=(($54+64)|0);
      var $55=HEAP32[(($coplanarset65)>>2)];
      var $tobool66=(($55)|0)!=0;
      if ($tobool66) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $56=$facet;
      var $coplanarset68=(($56+64)|0);
      var $57=HEAP32[(($coplanarset68)>>2)];
      var $e69=(($57+4)|0);
      var $arrayidx70=(($e69)|0);
      var $p71=$arrayidx70;
      var $58=$p71;
      $pointp=$58;
      label = 38; break;
    case 38: 
      var $59=$pointp;
      var $incdec_ptr73=(($59+4)|0);
      $pointp=$incdec_ptr73;
      var $60=HEAP32[(($59)>>2)];
      $point=$60;
      var $tobool74=(($60)|0)!=0;
      if ($tobool74) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $61=$point;
      var $call76=_qh_pointid($61);
      $id=$call76;
      var $62=$id;
      var $cmp77=(($62)|0) >= 0;
      if ($cmp77) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $63=$point;
      var $64=$63;
      var $65=$id;
      var $66=HEAP32[(($points)>>2)];
      var $e79=(($66+4)|0);
      var $arrayidx80=(($e79+($65<<2))|0);
      var $p81=$arrayidx80;
      HEAP32[(($p81)>>2)]=$64;
      label = 41; break;
    case 41: 
      label = 38; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 32; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      _qh_settempfree($vertices);
      $point=0;
      var $67=HEAP32[(($points)>>2)];
      var $tobool88=(($67)|0)!=0;
      if ($tobool88) { label = 47; break; } else { label = 54; break; }
    case 47: 
      $point_i=0;
      var $68=HEAP32[(($points)>>2)];
      var $e90=(($68+4)|0);
      var $arrayidx91=(($e90)|0);
      var $p92=$arrayidx91;
      var $69=HEAP32[(($p92)>>2)];
      var $70=$69;
      $point=$70;
      var $71=HEAP32[(($points)>>2)];
      var $call93=_qh_setsize($71);
      $point_n=$call93;
      label = 48; break;
    case 48: 
      var $72=$point_i;
      var $73=$point_n;
      var $cmp95=(($72)|0) < (($73)|0);
      if ($cmp95) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $74=$point;
      var $tobool97=(($74)|0)!=0;
      if ($tobool97) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $75=$numpoints;
      var $inc=((($75)+(1))|0);
      $numpoints=$inc;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $76=$point_i;
      var $inc101=((($76)+(1))|0);
      $point_i=$inc101;
      var $77=HEAP32[(($points)>>2)];
      var $e102=(($77+4)|0);
      var $arrayidx103=(($e102+($inc101<<2))|0);
      var $p104=$arrayidx103;
      var $78=HEAP32[(($p104)>>2)];
      var $79=$78;
      $point=$79;
      label = 48; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $80=HEAP32[((((5246976)|0))>>2)];
      var $tobool107=(($80)|0)!=0;
      if ($tobool107) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $81=$fp_addr;
      var $82=$numpoints;
      var $83=HEAP32[((((5247508)|0))>>2)];
      var $add109=((($83)+(1))|0);
      _qh_fprintf($81, 9218, ((5265668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),HEAP32[(((tempInt)+(8))>>2)]=$82,HEAP32[(((tempInt)+(12))>>2)]=$add109,tempInt));
      label = 57; break;
    case 56: 
      var $84=$fp_addr;
      var $85=HEAP32[((((5247508)|0))>>2)];
      var $86=$numpoints;
      _qh_fprintf($84, 9219, ((5277120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$85,HEAP32[(((tempInt)+(4))>>2)]=$86,tempInt));
      label = 57; break;
    case 57: 
      $point=0;
      var $87=HEAP32[(($points)>>2)];
      var $tobool111=(($87)|0)!=0;
      if ($tobool111) { label = 58; break; } else { label = 67; break; }
    case 58: 
      $point_i=0;
      var $88=HEAP32[(($points)>>2)];
      var $e113=(($88+4)|0);
      var $arrayidx114=(($e113)|0);
      var $p115=$arrayidx114;
      var $89=HEAP32[(($p115)>>2)];
      var $90=$89;
      $point=$90;
      var $91=HEAP32[(($points)>>2)];
      var $call116=_qh_setsize($91);
      $point_n=$call116;
      label = 59; break;
    case 59: 
      var $92=$point_i;
      var $93=$point_n;
      var $cmp118=(($92)|0) < (($93)|0);
      if ($cmp118) { label = 60; break; } else { label = 66; break; }
    case 60: 
      var $94=$point;
      var $tobool120=(($94)|0)!=0;
      if ($tobool120) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $95=HEAP32[((((5246976)|0))>>2)];
      var $tobool122=(($95)|0)!=0;
      if ($tobool122) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $96=$fp_addr;
      _qh_fprintf($96, 9220, ((5277964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 63; break;
    case 63: 
      var $97=$fp_addr;
      var $98=$point;
      _qh_printpoint($97, 0, $98);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $99=$point_i;
      var $inc127=((($99)+(1))|0);
      $point_i=$inc127;
      var $100=HEAP32[(($points)>>2)];
      var $e128=(($100+4)|0);
      var $arrayidx129=(($e128+($inc127<<2))|0);
      var $p130=$arrayidx129;
      var $101=HEAP32[(($p130)>>2)];
      var $102=$101;
      $point=$102;
      label = 59; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $103=HEAP32[((((5246976)|0))>>2)];
      var $tobool133=(($103)|0)!=0;
      if ($tobool133) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $104=$fp_addr;
      _qh_fprintf($104, 9221, ((5260800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 69; break;
    case 69: 
      _qh_settempfree($points);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printpoints_out["X"]=1;

function _qh_printvneighbors($fp, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $numfacets=__stackBase__;
      var $numsimplicial=(__stackBase__)+(4);
      var $numridges=(__stackBase__)+(8);
      var $totneighbors=(__stackBase__)+(12);
      var $numneighbors;
      var $numcoplanars=(__stackBase__)+(16);
      var $numtricoplanars=(__stackBase__)+(20);
      var $vertices=(__stackBase__)+(24);
      var $vertex_points=(__stackBase__)+(28);
      var $coplanar_points=(__stackBase__)+(32);
      var $numpoints;
      var $vertex;
      var $vertexp;
      var $vertex_i;
      var $vertex_n;
      var $facet;
      var $facetp;
      var $neighbor;
      var $neighborp;
      var $point;
      var $pointp;
      $fp_addr=$fp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($1);
      var $add=((($0)+($call))|0);
      $numpoints=$add;
      var $2=$facetlist_addr;
      var $3=$facets_addr;
      var $4=$printall_addr;
      _qh_countfacets($2, $3, $4, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
      var $5=$fp_addr;
      var $6=$numpoints;
      _qh_fprintf($5, 9248, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
      _qh_vertexneighbors();
      var $7=$facetlist_addr;
      var $8=$facets_addr;
      var $9=$printall_addr;
      var $call1=_qh_facetvertices($7, $8, $9);
      HEAP32[(($vertices)>>2)]=$call1;
      var $10=$numpoints;
      var $call2=_qh_settemp($10);
      HEAP32[(($vertex_points)>>2)]=$call2;
      var $11=$numpoints;
      var $call3=_qh_settemp($11);
      HEAP32[(($coplanar_points)>>2)]=$call3;
      var $12=HEAP32[(($vertex_points)>>2)];
      var $13=$numpoints;
      _qh_setzero($12, 0, $13);
      var $14=HEAP32[(($coplanar_points)>>2)];
      var $15=$numpoints;
      _qh_setzero($14, 0, $15);
      $vertex=0;
      var $16=HEAP32[(($vertices)>>2)];
      var $tobool=(($16)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $17=HEAP32[(($vertices)>>2)];
      var $e=(($17+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $18=$p;
      $vertexp=$18;
      label = 4; break;
    case 4: 
      var $19=$vertexp;
      var $incdec_ptr=(($19+4)|0);
      $vertexp=$incdec_ptr;
      var $20=HEAP32[(($19)>>2)];
      $vertex=$20;
      var $tobool4=(($20)|0)!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=HEAP32[(($vertex_points)>>2)];
      var $22=$vertex;
      var $point5=(($22+8)|0);
      var $23=HEAP32[(($point5)>>2)];
      var $24=$vertex;
      var $25=$24;
      _qh_point_add($21, $23, $25);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$facetlist_addr;
      var $tobool6=(($26)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 20; break; }
    case 8: 
      var $27=$facetlist_addr;
      $facet=$27;
      label = 9; break;
    case 9: 
      var $28=$facet;
      var $tobool9=(($28)|0)!=0;
      if ($tobool9) { label = 10; break; } else { var $31 = 0;label = 11; break; }
    case 10: 
      var $29=$facet;
      var $next=(($29+44)|0);
      var $30=HEAP32[(($next)>>2)];
      var $tobool10=(($30)|0)!=0;
      var $31 = $tobool10;label = 11; break;
    case 11: 
      var $31;
      if ($31) { label = 12; break; } else { label = 19; break; }
    case 12: 
      $point=0;
      var $32=$facet;
      var $coplanarset=(($32+64)|0);
      var $33=HEAP32[(($coplanarset)>>2)];
      var $tobool12=(($33)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $34=$facet;
      var $coplanarset14=(($34+64)|0);
      var $35=HEAP32[(($coplanarset14)>>2)];
      var $e15=(($35+4)|0);
      var $arrayidx16=(($e15)|0);
      var $p17=$arrayidx16;
      var $36=$p17;
      $pointp=$36;
      label = 14; break;
    case 14: 
      var $37=$pointp;
      var $incdec_ptr19=(($37+4)|0);
      $pointp=$incdec_ptr19;
      var $38=HEAP32[(($37)>>2)];
      $point=$38;
      var $tobool20=(($38)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $39=HEAP32[(($coplanar_points)>>2)];
      var $40=$point;
      var $41=$facet;
      var $42=$41;
      _qh_point_add($39, $40, $42);
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $43=$facet;
      var $next24=(($43+44)|0);
      var $44=HEAP32[(($next24)>>2)];
      $facet=$44;
      label = 9; break;
    case 19: 
      label = 20; break;
    case 20: 
      $facet=0;
      var $45=$facets_addr;
      var $tobool27=(($45)|0)!=0;
      if ($tobool27) { label = 21; break; } else { label = 30; break; }
    case 21: 
      var $46=$facets_addr;
      var $e29=(($46+4)|0);
      var $arrayidx30=(($e29)|0);
      var $p31=$arrayidx30;
      var $47=$p31;
      $facetp=$47;
      label = 22; break;
    case 22: 
      var $48=$facetp;
      var $incdec_ptr33=(($48+4)|0);
      $facetp=$incdec_ptr33;
      var $49=HEAP32[(($48)>>2)];
      $facet=$49;
      var $tobool34=(($49)|0)!=0;
      if ($tobool34) { label = 23; break; } else { label = 29; break; }
    case 23: 
      $point=0;
      var $50=$facet;
      var $coplanarset36=(($50+64)|0);
      var $51=HEAP32[(($coplanarset36)>>2)];
      var $tobool37=(($51)|0)!=0;
      if ($tobool37) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $52=$facet;
      var $coplanarset39=(($52+64)|0);
      var $53=HEAP32[(($coplanarset39)>>2)];
      var $e40=(($53+4)|0);
      var $arrayidx41=(($e40)|0);
      var $p42=$arrayidx41;
      var $54=$p42;
      $pointp=$54;
      label = 25; break;
    case 25: 
      var $55=$pointp;
      var $incdec_ptr44=(($55+4)|0);
      $pointp=$incdec_ptr44;
      var $56=HEAP32[(($55)>>2)];
      $point=$56;
      var $tobool45=(($56)|0)!=0;
      if ($tobool45) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $57=HEAP32[(($coplanar_points)>>2)];
      var $58=$point;
      var $59=$facet;
      var $60=$59;
      _qh_point_add($57, $58, $60);
      label = 25; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 22; break;
    case 29: 
      label = 30; break;
    case 30: 
      $vertex=0;
      var $61=HEAP32[(($vertex_points)>>2)];
      var $tobool51=(($61)|0)!=0;
      if ($tobool51) { label = 31; break; } else { label = 58; break; }
    case 31: 
      $vertex_i=0;
      var $62=HEAP32[(($vertex_points)>>2)];
      var $e53=(($62+4)|0);
      var $arrayidx54=(($e53)|0);
      var $p55=$arrayidx54;
      var $63=HEAP32[(($p55)>>2)];
      var $64=$63;
      $vertex=$64;
      var $65=HEAP32[(($vertex_points)>>2)];
      var $call56=_qh_setsize($65);
      $vertex_n=$call56;
      label = 32; break;
    case 32: 
      var $66=$vertex_i;
      var $67=$vertex_n;
      var $cmp=(($66)|0) < (($67)|0);
      if ($cmp) { label = 33; break; } else { label = 57; break; }
    case 33: 
      var $68=$vertex;
      var $tobool59=(($68)|0)!=0;
      if ($tobool59) { label = 34; break; } else { label = 48; break; }
    case 34: 
      var $69=$vertex;
      var $neighbors=(($69+12)|0);
      var $70=HEAP32[(($neighbors)>>2)];
      var $call61=_qh_setsize($70);
      $numneighbors=$call61;
      var $71=$fp_addr;
      var $72=$numneighbors;
      _qh_fprintf($71, 9249, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$72,tempInt));
      var $73=HEAP32[((((5247508)|0))>>2)];
      var $cmp62=(($73)|0)==3;
      if ($cmp62) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $74=$vertex;
      _qh_order_vertexneighbors($74);
      label = 39; break;
    case 36: 
      var $75=HEAP32[((((5247508)|0))>>2)];
      var $cmp64=(($75)|0) >= 4;
      if ($cmp64) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $76=$vertex;
      var $neighbors66=(($76+12)|0);
      var $77=HEAP32[(($neighbors66)>>2)];
      var $e67=(($77+4)|0);
      var $arrayidx68=(($e67)|0);
      var $p69=$arrayidx68;
      var $78=$p69;
      var $79=$78;
      var $80=$numneighbors;
      _qsort($79, $80, 4, 14);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      $neighbor=0;
      var $81=$vertex;
      var $neighbors72=(($81+12)|0);
      var $82=HEAP32[(($neighbors72)>>2)];
      var $tobool73=(($82)|0)!=0;
      if ($tobool73) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $83=$vertex;
      var $neighbors75=(($83+12)|0);
      var $84=HEAP32[(($neighbors75)>>2)];
      var $e76=(($84+4)|0);
      var $arrayidx77=(($e76)|0);
      var $p78=$arrayidx77;
      var $85=$p78;
      $neighborp=$85;
      label = 41; break;
    case 41: 
      var $86=$neighborp;
      var $incdec_ptr80=(($86+4)|0);
      $neighborp=$incdec_ptr80;
      var $87=HEAP32[(($86)>>2)];
      $neighbor=$87;
      var $tobool81=(($87)|0)!=0;
      if ($tobool81) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $88=$fp_addr;
      var $89=$neighbor;
      var $visitid=(($89+68)|0);
      var $90=HEAP32[(($visitid)>>2)];
      var $tobool83=(($90)|0)!=0;
      if ($tobool83) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $91=$neighbor;
      var $visitid84=(($91+68)|0);
      var $92=HEAP32[(($visitid84)>>2)];
      var $sub=((($92)-(1))|0);
      var $cond = $sub;label = 45; break;
    case 44: 
      var $93=$neighbor;
      var $id=(($93+72)|0);
      var $94=HEAP32[(($id)>>2)];
      var $sub85=(((-$94))|0);
      var $cond = $sub85;label = 45; break;
    case 45: 
      var $cond;
      _qh_fprintf($88, 9250, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      label = 41; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $95=$fp_addr;
      _qh_fprintf($95, 9251, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 55; break;
    case 48: 
      var $96=$vertex_i;
      var $97=HEAP32[(($coplanar_points)>>2)];
      var $e89=(($97+4)|0);
      var $arrayidx90=(($e89+($96<<2))|0);
      var $p91=$arrayidx90;
      var $98=HEAP32[(($p91)>>2)];
      var $99=$98;
      $facet=$99;
      var $tobool92=(($99)|0)!=0;
      if ($tobool92) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $100=$fp_addr;
      var $101=$facet;
      var $visitid94=(($101+68)|0);
      var $102=HEAP32[(($visitid94)>>2)];
      var $tobool95=(($102)|0)!=0;
      if ($tobool95) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $103=$facet;
      var $visitid97=(($103+68)|0);
      var $104=HEAP32[(($visitid97)>>2)];
      var $sub98=((($104)-(1))|0);
      var $cond103 = $sub98;label = 52; break;
    case 51: 
      var $105=$facet;
      var $id100=(($105+72)|0);
      var $106=HEAP32[(($id100)>>2)];
      var $sub101=(((-$106))|0);
      var $cond103 = $sub101;label = 52; break;
    case 52: 
      var $cond103;
      _qh_fprintf($100, 9252, ((5288400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond103,tempInt));
      label = 54; break;
    case 53: 
      var $107=$fp_addr;
      _qh_fprintf($107, 9253, ((5288268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $108=$vertex_i;
      var $inc=((($108)+(1))|0);
      $vertex_i=$inc;
      var $109=HEAP32[(($vertex_points)>>2)];
      var $e108=(($109+4)|0);
      var $arrayidx109=(($e108+($inc<<2))|0);
      var $p110=$arrayidx109;
      var $110=HEAP32[(($p110)>>2)];
      var $111=$110;
      $vertex=$111;
      label = 32; break;
    case 57: 
      label = 58; break;
    case 58: 
      _qh_settempfree($coplanar_points);
      _qh_settempfree($vertex_points);
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvneighbors["X"]=1;

function _qh_printvoronoi($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $k;
      var $numcenters=__stackBase__;
      var $numvertices;
      var $numneighbors;
      var $numinf;
      var $vid;
      var $vertex_i;
      var $vertex_n;
      var $facet;
      var $facetp;
      var $neighbor;
      var $neighborp;
      var $vertices=(__stackBase__)+(4);
      var $vertex;
      var $isLower=(__stackBase__)+(8);
      var $numfacets;
      $fp_addr=$fp;
      $format_addr=$format;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $numvertices=0;
      $vid=1;
      var $0=HEAP32[((((5248996)|0))>>2)];
      $numfacets=$0;
      var $1=$facetlist_addr;
      var $2=$facets_addr;
      var $3=$printall_addr;
      var $call=_qh_markvoronoi($1, $2, $3, $isLower, $numcenters);
      HEAP32[(($vertices)>>2)]=$call;
      $vertex=0;
      var $4=HEAP32[(($vertices)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 23; break; }
    case 3: 
      $vertex_i=0;
      var $5=HEAP32[(($vertices)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      $vertex=$7;
      var $8=HEAP32[(($vertices)>>2)];
      var $call1=_qh_setsize($8);
      $vertex_n=$call1;
      label = 4; break;
    case 4: 
      var $9=$vertex_i;
      var $10=$vertex_n;
      var $cmp=(($9)|0) < (($10)|0);
      if ($cmp) { label = 5; break; } else { label = 22; break; }
    case 5: 
      var $11=$vertex;
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $12=$numvertices;
      var $inc=((($12)+(1))|0);
      $numvertices=$inc;
      $numinf=0;
      $numneighbors=0;
      $neighbor=0;
      var $13=$vertex;
      var $neighbors=(($13+12)|0);
      var $14=HEAP32[(($neighbors)>>2)];
      var $tobool4=(($14)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $15=$vertex;
      var $neighbors6=(($15+12)|0);
      var $16=HEAP32[(($neighbors6)>>2)];
      var $e7=(($16+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $17=$p9;
      $neighborp=$17;
      label = 8; break;
    case 8: 
      var $18=$neighborp;
      var $incdec_ptr=(($18+4)|0);
      $neighborp=$incdec_ptr;
      var $19=HEAP32[(($18)>>2)];
      $neighbor=$19;
      var $tobool11=(($19)|0)!=0;
      if ($tobool11) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $20=$neighbor;
      var $visitid=(($20+68)|0);
      var $21=HEAP32[(($visitid)>>2)];
      var $cmp13=(($21)|0)==0;
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $numinf=1;
      label = 14; break;
    case 11: 
      var $22=$neighbor;
      var $visitid15=(($22+68)|0);
      var $23=HEAP32[(($visitid15)>>2)];
      var $24=$numfacets;
      var $cmp16=(($23)>>>0) < (($24)>>>0);
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $25=$numneighbors;
      var $inc18=((($25)+(1))|0);
      $numneighbors=$inc18;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $26=$numinf;
      var $tobool21=(($26)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $27=$numneighbors;
      var $tobool22=(($27)|0)!=0;
      if ($tobool22) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $28=$vertex_i;
      var $29=HEAP32[(($vertices)>>2)];
      var $e24=(($29+4)|0);
      var $arrayidx25=(($e24+($28<<2))|0);
      var $p26=$arrayidx25;
      HEAP32[(($p26)>>2)]=0;
      var $30=$numvertices;
      var $dec=((($30)-(1))|0);
      $numvertices=$dec;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $31=$vertex_i;
      var $inc29=((($31)+(1))|0);
      $vertex_i=$inc29;
      var $32=HEAP32[(($vertices)>>2)];
      var $e30=(($32+4)|0);
      var $arrayidx31=(($e30+($inc29<<2))|0);
      var $p32=$arrayidx31;
      var $33=HEAP32[(($p32)>>2)];
      var $34=$33;
      $vertex=$34;
      label = 4; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $35=$format_addr;
      var $cmp35=(($35)|0)==7;
      if ($cmp35) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $36=$fp_addr;
      var $37=HEAP32[(($numcenters)>>2)];
      var $38=$numvertices;
      _qh_fprintf($36, 9254, ((5288200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
      label = 26; break;
    case 25: 
      var $39=$fp_addr;
      var $40=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($40)-(1))|0);
      var $41=HEAP32[(($numcenters)>>2)];
      var $42=HEAP32[(($vertices)>>2)];
      var $call38=_qh_setsize($42);
      _qh_fprintf($39, 9255, ((5288068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub,HEAP32[(((tempInt)+(4))>>2)]=$41,HEAP32[(((tempInt)+(8))>>2)]=$call38,tempInt));
      label = 26; break;
    case 26: 
      var $43=$format_addr;
      var $cmp40=(($43)|0)==7;
      if ($cmp40) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $44=HEAP32[((((5247508)|0))>>2)];
      var $sub42=((($44)-(1))|0);
      $k=$sub42;
      label = 28; break;
    case 28: 
      var $45=$k;
      var $dec44=((($45)-(1))|0);
      $k=$dec44;
      var $tobool45=(($45)|0)!=0;
      if ($tobool45) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $46=$fp_addr;
      _qh_fprintf($46, 9256, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 28; break;
    case 30: 
      var $47=$fp_addr;
      _qh_fprintf($47, 9257, ((5287924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 35; break;
    case 31: 
      var $48=HEAP32[((((5247508)|0))>>2)];
      var $sub49=((($48)-(1))|0);
      $k=$sub49;
      label = 32; break;
    case 32: 
      var $49=$k;
      var $dec51=((($49)-(1))|0);
      $k=$dec51;
      var $tobool52=(($49)|0)!=0;
      if ($tobool52) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $50=$fp_addr;
      _qh_fprintf($50, 9258, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=-10.101,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 32; break;
    case 34: 
      var $51=$fp_addr;
      _qh_fprintf($51, 9259, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 35; break;
    case 35: 
      var $52=$facetlist_addr;
      var $tobool56=(($52)|0)!=0;
      if ($tobool56) { label = 36; break; } else { label = 48; break; }
    case 36: 
      var $53=$facetlist_addr;
      $facet=$53;
      label = 37; break;
    case 37: 
      var $54=$facet;
      var $tobool59=(($54)|0)!=0;
      if ($tobool59) { label = 38; break; } else { var $57 = 0;label = 39; break; }
    case 38: 
      var $55=$facet;
      var $next=(($55+44)|0);
      var $56=HEAP32[(($next)>>2)];
      var $tobool60=(($56)|0)!=0;
      var $57 = $tobool60;label = 39; break;
    case 39: 
      var $57;
      if ($57) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $58=$facet;
      var $visitid62=(($58+68)|0);
      var $59=HEAP32[(($visitid62)>>2)];
      var $tobool63=(($59)|0)!=0;
      if ($tobool63) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $60=$facet;
      var $visitid65=(($60+68)|0);
      var $61=HEAP32[(($visitid65)>>2)];
      var $62=$numfacets;
      var $cmp66=(($61)>>>0) < (($62)>>>0);
      if ($cmp66) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $63=$format_addr;
      var $cmp68=(($63)|0)==7;
      if ($cmp68) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $64=$fp_addr;
      var $65=$vid;
      var $inc70=((($65)+(1))|0);
      $vid=$inc70;
      var $66=$facet;
      var $id=(($66+72)|0);
      var $67=HEAP32[(($id)>>2)];
      _qh_fprintf($64, 9260, ((5287688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$65,HEAP32[(((tempInt)+(4))>>2)]=$67,tempInt));
      label = 44; break;
    case 44: 
      var $68=$fp_addr;
      var $69=$format_addr;
      var $70=$facet;
      _qh_printcenter($68, $69, 0, $70);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $71=$facet;
      var $next74=(($71+44)|0);
      var $72=HEAP32[(($next74)>>2)];
      $facet=$72;
      label = 37; break;
    case 47: 
      label = 48; break;
    case 48: 
      $facet=0;
      var $73=$facets_addr;
      var $tobool77=(($73)|0)!=0;
      if ($tobool77) { label = 49; break; } else { label = 58; break; }
    case 49: 
      var $74=$facets_addr;
      var $e79=(($74+4)|0);
      var $arrayidx80=(($e79)|0);
      var $p81=$arrayidx80;
      var $75=$p81;
      $facetp=$75;
      label = 50; break;
    case 50: 
      var $76=$facetp;
      var $incdec_ptr83=(($76+4)|0);
      $facetp=$incdec_ptr83;
      var $77=HEAP32[(($76)>>2)];
      $facet=$77;
      var $tobool84=(($77)|0)!=0;
      if ($tobool84) { label = 51; break; } else { label = 57; break; }
    case 51: 
      var $78=$facet;
      var $visitid86=(($78+68)|0);
      var $79=HEAP32[(($visitid86)>>2)];
      var $tobool87=(($79)|0)!=0;
      if ($tobool87) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $80=$facet;
      var $visitid89=(($80+68)|0);
      var $81=HEAP32[(($visitid89)>>2)];
      var $82=$numfacets;
      var $cmp90=(($81)>>>0) < (($82)>>>0);
      if ($cmp90) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $83=$format_addr;
      var $cmp92=(($83)|0)==7;
      if ($cmp92) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $84=$fp_addr;
      var $85=$vid;
      var $inc94=((($85)+(1))|0);
      $vid=$inc94;
      var $86=$facet;
      var $id95=(($86+72)|0);
      var $87=HEAP32[(($id95)>>2)];
      _qh_fprintf($84, 9261, ((5287688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$85,HEAP32[(((tempInt)+(4))>>2)]=$87,tempInt));
      label = 55; break;
    case 55: 
      var $88=$fp_addr;
      var $89=$format_addr;
      var $90=$facet;
      _qh_printcenter($88, $89, 0, $90);
      label = 56; break;
    case 56: 
      label = 50; break;
    case 57: 
      label = 58; break;
    case 58: 
      $vertex=0;
      var $91=HEAP32[(($vertices)>>2)];
      var $tobool100=(($91)|0)!=0;
      if ($tobool100) { label = 59; break; } else { label = 111; break; }
    case 59: 
      $vertex_i=0;
      var $92=HEAP32[(($vertices)>>2)];
      var $e102=(($92+4)|0);
      var $arrayidx103=(($e102)|0);
      var $p104=$arrayidx103;
      var $93=HEAP32[(($p104)>>2)];
      var $94=$93;
      $vertex=$94;
      var $95=HEAP32[(($vertices)>>2)];
      var $call105=_qh_setsize($95);
      $vertex_n=$call105;
      label = 60; break;
    case 60: 
      var $96=$vertex_i;
      var $97=$vertex_n;
      var $cmp107=(($96)|0) < (($97)|0);
      if ($cmp107) { label = 61; break; } else { label = 110; break; }
    case 61: 
      $numneighbors=0;
      $numinf=0;
      var $98=$vertex;
      var $tobool109=(($98)|0)!=0;
      if ($tobool109) { label = 62; break; } else { label = 78; break; }
    case 62: 
      var $99=HEAP32[((((5247508)|0))>>2)];
      var $cmp111=(($99)|0)==3;
      if ($cmp111) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $100=$vertex;
      _qh_order_vertexneighbors($100);
      label = 67; break;
    case 64: 
      var $101=HEAP32[((((5247508)|0))>>2)];
      var $cmp114=(($101)|0) >= 4;
      if ($cmp114) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $102=$vertex;
      var $neighbors116=(($102+12)|0);
      var $103=HEAP32[(($neighbors116)>>2)];
      var $e117=(($103+4)|0);
      var $arrayidx118=(($e117)|0);
      var $p119=$arrayidx118;
      var $104=$p119;
      var $105=$104;
      var $106=$vertex;
      var $neighbors120=(($106+12)|0);
      var $107=HEAP32[(($neighbors120)>>2)];
      var $call121=_qh_setsize($107);
      _qsort($105, $call121, 4, 14);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      $neighbor=0;
      var $108=$vertex;
      var $neighbors124=(($108+12)|0);
      var $109=HEAP32[(($neighbors124)>>2)];
      var $tobool125=(($109)|0)!=0;
      if ($tobool125) { label = 68; break; } else { label = 77; break; }
    case 68: 
      var $110=$vertex;
      var $neighbors127=(($110+12)|0);
      var $111=HEAP32[(($neighbors127)>>2)];
      var $e128=(($111+4)|0);
      var $arrayidx129=(($e128)|0);
      var $p130=$arrayidx129;
      var $112=$p130;
      $neighborp=$112;
      label = 69; break;
    case 69: 
      var $113=$neighborp;
      var $incdec_ptr132=(($113+4)|0);
      $neighborp=$incdec_ptr132;
      var $114=HEAP32[(($113)>>2)];
      $neighbor=$114;
      var $tobool133=(($114)|0)!=0;
      if ($tobool133) { label = 70; break; } else { label = 76; break; }
    case 70: 
      var $115=$neighbor;
      var $visitid135=(($115+68)|0);
      var $116=HEAP32[(($visitid135)>>2)];
      var $cmp136=(($116)|0)==0;
      if ($cmp136) { label = 71; break; } else { label = 72; break; }
    case 71: 
      $numinf=1;
      label = 75; break;
    case 72: 
      var $117=$neighbor;
      var $visitid139=(($117+68)|0);
      var $118=HEAP32[(($visitid139)>>2)];
      var $119=$numfacets;
      var $cmp140=(($118)>>>0) < (($119)>>>0);
      if ($cmp140) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $120=$numneighbors;
      var $inc142=((($120)+(1))|0);
      $numneighbors=$inc142;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 69; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $121=$format_addr;
      var $cmp148=(($121)|0)==7;
      if ($cmp148) { label = 79; break; } else { label = 91; break; }
    case 79: 
      var $122=$vertex;
      var $tobool150=(($122)|0)!=0;
      if ($tobool150) { label = 80; break; } else { label = 89; break; }
    case 80: 
      var $123=$fp_addr;
      var $124=$numneighbors;
      _qh_fprintf($123, 9262, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$124,tempInt));
      $neighbor=0;
      var $125=$vertex;
      var $neighbors152=(($125+12)|0);
      var $126=HEAP32[(($neighbors152)>>2)];
      var $tobool153=(($126)|0)!=0;
      if ($tobool153) { label = 81; break; } else { label = 88; break; }
    case 81: 
      var $127=$vertex;
      var $neighbors155=(($127+12)|0);
      var $128=HEAP32[(($neighbors155)>>2)];
      var $e156=(($128+4)|0);
      var $arrayidx157=(($e156)|0);
      var $p158=$arrayidx157;
      var $129=$p158;
      $neighborp=$129;
      label = 82; break;
    case 82: 
      var $130=$neighborp;
      var $incdec_ptr160=(($130+4)|0);
      $neighborp=$incdec_ptr160;
      var $131=HEAP32[(($130)>>2)];
      $neighbor=$131;
      var $tobool161=(($131)|0)!=0;
      if ($tobool161) { label = 83; break; } else { label = 87; break; }
    case 83: 
      var $132=$neighbor;
      var $visitid163=(($132+68)|0);
      var $133=HEAP32[(($visitid163)>>2)];
      var $tobool164=(($133)|0)!=0;
      if ($tobool164) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $134=$neighbor;
      var $visitid166=(($134+68)|0);
      var $135=HEAP32[(($visitid166)>>2)];
      var $136=$numfacets;
      var $cmp167=(($135)>>>0) < (($136)>>>0);
      if ($cmp167) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $137=$fp_addr;
      var $138=$neighbor;
      var $visitid169=(($138+68)|0);
      var $139=HEAP32[(($visitid169)>>2)];
      _qh_fprintf($137, 9263, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$139,tempInt));
      label = 86; break;
    case 86: 
      label = 82; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $140=$fp_addr;
      var $141=$vertex_i;
      var $142=$vertex;
      var $143=$142;
      var $bf_field_offs=(($143+20)|0);
      var $144=$bf_field_offs;
      var $145=HEAP32[(($144)>>2)];
      var $bf_clear=$145 & 16777215;
      _qh_fprintf($140, 9264, ((5286936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$141,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,tempInt));
      label = 90; break;
    case 89: 
      var $146=$fp_addr;
      var $147=$vertex_i;
      _qh_fprintf($146, 9265, ((5286856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$147,tempInt));
      label = 90; break;
    case 90: 
      label = 108; break;
    case 91: 
      var $148=$numinf;
      var $tobool176=(($148)|0)!=0;
      if ($tobool176) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $149=$numneighbors;
      var $inc178=((($149)+(1))|0);
      $numneighbors=$inc178;
      label = 93; break;
    case 93: 
      var $150=$fp_addr;
      var $151=$numneighbors;
      _qh_fprintf($150, 9266, ((5286040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$151,tempInt));
      var $152=$vertex;
      var $tobool180=(($152)|0)!=0;
      if ($tobool180) { label = 94; break; } else { label = 107; break; }
    case 94: 
      $neighbor=0;
      var $153=$vertex;
      var $neighbors182=(($153+12)|0);
      var $154=HEAP32[(($neighbors182)>>2)];
      var $tobool183=(($154)|0)!=0;
      if ($tobool183) { label = 95; break; } else { label = 106; break; }
    case 95: 
      var $155=$vertex;
      var $neighbors185=(($155+12)|0);
      var $156=HEAP32[(($neighbors185)>>2)];
      var $e186=(($156+4)|0);
      var $arrayidx187=(($e186)|0);
      var $p188=$arrayidx187;
      var $157=$p188;
      $neighborp=$157;
      label = 96; break;
    case 96: 
      var $158=$neighborp;
      var $incdec_ptr190=(($158+4)|0);
      $neighborp=$incdec_ptr190;
      var $159=HEAP32[(($158)>>2)];
      $neighbor=$159;
      var $tobool191=(($159)|0)!=0;
      if ($tobool191) { label = 97; break; } else { label = 105; break; }
    case 97: 
      var $160=$neighbor;
      var $visitid193=(($160+68)|0);
      var $161=HEAP32[(($visitid193)>>2)];
      var $cmp194=(($161)|0)==0;
      if ($cmp194) { label = 98; break; } else { label = 101; break; }
    case 98: 
      var $162=$numinf;
      var $tobool196=(($162)|0)!=0;
      if ($tobool196) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $numinf=0;
      var $163=$fp_addr;
      var $164=$neighbor;
      var $visitid198=(($164+68)|0);
      var $165=HEAP32[(($visitid198)>>2)];
      _qh_fprintf($163, 9267, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$165,tempInt));
      label = 100; break;
    case 100: 
      label = 104; break;
    case 101: 
      var $166=$neighbor;
      var $visitid201=(($166+68)|0);
      var $167=HEAP32[(($visitid201)>>2)];
      var $168=$numfacets;
      var $cmp202=(($167)>>>0) < (($168)>>>0);
      if ($cmp202) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $169=$fp_addr;
      var $170=$neighbor;
      var $visitid204=(($170+68)|0);
      var $171=HEAP32[(($visitid204)>>2)];
      _qh_fprintf($169, 9268, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$171,tempInt));
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 96; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $172=$fp_addr;
      _qh_fprintf($172, 9269, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $173=$vertex_i;
      var $inc212=((($173)+(1))|0);
      $vertex_i=$inc212;
      var $174=HEAP32[(($vertices)>>2)];
      var $e213=(($174+4)|0);
      var $arrayidx214=(($e213+($inc212<<2))|0);
      var $p215=$arrayidx214;
      var $175=HEAP32[(($p215)>>2)];
      var $176=$175;
      $vertex=$176;
      label = 60; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $177=$format_addr;
      var $cmp218=(($177)|0)==7;
      if ($cmp218) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $178=$fp_addr;
      _qh_fprintf($178, 9270, ((5261268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 113; break;
    case 113: 
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvoronoi["X"]=1;

function _qh_printvdiagram($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $vertices=__stackBase__;
      var $totcount;
      var $numcenters=(__stackBase__)+(4);
      var $isLower=(__stackBase__)+(8);
      var $innerouter;
      var $printvridge;
      $fp_addr=$fp;
      $format_addr=$format;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      $innerouter=0;
      $printvridge=0;
      var $0=$format_addr;
      var $cmp=(($0)|0)==26;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $innerouter=0;
      $printvridge=2;
      label = 11; break;
    case 4: 
      var $1=$format_addr;
      var $cmp1=(($1)|0)==9;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $innerouter=1;
      $printvridge=12;
      label = 10; break;
    case 6: 
      var $2=$format_addr;
      var $cmp4=(($2)|0)==12;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $innerouter=2;
      $printvridge=12;
      label = 9; break;
    case 8: 
      var $3=HEAP32[((((5248924)|0))>>2)];
      var $4=$format_addr;
      _qh_fprintf($3, 6219, ((5289880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      _qh_errexit(1, 0, 0);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $5=$facetlist_addr;
      var $6=$facets_addr;
      var $7=$printall_addr;
      var $call=_qh_markvoronoi($5, $6, $7, $isLower, $numcenters);
      HEAP32[(($vertices)>>2)]=$call;
      var $8=HEAP32[(($vertices)>>2)];
      var $9=$innerouter;
      var $call9=_qh_printvdiagram2(0, 0, $8, $9, 0);
      $totcount=$call9;
      var $10=$fp_addr;
      var $11=$totcount;
      _qh_fprintf($10, 9231, ((5281344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $12=$fp_addr;
      var $13=$printvridge;
      var $14=HEAP32[(($vertices)>>2)];
      var $15=$innerouter;
      var $call10=_qh_printvdiagram2($12, $13, $14, $15, 1);
      $totcount=$call10;
      _qh_settempfree($vertices);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvdiagram["X"]=1;

function _qh_printneighborhood($fp, $format, $facetA, $facetB, $printall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $format_addr;
      var $facetA_addr;
      var $facetB_addr;
      var $printall_addr;
      var $neighbor;
      var $neighborp;
      var $facet;
      var $facets=__stackBase__;
      $fp_addr=$fp;
      $format_addr=$format;
      $facetA_addr=$facetA;
      $facetB_addr=$facetB;
      $printall_addr=$printall;
      var $0=$format_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 26; break;
    case 4: 
      var $1=HEAP32[((((5248944)|0))>>2)];
      _qh_findgood_all($1);
      var $2=$facetA_addr;
      var $3=$facetB_addr;
      var $cmp1=(($2)|0)==(($3)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $facetB_addr=0;
      label = 6; break;
    case 6: 
      var $4=$facetA_addr;
      var $neighbors=(($4+56)|0);
      var $5=HEAP32[(($neighbors)>>2)];
      var $call=_qh_setsize($5);
      var $add=((($call)+(1))|0);
      var $mul=((($add<<1))&-1);
      var $call4=_qh_settemp($mul);
      HEAP32[(($facets)>>2)]=$call4;
      var $6=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $7=$facetA_addr;
      $facet=$7;
      label = 7; break;
    case 7: 
      var $8=$facet;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 25; break; }
    case 8: 
      var $9=$facet;
      var $visitid=(($9+68)|0);
      var $10=HEAP32[(($visitid)>>2)];
      var $11=HEAP32[((((5249156)|0))>>2)];
      var $cmp5=(($10)|0)!=(($11)|0);
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=HEAP32[((((5249156)|0))>>2)];
      var $13=$facet;
      var $visitid7=(($13+68)|0);
      HEAP32[(($visitid7)>>2)]=$12;
      var $14=$facet;
      var $15=$14;
      _qh_setappend($facets, $15);
      label = 10; break;
    case 10: 
      $neighbor=0;
      var $16=$facet;
      var $neighbors9=(($16+56)|0);
      var $17=HEAP32[(($neighbors9)>>2)];
      var $tobool10=(($17)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $18=$facet;
      var $neighbors12=(($18+56)|0);
      var $19=HEAP32[(($neighbors12)>>2)];
      var $e=(($19+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $20=$p;
      $neighborp=$20;
      label = 12; break;
    case 12: 
      var $21=$neighborp;
      var $incdec_ptr=(($21+4)|0);
      $neighborp=$incdec_ptr;
      var $22=HEAP32[(($21)>>2)];
      $neighbor=$22;
      var $tobool14=(($22)|0)!=0;
      if ($tobool14) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $23=$neighbor;
      var $visitid16=(($23+68)|0);
      var $24=HEAP32[(($visitid16)>>2)];
      var $25=HEAP32[((((5249156)|0))>>2)];
      var $cmp17=(($24)|0)==(($25)|0);
      if ($cmp17) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 12; break;
    case 15: 
      var $26=HEAP32[((((5249156)|0))>>2)];
      var $27=$neighbor;
      var $visitid20=(($27+68)|0);
      HEAP32[(($visitid20)>>2)]=$26;
      var $28=$printall_addr;
      var $tobool21=(($28)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $29=$neighbor;
      var $call22=_qh_skipfacet($29);
      var $tobool23=(($call22)|0)!=0;
      if ($tobool23) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $30=$neighbor;
      var $31=$30;
      _qh_setappend($facets, $31);
      label = 18; break;
    case 18: 
      label = 12; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $32=$facet;
      var $33=$facetA_addr;
      var $cmp27=(($32)|0)==(($33)|0);
      if ($cmp27) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $34=$facetB_addr;
      var $cond = $34;label = 24; break;
    case 23: 
      var $cond = 0;label = 24; break;
    case 24: 
      var $cond;
      $facet=$cond;
      label = 7; break;
    case 25: 
      var $35=$fp_addr;
      var $36=$format_addr;
      var $37=HEAP32[(($facets)>>2)];
      var $38=$printall_addr;
      _qh_printfacets($35, $36, 0, $37, $38);
      _qh_settempfree($facets);
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printneighborhood["X"]=1;

function _qh_printvridge($fp, $vertex, $vertexA, $centers, $unbounded) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $vertex_addr;
      var $vertexA_addr;
      var $centers_addr;
      var $unbounded_addr;
      var $facet;
      var $facetp;
      $fp_addr=$fp;
      $vertex_addr=$vertex;
      $vertexA_addr=$vertexA;
      $centers_addr=$centers;
      $unbounded_addr=$unbounded;
      var $0=$unbounded_addr;
      var $1=$fp_addr;
      var $2=$centers_addr;
      var $call=_qh_setsize($2);
      var $add=((($call)+(2))|0);
      var $3=$vertex_addr;
      var $point=(($3+8)|0);
      var $4=HEAP32[(($point)>>2)];
      var $call1=_qh_pointid($4);
      var $5=$vertexA_addr;
      var $point2=(($5+8)|0);
      var $6=HEAP32[(($point2)>>2)];
      var $call3=_qh_pointid($6);
      _qh_fprintf($1, 9275, ((5286548)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add,HEAP32[(((tempInt)+(4))>>2)]=$call1,HEAP32[(((tempInt)+(8))>>2)]=$call3,tempInt));
      $facet=0;
      var $7=$centers_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $8=$centers_addr;
      var $e=(($8+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $9=$p;
      $facetp=$9;
      label = 4; break;
    case 4: 
      var $10=$facetp;
      var $incdec_ptr=(($10+4)|0);
      $facetp=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $facet=$11;
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$fp_addr;
      var $13=$facet;
      var $visitid=(($13+68)|0);
      var $14=HEAP32[(($visitid)>>2)];
      _qh_fprintf($12, 9276, ((5284104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $15=$fp_addr;
      _qh_fprintf($15, 9277, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvridge["X"]=1;

function _qh_printvnorm($fp, $vertex, $vertexA, $centers, $unbounded) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $vertex_addr;
      var $vertexA_addr;
      var $centers_addr;
      var $unbounded_addr;
      var $normal;
      var $offset=__stackBase__;
      var $k;
      $fp_addr=$fp;
      $vertex_addr=$vertex;
      $vertexA_addr=$vertexA;
      $centers_addr=$centers;
      $unbounded_addr=$unbounded;
      var $0=$unbounded_addr;
      var $1=$vertex_addr;
      var $2=$vertexA_addr;
      var $3=$centers_addr;
      var $call=_qh_detvnorm($1, $2, $3, $offset);
      $normal=$call;
      var $4=$fp_addr;
      var $5=HEAP32[((((5247508)|0))>>2)];
      var $add=((($5)+(2))|0);
      var $6=$vertex_addr;
      var $point=(($6+8)|0);
      var $7=HEAP32[(($point)>>2)];
      var $call1=_qh_pointid($7);
      var $8=$vertexA_addr;
      var $point2=(($8+8)|0);
      var $9=HEAP32[(($point2)>>2)];
      var $call3=_qh_pointid($9);
      _qh_fprintf($4, 9271, ((5286696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add,HEAP32[(((tempInt)+(4))>>2)]=$call1,HEAP32[(((tempInt)+(8))>>2)]=$call3,tempInt));
      $k=0;
      label = 3; break;
    case 3: 
      var $10=$k;
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($11)-(1))|0);
      var $cmp=(($10)|0) < (($sub)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $12=$fp_addr;
      var $13=$k;
      var $14=$normal;
      var $arrayidx=(($14+($13<<3))|0);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($12, 9272, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 5; break;
    case 5: 
      var $16=$k;
      var $inc=((($16)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 6: 
      var $17=$fp_addr;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($17, 9273, ((5291744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $19=$fp_addr;
      _qh_fprintf($19, 9274, ((5289948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvnorm["X"]=1;

function _qh_printvdiagram2($fp, $printvridge, $vertices, $innerouter, $inorder) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $printvridge_addr;
      var $vertices_addr;
      var $innerouter_addr;
      var $inorder_addr;
      var $totcount;
      var $vertex_i;
      var $vertex_n;
      var $vertex;
      $fp_addr=$fp;
      $printvridge_addr=$printvridge;
      $vertices_addr=$vertices;
      $innerouter_addr=$innerouter;
      $inorder_addr=$inorder;
      $totcount=0;
      var $0=HEAP32[((((5248984)|0))>>2)];
      $vertex=$0;
      label = 3; break;
    case 3: 
      var $1=$vertex;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $2=$vertex;
      var $next=(($2)|0);
      var $3=HEAP32[(($next)>>2)];
      var $tobool1=(($3)|0)!=0;
      var $4 = $tobool1;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$vertex;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & -268435457;
      HEAP32[(($7)>>2)]=$9;
      label = 7; break;
    case 7: 
      var $10=$vertex;
      var $next2=(($10)|0);
      var $11=HEAP32[(($next2)>>2)];
      $vertex=$11;
      label = 3; break;
    case 8: 
      $vertex=0;
      var $12=$vertices_addr;
      var $tobool3=(($12)|0)!=0;
      if ($tobool3) { label = 9; break; } else { label = 19; break; }
    case 9: 
      $vertex_i=0;
      var $13=$vertices_addr;
      var $e=(($13+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $14=HEAP32[(($p)>>2)];
      var $15=$14;
      $vertex=$15;
      var $16=$vertices_addr;
      var $call=_qh_setsize($16);
      $vertex_n=$call;
      label = 10; break;
    case 10: 
      var $17=$vertex_i;
      var $18=$vertex_n;
      var $cmp=(($17)|0) < (($18)|0);
      if ($cmp) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $19=$vertex;
      var $tobool6=(($19)|0)!=0;
      if ($tobool6) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $20=HEAP32[((((5247028)|0))>>2)];
      var $cmp8=(($20)|0) > 0;
      if ($cmp8) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $21=$vertex;
      var $point=(($21+8)|0);
      var $22=HEAP32[(($point)>>2)];
      var $call9=_qh_pointid($22);
      var $add=((($call9)+(1))|0);
      var $23=HEAP32[((((5247028)|0))>>2)];
      var $cmp10=(($add)|0)!=(($23)|0);
      if ($cmp10) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 17; break;
    case 15: 
      var $24=$fp_addr;
      var $25=$printvridge_addr;
      var $26=$vertex;
      var $27=$innerouter_addr;
      var $28=$inorder_addr;
      var $call12=_qh_eachvoronoi($24, $25, $26, 0, $27, $28);
      var $29=$totcount;
      var $add13=((($29)+($call12))|0);
      $totcount=$add13;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $30=$vertex_i;
      var $inc=((($30)+(1))|0);
      $vertex_i=$inc;
      var $31=$vertices_addr;
      var $e16=(($31+4)|0);
      var $arrayidx17=(($e16+($inc<<2))|0);
      var $p18=$arrayidx17;
      var $32=HEAP32[(($p18)>>2)];
      var $33=$32;
      $vertex=$33;
      label = 10; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $34=$totcount;

      return $34;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printvdiagram2["X"]=1;

function _qh_qhull() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $numoutside=__stackBase__;
      var $call=_clock();
      HEAP32[((((5249024)|0))>>2)]=$call;
      var $0=HEAP32[((((5247380)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$1 < 8.988465674311579e+307;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _qh_build_withrestart();
      label = 6; break;
    case 5: 
      _qh_initbuild();
      _qh_buildhull();
      label = 6; break;
    case 6: 
      var $2=HEAP32[((((5247416)|0))>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 42; break; } else { label = 7; break; }
    case 7: 
      var $3=HEAP32[((((5247412)|0))>>2)];
      var $tobool2=(($3)|0)!=0;
      if ($tobool2) { label = 42; break; } else { label = 8; break; }
    case 8: 
      var $4=HEAP32[((((5249164)|0))>>2)];
      var $tobool4=(($4)|0)!=0;
      if ($tobool4) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $5=HEAP32[((((5247424)|0))>>2)];
      var $tobool6=(($5)|0)!=0;
      if ($tobool6) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $6=HEAP32[((((5247076)|0))>>2)];
      var $tobool8=(($6)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $call10=_qh_checkzero(1);
      label = 12; break;
    case 12: 
      var $7=HEAP32[((((5249164)|0))>>2)];
      var $tobool12=(($7)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $8=HEAP32[((((5247424)|0))>>2)];
      var $tobool14=(($8)|0)!=0;
      if ($tobool14) { label = 18; break; } else { label = 14; break; }
    case 14: 
      var $9=HEAP32[((((5249168)|0))>>2)];
      var $tobool16=(($9)|0)!=0;
      if ($tobool16) { label = 18; break; } else { label = 15; break; }
    case 15: 
      var $10=HEAP32[((((5247040)|0))>>2)];
      var $cmp18=(($10)|0) >= 2;
      if ($cmp18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($11, 2055, ((5267344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 17; break;
    case 17: 
      HEAP32[((((5247488)|0))>>2)]=0;
      label = 34; break;
    case 18: 
      var $12=HEAP32[((((5247076)|0))>>2)];
      var $tobool22=(($12)|0)!=0;
      if ($tobool22) { label = 21; break; } else { label = 19; break; }
    case 19: 
      var $13=HEAP32[((((5247508)|0))>>2)];
      var $cmp24=(($13)|0) > 5;
      if ($cmp24) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $14=HEAP32[((((5247144)|0))>>2)];
      var $tobool26=(($14)|0)!=0;
      if ($tobool26) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=HEAP32[((((5247140)|0))>>2)];
      var $tobool28=(($17)|0)!=0;
      if ($tobool28) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $cond = 0;label = 24; break;
    case 23: 
      var $18=HEAP32[((((5247424)|0))>>2)];
      var $cond = $18;label = 24; break;
    case 24: 
      var $cond;
      _qh_postmerge(((5294436)|0), $15, $16, $cond);
      label = 29; break;
    case 25: 
      var $19=HEAP32[((((5247140)|0))>>2)];
      var $tobool30=(($19)|0)!=0;
      if ($tobool30) { label = 28; break; } else { label = 26; break; }
    case 26: 
      var $20=HEAP32[((((5247424)|0))>>2)];
      var $tobool32=(($20)|0)!=0;
      if ($tobool32) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_postmerge(((5278516)|0), $21, $22, 1);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $23=HEAP32[((((5247140)|0))>>2)];
      var $tobool36=(($23)|0)!=0;
      if ($tobool36) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $26=HEAP32[((((5247424)|0))>>2)];
      _qh_postmerge(((5272584)|0), $24, $25, $26);
      label = 31; break;
    case 31: 
      var $27=HEAP32[((((5248960)|0))>>2)];
      var $28=HEAP32[((((5248944)|0))>>2)];
      var $cmp39=(($27)|0)==(($28)|0);
      if ($cmp39) { label = 32; break; } else { label = 33; break; }
    case 32: 
      HEAP32[((((5249096)|0))>>2)]=1;
      _qh_partitionvisible(0, $numoutside);
      HEAP32[((((5249096)|0))>>2)]=0;
      _qh_deletevisible();
      _qh_resetlists(0, 1);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $29=HEAP32[((((5247488)|0))>>2)];
      var $tobool43=(($29)|0)!=0;
      if ($tobool43) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $30=HEAP32[((((5247372)|0))>>2)];
      var $tobool45=(($30)|0)!=0;
      if ($tobool45) { label = 36; break; } else { label = 37; break; }
    case 36: 
      _qh_buildtracing(0, 0);
      var $31=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($31, 8115, ((5267456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 37; break;
    case 37: 
      _qh_check_maxout();
      label = 38; break;
    case 38: 
      var $32=HEAP32[((((5247504)|0))>>2)];
      var $tobool49=(($32)|0)!=0;
      if ($tobool49) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $33=HEAP32[((((5249064)|0))>>2)];
      var $tobool51=(($33)|0)!=0;
      if ($tobool51) { label = 41; break; } else { label = 40; break; }
    case 40: 
      _qh_nearcoplanar();
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $34=HEAP32[((((5242928)|0))>>2)];
      var $call55=_qh_setsize($34);
      var $cmp56=(($call55)|0)!=0;
      if ($cmp56) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      var $36=HEAP32[((((5242928)|0))>>2)];
      var $call58=_qh_setsize($36);
      _qh_fprintf($35, 6164, ((5263540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call58,tempInt));
      _qh_errexit(5, 0, 0);
      label = 44; break;
    case 44: 
      var $call60=_clock();
      var $37=HEAP32[((((5249024)|0))>>2)];
      var $sub=((($call60)-($37))|0);
      HEAP32[((((5249024)|0))>>2)]=$sub;
      HEAP32[((((5249136)|0))>>2)]=1;
      var $38=HEAP32[((((5247040)|0))>>2)];
      var $cmp61=(($38)|0) >= 1;
      if ($cmp61) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $39=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($39, 1036, ((5259488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 46; break;
    case 46: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_qhull["X"]=1;

function _qh_build_withrestart() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"3": function(value) { label = 38; $call = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $restart;
      HEAP32[((((5249028)|0))>>2)]=1;
      label = 3; break;
    case 3: 
      var $call=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[((((5248834)|0))>>2)]=tempInt, 0);
      label = 38; break;
    case 38: 
      $restart=$call;
      var $0=$restart;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $1=HEAP32[(((((5244428)|0)))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[(((((5244428)|0)))>>2)]=$inc;
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244436)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244436)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$2 < $3;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[((((5244436)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244436)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 6; break;
    case 6: 
      HEAP32[((((5247412)|0))>>2)]=-1;
      label = 7; break;
    case 7: 
      var $5=HEAP32[((((5247380)|0))>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 15; break; } else { label = 8; break; }
    case 8: 
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp4=$6 < 8.988465674311579e+307;
      if ($cmp4) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $7=HEAP32[((((5249032)|0))>>2)];
      var $cmp6=(($7)|0) > 100;
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $8=HEAP32[((((5248924)|0))>>2)];
      var $9=HEAP32[((((5249032)|0))>>2)];
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($8, 6229, ((5250852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,(HEAPF64[(tempDoublePtr)>>3]=$10,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(5, 0, 0);
      label = 11; break;
    case 11: 
      var $11=HEAP32[((((5249032)|0))>>2)];
      var $tobool9=(($11)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $12=$restart;
      var $tobool11=(($12)|0)!=0;
      if ($tobool11) { label = 14; break; } else { label = 13; break; }
    case 13: 
      label = 37; break;
    case 14: 
      label = 19; break;
    case 15: 
      var $13=HEAP32[((((5249032)|0))>>2)];
      var $tobool14=(($13)|0)!=0;
      if ($tobool14) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $14=HEAP32[((((5249032)|0))>>2)];
      var $15=HEAP32[((((5247380)|0))>>2)];
      var $cmp16=(($14)|0) >= (($15)|0);
      if ($cmp16) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 37; break;
    case 18: 
      label = 19; break;
    case 19: 
      HEAP32[((((5247412)|0))>>2)]=0;
      _qh_freebuild(1);
      var $16=HEAP32[((((5249032)|0))>>2)];
      var $inc20=((($16)+(1))|0);
      HEAP32[((((5249032)|0))>>2)]=$inc20;
      var $17=HEAP32[((((5248568)|0))>>2)];
      var $tobool21=(($17)|0)!=0;
      if ($tobool21) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $call23=_strlen(((5248052)|0));
      HEAP32[((((5248568)|0))>>2)]=$call23;
      label = 22; break;
    case 21: 
      var $18=HEAP32[((((5248568)|0))>>2)];
      var $arrayidx=((((5248052)|0)+$18)|0);
      HEAP8[($arrayidx)]=0;
      HEAP32[((((5248564)|0))>>2)]=80;
      label = 22; break;
    case 22: 
      _qh_option(((5302980)|0), ((5249032)|0), 0);
      var $19=HEAP32[((((5249032)|0))>>2)];
      var $20=HEAP32[((((5247380)|0))>>2)];
      var $cmp26=(($19)|0)==(($20)|0);
      if ($cmp26) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $21=HEAP32[((((5247432)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$21;
      var $22=HEAP32[((((5247436)|0))>>2)];
      var $cmp28=(($22)|0)!=-1;
      if ($cmp28) { label = 26; break; } else { label = 24; break; }
    case 24: 
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp29=$23 < 8.988465674311579e+307;
      if ($cmp29) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $24=HEAP32[((((5247448)|0))>>2)];
      var $tobool31=(($24)|0)!=0;
      if ($tobool31) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $25=HEAP32[((((5247040)|0))>>2)];
      var $tobool33=(($25)|0)!=0;
      if ($tobool33) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $26=HEAP32[((((5247040)|0))>>2)];
      var $cond = $26;label = 29; break;
    case 28: 
      var $cond = 3;label = 29; break;
    case 29: 
      var $cond;
      HEAP32[((((5247428)|0))>>2)]=$cond;
      HEAP32[((((5247040)|0))>>2)]=0;
      label = 30; break;
    case 30: 
      var $27=HEAP32[((((5247040)|0))>>2)];
      HEAP32[((((5242936)|0))>>2)]=$27;
      label = 31; break;
    case 31: 
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp36=$28 < 8.988465674311579e+307;
      if ($cmp36) { label = 32; break; } else { label = 33; break; }
    case 32: 
      _qh_joggleinput();
      label = 33; break;
    case 33: 
      _qh_initbuild();
      _qh_buildhull();
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp39=$29 < 8.988465674311579e+307;
      if ($cmp39) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $30=HEAP32[((((5247084)|0))>>2)];
      var $tobool41=(($30)|0)!=0;
      if ($tobool41) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $31=HEAP32[((((5248944)|0))>>2)];
      _qh_checkconvex($31, 0);
      label = 36; break;
    case 36: 
      label = 3; break;
    case 37: 
      HEAP32[((((5249028)|0))>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
_qh_build_withrestart["X"]=1;

function _qh_buildhull() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet=__stackBase__;
      var $furthest;
      var $vertex;
      var $id;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1037, ((5300620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5248944)|0))>>2)];
      HEAP32[(($facet)>>2)]=$2;
      label = 5; break;
    case 5: 
      var $3=HEAP32[(($facet)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $6 = 0;label = 7; break; }
    case 6: 
      var $4=HEAP32[(($facet)>>2)];
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      var $tobool1=(($5)|0)!=0;
      var $6 = $tobool1;label = 7; break;
    case 7: 
      var $6;
      if ($6) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $7=HEAP32[(($facet)>>2)];
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $bf_clear=$11 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $12=HEAP32[(($facet)>>2)];
      var $13=$12;
      var $bf_field_offs3=(($13+76)|0);
      var $14=$bf_field_offs3;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 10;
      var $bf_clear4=$16 & 1;
      var $tobool5=(($bf_clear4)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $17=HEAP32[((((5248924)|0))>>2)];
      var $18=HEAP32[(($facet)>>2)];
      var $id7=(($18+72)|0);
      var $19=HEAP32[(($id7)>>2)];
      _qh_fprintf($17, 6165, ((5297880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      var $20=HEAP32[(($facet)>>2)];
      _qh_errexit(5, $20, 0);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $21=HEAP32[(($facet)>>2)];
      var $next9=(($21+44)|0);
      var $22=HEAP32[(($next9)>>2)];
      HEAP32[(($facet)>>2)]=$22;
      label = 5; break;
    case 13: 
      var $23=HEAP32[((((5248984)|0))>>2)];
      $vertex=$23;
      label = 14; break;
    case 14: 
      var $24=$vertex;
      var $tobool11=(($24)|0)!=0;
      if ($tobool11) { label = 15; break; } else { var $27 = 0;label = 16; break; }
    case 15: 
      var $25=$vertex;
      var $next13=(($25)|0);
      var $26=HEAP32[(($next13)>>2)];
      var $tobool14=(($26)|0)!=0;
      var $27 = $tobool14;label = 16; break;
    case 16: 
      var $27;
      if ($27) { label = 17; break; } else { label = 30; break; }
    case 17: 
      var $28=$vertex;
      var $29=$28;
      var $bf_field_offs17=(($29+20)|0);
      var $30=$bf_field_offs17;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 >>> 31;
      var $bf_clear18=$32 & 1;
      var $tobool19=(($bf_clear18)|0)!=0;
      if ($tobool19) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $33=HEAP32[((((5248924)|0))>>2)];
      var $34=$vertex;
      var $35=$34;
      var $bf_field_offs21=(($35+20)|0);
      var $36=$bf_field_offs21;
      var $37=HEAP32[(($36)>>2)];
      var $bf_clear22=$37 & 16777215;
      _qh_fprintf($33, 6166, ((5296292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear22,tempInt));
      var $38=$vertex;
      _qh_errprint(((5294456)|0), 0, 0, 0, $38);
      _qh_errexit(5, 0, 0);
      label = 19; break;
    case 19: 
      var $39=$vertex;
      var $point=(($39+8)|0);
      var $40=HEAP32[(($point)>>2)];
      var $call=_qh_pointid($40);
      $id=$call;
      var $41=HEAP32[((((5247416)|0))>>2)];
      var $cmp24=(($41)|0) > 0;
      if ($cmp24) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $42=$id;
      var $43=HEAP32[((((5247416)|0))>>2)];
      var $sub=((($43)-(1))|0);
      var $cmp25=(($42)|0)==(($sub)|0);
      if ($cmp25) { label = 25; break; } else { label = 21; break; }
    case 21: 
      var $44=HEAP32[((((5247416)|0))>>2)];
      var $cmp27=(($44)|0) < 0;
      if ($cmp27) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $45=$id;
      var $46=HEAP32[((((5247416)|0))>>2)];
      var $sub29=(((-$46))|0);
      var $sub30=((($sub29)-(1))|0);
      var $cmp31=(($45)|0)==(($sub30)|0);
      if ($cmp31) { label = 25; break; } else { label = 23; break; }
    case 23: 
      var $47=HEAP32[((((5247412)|0))>>2)];
      var $cmp33=(($47)|0) > 0;
      if ($cmp33) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $48=$id;
      var $49=HEAP32[((((5247412)|0))>>2)];
      var $sub35=((($49)-(1))|0);
      var $cmp36=(($48)|0)==(($sub35)|0);
      if ($cmp36) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $50=HEAP32[((((5247040)|0))>>2)];
      var $cmp38=(($50)|0) >= 1;
      if ($cmp38) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$id;
      _qh_fprintf($51, 1038, ((5292708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$52,tempInt));
      label = 27; break;
    case 27: 
      label = 42; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $53=$vertex;
      var $next43=(($53)|0);
      var $54=HEAP32[(($next43)>>2)];
      $vertex=$54;
      label = 14; break;
    case 30: 
      var $55=HEAP32[((((5248944)|0))>>2)];
      HEAP32[((((5248952)|0))>>2)]=$55;
      label = 31; break;
    case 31: 
      var $call45=_qh_nextfurthest($facet);
      $furthest=$call45;
      var $tobool46=(($call45)|0)!=0;
      if ($tobool46) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $56=HEAP32[((((5249004)|0))>>2)];
      var $dec=((($56)-(1))|0);
      HEAP32[((((5249004)|0))>>2)]=$dec;
      var $57=$furthest;
      var $58=HEAP32[(($facet)>>2)];
      var $59=HEAP32[((((5247132)|0))>>2)];
      var $call47=_qh_addpoint($57, $58, $59);
      var $tobool48=(($call47)|0)!=0;
      if ($tobool48) { label = 34; break; } else { label = 33; break; }
    case 33: 
      label = 35; break;
    case 34: 
      label = 31; break;
    case 35: 
      var $60=HEAP32[((((5248708)|0))>>2)];
      var $tobool51=(($60)|0)!=0;
      if ($tobool51) { label = 36; break; } else { label = 37; break; }
    case 36: 
      _qh_outcoplanar();
      label = 37; break;
    case 37: 
      var $61=HEAP32[((((5249004)|0))>>2)];
      var $tobool54=(($61)|0)!=0;
      if ($tobool54) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $62=$furthest;
      var $tobool56=(($62)|0)!=0;
      if ($tobool56) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $63=HEAP32[((((5248924)|0))>>2)];
      var $64=HEAP32[((((5249004)|0))>>2)];
      _qh_fprintf($63, 6167, ((5291564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,tempInt));
      _qh_errexit(5, 0, 0);
      label = 40; break;
    case 40: 
      var $65=HEAP32[((((5247040)|0))>>2)];
      var $cmp59=(($65)|0) >= 1;
      if ($cmp59) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $66=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($66, 1039, ((5289640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 42: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_buildhull["X"]=1;

function _qh_partitionvisible($allpoints, $numoutside) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $allpoints_addr;
      var $numoutside_addr;
      var $visible;
      var $newfacet;
      var $point;
      var $pointp;
      var $coplanar;
      var $size;
      var $count;
      var $vertex;
      var $vertexp;
      $allpoints_addr=$allpoints;
      $numoutside_addr=$numoutside;
      $coplanar=0;
      var $0=HEAP32[((((5247132)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249076)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249076)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$1 < $2;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249076)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249076)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$3,HEAP32[((((5246948)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246948)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $4=$numoutside_addr;
      HEAP32[(($4)>>2)]=0;
      var $5=HEAP32[((((5248960)|0))>>2)];
      $visible=$5;
      label = 7; break;
    case 7: 
      var $6=$visible;
      var $tobool3=(($6)|0)!=0;
      if ($tobool3) { label = 8; break; } else { var $12 = 0;label = 9; break; }
    case 8: 
      var $7=$visible;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $bf_clear=$11 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      var $12 = $tobool4;label = 9; break;
    case 9: 
      var $12;
      if ($12) { label = 10; break; } else { label = 44; break; }
    case 10: 
      var $13=$visible;
      var $outsideset=(($13+60)|0);
      var $14=HEAP32[(($outsideset)>>2)];
      var $tobool5=(($14)|0)!=0;
      if ($tobool5) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $15=$visible;
      var $coplanarset=(($15+64)|0);
      var $16=HEAP32[(($coplanarset)>>2)];
      var $tobool6=(($16)|0)!=0;
      if ($tobool6) { label = 13; break; } else { label = 12; break; }
    case 12: 
      label = 43; break;
    case 13: 
      var $17=$visible;
      var $f=(($17+28)|0);
      var $replace=$f;
      var $18=HEAP32[(($replace)>>2)];
      $newfacet=$18;
      $count=0;
      label = 14; break;
    case 14: 
      var $19=$newfacet;
      var $tobool9=(($19)|0)!=0;
      if ($tobool9) { label = 15; break; } else { var $25 = 0;label = 16; break; }
    case 15: 
      var $20=$newfacet;
      var $21=$20;
      var $bf_field_offs11=(($21+76)|0);
      var $22=$bf_field_offs11;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 11;
      var $bf_clear12=$24 & 1;
      var $tobool13=(($bf_clear12)|0)!=0;
      var $25 = $tobool13;label = 16; break;
    case 16: 
      var $25;
      if ($25) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $26=$newfacet;
      var $f15=(($26+28)|0);
      var $replace16=$f15;
      var $27=HEAP32[(($replace16)>>2)];
      $newfacet=$27;
      var $28=$count;
      var $inc=((($28)+(1))|0);
      $count=$inc;
      var $29=HEAP32[((((5249012)|0))>>2)];
      var $cmp17=(($28)>>>0) > (($29)>>>0);
      if ($cmp17) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $30=$visible;
      _qh_infiniteloop($30);
      label = 19; break;
    case 19: 
      label = 14; break;
    case 20: 
      var $31=$newfacet;
      var $tobool20=(($31)|0)!=0;
      if ($tobool20) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $32=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$32;
      label = 22; break;
    case 22: 
      var $33=$newfacet;
      var $34=HEAP32[((((5248948)|0))>>2)];
      var $cmp23=(($33)|0)==(($34)|0);
      if ($cmp23) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($35, 6170, ((5267784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(3, 0, 0);
      label = 24; break;
    case 24: 
      var $36=$visible;
      var $outsideset26=(($36+60)|0);
      var $37=HEAP32[(($outsideset26)>>2)];
      var $tobool27=(($37)|0)!=0;
      if ($tobool27) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $38=$visible;
      var $outsideset29=(($38+60)|0);
      var $39=HEAP32[(($outsideset29)>>2)];
      var $call=_qh_setsize($39);
      $size=$call;
      var $40=$size;
      var $41=$numoutside_addr;
      var $42=HEAP32[(($41)>>2)];
      var $add=((($42)+($40))|0);
      HEAP32[(($41)>>2)]=$add;
      var $43=$size;
      var $44=HEAP32[((((5249004)|0))>>2)];
      var $sub=((($44)-($43))|0);
      HEAP32[((((5249004)|0))>>2)]=$sub;
      $point=0;
      var $45=$visible;
      var $outsideset30=(($45+60)|0);
      var $46=HEAP32[(($outsideset30)>>2)];
      var $tobool31=(($46)|0)!=0;
      if ($tobool31) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $47=$visible;
      var $outsideset33=(($47+60)|0);
      var $48=HEAP32[(($outsideset33)>>2)];
      var $e=(($48+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $49=$p;
      $pointp=$49;
      label = 27; break;
    case 27: 
      var $50=$pointp;
      var $incdec_ptr=(($50+4)|0);
      $pointp=$incdec_ptr;
      var $51=HEAP32[(($50)>>2)];
      $point=$51;
      var $tobool35=(($51)|0)!=0;
      if ($tobool35) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $52=$point;
      var $53=$newfacet;
      _qh_partitionpoint($52, $53);
      label = 27; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $54=$visible;
      var $coplanarset39=(($54+64)|0);
      var $55=HEAP32[(($coplanarset39)>>2)];
      var $tobool40=(($55)|0)!=0;
      if ($tobool40) { label = 32; break; } else { label = 42; break; }
    case 32: 
      var $56=HEAP32[((((5247048)|0))>>2)];
      var $57=HEAP32[((((5247052)|0))>>2)];
      var $add42=((($56)+($57))|0);
      var $58=HEAP32[((((5247504)|0))>>2)];
      var $add43=((($add42)+($58))|0);
      var $tobool44=(($add43)|0)!=0;
      if ($tobool44) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $59=$visible;
      var $coplanarset46=(($59+64)|0);
      var $60=HEAP32[(($coplanarset46)>>2)];
      var $call47=_qh_setsize($60);
      $size=$call47;
      var $61=$size;
      var $62=$coplanar;
      var $add48=((($62)+($61))|0);
      $coplanar=$add48;
      $point=0;
      var $63=$visible;
      var $coplanarset49=(($63+64)|0);
      var $64=HEAP32[(($coplanarset49)>>2)];
      var $tobool50=(($64)|0)!=0;
      if ($tobool50) { label = 34; break; } else { label = 41; break; }
    case 34: 
      var $65=$visible;
      var $coplanarset52=(($65+64)|0);
      var $66=HEAP32[(($coplanarset52)>>2)];
      var $e53=(($66+4)|0);
      var $arrayidx54=(($e53)|0);
      var $p55=$arrayidx54;
      var $67=$p55;
      $pointp=$67;
      label = 35; break;
    case 35: 
      var $68=$pointp;
      var $incdec_ptr57=(($68+4)|0);
      $pointp=$incdec_ptr57;
      var $69=HEAP32[(($68)>>2)];
      $point=$69;
      var $tobool58=(($69)|0)!=0;
      if ($tobool58) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $70=$allpoints_addr;
      var $tobool60=(($70)|0)!=0;
      if ($tobool60) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $71=$point;
      var $72=$newfacet;
      _qh_partitionpoint($71, $72);
      label = 39; break;
    case 38: 
      var $73=$point;
      var $74=$newfacet;
      _qh_partitioncoplanar($73, $74, 0);
      label = 39; break;
    case 39: 
      label = 35; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $75=$visible;
      var $next=(($75+44)|0);
      var $76=HEAP32[(($next)>>2)];
      $visible=$76;
      label = 7; break;
    case 44: 
      $vertex=0;
      var $77=HEAP32[((((5249188)|0))>>2)];
      var $tobool67=(($77)|0)!=0;
      if ($tobool67) { label = 45; break; } else { label = 54; break; }
    case 45: 
      var $78=HEAP32[((((5249188)|0))>>2)];
      var $e69=(($78+4)|0);
      var $arrayidx70=(($e69)|0);
      var $p71=$arrayidx70;
      var $79=$p71;
      $vertexp=$79;
      label = 46; break;
    case 46: 
      var $80=$vertexp;
      var $incdec_ptr73=(($80+4)|0);
      $vertexp=$incdec_ptr73;
      var $81=HEAP32[(($80)>>2)];
      $vertex=$81;
      var $tobool74=(($81)|0)!=0;
      if ($tobool74) { label = 47; break; } else { label = 53; break; }
    case 47: 
      var $82=$vertex;
      var $point76=(($82+8)|0);
      var $83=HEAP32[(($point76)>>2)];
      var $tobool77=(($83)|0)!=0;
      if ($tobool77) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $84=$allpoints_addr;
      var $tobool79=(($84)|0)!=0;
      if ($tobool79) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $85=$vertex;
      var $point81=(($85+8)|0);
      var $86=HEAP32[(($point81)>>2)];
      var $87=HEAP32[((((5248956)|0))>>2)];
      _qh_partitionpoint($86, $87);
      label = 51; break;
    case 50: 
      var $88=$vertex;
      var $point83=(($88+8)|0);
      var $89=HEAP32[(($point83)>>2)];
      var $90=HEAP32[((((5248956)|0))>>2)];
      _qh_partitioncoplanar($89, $90, 0);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 46; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $91=HEAP32[((((5247040)|0))>>2)];
      var $cmp88=(($91)|0) >= 1;
      if ($cmp88) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $92=HEAP32[((((5248924)|0))>>2)];
      var $93=$numoutside_addr;
      var $94=HEAP32[(($93)>>2)];
      var $95=$coplanar;
      _qh_fprintf($92, 1043, ((5267488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$94,HEAP32[(((tempInt)+(4))>>2)]=$95,tempInt));
      label = 56; break;
    case 56: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_partitionvisible["X"]=1;

function _qh_buildtracing($furthest, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $furthest_addr;
      var $facet_addr;
      var $dist=__stackBase__;
      var $cpu;
      var $total;
      var $furthestid;
      var $timedata=(__stackBase__)+(8);
      var $tp;
      var $vertex;
      $furthest_addr=$furthest;
      $facet_addr=$facet;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $0=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$0;
      HEAP32[((((5247340)|0))>>2)]=0;
      var $1=$furthest_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_time($timedata);
      var $call1=_localtime($timedata);
      $tp=$call1;
      var $call2=_clock();
      var $conv=(($call2)>>>0);
      var $2=HEAP32[((((5249024)|0))>>2)];
      var $conv3=(($2)>>>0);
      var $sub=($conv)-($conv3);
      $cpu=$sub;
      var $3=$cpu;
      var $div=($3)/(1000);
      $cpu=$div;
      var $4=HEAP32[(((((5244580)|0)))>>2)];
      var $5=HEAP32[(((((5243316)|0)))>>2)];
      var $sub4=((($4)-($5))|0);
      var $6=HEAP32[(((((5243308)|0)))>>2)];
      var $add=((($sub4)+($6))|0);
      $total=$add;
      var $7=HEAP32[((((5248924)|0))>>2)];
      var $8=$tp;
      var $tm_hour=(($8+8)|0);
      var $9=HEAP32[(($tm_hour)>>2)];
      var $10=$tp;
      var $tm_min=(($10+4)|0);
      var $11=HEAP32[(($tm_min)>>2)];
      var $12=$tp;
      var $tm_sec=(($12)|0);
      var $13=HEAP32[(($tm_sec)>>2)];
      var $14=$cpu;
      var $conv5=$14;
      var $15=HEAP32[((((5249012)|0))>>2)];
      var $sub6=((($15)-(1))|0);
      var $16=$total;
      var $17=HEAP32[((((5248996)|0))>>2)];
      var $18=HEAP32[((((5249000)|0))>>2)];
      var $19=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($7, 8118, ((5287768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 40)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=$13,(HEAPF64[(tempDoublePtr)>>3]=$conv5,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$sub6,HEAP32[(((tempInt)+(24))>>2)]=$16,HEAP32[(((tempInt)+(28))>>2)]=$17,HEAP32[(((tempInt)+(32))>>2)]=$18,HEAP32[(((tempInt)+(36))>>2)]=$19,tempInt));
      label = 43; break;
    case 4: 
      var $20=$furthest_addr;
      var $call7=_qh_pointid($20);
      $furthestid=$call7;
      var $21=HEAP32[((((5247436)|0))>>2)];
      var $22=$furthestid;
      var $cmp=(($21)|0)==(($22)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$23;
      var $24=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5242936)|0))>>2)]=$24;
      label = 10; break;
    case 6: 
      var $25=HEAP32[((((5247436)|0))>>2)];
      var $cmp10=(($25)|0)!=-1;
      if ($cmp10) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp12=$26 < 8.988465674311579e+307;
      if ($cmp12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      HEAP32[((((5247040)|0))>>2)]=0;
      HEAP32[((((5242936)|0))>>2)]=0;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $27=HEAP32[((((5247372)|0))>>2)];
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $28=HEAP32[((((5249012)|0))>>2)];
      var $sub19=((($28)-(1))|0);
      var $29=HEAP32[((((5249256)|0))>>2)];
      var $30=HEAP32[((((5247372)|0))>>2)];
      var $add20=((($29)+($30))|0);
      var $cmp21=(($sub19)>>>0) > (($add20)>>>0);
      if ($cmp21) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $31=HEAP32[((((5249012)|0))>>2)];
      var $sub24=((($31)-(1))|0);
      HEAP32[((((5249256)|0))>>2)]=$sub24;
      var $call25=_time($timedata);
      var $call26=_localtime($timedata);
      $tp=$call26;
      var $call27=_clock();
      var $conv28=(($call27)>>>0);
      var $32=HEAP32[((((5249024)|0))>>2)];
      var $conv29=(($32)>>>0);
      var $sub30=($conv28)-($conv29);
      $cpu=$sub30;
      var $33=$cpu;
      var $div31=($33)/(1000);
      $cpu=$div31;
      var $34=HEAP32[(((((5244580)|0)))>>2)];
      var $35=HEAP32[(((((5243316)|0)))>>2)];
      var $sub32=((($34)-($35))|0);
      var $36=HEAP32[(((((5243308)|0)))>>2)];
      var $add33=((($sub32)+($36))|0);
      $total=$add33;
      var $37=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($37)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $38=$furthest_addr;
      var $39=$facet_addr;
      _qh_distplane($38, $39, $dist);
      var $40=HEAP32[((((5248924)|0))>>2)];
      var $41=$tp;
      var $tm_hour34=(($41+8)|0);
      var $42=HEAP32[(($tm_hour34)>>2)];
      var $43=$tp;
      var $tm_min35=(($43+4)|0);
      var $44=HEAP32[(($tm_min35)>>2)];
      var $45=$tp;
      var $tm_sec36=(($45)|0);
      var $46=HEAP32[(($tm_sec36)>>2)];
      var $47=$cpu;
      var $conv37=$47;
      var $48=HEAP32[((((5249012)|0))>>2)];
      var $sub38=((($48)-(1))|0);
      var $49=$total;
      var $50=HEAP32[((((5248996)|0))>>2)];
      var $51=HEAP32[((((5249000)|0))>>2)];
      var $52=HEAP32[((((5249004)|0))>>2)];
      var $add39=((($52)+(1))|0);
      var $53=$furthestid;
      var $54=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear=$54 & 16777215;
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=$facet_addr;
      var $tobool40=(($56)|0)!=0;
      if ($tobool40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $57=$facet_addr;
      var $id=(($57+72)|0);
      var $58=HEAP32[(($id)>>2)];
      var $cond = $58;label = 15; break;
    case 14: 
      var $cond = -1;label = 15; break;
    case 15: 
      var $cond;
      _qh_fprintf($40, 8119, ((5285668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 60)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$42,HEAP32[(((tempInt)+(4))>>2)]=$44,HEAP32[(((tempInt)+(8))>>2)]=$46,(HEAPF64[(tempDoublePtr)>>3]=$conv37,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$sub38,HEAP32[(((tempInt)+(24))>>2)]=$49,HEAP32[(((tempInt)+(28))>>2)]=$50,HEAP32[(((tempInt)+(32))>>2)]=$51,HEAP32[(((tempInt)+(36))>>2)]=$add39,HEAP32[(((tempInt)+(40))>>2)]=$53,HEAP32[(((tempInt)+(44))>>2)]=$bf_clear,(HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[(((tempInt)+(48))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(48))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(56))>>2)]=$cond,tempInt));
      label = 22; break;
    case 16: 
      var $59=HEAP32[((((5247040)|0))>>2)];
      var $cmp42=(($59)|0) >= 1;
      if ($cmp42) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $call45=_clock();
      var $conv46=(($call45)>>>0);
      var $60=HEAP32[((((5249024)|0))>>2)];
      var $conv47=(($60)>>>0);
      var $sub48=($conv46)-($conv47);
      $cpu=$sub48;
      var $61=$cpu;
      var $div49=($61)/(1000);
      $cpu=$div49;
      var $62=$furthest_addr;
      var $63=$facet_addr;
      _qh_distplane($62, $63, $dist);
      var $64=HEAP32[((((5248924)|0))>>2)];
      var $65=$furthestid;
      var $66=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear50=$66 & 16777215;
      var $67=HEAP32[((((5248996)|0))>>2)];
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $69=$facet_addr;
      var $tobool51=(($69)|0)!=0;
      if ($tobool51) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $70=$facet_addr;
      var $id53=(($70+72)|0);
      var $71=HEAP32[(($id53)>>2)];
      var $cond56 = $71;label = 20; break;
    case 19: 
      var $cond56 = -1;label = 20; break;
    case 20: 
      var $cond56;
      var $72=HEAP32[((((5249004)|0))>>2)];
      var $add57=((($72)+(1))|0);
      var $73=$cpu;
      var $conv58=$73;
      var $74=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($64, 8120, ((5283412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 40)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$65,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear50,HEAP32[(((tempInt)+(8))>>2)]=$67,(HEAPF64[(tempDoublePtr)>>3]=$68,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$cond56,HEAP32[(((tempInt)+(24))>>2)]=$add57,(HEAPF64[(tempDoublePtr)>>3]=$conv58,HEAP32[(((tempInt)+(28))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(28))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(36))>>2)]=$74,tempInt));
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $75=HEAP32[(((((5244748)|0)))>>2)];
      var $76=HEAP32[((((5249156)|0))>>2)];
      var $div61=((((($76)|0))/(2))&-1);
      var $cmp62=(($75)|0) < (($div61)|0);
      if ($cmp62) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $77=HEAP32[((((5249156)|0))>>2)];
      var $div65=((((($77)|0))/(2))&-1);
      HEAP32[(((((5244748)|0)))>>2)]=$div65;
      label = 24; break;
    case 24: 
      var $78=HEAP32[((((5249156)|0))>>2)];
      var $cmp67=(($78)>>>0) > 2147483647;
      if ($cmp67) { label = 25; break; } else { label = 32; break; }
    case 25: 
      var $79=HEAP32[(((((5244740)|0)))>>2)];
      var $inc70=((($79)+(1))|0);
      HEAP32[(((((5244740)|0)))>>2)]=$inc70;
      HEAP32[((((5249156)|0))>>2)]=0;
      var $80=HEAP32[((((5248944)|0))>>2)];
      $facet_addr=$80;
      label = 26; break;
    case 26: 
      var $81=$facet_addr;
      var $tobool71=(($81)|0)!=0;
      if ($tobool71) { label = 27; break; } else { var $84 = 0;label = 28; break; }
    case 27: 
      var $82=$facet_addr;
      var $next=(($82+44)|0);
      var $83=HEAP32[(($next)>>2)];
      var $tobool72=(($83)|0)!=0;
      var $84 = $tobool72;label = 28; break;
    case 28: 
      var $84;
      if ($84) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $85=$facet_addr;
      var $visitid=(($85+68)|0);
      HEAP32[(($visitid)>>2)]=0;
      label = 30; break;
    case 30: 
      var $86=$facet_addr;
      var $next73=(($86+44)|0);
      var $87=HEAP32[(($next73)>>2)];
      $facet_addr=$87;
      label = 26; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $88=HEAP32[(((((5244780)|0)))>>2)];
      var $89=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear75=$89 & 2147483647;
      var $div76=((((($bf_clear75)|0))/(2))&-1);
      var $cmp77=(($88)|0) < (($div76)|0);
      if ($cmp77) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $90=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear80=$90 & 2147483647;
      var $div81=((((($bf_clear80)|0))/(2))&-1);
      HEAP32[(((((5244780)|0)))>>2)]=$div81;
      label = 34; break;
    case 34: 
      var $91=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear83=$91 & 2147483647;
      var $cmp84=(($bf_clear83)>>>0) > 1073741823;
      if ($cmp84) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $92=HEAP32[(((((5244772)|0)))>>2)];
      var $inc87=((($92)+(1))|0);
      HEAP32[(((((5244772)|0)))>>2)]=$inc87;
      var $93=HEAP32[(((((5249160)|0)))>>2)];
      var $94=$93 & -2147483648;
      HEAP32[(((((5249160)|0)))>>2)]=$94;
      var $95=HEAP32[((((5248984)|0))>>2)];
      $vertex=$95;
      label = 36; break;
    case 36: 
      var $96=$vertex;
      var $tobool89=(($96)|0)!=0;
      if ($tobool89) { label = 37; break; } else { var $99 = 0;label = 38; break; }
    case 37: 
      var $97=$vertex;
      var $next91=(($97)|0);
      var $98=HEAP32[(($next91)>>2)];
      var $tobool92=(($98)|0)!=0;
      var $99 = $tobool92;label = 38; break;
    case 38: 
      var $99;
      if ($99) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $100=$vertex;
      var $101=$100;
      var $bf_field_offs=(($101+16)|0);
      var $102=$bf_field_offs;
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 & -2147483648;
      HEAP32[(($102)>>2)]=$104;
      label = 40; break;
    case 40: 
      var $105=$vertex;
      var $next96=(($105)|0);
      var $106=HEAP32[(($next96)>>2)];
      $vertex=$106;
      label = 36; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $107=$furthestid;
      HEAP32[((((5249040)|0))>>2)]=$107;
      var $108=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$108;
      label = 43; break;
    case 43: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_buildtracing["X"]=1;

function _qh_addpoint($furthest, $facet, $checkdist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $furthest_addr;
      var $facet_addr;
      var $checkdist_addr;
      var $goodvisible=__stackBase__;
      var $goodhorizon=(__stackBase__)+(4);
      var $vertex;
      var $newfacet;
      var $dist=(__stackBase__)+(8);
      var $newbalance;
      var $pbalance;
      var $isoutside=(__stackBase__)+(16);
      var $numpart=(__stackBase__)+(20);
      var $numpoints=(__stackBase__)+(24);
      var $numnew;
      var $firstnew;
      $furthest_addr=$furthest;
      $facet_addr=$facet;
      $checkdist_addr=$checkdist;
      HEAP32[(($isoutside)>>2)]=0;
      HEAP32[((((5249064)|0))>>2)]=0;
      var $0=$furthest_addr;
      var $call=_qh_pointid($0);
      var $cmp=(($call)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$furthest_addr;
      var $2=$1;
      _qh_setappend(((5249184)|0), $2);
      label = 4; break;
    case 4: 
      var $3=$facet_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($4, 6213, ((5256376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 6; break;
    case 6: 
      var $5=$checkdist_addr;
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $6=$furthest_addr;
      var $7=$facet_addr;
      var $call5=_qh_findbest($6, $7, 0, 0, 0, $dist, $isoutside, $numpart);
      $facet_addr=$call5;
      var $8=HEAP32[(($numpart)>>2)];
      var $9=HEAP32[(((((5244316)|0)))>>2)];
      var $add=((($9)+($8))|0);
      HEAP32[(((((5244316)|0)))>>2)]=$add;
      var $10=HEAP32[(($isoutside)>>2)];
      var $tobool6=(($10)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $11=HEAP32[(((((5244196)|0)))>>2)];
      var $inc=((($11)+(1))|0);
      HEAP32[(((((5244196)|0)))>>2)]=$inc;
      var $12=$facet_addr;
      var $13=$12;
      var $bf_field_offs=(($13+76)|0);
      var $14=$bf_field_offs;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -262145;
      var $17=$16 | 262144;
      HEAP32[(($14)>>2)]=$17;
      var $18=$furthest_addr;
      var $19=$facet_addr;
      _qh_partitioncoplanar($18, $19, $dist);
      $retval=1;
      label = 67; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $20=$furthest_addr;
      var $21=$facet_addr;
      _qh_buildtracing($20, $21);
      var $22=HEAP32[((((5247416)|0))>>2)];
      var $cmp10=(($22)|0) < 0;
      if ($cmp10) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $23=HEAP32[((((5249040)|0))>>2)];
      var $24=HEAP32[((((5247416)|0))>>2)];
      var $sub=(((-$24))|0);
      var $sub11=((($sub)-(1))|0);
      var $cmp12=(($23)|0)==(($sub11)|0);
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $25=$facet_addr;
      var $26=$25;
      var $bf_field_offs14=(($26+76)|0);
      var $27=$bf_field_offs14;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 & -262145;
      var $30=$29 | 262144;
      HEAP32[(($27)>>2)]=$30;
      $retval=0;
      label = 67; break;
    case 13: 
      var $31=$furthest_addr;
      var $32=$facet_addr;
      _qh_findhorizon($31, $32, $goodvisible, $goodhorizon);
      var $33=HEAP32[((((5247128)|0))>>2)];
      var $tobool16=(($33)|0)!=0;
      if ($tobool16) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $34=HEAP32[(($goodvisible)>>2)];
      var $35=HEAP32[(($goodhorizon)>>2)];
      var $add18=((($34)+($35))|0);
      var $tobool19=(($add18)|0)!=0;
      if ($tobool19) { label = 17; break; } else { label = 15; break; }
    case 15: 
      var $36=HEAP32[((((5249044)|0))>>2)];
      var $tobool21=(($36)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $37=HEAP32[(((((5244180)|0)))>>2)];
      var $inc23=((($37)+(1))|0);
      HEAP32[(((((5244180)|0)))>>2)]=$inc23;
      var $38=$facet_addr;
      var $39=$38;
      var $bf_field_offs24=(($39+76)|0);
      var $40=$bf_field_offs24;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 & -262145;
      var $43=$42 | 262144;
      HEAP32[(($40)>>2)]=$43;
      _qh_resetlists(0, 1);
      $retval=1;
      label = 67; break;
    case 17: 
      var $44=HEAP32[(((((5244380)|0)))>>2)];
      var $inc26=((($44)+(1))|0);
      HEAP32[(((((5244380)|0)))>>2)]=$inc26;
      var $45=HEAP32[((((5249012)|0))>>2)];
      $firstnew=$45;
      var $46=$furthest_addr;
      var $call27=_qh_makenewfacets($46);
      $vertex=$call27;
      _qh_makenewplanes();
      var $47=HEAP32[((((5249012)|0))>>2)];
      var $48=$firstnew;
      var $sub28=((($47)-($48))|0);
      $numnew=$sub28;
      var $49=$numnew;
      var $conv=(($49)|0);
      var $50=HEAP32[((((5248996)|0))>>2)];
      var $51=HEAP32[((((5248964)|0))>>2)];
      var $sub29=((($50)-($51))|0);
      var $conv30=(($sub29)|0);
      var $52=HEAP32[((((5247508)|0))>>2)];
      var $conv31=(($52)|0);
      var $mul=($conv30)*($conv31);
      var $53=HEAP32[((((5249000)|0))>>2)];
      var $conv32=(($53)|0);
      var $div=($mul)/($conv32);
      var $sub33=($conv)-($div);
      $newbalance=$sub33;
      var $54=$newbalance;
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244100)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244100)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add34=($55)+($54);
      (HEAPF64[(tempDoublePtr)>>3]=$add34,HEAP32[((((5244100)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244100)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $56=$newbalance;
      var $57=$newbalance;
      var $mul35=($56)*($57);
      var $58=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add36=($58)+($mul35);
      (HEAPF64[(tempDoublePtr)>>3]=$add36,HEAP32[((((5244108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $59=HEAP32[((((5247128)|0))>>2)];
      var $tobool37=(($59)|0)!=0;
      if ($tobool37) { label = 18; break; } else { label = 27; break; }
    case 18: 
      var $60=HEAP32[((((5248956)|0))>>2)];
      var $61=HEAP32[(($goodhorizon)>>2)];
      var $call39=_qh_findgood($60, $61);
      var $tobool40=(($call39)|0)!=0;
      if ($tobool40) { label = 27; break; } else { label = 19; break; }
    case 19: 
      var $62=HEAP32[((((5249044)|0))>>2)];
      var $tobool42=(($62)|0)!=0;
      if ($tobool42) { label = 27; break; } else { label = 20; break; }
    case 20: 
      var $63=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$63;
      label = 21; break;
    case 21: 
      var $64=$newfacet;
      var $tobool44=(($64)|0)!=0;
      if ($tobool44) { label = 22; break; } else { var $67 = 0;label = 23; break; }
    case 22: 
      var $65=$newfacet;
      var $next=(($65+44)|0);
      var $66=HEAP32[(($next)>>2)];
      var $tobool45=(($66)|0)!=0;
      var $67 = $tobool45;label = 23; break;
    case 23: 
      var $67;
      if ($67) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $68=$newfacet;
      _qh_delfacet($68);
      label = 25; break;
    case 25: 
      var $69=$newfacet;
      var $next46=(($69+44)|0);
      var $70=HEAP32[(($next46)>>2)];
      $newfacet=$70;
      label = 21; break;
    case 26: 
      var $71=$vertex;
      _qh_delvertex($71);
      _qh_resetlists(1, 1);
      var $72=HEAP32[(((((5244188)|0)))>>2)];
      var $inc47=((($72)+(1))|0);
      HEAP32[(((((5244188)|0)))>>2)]=$inc47;
      var $73=$facet_addr;
      var $74=$73;
      var $bf_field_offs48=(($74+76)|0);
      var $75=$bf_field_offs48;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & -262145;
      var $78=$77 | 262144;
      HEAP32[(($75)>>2)]=$78;
      $retval=1;
      label = 67; break;
    case 27: 
      var $79=HEAP32[((((5247128)|0))>>2)];
      var $tobool50=(($79)|0)!=0;
      if ($tobool50) { label = 28; break; } else { label = 29; break; }
    case 28: 
      _qh_attachnewfacets();
      label = 29; break;
    case 29: 
      _qh_matchnewfacets();
      _qh_updatevertices();
      var $80=HEAP32[((((5247412)|0))>>2)];
      var $tobool53=(($80)|0)!=0;
      if ($tobool53) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $81=HEAP32[((((5249040)|0))>>2)];
      var $82=HEAP32[((((5247412)|0))>>2)];
      var $sub55=((($82)-(1))|0);
      var $cmp56=(($81)|0)==(($sub55)|0);
      if ($cmp56) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $83=$facet_addr;
      var $84=$83;
      var $bf_field_offs59=(($84+76)|0);
      var $85=$bf_field_offs59;
      var $86=HEAP32[(($85)>>2)];
      var $87=$86 & -262145;
      var $88=$87 | 262144;
      HEAP32[(($85)>>2)]=$88;
      $retval=0;
      label = 67; break;
    case 32: 
      HEAP32[((((5249096)|0))>>2)]=0;
      var $89=HEAP32[((((5247144)|0))>>2)];
      var $tobool61=(($89)|0)!=0;
      if ($tobool61) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $90=HEAP32[((((5247076)|0))>>2)];
      var $tobool62=(($90)|0)!=0;
      if ($tobool62) { label = 34; break; } else { label = 46; break; }
    case 34: 
      var $91=$vertex;
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_premerge($91, $92, $93);
      var $94=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp64=(($94)|0) > 50;
      if ($cmp64) { label = 35; break; } else { label = 36; break; }
    case 35: 
      HEAP32[((((5249096)|0))>>2)]=1;
      label = 45; break;
    case 36: 
      var $95=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$95;
      label = 37; break;
    case 37: 
      var $96=$newfacet;
      var $tobool68=(($96)|0)!=0;
      if ($tobool68) { label = 38; break; } else { var $99 = 0;label = 39; break; }
    case 38: 
      var $97=$newfacet;
      var $next70=(($97+44)|0);
      var $98=HEAP32[(($next70)>>2)];
      var $tobool71=(($98)|0)!=0;
      var $99 = $tobool71;label = 39; break;
    case 39: 
      var $99;
      if ($99) { label = 40; break; } else { label = 44; break; }
    case 40: 
      var $100=$newfacet;
      var $101=$100;
      var $bf_field_offs74=(($101+76)|0);
      var $102=$bf_field_offs74;
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 >>> 13;
      var $bf_clear=$104 & 1;
      var $tobool75=(($bf_clear)|0)!=0;
      if ($tobool75) { label = 42; break; } else { label = 41; break; }
    case 41: 
      HEAP32[((((5249096)|0))>>2)]=1;
      label = 44; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $105=$newfacet;
      var $next79=(($105+44)|0);
      var $106=HEAP32[(($next79)>>2)];
      $newfacet=$106;
      label = 37; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 49; break;
    case 46: 
      var $107=HEAP32[((((5246968)|0))>>2)];
      var $tobool83=(($107)|0)!=0;
      if ($tobool83) { label = 47; break; } else { label = 48; break; }
    case 47: 
      HEAP32[((((5249096)|0))>>2)]=1;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      _qh_partitionvisible(0, $numpoints);
      HEAP32[((((5249096)|0))>>2)]=0;
      HEAP32[((((5249100)|0))>>2)]=0;
      var $108=HEAP32[(((((5244340)|0)))>>2)];
      var $inc87=((($108)+(1))|0);
      HEAP32[(((((5244340)|0)))>>2)]=$inc87;
      var $109=HEAP32[(($numpoints)>>2)];
      var $conv88=(($109)|0);
      var $110=HEAP32[((((5247508)|0))>>2)];
      var $conv89=(($110)|0);
      var $111=HEAP32[((((5247516)|0))>>2)];
      var $112=HEAP32[((((5249000)|0))>>2)];
      var $sub90=((($111)-($112))|0);
      var $conv91=(($sub90)|0);
      var $mul92=($conv89)*($conv91);
      var $113=HEAP32[((((5249000)|0))>>2)];
      var $conv93=(($113)|0);
      var $div94=($mul92)/($conv93);
      var $sub95=($conv88)-($div94);
      $pbalance=$sub95;
      var $114=$pbalance;
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244348)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244348)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add96=($115)+($114);
      (HEAPF64[(tempDoublePtr)>>3]=$add96,HEAP32[((((5244348)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244348)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $116=$pbalance;
      var $117=$pbalance;
      var $mul97=($116)*($117);
      var $118=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244356)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244356)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add98=($118)+($mul97);
      (HEAPF64[(tempDoublePtr)>>3]=$add98,HEAP32[((((5244356)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244356)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      _qh_deletevisible();
      var $119=HEAP32[(((((5243900)|0)))>>2)];
      var $120=HEAP32[((((5249000)|0))>>2)];
      var $cmp99=(($119)|0) < (($120)|0);
      if ($cmp99) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $121=HEAP32[((((5249000)|0))>>2)];
      HEAP32[(((((5243900)|0)))>>2)]=$121;
      label = 51; break;
    case 51: 
      HEAP32[((((5249092)|0))>>2)]=0;
      var $122=HEAP32[((((5247040)|0))>>2)];
      var $cmp103=(($122)|0) >= 4;
      if ($cmp103) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $123=HEAP32[((((5248996)|0))>>2)];
      var $cmp106=(($123)|0) < 2000;
      if ($cmp106) { label = 53; break; } else { label = 54; break; }
    case 53: 
      _qh_printlists();
      label = 54; break;
    case 54: 
      var $124=HEAP32[((((5248956)|0))>>2)];
      _qh_printfacetlist($124, 0, 1);
      var $125=HEAP32[((((5248944)|0))>>2)];
      _qh_checkpolygon($125);
      label = 61; break;
    case 55: 
      var $126=HEAP32[((((5246980)|0))>>2)];
      var $tobool111=(($126)|0)!=0;
      if ($tobool111) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=HEAP32[((((5248996)|0))>>2)];
      var $cmp113=(($127)|0) < 50;
      if ($cmp113) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $128=HEAP32[((((5248944)|0))>>2)];
      _qh_checkpolygon($128);
      label = 59; break;
    case 58: 
      var $129=HEAP32[((((5248956)|0))>>2)];
      _qh_checkpolygon($129);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $130=HEAP32[((((5247416)|0))>>2)];
      var $cmp120=(($130)|0) > 0;
      if ($cmp120) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $131=HEAP32[((((5249040)|0))>>2)];
      var $132=HEAP32[((((5247416)|0))>>2)];
      var $sub123=((($132)-(1))|0);
      var $cmp124=(($131)|0)==(($sub123)|0);
      if ($cmp124) { label = 63; break; } else { label = 64; break; }
    case 63: 
      $retval=0;
      label = 67; break;
    case 64: 
      _qh_resetlists(1, 1);
      var $133=HEAP32[((((5247040)|0))>>2)];
      var $cmp128=(($133)|0) >= 2;
      if ($cmp128) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $134=HEAP32[((((5248924)|0))>>2)];
      var $135=$furthest_addr;
      var $call131=_qh_pointid($135);
      var $136=$numnew;
      var $137=$newbalance;
      var $138=$pbalance;
      _qh_fprintf($134, 2056, ((5253556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call131,HEAP32[(((tempInt)+(4))>>2)]=$136,(HEAPF64[(tempDoublePtr)>>3]=$137,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$138,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 66; break;
    case 66: 
      $retval=1;
      label = 67; break;
    case 67: 
      var $139=$retval;
      STACKTOP = __stackBase__;
      return $139;
    default: assert(0, "bad label: " + label);
  }

}
_qh_addpoint["X"]=1;

function _qh_partitioncoplanar($point, $facet, $dist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $facet_addr;
      var $dist_addr;
      var $bestfacet;
      var $oldfurthest;
      var $bestdist=__stackBase__;
      var $dist2=(__stackBase__)+(8);
      var $angle;
      var $numpart=(__stackBase__)+(16);
      var $oldfindbest;
      var $isoutside=(__stackBase__)+(20);
      $point_addr=$point;
      $facet_addr=$facet;
      $dist_addr=$dist;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($dist2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[(($numpart)>>2)]=0;
      HEAP32[((((5249168)|0))>>2)]=1;
      var $0=$dist_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 21; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5249096)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$point_addr;
      var $3=$facet_addr;
      var $call=_qh_findbestnew($2, $3, $bestdist, 1, $isoutside, $numpart);
      $bestfacet=$call;
      label = 6; break;
    case 5: 
      var $4=$point_addr;
      var $5=$facet_addr;
      var $6=HEAP32[((((5247000)|0))>>2)];
      var $call3=_qh_findbest($4, $5, 1, 0, $6, $bestdist, $isoutside, $numpart);
      $bestfacet=$call3;
      label = 6; break;
    case 6: 
      var $7=HEAP32[(((((5244588)|0)))>>2)];
      var $inc=((($7)+(1))|0);
      HEAP32[(((((5244588)|0)))>>2)]=$inc;
      var $8=HEAP32[(($numpart)>>2)];
      var $9=HEAP32[(((((5244284)|0)))>>2)];
      var $add=((($9)+($8))|0);
      HEAP32[(((((5244284)|0)))>>2)]=$add;
      var $10=HEAP32[((((5247000)|0))>>2)];
      var $tobool4=(($10)|0)!=0;
      if ($tobool4) { label = 20; break; } else { label = 7; break; }
    case 7: 
      var $11=HEAP32[((((5247052)|0))>>2)];
      var $tobool5=(($11)|0)!=0;
      if ($tobool5) { label = 20; break; } else { label = 8; break; }
    case 8: 
      var $12=HEAP32[((((5247504)|0))>>2)];
      var $tobool7=(($12)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248716)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248716)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$14);
      var $cmp=$13 < $sub;
      if ($cmp) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $15=HEAP32[(((((5243268)|0)))>>2)];
      var $inc10=((($15)+(1))|0);
      HEAP32[(((((5243268)|0)))>>2)]=$inc10;
      var $16=HEAP32[((((5247040)|0))>>2)];
      var $cmp11=(($16)|0) >= 4;
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=HEAP32[((((5248924)|0))>>2)];
      var $18=$point_addr;
      var $call13=_qh_pointid($18);
      var $19=$bestfacet;
      var $id=(($19+72)|0);
      var $20=HEAP32[(($id)>>2)];
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $22=HEAP32[((((5249096)|0))>>2)];
      _qh_fprintf($17, 4062, ((5273700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call13,HEAP32[(((tempInt)+(4))>>2)]=$20,(HEAPF64[(tempDoublePtr)>>3]=$21,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$22,tempInt));
      label = 12; break;
    case 12: 
      label = 43; break;
    case 13: 
      label = 19; break;
    case 14: 
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub17=(-$24);
      var $cmp18=$23 < $sub17;
      if ($cmp18) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $25=HEAP32[((((5247040)|0))>>2)];
      var $cmp20=(($25)|0) >= 4;
      if ($cmp20) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $26=HEAP32[((((5248924)|0))>>2)];
      var $27=$point_addr;
      var $call22=_qh_pointid($27);
      var $28=$bestfacet;
      var $id23=(($28+72)|0);
      var $29=HEAP32[(($id23)>>2)];
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=HEAP32[((((5249096)|0))>>2)];
      _qh_fprintf($26, 4063, ((5273164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call22,HEAP32[(((tempInt)+(4))>>2)]=$29,(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$31,tempInt));
      label = 17; break;
    case 17: 
      var $32=HEAP32[(((((5243268)|0)))>>2)];
      var $inc25=((($32)+(1))|0);
      HEAP32[(((((5243268)|0)))>>2)]=$inc25;
      label = 43; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      var $33=$facet_addr;
      $bestfacet=$33;
      var $34=$dist_addr;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(($bestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($bestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 22; break;
    case 22: 
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp31=$36 > $37;
      if ($cmp31) { label = 23; break; } else { label = 33; break; }
    case 23: 
      var $38=$dist_addr;
      var $tobool33=(($38)|0)!=0;
      if ($tobool33) { label = 30; break; } else { label = 24; break; }
    case 24: 
      var $39=$facet_addr;
      var $40=$bestfacet;
      var $cmp35=(($39)|0)!=(($40)|0);
      if ($cmp35) { label = 25; break; } else { label = 30; break; }
    case 25: 
      var $41=HEAP32[(((((5244276)|0)))>>2)];
      var $inc37=((($41)+(1))|0);
      HEAP32[(((((5244276)|0)))>>2)]=$inc37;
      var $42=$facet_addr;
      var $normal=(($42+24)|0);
      var $43=HEAP32[(($normal)>>2)];
      var $44=$bestfacet;
      var $normal38=(($44+24)|0);
      var $45=HEAP32[(($normal38)>>2)];
      var $call39=_qh_getangle($43, $45);
      $angle=$call39;
      var $46=$angle;
      var $cmp40=$46 < 0;
      if ($cmp40) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $47=HEAP32[(((((5244292)|0)))>>2)];
      var $inc42=((($47)+(1))|0);
      HEAP32[(((((5244292)|0)))>>2)]=$inc42;
      var $48=HEAP32[((((5247040)|0))>>2)];
      var $cmp43=(($48)|0) >= 2;
      if ($cmp43) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $49=HEAP32[((((5248924)|0))>>2)];
      var $50=$point_addr;
      var $call45=_qh_pointid($50);
      var $51=$facet_addr;
      var $id46=(($51+72)|0);
      var $52=HEAP32[(($id46)>>2)];
      var $53=$bestfacet;
      var $id47=(($53+72)|0);
      var $54=HEAP32[(($id47)>>2)];
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($49, 2058, ((5272604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call45,HEAP32[(((tempInt)+(4))>>2)]=$52,HEAP32[(((tempInt)+(8))>>2)]=$54,(HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 28; break;
    case 28: 
      var $56=HEAP32[((((5249096)|0))>>2)];
      $oldfindbest=$56;
      HEAP32[((((5249096)|0))>>2)]=0;
      var $57=$point_addr;
      var $58=$bestfacet;
      _qh_partitionpoint($57, $58);
      var $59=$oldfindbest;
      HEAP32[((((5249096)|0))>>2)]=$59;
      label = 43; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $62=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp51=$61 > $62;
      if ($cmp51) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $63=HEAP32[((((5248924)|0))>>2)];
      var $64=$point_addr;
      var $call53=_qh_pointid($64);
      var $65=$facet_addr;
      var $id54=(($65+72)|0);
      var $66=HEAP32[(($id54)>>2)];
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $68=$bestfacet;
      var $id55=(($68+72)|0);
      var $69=HEAP32[(($id55)>>2)];
      var $70=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($63, 8122, ((5272012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call53,HEAP32[(((tempInt)+(4))>>2)]=$66,(HEAPF64[(tempDoublePtr)>>3]=$67,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$69,HEAP32[(((tempInt)+(20))>>2)]=$70,tempInt));
      var $71=$facet_addr;
      var $72=$bestfacet;
      _qh_errprint(((5271240)|0), $71, $72, 0, 0);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $73=HEAP32[((((5247048)|0))>>2)];
      var $74=HEAP32[((((5247052)|0))>>2)];
      var $add58=((($73)+($74))|0);
      var $75=HEAP32[((((5247504)|0))>>2)];
      var $add59=((($add58)+($75))|0);
      var $tobool60=(($add59)|0)!=0;
      if ($tobool60) { label = 34; break; } else { label = 41; break; }
    case 34: 
      var $76=$bestfacet;
      var $coplanarset=(($76+64)|0);
      var $77=HEAP32[(($coplanarset)>>2)];
      var $call62=_qh_setlast($77);
      var $78=$call62;
      $oldfurthest=$78;
      var $79=$oldfurthest;
      var $tobool63=(($79)|0)!=0;
      if ($tobool63) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $80=HEAP32[(((((5243172)|0)))>>2)];
      var $inc65=((($80)+(1))|0);
      HEAP32[(((((5243172)|0)))>>2)]=$inc65;
      var $81=$oldfurthest;
      var $82=$bestfacet;
      _qh_distplane($81, $82, $dist2);
      label = 36; break;
    case 36: 
      var $83=$oldfurthest;
      var $tobool67=(($83)|0)!=0;
      if ($tobool67) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp68=$84 < $85;
      if ($cmp68) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $86=$bestfacet;
      var $coplanarset70=(($86+64)|0);
      var $87=$point_addr;
      var $88=$87;
      _qh_setappend($coplanarset70, $88);
      label = 40; break;
    case 39: 
      var $89=$bestfacet;
      var $coplanarset72=(($89+64)|0);
      var $90=$point_addr;
      var $91=$90;
      _qh_setappend2ndlast($coplanarset72, $91);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $92=HEAP32[((((5247040)|0))>>2)];
      var $cmp75=(($92)|0) >= 4;
      if ($cmp75) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $93=HEAP32[((((5248924)|0))>>2)];
      var $94=$point_addr;
      var $call77=_qh_pointid($94);
      var $95=$bestfacet;
      var $id78=(($95+72)|0);
      var $96=HEAP32[(($id78)>>2)];
      var $97=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($93, 4064, ((5270688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call77,HEAP32[(((tempInt)+(4))>>2)]=$96,(HEAPF64[(tempDoublePtr)>>3]=$97,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 43; break;
    case 43: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_partitioncoplanar["X"]=1;

function _qh_findhorizon($point, $facet, $goodvisible, $goodhorizon) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $facet_addr;
      var $goodvisible_addr;
      var $goodhorizon_addr;
      var $neighbor;
      var $neighborp;
      var $visible;
      var $numhorizon;
      var $coplanar;
      var $dist=__stackBase__;
      $point_addr=$point;
      $facet_addr=$facet;
      $goodvisible_addr=$goodvisible;
      $goodhorizon_addr=$goodhorizon;
      $numhorizon=0;
      $coplanar=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$point_addr;
      var $call=_qh_pointid($2);
      var $3=$facet_addr;
      var $id=(($3+72)|0);
      var $4=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 1040, ((5281124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt));
      label = 4; break;
    case 4: 
      var $5=$goodhorizon_addr;
      HEAP32[(($5)>>2)]=0;
      var $6=$goodvisible_addr;
      HEAP32[(($6)>>2)]=0;
      var $7=HEAP32[(((((5244620)|0)))>>2)];
      var $inc=((($7)+(1))|0);
      HEAP32[(((((5244620)|0)))>>2)]=$inc;
      var $8=$facet_addr;
      _qh_removefacet($8);
      var $9=$facet_addr;
      _qh_appendfacet($9);
      HEAP32[((((5248964)|0))>>2)]=1;
      var $10=$facet_addr;
      var $11=$10;
      var $bf_field_offs=(($11+76)|0);
      var $12=$bf_field_offs;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 >>> 19;
      var $bf_clear=$14 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$goodvisible_addr;
      var $16=HEAP32[(($15)>>2)];
      var $inc2=((($16)+(1))|0);
      HEAP32[(($15)>>2)]=$inc2;
      label = 6; break;
    case 6: 
      var $17=$facet_addr;
      HEAP32[((((5248960)|0))>>2)]=$17;
      var $18=$facet_addr;
      var $19=$18;
      var $bf_field_offs4=(($19+76)|0);
      var $20=$bf_field_offs4;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & -2049;
      var $23=$22 | 2048;
      HEAP32[(($20)>>2)]=$23;
      var $24=$facet_addr;
      var $f=(($24+28)|0);
      var $replace=$f;
      HEAP32[(($replace)>>2)]=0;
      var $25=HEAP32[((((5247040)|0))>>2)];
      var $cmp5=(($25)|0) >= 4;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$facet_addr;
      _qh_errprint(((5280240)|0), $26, 0, 0, 0);
      label = 8; break;
    case 8: 
      var $27=HEAP32[((((5249156)|0))>>2)];
      var $inc8=((($27)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc8;
      var $28=HEAP32[((((5248960)|0))>>2)];
      $visible=$28;
      label = 9; break;
    case 9: 
      var $29=$visible;
      var $tobool9=(($29)|0)!=0;
      if ($tobool9) { label = 10; break; } else { var $35 = 0;label = 11; break; }
    case 10: 
      var $30=$visible;
      var $31=$30;
      var $bf_field_offs10=(($31+76)|0);
      var $32=$bf_field_offs10;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 11;
      var $bf_clear11=$34 & 1;
      var $tobool12=(($bf_clear11)|0)!=0;
      var $35 = $tobool12;label = 11; break;
    case 11: 
      var $35;
      if ($35) { label = 12; break; } else { label = 53; break; }
    case 12: 
      var $36=$visible;
      var $37=$36;
      var $bf_field_offs13=(($37+76)|0);
      var $38=$bf_field_offs13;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 9;
      var $bf_clear14=$40 & 1;
      var $tobool15=(($bf_clear14)|0)!=0;
      if ($tobool15) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $41=HEAP32[((((5247456)|0))>>2)];
      var $tobool16=(($41)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $42=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($42, 6230, ((5279600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $43=$visible;
      _qh_errexit(5, $43, 0);
      label = 15; break;
    case 15: 
      var $44=HEAP32[((((5249156)|0))>>2)];
      var $45=$visible;
      var $visitid=(($45+68)|0);
      HEAP32[(($visitid)>>2)]=$44;
      $neighbor=0;
      var $46=$visible;
      var $neighbors=(($46+56)|0);
      var $47=HEAP32[(($neighbors)>>2)];
      var $tobool19=(($47)|0)!=0;
      if ($tobool19) { label = 16; break; } else { label = 51; break; }
    case 16: 
      var $48=$visible;
      var $neighbors21=(($48+56)|0);
      var $49=HEAP32[(($neighbors21)>>2)];
      var $e=(($49+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $50=$p;
      $neighborp=$50;
      label = 17; break;
    case 17: 
      var $51=$neighborp;
      var $incdec_ptr=(($51+4)|0);
      $neighborp=$incdec_ptr;
      var $52=HEAP32[(($51)>>2)];
      $neighbor=$52;
      var $tobool23=(($52)|0)!=0;
      if ($tobool23) { label = 18; break; } else { label = 50; break; }
    case 18: 
      var $53=$neighbor;
      var $visitid25=(($53+68)|0);
      var $54=HEAP32[(($visitid25)>>2)];
      var $55=HEAP32[((((5249156)|0))>>2)];
      var $cmp26=(($54)|0)==(($55)|0);
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 17; break;
    case 20: 
      var $56=HEAP32[((((5249156)|0))>>2)];
      var $57=$neighbor;
      var $visitid29=(($57+68)|0);
      HEAP32[(($visitid29)>>2)]=$56;
      var $58=HEAP32[(((((5244252)|0)))>>2)];
      var $inc30=((($58)+(1))|0);
      HEAP32[(((((5244252)|0)))>>2)]=$inc30;
      var $59=$point_addr;
      var $60=$neighbor;
      _qh_distplane($59, $60, $dist);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $62=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp31=$61 > $62;
      if ($cmp31) { label = 21; break; } else { label = 26; break; }
    case 21: 
      var $63=HEAP32[(((((5244620)|0)))>>2)];
      var $inc33=((($63)+(1))|0);
      HEAP32[(((((5244620)|0)))>>2)]=$inc33;
      var $64=$neighbor;
      _qh_removefacet($64);
      var $65=$neighbor;
      _qh_appendfacet($65);
      var $66=$neighbor;
      var $67=$66;
      var $bf_field_offs34=(($67+76)|0);
      var $68=$bf_field_offs34;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & -2049;
      var $71=$70 | 2048;
      HEAP32[(($68)>>2)]=$71;
      var $72=$neighbor;
      var $f35=(($72+28)|0);
      var $replace36=$f35;
      HEAP32[(($replace36)>>2)]=0;
      var $73=HEAP32[((((5248964)|0))>>2)];
      var $inc37=((($73)+(1))|0);
      HEAP32[((((5248964)|0))>>2)]=$inc37;
      var $74=$neighbor;
      var $75=$74;
      var $bf_field_offs38=(($75+76)|0);
      var $76=$bf_field_offs38;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 >>> 19;
      var $bf_clear39=$78 & 1;
      var $tobool40=(($bf_clear39)|0)!=0;
      if ($tobool40) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $79=$goodvisible_addr;
      var $80=HEAP32[(($79)>>2)];
      var $inc42=((($80)+(1))|0);
      HEAP32[(($79)>>2)]=$inc42;
      label = 23; break;
    case 23: 
      var $81=HEAP32[((((5247040)|0))>>2)];
      var $cmp44=(($81)|0) >= 4;
      if ($cmp44) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $82=$neighbor;
      _qh_errprint(((5280240)|0), $82, 0, 0, 0);
      label = 25; break;
    case 25: 
      label = 49; break;
    case 26: 
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$84);
      var $cmp47=$83 > $sub;
      if ($cmp47) { label = 27; break; } else { label = 43; break; }
    case 27: 
      var $85=$neighbor;
      var $86=$85;
      var $bf_field_offs49=(($86+76)|0);
      var $87=$bf_field_offs49;
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -16777217;
      var $90=$89 | 16777216;
      HEAP32[(($87)>>2)]=$90;
      var $91=HEAP32[(((((5243260)|0)))>>2)];
      var $inc50=((($91)+(1))|0);
      HEAP32[(((((5243260)|0)))>>2)]=$inc50;
      _qh_precision(((5278548)|0));
      var $92=$coplanar;
      var $inc51=((($92)+(1))|0);
      $coplanar=$inc51;
      var $93=HEAP32[((((5247084)|0))>>2)];
      var $tobool52=(($93)|0)!=0;
      if ($tobool52) { label = 28; break; } else { label = 40; break; }
    case 28: 
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp54=$94 > 0;
      if ($cmp54) { label = 29; break; } else { label = 36; break; }
    case 29: 
      var $95=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp56=$95 < $96;
      if ($cmp56) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $97=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$97,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 31: 
      var $98=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249076)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249076)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp59=$98 < $99;
      if ($cmp59) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $100=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$100,HEAP32[((((5249076)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249076)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 33; break;
    case 33: 
      var $101=$neighbor;
      var $maxoutside=(($101+8)|0);
      var $102=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp62=$102 < $103;
      if ($cmp62) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $104=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $105=$neighbor;
      var $maxoutside64=(($105+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$104,HEAP32[(($maxoutside64)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside64)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 35; break;
    case 35: 
      label = 39; break;
    case 36: 
      var $106=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $107=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp67=$106 > $107;
      if ($cmp67) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $108=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$108,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $109=HEAP32[((((5247040)|0))>>2)];
      var $cmp72=(($109)|0) >= 2;
      if ($cmp72) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $110=HEAP32[((((5248924)|0))>>2)];
      var $111=$point_addr;
      var $call74=_qh_pointid($111);
      var $112=$neighbor;
      var $id75=(($112+72)|0);
      var $113=HEAP32[(($id75)>>2)];
      var $114=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($110, 2057, ((5277872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call74,HEAP32[(((tempInt)+(4))>>2)]=$113,(HEAPF64[(tempDoublePtr)>>3]=$114,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$115,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 42; break;
    case 42: 
      label = 44; break;
    case 43: 
      var $116=$neighbor;
      var $117=$116;
      var $bf_field_offs78=(($117+76)|0);
      var $118=$bf_field_offs78;
      var $119=HEAP32[(($118)>>2)];
      var $120=$119 & -16777217;
      HEAP32[(($118)>>2)]=$120;
      label = 44; break;
    case 44: 
      var $121=HEAP32[(((((5244572)|0)))>>2)];
      var $inc80=((($121)+(1))|0);
      HEAP32[(((((5244572)|0)))>>2)]=$inc80;
      var $122=$numhorizon;
      var $inc81=((($122)+(1))|0);
      $numhorizon=$inc81;
      var $123=$neighbor;
      var $124=$123;
      var $bf_field_offs82=(($124+76)|0);
      var $125=$bf_field_offs82;
      var $126=HEAP32[(($125)>>2)];
      var $127=$126 >>> 19;
      var $bf_clear83=$127 & 1;
      var $tobool84=(($bf_clear83)|0)!=0;
      if ($tobool84) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $128=$goodhorizon_addr;
      var $129=HEAP32[(($128)>>2)];
      var $inc86=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$inc86;
      label = 46; break;
    case 46: 
      var $130=HEAP32[((((5247040)|0))>>2)];
      var $cmp88=(($130)|0) >= 4;
      if ($cmp88) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $131=$neighbor;
      _qh_errprint(((5277112)|0), $131, 0, 0, 0);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 17; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $132=$visible;
      var $next=(($132+44)|0);
      var $133=HEAP32[(($next)>>2)];
      $visible=$133;
      label = 9; break;
    case 53: 
      var $134=$numhorizon;
      var $tobool94=(($134)|0)!=0;
      if ($tobool94) { label = 55; break; } else { label = 54; break; }
    case 54: 
      _qh_precision(((5276624)|0));
      var $135=HEAP32[((((5248924)|0))>>2)];
      var $136=$point_addr;
      var $call96=_qh_pointid($136);
      _qh_fprintf($135, 6168, ((5276196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call96,tempInt));
      var $137=HEAP32[((((5248944)|0))>>2)];
      _qh_printfacetlist($137, 0, 1);
      _qh_errexit(3, 0, 0);
      label = 55; break;
    case 55: 
      var $138=HEAP32[((((5247040)|0))>>2)];
      var $cmp98=(($138)|0) >= 1;
      if ($cmp98) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $139=HEAP32[((((5248924)|0))>>2)];
      var $140=$numhorizon;
      var $141=$goodhorizon_addr;
      var $142=HEAP32[(($141)>>2)];
      var $143=HEAP32[((((5248964)|0))>>2)];
      var $144=$goodvisible_addr;
      var $145=HEAP32[(($144)>>2)];
      var $146=$coplanar;
      _qh_fprintf($139, 1041, ((5275624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$140,HEAP32[(((tempInt)+(4))>>2)]=$142,HEAP32[(((tempInt)+(8))>>2)]=$143,HEAP32[(((tempInt)+(12))>>2)]=$145,HEAP32[(((tempInt)+(16))>>2)]=$146,tempInt));
      label = 57; break;
    case 57: 
      var $147=HEAP32[((((5247040)|0))>>2)];
      var $cmp101=(($147)|0) >= 4;
      if ($cmp101) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $148=HEAP32[((((5248996)|0))>>2)];
      var $cmp103=(($148)|0) < 50;
      if ($cmp103) { label = 59; break; } else { label = 60; break; }
    case 59: 
      _qh_printlists();
      label = 60; break;
    case 60: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findhorizon["X"]=1;

function _qh_nextfurthest($visible) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $visible_addr;
      var $facet;
      var $size;
      var $idx;
      var $randr;
      var $dist;
      var $furthest;
      var $outcoplanar;
      $visible_addr=$visible;
      label = 3; break;
    case 3: 
      var $0=HEAP32[((((5248952)|0))>>2)];
      $facet=$0;
      var $1=HEAP32[((((5248948)|0))>>2)];
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { label = 4; break; } else { label = 61; break; }
    case 4: 
      var $2=$facet;
      var $outsideset=(($2+60)|0);
      var $3=HEAP32[(($outsideset)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      HEAP32[((((5248952)|0))>>2)]=$5;
      label = 3; break;
    case 6: 
      var $6=$facet;
      var $outsideset1=(($6+60)|0);
      var $7=HEAP32[(($outsideset1)>>2)];
      var $maxsize=(($7)|0);
      var $8=HEAP32[(($maxsize)>>2)];
      var $9=$facet;
      var $outsideset2=(($9+60)|0);
      var $10=HEAP32[(($outsideset2)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e+($8<<2))|0);
      var $i=$arrayidx;
      var $11=HEAP32[(($i)>>2)];
      $size=$11;
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$size;
      var $dec=((($12)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 9; break;
    case 8: 
      var $13=$facet;
      var $outsideset4=(($13+60)|0);
      var $14=HEAP32[(($outsideset4)>>2)];
      var $maxsize5=(($14)|0);
      var $15=HEAP32[(($maxsize5)>>2)];
      $size=$15;
      var $cond = $15;label = 9; break;
    case 9: 
      var $cond;
      var $16=$size;
      var $tobool6=(($16)|0)!=0;
      if ($tobool6) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $17=$facet;
      var $outsideset8=(($17+60)|0);
      _qh_setfree($outsideset8);
      var $18=$facet;
      var $next9=(($18+44)|0);
      var $19=HEAP32[(($next9)>>2)];
      HEAP32[((((5248952)|0))>>2)]=$19;
      label = 3; break;
    case 11: 
      var $20=HEAP32[((((5248708)|0))>>2)];
      var $tobool11=(($20)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $21=$facet;
      var $22=$21;
      var $bf_field_offs=(($22+76)|0);
      var $23=$bf_field_offs;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 18;
      var $bf_clear=$25 & 1;
      var $tobool13=(($bf_clear)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$facet;
      _qh_furthestout($26);
      label = 14; break;
    case 14: 
      var $27=$facet;
      var $outsideset16=(($27+60)|0);
      var $28=HEAP32[(($outsideset16)>>2)];
      var $call=_qh_setlast($28);
      var $29=$call;
      $furthest=$29;
      var $30=$facet;
      var $furthestdist=(($30)|0);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($furthestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($furthestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dist=$31;
      var $32=$dist;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp17=$32 < $33;
      if ($cmp17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $34=$facet;
      var $next19=(($34+44)|0);
      var $35=HEAP32[(($next19)>>2)];
      HEAP32[((((5248952)|0))>>2)]=$35;
      label = 3; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $36=HEAP32[((((5247368)|0))>>2)];
      var $tobool22=(($36)|0)!=0;
      if ($tobool22) { label = 22; break; } else { label = 18; break; }
    case 18: 
      var $37=HEAP32[((((5247472)|0))>>2)];
      var $tobool23=(($37)|0)!=0;
      if ($tobool23) { label = 22; break; } else { label = 19; break; }
    case 19: 
      var $38=HEAP32[((((5247136)|0))>>2)];
      var $tobool25=(($38)|0)!=0;
      if ($tobool25) { label = 20; break; } else { label = 21; break; }
    case 20: 
      _qh_furthestnext();
      var $39=HEAP32[((((5248952)|0))>>2)];
      $facet=$39;
      label = 21; break;
    case 21: 
      var $40=$facet;
      var $41=$visible_addr;
      HEAP32[(($41)>>2)]=$40;
      var $42=$facet;
      var $outsideset28=(($42+60)|0);
      var $43=HEAP32[(($outsideset28)>>2)];
      var $call29=_qh_setdellast($43);
      var $44=$call29;
      $retval=$44;
      label = 62; break;
    case 22: 
      var $45=HEAP32[((((5247368)|0))>>2)];
      var $tobool31=(($45)|0)!=0;
      if ($tobool31) { label = 23; break; } else { label = 55; break; }
    case 23: 
      $outcoplanar=0;
      var $46=HEAP32[((((5248708)|0))>>2)];
      var $tobool33=(($46)|0)!=0;
      if ($tobool33) { label = 24; break; } else { label = 35; break; }
    case 24: 
      var $47=HEAP32[((((5248944)|0))>>2)];
      $facet=$47;
      label = 25; break;
    case 25: 
      var $48=$facet;
      var $tobool35=(($48)|0)!=0;
      if ($tobool35) { label = 26; break; } else { var $51 = 0;label = 27; break; }
    case 26: 
      var $49=$facet;
      var $next36=(($49+44)|0);
      var $50=HEAP32[(($next36)>>2)];
      var $tobool37=(($50)|0)!=0;
      var $51 = $tobool37;label = 27; break;
    case 27: 
      var $51;
      if ($51) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $52=$facet;
      var $53=HEAP32[((((5248952)|0))>>2)];
      var $cmp38=(($52)|0)==(($53)|0);
      if ($cmp38) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 34; break;
    case 30: 
      var $54=$facet;
      var $outsideset41=(($54+60)|0);
      var $55=HEAP32[(($outsideset41)>>2)];
      var $tobool42=(($55)|0)!=0;
      if ($tobool42) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $56=$facet;
      var $outsideset44=(($56+60)|0);
      var $57=HEAP32[(($outsideset44)>>2)];
      var $call45=_qh_setsize($57);
      var $58=$outcoplanar;
      var $add=((($58)+($call45))|0);
      $outcoplanar=$add;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $59=$facet;
      var $next47=(($59+44)|0);
      var $60=HEAP32[(($next47)>>2)];
      $facet=$60;
      label = 25; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $call49=_qh_rand();
      var $conv=(($call49)|0);
      $randr=$conv;
      var $61=$randr;
      var $div=($61)/(2147483647);
      $randr=$div;
      var $62=HEAP32[((((5249004)|0))>>2)];
      var $63=$outcoplanar;
      var $sub=((($62)-($63))|0);
      var $conv50=(($sub)|0);
      var $64=$randr;
      var $mul=($conv50)*($64);
      var $call51=Math.floor($mul);
      var $conv52=(($call51)&-1);
      $idx=$conv52;
      var $65=HEAP32[((((5248952)|0))>>2)];
      var $tobool53=(($65)|0)!=0;
      if ($tobool53) { label = 36; break; } else { label = 54; break; }
    case 36: 
      var $66=HEAP32[((((5248952)|0))>>2)];
      $facet=$66;
      label = 37; break;
    case 37: 
      var $67=$facet;
      var $tobool56=(($67)|0)!=0;
      if ($tobool56) { label = 38; break; } else { var $70 = 0;label = 39; break; }
    case 38: 
      var $68=$facet;
      var $next58=(($68+44)|0);
      var $69=HEAP32[(($next58)>>2)];
      var $tobool59=(($69)|0)!=0;
      var $70 = $tobool59;label = 39; break;
    case 39: 
      var $70;
      if ($70) { label = 40; break; } else { label = 53; break; }
    case 40: 
      var $71=$facet;
      var $outsideset62=(($71+60)|0);
      var $72=HEAP32[(($outsideset62)>>2)];
      var $tobool63=(($72)|0)!=0;
      if ($tobool63) { label = 41; break; } else { label = 51; break; }
    case 41: 
      var $73=$facet;
      var $outsideset65=(($73+60)|0);
      var $74=HEAP32[(($outsideset65)>>2)];
      var $maxsize66=(($74)|0);
      var $75=HEAP32[(($maxsize66)>>2)];
      var $76=$facet;
      var $outsideset67=(($76+60)|0);
      var $77=HEAP32[(($outsideset67)>>2)];
      var $e68=(($77+4)|0);
      var $arrayidx69=(($e68+($75<<2))|0);
      var $i70=$arrayidx69;
      var $78=HEAP32[(($i70)>>2)];
      $size=$78;
      var $tobool71=(($78)|0)!=0;
      if ($tobool71) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $79=$size;
      var $dec73=((($79)-(1))|0);
      $size=$dec73;
      var $cond78 = $dec73;label = 44; break;
    case 43: 
      var $80=$facet;
      var $outsideset75=(($80+60)|0);
      var $81=HEAP32[(($outsideset75)>>2)];
      var $maxsize76=(($81)|0);
      var $82=HEAP32[(($maxsize76)>>2)];
      $size=$82;
      var $cond78 = $82;label = 44; break;
    case 44: 
      var $cond78;
      var $83=$size;
      var $tobool79=(($83)|0)!=0;
      if ($tobool79) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $84=$facet;
      var $outsideset81=(($84+60)|0);
      _qh_setfree($outsideset81);
      label = 50; break;
    case 46: 
      var $85=$size;
      var $86=$idx;
      var $cmp82=(($85)|0) > (($86)|0);
      if ($cmp82) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $87=$facet;
      var $88=$visible_addr;
      HEAP32[(($88)>>2)]=$87;
      var $89=$facet;
      var $outsideset85=(($89+60)|0);
      var $90=HEAP32[(($outsideset85)>>2)];
      var $91=$idx;
      var $call86=_qh_setdelnth($90, $91);
      var $92=$call86;
      $retval=$92;
      label = 62; break;
    case 48: 
      var $93=$size;
      var $94=$idx;
      var $sub88=((($94)-($93))|0);
      $idx=$sub88;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $95=$facet;
      var $next93=(($95+44)|0);
      var $96=HEAP32[(($next93)>>2)];
      $facet=$96;
      label = 37; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $97=HEAP32[((((5248924)|0))>>2)];
      var $98=HEAP32[((((5249004)|0))>>2)];
      var $99=$idx;
      var $add96=((($99)+(1))|0);
      var $100=$randr;
      _qh_fprintf($97, 6169, ((5274804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$98,HEAP32[(((tempInt)+(4))>>2)]=$add96,(HEAPF64[(tempDoublePtr)>>3]=$100,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(5, 0, 0);
      label = 60; break;
    case 55: 
      var $101=HEAP32[((((5248948)|0))>>2)];
      var $previous=(($101+40)|0);
      var $102=HEAP32[(($previous)>>2)];
      $facet=$102;
      var $103=$facet;
      var $outsideset98=(($103+60)|0);
      var $104=HEAP32[(($outsideset98)>>2)];
      var $call99=_qh_setdellast($104);
      var $105=$call99;
      $furthest=$105;
      var $tobool100=(($105)|0)!=0;
      if ($tobool100) { label = 59; break; } else { label = 56; break; }
    case 56: 
      var $106=$facet;
      var $outsideset102=(($106+60)|0);
      var $107=HEAP32[(($outsideset102)>>2)];
      var $tobool103=(($107)|0)!=0;
      if ($tobool103) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $108=$facet;
      var $outsideset105=(($108+60)|0);
      _qh_setfree($outsideset105);
      label = 58; break;
    case 58: 
      var $109=$facet;
      _qh_removefacet($109);
      var $110=$facet;
      _qh_prependfacet($110, ((5248944)|0));
      label = 3; break;
    case 59: 
      var $111=$facet;
      var $112=$visible_addr;
      HEAP32[(($112)>>2)]=$111;
      var $113=$furthest;
      $retval=$113;
      label = 62; break;
    case 60: 
      label = 3; break;
    case 61: 
      $retval=0;
      label = 62; break;
    case 62: 
      var $114=$retval;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + label);
  }

}
_qh_nextfurthest["X"]=1;

function _qh_errexit2($exitcode, $facet, $otherfacet) {
  var label = 0;


  var $exitcode_addr;
  var $facet_addr;
  var $otherfacet_addr;
  $exitcode_addr=$exitcode;
  $facet_addr=$facet;
  $otherfacet_addr=$otherfacet;
  var $0=$facet_addr;
  var $1=$otherfacet_addr;
  _qh_errprint(((5294456)|0), $0, $1, 0, 0);
  var $2=$exitcode_addr;
  _qh_errexit($2, 0, 0);

  return;
}


function _qh_precision($reason) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $reason_addr;
      $reason_addr=$reason;
      var $0=HEAP32[((((5249028)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=HEAP32[((((5247144)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 10; break; } else { label = 4; break; }
    case 4: 
      var $2=HEAP32[((((5247076)|0))>>2)];
      var $tobool3=(($2)|0)!=0;
      if ($tobool3) { label = 10; break; } else { label = 5; break; }
    case 5: 
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$3 < 8.988465674311579e+307;
      if ($cmp) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=HEAP32[((((5247040)|0))>>2)];
      var $tobool5=(($4)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      var $6=$reason_addr;
      _qh_fprintf($5, 26, ((5267180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
      label = 8; break;
    case 8: 
      _longjmp(((5248834)|0), 3);
      throw "Reached an unreachable!"
    case 9: 
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_partitionall($vertices, $points, $numpoints) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $points_addr;
      var $numpoints_addr;
      var $pointset=__stackBase__;
      var $vertex;
      var $vertexp;
      var $point;
      var $pointp;
      var $bestpoint;
      var $size;
      var $point_i;
      var $point_n;
      var $point_end;
      var $remaining;
      var $i;
      var $id;
      var $facet;
      var $bestdist;
      var $dist=(__stackBase__)+(4);
      var $distoutside;
      $vertices_addr=$vertices;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      $bestdist=-1.7976931348623157e+308;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1042, ((5274212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$numpoints_addr;
      var $call=_qh_settemp($2);
      HEAP32[(($pointset)>>2)]=$call;
      HEAP32[((((5249004)|0))>>2)]=0;
      var $3=HEAP32[(($pointset)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $pointp=$4;
      var $5=$numpoints_addr;
      $i=$5;
      var $6=$points_addr;
      $point=$6;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $dec=((($7)-(1))|0);
      $i=$dec;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=$point;
      var $9=$pointp;
      var $incdec_ptr=(($9+4)|0);
      $pointp=$incdec_ptr;
      HEAP32[(($9)>>2)]=$8;
      label = 7; break;
    case 7: 
      var $10=HEAP32[((((5247508)|0))>>2)];
      var $11=$point;
      var $add_ptr=(($11+($10<<3))|0);
      $point=$add_ptr;
      label = 5; break;
    case 8: 
      var $12=HEAP32[(($pointset)>>2)];
      var $13=$numpoints_addr;
      _qh_settruncate($12, $13);
      $vertex=0;
      var $14=$vertices_addr;
      var $tobool1=(($14)|0)!=0;
      if ($tobool1) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $15=$vertices_addr;
      var $e3=(($15+4)|0);
      var $arrayidx4=(($e3)|0);
      var $p5=$arrayidx4;
      var $16=$p5;
      $vertexp=$16;
      label = 10; break;
    case 10: 
      var $17=$vertexp;
      var $incdec_ptr7=(($17+4)|0);
      $vertexp=$incdec_ptr7;
      var $18=HEAP32[(($17)>>2)];
      $vertex=$18;
      var $tobool8=(($18)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $19=$vertex;
      var $point10=(($19+8)|0);
      var $20=HEAP32[(($point10)>>2)];
      var $call11=_qh_pointid($20);
      $id=$call11;
      var $cmp12=(($call11)|0) >= 0;
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$id;
      var $22=HEAP32[(($pointset)>>2)];
      var $e14=(($22+4)|0);
      var $arrayidx15=(($e14+($21<<2))|0);
      var $p16=$arrayidx15;
      HEAP32[(($p16)>>2)]=0;
      label = 13; break;
    case 13: 
      label = 10; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $23=HEAP32[((((5247020)|0))>>2)];
      var $call20=_qh_pointid($23);
      $id=$call20;
      var $24=$id;
      var $cmp21=(($24)|0) >= 0;
      if ($cmp21) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $25=HEAP32[((((5247412)|0))>>2)];
      var $sub=((($25)-(1))|0);
      var $26=$id;
      var $cmp22=(($sub)|0)!=(($26)|0);
      if ($cmp22) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $27=HEAP32[((((5247416)|0))>>2)];
      var $sub24=(((-$27))|0);
      var $sub25=((($sub24)-(1))|0);
      var $28=$id;
      var $cmp26=(($sub25)|0)!=(($28)|0);
      if ($cmp26) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $29=$id;
      var $30=HEAP32[(($pointset)>>2)];
      var $e28=(($30+4)|0);
      var $arrayidx29=(($e28+($29<<2))|0);
      var $p30=$arrayidx29;
      HEAP32[(($p30)>>2)]=0;
      label = 19; break;
    case 19: 
      var $31=HEAP32[((((5247032)|0))>>2)];
      var $tobool32=(($31)|0)!=0;
      if ($tobool32) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $32=HEAP32[((((5247128)|0))>>2)];
      var $tobool34=(($32)|0)!=0;
      if ($tobool34) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $33=HEAP32[((((5247084)|0))>>2)];
      var $tobool36=(($33)|0)!=0;
      if ($tobool36) { label = 25; break; } else { label = 22; break; }
    case 22: 
      var $34=HEAP32[((((5247032)|0))>>2)];
      var $call38=_qh_pointid($34);
      $id=$call38;
      var $cmp39=(($call38)|0) >= 0;
      if ($cmp39) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $35=$id;
      var $36=HEAP32[(($pointset)>>2)];
      var $e41=(($36+4)|0);
      var $arrayidx42=(($e41+($35<<2))|0);
      var $p43=$arrayidx42;
      HEAP32[(($p43)>>2)]=0;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $37=HEAP32[((((5246968)|0))>>2)];
      var $tobool46=(($37)|0)!=0;
      if ($tobool46) { label = 56; break; } else { label = 26; break; }
    case 26: 
      var $38=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp48=(($38)|0) > 50;
      var $cond=$cmp48 ? 2 : 1;
      var $conv=(($cond)|0);
      var $39=HEAP32[((((5247084)|0))>>2)];
      var $tobool49=(($39)|0)!=0;
      var $cond50=$tobool49 ? 2 : 1;
      var $conv51=(($cond50)|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($conv51)*($40);
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp52=$mul < $41;
      if ($cmp52) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond58 = $42;label = 29; break;
    case 28: 
      var $43=HEAP32[((((5247084)|0))>>2)];
      var $tobool54=(($43)|0)!=0;
      var $cond55=$tobool54 ? 2 : 1;
      var $conv56=(($cond55)|0);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul57=($conv56)*($44);
      var $cond58 = $mul57;label = 29; break;
    case 29: 
      var $cond58;
      var $mul59=($conv)*($cond58);
      $distoutside=$mul59;
      var $45=HEAP32[((((5247516)|0))>>2)];
      var $46=HEAP32[((((5247508)|0))>>2)];
      var $sub60=((($45)-($46))|0);
      var $sub61=((($sub60)-(1))|0);
      HEAP32[(((((5244596)|0)))>>2)]=$sub61;
      var $47=HEAP32[((((5248996)|0))>>2)];
      $remaining=$47;
      var $48=$numpoints_addr;
      $point_end=$48;
      var $49=HEAP32[((((5248944)|0))>>2)];
      $facet=$49;
      label = 30; break;
    case 30: 
      var $50=$facet;
      var $tobool63=(($50)|0)!=0;
      if ($tobool63) { label = 31; break; } else { var $53 = 0;label = 32; break; }
    case 31: 
      var $51=$facet;
      var $next=(($51+44)|0);
      var $52=HEAP32[(($next)>>2)];
      var $tobool64=(($52)|0)!=0;
      var $53 = $tobool64;label = 32; break;
    case 32: 
      var $53;
      if ($53) { label = 33; break; } else { label = 55; break; }
    case 33: 
      var $54=$point_end;
      var $55=$remaining;
      var $dec66=((($55)-(1))|0);
      $remaining=$dec66;
      var $div=((((($54)|0))/((($55)|0)))&-1);
      var $add=((($div)+(100))|0);
      $size=$add;
      var $56=$size;
      var $call67=_qh_setnew($56);
      var $57=$facet;
      var $outsideset=(($57+60)|0);
      HEAP32[(($outsideset)>>2)]=$call67;
      $bestpoint=0;
      $point_end=0;
      $point=0;
      var $58=HEAP32[(($pointset)>>2)];
      var $tobool68=(($58)|0)!=0;
      if ($tobool68) { label = 34; break; } else { label = 50; break; }
    case 34: 
      $point_i=0;
      var $59=HEAP32[(($pointset)>>2)];
      var $e70=(($59+4)|0);
      var $arrayidx71=(($e70)|0);
      var $p72=$arrayidx71;
      var $60=HEAP32[(($p72)>>2)];
      var $61=$60;
      $point=$61;
      var $62=HEAP32[(($pointset)>>2)];
      var $call73=_qh_setsize($62);
      $point_n=$call73;
      label = 35; break;
    case 35: 
      var $63=$point_i;
      var $64=$point_n;
      var $cmp75=(($63)|0) < (($64)|0);
      if ($cmp75) { label = 36; break; } else { label = 49; break; }
    case 36: 
      var $65=$point;
      var $tobool78=(($65)|0)!=0;
      if ($tobool78) { label = 37; break; } else { label = 47; break; }
    case 37: 
      var $66=HEAP32[(((((5244324)|0)))>>2)];
      var $inc=((($66)+(1))|0);
      HEAP32[(((((5244324)|0)))>>2)]=$inc;
      var $67=$point;
      var $68=$facet;
      _qh_distplane($67, $68, $dist);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $70=$distoutside;
      var $cmp80=$69 < $70;
      if ($cmp80) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $71=$point;
      var $72=$71;
      var $73=$point_end;
      var $inc83=((($73)+(1))|0);
      $point_end=$inc83;
      var $74=HEAP32[(($pointset)>>2)];
      var $e84=(($74+4)|0);
      var $arrayidx85=(($e84+($73<<2))|0);
      var $p86=$arrayidx85;
      HEAP32[(($p86)>>2)]=$72;
      label = 46; break;
    case 39: 
      var $75=HEAP32[((((5249004)|0))>>2)];
      var $inc87=((($75)+(1))|0);
      HEAP32[((((5249004)|0))>>2)]=$inc87;
      var $76=$bestpoint;
      var $tobool88=(($76)|0)!=0;
      if ($tobool88) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $77=$point;
      $bestpoint=$77;
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestdist=$78;
      label = 45; break;
    case 41: 
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $80=$bestdist;
      var $cmp91=$79 > $80;
      if ($cmp91) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $81=$facet;
      var $outsideset94=(($81+60)|0);
      var $82=$bestpoint;
      var $83=$82;
      _qh_setappend($outsideset94, $83);
      var $84=$point;
      $bestpoint=$84;
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestdist=$85;
      label = 44; break;
    case 43: 
      var $86=$facet;
      var $outsideset96=(($86+60)|0);
      var $87=$point;
      var $88=$87;
      _qh_setappend($outsideset96, $88);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $89=$point_i;
      var $inc102=((($89)+(1))|0);
      $point_i=$inc102;
      var $90=HEAP32[(($pointset)>>2)];
      var $e103=(($90+4)|0);
      var $arrayidx104=(($e103+($inc102<<2))|0);
      var $p105=$arrayidx104;
      var $91=HEAP32[(($p105)>>2)];
      var $92=$91;
      $point=$92;
      label = 35; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $93=$bestpoint;
      var $tobool108=(($93)|0)!=0;
      if ($tobool108) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $94=$facet;
      var $outsideset110=(($94+60)|0);
      var $95=$bestpoint;
      var $96=$95;
      _qh_setappend($outsideset110, $96);
      var $97=$bestdist;
      var $98=$facet;
      var $furthestdist=(($98)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$97,HEAP32[(($furthestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($furthestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 53; break;
    case 52: 
      var $99=$facet;
      var $outsideset112=(($99+60)|0);
      _qh_setfree($outsideset112);
      label = 53; break;
    case 53: 
      var $100=HEAP32[(($pointset)>>2)];
      var $101=$point_end;
      _qh_settruncate($100, $101);
      label = 54; break;
    case 54: 
      var $102=$facet;
      var $next115=(($102+44)|0);
      var $103=HEAP32[(($next115)>>2)];
      $facet=$103;
      label = 30; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $104=HEAP32[((((5246968)|0))>>2)];
      var $tobool118=(($104)|0)!=0;
      if ($tobool118) { label = 60; break; } else { label = 57; break; }
    case 57: 
      var $105=HEAP32[((((5247084)|0))>>2)];
      var $tobool119=(($105)|0)!=0;
      if ($tobool119) { label = 60; break; } else { label = 58; break; }
    case 58: 
      var $106=HEAP32[((((5247048)|0))>>2)];
      var $tobool121=(($106)|0)!=0;
      if ($tobool121) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $107=HEAP32[((((5247052)|0))>>2)];
      var $tobool123=(($107)|0)!=0;
      if ($tobool123) { label = 60; break; } else { label = 69; break; }
    case 60: 
      HEAP32[((((5249096)|0))>>2)]=1;
      $point=0;
      var $108=HEAP32[(($pointset)>>2)];
      var $tobool125=(($108)|0)!=0;
      if ($tobool125) { label = 61; break; } else { label = 68; break; }
    case 61: 
      $point_i=0;
      var $109=HEAP32[(($pointset)>>2)];
      var $e127=(($109+4)|0);
      var $arrayidx128=(($e127)|0);
      var $p129=$arrayidx128;
      var $110=HEAP32[(($p129)>>2)];
      var $111=$110;
      $point=$111;
      var $112=HEAP32[(($pointset)>>2)];
      var $call130=_qh_setsize($112);
      $point_n=$call130;
      label = 62; break;
    case 62: 
      var $113=$point_i;
      var $114=$point_n;
      var $cmp132=(($113)|0) < (($114)|0);
      if ($cmp132) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $115=$point;
      var $tobool135=(($115)|0)!=0;
      if ($tobool135) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $116=$point;
      var $117=HEAP32[((((5248944)|0))>>2)];
      _qh_partitionpoint($116, $117);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $118=$point_i;
      var $inc139=((($118)+(1))|0);
      $point_i=$inc139;
      var $119=HEAP32[(($pointset)>>2)];
      var $e140=(($119+4)|0);
      var $arrayidx141=(($e140+($inc139<<2))|0);
      var $p142=$arrayidx141;
      var $120=HEAP32[(($p142)>>2)];
      var $121=$120;
      $point=$121;
      label = 62; break;
    case 67: 
      label = 68; break;
    case 68: 
      HEAP32[((((5249096)|0))>>2)]=0;
      label = 69; break;
    case 69: 
      var $122=HEAP32[(((((5244316)|0)))>>2)];
      var $123=HEAP32[(((((5244324)|0)))>>2)];
      var $add146=((($123)+($122))|0);
      HEAP32[(((((5244324)|0)))>>2)]=$add146;
      HEAP32[(((((5244316)|0)))>>2)]=0;
      _qh_settempfree($pointset);
      var $124=HEAP32[((((5247040)|0))>>2)];
      var $cmp147=(($124)|0) >= 4;
      if ($cmp147) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $125=HEAP32[((((5248944)|0))>>2)];
      _qh_printfacetlist($125, 0, 1);
      label = 71; break;
    case 71: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_partitionall["X"]=1;

function _qh_partitionpoint($point, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $facet_addr;
      var $bestdist=__stackBase__;
      var $isoutside=(__stackBase__)+(8);
      var $bestfacet;
      var $numpart=(__stackBase__)+(12);
      $point_addr=$point;
      $facet_addr=$facet;
      var $0=HEAP32[((((5249096)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$point_addr;
      var $2=$facet_addr;
      var $3=HEAP32[((((5246968)|0))>>2)];
      var $call=_qh_findbestnew($1, $2, $bestdist, $3, $isoutside, $numpart);
      $bestfacet=$call;
      label = 5; break;
    case 4: 
      var $4=$point_addr;
      var $5=$facet_addr;
      var $6=HEAP32[((((5246968)|0))>>2)];
      var $call1=_qh_findbest($4, $5, $6, 1, 0, $bestdist, $isoutside, $numpart);
      $bestfacet=$call1;
      label = 5; break;
    case 5: 
      var $7=HEAP32[(((((5244596)|0)))>>2)];
      var $inc=((($7)+(1))|0);
      HEAP32[(((((5244596)|0)))>>2)]=$inc;
      var $8=HEAP32[(($numpart)>>2)];
      var $9=HEAP32[(((((5244316)|0)))>>2)];
      var $add=((($9)+($8))|0);
      HEAP32[(((((5244316)|0)))>>2)]=$add;
      var $10=HEAP32[((((5248708)|0))>>2)];
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 18; break; }
    case 6: 
      var $11=HEAP32[((((5247000)|0))>>2)];
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $12=HEAP32[(($isoutside)>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$14);
      var $cmp=$13 >= $sub;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _qh_precision(((5270196)|0));
      label = 10; break;
    case 10: 
      var $15=HEAP32[((((5247504)|0))>>2)];
      var $tobool9=(($15)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248716)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248716)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub11=(-$17);
      var $cmp12=$16 >= $sub11;
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      HEAP32[(($isoutside)>>2)]=1;
      label = 13; break;
    case 13: 
      label = 17; break;
    case 14: 
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub16=(-$19);
      var $cmp17=$18 >= $sub16;
      if ($cmp17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      HEAP32[(($isoutside)>>2)]=1;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $20=HEAP32[(($isoutside)>>2)];
      var $tobool22=(($20)|0)!=0;
      if ($tobool22) { label = 19; break; } else { label = 31; break; }
    case 19: 
      var $21=$bestfacet;
      var $outsideset=(($21+60)|0);
      var $22=HEAP32[(($outsideset)>>2)];
      var $tobool24=(($22)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $23=$bestfacet;
      var $outsideset25=(($23+60)|0);
      var $24=HEAP32[(($outsideset25)>>2)];
      var $call26=_qh_setlast($24);
      var $tobool27=(($call26)|0)!=0;
      if ($tobool27) { label = 24; break; } else { label = 21; break; }
    case 21: 
      var $25=$bestfacet;
      var $outsideset29=(($25+60)|0);
      var $26=$point_addr;
      var $27=$26;
      _qh_setappend($outsideset29, $27);
      var $28=$bestfacet;
      var $29=$28;
      var $bf_field_offs=(($29+76)|0);
      var $30=$bf_field_offs;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 >>> 10;
      var $bf_clear=$32 & 1;
      var $tobool30=(($bf_clear)|0)!=0;
      if ($tobool30) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $33=$bestfacet;
      _qh_removefacet($33);
      var $34=$bestfacet;
      _qh_appendfacet($34);
      label = 23; break;
    case 23: 
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=$bestfacet;
      var $furthestdist=(($36)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(($furthestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($furthestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 28; break;
    case 24: 
      var $37=$bestfacet;
      var $furthestdist34=(($37)|0);
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($furthestdist34)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($furthestdist34)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp35=$38 < $39;
      if ($cmp35) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $40=$bestfacet;
      var $outsideset37=(($40+60)|0);
      var $41=$point_addr;
      var $42=$41;
      _qh_setappend($outsideset37, $42);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $44=$bestfacet;
      var $furthestdist38=(($44)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[(($furthestdist38)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($furthestdist38)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 27; break;
    case 26: 
      var $45=$bestfacet;
      var $outsideset40=(($45+60)|0);
      var $46=$point_addr;
      var $47=$46;
      _qh_setappend2ndlast($outsideset40, $47);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $48=HEAP32[((((5249004)|0))>>2)];
      var $inc43=((($48)+(1))|0);
      HEAP32[((((5249004)|0))>>2)]=$inc43;
      var $49=HEAP32[((((5247040)|0))>>2)];
      var $cmp44=(($49)|0) >= 4;
      if ($cmp44) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $50=HEAP32[((((5248924)|0))>>2)];
      var $51=$point_addr;
      var $call46=_qh_pointid($51);
      var $52=$bestfacet;
      var $id=(($52+72)|0);
      var $53=HEAP32[(($id)>>2)];
      var $54=$bestfacet;
      var $55=$54;
      var $bf_field_offs47=(($55+76)|0);
      var $56=$bf_field_offs47;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 10;
      var $bf_clear48=$58 & 1;
      _qh_fprintf($50, 4065, ((5269296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call46,HEAP32[(((tempInt)+(4))>>2)]=$53,HEAP32[(((tempInt)+(8))>>2)]=$bf_clear48,tempInt));
      label = 30; break;
    case 30: 
      label = 52; break;
    case 31: 
      var $59=HEAP32[((((5247000)|0))>>2)];
      var $tobool51=(($59)|0)!=0;
      if ($tobool51) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub53=(-$61);
      var $cmp54=$60 >= $sub53;
      if ($cmp54) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $62=HEAP32[(((((5243276)|0)))>>2)];
      var $inc56=((($62)+(1))|0);
      HEAP32[(((((5243276)|0)))>>2)]=$inc56;
      var $63=HEAP32[((((5247000)|0))>>2)];
      var $tobool57=(($63)|0)!=0;
      if ($tobool57) { label = 34; break; } else { label = 35; break; }
    case 34: 
      _qh_precision(((5268496)|0));
      label = 35; break;
    case 35: 
      var $64=HEAP32[((((5247048)|0))>>2)];
      var $65=HEAP32[((((5247504)|0))>>2)];
      var $add60=((($64)+($65))|0);
      var $tobool61=(($add60)|0)!=0;
      if ($tobool61) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $66=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp63=$66 > $67;
      if ($cmp63) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $68=$point_addr;
      var $69=$bestfacet;
      _qh_partitioncoplanar($68, $69, $bestdist);
      label = 41; break;
    case 38: 
      var $70=HEAP32[((((5247040)|0))>>2)];
      var $cmp66=(($70)|0) >= 4;
      if ($cmp66) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $71=HEAP32[((((5248924)|0))>>2)];
      var $72=$point_addr;
      var $call68=_qh_pointid($72);
      var $73=$bestfacet;
      var $id69=(($73+72)|0);
      var $74=HEAP32[(($id69)>>2)];
      _qh_fprintf($71, 4066, ((5268264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call68,HEAP32[(((tempInt)+(4))>>2)]=$74,tempInt));
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 51; break;
    case 42: 
      var $75=HEAP32[((((5247504)|0))>>2)];
      var $tobool73=(($75)|0)!=0;
      if ($tobool73) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $77=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248716)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248716)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub75=(-$77);
      var $cmp76=$76 > $sub75;
      if ($cmp76) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $78=HEAP32[(((((5244332)|0)))>>2)];
      var $inc78=((($78)+(1))|0);
      HEAP32[(((((5244332)|0)))>>2)]=$inc78;
      var $79=$point_addr;
      var $80=$bestfacet;
      _qh_partitioncoplanar($79, $80, $bestdist);
      label = 50; break;
    case 45: 
      var $81=HEAP32[(((((5244308)|0)))>>2)];
      var $inc80=((($81)+(1))|0);
      HEAP32[(((((5244308)|0)))>>2)]=$inc80;
      var $82=HEAP32[((((5247040)|0))>>2)];
      var $cmp81=(($82)|0) >= 4;
      if ($cmp81) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $83=HEAP32[((((5248924)|0))>>2)];
      var $84=$point_addr;
      var $call83=_qh_pointid($84);
      var $85=$bestfacet;
      var $id84=(($85+72)|0);
      var $86=HEAP32[(($id84)>>2)];
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($bestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($bestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($83, 4067, ((5268024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call83,HEAP32[(((tempInt)+(4))>>2)]=$86,(HEAPF64[(tempDoublePtr)>>3]=$87,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 47; break;
    case 47: 
      var $88=HEAP32[((((5247052)|0))>>2)];
      var $tobool86=(($88)|0)!=0;
      if ($tobool86) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $89=$point_addr;
      var $90=$bestfacet;
      _qh_partitioncoplanar($89, $90, $bestdist);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_partitionpoint["X"]=1;

function _qh_printsummary($fp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $ratio;
      var $outerplane=__stackBase__;
      var $innerplane=(__stackBase__)+(8);
      var $cpu;
      var $size;
      var $id;
      var $nummerged;
      var $numvertices;
      var $numcoplanars;
      var $nonsimplicial;
      var $goodused;
      var $facet;
      var $s;
      var $numdel;
      var $numtricoplanars;
      $fp_addr=$fp;
      $numcoplanars=0;
      $nonsimplicial=0;
      var $0=HEAP32[(((((5243380)|0)))>>2)];
      $numdel=$0;
      $numtricoplanars=0;
      var $1=HEAP32[((((5247516)|0))>>2)];
      var $2=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($2);
      var $add=((($1)+($call))|0);
      $size=$add;
      var $3=HEAP32[((((5249000)|0))>>2)];
      var $4=HEAP32[((((5249188)|0))>>2)];
      var $call1=_qh_setsize($4);
      var $sub=((($3)-($call1))|0);
      $numvertices=$sub;
      var $5=HEAP32[((((5247020)|0))>>2)];
      var $call2=_qh_pointid($5);
      $id=$call2;
      var $6=HEAP32[((((5248944)|0))>>2)];
      $facet=$6;
      label = 3; break;
    case 3: 
      var $7=$facet;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $10 = 0;label = 5; break; }
    case 4: 
      var $8=$facet;
      var $next=(($8+44)|0);
      var $9=HEAP32[(($next)>>2)];
      var $tobool3=(($9)|0)!=0;
      var $10 = $tobool3;label = 5; break;
    case 5: 
      var $10;
      if ($10) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $11=$facet;
      var $coplanarset=(($11+64)|0);
      var $12=HEAP32[(($coplanarset)>>2)];
      var $tobool4=(($12)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$facet;
      var $coplanarset5=(($13+64)|0);
      var $14=HEAP32[(($coplanarset5)>>2)];
      var $call6=_qh_setsize($14);
      var $15=$numcoplanars;
      var $add7=((($15)+($call6))|0);
      $numcoplanars=$add7;
      label = 8; break;
    case 8: 
      var $16=$facet;
      var $17=$16;
      var $bf_field_offs=(($17+76)|0);
      var $18=$bf_field_offs;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 19;
      var $bf_clear=$20 & 1;
      var $tobool8=(($bf_clear)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 18; break; }
    case 9: 
      var $21=$facet;
      var $22=$21;
      var $bf_field_offs10=(($22+76)|0);
      var $23=$bf_field_offs10;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 13;
      var $bf_clear11=$25 & 1;
      var $tobool12=(($bf_clear11)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $26=$facet;
      var $27=$26;
      var $bf_field_offs14=(($27+76)|0);
      var $28=$bf_field_offs14;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 28;
      var $bf_clear15=$30 & 1;
      var $tobool16=(($bf_clear15)|0)!=0;
      if ($tobool16) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $31=$facet;
      var $32=$31;
      var $bf_field_offs17=(($32+76)|0);
      var $33=$bf_field_offs17;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 9;
      var $bf_clear18=$35 & 1;
      var $tobool19=(($bf_clear18)|0)!=0;
      if ($tobool19) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $36=$numtricoplanars;
      var $inc=((($36)+(1))|0);
      $numtricoplanars=$inc;
      label = 13; break;
    case 13: 
      label = 17; break;
    case 14: 
      var $37=$facet;
      var $vertices=(($37+48)|0);
      var $38=HEAP32[(($vertices)>>2)];
      var $call22=_qh_setsize($38);
      var $39=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($call22)|0)!=(($39)|0);
      if ($cmp) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $40=$nonsimplicial;
      var $inc24=((($40)+(1))|0);
      $nonsimplicial=$inc24;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $41=$facet;
      var $next28=(($41+44)|0);
      var $42=HEAP32[(($next28)>>2)];
      $facet=$42;
      label = 3; break;
    case 20: 
      var $43=$id;
      var $cmp29=(($43)|0) >= 0;
      if ($cmp29) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $44=HEAP32[((((5247412)|0))>>2)];
      var $sub31=((($44)-(1))|0);
      var $45=$id;
      var $cmp32=(($sub31)|0)!=(($45)|0);
      if ($cmp32) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $46=HEAP32[((((5247416)|0))>>2)];
      var $sub34=(((-$46))|0);
      var $sub35=((($sub34)-(1))|0);
      var $47=$id;
      var $cmp36=(($sub35)|0)!=(($47)|0);
      if ($cmp36) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $48=$size;
      var $dec=((($48)-(1))|0);
      $size=$dec;
      label = 24; break;
    case 24: 
      var $49=HEAP32[((((5247412)|0))>>2)];
      var $tobool39=(($49)|0)!=0;
      if ($tobool39) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $50=HEAP32[((((5247416)|0))>>2)];
      var $tobool40=(($50)|0)!=0;
      if ($tobool40) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $51=$fp_addr;
      _qh_fprintf($51, 9288, ((5266792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 27; break;
    case 27: 
      var $52=HEAP32[((((5247460)|0))>>2)];
      var $tobool43=(($52)|0)!=0;
      if ($tobool43) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $53=HEAP32[((((5247028)|0))>>2)];
      var $54=HEAP32[((((5247016)|0))>>2)];
      var $add45=((($53)+($54))|0);
      var $55=HEAP32[((((5247408)|0))>>2)];
      var $add46=((($add45)+($55))|0);
      $goodused=$add46;
      label = 33; break;
    case 29: 
      var $56=HEAP32[((((5247000)|0))>>2)];
      var $tobool48=(($56)|0)!=0;
      if ($tobool48) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $57=HEAP32[((((5247028)|0))>>2)];
      var $58=HEAP32[((((5247016)|0))>>2)];
      var $add50=((($57)+($58))|0);
      var $59=HEAP32[((((5247024)|0))>>2)];
      var $add51=((($add50)+($59))|0);
      $goodused=$add51;
      label = 32; break;
    case 31: 
      var $60=HEAP32[((((5249008)|0))>>2)];
      $goodused=$60;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $61=HEAP32[(((((5244580)|0)))>>2)];
      var $62=HEAP32[(((((5243316)|0)))>>2)];
      var $sub55=((($61)-($62))|0);
      var $63=HEAP32[(((((5243308)|0)))>>2)];
      var $add56=((($sub55)+($63))|0);
      $nummerged=$add56;
      var $64=HEAP32[((((5247476)|0))>>2)];
      var $tobool57=(($64)|0)!=0;
      if ($tobool57) { label = 34; break; } else { label = 47; break; }
    case 34: 
      var $65=HEAP32[((((5247460)|0))>>2)];
      var $tobool59=(($65)|0)!=0;
      if ($tobool59) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $66=$fp_addr;
      var $67=$size;
      var $68=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($66, 9289, ((5266316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$67,HEAP32[(((tempInt)+(4))>>2)]=$68,tempInt));
      label = 37; break;
    case 36: 
      var $69=$fp_addr;
      var $70=$size;
      var $71=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($69, 9290, ((5265968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$70,HEAP32[(((tempInt)+(4))>>2)]=$71,tempInt));
      label = 37; break;
    case 37: 
      var $72=$fp_addr;
      var $73=HEAP32[((((5246960)|0))>>2)];
      var $tobool63=(($73)|0)!=0;
      var $cond=$tobool63 ? (((5265204)|0)) : (((5264804)|0));
      var $74=$numvertices;
      _qh_fprintf($72, 9291, ((5265632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,HEAP32[(((tempInt)+(4))>>2)]=$74,tempInt));
      var $75=$numdel;
      var $tobool64=(($75)|0)!=0;
      if ($tobool64) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $76=$fp_addr;
      var $77=$numdel;
      _qh_fprintf($76, 9292, ((5264356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$77,tempInt));
      label = 39; break;
    case 39: 
      var $78=$numcoplanars;
      var $79=$numdel;
      var $sub67=((($78)-($79))|0);
      var $cmp68=(($sub67)|0) > 0;
      if ($cmp68) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $80=$fp_addr;
      var $81=$numcoplanars;
      var $82=$numdel;
      var $sub70=((($81)-($82))|0);
      _qh_fprintf($80, 9293, ((5263956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub70,tempInt));
      label = 44; break;
    case 41: 
      var $83=$size;
      var $84=$numvertices;
      var $sub72=((($83)-($84))|0);
      var $85=$numdel;
      var $sub73=((($sub72)-($85))|0);
      var $cmp74=(($sub73)|0) > 0;
      if ($cmp74) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $86=$fp_addr;
      var $87=$size;
      var $88=$numvertices;
      var $sub76=((($87)-($88))|0);
      var $89=$numdel;
      var $sub77=((($sub76)-($89))|0);
      _qh_fprintf($86, 9294, ((5263604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub77,tempInt));
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $90=$fp_addr;
      var $91=$goodused;
      var $tobool80=(($91)|0)!=0;
      var $cond81=$tobool80 ? (((5262596)|0)) : (((5264804)|0));
      var $92=HEAP32[((((5249008)|0))>>2)];
      _qh_fprintf($90, 9295, ((5263228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond81,HEAP32[(((tempInt)+(4))>>2)]=$92,tempInt));
      var $93=$nonsimplicial;
      var $tobool82=(($93)|0)!=0;
      if ($tobool82) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $94=$fp_addr;
      var $95=$goodused;
      var $tobool84=(($95)|0)!=0;
      var $cond85=$tobool84 ? (((5262596)|0)) : (((5264804)|0));
      var $96=$nonsimplicial;
      _qh_fprintf($94, 9296, ((5262096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond85,HEAP32[(((tempInt)+(4))>>2)]=$96,tempInt));
      label = 46; break;
    case 46: 
      label = 92; break;
    case 47: 
      var $97=HEAP32[((((5247000)|0))>>2)];
      var $tobool88=(($97)|0)!=0;
      if ($tobool88) { label = 48; break; } else { label = 61; break; }
    case 48: 
      var $98=HEAP32[((((5247460)|0))>>2)];
      var $tobool90=(($98)|0)!=0;
      if ($tobool90) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $99=$fp_addr;
      var $100=$size;
      var $101=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($99, 9297, ((5261632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$100,HEAP32[(((tempInt)+(4))>>2)]=$101,tempInt));
      label = 51; break;
    case 50: 
      var $102=$fp_addr;
      var $103=$size;
      var $104=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($102, 9298, ((5261200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$103,HEAP32[(((tempInt)+(4))>>2)]=$104,tempInt));
      label = 51; break;
    case 51: 
      var $105=$fp_addr;
      var $106=HEAP32[((((5246960)|0))>>2)];
      var $tobool94=(($106)|0)!=0;
      var $cond95=$tobool94 ? (((5265204)|0)) : (((5264804)|0));
      var $107=$numvertices;
      _qh_fprintf($105, 9299, ((5260768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond95,HEAP32[(((tempInt)+(4))>>2)]=$107,tempInt));
      var $108=$numdel;
      var $tobool96=(($108)|0)!=0;
      if ($tobool96) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $109=$fp_addr;
      var $110=$numdel;
      _qh_fprintf($109, 9300, ((5264356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$110,tempInt));
      label = 53; break;
    case 53: 
      var $111=$numcoplanars;
      var $112=$numdel;
      var $sub99=((($111)-($112))|0);
      var $cmp100=(($sub99)|0) > 0;
      if ($cmp100) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $113=$fp_addr;
      var $114=$numcoplanars;
      var $115=$numdel;
      var $sub102=((($114)-($115))|0);
      _qh_fprintf($113, 9301, ((5263956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub102,tempInt));
      label = 58; break;
    case 55: 
      var $116=$size;
      var $117=$numvertices;
      var $sub104=((($116)-($117))|0);
      var $118=$numdel;
      var $sub105=((($sub104)-($118))|0);
      var $cmp106=(($sub105)|0) > 0;
      if ($cmp106) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $119=$fp_addr;
      var $120=$size;
      var $121=$numvertices;
      var $sub108=((($120)-($121))|0);
      var $122=$numdel;
      var $sub109=((($sub108)-($122))|0);
      _qh_fprintf($119, 9302, ((5263604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub109,tempInt));
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $123=$fp_addr;
      var $124=$goodused;
      var $tobool112=(($124)|0)!=0;
      var $cond113=$tobool112 ? (((5262596)|0)) : (((5264804)|0));
      var $125=HEAP32[((((5249008)|0))>>2)];
      _qh_fprintf($123, 9303, ((5260340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond113,HEAP32[(((tempInt)+(4))>>2)]=$125,tempInt));
      var $126=$nonsimplicial;
      var $tobool114=(($126)|0)!=0;
      if ($tobool114) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $127=$fp_addr;
      var $128=$goodused;
      var $tobool116=(($128)|0)!=0;
      var $cond117=$tobool116 ? (((5262596)|0)) : (((5264804)|0));
      var $129=$nonsimplicial;
      _qh_fprintf($127, 9304, ((5260072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond117,HEAP32[(((tempInt)+(4))>>2)]=$129,tempInt));
      label = 60; break;
    case 60: 
      label = 91; break;
    case 61: 
      var $130=HEAP32[((((5247036)|0))>>2)];
      var $tobool120=(($130)|0)!=0;
      if ($tobool120) { label = 62; break; } else { label = 76; break; }
    case 62: 
      var $131=$fp_addr;
      var $132=$size;
      var $133=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($131, 9305, ((5259768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$132,HEAP32[(((tempInt)+(4))>>2)]=$133,tempInt));
      var $134=$fp_addr;
      var $135=$size;
      _qh_fprintf($134, 9306, ((5259516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$135,tempInt));
      var $136=$fp_addr;
      var $137=$numvertices;
      _qh_fprintf($136, 9307, ((5259220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$137,tempInt));
      var $138=$numcoplanars;
      var $tobool122=(($138)|0)!=0;
      if ($tobool122) { label = 63; break; } else { label = 71; break; }
    case 63: 
      var $139=HEAP32[((((5247052)|0))>>2)];
      var $tobool124=(($139)|0)!=0;
      if ($tobool124) { label = 64; break; } else { label = 66; break; }
    case 64: 
      var $140=HEAP32[((((5247048)|0))>>2)];
      var $tobool126=(($140)|0)!=0;
      if ($tobool126) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $s=((5258824)|0);
      label = 70; break;
    case 66: 
      var $141=HEAP32[((((5247052)|0))>>2)];
      var $tobool129=(($141)|0)!=0;
      if ($tobool129) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $s=((5258584)|0);
      label = 69; break;
    case 68: 
      $s=((5258344)|0);
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $142=$fp_addr;
      var $143=$s;
      var $144=$numcoplanars;
      _qh_fprintf($142, 9308, ((5258152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$143,HEAP32[(((tempInt)+(4))>>2)]=$144,tempInt));
      label = 71; break;
    case 71: 
      var $145=$fp_addr;
      var $146=HEAP32[((((5248996)|0))>>2)];
      var $147=HEAP32[((((5248964)|0))>>2)];
      var $sub135=((($146)-($147))|0);
      _qh_fprintf($145, 9309, ((5257780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub135,tempInt));
      var $148=$goodused;
      var $tobool136=(($148)|0)!=0;
      if ($tobool136) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $149=$fp_addr;
      var $150=HEAP32[((((5249008)|0))>>2)];
      _qh_fprintf($149, 9310, ((5257380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$150,tempInt));
      label = 73; break;
    case 73: 
      var $151=$nonsimplicial;
      var $tobool139=(($151)|0)!=0;
      if ($tobool139) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $152=$fp_addr;
      var $153=$goodused;
      var $tobool141=(($153)|0)!=0;
      var $cond142=$tobool141 ? (((5262596)|0)) : (((5264804)|0));
      var $154=$nonsimplicial;
      _qh_fprintf($152, 9311, ((5257088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond142,HEAP32[(((tempInt)+(4))>>2)]=$154,tempInt));
      label = 75; break;
    case 75: 
      label = 90; break;
    case 76: 
      var $155=$fp_addr;
      var $156=$size;
      var $157=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($155, 9312, ((5256700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$156,HEAP32[(((tempInt)+(4))>>2)]=$157,tempInt));
      var $158=$fp_addr;
      var $159=$numvertices;
      _qh_fprintf($158, 9313, ((5256464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$159,tempInt));
      var $160=$numcoplanars;
      var $tobool145=(($160)|0)!=0;
      if ($tobool145) { label = 77; break; } else { label = 85; break; }
    case 77: 
      var $161=HEAP32[((((5247052)|0))>>2)];
      var $tobool147=(($161)|0)!=0;
      if ($tobool147) { label = 78; break; } else { label = 80; break; }
    case 78: 
      var $162=HEAP32[((((5247048)|0))>>2)];
      var $tobool149=(($162)|0)!=0;
      if ($tobool149) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $s=((5256092)|0);
      label = 84; break;
    case 80: 
      var $163=HEAP32[((((5247052)|0))>>2)];
      var $tobool152=(($163)|0)!=0;
      if ($tobool152) { label = 81; break; } else { label = 82; break; }
    case 81: 
      $s=((5255756)|0);
      label = 83; break;
    case 82: 
      $s=((5255516)|0);
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $164=$fp_addr;
      var $165=$s;
      var $166=$numcoplanars;
      _qh_fprintf($164, 9314, ((5255344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$165,HEAP32[(((tempInt)+(4))>>2)]=$166,tempInt));
      label = 85; break;
    case 85: 
      var $167=$fp_addr;
      var $168=HEAP32[((((5248996)|0))>>2)];
      var $169=HEAP32[((((5248964)|0))>>2)];
      var $sub158=((($168)-($169))|0);
      _qh_fprintf($167, 9315, ((5255108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub158,tempInt));
      var $170=$goodused;
      var $tobool159=(($170)|0)!=0;
      if ($tobool159) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $171=$fp_addr;
      var $172=HEAP32[((((5249008)|0))>>2)];
      _qh_fprintf($171, 9316, ((5254692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$172,tempInt));
      label = 87; break;
    case 87: 
      var $173=$nonsimplicial;
      var $tobool162=(($173)|0)!=0;
      if ($tobool162) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $174=$fp_addr;
      var $175=$goodused;
      var $tobool164=(($175)|0)!=0;
      var $cond165=$tobool164 ? (((5262596)|0)) : (((5264804)|0));
      var $176=$nonsimplicial;
      _qh_fprintf($174, 9317, ((5254472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond165,HEAP32[(((tempInt)+(4))>>2)]=$176,tempInt));
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $177=$numtricoplanars;
      var $tobool170=(($177)|0)!=0;
      if ($tobool170) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $178=$fp_addr;
      var $179=$numtricoplanars;
      _qh_fprintf($178, 9318, ((5254076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$179,tempInt));
      label = 94; break;
    case 94: 
      var $180=$fp_addr;
      _qh_fprintf($180, 9319, ((5253852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      var $181=HEAP32[((((5247384)|0))>>2)];
      var $cmp173=(($181)|0)!=-2147483648;
      if ($cmp173) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $182=$fp_addr;
      var $183=HEAP32[((((5247384)|0))>>2)];
      _qh_fprintf($182, 9320, ((5253632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$183,tempInt));
      label = 97; break;
    case 96: 
      var $184=$fp_addr;
      _qh_fprintf($184, 9321, ((5253368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 97; break;
    case 97: 
      var $185=$fp_addr;
      var $186=HEAP32[(((((5244380)|0)))>>2)];
      _qh_fprintf($185, 9322, ((5253108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$186,tempInt));
      var $187=$fp_addr;
      var $188=HEAP32[(((((5244548)|0)))>>2)];
      _qh_fprintf($187, 9323, ((5252828)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$188,tempInt));
      var $189=HEAP32[((((5247000)|0))>>2)];
      var $tobool177=(($189)|0)!=0;
      if ($tobool177) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $190=$fp_addr;
      var $191=HEAP32[((((5248996)|0))>>2)];
      var $192=HEAP32[((((5248964)|0))>>2)];
      var $sub179=((($191)-($192))|0);
      _qh_fprintf($190, 9324, ((5252604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub179,tempInt));
      label = 99; break;
    case 99: 
      var $193=$fp_addr;
      var $194=HEAP32[(((((5244316)|0)))>>2)];
      var $195=HEAP32[(((((5244324)|0)))>>2)];
      var $add181=((($194)+($195))|0);
      var $196=HEAP32[(((((5244252)|0)))>>2)];
      var $add182=((($add181)+($196))|0);
      var $197=HEAP32[(((((5244284)|0)))>>2)];
      var $add183=((($add182)+($197))|0);
      _qh_fprintf($193, 9325, ((5252396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add183,tempInt));
      var $198=$nummerged;
      var $tobool184=(($198)|0)!=0;
      if ($tobool184) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $199=$fp_addr;
      var $200=HEAP32[(((((5243132)|0)))>>2)];
      var $201=HEAP32[(((((5243156)|0)))>>2)];
      var $add186=((($200)+($201))|0);
      var $202=HEAP32[(((((5243412)|0)))>>2)];
      var $add187=((($add186)+($202))|0);
      var $203=HEAP32[(((((5243404)|0)))>>2)];
      var $add188=((($add187)+($203))|0);
      var $204=HEAP32[(((((5243460)|0)))>>2)];
      var $add189=((($add188)+($204))|0);
      _qh_fprintf($199, 9330, ((5252076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add189,tempInt));
      var $205=$fp_addr;
      var $206=HEAP32[(((((5243164)|0)))>>2)];
      _qh_fprintf($205, 9331, ((5251716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$206,tempInt));
      var $207=$fp_addr;
      var $208=$nummerged;
      _qh_fprintf($207, 9332, ((5251492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$208,tempInt));
      label = 101; break;
    case 101: 
      var $209=HEAP32[((((5247368)|0))>>2)];
      var $tobool191=(($209)|0)!=0;
      if ($tobool191) { label = 104; break; } else { label = 102; break; }
    case 102: 
      var $210=HEAP32[((((5249136)|0))>>2)];
      var $tobool193=(($210)|0)!=0;
      if ($tobool193) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $211=HEAP32[((((5249024)|0))>>2)];
      var $conv=(($211)>>>0);
      $cpu=$conv;
      var $212=$cpu;
      var $div=($212)/(1000);
      $cpu=$div;
      var $213=$cpu;
      var $conv195=$213;
      (HEAPF64[(tempDoublePtr)>>3]=$conv195,HEAP32[((((5243292)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243292)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $214=$fp_addr;
      var $215=$cpu;
      var $conv196=$215;
      _qh_fprintf($214, 9333, ((5251276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv196,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 104; break;
    case 104: 
      var $216=HEAP32[((((5247380)|0))>>2)];
      var $tobool198=(($216)|0)!=0;
      if ($tobool198) { label = 105; break; } else { label = 109; break; }
    case 105: 
      var $217=HEAP32[((((5247144)|0))>>2)];
      var $tobool200=(($217)|0)!=0;
      if ($tobool200) { label = 108; break; } else { label = 106; break; }
    case 106: 
      var $218=HEAP32[((((5247076)|0))>>2)];
      var $tobool202=(($218)|0)!=0;
      if ($tobool202) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $219=$fp_addr;
      var $220=HEAP32[(((((5244428)|0)))>>2)];
      var $conv204=(($220)|0);
      var $mul=($conv204)*(100);
      var $221=HEAP32[((((5249032)|0))>>2)];
      var $conv205=(($221)|0);
      var $div206=($mul)/($conv205);
      _qh_fprintf($219, 9334, ((5251028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$div206,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 108; break;
    case 108: 
      label = 115; break;
    case 109: 
      var $222=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp209=$222 < 8.988465674311579e+307;
      if ($cmp209) { label = 110; break; } else { label = 114; break; }
    case 110: 
      var $223=HEAP32[(((((5244428)|0)))>>2)];
      var $tobool212=(($223)|0)!=0;
      if ($tobool212) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $224=$fp_addr;
      var $225=HEAP32[(((((5244428)|0)))>>2)];
      var $226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($224, 9335, ((5250620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$225,(HEAPF64[(tempDoublePtr)>>3]=$226,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 113; break;
    case 112: 
      var $227=$fp_addr;
      var $228=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($227, 9336, ((5250396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$228,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $229=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp218=$229 != 0;
      if ($cmp218) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $230=$fp_addr;
      var $231=HEAP32[(((((5244580)|0)))>>2)];
      var $tobool221=(($231)|0)!=0;
      var $cond222=$tobool221 ? (((5249852)|0)) : (((5249584)|0));
      var $232=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249140)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249140)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($230, 9337, ((5250124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond222,(HEAPF64[(tempDoublePtr)>>3]=$232,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 117; break;
    case 117: 
      var $233=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp224=$233 != 0;
      if ($cmp224) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $234=$fp_addr;
      var $235=HEAP32[(((((5244580)|0)))>>2)];
      var $tobool227=(($235)|0)!=0;
      var $cond228=$tobool227 ? (((5249852)|0)) : (((5249584)|0));
      var $236=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($234, 9338, ((5304304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond228,(HEAPF64[(tempDoublePtr)>>3]=$236,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 119; break;
    case 119: 
      var $237=HEAP32[((((5247084)|0))>>2)];
      var $tobool230=(($237)|0)!=0;
      if ($tobool230) { label = 120; break; } else { label = 134; break; }
    case 120: 
      _qh_outerinner(0, $outerplane, $innerplane);
      var $238=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $239=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul232=($239)*(2);
      var $cmp233=$238 > $mul232;
      if ($cmp233) { label = 121; break; } else { label = 127; break; }
    case 121: 
      var $240=$fp_addr;
      var $241=HEAP32[((((5249136)|0))>>2)];
      var $tobool236=(($241)|0)!=0;
      var $cond237=$tobool236 ? (((5264804)|0)) : (((5303572)|0));
      var $242=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($240, 9339, ((5303856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond237,(HEAPF64[(tempDoublePtr)>>3]=$242,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $243=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($outerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($outerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $244=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $245=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add238=($244)+($245);
      var $div239=($243)/($add238);
      $ratio=$div239;
      var $246=$ratio;
      var $cmp240=$246 > 0.05;
      if ($cmp240) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $247=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul243=($247)*(2);
      var $248=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp244=$mul243 > $248;
      if ($cmp244) { label = 123; break; } else { label = 125; break; }
    case 123: 
      var $249=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp247=$249 > 8.988465674311579e+307;
      if ($cmp247) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $250=$fp_addr;
      var $251=$ratio;
      _qh_fprintf($250, 9340, ((5303328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$251,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 126; break;
    case 125: 
      var $252=$fp_addr;
      _qh_fprintf($252, 9341, ((5302988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $253=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $254=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul253=($254)*(-2);
      var $cmp254=$253 < $mul253;
      if ($cmp254) { label = 128; break; } else { label = 133; break; }
    case 128: 
      var $255=$fp_addr;
      var $256=HEAP32[((((5249136)|0))>>2)];
      var $tobool257=(($256)|0)!=0;
      var $cond258=$tobool257 ? (((5264804)|0)) : (((5303572)|0));
      var $257=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($255, 9342, ((5302736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond258,(HEAPF64[(tempDoublePtr)>>3]=$257,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $258=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub259=(-$258);
      var $259=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $260=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add260=($259)+($260);
      var $div261=($sub259)/($add260);
      $ratio=$div261;
      var $261=$ratio;
      var $cmp262=$261 > 0.05;
      if ($cmp262) { label = 129; break; } else { label = 131; break; }
    case 129: 
      var $262=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp265=$262 > 8.988465674311579e+307;
      if ($cmp265) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $263=$fp_addr;
      var $264=$ratio;
      _qh_fprintf($263, 9343, ((5303328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$264,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 132; break;
    case 131: 
      var $265=$fp_addr;
      _qh_fprintf($265, 9344, ((5302988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      var $266=$fp_addr;
      _qh_fprintf($266, 9345, ((5302988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printsummary["X"]=1;

function _qh_intcompare($i, $j) {
  var label = 0;


  var $i_addr;
  var $j_addr;
  $i_addr=$i;
  $j_addr=$j;
  var $0=$i_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  var $3=$j_addr;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $sub=((($2)-($5))|0);

  return $sub;
}


function _qh_memalloc($insize) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $insize_addr;
      var $freelistp;
      var $newbuffer;
      var $idx;
      var $size;
      var $n;
      var $outsize;
      var $bufsize;
      var $object;
      $insize_addr=$insize;
      var $0=$insize_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5242932)|0))>>2)];
      var $2=$insize_addr;
      _qh_fprintf($1, 6235, ((5262876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      _qh_errexit(4, 0, 0);
      label = 4; break;
    case 4: 
      var $3=$insize_addr;
      var $cmp1=(($3)|0) >= 0;
      if ($cmp1) { label = 5; break; } else { label = 22; break; }
    case 5: 
      var $4=$insize_addr;
      var $5=HEAP32[((((5242896)|0))>>2)];
      var $cmp2=(($4)|0) <= (($5)|0);
      if ($cmp2) { label = 6; break; } else { label = 22; break; }
    case 6: 
      var $6=$insize_addr;
      var $7=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      $idx=$8;
      var $9=$idx;
      var $10=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx4=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx4)>>2)];
      $outsize=$11;
      var $12=$outsize;
      var $13=HEAP32[((((5242980)|0))>>2)];
      var $add=((($13)+($12))|0);
      HEAP32[((((5242980)|0))>>2)]=$add;
      var $14=HEAP32[((((5242904)|0))>>2)];
      var $15=$idx;
      var $add_ptr=(($14+($15<<2))|0);
      $freelistp=$add_ptr;
      var $16=$freelistp;
      var $17=HEAP32[(($16)>>2)];
      $object=$17;
      var $tobool=(($17)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $18=HEAP32[((((5242940)|0))>>2)];
      var $inc=((($18)+(1))|0);
      HEAP32[((((5242940)|0))>>2)]=$inc;
      var $19=$outsize;
      var $20=HEAP32[((((5242968)|0))>>2)];
      var $sub=((($20)-($19))|0);
      HEAP32[((((5242968)|0))>>2)]=$sub;
      var $21=$freelistp;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$freelistp;
      HEAP32[(($25)>>2)]=$24;
      var $26=HEAP32[((((5242944)|0))>>2)];
      var $27=HEAP32[((((5242940)|0))>>2)];
      var $add6=((($26)+($27))|0);
      var $28=HEAP32[((((5242952)|0))>>2)];
      var $add7=((($add6)+($28))|0);
      $n=$add7;
      var $29=HEAP32[((((5242936)|0))>>2)];
      var $cmp8=(($29)|0) >= 5;
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=HEAP32[((((5242932)|0))>>2)];
      var $31=$object;
      var $32=$n;
      var $33=$outsize;
      var $34=HEAP32[((((5242980)|0))>>2)];
      var $35=HEAP32[((((5242944)|0))>>2)];
      var $36=HEAP32[((((5242940)|0))>>2)];
      var $add10=((($35)+($36))|0);
      var $37=HEAP32[((((5242952)|0))>>2)];
      var $sub11=((($add10)-($37))|0);
      _qh_fprintf($30, 8141, ((5292520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,HEAP32[(((tempInt)+(12))>>2)]=$34,HEAP32[(((tempInt)+(16))>>2)]=$sub11,tempInt));
      label = 9; break;
    case 9: 
      var $38=$object;
      $retval=$38;
      label = 32; break;
    case 10: 
      var $39=HEAP32[((((5242944)|0))>>2)];
      var $inc13=((($39)+(1))|0);
      HEAP32[((((5242944)|0))>>2)]=$inc13;
      var $40=$outsize;
      var $41=HEAP32[((((5242924)|0))>>2)];
      var $cmp14=(($40)|0) > (($41)|0);
      if ($cmp14) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $42=HEAP32[((((5242924)|0))>>2)];
      var $43=HEAP32[((((5242964)|0))>>2)];
      var $add16=((($43)+($42))|0);
      HEAP32[((((5242964)|0))>>2)]=$add16;
      var $44=HEAP32[((((5242916)|0))>>2)];
      var $tobool17=(($44)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $45=HEAP32[((((5242884)|0))>>2)];
      $bufsize=$45;
      label = 14; break;
    case 13: 
      var $46=HEAP32[((((5242880)|0))>>2)];
      $bufsize=$46;
      label = 14; break;
    case 14: 
      var $47=$bufsize;
      var $call=_qh_malloc($47);
      $newbuffer=$call;
      var $tobool21=(($call)|0)!=0;
      if ($tobool21) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $48=HEAP32[((((5242932)|0))>>2)];
      var $49=$bufsize;
      _qh_fprintf($48, 6080, ((5277780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$49,tempInt));
      _qh_errexit(4, 0, 0);
      label = 16; break;
    case 16: 
      var $50=HEAP32[((((5242916)|0))>>2)];
      var $51=$newbuffer;
      var $52=$51;
      HEAP32[(($52)>>2)]=$50;
      var $53=$newbuffer;
      HEAP32[((((5242916)|0))>>2)]=$53;
      var $54=HEAP32[((((5242900)|0))>>2)];
      var $add24=((($54)+(4))|0);
      var $55=HEAP32[((((5242900)|0))>>2)];
      var $neg=$55 ^ -1;
      var $and=$add24 & $neg;
      $size=$and;
      var $56=$newbuffer;
      var $57=$size;
      var $add_ptr25=(($56+$57)|0);
      HEAP32[((((5242920)|0))>>2)]=$add_ptr25;
      var $58=$bufsize;
      var $59=$size;
      var $sub26=((($58)-($59))|0);
      HEAP32[((((5242924)|0))>>2)]=$sub26;
      var $60=$bufsize;
      var $61=$size;
      var $sub27=((($60)-($61))|0);
      var $62=HEAP32[((((5242960)|0))>>2)];
      var $add28=((($62)+($sub27))|0);
      HEAP32[((((5242960)|0))>>2)]=$add28;
      var $63=HEAP32[((((5242980)|0))>>2)];
      var $64=HEAP32[((((5242968)|0))>>2)];
      var $add29=((($63)+($64))|0);
      var $65=HEAP32[((((5242964)|0))>>2)];
      var $add30=((($add29)+($65))|0);
      var $66=HEAP32[((((5242924)|0))>>2)];
      var $add31=((($add30)+($66))|0);
      var $67=$outsize;
      var $sub32=((($add31)-($67))|0);
      $n=$sub32;
      var $68=HEAP32[((((5242960)|0))>>2)];
      var $69=$n;
      var $cmp33=(($68)|0)!=(($69)|0);
      if ($cmp33) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $70=HEAP32[((((5242932)|0))>>2)];
      var $71=HEAP32[((((5242960)|0))>>2)];
      var $72=$n;
      _qh_fprintf($70, 6212, ((5271936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$71,HEAP32[(((tempInt)+(4))>>2)]=$72,tempInt));
      _qh_errexit(4, 0, 0);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $73=HEAP32[((((5242920)|0))>>2)];
      $object=$73;
      var $74=HEAP32[((((5242920)|0))>>2)];
      var $75=$outsize;
      var $add_ptr37=(($74+$75)|0);
      HEAP32[((((5242920)|0))>>2)]=$add_ptr37;
      var $76=$outsize;
      var $77=HEAP32[((((5242924)|0))>>2)];
      var $sub38=((($77)-($76))|0);
      HEAP32[((((5242924)|0))>>2)]=$sub38;
      var $78=$outsize;
      var $79=$insize_addr;
      var $sub39=((($78)-($79))|0);
      var $80=HEAP32[((((5242984)|0))>>2)];
      var $add40=((($80)+($sub39))|0);
      HEAP32[((((5242984)|0))>>2)]=$add40;
      var $81=HEAP32[((((5242944)|0))>>2)];
      var $82=HEAP32[((((5242940)|0))>>2)];
      var $add41=((($81)+($82))|0);
      var $83=HEAP32[((((5242952)|0))>>2)];
      var $add42=((($add41)+($83))|0);
      $n=$add42;
      var $84=HEAP32[((((5242936)|0))>>2)];
      var $cmp43=(($84)|0) >= 5;
      if ($cmp43) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $85=HEAP32[((((5242932)|0))>>2)];
      var $86=$object;
      var $87=$n;
      var $88=$outsize;
      var $89=HEAP32[((((5242980)|0))>>2)];
      var $90=HEAP32[((((5242944)|0))>>2)];
      var $91=HEAP32[((((5242940)|0))>>2)];
      var $add45=((($90)+($91))|0);
      var $92=HEAP32[((((5242952)|0))>>2)];
      var $sub46=((($add45)-($92))|0);
      _qh_fprintf($85, 8140, ((5267124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$86,HEAP32[(((tempInt)+(4))>>2)]=$87,HEAP32[(((tempInt)+(8))>>2)]=$88,HEAP32[(((tempInt)+(12))>>2)]=$89,HEAP32[(((tempInt)+(16))>>2)]=$sub46,tempInt));
      label = 21; break;
    case 21: 
      var $93=$object;
      $retval=$93;
      label = 32; break;
    case 22: 
      var $94=HEAP32[((((5242912)|0))>>2)];
      var $tobool49=(($94)|0)!=0;
      if ($tobool49) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $95=HEAP32[((((5242932)|0))>>2)];
      _qh_fprintf($95, 6081, ((5263156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 24; break;
    case 24: 
      var $96=$insize_addr;
      $outsize=$96;
      var $97=HEAP32[((((5242948)|0))>>2)];
      var $inc52=((($97)+(1))|0);
      HEAP32[((((5242948)|0))>>2)]=$inc52;
      var $98=$outsize;
      var $99=HEAP32[((((5242972)|0))>>2)];
      var $add53=((($99)+($98))|0);
      HEAP32[((((5242972)|0))>>2)]=$add53;
      var $100=HEAP32[((((5242976)|0))>>2)];
      var $101=HEAP32[((((5242972)|0))>>2)];
      var $cmp54=(($100)|0) < (($101)|0);
      if ($cmp54) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $102=HEAP32[((((5242972)|0))>>2)];
      HEAP32[((((5242976)|0))>>2)]=$102;
      label = 26; break;
    case 26: 
      var $103=$outsize;
      var $call57=_qh_malloc($103);
      $object=$call57;
      var $tobool58=(($call57)|0)!=0;
      if ($tobool58) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $104=HEAP32[((((5242932)|0))>>2)];
      var $105=$outsize;
      _qh_fprintf($104, 6082, ((5259148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$105,tempInt));
      _qh_errexit(4, 0, 0);
      label = 28; break;
    case 28: 
      var $106=HEAP32[((((5242936)|0))>>2)];
      var $cmp61=(($106)|0) >= 5;
      if ($cmp61) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $107=HEAP32[((((5242932)|0))>>2)];
      var $108=$object;
      var $109=HEAP32[((((5242948)|0))>>2)];
      var $110=HEAP32[((((5242956)|0))>>2)];
      var $add63=((($109)+($110))|0);
      var $111=$outsize;
      var $112=HEAP32[((((5242972)|0))>>2)];
      var $113=HEAP32[((((5242948)|0))>>2)];
      var $114=HEAP32[((((5242956)|0))>>2)];
      var $sub64=((($113)-($114))|0);
      _qh_fprintf($107, 8057, ((5256036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$108,HEAP32[(((tempInt)+(4))>>2)]=$add63,HEAP32[(((tempInt)+(8))>>2)]=$111,HEAP32[(((tempInt)+(12))>>2)]=$112,HEAP32[(((tempInt)+(16))>>2)]=$sub64,tempInt));
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $115=$object;
      $retval=$115;
      label = 32; break;
    case 32: 
      var $116=$retval;
      STACKTOP = __stackBase__;
      return $116;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memalloc["X"]=1;

function _qh_memfree($object, $insize) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $object_addr;
      var $insize_addr;
      var $freelistp;
      var $idx;
      var $outsize;
      $object_addr=$object;
      $insize_addr=$insize;
      var $0=$object_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 11; break;
    case 4: 
      var $1=$insize_addr;
      var $2=HEAP32[((((5242896)|0))>>2)];
      var $cmp=(($1)|0) <= (($2)|0);
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $3=HEAP32[((((5242952)|0))>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[((((5242952)|0))>>2)]=$inc;
      var $4=$insize_addr;
      var $5=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $idx=$6;
      var $7=$idx;
      var $8=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx2=(($8+($7<<2))|0);
      var $9=HEAP32[(($arrayidx2)>>2)];
      $outsize=$9;
      var $10=$outsize;
      var $11=HEAP32[((((5242968)|0))>>2)];
      var $add=((($11)+($10))|0);
      HEAP32[((((5242968)|0))>>2)]=$add;
      var $12=$outsize;
      var $13=HEAP32[((((5242980)|0))>>2)];
      var $sub=((($13)-($12))|0);
      HEAP32[((((5242980)|0))>>2)]=$sub;
      var $14=HEAP32[((((5242904)|0))>>2)];
      var $15=$idx;
      var $add_ptr=(($14+($15<<2))|0);
      $freelistp=$add_ptr;
      var $16=$freelistp;
      var $17=HEAP32[(($16)>>2)];
      var $18=$object_addr;
      var $19=$18;
      HEAP32[(($19)>>2)]=$17;
      var $20=$object_addr;
      var $21=$freelistp;
      HEAP32[(($21)>>2)]=$20;
      var $22=HEAP32[((((5242944)|0))>>2)];
      var $23=HEAP32[((((5242940)|0))>>2)];
      var $add3=((($22)+($23))|0);
      var $24=HEAP32[((((5242952)|0))>>2)];
      var $add4=((($add3)+($24))|0);
      $idx=$add4;
      var $25=HEAP32[((((5242936)|0))>>2)];
      var $cmp5=(($25)|0) >= 5;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=HEAP32[((((5242932)|0))>>2)];
      var $27=$object_addr;
      var $28=$idx;
      var $29=$outsize;
      var $30=HEAP32[((((5242980)|0))>>2)];
      var $31=HEAP32[((((5242944)|0))>>2)];
      var $32=HEAP32[((((5242940)|0))>>2)];
      var $add7=((($31)+($32))|0);
      var $33=HEAP32[((((5242952)|0))>>2)];
      var $sub8=((($add7)-($33))|0);
      _qh_fprintf($26, 8142, ((5253312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$28,HEAP32[(((tempInt)+(8))>>2)]=$29,HEAP32[(((tempInt)+(12))>>2)]=$30,HEAP32[(((tempInt)+(16))>>2)]=$sub8,tempInt));
      label = 7; break;
    case 7: 
      label = 11; break;
    case 8: 
      var $34=HEAP32[((((5242956)|0))>>2)];
      var $inc10=((($34)+(1))|0);
      HEAP32[((((5242956)|0))>>2)]=$inc10;
      var $35=$insize_addr;
      var $36=HEAP32[((((5242972)|0))>>2)];
      var $sub11=((($36)-($35))|0);
      HEAP32[((((5242972)|0))>>2)]=$sub11;
      var $37=$object_addr;
      _qh_free($37);
      var $38=HEAP32[((((5242936)|0))>>2)];
      var $cmp12=(($38)|0) >= 5;
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $39=HEAP32[((((5242932)|0))>>2)];
      var $40=$object_addr;
      var $41=HEAP32[((((5242948)|0))>>2)];
      var $42=HEAP32[((((5242956)|0))>>2)];
      var $add14=((($41)+($42))|0);
      var $43=$insize_addr;
      var $44=HEAP32[((((5242972)|0))>>2)];
      var $45=HEAP32[((((5242948)|0))>>2)];
      var $46=HEAP32[((((5242956)|0))>>2)];
      var $sub15=((($45)-($46))|0);
      _qh_fprintf($39, 8058, ((5250564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$add14,HEAP32[(((tempInt)+(8))>>2)]=$43,HEAP32[(((tempInt)+(12))>>2)]=$44,HEAP32[(((tempInt)+(16))>>2)]=$sub15,tempInt));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memfree["X"]=1;

function _qh_memfreeshort($curlong, $totlong) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $curlong_addr;
      var $totlong_addr;
      var $buffer;
      var $nextbuffer;
      var $ferr;
      $curlong_addr=$curlong;
      $totlong_addr=$totlong;
      var $0=HEAP32[((((5242948)|0))>>2)];
      var $1=HEAP32[((((5242956)|0))>>2)];
      var $sub=((($0)-($1))|0);
      var $2=$curlong_addr;
      HEAP32[(($2)>>2)]=$sub;
      var $3=HEAP32[((((5242972)|0))>>2)];
      var $4=$totlong_addr;
      HEAP32[(($4)>>2)]=$3;
      var $5=HEAP32[((((5242916)|0))>>2)];
      $buffer=$5;
      label = 3; break;
    case 3: 
      var $6=$buffer;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$buffer;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      $nextbuffer=$9;
      var $10=$buffer;
      _qh_free($10);
      label = 5; break;
    case 5: 
      var $11=$nextbuffer;
      $buffer=$11;
      label = 3; break;
    case 6: 
      HEAP32[((((5242916)|0))>>2)]=0;
      var $12=HEAP32[((((5242896)|0))>>2)];
      var $tobool1=(($12)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=HEAP32[((((5242912)|0))>>2)];
      var $14=$13;
      _qh_free($14);
      var $15=HEAP32[((((5242904)|0))>>2)];
      var $16=$15;
      _qh_free($16);
      var $17=HEAP32[((((5242908)|0))>>2)];
      var $18=$17;
      _qh_free($18);
      label = 8; break;
    case 8: 
      var $19=HEAP32[((((5242932)|0))>>2)];
      $ferr=$19;
      _memset(5242880, 0, 116);
      var $20=$ferr;
      HEAP32[((((5242932)|0))>>2)]=$20;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memfreeshort["X"]=1;

function _qh_meminit($ferr) {
  var label = 0;


  var $ferr_addr;
  $ferr_addr=$ferr;
  _memset(5242880, 0, 116);
  var $0=$ferr_addr;
  HEAP32[((((5242932)|0))>>2)]=$0;

  return;
}


function _qh_meminitbuffers($tracelevel, $alignment, $numsizes, $bufsize, $bufinit) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tracelevel_addr;
      var $alignment_addr;
      var $numsizes_addr;
      var $bufsize_addr;
      var $bufinit_addr;
      $tracelevel_addr=$tracelevel;
      $alignment_addr=$alignment;
      $numsizes_addr=$numsizes;
      $bufsize_addr=$bufsize;
      $bufinit_addr=$bufinit;
      var $0=$tracelevel_addr;
      HEAP32[((((5242936)|0))>>2)]=$0;
      var $1=$numsizes_addr;
      HEAP32[((((5242892)|0))>>2)]=$1;
      var $2=$bufsize_addr;
      HEAP32[((((5242880)|0))>>2)]=$2;
      var $3=$bufinit_addr;
      HEAP32[((((5242884)|0))>>2)]=$3;
      var $4=$alignment_addr;
      var $sub=((($4)-(1))|0);
      HEAP32[((((5242900)|0))>>2)]=$sub;
      var $5=HEAP32[((((5242900)|0))>>2)];
      var $6=HEAP32[((((5242900)|0))>>2)];
      var $neg=$6 ^ -1;
      var $and=$5 & $neg;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((((5242932)|0))>>2)];
      var $8=$alignment_addr;
      _qh_fprintf($7, 6085, ((5302660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $9=$numsizes_addr;
      var $call=_calloc($9, 4);
      var $10=$call;
      HEAP32[((((5242908)|0))>>2)]=$10;
      var $11=$numsizes_addr;
      var $call1=_calloc($11, 4);
      var $12=$call1;
      HEAP32[((((5242904)|0))>>2)]=$12;
      var $13=HEAP32[((((5242908)|0))>>2)];
      var $tobool2=(($13)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=HEAP32[((((5242904)|0))>>2)];
      var $tobool3=(($14)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $15=HEAP32[((((5242932)|0))>>2)];
      _qh_fprintf($15, 6086, ((5300180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(4, 0, 0);
      label = 7; break;
    case 7: 
      var $16=HEAP32[((((5242936)|0))>>2)];
      var $cmp=(($16)|0) >= 1;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $17=HEAP32[((((5242932)|0))>>2)];
      var $18=$alignment_addr;
      _qh_fprintf($17, 8059, ((5297692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,tempInt));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_meminitbuffers["X"]=1;

function _qh_memsetup() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $k;
      var $i;
      var $0=HEAP32[((((5242908)|0))>>2)];
      var $1=$0;
      var $2=HEAP32[((((5242888)|0))>>2)];
      _qsort($1, $2, 4, 10);
      var $3=HEAP32[((((5242888)|0))>>2)];
      var $sub=((($3)-(1))|0);
      var $4=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx=(($4+($sub<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      HEAP32[((((5242896)|0))>>2)]=$5;
      var $6=HEAP32[((((5242896)|0))>>2)];
      var $7=HEAP32[((((5242880)|0))>>2)];
      var $cmp=(($6)|0) >= (($7)|0);
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=HEAP32[((((5242896)|0))>>2)];
      var $9=HEAP32[((((5242884)|0))>>2)];
      var $cmp1=(($8)|0) >= (($9)|0);
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=HEAP32[((((5242932)|0))>>2)];
      var $11=HEAP32[((((5242896)|0))>>2)];
      var $12=HEAP32[((((5242880)|0))>>2)];
      var $13=HEAP32[((((5242884)|0))>>2)];
      _qh_fprintf($10, 6087, ((5296108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,HEAP32[(((tempInt)+(8))>>2)]=$13,tempInt));
      _qh_errexit(4, 0, 0);
      label = 5; break;
    case 5: 
      var $14=HEAP32[((((5242896)|0))>>2)];
      var $add=((($14)+(1))|0);
      var $mul=((($add<<2))&-1);
      var $call=_qh_malloc($mul);
      var $15=$call;
      HEAP32[((((5242912)|0))>>2)]=$15;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=HEAP32[((((5242932)|0))>>2)];
      _qh_fprintf($16, 6088, ((5294228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(4, 0, 0);
      label = 7; break;
    case 7: 
      var $17=HEAP32[((((5242896)|0))>>2)];
      var $add4=((($17)+(1))|0);
      $k=$add4;
      label = 8; break;
    case 8: 
      var $18=$k;
      var $dec=((($18)-(1))|0);
      $k=$dec;
      var $tobool5=(($18)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$k;
      var $20=$k;
      var $21=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx6=(($21+($20<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$19;
      label = 8; break;
    case 10: 
      $i=0;
      $k=0;
      label = 11; break;
    case 11: 
      var $22=$k;
      var $23=HEAP32[((((5242896)|0))>>2)];
      var $cmp8=(($22)|0) <= (($23)|0);
      if ($cmp8) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $24=$k;
      var $25=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx10=(($25+($24<<2))|0);
      var $26=HEAP32[(($arrayidx10)>>2)];
      var $27=$i;
      var $28=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx11=(($28+($27<<2))|0);
      var $29=HEAP32[(($arrayidx11)>>2)];
      var $cmp12=(($26)|0) <= (($29)|0);
      if ($cmp12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $30=$i;
      var $31=$k;
      var $32=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx14=(($32+($31<<2))|0);
      HEAP32[(($arrayidx14)>>2)]=$30;
      label = 15; break;
    case 14: 
      var $33=$i;
      var $inc=((($33)+(1))|0);
      $i=$inc;
      var $34=$k;
      var $35=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx15=(($35+($34<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$inc;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $36=$k;
      var $inc17=((($36)+(1))|0);
      $k=$inc17;
      label = 11; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memsetup["X"]=1;

function _qh_memsize($size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size_addr;
      var $k;
      $size_addr=$size;
      var $0=HEAP32[((((5242896)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5242932)|0))>>2)];
      _qh_fprintf($1, 6089, ((5292576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $2=$size_addr;
      var $3=HEAP32[((((5242900)|0))>>2)];
      var $add=((($2)+($3))|0);
      var $4=HEAP32[((((5242900)|0))>>2)];
      var $neg=$4 ^ -1;
      var $and=$add & $neg;
      $size_addr=$and;
      var $5=HEAP32[((((5242888)|0))>>2)];
      $k=$5;
      label = 5; break;
    case 5: 
      var $6=$k;
      var $dec=((($6)-(1))|0);
      $k=$dec;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $7=$k;
      var $8=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx=(($8+($7<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $10=$size_addr;
      var $cmp=(($9)|0)==(($10)|0);
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 12; break;
    case 8: 
      label = 5; break;
    case 9: 
      var $11=HEAP32[((((5242888)|0))>>2)];
      var $12=HEAP32[((((5242892)|0))>>2)];
      var $cmp4=(($11)|0) < (($12)|0);
      if ($cmp4) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=$size_addr;
      var $14=HEAP32[((((5242888)|0))>>2)];
      var $inc=((($14)+(1))|0);
      HEAP32[((((5242888)|0))>>2)]=$inc;
      var $15=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx6=(($15+($14<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$13;
      label = 12; break;
    case 11: 
      var $16=HEAP32[((((5242932)|0))>>2)];
      var $17=HEAP32[((((5242892)|0))>>2)];
      _qh_fprintf($16, 7060, ((5291324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memsize["X"]=1;

function _qh_memstatistics($fp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $i;
      var $count;
      var $totfree;
      var $object;
      $fp_addr=$fp;
      $totfree=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=HEAP32[((((5242888)|0))>>2)];
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $count=0;
      var $2=$i;
      var $3=HEAP32[((((5242904)|0))>>2)];
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $object=$4;
      label = 5; break;
    case 5: 
      var $5=$object;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$count;
      var $inc=((($6)+(1))|0);
      $count=$inc;
      label = 7; break;
    case 7: 
      var $7=$object;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      $object=$9;
      label = 5; break;
    case 8: 
      var $10=$i;
      var $11=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx3=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      var $13=$count;
      var $mul=((($12)*($13))&-1);
      var $14=$totfree;
      var $add=((($14)+($mul))|0);
      $totfree=$add;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc5=((($15)+(1))|0);
      $i=$inc5;
      label = 3; break;
    case 10: 
      var $16=$totfree;
      var $17=HEAP32[((((5242968)|0))>>2)];
      var $cmp7=(($16)|0)!=(($17)|0);
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $18=HEAP32[((((5242932)|0))>>2)];
      var $19=HEAP32[((((5242968)|0))>>2)];
      var $20=$totfree;
      _qh_fprintf($18, 6211, ((5289448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$20,tempInt));
      _qh_errexit(5, 0, 0);
      label = 12; break;
    case 12: 
      var $21=$fp_addr;
      var $22=HEAP32[((((5242940)|0))>>2)];
      var $23=HEAP32[((((5242944)|0))>>2)];
      var $24=HEAP32[((((5242948)|0))>>2)];
      var $25=HEAP32[((((5242952)|0))>>2)];
      var $26=HEAP32[((((5242956)|0))>>2)];
      var $27=HEAP32[((((5242980)|0))>>2)];
      var $28=HEAP32[((((5242968)|0))>>2)];
      var $29=HEAP32[((((5242964)|0))>>2)];
      var $30=HEAP32[((((5242924)|0))>>2)];
      var $add8=((($29)+($30))|0);
      var $31=HEAP32[((((5242984)|0))>>2)];
      var $32=HEAP32[((((5242976)|0))>>2)];
      var $33=HEAP32[((((5242972)|0))>>2)];
      var $34=HEAP32[((((5242948)|0))>>2)];
      var $35=HEAP32[((((5242956)|0))>>2)];
      var $sub=((($34)-($35))|0);
      var $36=HEAP32[((((5242960)|0))>>2)];
      var $37=HEAP32[((((5242880)|0))>>2)];
      var $38=HEAP32[((((5242884)|0))>>2)];
      _qh_fprintf($21, 9278, ((5287144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 60)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=$23,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$25,HEAP32[(((tempInt)+(16))>>2)]=$26,HEAP32[(((tempInt)+(20))>>2)]=$27,HEAP32[(((tempInt)+(24))>>2)]=$28,HEAP32[(((tempInt)+(28))>>2)]=$add8,HEAP32[(((tempInt)+(32))>>2)]=$31,HEAP32[(((tempInt)+(36))>>2)]=$32,HEAP32[(((tempInt)+(40))>>2)]=$33,HEAP32[(((tempInt)+(44))>>2)]=$sub,HEAP32[(((tempInt)+(48))>>2)]=$36,HEAP32[(((tempInt)+(52))>>2)]=$37,HEAP32[(((tempInt)+(56))>>2)]=$38,tempInt));
      var $39=HEAP32[((((5242988)|0))>>2)];
      var $tobool9=(($39)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $40=$fp_addr;
      var $41=HEAP32[((((5242988)|0))>>2)];
      var $42=HEAP32[((((5242992)|0))>>2)];
      var $conv=(($42)|0);
      var $43=HEAP32[((((5242988)|0))>>2)];
      var $conv11=(($43)|0);
      var $div=($conv)/($conv11);
      var $conv12=$div;
      _qh_fprintf($40, 9279, ((5285492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,(HEAPF64[(tempDoublePtr)>>3]=$conv12,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $44=$fp_addr;
      _qh_fprintf($44, 9280, ((5283216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $45=$i;
      var $46=HEAP32[((((5242888)|0))>>2)];
      var $cmp15=(($45)|0) < (($46)|0);
      if ($cmp15) { label = 16; break; } else { label = 22; break; }
    case 16: 
      $count=0;
      var $47=$i;
      var $48=HEAP32[((((5242904)|0))>>2)];
      var $arrayidx18=(($48+($47<<2))|0);
      var $49=HEAP32[(($arrayidx18)>>2)];
      $object=$49;
      label = 17; break;
    case 17: 
      var $50=$object;
      var $tobool20=(($50)|0)!=0;
      if ($tobool20) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $51=$count;
      var $inc22=((($51)+(1))|0);
      $count=$inc22;
      label = 19; break;
    case 19: 
      var $52=$object;
      var $53=$52;
      var $54=HEAP32[(($53)>>2)];
      $object=$54;
      label = 17; break;
    case 20: 
      var $55=$fp_addr;
      var $56=$i;
      var $57=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx25=(($57+($56<<2))|0);
      var $58=HEAP32[(($arrayidx25)>>2)];
      var $59=$count;
      _qh_fprintf($55, 9281, ((5281044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$58,HEAP32[(((tempInt)+(4))>>2)]=$59,tempInt));
      label = 21; break;
    case 21: 
      var $60=$i;
      var $inc27=((($60)+(1))|0);
      $i=$inc27;
      label = 15; break;
    case 22: 
      var $61=$fp_addr;
      _qh_fprintf($61, 9282, ((5280236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_memstatistics["X"]=1;

function _qh_premerge($apex, $maxcentrum, $maxangle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $apex_addr;
      var $maxcentrum_addr;
      var $maxangle_addr;
      var $othermerge=__stackBase__;
      var $newfacet;
      $apex_addr=$apex;
      $maxcentrum_addr=$maxcentrum;
      $maxangle_addr=$maxangle;
      HEAP32[(($othermerge)>>2)]=0;
      var $0=HEAP32[((((5248584)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $call=_qh_checkzero(0);
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 31; break;
    case 5: 
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 2;
      if ($cmp) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=$maxcentrum_addr;
      var $4=$maxangle_addr;
      var $5=$apex_addr;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $bf_clear=$8 & 16777215;
      var $9=HEAP32[((((5248956)|0))>>2)];
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=HEAP32[((((5248956)|0))>>2)];
      var $id=(($10+72)|0);
      var $11=HEAP32[(($id)>>2)];
      var $cond = $11;label = 9; break;
    case 8: 
      var $cond = -1;label = 9; break;
    case 9: 
      var $cond;
      _qh_fprintf($2, 2008, ((5261108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$3,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$bf_clear,HEAP32[(((tempInt)+(20))>>2)]=$cond,tempInt));
      label = 10; break;
    case 10: 
      var $12=HEAP32[((((5247040)|0))>>2)];
      var $cmp5=(($12)|0) >= 4;
      if ($cmp5) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $13=HEAP32[((((5248996)|0))>>2)];
      var $cmp7=(($13)|0) < 50;
      if ($cmp7) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _qh_printlists();
      label = 13; break;
    case 13: 
      var $14=$maxcentrum_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[((((5248612)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248612)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $15=$maxangle_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[((((5248620)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248620)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $16=HEAP32[((((5248940)|0))>>2)];
      var $call10=_qh_settemp($16);
      HEAP32[((((5249176)|0))>>2)]=$call10;
      var $17=HEAP32[((((5248940)|0))>>2)];
      var $call11=_qh_settemp($17);
      HEAP32[((((5249172)|0))>>2)]=$call11;
      var $18=HEAP32[((((5247508)|0))>>2)];
      var $cmp12=(($18)|0) >= 3;
      if ($cmp12) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $19=HEAP32[((((5248956)|0))>>2)];
      _qh_mark_dupridges($19);
      var $20=HEAP32[((((5248956)|0))>>2)];
      _qh_mergecycle_all($20, $othermerge);
      _qh_forcedmerges($othermerge);
      var $21=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$21;
      label = 15; break;
    case 15: 
      var $22=$newfacet;
      var $tobool14=(($22)|0)!=0;
      if ($tobool14) { label = 16; break; } else { var $25 = 0;label = 17; break; }
    case 16: 
      var $23=$newfacet;
      var $next=(($23+44)|0);
      var $24=HEAP32[(($next)>>2)];
      var $tobool15=(($24)|0)!=0;
      var $25 = $tobool15;label = 17; break;
    case 17: 
      var $25;
      if ($25) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $26=$newfacet;
      var $27=$26;
      var $bf_field_offs16=(($27+76)|0);
      var $28=$bf_field_offs16;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 13;
      var $bf_clear17=$30 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 21; break; } else { label = 19; break; }
    case 19: 
      var $31=$newfacet;
      var $32=$31;
      var $bf_field_offs20=(($32+76)|0);
      var $33=$bf_field_offs20;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 22;
      var $bf_clear21=$35 & 1;
      var $tobool22=(($bf_clear21)|0)!=0;
      if ($tobool22) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $36=$newfacet;
      _qh_degen_redundant_neighbors($36, 0);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $37=$newfacet;
      var $next25=(($37+44)|0);
      var $38=HEAP32[(($next25)>>2)];
      $newfacet=$38;
      label = 15; break;
    case 23: 
      var $call26=_qh_merge_degenredundant();
      var $tobool27=(($call26)|0)!=0;
      if ($tobool27) { label = 24; break; } else { label = 25; break; }
    case 24: 
      HEAP32[(($othermerge)>>2)]=1;
      label = 25; break;
    case 25: 
      label = 27; break;
    case 26: 
      var $39=HEAP32[((((5248956)|0))>>2)];
      _qh_mergecycle_all($39, $othermerge);
      label = 27; break;
    case 27: 
      var $40=HEAP32[((((5248956)|0))>>2)];
      _qh_flippedmerges($40, $othermerge);
      var $41=HEAP32[((((5247076)|0))>>2)];
      var $tobool31=(($41)|0)!=0;
      if ($tobool31) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $42=HEAP32[(((((5244580)|0)))>>2)];
      var $tobool32=(($42)|0)!=0;
      if ($tobool32) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $43=HEAP32[(((((5244372)|0)))>>2)];
      var $inc=((($43)+(1))|0);
      HEAP32[(((((5244372)|0)))>>2)]=$inc;
      HEAP32[((((5249124)|0))>>2)]=0;
      var $44=HEAP32[((((5248956)|0))>>2)];
      _qh_getmergeset_initial($44);
      var $45=HEAP32[(($othermerge)>>2)];
      _qh_all_merges($45, 0);
      label = 30; break;
    case 30: 
      _qh_settempfree(((5249172)|0));
      _qh_settempfree(((5249176)|0));
      label = 31; break;
    case 31: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_premerge["X"]=1;

function _qh_checkzero($testall) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $testall_addr;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $horizon;
      var $facetlist;
      var $neighbor_i;
      var $vertex;
      var $vertexp;
      var $dist=__stackBase__;
      $testall_addr=$testall;
      var $0=$testall_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248944)|0))>>2)];
      $facetlist=$1;
      label = 24; break;
    case 4: 
      var $2=HEAP32[((((5248956)|0))>>2)];
      $facetlist=$2;
      var $3=$facetlist;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $4=$facetlist;
      $facet=$4;
      label = 6; break;
    case 6: 
      var $5=$facet;
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 7; break; } else { var $8 = 0;label = 8; break; }
    case 7: 
      var $6=$facet;
      var $next=(($6+44)|0);
      var $7=HEAP32[(($next)>>2)];
      var $tobool4=(($7)|0)!=0;
      var $8 = $tobool4;label = 8; break;
    case 8: 
      var $8;
      if ($8) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $9=$facet;
      var $neighbors=(($9+56)|0);
      var $10=HEAP32[(($neighbors)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=HEAP32[(($p)>>2)];
      var $12=$11;
      $horizon=$12;
      var $13=$horizon;
      var $14=$13;
      var $bf_field_offs=(($14+76)|0);
      var $15=$bf_field_offs;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 13;
      var $bf_clear=$17 & 1;
      var $tobool5=(($bf_clear)|0)!=0;
      if ($tobool5) { label = 11; break; } else { label = 10; break; }
    case 10: 
      label = 65; break;
    case 11: 
      var $18=$facet;
      var $19=$18;
      var $bf_field_offs7=(($19+76)|0);
      var $20=$bf_field_offs7;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 16;
      var $bf_clear8=$22 & 1;
      var $tobool9=(($bf_clear8)|0)!=0;
      if ($tobool9) { label = 14; break; } else { label = 12; break; }
    case 12: 
      var $23=$facet;
      var $24=$23;
      var $bf_field_offs10=(($24+76)|0);
      var $25=$bf_field_offs10;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 >>> 21;
      var $bf_clear11=$27 & 1;
      var $tobool12=(($bf_clear11)|0)!=0;
      if ($tobool12) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $28=$facet;
      var $normal=(($28+24)|0);
      var $29=HEAP32[(($normal)>>2)];
      var $tobool14=(($29)|0)!=0;
      if ($tobool14) { label = 15; break; } else { label = 14; break; }
    case 14: 
      label = 65; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $30=$facet;
      var $next17=(($30+44)|0);
      var $31=HEAP32[(($next17)>>2)];
      $facet=$31;
      label = 6; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $32=HEAP32[((((5247076)|0))>>2)];
      var $tobool19=(($32)|0)!=0;
      if ($tobool19) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $33=HEAP32[((((5249164)|0))>>2)];
      var $tobool20=(($33)|0)!=0;
      if ($tobool20) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $34=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($34)|0) >= 2;
      if ($cmp) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($35, 2011, ((5302444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      $retval=1;
      label = 71; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $36=$facetlist;
      var $tobool26=(($36)|0)!=0;
      if ($tobool26) { label = 25; break; } else { label = 60; break; }
    case 25: 
      var $37=$facetlist;
      $facet=$37;
      label = 26; break;
    case 26: 
      var $38=$facet;
      var $tobool29=(($38)|0)!=0;
      if ($tobool29) { label = 27; break; } else { var $41 = 0;label = 28; break; }
    case 27: 
      var $39=$facet;
      var $next31=(($39+44)|0);
      var $40=HEAP32[(($next31)>>2)];
      var $tobool32=(($40)|0)!=0;
      var $41 = $tobool32;label = 28; break;
    case 28: 
      var $41;
      if ($41) { label = 29; break; } else { label = 59; break; }
    case 29: 
      var $42=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear35=$42 & 2147483647;
      var $inc=((($bf_clear35)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $43=$bf_value & 2147483647;
      var $44=HEAP32[(((((5249160)|0)))>>2)];
      var $45=$44 & -2147483648;
      var $46=$45 | $43;
      HEAP32[(((((5249160)|0)))>>2)]=$46;
      $neighbor_i=0;
      $horizon=0;
      $neighbor=0;
      var $47=$facet;
      var $neighbors36=(($47+56)|0);
      var $48=HEAP32[(($neighbors36)>>2)];
      var $tobool37=(($48)|0)!=0;
      if ($tobool37) { label = 30; break; } else { label = 43; break; }
    case 30: 
      var $49=$facet;
      var $neighbors39=(($49+56)|0);
      var $50=HEAP32[(($neighbors39)>>2)];
      var $e40=(($50+4)|0);
      var $arrayidx41=(($e40)|0);
      var $p42=$arrayidx41;
      var $51=$p42;
      $neighborp=$51;
      label = 31; break;
    case 31: 
      var $52=$neighborp;
      var $incdec_ptr=(($52+4)|0);
      $neighborp=$incdec_ptr;
      var $53=HEAP32[(($52)>>2)];
      $neighbor=$53;
      var $tobool44=(($53)|0)!=0;
      if ($tobool44) { label = 32; break; } else { label = 42; break; }
    case 32: 
      var $54=$neighbor_i;
      var $tobool46=(($54)|0)!=0;
      if ($tobool46) { label = 35; break; } else { label = 33; break; }
    case 33: 
      var $55=$testall_addr;
      var $tobool48=(($55)|0)!=0;
      if ($tobool48) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $56=$neighbor;
      $horizon=$56;
      var $57=$neighbor_i;
      var $inc50=((($57)+(1))|0);
      $neighbor_i=$inc50;
      label = 31; break;
    case 35: 
      var $58=$neighbor_i;
      var $inc52=((($58)+(1))|0);
      $neighbor_i=$inc52;
      var $59=$facet;
      var $vertices=(($59+48)|0);
      var $60=HEAP32[(($vertices)>>2)];
      var $e53=(($60+4)|0);
      var $arrayidx54=(($e53+($58<<2))|0);
      var $p55=$arrayidx54;
      var $61=HEAP32[(($p55)>>2)];
      var $62=$61;
      $vertex=$62;
      var $63=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear56=$63 & 2147483647;
      var $64=$vertex;
      var $bf_value57=$bf_clear56 & 2147483647;
      var $65=$64;
      var $bf_field_offs58=(($65+16)|0);
      var $66=$bf_field_offs58;
      var $67=$bf_value57 & 2147483647;
      var $68=HEAP32[(($66)>>2)];
      var $69=$68 & -2147483648;
      var $70=$69 | $67;
      HEAP32[(($66)>>2)]=$70;
      var $71=HEAP32[(((((5243460)|0)))>>2)];
      var $inc59=((($71)+(1))|0);
      HEAP32[(((((5243460)|0)))>>2)]=$inc59;
      var $72=$vertex;
      var $point=(($72+8)|0);
      var $73=HEAP32[(($point)>>2)];
      var $74=$neighbor;
      _qh_distplane($73, $74, $dist);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$76);
      var $cmp60=$75 >= $sub;
      if ($cmp60) { label = 36; break; } else { label = 41; break; }
    case 36: 
      HEAP32[((((5249164)|0))>>2)]=0;
      var $77=HEAP32[((((5247076)|0))>>2)];
      var $tobool62=(($77)|0)!=0;
      if ($tobool62) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $78=$testall_addr;
      var $tobool64=(($78)|0)!=0;
      if ($tobool64) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp66=$79 > $80;
      if ($cmp66) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 68; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 31; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $81=$testall_addr;
      var $tobool72=(($81)|0)!=0;
      if ($tobool72) { label = 57; break; } else { label = 44; break; }
    case 44: 
      $vertex=0;
      var $82=$horizon;
      var $vertices74=(($82+48)|0);
      var $83=HEAP32[(($vertices74)>>2)];
      var $tobool75=(($83)|0)!=0;
      if ($tobool75) { label = 45; break; } else { label = 56; break; }
    case 45: 
      var $84=$horizon;
      var $vertices77=(($84+48)|0);
      var $85=HEAP32[(($vertices77)>>2)];
      var $e78=(($85+4)|0);
      var $arrayidx79=(($e78)|0);
      var $p80=$arrayidx79;
      var $86=$p80;
      $vertexp=$86;
      label = 46; break;
    case 46: 
      var $87=$vertexp;
      var $incdec_ptr82=(($87+4)|0);
      $vertexp=$incdec_ptr82;
      var $88=HEAP32[(($87)>>2)];
      $vertex=$88;
      var $tobool83=(($88)|0)!=0;
      if ($tobool83) { label = 47; break; } else { label = 55; break; }
    case 47: 
      var $89=$vertex;
      var $90=$89;
      var $bf_field_offs85=(($90+16)|0);
      var $91=$bf_field_offs85;
      var $92=HEAP32[(($91)>>2)];
      var $bf_clear86=$92 & 2147483647;
      var $93=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear87=$93 & 2147483647;
      var $cmp88=(($bf_clear86)|0)!=(($bf_clear87)|0);
      if ($cmp88) { label = 48; break; } else { label = 54; break; }
    case 48: 
      var $94=HEAP32[(((((5243460)|0)))>>2)];
      var $inc90=((($94)+(1))|0);
      HEAP32[(((((5243460)|0)))>>2)]=$inc90;
      var $95=$vertex;
      var $point91=(($95+8)|0);
      var $96=HEAP32[(($point91)>>2)];
      var $97=$facet;
      _qh_distplane($96, $97, $dist);
      var $98=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub92=(-$99);
      var $cmp93=$98 >= $sub92;
      if ($cmp93) { label = 49; break; } else { label = 53; break; }
    case 49: 
      HEAP32[((((5249164)|0))>>2)]=0;
      var $100=HEAP32[((((5247076)|0))>>2)];
      var $tobool95=(($100)|0)!=0;
      if ($tobool95) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $101=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $102=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp97=$101 > $102;
      if ($cmp97) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 68; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      label = 46; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $103=$facet;
      var $next106=(($103+44)|0);
      var $104=HEAP32[(($next106)>>2)];
      $facet=$104;
      label = 26; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $105=HEAP32[((((5247040)|0))>>2)];
      var $cmp109=(($105)|0) >= 2;
      if ($cmp109) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $106=HEAP32[((((5248924)|0))>>2)];
      var $107=$testall_addr;
      var $108=HEAP32[((((5247076)|0))>>2)];
      var $tobool111=(($108)|0)!=0;
      if ($tobool111) { label = 62; break; } else { var $110 = 0;label = 63; break; }
    case 62: 
      var $109=$testall_addr;
      var $tobool113=(($109)|0)!=0;
      var $lnot=$tobool113 ^ 1;
      var $110 = $lnot;label = 63; break;
    case 63: 
      var $110;
      var $cond=$110 ? (((5297580)|0)) : (((5296004)|0));
      _qh_fprintf($106, 2012, ((5299944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$107,HEAP32[(((tempInt)+(4))>>2)]=$cond,tempInt));
      label = 64; break;
    case 64: 
      $retval=1;
      label = 71; break;
    case 65: 
      HEAP32[((((5249164)|0))>>2)]=0;
      var $111=HEAP32[((((5247040)|0))>>2)];
      var $cmp116=(($111)|0) >= 2;
      if ($cmp116) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $112=HEAP32[((((5248924)|0))>>2)];
      var $113=$facet;
      var $id=(($113+72)|0);
      var $114=HEAP32[(($id)>>2)];
      _qh_fprintf($112, 2013, ((5294080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$114,tempInt));
      label = 67; break;
    case 67: 
      $retval=0;
      label = 71; break;
    case 68: 
      var $115=HEAP32[((((5247040)|0))>>2)];
      var $cmp119=(($115)|0) >= 2;
      if ($cmp119) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $116=HEAP32[((((5248924)|0))>>2)];
      var $117=$facet;
      var $id121=(($117+72)|0);
      var $118=HEAP32[(($id121)>>2)];
      var $119=$neighbor;
      var $id122=(($119+72)|0);
      var $120=HEAP32[(($id122)>>2)];
      var $121=$vertex;
      var $122=$121;
      var $bf_field_offs123=(($122+20)|0);
      var $123=$bf_field_offs123;
      var $124=HEAP32[(($123)>>2)];
      var $bf_clear124=$124 & 16777215;
      var $125=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($116, 2014, ((5292448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$118,HEAP32[(((tempInt)+(4))>>2)]=$120,HEAP32[(((tempInt)+(8))>>2)]=$bf_clear124,(HEAPF64[(tempDoublePtr)>>3]=$125,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 70; break;
    case 70: 
      $retval=0;
      label = 71; break;
    case 71: 
      var $126=$retval;
      STACKTOP = __stackBase__;
      return $126;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkzero["X"]=1;

function _qh_mark_dupridges($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $nummerge;
      var $merge;
      var $mergep;
      $facetlist_addr=$facetlist;
      $nummerge=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 4028, ((5267296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$facetlist_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 24; break; }
    case 5: 
      var $3=$facetlist_addr;
      $facet=$3;
      label = 6; break;
    case 6: 
      var $4=$facet;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $7 = 0;label = 8; break; }
    case 7: 
      var $5=$facet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool3=(($6)|0)!=0;
      var $7 = $tobool3;label = 8; break;
    case 8: 
      var $7;
      if ($7) { label = 9; break; } else { label = 23; break; }
    case 9: 
      var $8=$facet;
      var $9=$8;
      var $bf_field_offs=(($9+76)|0);
      var $10=$bf_field_offs;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 21;
      var $bf_clear=$12 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 21; break; }
    case 10: 
      $neighbor=0;
      var $13=$facet;
      var $neighbors=(($13+56)|0);
      var $14=HEAP32[(($neighbors)>>2)];
      var $tobool6=(($14)|0)!=0;
      if ($tobool6) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $15=$facet;
      var $neighbors8=(($15+56)|0);
      var $16=HEAP32[(($neighbors8)>>2)];
      var $e=(($16+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $17=$p;
      $neighborp=$17;
      label = 12; break;
    case 12: 
      var $18=$neighborp;
      var $incdec_ptr=(($18+4)|0);
      $neighborp=$incdec_ptr;
      var $19=HEAP32[(($18)>>2)];
      $neighbor=$19;
      var $tobool10=(($19)|0)!=0;
      if ($tobool10) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $20=$neighbor;
      var $cmp12=(($20)|0)==2;
      if ($cmp12) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $21=$facet;
      var $22=$21;
      var $bf_field_offs14=(($22+76)|0);
      var $23=$bf_field_offs14;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & -4194305;
      var $26=$25 | 4194304;
      HEAP32[(($23)>>2)]=$26;
      label = 12; break;
    case 15: 
      var $27=$neighbor;
      var $28=$27;
      var $bf_field_offs16=(($28+76)|0);
      var $29=$bf_field_offs16;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 21;
      var $bf_clear17=$31 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $32=$neighbor;
      var $neighbors19=(($32+56)|0);
      var $33=HEAP32[(($neighbors19)>>2)];
      var $34=$facet;
      var $35=$34;
      var $call=_qh_setin($33, $35);
      var $tobool20=(($call)|0)!=0;
      if ($tobool20) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $36=$facet;
      var $37=$neighbor;
      _qh_appendmergeset($36, $37, 5, 0);
      var $38=$facet;
      var $39=$38;
      var $bf_field_offs22=(($39+76)|0);
      var $40=$bf_field_offs22;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 & -8388609;
      var $43=$42 | 8388608;
      HEAP32[(($40)>>2)]=$43;
      var $44=$facet;
      var $45=$44;
      var $bf_field_offs23=(($45+76)|0);
      var $46=$bf_field_offs23;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 & -4194305;
      var $49=$48 | 4194304;
      HEAP32[(($46)>>2)]=$49;
      var $50=$nummerge;
      var $inc=((($50)+(1))|0);
      $nummerge=$inc;
      label = 18; break;
    case 18: 
      label = 12; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $51=$facet;
      var $next27=(($51+44)|0);
      var $52=HEAP32[(($next27)>>2)];
      $facet=$52;
      label = 6; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $53=$nummerge;
      var $tobool30=(($53)|0)!=0;
      if ($tobool30) { label = 26; break; } else { label = 25; break; }
    case 25: 
      label = 46; break;
    case 26: 
      var $54=$facetlist_addr;
      var $tobool33=(($54)|0)!=0;
      if ($tobool33) { label = 27; break; } else { label = 37; break; }
    case 27: 
      var $55=$facetlist_addr;
      $facet=$55;
      label = 28; break;
    case 28: 
      var $56=$facet;
      var $tobool36=(($56)|0)!=0;
      if ($tobool36) { label = 29; break; } else { var $59 = 0;label = 30; break; }
    case 29: 
      var $57=$facet;
      var $next38=(($57+44)|0);
      var $58=HEAP32[(($next38)>>2)];
      var $tobool39=(($58)|0)!=0;
      var $59 = $tobool39;label = 30; break;
    case 30: 
      var $59;
      if ($59) { label = 31; break; } else { label = 36; break; }
    case 31: 
      var $60=$facet;
      var $61=$60;
      var $bf_field_offs42=(($61+76)|0);
      var $62=$bf_field_offs42;
      var $63=HEAP32[(($62)>>2)];
      var $64=$63 >>> 22;
      var $bf_clear43=$64 & 1;
      var $tobool44=(($bf_clear43)|0)!=0;
      if ($tobool44) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $65=$facet;
      var $66=$65;
      var $bf_field_offs46=(($66+76)|0);
      var $67=$bf_field_offs46;
      var $68=HEAP32[(($67)>>2)];
      var $69=$68 >>> 23;
      var $bf_clear47=$69 & 1;
      var $tobool48=(($bf_clear47)|0)!=0;
      if ($tobool48) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $70=$facet;
      _qh_makeridges($70);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $71=$facet;
      var $next52=(($71+44)|0);
      var $72=HEAP32[(($next52)>>2)];
      $facet=$72;
      label = 28; break;
    case 36: 
      label = 37; break;
    case 37: 
      $merge=0;
      var $73=HEAP32[((((5249172)|0))>>2)];
      var $tobool55=(($73)|0)!=0;
      if ($tobool55) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $74=HEAP32[((((5249172)|0))>>2)];
      var $e57=(($74+4)|0);
      var $arrayidx58=(($e57)|0);
      var $p59=$arrayidx58;
      var $75=$p59;
      $mergep=$75;
      label = 39; break;
    case 39: 
      var $76=$mergep;
      var $incdec_ptr61=(($76+4)|0);
      $mergep=$incdec_ptr61;
      var $77=HEAP32[(($76)>>2)];
      $merge=$77;
      var $tobool62=(($77)|0)!=0;
      if ($tobool62) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $78=$merge;
      var $type=(($78+16)|0);
      var $79=HEAP32[(($type)>>2)];
      var $cmp64=(($79)|0)==5;
      if ($cmp64) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $80=$merge;
      var $facet2=(($80+12)|0);
      var $81=HEAP32[(($facet2)>>2)];
      var $neighbors66=(($81+56)|0);
      var $82=$merge;
      var $facet1=(($82+8)|0);
      var $83=HEAP32[(($facet1)>>2)];
      var $84=$83;
      _qh_setappend($neighbors66, $84);
      var $85=$merge;
      var $facet167=(($85+8)|0);
      var $86=HEAP32[(($facet167)>>2)];
      _qh_makeridges($86);
      label = 42; break;
    case 42: 
      label = 39; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $87=HEAP32[((((5247040)|0))>>2)];
      var $cmp71=(($87)|0) >= 1;
      if ($cmp71) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $88=HEAP32[((((5248924)|0))>>2)];
      var $89=$nummerge;
      _qh_fprintf($88, 1012, ((5267076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$89,tempInt));
      label = 46; break;
    case 46: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mark_dupridges["X"]=1;

function _qh_mergecycle_all($facetlist, $wasmerge) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $wasmerge_addr;
      var $facet;
      var $same;
      var $prev;
      var $horizon;
      var $samecycle;
      var $nextfacet;
      var $nextsame;
      var $apex;
      var $vertex;
      var $vertexp;
      var $cycles;
      var $total;
      var $facets;
      var $nummerge;
      $facetlist_addr=$facetlist;
      $wasmerge_addr=$wasmerge;
      $samecycle=0;
      $cycles=0;
      $total=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 2031, ((5259740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$facetlist_addr;
      $facet=$2;
      label = 5; break;
    case 5: 
      var $3=$facet;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $6 = 0;label = 7; break; }
    case 6: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      $nextfacet=$5;
      var $tobool1=(($5)|0)!=0;
      var $6 = $tobool1;label = 7; break;
    case 7: 
      var $6;
      if ($6) { label = 8; break; } else { label = 47; break; }
    case 8: 
      var $7=$facet;
      var $normal=(($7+24)|0);
      var $8=HEAP32[(($normal)>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 46; break;
    case 10: 
      var $9=$facet;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 25;
      var $bf_clear=$13 & 1;
      var $tobool5=(($bf_clear)|0)!=0;
      if ($tobool5) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $14=HEAP32[((((5248924)|0))>>2)];
      var $15=$facet;
      var $id=(($15+72)|0);
      var $16=HEAP32[(($id)>>2)];
      _qh_fprintf($14, 6225, ((5259424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=$facet;
      _qh_errexit(5, $17, 0);
      label = 12; break;
    case 12: 
      var $18=$facet;
      var $neighbors=(($18+56)|0);
      var $19=HEAP32[(($neighbors)>>2)];
      var $e=(($19+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $20=HEAP32[(($p)>>2)];
      var $21=$20;
      $horizon=$21;
      var $22=$facet;
      var $f=(($22+28)|0);
      var $samecycle8=$f;
      var $23=HEAP32[(($samecycle8)>>2)];
      var $24=$facet;
      var $cmp9=(($23)|0)==(($24)|0);
      if ($cmp9) { label = 13; break; } else { label = 21; break; }
    case 13: 
      var $25=HEAP32[(((((5244268)|0)))>>2)];
      var $inc=((($25)+(1))|0);
      HEAP32[(((((5244268)|0)))>>2)]=$inc;
      var $26=$facet;
      var $vertices=(($26+48)|0);
      var $27=HEAP32[(($vertices)>>2)];
      var $e11=(($27+4)|0);
      var $arrayidx12=(($e11)|0);
      var $p13=$arrayidx12;
      var $28=HEAP32[(($p13)>>2)];
      var $29=$28;
      $apex=$29;
      $vertex=0;
      var $30=$facet;
      var $vertices14=(($30+48)|0);
      var $31=HEAP32[(($vertices14)>>2)];
      var $tobool15=(($31)|0)!=0;
      if ($tobool15) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $32=$facet;
      var $vertices17=(($32+48)|0);
      var $33=HEAP32[(($vertices17)>>2)];
      var $e18=(($33+4)|0);
      var $arrayidx19=(($e18)|0);
      var $p20=$arrayidx19;
      var $34=$p20;
      $vertexp=$34;
      label = 15; break;
    case 15: 
      var $35=$vertexp;
      var $incdec_ptr=(($35+4)|0);
      $vertexp=$incdec_ptr;
      var $36=HEAP32[(($35)>>2)];
      $vertex=$36;
      var $tobool22=(($36)|0)!=0;
      if ($tobool22) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $37=$vertex;
      var $38=$apex;
      var $cmp24=(($37)|0)!=(($38)|0);
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$vertex;
      var $40=$39;
      var $bf_field_offs26=(($40+20)|0);
      var $41=$bf_field_offs26;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & -536870913;
      var $44=$43 | 536870912;
      HEAP32[(($41)>>2)]=$44;
      label = 18; break;
    case 18: 
      label = 15; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $45=$horizon;
      var $f29=(($45+28)|0);
      var $newcycle=$f29;
      HEAP32[(($newcycle)>>2)]=0;
      var $46=$facet;
      var $47=$horizon;
      _qh_mergefacet($46, $47, 0, 0, 1);
      label = 45; break;
    case 21: 
      var $48=$facet;
      $samecycle=$48;
      $facets=0;
      var $49=$facet;
      $prev=$49;
      var $50=$facet;
      var $f30=(($50+28)|0);
      var $samecycle31=$f30;
      var $51=HEAP32[(($samecycle31)>>2)];
      $same=$51;
      label = 22; break;
    case 22: 
      var $52=$same;
      var $tobool33=(($52)|0)!=0;
      if ($tobool33) { label = 23; break; } else { label = 34; break; }
    case 23: 
      var $53=$same;
      var $f35=(($53+28)|0);
      var $samecycle36=$f35;
      var $54=HEAP32[(($samecycle36)>>2)];
      $nextsame=$54;
      var $55=$same;
      var $56=$55;
      var $bf_field_offs37=(($56+76)|0);
      var $57=$bf_field_offs37;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 >>> 26;
      var $bf_clear38=$59 & 1;
      var $tobool39=(($bf_clear38)|0)!=0;
      if ($tobool39) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $60=$same;
      var $61=$60;
      var $bf_field_offs40=(($61+76)|0);
      var $62=$bf_field_offs40;
      var $63=HEAP32[(($62)>>2)];
      var $64=$63 >>> 11;
      var $bf_clear41=$64 & 1;
      var $tobool42=(($bf_clear41)|0)!=0;
      if ($tobool42) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $65=$same;
      _qh_infiniteloop($65);
      label = 26; break;
    case 26: 
      var $66=$same;
      var $67=$66;
      var $bf_field_offs45=(($67+76)|0);
      var $68=$bf_field_offs45;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & -67108865;
      var $71=$70 | 67108864;
      HEAP32[(($68)>>2)]=$71;
      var $72=$same;
      var $normal46=(($72+24)|0);
      var $73=HEAP32[(($normal46)>>2)];
      var $tobool47=(($73)|0)!=0;
      if ($tobool47) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $74=$same;
      var $f49=(($74+28)|0);
      var $samecycle50=$f49;
      var $75=HEAP32[(($samecycle50)>>2)];
      var $76=$prev;
      var $f51=(($76+28)|0);
      var $samecycle52=$f51;
      HEAP32[(($samecycle52)>>2)]=$75;
      var $77=$same;
      var $f53=(($77+28)|0);
      var $samecycle54=$f53;
      HEAP32[(($samecycle54)>>2)]=0;
      label = 29; break;
    case 28: 
      var $78=$same;
      $prev=$78;
      var $79=$facets;
      var $inc56=((($79)+(1))|0);
      $facets=$inc56;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $80=$same;
      var $81=$facet;
      var $cmp58=(($80)|0)==(($81)|0);
      if ($cmp58) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond = 0;label = 33; break;
    case 32: 
      var $82=$nextsame;
      var $cond = $82;label = 33; break;
    case 33: 
      var $cond;
      $same=$cond;
      label = 22; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $83=$nextfacet;
      var $tobool60=(($83)|0)!=0;
      if ($tobool60) { label = 36; break; } else { var $89 = 0;label = 37; break; }
    case 36: 
      var $84=$nextfacet;
      var $85=$84;
      var $bf_field_offs62=(($85+76)|0);
      var $86=$bf_field_offs62;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 >>> 26;
      var $bf_clear63=$88 & 1;
      var $tobool64=(($bf_clear63)|0)!=0;
      var $89 = $tobool64;label = 37; break;
    case 37: 
      var $89;
      if ($89) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $90=$nextfacet;
      var $next66=(($90+44)|0);
      var $91=HEAP32[(($next66)>>2)];
      $nextfacet=$91;
      label = 35; break;
    case 39: 
      var $92=$horizon;
      var $f67=(($92+28)|0);
      var $newcycle68=$f67;
      HEAP32[(($newcycle68)>>2)]=0;
      var $93=$samecycle;
      var $94=$horizon;
      _qh_mergecycle($93, $94);
      var $95=$horizon;
      var $96=$95;
      var $bf_field_offs69=(($96+76)|0);
      var $97=$bf_field_offs69;
      var $98=HEAP32[(($97)>>2)];
      var $bf_clear70=$98 & 511;
      var $99=$facets;
      var $add=((($bf_clear70)+($99))|0);
      $nummerge=$add;
      var $100=$nummerge;
      var $cmp71=(($100)|0) > 511;
      if ($cmp71) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $101=$horizon;
      var $102=$101;
      var $bf_field_offs73=(($102+76)|0);
      var $103=$bf_field_offs73;
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 & -512;
      var $106=$105 | 511;
      HEAP32[(($103)>>2)]=$106;
      label = 42; break;
    case 41: 
      var $107=$nummerge;
      var $conv=(($107) & 65535);
      var $conv75=(($conv)&65535);
      var $108=$horizon;
      var $bf_value=$conv75 & 511;
      var $109=$108;
      var $bf_field_offs76=(($109+76)|0);
      var $110=$bf_field_offs76;
      var $111=$bf_value & 511;
      var $112=HEAP32[(($110)>>2)];
      var $113=$112 & -512;
      var $114=$113 | $111;
      HEAP32[(($110)>>2)]=$114;
      label = 42; break;
    case 42: 
      var $115=HEAP32[(((((5243316)|0)))>>2)];
      var $inc78=((($115)+(1))|0);
      HEAP32[(((((5243316)|0)))>>2)]=$inc78;
      var $116=$facets;
      var $117=$total;
      var $add79=((($117)+($116))|0);
      $total=$add79;
      var $118=$facets;
      var $119=HEAP32[(((((5243308)|0)))>>2)];
      var $add80=((($119)+($118))|0);
      HEAP32[(((((5243308)|0)))>>2)]=$add80;
      var $120=HEAP32[(((((5243300)|0)))>>2)];
      var $121=$facets;
      var $cmp81=(($120)|0) < (($121)|0);
      if ($cmp81) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $122=$facets;
      HEAP32[(((((5243300)|0)))>>2)]=$122;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $123=$cycles;
      var $inc86=((($123)+(1))|0);
      $cycles=$inc86;
      label = 46; break;
    case 46: 
      var $124=$nextfacet;
      $facet=$124;
      label = 5; break;
    case 47: 
      var $125=$cycles;
      var $tobool89=(($125)|0)!=0;
      if ($tobool89) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $126=$wasmerge_addr;
      HEAP32[(($126)>>2)]=1;
      label = 49; break;
    case 49: 
      var $127=HEAP32[((((5247040)|0))>>2)];
      var $cmp92=(($127)|0) >= 1;
      if ($cmp92) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $128=HEAP32[((((5248924)|0))>>2)];
      var $129=$cycles;
      _qh_fprintf($128, 1013, ((5259072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$129,tempInt));
      label = 51; break;
    case 51: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle_all["X"]=1;

function _qh_forcedmerges($wasmerge) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $wasmerge_addr;
      var $facet1;
      var $facet2;
      var $merge;
      var $mergep;
      var $dist1;
      var $dist2;
      var $mindist1=__stackBase__;
      var $mindist2=(__stackBase__)+(8);
      var $maxdist1=(__stackBase__)+(16);
      var $maxdist2=(__stackBase__)+(24);
      var $othermerges=(__stackBase__)+(32);
      var $nummerge;
      var $numflip;
      $wasmerge_addr=$wasmerge;
      $nummerge=0;
      $numflip=0;
      var $0=HEAP32[((((5247448)|0))>>2)];
      var $sub=((($0)-(1))|0);
      var $1=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp=(($sub)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$2;
      HEAP32[((((5242936)|0))>>2)]=$2;
      label = 4; break;
    case 4: 
      var $3=HEAP32[((((5247040)|0))>>2)];
      var $cmp1=(($3)|0) >= 4;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($4, 4025, ((5271216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      var $call=_qh_settemppop();
      HEAP32[(($othermerges)>>2)]=$call;
      var $5=HEAP32[((((5248940)|0))>>2)];
      var $call4=_qh_settemp($5);
      HEAP32[((((5249172)|0))>>2)]=$call4;
      var $6=HEAP32[(($othermerges)>>2)];
      _qh_settemppush($6);
      $merge=0;
      var $7=HEAP32[(($othermerges)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 37; break; }
    case 7: 
      var $8=HEAP32[(($othermerges)>>2)];
      var $e=(($8+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $9=$p;
      $mergep=$9;
      label = 8; break;
    case 8: 
      var $10=$mergep;
      var $incdec_ptr=(($10+4)|0);
      $mergep=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $merge=$11;
      var $tobool6=(($11)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 36; break; }
    case 9: 
      var $12=$merge;
      var $type=(($12+16)|0);
      var $13=HEAP32[(($type)>>2)];
      var $cmp7=(($13)|0)!=5;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 8; break;
    case 11: 
      var $14=$merge;
      var $facet110=(($14+8)|0);
      var $15=HEAP32[(($facet110)>>2)];
      $facet1=$15;
      var $16=$merge;
      var $facet211=(($16+12)|0);
      var $17=HEAP32[(($facet211)>>2)];
      $facet2=$17;
      label = 12; break;
    case 12: 
      var $18=$facet1;
      var $19=$18;
      var $bf_field_offs=(($19+76)|0);
      var $20=$bf_field_offs;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 11;
      var $bf_clear=$22 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $23=$facet1;
      var $f=(($23+28)|0);
      var $replace=$f;
      var $24=HEAP32[(($replace)>>2)];
      $facet1=$24;
      label = 12; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $25=$facet2;
      var $26=$25;
      var $bf_field_offs14=(($26+76)|0);
      var $27=$bf_field_offs14;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 >>> 11;
      var $bf_clear15=$29 & 1;
      var $tobool16=(($bf_clear15)|0)!=0;
      if ($tobool16) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=$facet2;
      var $f18=(($30+28)|0);
      var $replace19=$f18;
      var $31=HEAP32[(($replace19)>>2)];
      $facet2=$31;
      label = 15; break;
    case 17: 
      var $32=$facet1;
      var $33=$facet2;
      var $cmp21=(($32)|0)==(($33)|0);
      if ($cmp21) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 8; break;
    case 19: 
      var $34=$facet2;
      var $neighbors=(($34+56)|0);
      var $35=HEAP32[(($neighbors)>>2)];
      var $36=$facet1;
      var $37=$36;
      var $call24=_qh_setin($35, $37);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $38=HEAP32[((((5248924)|0))>>2)];
      var $39=$merge;
      var $facet127=(($39+8)|0);
      var $40=HEAP32[(($facet127)>>2)];
      var $id=(($40+72)|0);
      var $41=HEAP32[(($id)>>2)];
      var $42=$merge;
      var $facet228=(($42+12)|0);
      var $43=HEAP32[(($facet228)>>2)];
      var $id29=(($43+72)|0);
      var $44=HEAP32[(($id29)>>2)];
      var $45=$facet1;
      var $id30=(($45+72)|0);
      var $46=HEAP32[(($id30)>>2)];
      var $47=$facet2;
      var $id31=(($47+72)|0);
      var $48=HEAP32[(($id31)>>2)];
      _qh_fprintf($38, 6096, ((5270564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,HEAP32[(((tempInt)+(4))>>2)]=$44,HEAP32[(((tempInt)+(8))>>2)]=$46,HEAP32[(((tempInt)+(12))>>2)]=$48,tempInt));
      var $49=$facet1;
      var $50=$facet2;
      _qh_errexit2(5, $49, $50);
      label = 21; break;
    case 21: 
      var $51=HEAP32[((((5247448)|0))>>2)];
      var $sub33=((($51)-(1))|0);
      var $52=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp34=(($sub33)|0)==(($52)|0);
      if ($cmp34) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $53=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$53;
      HEAP32[((((5242936)|0))>>2)]=$53;
      label = 23; break;
    case 23: 
      var $54=$facet1;
      var $55=$facet2;
      var $call37=_qh_getdistance($54, $55, $mindist1, $maxdist1);
      $dist1=$call37;
      var $56=$facet2;
      var $57=$facet1;
      var $call38=_qh_getdistance($56, $57, $mindist2, $maxdist2);
      $dist2=$call38;
      var $58=HEAP32[((((5247040)|0))>>2)];
      var $tobool39=(($58)|0)!=0;
      if ($tobool39) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $59=HEAP32[((((5248924)|0))>>2)];
      var $60=$facet1;
      var $id41=(($60+72)|0);
      var $61=HEAP32[(($id41)>>2)];
      var $62=$facet2;
      var $id42=(($62+72)|0);
      var $63=HEAP32[(($id42)>>2)];
      var $64=$dist1;
      var $65=$dist2;
      var $66=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($59, 16, ((5270096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,HEAP32[(((tempInt)+(4))>>2)]=$63,(HEAPF64[(tempDoublePtr)>>3]=$64,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$65,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(24))>>2)]=$66,tempInt));
      label = 25; break;
    case 25: 
      var $67=$dist1;
      var $68=$dist2;
      var $cmp44=$67 < $68;
      if ($cmp44) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$facet1;
      var $70=$facet2;
      _qh_mergefacet($69, $70, $mindist1, $maxdist1, 0);
      label = 28; break;
    case 27: 
      var $71=$facet2;
      var $72=$facet1;
      _qh_mergefacet($71, $72, $mindist2, $maxdist2, 0);
      var $73=$dist2;
      $dist1=$73;
      var $74=$facet2;
      $facet1=$74;
      label = 28; break;
    case 28: 
      var $75=$facet1;
      var $76=$75;
      var $bf_field_offs47=(($76+76)|0);
      var $77=$bf_field_offs47;
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 >>> 16;
      var $bf_clear48=$79 & 1;
      var $tobool49=(($bf_clear48)|0)!=0;
      if ($tobool49) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $80=HEAP32[(((((5243956)|0)))>>2)];
      var $inc=((($80)+(1))|0);
      HEAP32[(((((5243956)|0)))>>2)]=$inc;
      var $81=$numflip;
      var $inc51=((($81)+(1))|0);
      $numflip=$inc51;
      label = 31; break;
    case 30: 
      var $82=$nummerge;
      var $inc53=((($82)+(1))|0);
      $nummerge=$inc53;
      label = 31; break;
    case 31: 
      var $83=HEAP32[((((5247316)|0))>>2)];
      var $tobool55=(($83)|0)!=0;
      if ($tobool55) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $84=HEAP32[(((((5243588)|0)))>>2)];
      var $inc57=((($84)+(1))|0);
      HEAP32[(((((5243588)|0)))>>2)]=$inc57;
      var $85=$dist1;
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($86)+($85);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5243604)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243604)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $87=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243596)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243596)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $88=$dist1;
      var $cmp58=$87 < $88;
      if ($cmp58) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $89=$dist1;
      (HEAPF64[(tempDoublePtr)>>3]=$89,HEAP32[((((5243596)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243596)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 8; break;
    case 36: 
      label = 37; break;
    case 37: 
      $merge=0;
      var $90=HEAP32[(($othermerges)>>2)];
      var $tobool63=(($90)|0)!=0;
      if ($tobool63) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $91=HEAP32[(($othermerges)>>2)];
      var $e65=(($91+4)|0);
      var $arrayidx66=(($e65)|0);
      var $p67=$arrayidx66;
      var $92=$p67;
      $mergep=$92;
      label = 39; break;
    case 39: 
      var $93=$mergep;
      var $incdec_ptr69=(($93+4)|0);
      $mergep=$incdec_ptr69;
      var $94=HEAP32[(($93)>>2)];
      $merge=$94;
      var $tobool70=(($94)|0)!=0;
      if ($tobool70) { label = 40; break; } else { label = 44; break; }
    case 40: 
      var $95=$merge;
      var $type72=(($95+16)|0);
      var $96=HEAP32[(($type72)>>2)];
      var $cmp73=(($96)|0)==5;
      if ($cmp73) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $97=$merge;
      var $98=$97;
      _qh_memfree($98, 20);
      label = 43; break;
    case 42: 
      var $99=$merge;
      var $100=$99;
      _qh_setappend(((5249172)|0), $100);
      label = 43; break;
    case 43: 
      label = 39; break;
    case 44: 
      label = 45; break;
    case 45: 
      _qh_settempfree($othermerges);
      var $101=$nummerge;
      var $tobool79=(($101)|0)!=0;
      if ($tobool79) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $102=$wasmerge_addr;
      HEAP32[(($102)>>2)]=1;
      label = 47; break;
    case 47: 
      var $103=HEAP32[((((5247040)|0))>>2)];
      var $cmp82=(($103)|0) >= 1;
      if ($cmp82) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $104=HEAP32[((((5248924)|0))>>2)];
      var $105=$nummerge;
      var $106=$numflip;
      _qh_fprintf($104, 1011, ((5269212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$106,tempInt));
      label = 49; break;
    case 49: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_forcedmerges["X"]=1;

function _qh_degen_redundant_neighbors($facet, $delfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $delfacet_addr;
      var $vertex;
      var $vertexp;
      var $neighbor;
      var $neighborp;
      var $size;
      $facet_addr=$facet;
      $delfacet_addr=$delfacet;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$delfacet_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$delfacet_addr;
      var $id1=(($5+72)|0);
      var $6=HEAP32[(($id1)>>2)];
      var $cond = $6;label = 6; break;
    case 5: 
      var $cond = -1;label = 6; break;
    case 6: 
      var $cond;
      _qh_fprintf($1, 4022, ((5282972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$cond,tempInt));
      label = 7; break;
    case 7: 
      var $7=$facet_addr;
      var $neighbors=(($7+56)|0);
      var $8=HEAP32[(($neighbors)>>2)];
      var $call=_qh_setsize($8);
      $size=$call;
      var $9=HEAP32[((((5247508)|0))>>2)];
      var $cmp2=(($call)|0) < (($9)|0);
      if ($cmp2) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $10=$facet_addr;
      var $11=$facet_addr;
      _qh_appendmergeset($10, $11, 6, 0);
      var $12=HEAP32[((((5247040)|0))>>2)];
      var $cmp4=(($12)|0) >= 2;
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=HEAP32[((((5248924)|0))>>2)];
      var $14=$facet_addr;
      var $id6=(($14+72)|0);
      var $15=HEAP32[(($id6)>>2)];
      var $16=$size;
      _qh_fprintf($13, 2017, ((5280888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=$16,tempInt));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$delfacet_addr;
      var $tobool9=(($17)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $18=$facet_addr;
      $delfacet_addr=$18;
      label = 13; break;
    case 13: 
      var $19=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$19 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $20=$bf_value & 2147483647;
      var $21=HEAP32[(((((5249160)|0)))>>2)];
      var $22=$21 & -2147483648;
      var $23=$22 | $20;
      HEAP32[(((((5249160)|0)))>>2)]=$23;
      $vertex=0;
      var $24=$facet_addr;
      var $vertices=(($24+48)|0);
      var $25=HEAP32[(($vertices)>>2)];
      var $tobool12=(($25)|0)!=0;
      if ($tobool12) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $26=$facet_addr;
      var $vertices14=(($26+48)|0);
      var $27=HEAP32[(($vertices14)>>2)];
      var $e=(($27+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $28=$p;
      $vertexp=$28;
      label = 15; break;
    case 15: 
      var $29=$vertexp;
      var $incdec_ptr=(($29+4)|0);
      $vertexp=$incdec_ptr;
      var $30=HEAP32[(($29)>>2)];
      $vertex=$30;
      var $tobool15=(($30)|0)!=0;
      if ($tobool15) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $31=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear16=$31 & 2147483647;
      var $32=$vertex;
      var $bf_value17=$bf_clear16 & 2147483647;
      var $33=$32;
      var $bf_field_offs=(($33+16)|0);
      var $34=$bf_field_offs;
      var $35=$bf_value17 & 2147483647;
      var $36=HEAP32[(($34)>>2)];
      var $37=$36 & -2147483648;
      var $38=$37 | $35;
      HEAP32[(($34)>>2)]=$38;
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      $neighbor=0;
      var $39=$delfacet_addr;
      var $neighbors19=(($39+56)|0);
      var $40=HEAP32[(($neighbors19)>>2)];
      var $tobool20=(($40)|0)!=0;
      if ($tobool20) { label = 19; break; } else { label = 36; break; }
    case 19: 
      var $41=$delfacet_addr;
      var $neighbors22=(($41+56)|0);
      var $42=HEAP32[(($neighbors22)>>2)];
      var $e23=(($42+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $43=$p25;
      $neighborp=$43;
      label = 20; break;
    case 20: 
      var $44=$neighborp;
      var $incdec_ptr27=(($44+4)|0);
      $neighborp=$incdec_ptr27;
      var $45=HEAP32[(($44)>>2)];
      $neighbor=$45;
      var $tobool28=(($45)|0)!=0;
      if ($tobool28) { label = 21; break; } else { label = 35; break; }
    case 21: 
      var $46=$neighbor;
      var $47=$facet_addr;
      var $cmp30=(($46)|0)==(($47)|0);
      if ($cmp30) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 20; break;
    case 23: 
      $vertex=0;
      var $48=$neighbor;
      var $vertices33=(($48+48)|0);
      var $49=HEAP32[(($vertices33)>>2)];
      var $tobool34=(($49)|0)!=0;
      if ($tobool34) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $50=$neighbor;
      var $vertices36=(($50+48)|0);
      var $51=HEAP32[(($vertices36)>>2)];
      var $e37=(($51+4)|0);
      var $arrayidx38=(($e37)|0);
      var $p39=$arrayidx38;
      var $52=$p39;
      $vertexp=$52;
      label = 25; break;
    case 25: 
      var $53=$vertexp;
      var $incdec_ptr41=(($53+4)|0);
      $vertexp=$incdec_ptr41;
      var $54=HEAP32[(($53)>>2)];
      $vertex=$54;
      var $tobool42=(($54)|0)!=0;
      if ($tobool42) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $55=$vertex;
      var $56=$55;
      var $bf_field_offs44=(($56+16)|0);
      var $57=$bf_field_offs44;
      var $58=HEAP32[(($57)>>2)];
      var $bf_clear45=$58 & 2147483647;
      var $59=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear46=$59 & 2147483647;
      var $cmp47=(($bf_clear45)|0)!=(($bf_clear46)|0);
      if ($cmp47) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      label = 25; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $60=$vertex;
      var $tobool52=(($60)|0)!=0;
      if ($tobool52) { label = 34; break; } else { label = 31; break; }
    case 31: 
      var $61=$neighbor;
      var $62=$facet_addr;
      _qh_appendmergeset($61, $62, 7, 0);
      var $63=HEAP32[((((5247040)|0))>>2)];
      var $cmp54=(($63)|0) >= 2;
      if ($cmp54) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $64=HEAP32[((((5248924)|0))>>2)];
      var $65=$neighbor;
      var $id56=(($65+72)|0);
      var $66=HEAP32[(($id56)>>2)];
      var $67=$facet_addr;
      var $id57=(($67+72)|0);
      var $68=HEAP32[(($id57)>>2)];
      _qh_fprintf($64, 2018, ((5280096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$66,HEAP32[(((tempInt)+(4))>>2)]=$68,tempInt));
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 20; break;
    case 35: 
      label = 36; break;
    case 36: 
      $neighbor=0;
      var $69=$delfacet_addr;
      var $neighbors62=(($69+56)|0);
      var $70=HEAP32[(($neighbors62)>>2)];
      var $tobool63=(($70)|0)!=0;
      if ($tobool63) { label = 37; break; } else { label = 47; break; }
    case 37: 
      var $71=$delfacet_addr;
      var $neighbors65=(($71+56)|0);
      var $72=HEAP32[(($neighbors65)>>2)];
      var $e66=(($72+4)|0);
      var $arrayidx67=(($e66)|0);
      var $p68=$arrayidx67;
      var $73=$p68;
      $neighborp=$73;
      label = 38; break;
    case 38: 
      var $74=$neighborp;
      var $incdec_ptr70=(($74+4)|0);
      $neighborp=$incdec_ptr70;
      var $75=HEAP32[(($74)>>2)];
      $neighbor=$75;
      var $tobool71=(($75)|0)!=0;
      if ($tobool71) { label = 39; break; } else { label = 46; break; }
    case 39: 
      var $76=$neighbor;
      var $77=$facet_addr;
      var $cmp73=(($76)|0)==(($77)|0);
      if ($cmp73) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 38; break;
    case 41: 
      var $78=$neighbor;
      var $neighbors76=(($78+56)|0);
      var $79=HEAP32[(($neighbors76)>>2)];
      var $call77=_qh_setsize($79);
      $size=$call77;
      var $80=HEAP32[((((5247508)|0))>>2)];
      var $cmp78=(($call77)|0) < (($80)|0);
      if ($cmp78) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $81=$neighbor;
      var $82=$neighbor;
      _qh_appendmergeset($81, $82, 6, 0);
      var $83=HEAP32[((((5247040)|0))>>2)];
      var $cmp80=(($83)|0) >= 2;
      if ($cmp80) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $84=HEAP32[((((5248924)|0))>>2)];
      var $85=$neighbor;
      var $id82=(($85+72)|0);
      var $86=HEAP32[(($id82)>>2)];
      var $87=$size;
      var $88=$facet_addr;
      var $id83=(($88+72)|0);
      var $89=HEAP32[(($id83)>>2)];
      _qh_fprintf($84, 2019, ((5279460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$86,HEAP32[(((tempInt)+(4))>>2)]=$87,HEAP32[(((tempInt)+(8))>>2)]=$89,tempInt));
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 38; break;
    case 46: 
      label = 47; break;
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_degen_redundant_neighbors["X"]=1;

function _qh_merge_degenredundant() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size;
      var $merge;
      var $bestneighbor;
      var $facet1;
      var $facet2;
      var $dist=__stackBase__;
      var $mindist=(__stackBase__)+(8);
      var $maxdist=(__stackBase__)+(16);
      var $vertex;
      var $vertexp;
      var $nummerges;
      var $mergetype;
      $nummerges=0;
      label = 3; break;
    case 3: 
      var $0=HEAP32[((((5249176)|0))>>2)];
      var $call=_qh_setdellast($0);
      var $1=$call;
      $merge=$1;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 43; break; }
    case 4: 
      var $2=$merge;
      var $facet11=(($2+8)|0);
      var $3=HEAP32[(($facet11)>>2)];
      $facet1=$3;
      var $4=$merge;
      var $facet22=(($4+12)|0);
      var $5=HEAP32[(($facet22)>>2)];
      $facet2=$5;
      var $6=$merge;
      var $type=(($6+16)|0);
      var $7=HEAP32[(($type)>>2)];
      $mergetype=$7;
      var $8=$merge;
      var $9=$8;
      _qh_memfree($9, 20);
      var $10=$facet1;
      var $11=$10;
      var $bf_field_offs=(($11+76)|0);
      var $12=$bf_field_offs;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 >>> 11;
      var $bf_clear=$14 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 3; break;
    case 6: 
      var $15=$facet1;
      var $16=$15;
      var $bf_field_offs4=(($16+76)|0);
      var $17=$bf_field_offs4;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 & -1073741825;
      HEAP32[(($17)>>2)]=$19;
      var $20=$facet1;
      var $21=$20;
      var $bf_field_offs5=(($21+76)|0);
      var $22=$bf_field_offs5;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 2147483647;
      HEAP32[(($22)>>2)]=$24;
      var $25=HEAP32[((((5247448)|0))>>2)];
      var $sub=((($25)-(1))|0);
      var $26=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp=(($sub)|0)==(($26)|0);
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$27;
      HEAP32[((((5242936)|0))>>2)]=$27;
      label = 8; break;
    case 8: 
      var $28=$mergetype;
      var $cmp8=(($28)|0)==7;
      if ($cmp8) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $29=HEAP32[(((((5244092)|0)))>>2)];
      var $inc=((($29)+(1))|0);
      HEAP32[(((((5244092)|0)))>>2)]=$inc;
      label = 10; break;
    case 10: 
      var $30=$facet2;
      var $31=$30;
      var $bf_field_offs11=(($31+76)|0);
      var $32=$bf_field_offs11;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 11;
      var $bf_clear12=$34 & 1;
      var $tobool13=(($bf_clear12)|0)!=0;
      if ($tobool13) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $35=$facet2;
      var $f=(($35+28)|0);
      var $replace=$f;
      var $36=HEAP32[(($replace)>>2)];
      var $tobool15=(($36)|0)!=0;
      if ($tobool15) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $37=HEAP32[((((5248924)|0))>>2)];
      var $38=$facet1;
      var $id=(($38+72)|0);
      var $39=HEAP32[(($id)>>2)];
      var $40=$facet2;
      var $id17=(($40+72)|0);
      var $41=HEAP32[(($id17)>>2)];
      _qh_fprintf($37, 6097, ((5265540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$39,HEAP32[(((tempInt)+(4))>>2)]=$41,tempInt));
      var $42=$facet1;
      var $43=$facet2;
      _qh_errexit2(5, $42, $43);
      label = 13; break;
    case 13: 
      var $44=$facet2;
      var $f19=(($44+28)|0);
      var $replace20=$f19;
      var $45=HEAP32[(($replace20)>>2)];
      $facet2=$45;
      label = 10; break;
    case 14: 
      var $46=$facet1;
      var $47=$facet2;
      var $cmp21=(($46)|0)==(($47)|0);
      if ($cmp21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $48=$facet1;
      _qh_degen_redundant_facet($48);
      label = 3; break;
    case 16: 
      var $49=HEAP32[((((5247040)|0))>>2)];
      var $cmp24=(($49)|0) >= 2;
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $50=HEAP32[((((5248924)|0))>>2)];
      var $51=$facet1;
      var $id26=(($51+72)|0);
      var $52=HEAP32[(($id26)>>2)];
      var $53=$facet2;
      var $id27=(($53+72)|0);
      var $54=HEAP32[(($id27)>>2)];
      _qh_fprintf($50, 2025, ((5265136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$52,HEAP32[(((tempInt)+(4))>>2)]=$54,tempInt));
      label = 18; break;
    case 18: 
      var $55=$facet1;
      var $56=$facet2;
      _qh_mergefacet($55, $56, 0, 0, 0);
      var $57=$nummerges;
      var $inc29=((($57)+(1))|0);
      $nummerges=$inc29;
      label = 42; break;
    case 19: 
      var $58=$facet1;
      var $neighbors=(($58+56)|0);
      var $59=HEAP32[(($neighbors)>>2)];
      var $call30=_qh_setsize($59);
      $size=$call30;
      var $tobool31=(($call30)|0)!=0;
      if ($tobool31) { label = 32; break; } else { label = 20; break; }
    case 20: 
      var $60=HEAP32[(((((5243364)|0)))>>2)];
      var $inc33=((($60)+(1))|0);
      HEAP32[(((((5243364)|0)))>>2)]=$inc33;
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp34=(($61)|0) >= 2;
      if ($cmp34) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$facet1;
      var $id36=(($63+72)|0);
      var $64=HEAP32[(($id36)>>2)];
      _qh_fprintf($62, 2026, ((5264740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,tempInt));
      label = 22; break;
    case 22: 
      var $65=$facet1;
      _qh_willdelete($65, 0);
      $vertex=0;
      var $66=$facet1;
      var $vertices=(($66+48)|0);
      var $67=HEAP32[(($vertices)>>2)];
      var $tobool38=(($67)|0)!=0;
      if ($tobool38) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $68=$facet1;
      var $vertices40=(($68+48)|0);
      var $69=HEAP32[(($vertices40)>>2)];
      var $e=(($69+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $70=$p;
      $vertexp=$70;
      label = 24; break;
    case 24: 
      var $71=$vertexp;
      var $incdec_ptr=(($71+4)|0);
      $vertexp=$incdec_ptr;
      var $72=HEAP32[(($71)>>2)];
      $vertex=$72;
      var $tobool41=(($72)|0)!=0;
      if ($tobool41) { label = 25; break; } else { label = 30; break; }
    case 25: 
      var $73=$vertex;
      var $neighbors42=(($73+12)|0);
      var $74=HEAP32[(($neighbors42)>>2)];
      var $75=$facet1;
      var $76=$75;
      var $call43=_qh_setdel($74, $76);
      var $77=$vertex;
      var $neighbors44=(($77+12)|0);
      var $78=HEAP32[(($neighbors44)>>2)];
      var $e45=(($78+4)|0);
      var $arrayidx46=(($e45)|0);
      var $p47=$arrayidx46;
      var $79=HEAP32[(($p47)>>2)];
      var $tobool48=(($79)|0)!=0;
      if ($tobool48) { label = 29; break; } else { label = 26; break; }
    case 26: 
      var $80=HEAP32[(((((5243356)|0)))>>2)];
      var $inc50=((($80)+(1))|0);
      HEAP32[(((((5243356)|0)))>>2)]=$inc50;
      var $81=HEAP32[((((5247040)|0))>>2)];
      var $cmp51=(($81)|0) >= 2;
      if ($cmp51) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $82=HEAP32[((((5248924)|0))>>2)];
      var $83=$vertex;
      var $84=$83;
      var $bf_field_offs53=(($84+20)|0);
      var $85=$bf_field_offs53;
      var $86=HEAP32[(($85)>>2)];
      var $bf_clear54=$86 & 16777215;
      var $87=$facet1;
      var $id55=(($87+72)|0);
      var $88=HEAP32[(($id55)>>2)];
      _qh_fprintf($82, 2027, ((5264288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear54,HEAP32[(((tempInt)+(4))>>2)]=$88,tempInt));
      label = 28; break;
    case 28: 
      var $89=$vertex;
      var $90=$89;
      var $bf_field_offs57=(($90+20)|0);
      var $91=$bf_field_offs57;
      var $92=HEAP32[(($91)>>2)];
      var $93=$92 & -1073741825;
      var $94=$93 | 1073741824;
      HEAP32[(($91)>>2)]=$94;
      var $95=$vertex;
      var $96=$95;
      _qh_setappend(((5249188)|0), $96);
      label = 29; break;
    case 29: 
      label = 24; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $97=$nummerges;
      var $inc60=((($97)+(1))|0);
      $nummerges=$inc60;
      label = 41; break;
    case 32: 
      var $98=$size;
      var $99=HEAP32[((((5247508)|0))>>2)];
      var $cmp62=(($98)|0) < (($99)|0);
      if ($cmp62) { label = 33; break; } else { label = 40; break; }
    case 33: 
      var $100=$facet1;
      var $call64=_qh_findbestneighbor($100, $dist, $mindist, $maxdist);
      $bestneighbor=$call64;
      var $101=HEAP32[((((5247040)|0))>>2)];
      var $cmp65=(($101)|0) >= 2;
      if ($cmp65) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $102=HEAP32[((((5248924)|0))>>2)];
      var $103=$facet1;
      var $id67=(($103+72)|0);
      var $104=HEAP32[(($id67)>>2)];
      var $105=$size;
      var $106=$bestneighbor;
      var $id68=(($106+72)|0);
      var $107=HEAP32[(($id68)>>2)];
      var $108=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($102, 2028, ((5263876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$104,HEAP32[(((tempInt)+(4))>>2)]=$105,HEAP32[(((tempInt)+(8))>>2)]=$107,(HEAPF64[(tempDoublePtr)>>3]=$108,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 35; break;
    case 35: 
      var $109=$facet1;
      var $110=$bestneighbor;
      _qh_mergefacet($109, $110, $mindist, $maxdist, 0);
      var $111=$nummerges;
      var $inc70=((($111)+(1))|0);
      $nummerges=$inc70;
      var $112=HEAP32[((((5247316)|0))>>2)];
      var $tobool71=(($112)|0)!=0;
      if ($tobool71) { label = 36; break; } else { label = 39; break; }
    case 36: 
      var $113=HEAP32[(((((5243332)|0)))>>2)];
      var $inc73=((($113)+(1))|0);
      HEAP32[(((((5243332)|0)))>>2)]=$inc73;
      var $114=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243348)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243348)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($115)+($114);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5243348)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243348)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $116=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243340)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243340)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $117=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp74=$116 < $117;
      if ($cmp74) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $118=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$118,HEAP32[((((5243340)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243340)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 3; break;
    case 43: 
      var $119=$nummerges;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }

}
_qh_merge_degenredundant["X"]=1;

function _qh_flippedmerges($facetlist, $wasmerge) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $wasmerge_addr;
      var $facet;
      var $neighbor;
      var $facet1;
      var $dist=__stackBase__;
      var $mindist=(__stackBase__)+(8);
      var $maxdist=(__stackBase__)+(16);
      var $merge;
      var $mergep;
      var $othermerges=(__stackBase__)+(24);
      var $nummerge;
      $facetlist_addr=$facetlist;
      $wasmerge_addr=$wasmerge;
      $nummerge=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 4024, ((5273136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$facetlist_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $3=$facetlist_addr;
      $facet=$3;
      label = 6; break;
    case 6: 
      var $4=$facet;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $7 = 0;label = 8; break; }
    case 7: 
      var $5=$facet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool3=(($6)|0)!=0;
      var $7 = $tobool3;label = 8; break;
    case 8: 
      var $7;
      if ($7) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $8=$facet;
      var $9=$8;
      var $bf_field_offs=(($9+76)|0);
      var $10=$bf_field_offs;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 16;
      var $bf_clear=$12 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $13=$facet;
      var $14=$13;
      var $bf_field_offs5=(($14+76)|0);
      var $15=$bf_field_offs5;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 11;
      var $bf_clear6=$17 & 1;
      var $tobool7=(($bf_clear6)|0)!=0;
      if ($tobool7) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $18=$facet;
      var $19=$facet;
      _qh_appendmergeset($18, $19, 4, 0);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$facet;
      var $next10=(($20+44)|0);
      var $21=HEAP32[(($next10)>>2)];
      $facet=$21;
      label = 6; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $call=_qh_settemppop();
      HEAP32[(($othermerges)>>2)]=$call;
      var $22=HEAP32[((((5248940)|0))>>2)];
      var $call12=_qh_settemp($22);
      HEAP32[((((5249172)|0))>>2)]=$call12;
      var $23=HEAP32[(($othermerges)>>2)];
      _qh_settemppush($23);
      $merge=0;
      var $24=HEAP32[(($othermerges)>>2)];
      var $tobool13=(($24)|0)!=0;
      if ($tobool13) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $25=HEAP32[(($othermerges)>>2)];
      var $e=(($25+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $26=$p;
      $mergep=$26;
      label = 17; break;
    case 17: 
      var $27=$mergep;
      var $incdec_ptr=(($27+4)|0);
      $mergep=$incdec_ptr;
      var $28=HEAP32[(($27)>>2)];
      $merge=$28;
      var $tobool16=(($28)|0)!=0;
      if ($tobool16) { label = 18; break; } else { label = 30; break; }
    case 18: 
      var $29=$merge;
      var $facet118=(($29+8)|0);
      var $30=HEAP32[(($facet118)>>2)];
      $facet1=$30;
      var $31=$merge;
      var $type=(($31+16)|0);
      var $32=HEAP32[(($type)>>2)];
      var $cmp19=(($32)|0)!=4;
      if ($cmp19) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $33=$facet1;
      var $34=$33;
      var $bf_field_offs20=(($34+76)|0);
      var $35=$bf_field_offs20;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 >>> 11;
      var $bf_clear21=$37 & 1;
      var $tobool22=(($bf_clear21)|0)!=0;
      if ($tobool22) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 17; break;
    case 21: 
      var $38=HEAP32[((((5247448)|0))>>2)];
      var $sub=((($38)-(1))|0);
      var $39=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp25=(($sub)|0)==(($39)|0);
      if ($cmp25) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $40=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$40;
      HEAP32[((((5242936)|0))>>2)]=$40;
      label = 23; break;
    case 23: 
      var $41=$facet1;
      var $call28=_qh_findbestneighbor($41, $dist, $mindist, $maxdist);
      $neighbor=$call28;
      var $42=HEAP32[((((5247040)|0))>>2)];
      var $tobool29=(($42)|0)!=0;
      if ($tobool29) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $43=HEAP32[((((5248924)|0))>>2)];
      var $44=$facet1;
      var $id=(($44+72)|0);
      var $45=HEAP32[(($id)>>2)];
      var $46=$neighbor;
      var $id31=(($46+72)|0);
      var $47=HEAP32[(($id31)>>2)];
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($43, 15, ((5272516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$45,HEAP32[(((tempInt)+(4))>>2)]=$47,(HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$49,tempInt));
      label = 25; break;
    case 25: 
      var $50=$facet1;
      var $51=$neighbor;
      _qh_mergefacet($50, $51, $mindist, $maxdist, 0);
      var $52=$nummerge;
      var $inc=((($52)+(1))|0);
      $nummerge=$inc;
      var $53=HEAP32[((((5247316)|0))>>2)];
      var $tobool33=(($53)|0)!=0;
      if ($tobool33) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $54=HEAP32[(((((5243628)|0)))>>2)];
      var $inc35=((($54)+(1))|0);
      HEAP32[(((((5243628)|0)))>>2)]=$inc35;
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243644)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243644)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($56)+($55);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[((((5243644)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243644)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $57=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $58=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp36=$57 < $58;
      if ($cmp36) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[((((5243636)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243636)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $call40=_qh_merge_degenredundant();
      label = 17; break;
    case 30: 
      label = 31; break;
    case 31: 
      $merge=0;
      var $60=HEAP32[(($othermerges)>>2)];
      var $tobool43=(($60)|0)!=0;
      if ($tobool43) { label = 32; break; } else { label = 40; break; }
    case 32: 
      var $61=HEAP32[(($othermerges)>>2)];
      var $e45=(($61+4)|0);
      var $arrayidx46=(($e45)|0);
      var $p47=$arrayidx46;
      var $62=$p47;
      $mergep=$62;
      label = 33; break;
    case 33: 
      var $63=$mergep;
      var $incdec_ptr49=(($63+4)|0);
      $mergep=$incdec_ptr49;
      var $64=HEAP32[(($63)>>2)];
      $merge=$64;
      var $tobool50=(($64)|0)!=0;
      if ($tobool50) { label = 34; break; } else { label = 39; break; }
    case 34: 
      var $65=$merge;
      var $facet152=(($65+8)|0);
      var $66=HEAP32[(($facet152)>>2)];
      var $67=$66;
      var $bf_field_offs53=(($67+76)|0);
      var $68=$bf_field_offs53;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 11;
      var $bf_clear54=$70 & 1;
      var $tobool55=(($bf_clear54)|0)!=0;
      if ($tobool55) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $71=$merge;
      var $facet2=(($71+12)|0);
      var $72=HEAP32[(($facet2)>>2)];
      var $73=$72;
      var $bf_field_offs57=(($73+76)|0);
      var $74=$bf_field_offs57;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 11;
      var $bf_clear58=$76 & 1;
      var $tobool59=(($bf_clear58)|0)!=0;
      if ($tobool59) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $77=$merge;
      var $78=$77;
      _qh_memfree($78, 20);
      label = 38; break;
    case 37: 
      var $79=$merge;
      var $80=$79;
      _qh_setappend(((5249172)|0), $80);
      label = 38; break;
    case 38: 
      label = 33; break;
    case 39: 
      label = 40; break;
    case 40: 
      _qh_settempfree($othermerges);
      var $81=$nummerge;
      var $tobool64=(($81)|0)!=0;
      if ($tobool64) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $82=$wasmerge_addr;
      HEAP32[(($82)>>2)]=1;
      label = 42; break;
    case 42: 
      var $83=HEAP32[((((5247040)|0))>>2)];
      var $cmp67=(($83)|0) >= 1;
      if ($cmp67) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $84=HEAP32[((((5248924)|0))>>2)];
      var $85=$nummerge;
      _qh_fprintf($84, 1010, ((5271868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$85,tempInt));
      label = 44; break;
    case 44: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_flippedmerges["X"]=1;

function _qh_getmergeset_initial($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      var $nummerges;
      $facetlist_addr=$facetlist;
      var $0=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $1=$facetlist_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 34; break; }
    case 3: 
      var $2=$facetlist_addr;
      $facet=$2;
      label = 4; break;
    case 4: 
      var $3=$facet;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $6 = 0;label = 6; break; }
    case 5: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      var $tobool2=(($5)|0)!=0;
      var $6 = $tobool2;label = 6; break;
    case 6: 
      var $6;
      if ($6) { label = 7; break; } else { label = 33; break; }
    case 7: 
      var $7=HEAP32[((((5249156)|0))>>2)];
      var $8=$facet;
      var $visitid=(($8+68)|0);
      HEAP32[(($visitid)>>2)]=$7;
      var $9=$facet;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & -134217729;
      var $14=$13 | 134217728;
      HEAP32[(($11)>>2)]=$14;
      $neighbor=0;
      var $15=$facet;
      var $neighbors=(($15+56)|0);
      var $16=HEAP32[(($neighbors)>>2)];
      var $tobool3=(($16)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 26; break; }
    case 8: 
      var $17=$facet;
      var $neighbors5=(($17+56)|0);
      var $18=HEAP32[(($neighbors5)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=$p;
      $neighborp=$19;
      label = 9; break;
    case 9: 
      var $20=$neighborp;
      var $incdec_ptr=(($20+4)|0);
      $neighborp=$incdec_ptr;
      var $21=HEAP32[(($20)>>2)];
      $neighbor=$21;
      var $tobool7=(($21)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $22=$neighbor;
      var $visitid9=(($22+68)|0);
      var $23=HEAP32[(($visitid9)>>2)];
      var $24=HEAP32[((((5249156)|0))>>2)];
      var $cmp=(($23)|0)!=(($24)|0);
      if ($cmp) { label = 11; break; } else { label = 24; break; }
    case 11: 
      var $25=$facet;
      var $26=$neighbor;
      var $call=_qh_test_appendmerge($25, $26);
      var $tobool11=(($call)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 23; break; }
    case 12: 
      $ridge=0;
      var $27=$neighbor;
      var $ridges=(($27+52)|0);
      var $28=HEAP32[(($ridges)>>2)];
      var $tobool13=(($28)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 22; break; }
    case 13: 
      var $29=$neighbor;
      var $ridges15=(($29+52)|0);
      var $30=HEAP32[(($ridges15)>>2)];
      var $e16=(($30+4)|0);
      var $arrayidx17=(($e16)|0);
      var $p18=$arrayidx17;
      var $31=$p18;
      $ridgep=$31;
      label = 14; break;
    case 14: 
      var $32=$ridgep;
      var $incdec_ptr20=(($32+4)|0);
      $ridgep=$incdec_ptr20;
      var $33=HEAP32[(($32)>>2)];
      $ridge=$33;
      var $tobool21=(($33)|0)!=0;
      if ($tobool21) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $34=$facet;
      var $35=$ridge;
      var $top=(($35+4)|0);
      var $36=HEAP32[(($top)>>2)];
      var $37=$neighbor;
      var $cmp23=(($36)|0)==(($37)|0);
      if ($cmp23) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $38=$ridge;
      var $bottom=(($38+8)|0);
      var $39=HEAP32[(($bottom)>>2)];
      var $cond = $39;label = 18; break;
    case 17: 
      var $40=$ridge;
      var $top24=(($40+4)|0);
      var $41=HEAP32[(($top24)>>2)];
      var $cond = $41;label = 18; break;
    case 18: 
      var $cond;
      var $cmp25=(($34)|0)==(($cond)|0);
      if ($cmp25) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $42=$ridge;
      var $43=$42;
      var $bf_field_offs27=(($43+12)|0);
      var $44=$bf_field_offs27;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & -67108865;
      var $47=$46 | 67108864;
      HEAP32[(($44)>>2)]=$47;
      label = 21; break;
    case 20: 
      label = 14; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 9; break;
    case 25: 
      label = 26; break;
    case 26: 
      $ridge=0;
      var $48=$facet;
      var $ridges33=(($48+52)|0);
      var $49=HEAP32[(($ridges33)>>2)];
      var $tobool34=(($49)|0)!=0;
      if ($tobool34) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $50=$facet;
      var $ridges36=(($50+52)|0);
      var $51=HEAP32[(($ridges36)>>2)];
      var $e37=(($51+4)|0);
      var $arrayidx38=(($e37)|0);
      var $p39=$arrayidx38;
      var $52=$p39;
      $ridgep=$52;
      label = 28; break;
    case 28: 
      var $53=$ridgep;
      var $incdec_ptr41=(($53+4)|0);
      $ridgep=$incdec_ptr41;
      var $54=HEAP32[(($53)>>2)];
      $ridge=$54;
      var $tobool42=(($54)|0)!=0;
      if ($tobool42) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $55=$ridge;
      var $56=$55;
      var $bf_field_offs44=(($56+12)|0);
      var $57=$bf_field_offs44;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & -33554433;
      var $60=$59 | 33554432;
      HEAP32[(($57)>>2)]=$60;
      label = 28; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $61=$facet;
      var $next47=(($61+44)|0);
      var $62=HEAP32[(($next47)>>2)];
      $facet=$62;
      label = 4; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $63=HEAP32[((((5249172)|0))>>2)];
      var $call50=_qh_setsize($63);
      $nummerges=$call50;
      var $64=HEAP32[((((5246940)|0))>>2)];
      var $tobool51=(($64)|0)!=0;
      if ($tobool51) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $65=HEAP32[((((5249172)|0))>>2)];
      var $e53=(($65+4)|0);
      var $arrayidx54=(($e53)|0);
      var $p55=$arrayidx54;
      var $66=$p55;
      var $67=$66;
      var $68=$nummerges;
      _qsort($67, $68, 4, 4);
      label = 37; break;
    case 36: 
      var $69=HEAP32[((((5249172)|0))>>2)];
      var $e56=(($69+4)|0);
      var $arrayidx57=(($e56)|0);
      var $p58=$arrayidx57;
      var $70=$p58;
      var $71=$70;
      var $72=$nummerges;
      _qsort($71, $72, 4, 18);
      label = 37; break;
    case 37: 
      var $73=HEAP32[((((5249124)|0))>>2)];
      var $tobool60=(($73)|0)!=0;
      if ($tobool60) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $74=$nummerges;
      var $75=HEAP32[(((((5243988)|0)))>>2)];
      var $add=((($75)+($74))|0);
      HEAP32[(((((5243988)|0)))>>2)]=$add;
      label = 42; break;
    case 39: 
      var $76=$nummerges;
      var $77=HEAP32[(((((5243972)|0)))>>2)];
      var $add63=((($77)+($76))|0);
      HEAP32[(((((5243972)|0)))>>2)]=$add63;
      var $78=HEAP32[(((((5243980)|0)))>>2)];
      var $79=$nummerges;
      var $cmp64=(($78)|0) < (($79)|0);
      if ($cmp64) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $80=$nummerges;
      HEAP32[(((((5243980)|0)))>>2)]=$80;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $81=HEAP32[((((5247040)|0))>>2)];
      var $cmp68=(($81)|0) >= 2;
      if ($cmp68) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $82=HEAP32[((((5248924)|0))>>2)];
      var $83=$nummerges;
      _qh_fprintf($82, 2022, ((5267980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$83,tempInt));
      label = 44; break;
    case 44: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getmergeset_initial["X"]=1;

function _qh_all_merges($othermerge, $vneighbors) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $othermerge_addr;
      var $vneighbors_addr;
      var $facet1;
      var $facet2;
      var $merge;
      var $wasmerge;
      var $isreduce;
      var $freelistp;
      var $vertex;
      var $mergetype;
      var $numcoplanar;
      var $numconcave;
      var $numdegenredun;
      var $numnewmerges;
      $othermerge_addr=$othermerge;
      $vneighbors_addr=$vneighbors;
      $wasmerge=1;
      $numcoplanar=0;
      $numconcave=0;
      $numdegenredun=0;
      $numnewmerges=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=HEAP32[((((5248956)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=HEAP32[((((5248956)|0))>>2)];
      var $id=(($3+72)|0);
      var $4=HEAP32[(($id)>>2)];
      var $cond = $4;label = 6; break;
    case 5: 
      var $cond = -1;label = 6; break;
    case 6: 
      var $cond;
      _qh_fprintf($1, 2010, ((5266916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      $wasmerge=0;
      label = 9; break;
    case 9: 
      var $5=HEAP32[((((5249172)|0))>>2)];
      var $call=_qh_setsize($5);
      var $tobool2=(($call)|0)!=0;
      if ($tobool2) { label = 10; break; } else { label = 32; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $6=HEAP32[((((5249172)|0))>>2)];
      var $call5=_qh_setdellast($6);
      var $7=$call5;
      $merge=$7;
      var $tobool6=(($7)|0)!=0;
      if ($tobool6) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $8=$merge;
      var $facet18=(($8+8)|0);
      var $9=HEAP32[(($facet18)>>2)];
      $facet1=$9;
      var $10=$merge;
      var $facet29=(($10+12)|0);
      var $11=HEAP32[(($facet29)>>2)];
      $facet2=$11;
      var $12=$merge;
      var $type=(($12+16)|0);
      var $13=HEAP32[(($type)>>2)];
      $mergetype=$13;
      $freelistp=0;
      var $14=$merge;
      var $15=$14;
      _qh_memfree($15, 20);
      var $16=$facet1;
      var $17=$16;
      var $bf_field_offs=(($17+76)|0);
      var $18=$bf_field_offs;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $bf_clear=$20 & 1;
      var $tobool10=(($bf_clear)|0)!=0;
      if ($tobool10) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $21=$facet2;
      var $22=$21;
      var $bf_field_offs11=(($22+76)|0);
      var $23=$bf_field_offs11;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 11;
      var $bf_clear12=$25 & 1;
      var $tobool13=(($bf_clear12)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 11; break;
    case 15: 
      var $26=$facet1;
      var $27=$26;
      var $bf_field_offs16=(($27+76)|0);
      var $28=$bf_field_offs16;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 10;
      var $bf_clear17=$30 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $31=$facet1;
      var $32=$31;
      var $bf_field_offs19=(($32+76)|0);
      var $33=$bf_field_offs19;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 27;
      var $bf_clear20=$35 & 1;
      var $tobool21=(($bf_clear20)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $36=$facet2;
      var $37=$36;
      var $bf_field_offs23=(($37+76)|0);
      var $38=$bf_field_offs23;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 10;
      var $bf_clear24=$40 & 1;
      var $tobool25=(($bf_clear24)|0)!=0;
      if ($tobool25) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $41=$facet2;
      var $42=$41;
      var $bf_field_offs27=(($42+76)|0);
      var $43=$bf_field_offs27;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 27;
      var $bf_clear28=$45 & 1;
      var $tobool29=(($bf_clear28)|0)!=0;
      if ($tobool29) { label = 23; break; } else { label = 19; break; }
    case 19: 
      var $46=HEAP32[((((5247080)|0))>>2)];
      var $tobool31=(($46)|0)!=0;
      if ($tobool31) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $47=$mergetype;
      var $cmp33=(($47)>>>0) <= 2;
      if ($cmp33) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 11; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $48=$facet1;
      var $49=$facet2;
      var $50=$mergetype;
      _qh_merge_nonconvex($48, $49, $50);
      var $call37=_qh_merge_degenredundant();
      var $51=$numdegenredun;
      var $add=((($51)+($call37))|0);
      $numdegenredun=$add;
      var $52=$numnewmerges;
      var $inc=((($52)+(1))|0);
      $numnewmerges=$inc;
      $wasmerge=1;
      var $53=$mergetype;
      var $cmp38=(($53)|0)==3;
      if ($cmp38) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $54=$numconcave;
      var $inc40=((($54)+(1))|0);
      $numconcave=$inc40;
      label = 26; break;
    case 25: 
      var $55=$numcoplanar;
      var $inc41=((($55)+(1))|0);
      $numcoplanar=$inc41;
      label = 26; break;
    case 26: 
      label = 11; break;
    case 27: 
      var $56=HEAP32[((((5249124)|0))>>2)];
      var $tobool43=(($56)|0)!=0;
      if ($tobool43) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $57=HEAP32[((((5247508)|0))>>2)];
      var $cmp45=(($57)|0) <= 5;
      if ($cmp45) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $58=$numnewmerges;
      var $cmp47=(($58)|0) > 2;
      if ($cmp47) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $numnewmerges=0;
      var $call49=_qh_reducevertices();
      label = 31; break;
    case 31: 
      var $59=HEAP32[((((5248956)|0))>>2)];
      _qh_getmergeset($59);
      label = 9; break;
    case 32: 
      var $60=HEAP32[((((5248580)|0))>>2)];
      var $tobool52=(($60)|0)!=0;
      if ($tobool52) { label = 33; break; } else { label = 53; break; }
    case 33: 
      $isreduce=0;
      var $61=HEAP32[((((5247508)|0))>>2)];
      var $cmp54=(($61)|0) >= 4;
      if ($cmp54) { label = 34; break; } else { label = 42; break; }
    case 34: 
      var $62=HEAP32[((((5249124)|0))>>2)];
      var $tobool56=(($62)|0)!=0;
      if ($tobool56) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $63=HEAP32[((((5248984)|0))>>2)];
      $vertex=$63;
      label = 36; break;
    case 36: 
      var $64=$vertex;
      var $tobool58=(($64)|0)!=0;
      if ($tobool58) { label = 37; break; } else { var $67 = 0;label = 38; break; }
    case 37: 
      var $65=$vertex;
      var $next=(($65)|0);
      var $66=HEAP32[(($next)>>2)];
      var $tobool59=(($66)|0)!=0;
      var $67 = $tobool59;label = 38; break;
    case 38: 
      var $67;
      if ($67) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $68=$vertex;
      var $69=$68;
      var $bf_field_offs60=(($69+20)|0);
      var $70=$bf_field_offs60;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & -536870913;
      var $73=$72 | 536870912;
      HEAP32[(($70)>>2)]=$73;
      label = 40; break;
    case 40: 
      var $74=$vertex;
      var $next61=(($74)|0);
      var $75=HEAP32[(($next61)>>2)];
      $vertex=$75;
      label = 36; break;
    case 41: 
      $isreduce=1;
      label = 42; break;
    case 42: 
      var $76=$wasmerge;
      var $tobool63=(($76)|0)!=0;
      if ($tobool63) { label = 44; break; } else { label = 43; break; }
    case 43: 
      var $77=$othermerge_addr;
      var $tobool65=(($77)|0)!=0;
      if ($tobool65) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $78=HEAP32[((((5247076)|0))>>2)];
      var $tobool67=(($78)|0)!=0;
      if ($tobool67) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $79=HEAP32[((((5249124)|0))>>2)];
      var $tobool69=(($79)|0)!=0;
      if ($tobool69) { label = 46; break; } else { label = 48; break; }
    case 46: 
      var $80=HEAP32[((((5247508)|0))>>2)];
      var $cmp71=(($80)|0) <= 5;
      if ($cmp71) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $othermerge_addr=0;
      $isreduce=1;
      label = 48; break;
    case 48: 
      var $81=$isreduce;
      var $tobool74=(($81)|0)!=0;
      if ($tobool74) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $call76=_qh_reducevertices();
      var $tobool77=(($call76)|0)!=0;
      if ($tobool77) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $82=HEAP32[((((5248956)|0))>>2)];
      _qh_getmergeset($82);
      label = 8; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $83=$vneighbors_addr;
      var $tobool82=(($83)|0)!=0;
      if ($tobool82) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $call84=_qh_test_vneighbors();
      var $tobool85=(($call84)|0)!=0;
      if ($tobool85) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 8; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $84=HEAP32[((((5246980)|0))>>2)];
      var $tobool89=(($84)|0)!=0;
      if ($tobool89) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $85=HEAP32[((((5247076)|0))>>2)];
      var $tobool91=(($85)|0)!=0;
      if ($tobool91) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $86=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$86;
      HEAP32[((((5247340)|0))>>2)]=0;
      var $87=HEAP32[((((5248956)|0))>>2)];
      _qh_checkconvex($87, 0);
      var $88=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$88;
      label = 60; break;
    case 60: 
      var $89=HEAP32[((((5247040)|0))>>2)];
      var $cmp94=(($89)|0) >= 1;
      if ($cmp94) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $90=HEAP32[((((5248924)|0))>>2)];
      var $91=$numcoplanar;
      var $92=$numconcave;
      var $93=$numdegenredun;
      _qh_fprintf($90, 1009, ((5262640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$91,HEAP32[(((tempInt)+(4))>>2)]=$92,HEAP32[(((tempInt)+(8))>>2)]=$93,tempInt));
      label = 62; break;
    case 62: 
      var $94=HEAP32[((((5247040)|0))>>2)];
      var $cmp97=(($94)|0) >= 4;
      if ($cmp97) { label = 63; break; } else { label = 65; break; }
    case 63: 
      var $95=HEAP32[((((5248996)|0))>>2)];
      var $cmp99=(($95)|0) < 50;
      if ($cmp99) { label = 64; break; } else { label = 65; break; }
    case 64: 
      _qh_printlists();
      label = 65; break;
    case 65: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_all_merges["X"]=1;

function _qh_postmerge($reason, $maxcentrum, $maxangle, $vneighbors) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $reason_addr;
      var $maxcentrum_addr;
      var $maxangle_addr;
      var $vneighbors_addr;
      var $newfacet;
      var $othermerges=__stackBase__;
      var $vertex;
      $reason_addr=$reason;
      $maxcentrum_addr=$maxcentrum;
      $maxangle_addr=$maxangle;
      $vneighbors_addr=$vneighbors;
      HEAP32[(($othermerges)>>2)]=0;
      var $0=HEAP32[((((5247372)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 7; break; }
    case 4: 
      _qh_buildtracing(0, 0);
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_printsummary($2);
      var $3=HEAP32[((((5247316)|0))>>2)];
      var $tobool2=(($3)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      _qh_printallstatistics($4, ((5292112)|0));
      label = 6; break;
    case 6: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      var $6=$reason_addr;
      var $7=$maxcentrum_addr;
      var $8=$maxangle_addr;
      _qh_fprintf($5, 8062, ((5277536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,(HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 7; break;
    case 7: 
      var $9=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($9)|0) >= 2;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=$vneighbors_addr;
      _qh_fprintf($10, 2009, ((5271572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
      label = 9; break;
    case 9: 
      var $12=$maxcentrum_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((((5248612)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248612)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $13=$maxangle_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[((((5248620)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248620)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[((((5249124)|0))>>2)]=1;
      var $14=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($14);
      HEAP32[((((5249176)|0))>>2)]=$call;
      var $15=HEAP32[((((5248940)|0))>>2)];
      var $call7=_qh_settemp($15);
      HEAP32[((((5249172)|0))>>2)]=$call7;
      var $16=HEAP32[((((5248960)|0))>>2)];
      var $17=HEAP32[((((5248944)|0))>>2)];
      var $cmp8=(($16)|0)!=(($17)|0);
      if ($cmp8) { label = 10; break; } else { label = 40; break; }
    case 10: 
      HEAP32[((((5249092)|0))>>2)]=1;
      var $18=HEAP32[((((5248944)|0))>>2)];
      HEAP32[((((5248956)|0))>>2)]=$18;
      HEAP32[((((5248960)|0))>>2)]=$18;
      var $19=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$19;
      label = 11; break;
    case 11: 
      var $20=$newfacet;
      var $tobool10=(($20)|0)!=0;
      if ($tobool10) { label = 12; break; } else { var $23 = 0;label = 13; break; }
    case 12: 
      var $21=$newfacet;
      var $next=(($21+44)|0);
      var $22=HEAP32[(($next)>>2)];
      var $tobool11=(($22)|0)!=0;
      var $23 = $tobool11;label = 13; break;
    case 13: 
      var $23;
      if ($23) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $24=$newfacet;
      var $25=$24;
      var $bf_field_offs=(($25+76)|0);
      var $26=$bf_field_offs;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & -1025;
      var $29=$28 | 1024;
      HEAP32[(($26)>>2)]=$29;
      var $30=$newfacet;
      var $31=$30;
      var $bf_field_offs12=(($31+76)|0);
      var $32=$bf_field_offs12;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 13;
      var $bf_clear=$34 & 1;
      var $tobool13=(($bf_clear)|0)!=0;
      if ($tobool13) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $35=$newfacet;
      var $36=$35;
      var $bf_field_offs15=(($36+76)|0);
      var $37=$bf_field_offs15;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 & -536870913;
      var $40=$39 | 536870912;
      HEAP32[(($37)>>2)]=$40;
      label = 16; break;
    case 16: 
      var $41=HEAP32[(((((5244364)|0)))>>2)];
      var $inc=((($41)+(1))|0);
      HEAP32[(((((5244364)|0)))>>2)]=$inc;
      label = 17; break;
    case 17: 
      var $42=$newfacet;
      var $next17=(($42+44)|0);
      var $43=HEAP32[(($next17)>>2)];
      $newfacet=$43;
      label = 11; break;
    case 18: 
      var $44=HEAP32[((((5248984)|0))>>2)];
      HEAP32[((((5248992)|0))>>2)]=$44;
      var $45=HEAP32[((((5248984)|0))>>2)];
      $vertex=$45;
      label = 19; break;
    case 19: 
      var $46=$vertex;
      var $tobool19=(($46)|0)!=0;
      if ($tobool19) { label = 20; break; } else { var $49 = 0;label = 21; break; }
    case 20: 
      var $47=$vertex;
      var $next21=(($47)|0);
      var $48=HEAP32[(($next21)>>2)];
      var $tobool22=(($48)|0)!=0;
      var $49 = $tobool22;label = 21; break;
    case 21: 
      var $49;
      if ($49) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $50=$vertex;
      var $51=$50;
      var $bf_field_offs25=(($51+20)|0);
      var $52=$bf_field_offs25;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & 2147483647;
      var $55=$54 | -2147483648;
      HEAP32[(($52)>>2)]=$55;
      label = 23; break;
    case 23: 
      var $56=$vertex;
      var $next27=(($56)|0);
      var $57=HEAP32[(($next27)>>2)];
      $vertex=$57;
      label = 19; break;
    case 24: 
      var $58=HEAP32[((((5248580)|0))>>2)];
      var $tobool29=(($58)|0)!=0;
      if ($tobool29) { label = 25; break; } else { label = 36; break; }
    case 25: 
      var $59=HEAP32[((((5248984)|0))>>2)];
      $vertex=$59;
      label = 26; break;
    case 26: 
      var $60=$vertex;
      var $tobool32=(($60)|0)!=0;
      if ($tobool32) { label = 27; break; } else { var $63 = 0;label = 28; break; }
    case 27: 
      var $61=$vertex;
      var $next34=(($61)|0);
      var $62=HEAP32[(($next34)>>2)];
      var $tobool35=(($62)|0)!=0;
      var $63 = $tobool35;label = 28; break;
    case 28: 
      var $63;
      if ($63) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $64=$vertex;
      var $65=$64;
      var $bf_field_offs38=(($65+20)|0);
      var $66=$bf_field_offs38;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & -536870913;
      var $69=$68 | 536870912;
      HEAP32[(($66)>>2)]=$69;
      label = 30; break;
    case 30: 
      var $70=$vertex;
      var $next40=(($70)|0);
      var $71=HEAP32[(($next40)>>2)];
      $vertex=$71;
      label = 26; break;
    case 31: 
      var $72=HEAP32[((((5247076)|0))>>2)];
      var $tobool42=(($72)|0)!=0;
      if ($tobool42) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $73=HEAP32[((((5247508)|0))>>2)];
      var $cmp44=(($73)|0) <= 5;
      if ($cmp44) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $call46=_qh_reducevertices();
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $74=HEAP32[((((5247144)|0))>>2)];
      var $tobool50=(($74)|0)!=0;
      if ($tobool50) { label = 39; break; } else { label = 37; break; }
    case 37: 
      var $75=HEAP32[((((5247076)|0))>>2)];
      var $tobool51=(($75)|0)!=0;
      if ($tobool51) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $76=HEAP32[((((5248956)|0))>>2)];
      _qh_flippedmerges($76, $othermerges);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $77=HEAP32[((((5248956)|0))>>2)];
      _qh_getmergeset_initial($77);
      var $78=$vneighbors_addr;
      _qh_all_merges(0, $78);
      _qh_settempfree(((5249172)|0));
      _qh_settempfree(((5249176)|0));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_postmerge["X"]=1;

function _qh_reducevertices() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $numshare;
      var $numrename;
      var $degenredun;
      var $newfacet;
      var $vertex;
      var $vertexp;
      $numshare=0;
      $numrename=0;
      $degenredun=0;
      var $0=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($0)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 53; break;
    case 4: 
      var $call=_qh_merge_degenredundant();
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $degenredun=1;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $1=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$1;
      label = 8; break;
    case 8: 
      var $2=$newfacet;
      var $tobool3=(($2)|0)!=0;
      if ($tobool3) { label = 9; break; } else { var $5 = 0;label = 10; break; }
    case 9: 
      var $3=$newfacet;
      var $next=(($3+44)|0);
      var $4=HEAP32[(($next)>>2)];
      var $tobool4=(($4)|0)!=0;
      var $5 = $tobool4;label = 10; break;
    case 10: 
      var $5;
      if ($5) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $6=$newfacet;
      var $7=$6;
      var $bf_field_offs=(($7+76)|0);
      var $8=$bf_field_offs;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 29;
      var $bf_clear=$10 & 1;
      var $tobool5=(($bf_clear)|0)!=0;
      if ($tobool5) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $11=HEAP32[((((5247104)|0))>>2)];
      var $tobool7=(($11)|0)!=0;
      if ($tobool7) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $12=$newfacet;
      var $13=$12;
      var $bf_field_offs9=(($13+76)|0);
      var $14=$bf_field_offs9;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -536870913;
      HEAP32[(($14)>>2)]=$16;
      label = 14; break;
    case 14: 
      var $17=$newfacet;
      var $call11=_qh_remove_extravertices($17);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $18=$newfacet;
      var $next13=(($18+44)|0);
      var $19=HEAP32[(($next13)>>2)];
      $newfacet=$19;
      label = 8; break;
    case 17: 
      var $20=HEAP32[((((5247104)|0))>>2)];
      var $tobool14=(($20)|0)!=0;
      if ($tobool14) { label = 19; break; } else { label = 18; break; }
    case 18: 
      $retval=0;
      label = 53; break;
    case 19: 
      var $21=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$21;
      label = 20; break;
    case 20: 
      var $22=$newfacet;
      var $tobool18=(($22)|0)!=0;
      if ($tobool18) { label = 21; break; } else { var $25 = 0;label = 22; break; }
    case 21: 
      var $23=$newfacet;
      var $next20=(($23+44)|0);
      var $24=HEAP32[(($next20)>>2)];
      var $tobool21=(($24)|0)!=0;
      var $25 = $tobool21;label = 22; break;
    case 22: 
      var $25;
      if ($25) { label = 23; break; } else { label = 36; break; }
    case 23: 
      var $26=$newfacet;
      var $27=$26;
      var $bf_field_offs24=(($27+76)|0);
      var $28=$bf_field_offs24;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 29;
      var $bf_clear25=$30 & 1;
      var $tobool26=(($bf_clear25)|0)!=0;
      if ($tobool26) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $31=$newfacet;
      var $32=$31;
      var $bf_field_offs28=(($32+76)|0);
      var $33=$bf_field_offs28;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & -536870913;
      HEAP32[(($33)>>2)]=$35;
      $vertex=0;
      var $36=$newfacet;
      var $vertices=(($36+48)|0);
      var $37=HEAP32[(($vertices)>>2)];
      var $tobool29=(($37)|0)!=0;
      if ($tobool29) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $38=$newfacet;
      var $vertices31=(($38+48)|0);
      var $39=HEAP32[(($vertices31)>>2)];
      var $e=(($39+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $40=$p;
      $vertexp=$40;
      label = 26; break;
    case 26: 
      var $41=$vertexp;
      var $incdec_ptr=(($41+4)|0);
      $vertexp=$incdec_ptr;
      var $42=HEAP32[(($41)>>2)];
      $vertex=$42;
      var $tobool33=(($42)|0)!=0;
      if ($tobool33) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $43=$vertex;
      var $44=$43;
      var $bf_field_offs35=(($44+20)|0);
      var $45=$bf_field_offs35;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 >>> 29;
      var $bf_clear36=$47 & 1;
      var $tobool37=(($bf_clear36)|0)!=0;
      if ($tobool37) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $48=$vertex;
      var $49=$newfacet;
      var $call39=_qh_rename_sharedvertex($48, $49);
      var $tobool40=(($call39)|0)!=0;
      if ($tobool40) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $50=$numshare;
      var $inc=((($50)+(1))|0);
      $numshare=$inc;
      var $51=$vertexp;
      var $incdec_ptr42=((($51)-(4))|0);
      $vertexp=$incdec_ptr42;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 26; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $52=$newfacet;
      var $next49=(($52+44)|0);
      var $53=HEAP32[(($next49)>>2)];
      $newfacet=$53;
      label = 20; break;
    case 36: 
      var $54=HEAP32[((((5248992)|0))>>2)];
      $vertex=$54;
      label = 37; break;
    case 37: 
      var $55=$vertex;
      var $tobool52=(($55)|0)!=0;
      if ($tobool52) { label = 38; break; } else { var $58 = 0;label = 39; break; }
    case 38: 
      var $56=$vertex;
      var $next54=(($56)|0);
      var $57=HEAP32[(($next54)>>2)];
      var $tobool55=(($57)|0)!=0;
      var $58 = $tobool55;label = 39; break;
    case 39: 
      var $58;
      if ($58) { label = 40; break; } else { label = 50; break; }
    case 40: 
      var $59=$vertex;
      var $60=$59;
      var $bf_field_offs58=(($60+20)|0);
      var $61=$bf_field_offs58;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 >>> 29;
      var $bf_clear59=$63 & 1;
      var $tobool60=(($bf_clear59)|0)!=0;
      if ($tobool60) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $64=$vertex;
      var $65=$64;
      var $bf_field_offs61=(($65+20)|0);
      var $66=$bf_field_offs61;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 >>> 30;
      var $bf_clear62=$68 & 1;
      var $tobool63=(($bf_clear62)|0)!=0;
      if ($tobool63) { label = 48; break; } else { label = 42; break; }
    case 42: 
      var $69=$vertex;
      var $70=$69;
      var $bf_field_offs65=(($70+20)|0);
      var $71=$bf_field_offs65;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72 & -536870913;
      HEAP32[(($71)>>2)]=$73;
      var $74=HEAP32[((((5247508)|0))>>2)];
      var $cmp66=(($74)|0) >= 4;
      if ($cmp66) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $75=$vertex;
      var $call68=_qh_redundant_vertex($75);
      var $tobool69=(($call68)|0)!=0;
      if ($tobool69) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $76=$numrename;
      var $inc71=((($76)+(1))|0);
      $numrename=$inc71;
      var $call72=_qh_merge_degenredundant();
      var $tobool73=(($call72)|0)!=0;
      if ($tobool73) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $degenredun=1;
      label = 7; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $77=$vertex;
      var $next79=(($77)|0);
      var $78=HEAP32[(($next79)>>2)];
      $vertex=$78;
      label = 37; break;
    case 50: 
      var $79=HEAP32[((((5247040)|0))>>2)];
      var $cmp81=(($79)|0) >= 1;
      if ($cmp81) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $80=HEAP32[((((5248924)|0))>>2)];
      var $81=$numshare;
      var $82=$numrename;
      var $83=$degenredun;
      _qh_fprintf($80, 1014, ((5304220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$81,HEAP32[(((tempInt)+(4))>>2)]=$82,HEAP32[(((tempInt)+(8))>>2)]=$83,tempInt));
      label = 52; break;
    case 52: 
      var $84=$degenredun;
      $retval=$84;
      label = 53; break;
    case 53: 
      var $85=$retval;
      STACKTOP = __stackBase__;
      return $85;
    default: assert(0, "bad label: " + label);
  }

}
_qh_reducevertices["X"]=1;

function _qh_merge_nonconvex($facet1, $facet2, $mergetype) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $mergetype_addr;
      var $bestfacet;
      var $bestneighbor;
      var $neighbor;
      var $dist=__stackBase__;
      var $dist2=(__stackBase__)+(8);
      var $mindist=(__stackBase__)+(16);
      var $mindist2=(__stackBase__)+(24);
      var $maxdist=(__stackBase__)+(32);
      var $maxdist2=(__stackBase__)+(40);
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      $mergetype_addr=$mergetype;
      var $0=HEAP32[((((5247448)|0))>>2)];
      var $sub=((($0)-(1))|0);
      var $1=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp=(($sub)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$2;
      HEAP32[((((5242936)|0))>>2)]=$2;
      label = 4; break;
    case 4: 
      var $3=HEAP32[((((5247040)|0))>>2)];
      var $cmp1=(($3)|0) >= 3;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=HEAP32[((((5248924)|0))>>2)];
      var $5=HEAP32[(((((5244580)|0)))>>2)];
      var $add=((($5)+(1))|0);
      var $6=$facet1_addr;
      var $id=(($6+72)|0);
      var $7=HEAP32[(($id)>>2)];
      var $8=$facet2_addr;
      var $id3=(($8+72)|0);
      var $9=HEAP32[(($id3)>>2)];
      var $10=$mergetype_addr;
      _qh_fprintf($4, 3003, ((5263484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add,HEAP32[(((tempInt)+(4))>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$9,HEAP32[(((tempInt)+(12))>>2)]=$10,tempInt));
      label = 6; break;
    case 6: 
      var $11=$facet1_addr;
      var $12=$11;
      var $bf_field_offs=(($12+76)|0);
      var $13=$bf_field_offs;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 10;
      var $bf_clear=$15 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $16=$facet2_addr;
      $bestfacet=$16;
      var $17=$facet1_addr;
      $facet2_addr=$17;
      var $18=$bestfacet;
      $facet1_addr=$18;
      label = 9; break;
    case 8: 
      var $19=$facet1_addr;
      $bestfacet=$19;
      label = 9; break;
    case 9: 
      var $20=$bestfacet;
      var $call=_qh_findbestneighbor($20, $dist, $mindist, $maxdist);
      $bestneighbor=$call;
      var $21=$facet2_addr;
      var $call7=_qh_findbestneighbor($21, $dist2, $mindist2, $maxdist2);
      $neighbor=$call7;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp8=$22 < $23;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=$bestfacet;
      var $25=$bestneighbor;
      _qh_mergefacet($24, $25, $mindist, $maxdist, 0);
      label = 23; break;
    case 11: 
      var $26=HEAP32[((((5246964)|0))>>2)];
      var $tobool11=(($26)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 21; break; }
    case 12: 
      var $27=$facet2_addr;
      var $28=$27;
      var $bf_field_offs12=(($28+76)|0);
      var $29=$bf_field_offs12;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 10;
      var $bf_clear13=$31 & 1;
      var $tobool14=(($bf_clear13)|0)!=0;
      if ($tobool14) { label = 21; break; } else { label = 13; break; }
    case 13: 
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mindist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mindist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub16=(-$33);
      var $cmp17=$32 >= $sub16;
      if ($cmp17) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp19=$34 <= $35;
      if ($cmp19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($36)*(1.5);
      var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp20=$mul < $37;
      if ($cmp20) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $38=HEAP32[(((((5243092)|0)))>>2)];
      var $inc=((($38)+(1))|0);
      HEAP32[(((((5243092)|0)))>>2)]=$inc;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add22=($40)+($39);
      (HEAPF64[(tempDoublePtr)>>3]=$add22,HEAP32[((((5243108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243100)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243100)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp23=$41 < $42;
      if ($cmp23) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[((((5243100)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243100)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 18; break;
    case 18: 
      var $44=HEAP32[((((5247040)|0))>>2)];
      var $cmp26=(($44)|0) >= 2;
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $45=HEAP32[((((5248924)|0))>>2)];
      var $46=$facet2_addr;
      var $id28=(($46+72)|0);
      var $47=HEAP32[(($id28)>>2)];
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=$facet1_addr;
      var $id29=(($49+72)|0);
      var $50=HEAP32[(($id29)>>2)];
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($45, 2029, ((5263064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,(HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$50,(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 20; break;
    case 20: 
      var $52=$bestfacet;
      var $53=$bestneighbor;
      _qh_mergefacet($52, $53, $mindist, $maxdist, 0);
      label = 22; break;
    case 21: 
      var $54=$facet2_addr;
      var $55=$neighbor;
      _qh_mergefacet($54, $55, $mindist2, $maxdist2, 0);
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $57=HEAP32[((((5247316)|0))>>2)];
      var $tobool34=(($57)|0)!=0;
      if ($tobool34) { label = 24; break; } else { label = 37; break; }
    case 24: 
      var $58=$mergetype_addr;
      var $cmp36=(($58)|0)==2;
      if ($cmp36) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $59=HEAP32[((5243004)>>2)];
      var $inc38=((($59)+(1))|0);
      HEAP32[((5243004)>>2)]=$inc38;
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243020)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243020)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add39=($61)+($60);
      (HEAPF64[(tempDoublePtr)>>3]=$add39,HEAP32[((((5243020)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243020)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $62=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243012)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243012)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp40=$62 < $63;
      if ($cmp40) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $64=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$64,HEAP32[((((5243012)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243012)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 27; break;
    case 27: 
      label = 36; break;
    case 28: 
      var $65=$mergetype_addr;
      var $cmp44=(($65)|0)==3;
      if ($cmp44) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $66=HEAP32[(((((5243180)|0)))>>2)];
      var $inc46=((($66)+(1))|0);
      HEAP32[(((((5243180)|0)))>>2)]=$inc46;
      var $67=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243196)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243196)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add47=($68)+($67);
      (HEAPF64[(tempDoublePtr)>>3]=$add47,HEAP32[((((5243196)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243196)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $69=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243188)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243188)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $70=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp48=$69 < $70;
      if ($cmp48) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$71,HEAP32[((((5243188)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243188)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 31; break;
    case 31: 
      label = 35; break;
    case 32: 
      var $72=HEAP32[(((((5243220)|0)))>>2)];
      var $inc52=((($72)+(1))|0);
      HEAP32[(((((5243220)|0)))>>2)]=$inc52;
      var $73=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243236)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243236)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add53=($74)+($73);
      (HEAPF64[(tempDoublePtr)>>3]=$add53,HEAP32[((((5243236)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243236)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243228)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243228)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $76=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp54=$75 < $76;
      if ($cmp54) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $77=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$77,HEAP32[((((5243228)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243228)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_merge_nonconvex["X"]=1;

function _qh_getmergeset($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      var $nummerges;
      $facetlist_addr=$facetlist;
      var $0=HEAP32[((((5249172)|0))>>2)];
      var $call=_qh_setsize($0);
      $nummerges=$call;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 4026, ((5268468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $3=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $4=$facetlist_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 37; break; }
    case 5: 
      var $5=$facetlist_addr;
      $facet=$5;
      label = 6; break;
    case 6: 
      var $6=$facet;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $9 = 0;label = 8; break; }
    case 7: 
      var $7=$facet;
      var $next=(($7+44)|0);
      var $8=HEAP32[(($next)>>2)];
      var $tobool3=(($8)|0)!=0;
      var $9 = $tobool3;label = 8; break;
    case 8: 
      var $9;
      if ($9) { label = 9; break; } else { label = 36; break; }
    case 9: 
      var $10=$facet;
      var $11=$10;
      var $bf_field_offs=(($11+76)|0);
      var $12=$bf_field_offs;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 >>> 27;
      var $bf_clear=$14 & 1;
      var $tobool4=(($bf_clear)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 35; break;
    case 11: 
      var $15=HEAP32[((((5249156)|0))>>2)];
      var $16=$facet;
      var $visitid=(($16+68)|0);
      HEAP32[(($visitid)>>2)]=$15;
      var $17=$facet;
      var $18=$17;
      var $bf_field_offs7=(($18+76)|0);
      var $19=$bf_field_offs7;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & -134217729;
      var $22=$21 | 134217728;
      HEAP32[(($19)>>2)]=$22;
      $neighbor=0;
      var $23=$facet;
      var $neighbors=(($23+56)|0);
      var $24=HEAP32[(($neighbors)>>2)];
      var $tobool8=(($24)|0)!=0;
      if ($tobool8) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $25=$facet;
      var $neighbors10=(($25+56)|0);
      var $26=HEAP32[(($neighbors10)>>2)];
      var $e=(($26+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $27=$p;
      $neighborp=$27;
      label = 13; break;
    case 13: 
      var $28=$neighborp;
      var $incdec_ptr=(($28+4)|0);
      $neighborp=$incdec_ptr;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool12=(($29)|0)!=0;
      if ($tobool12) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $30=$neighbor;
      var $31=$30;
      var $bf_field_offs14=(($31+76)|0);
      var $32=$bf_field_offs14;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 & -16385;
      HEAP32[(($32)>>2)]=$34;
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      $ridge=0;
      var $35=$facet;
      var $ridges=(($35+52)|0);
      var $36=HEAP32[(($ridges)>>2)];
      var $tobool16=(($36)|0)!=0;
      if ($tobool16) { label = 17; break; } else { label = 34; break; }
    case 17: 
      var $37=$facet;
      var $ridges18=(($37+52)|0);
      var $38=HEAP32[(($ridges18)>>2)];
      var $e19=(($38+4)|0);
      var $arrayidx20=(($e19)|0);
      var $p21=$arrayidx20;
      var $39=$p21;
      $ridgep=$39;
      label = 18; break;
    case 18: 
      var $40=$ridgep;
      var $incdec_ptr23=(($40+4)|0);
      $ridgep=$incdec_ptr23;
      var $41=HEAP32[(($40)>>2)];
      $ridge=$41;
      var $tobool24=(($41)|0)!=0;
      if ($tobool24) { label = 19; break; } else { label = 33; break; }
    case 19: 
      var $42=$ridge;
      var $43=$42;
      var $bf_field_offs26=(($43+12)|0);
      var $44=$bf_field_offs26;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 25;
      var $bf_clear27=$46 & 1;
      var $tobool28=(($bf_clear27)|0)!=0;
      if ($tobool28) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $47=$ridge;
      var $48=$47;
      var $bf_field_offs29=(($48+12)|0);
      var $49=$bf_field_offs29;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50 >>> 26;
      var $bf_clear30=$51 & 1;
      var $tobool31=(($bf_clear30)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 21; break; }
    case 21: 
      label = 18; break;
    case 22: 
      var $52=$ridge;
      var $top=(($52+4)|0);
      var $53=HEAP32[(($top)>>2)];
      var $54=$facet;
      var $cmp34=(($53)|0)==(($54)|0);
      if ($cmp34) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $55=$ridge;
      var $bottom=(($55+8)|0);
      var $56=HEAP32[(($bottom)>>2)];
      var $cond = $56;label = 25; break;
    case 24: 
      var $57=$ridge;
      var $top35=(($57+4)|0);
      var $58=HEAP32[(($top35)>>2)];
      var $cond = $58;label = 25; break;
    case 25: 
      var $cond;
      $neighbor=$cond;
      var $59=$neighbor;
      var $60=$59;
      var $bf_field_offs36=(($60+76)|0);
      var $61=$bf_field_offs36;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 >>> 14;
      var $bf_clear37=$63 & 1;
      var $tobool38=(($bf_clear37)|0)!=0;
      if ($tobool38) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $64=$ridge;
      var $65=$64;
      var $bf_field_offs40=(($65+12)|0);
      var $66=$bf_field_offs40;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & -33554433;
      var $69=$68 | 33554432;
      HEAP32[(($66)>>2)]=$69;
      var $70=$ridge;
      var $71=$70;
      var $bf_field_offs41=(($71+12)|0);
      var $72=$bf_field_offs41;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73 & -67108865;
      HEAP32[(($72)>>2)]=$74;
      label = 32; break;
    case 27: 
      var $75=$neighbor;
      var $visitid42=(($75+68)|0);
      var $76=HEAP32[(($visitid42)>>2)];
      var $77=HEAP32[((((5249156)|0))>>2)];
      var $cmp43=(($76)|0)!=(($77)|0);
      if ($cmp43) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $78=$ridge;
      var $79=$78;
      var $bf_field_offs45=(($79+12)|0);
      var $80=$bf_field_offs45;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & -33554433;
      var $83=$82 | 33554432;
      HEAP32[(($80)>>2)]=$83;
      var $84=$ridge;
      var $85=$84;
      var $bf_field_offs46=(($85+12)|0);
      var $86=$bf_field_offs46;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & -67108865;
      HEAP32[(($86)>>2)]=$88;
      var $89=$neighbor;
      var $90=$89;
      var $bf_field_offs47=(($90+76)|0);
      var $91=$bf_field_offs47;
      var $92=HEAP32[(($91)>>2)];
      var $93=$92 & -16385;
      var $94=$93 | 16384;
      HEAP32[(($91)>>2)]=$94;
      var $95=$facet;
      var $96=$neighbor;
      var $call48=_qh_test_appendmerge($95, $96);
      var $tobool49=(($call48)|0)!=0;
      if ($tobool49) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $97=$ridge;
      var $98=$97;
      var $bf_field_offs51=(($98+12)|0);
      var $99=$bf_field_offs51;
      var $100=HEAP32[(($99)>>2)];
      var $101=$100 & -67108865;
      var $102=$101 | 67108864;
      HEAP32[(($99)>>2)]=$102;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 18; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $103=$facet;
      var $next57=(($103+44)|0);
      var $104=HEAP32[(($next57)>>2)];
      $facet=$104;
      label = 6; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $105=HEAP32[((((5249172)|0))>>2)];
      var $call60=_qh_setsize($105);
      $nummerges=$call60;
      var $106=HEAP32[((((5246940)|0))>>2)];
      var $tobool61=(($106)|0)!=0;
      if ($tobool61) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $107=HEAP32[((((5249172)|0))>>2)];
      var $e63=(($107+4)|0);
      var $arrayidx64=(($e63)|0);
      var $p65=$arrayidx64;
      var $108=$p65;
      var $109=$108;
      var $110=$nummerges;
      _qsort($109, $110, 4, 4);
      label = 40; break;
    case 39: 
      var $111=HEAP32[((((5249172)|0))>>2)];
      var $e67=(($111+4)|0);
      var $arrayidx68=(($e67)|0);
      var $p69=$arrayidx68;
      var $112=$p69;
      var $113=$112;
      var $114=$nummerges;
      _qsort($113, $114, 4, 18);
      label = 40; break;
    case 40: 
      var $115=HEAP32[((((5249124)|0))>>2)];
      var $tobool71=(($115)|0)!=0;
      if ($tobool71) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $116=$nummerges;
      var $117=HEAP32[(((((5244028)|0)))>>2)];
      var $add=((($117)+($116))|0);
      HEAP32[(((((5244028)|0)))>>2)]=$add;
      label = 45; break;
    case 42: 
      var $118=$nummerges;
      var $119=HEAP32[(((((5244012)|0)))>>2)];
      var $add74=((($119)+($118))|0);
      HEAP32[(((((5244012)|0)))>>2)]=$add74;
      var $120=HEAP32[(((((5244020)|0)))>>2)];
      var $121=$nummerges;
      var $cmp75=(($120)|0) < (($121)|0);
      if ($cmp75) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $122=$nummerges;
      HEAP32[(((((5244020)|0)))>>2)]=$122;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $123=HEAP32[((((5247040)|0))>>2)];
      var $cmp79=(($123)|0) >= 2;
      if ($cmp79) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $124=HEAP32[((((5248924)|0))>>2)];
      var $125=$nummerges;
      _qh_fprintf($124, 2021, ((5268228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$125,tempInt));
      label = 47; break;
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_getmergeset["X"]=1;

function _qh_compareangle($p1, $p2) {
  var label = 0;


  var $p1_addr;
  var $p2_addr;
  var $a;
  var $b;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  $a=$2;
  var $3=$p2_addr;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  $b=$5;
  var $6=$a;
  var $angle=(($6)|0);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $8=$b;
  var $angle1=(($8)|0);
  var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $cmp=$7 > $9;
  var $cond=$cmp ? 1 : -1;

  return $cond;
}


function _qh_comparemerge($p1, $p2) {
  var label = 0;


  var $p1_addr;
  var $p2_addr;
  var $a;
  var $b;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  $a=$2;
  var $3=$p2_addr;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  $b=$5;
  var $6=$a;
  var $type=(($6+16)|0);
  var $7=HEAP32[(($type)>>2)];
  var $8=$b;
  var $type1=(($8+16)|0);
  var $9=HEAP32[(($type1)>>2)];
  var $sub=((($7)-($9))|0);

  return $sub;
}


function _qh_comparevisit($p1, $p2) {
  var label = 0;


  var $p1_addr;
  var $p2_addr;
  var $a;
  var $b;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  $a=$2;
  var $3=$p2_addr;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  $b=$5;
  var $6=$a;
  var $7=$6;
  var $bf_field_offs=(($7+16)|0);
  var $8=$bf_field_offs;
  var $9=HEAP32[(($8)>>2)];
  var $bf_clear=$9 & 2147483647;
  var $10=$b;
  var $11=$10;
  var $bf_field_offs1=(($11+16)|0);
  var $12=$bf_field_offs1;
  var $13=HEAP32[(($12)>>2)];
  var $bf_clear2=$13 & 2147483647;
  var $sub=((($bf_clear)-($bf_clear2))|0);

  return $sub;
}


function _qh_test_vneighbors() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newfacet;
      var $neighbor;
      var $neighborp;
      var $vertex;
      var $vertexp;
      var $nummerges;
      $nummerges=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1015, ((5299788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5248580)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      _qh_vertexneighbors();
      label = 6; break;
    case 6: 
      var $3=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$3;
      label = 7; break;
    case 7: 
      var $4=$newfacet;
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { label = 8; break; } else { var $7 = 0;label = 9; break; }
    case 8: 
      var $5=$newfacet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool4=(($6)|0)!=0;
      var $7 = $tobool4;label = 9; break;
    case 9: 
      var $7;
      if ($7) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $8=$newfacet;
      var $9=$8;
      var $bf_field_offs=(($9+76)|0);
      var $10=$bf_field_offs;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & -16385;
      HEAP32[(($10)>>2)]=$12;
      label = 11; break;
    case 11: 
      var $13=$newfacet;
      var $next5=(($13+44)|0);
      var $14=HEAP32[(($next5)>>2)];
      $newfacet=$14;
      label = 7; break;
    case 12: 
      var $15=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$15;
      label = 13; break;
    case 13: 
      var $16=$newfacet;
      var $tobool7=(($16)|0)!=0;
      if ($tobool7) { label = 14; break; } else { var $19 = 0;label = 15; break; }
    case 14: 
      var $17=$newfacet;
      var $next9=(($17+44)|0);
      var $18=HEAP32[(($next9)>>2)];
      var $tobool10=(($18)|0)!=0;
      var $19 = $tobool10;label = 15; break;
    case 15: 
      var $19;
      if ($19) { label = 16; break; } else { label = 38; break; }
    case 16: 
      var $20=$newfacet;
      var $21=$20;
      var $bf_field_offs13=(($21+76)|0);
      var $22=$bf_field_offs13;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & -16385;
      var $25=$24 | 16384;
      HEAP32[(($22)>>2)]=$25;
      var $26=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($26)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $27=$newfacet;
      var $visitid=(($27+68)|0);
      HEAP32[(($visitid)>>2)]=$26;
      $neighbor=0;
      var $28=$newfacet;
      var $neighbors=(($28+56)|0);
      var $29=HEAP32[(($neighbors)>>2)];
      var $tobool14=(($29)|0)!=0;
      if ($tobool14) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $30=$newfacet;
      var $neighbors16=(($30+56)|0);
      var $31=HEAP32[(($neighbors16)>>2)];
      var $e=(($31+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $32=$p;
      $neighborp=$32;
      label = 18; break;
    case 18: 
      var $33=$neighborp;
      var $incdec_ptr=(($33+4)|0);
      $neighborp=$incdec_ptr;
      var $34=HEAP32[(($33)>>2)];
      $neighbor=$34;
      var $tobool18=(($34)|0)!=0;
      if ($tobool18) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $35=HEAP32[((((5249156)|0))>>2)];
      var $36=$newfacet;
      var $visitid20=(($36+68)|0);
      HEAP32[(($visitid20)>>2)]=$35;
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      $vertex=0;
      var $37=$newfacet;
      var $vertices=(($37+48)|0);
      var $38=HEAP32[(($vertices)>>2)];
      var $tobool23=(($38)|0)!=0;
      if ($tobool23) { label = 22; break; } else { label = 36; break; }
    case 22: 
      var $39=$newfacet;
      var $vertices25=(($39+48)|0);
      var $40=HEAP32[(($vertices25)>>2)];
      var $e26=(($40+4)|0);
      var $arrayidx27=(($e26)|0);
      var $p28=$arrayidx27;
      var $41=$p28;
      $vertexp=$41;
      label = 23; break;
    case 23: 
      var $42=$vertexp;
      var $incdec_ptr30=(($42+4)|0);
      $vertexp=$incdec_ptr30;
      var $43=HEAP32[(($42)>>2)];
      $vertex=$43;
      var $tobool31=(($43)|0)!=0;
      if ($tobool31) { label = 24; break; } else { label = 35; break; }
    case 24: 
      $neighbor=0;
      var $44=$vertex;
      var $neighbors33=(($44+12)|0);
      var $45=HEAP32[(($neighbors33)>>2)];
      var $tobool34=(($45)|0)!=0;
      if ($tobool34) { label = 25; break; } else { label = 34; break; }
    case 25: 
      var $46=$vertex;
      var $neighbors36=(($46+12)|0);
      var $47=HEAP32[(($neighbors36)>>2)];
      var $e37=(($47+4)|0);
      var $arrayidx38=(($e37)|0);
      var $p39=$arrayidx38;
      var $48=$p39;
      $neighborp=$48;
      label = 26; break;
    case 26: 
      var $49=$neighborp;
      var $incdec_ptr41=(($49+4)|0);
      $neighborp=$incdec_ptr41;
      var $50=HEAP32[(($49)>>2)];
      $neighbor=$50;
      var $tobool42=(($50)|0)!=0;
      if ($tobool42) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $51=$neighbor;
      var $52=$51;
      var $bf_field_offs44=(($52+76)|0);
      var $53=$bf_field_offs44;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 >>> 14;
      var $bf_clear=$55 & 1;
      var $tobool45=(($bf_clear)|0)!=0;
      if ($tobool45) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $56=$neighbor;
      var $visitid46=(($56+68)|0);
      var $57=HEAP32[(($visitid46)>>2)];
      var $58=HEAP32[((((5249156)|0))>>2)];
      var $cmp47=(($57)|0)==(($58)|0);
      if ($cmp47) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 26; break;
    case 30: 
      var $59=$newfacet;
      var $60=$neighbor;
      var $call=_qh_test_appendmerge($59, $60);
      var $tobool50=(($call)|0)!=0;
      if ($tobool50) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $61=$nummerges;
      var $inc52=((($61)+(1))|0);
      $nummerges=$inc52;
      label = 32; break;
    case 32: 
      label = 26; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 23; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $62=$newfacet;
      var $next59=(($62+44)|0);
      var $63=HEAP32[(($next59)>>2)];
      $newfacet=$63;
      label = 13; break;
    case 38: 
      var $64=$nummerges;
      var $65=HEAP32[(((((5244556)|0)))>>2)];
      var $add=((($65)+($64))|0);
      HEAP32[(((((5244556)|0)))>>2)]=$add;
      var $66=HEAP32[((((5247040)|0))>>2)];
      var $cmp61=(($66)|0) >= 1;
      if ($cmp61) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $67=HEAP32[((((5248924)|0))>>2)];
      var $68=$nummerges;
      _qh_fprintf($67, 1016, ((5299516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$68,tempInt));
      label = 40; break;
    case 40: 
      var $69=$nummerges;
      var $cmp64=(($69)|0) > 0;
      var $conv=(($cmp64)&1);
      STACKTOP = __stackBase__;
      return $conv;
    default: assert(0, "bad label: " + label);
  }

}
_qh_test_vneighbors["X"]=1;

function _qh_appendmergeset($facet, $neighbor, $mergetype, $angle) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $neighbor_addr;
      var $mergetype_addr;
      var $angle_addr;
      var $merge;
      var $lastmerge;
      var $freelistp;
      $facet_addr=$facet;
      $neighbor_addr=$neighbor;
      $mergetype_addr=$mergetype;
      $angle_addr=$angle;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 31;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 28; break;
    case 4: 
      var $5=$facet_addr;
      var $6=$5;
      var $bf_field_offs1=(($6+76)|0);
      var $7=$bf_field_offs1;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 30;
      var $bf_clear2=$9 & 1;
      var $tobool3=(($bf_clear2)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $10=$mergetype_addr;
      var $cmp=(($10)|0)==6;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 28; break;
    case 7: 
      $freelistp=0;
      var $call=_qh_memalloc(20);
      var $11=$call;
      $merge=$11;
      var $12=$facet_addr;
      var $13=$merge;
      var $facet1=(($13+8)|0);
      HEAP32[(($facet1)>>2)]=$12;
      var $14=$neighbor_addr;
      var $15=$merge;
      var $facet2=(($15+12)|0);
      HEAP32[(($facet2)>>2)]=$14;
      var $16=$mergetype_addr;
      var $17=$merge;
      var $type=(($17+16)|0);
      HEAP32[(($type)>>2)]=$16;
      var $18=$angle_addr;
      var $tobool6=(($18)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $19=HEAP32[((((5246940)|0))>>2)];
      var $tobool8=(($19)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=$angle_addr;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $22=$merge;
      var $angle10=(($22)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$21,HEAP32[(($angle10)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angle10)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      var $23=$mergetype_addr;
      var $cmp12=(($23)>>>0) < 6;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $24=$merge;
      var $25=$24;
      _qh_setappend(((5249172)|0), $25);
      label = 28; break;
    case 12: 
      var $26=$mergetype_addr;
      var $cmp14=(($26)|0)==6;
      if ($cmp14) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $27=$facet_addr;
      var $28=$27;
      var $bf_field_offs16=(($28+76)|0);
      var $29=$bf_field_offs16;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & -1073741825;
      var $32=$31 | 1073741824;
      HEAP32[(($29)>>2)]=$32;
      var $33=HEAP32[((((5249176)|0))>>2)];
      var $call17=_qh_setlast($33);
      var $34=$call17;
      $lastmerge=$34;
      var $tobool18=(($34)|0)!=0;
      if ($tobool18) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$lastmerge;
      var $type19=(($35+16)|0);
      var $36=HEAP32[(($type19)>>2)];
      var $cmp20=(($36)|0)==6;
      if ($cmp20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $37=$merge;
      var $38=$37;
      _qh_setappend(((5249176)|0), $38);
      label = 17; break;
    case 16: 
      var $39=$merge;
      var $40=$39;
      _qh_setaddnth(((5249176)|0), 0, $40);
      label = 17; break;
    case 17: 
      label = 27; break;
    case 18: 
      var $41=$mergetype_addr;
      var $cmp25=(($41)|0)==7;
      if ($cmp25) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $42=$facet_addr;
      var $43=$42;
      var $bf_field_offs27=(($43+76)|0);
      var $44=$bf_field_offs27;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & 2147483647;
      var $47=$46 | -2147483648;
      HEAP32[(($44)>>2)]=$47;
      var $48=$merge;
      var $49=$48;
      _qh_setappend(((5249176)|0), $49);
      label = 26; break;
    case 20: 
      var $50=$facet_addr;
      var $51=$50;
      var $bf_field_offs29=(($51+76)|0);
      var $52=$bf_field_offs29;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 >>> 31;
      var $bf_clear30=$54 & 1;
      var $tobool31=(($bf_clear30)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $55=$neighbor_addr;
      var $56=$55;
      var $bf_field_offs33=(($56+76)|0);
      var $57=$bf_field_offs33;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 >>> 31;
      var $bf_clear34=$59 & 1;
      var $tobool35=(($bf_clear34)|0)!=0;
      if ($tobool35) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $60=HEAP32[((((5248924)|0))>>2)];
      var $61=$facet_addr;
      var $id=(($61+72)|0);
      var $62=HEAP32[(($id)>>2)];
      var $63=$neighbor_addr;
      var $id37=(($63+72)|0);
      var $64=HEAP32[(($id37)>>2)];
      _qh_fprintf($60, 6092, ((5258908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$62,HEAP32[(((tempInt)+(4))>>2)]=$64,tempInt));
      var $65=$facet_addr;
      var $66=$neighbor_addr;
      _qh_errexit2(5, $65, $66);
      label = 23; break;
    case 23: 
      var $67=$facet_addr;
      var $vertices=(($67+48)|0);
      var $68=HEAP32[(($vertices)>>2)];
      var $69=$neighbor_addr;
      var $vertices39=(($69+48)|0);
      var $70=HEAP32[(($vertices39)>>2)];
      var $call40=_qh_setequal($68, $70);
      var $tobool41=(($call40)|0)!=0;
      if ($tobool41) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $71=HEAP32[((((5248924)|0))>>2)];
      var $72=$facet_addr;
      var $id43=(($72+72)|0);
      var $73=HEAP32[(($id43)>>2)];
      var $74=$neighbor_addr;
      var $id44=(($74+72)|0);
      var $75=HEAP32[(($id44)>>2)];
      _qh_fprintf($71, 6093, ((5255796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$73,HEAP32[(((tempInt)+(4))>>2)]=$75,tempInt));
      var $76=$facet_addr;
      var $77=$neighbor_addr;
      _qh_errexit2(5, $76, $77);
      label = 25; break;
    case 25: 
      var $78=$facet_addr;
      var $79=$78;
      var $bf_field_offs46=(($79+76)|0);
      var $80=$bf_field_offs46;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 2147483647;
      var $83=$82 | -2147483648;
      HEAP32[(($80)>>2)]=$83;
      var $84=$neighbor_addr;
      var $85=$84;
      var $bf_field_offs47=(($85+76)|0);
      var $86=$bf_field_offs47;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 2147483647;
      var $89=$88 | -2147483648;
      HEAP32[(($86)>>2)]=$89;
      var $90=$merge;
      var $91=$90;
      _qh_setappend(((5249176)|0), $91);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_appendmergeset["X"]=1;

function _qh_basevertices($samecycle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $same;
      var $apex;
      var $vertex;
      var $vertexp;
      var $vertices=__stackBase__;
      $samecycle_addr=$samecycle;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($vertices)>>2)]=$call;
      var $1=$samecycle_addr;
      var $vertices1=(($1+48)|0);
      var $2=HEAP32[(($vertices1)>>2)];
      var $e=(($2+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      $apex=$4;
      var $5=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$5 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $6=$bf_value & 2147483647;
      var $7=HEAP32[(((((5249160)|0)))>>2)];
      var $8=$7 & -2147483648;
      var $9=$8 | $6;
      HEAP32[(((((5249160)|0)))>>2)]=$9;
      var $10=$apex;
      var $bf_value2=$bf_value & 2147483647;
      var $11=$10;
      var $bf_field_offs=(($11+16)|0);
      var $12=$bf_field_offs;
      var $13=$bf_value2 & 2147483647;
      var $14=HEAP32[(($12)>>2)];
      var $15=$14 & -2147483648;
      var $16=$15 | $13;
      HEAP32[(($12)>>2)]=$16;
      var $17=$samecycle_addr;
      var $f=(($17+28)|0);
      var $samecycle3=$f;
      var $18=HEAP32[(($samecycle3)>>2)];
      $same=$18;
      label = 3; break;
    case 3: 
      var $19=$same;
      var $tobool=(($19)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $20=$same;
      var $21=$20;
      var $bf_field_offs4=(($21+76)|0);
      var $22=$bf_field_offs4;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 22;
      var $bf_clear5=$24 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 14; break;
    case 6: 
      $vertex=0;
      var $25=$same;
      var $vertices7=(($25+48)|0);
      var $26=HEAP32[(($vertices7)>>2)];
      var $tobool8=(($26)|0)!=0;
      if ($tobool8) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $27=$same;
      var $vertices10=(($27+48)|0);
      var $28=HEAP32[(($vertices10)>>2)];
      var $e11=(($28+4)|0);
      var $arrayidx12=(($e11)|0);
      var $p13=$arrayidx12;
      var $29=$p13;
      $vertexp=$29;
      label = 8; break;
    case 8: 
      var $30=$vertexp;
      var $incdec_ptr=(($30+4)|0);
      $vertexp=$incdec_ptr;
      var $31=HEAP32[(($30)>>2)];
      $vertex=$31;
      var $tobool15=(($31)|0)!=0;
      if ($tobool15) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $32=$vertex;
      var $33=$32;
      var $bf_field_offs17=(($33+16)|0);
      var $34=$bf_field_offs17;
      var $35=HEAP32[(($34)>>2)];
      var $bf_clear18=$35 & 2147483647;
      var $36=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear19=$36 & 2147483647;
      var $cmp=(($bf_clear18)|0)!=(($bf_clear19)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$vertex;
      var $38=$37;
      _qh_setappend($vertices, $38);
      var $39=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear21=$39 & 2147483647;
      var $40=$vertex;
      var $bf_value22=$bf_clear21 & 2147483647;
      var $41=$40;
      var $bf_field_offs23=(($41+16)|0);
      var $42=$bf_field_offs23;
      var $43=$bf_value22 & 2147483647;
      var $44=HEAP32[(($42)>>2)];
      var $45=$44 & -2147483648;
      var $46=$45 | $43;
      HEAP32[(($42)>>2)]=$46;
      var $47=$vertex;
      var $48=$47;
      var $bf_field_offs24=(($48+20)|0);
      var $49=$bf_field_offs24;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50 & -268435457;
      HEAP32[(($49)>>2)]=$51;
      label = 11; break;
    case 11: 
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $52=$same;
      var $53=$samecycle_addr;
      var $cmp27=(($52)|0)==(($53)|0);
      if ($cmp27) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $cond = 0;label = 17; break;
    case 16: 
      var $54=$same;
      var $f28=(($54+28)|0);
      var $samecycle29=$f28;
      var $55=HEAP32[(($samecycle29)>>2)];
      var $cond = $55;label = 17; break;
    case 17: 
      var $cond;
      $same=$cond;
      label = 3; break;
    case 18: 
      var $56=HEAP32[((((5247040)|0))>>2)];
      var $cmp31=(($56)|0) >= 4;
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $57=HEAP32[((((5248924)|0))>>2)];
      var $58=HEAP32[(($vertices)>>2)];
      var $call33=_qh_setsize($58);
      _qh_fprintf($57, 4019, ((5253212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call33,tempInt));
      label = 20; break;
    case 20: 
      var $59=HEAP32[(($vertices)>>2)];
      STACKTOP = __stackBase__;
      return $59;
    default: assert(0, "bad label: " + label);
  }

}
_qh_basevertices["X"]=1;

function _qh_copynonconvex($atridge) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $atridge_addr;
      var $facet;
      var $otherfacet;
      var $ridge;
      var $ridgep;
      $atridge_addr=$atridge;
      var $0=$atridge_addr;
      var $top=(($0+4)|0);
      var $1=HEAP32[(($top)>>2)];
      $facet=$1;
      var $2=$atridge_addr;
      var $bottom=(($2+8)|0);
      var $3=HEAP32[(($bottom)>>2)];
      $otherfacet=$3;
      $ridge=0;
      var $4=$facet;
      var $ridges=(($4+52)|0);
      var $5=HEAP32[(($ridges)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 15; break; }
    case 3: 
      var $6=$facet;
      var $ridges1=(($6+52)|0);
      var $7=HEAP32[(($ridges1)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=$p;
      $ridgep=$8;
      label = 4; break;
    case 4: 
      var $9=$ridgep;
      var $incdec_ptr=(($9+4)|0);
      $ridgep=$incdec_ptr;
      var $10=HEAP32[(($9)>>2)];
      $ridge=$10;
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $11=$otherfacet;
      var $12=$ridge;
      var $top3=(($12+4)|0);
      var $13=HEAP32[(($top3)>>2)];
      var $14=$facet;
      var $cmp=(($13)|0)==(($14)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=$ridge;
      var $bottom4=(($15+8)|0);
      var $16=HEAP32[(($bottom4)>>2)];
      var $cond = $16;label = 8; break;
    case 7: 
      var $17=$ridge;
      var $top5=(($17+4)|0);
      var $18=HEAP32[(($top5)>>2)];
      var $cond = $18;label = 8; break;
    case 8: 
      var $cond;
      var $cmp6=(($11)|0)==(($cond)|0);
      if ($cmp6) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $19=$ridge;
      var $20=$atridge_addr;
      var $cmp7=(($19)|0)!=(($20)|0);
      if ($cmp7) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $21=$ridge;
      var $22=$21;
      var $bf_field_offs=(($22+12)|0);
      var $23=$bf_field_offs;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & -67108865;
      var $26=$25 | 67108864;
      HEAP32[(($23)>>2)]=$26;
      var $27=HEAP32[((((5247040)|0))>>2)];
      var $cmp9=(($27)|0) >= 4;
      if ($cmp9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=HEAP32[((((5248924)|0))>>2)];
      var $29=$atridge_addr;
      var $30=$29;
      var $bf_field_offs11=(($30+12)|0);
      var $31=$bf_field_offs11;
      var $32=HEAP32[(($31)>>2)];
      var $bf_clear=$32 & 16777215;
      var $33=$ridge;
      var $34=$33;
      var $bf_field_offs12=(($34+12)|0);
      var $35=$bf_field_offs12;
      var $36=HEAP32[(($35)>>2)];
      var $bf_clear13=$36 & 16777215;
      _qh_fprintf($28, 4020, ((5291268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear13,tempInt));
      label = 12; break;
    case 12: 
      label = 14; break;
    case 13: 
      label = 4; break;
    case 14: 
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_copynonconvex["X"]=1;

function _qh_degen_redundant_facet($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $vertex;
      var $vertexp;
      var $neighbor;
      var $neighborp;
      $facet_addr=$facet;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 4021, ((5289232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      $neighbor=0;
      var $4=$facet_addr;
      var $neighbors=(($4+56)|0);
      var $5=HEAP32[(($neighbors)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 25; break; }
    case 5: 
      var $6=$facet_addr;
      var $neighbors2=(($6+56)|0);
      var $7=HEAP32[(($neighbors2)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=$p;
      $neighborp=$8;
      label = 6; break;
    case 6: 
      var $9=$neighborp;
      var $incdec_ptr=(($9+4)|0);
      $neighborp=$incdec_ptr;
      var $10=HEAP32[(($9)>>2)];
      $neighbor=$10;
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 24; break; }
    case 7: 
      var $11=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$11 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $12=$bf_value & 2147483647;
      var $13=HEAP32[(((((5249160)|0)))>>2)];
      var $14=$13 & -2147483648;
      var $15=$14 | $12;
      HEAP32[(((((5249160)|0)))>>2)]=$15;
      $vertex=0;
      var $16=$neighbor;
      var $vertices=(($16+48)|0);
      var $17=HEAP32[(($vertices)>>2)];
      var $tobool4=(($17)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $18=$neighbor;
      var $vertices6=(($18+48)|0);
      var $19=HEAP32[(($vertices6)>>2)];
      var $e7=(($19+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $20=$p9;
      $vertexp=$20;
      label = 9; break;
    case 9: 
      var $21=$vertexp;
      var $incdec_ptr11=(($21+4)|0);
      $vertexp=$incdec_ptr11;
      var $22=HEAP32[(($21)>>2)];
      $vertex=$22;
      var $tobool12=(($22)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear14=$23 & 2147483647;
      var $24=$vertex;
      var $bf_value15=$bf_clear14 & 2147483647;
      var $25=$24;
      var $bf_field_offs=(($25+16)|0);
      var $26=$bf_field_offs;
      var $27=$bf_value15 & 2147483647;
      var $28=HEAP32[(($26)>>2)];
      var $29=$28 & -2147483648;
      var $30=$29 | $27;
      HEAP32[(($26)>>2)]=$30;
      label = 9; break;
    case 11: 
      label = 12; break;
    case 12: 
      $vertex=0;
      var $31=$facet_addr;
      var $vertices17=(($31+48)|0);
      var $32=HEAP32[(($vertices17)>>2)];
      var $tobool18=(($32)|0)!=0;
      if ($tobool18) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $33=$facet_addr;
      var $vertices20=(($33+48)|0);
      var $34=HEAP32[(($vertices20)>>2)];
      var $e21=(($34+4)|0);
      var $arrayidx22=(($e21)|0);
      var $p23=$arrayidx22;
      var $35=$p23;
      $vertexp=$35;
      label = 14; break;
    case 14: 
      var $36=$vertexp;
      var $incdec_ptr25=(($36+4)|0);
      $vertexp=$incdec_ptr25;
      var $37=HEAP32[(($36)>>2)];
      $vertex=$37;
      var $tobool26=(($37)|0)!=0;
      if ($tobool26) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $38=$vertex;
      var $39=$38;
      var $bf_field_offs28=(($39+16)|0);
      var $40=$bf_field_offs28;
      var $41=HEAP32[(($40)>>2)];
      var $bf_clear29=$41 & 2147483647;
      var $42=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear30=$42 & 2147483647;
      var $cmp31=(($bf_clear29)|0)!=(($bf_clear30)|0);
      if ($cmp31) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $43=$vertex;
      var $tobool36=(($43)|0)!=0;
      if ($tobool36) { label = 23; break; } else { label = 20; break; }
    case 20: 
      var $44=$facet_addr;
      var $45=$neighbor;
      _qh_appendmergeset($44, $45, 7, 0);
      var $46=HEAP32[((((5247040)|0))>>2)];
      var $cmp38=(($46)|0) >= 2;
      if ($cmp38) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $47=HEAP32[((((5248924)|0))>>2)];
      var $48=$facet_addr;
      var $id40=(($48+72)|0);
      var $49=HEAP32[(($id40)>>2)];
      var $50=$neighbor;
      var $id41=(($50+72)|0);
      var $51=HEAP32[(($id41)>>2)];
      _qh_fprintf($47, 2015, ((5286952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=$51,tempInt));
      label = 22; break;
    case 22: 
      label = 29; break;
    case 23: 
      label = 6; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $52=$facet_addr;
      var $neighbors46=(($52+56)|0);
      var $53=HEAP32[(($neighbors46)>>2)];
      var $call=_qh_setsize($53);
      var $54=HEAP32[((((5247508)|0))>>2)];
      var $cmp47=(($call)|0) < (($54)|0);
      if ($cmp47) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $55=$facet_addr;
      var $56=$facet_addr;
      _qh_appendmergeset($55, $56, 6, 0);
      var $57=HEAP32[((((5247040)|0))>>2)];
      var $cmp49=(($57)|0) >= 2;
      if ($cmp49) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $58=HEAP32[((((5248924)|0))>>2)];
      var $59=$facet_addr;
      var $id51=(($59+72)|0);
      var $60=HEAP32[(($id51)>>2)];
      _qh_fprintf($58, 2016, ((5285232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$60,tempInt));
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_degen_redundant_facet["X"]=1;


function _qh_find_newvertex($oldvertex, $vertices, $ridges) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $oldvertex_addr;
      var $vertices_addr;
      var $ridges_addr;
      var $vertex;
      var $vertexp;
      var $newridges=__stackBase__;
      var $ridge;
      var $ridgep;
      var $size;
      var $hashsize;
      var $hash=(__stackBase__)+(4);
      $oldvertex_addr=$oldvertex;
      $vertices_addr=$vertices;
      $ridges_addr=$ridges;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$oldvertex_addr;
      var $3=$2;
      var $bf_field_offs=(($3+20)|0);
      var $4=$bf_field_offs;
      var $5=HEAP32[(($4)>>2)];
      var $bf_clear=$5 & 16777215;
      _qh_fprintf($1, 8063, ((5278464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      $vertex=0;
      var $6=$vertices_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$vertices_addr;
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=$p;
      $vertexp=$8;
      label = 5; break;
    case 5: 
      var $9=$vertexp;
      var $incdec_ptr=(($9+4)|0);
      $vertexp=$incdec_ptr;
      var $10=HEAP32[(($9)>>2)];
      $vertex=$10;
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      var $12=$vertex;
      var $13=$12;
      var $bf_field_offs3=(($13+20)|0);
      var $14=$bf_field_offs3;
      var $15=HEAP32[(($14)>>2)];
      var $bf_clear4=$15 & 16777215;
      _qh_fprintf($11, 8064, ((5277772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear4,tempInt));
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      $ridge=0;
      var $16=$ridges_addr;
      var $tobool5=(($16)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $17=$ridges_addr;
      var $e7=(($17+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $18=$p9;
      $ridgep=$18;
      label = 10; break;
    case 10: 
      var $19=$ridgep;
      var $incdec_ptr11=(($19+4)|0);
      $ridgep=$incdec_ptr11;
      var $20=HEAP32[(($19)>>2)];
      $ridge=$20;
      var $tobool12=(($20)|0)!=0;
      if ($tobool12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=HEAP32[((((5248924)|0))>>2)];
      var $22=$ridge;
      var $23=$22;
      var $bf_field_offs14=(($23+12)|0);
      var $24=$bf_field_offs14;
      var $25=HEAP32[(($24)>>2)];
      var $bf_clear15=$25 & 16777215;
      _qh_fprintf($21, 8065, ((5277104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear15,tempInt));
      label = 10; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($26, 8066, ((5276620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      $vertex=0;
      var $27=$vertices_addr;
      var $tobool19=(($27)|0)!=0;
      if ($tobool19) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $28=$vertices_addr;
      var $e21=(($28+4)|0);
      var $arrayidx22=(($e21)|0);
      var $p23=$arrayidx22;
      var $29=$p23;
      $vertexp=$29;
      label = 16; break;
    case 16: 
      var $30=$vertexp;
      var $incdec_ptr25=(($30+4)|0);
      $vertexp=$incdec_ptr25;
      var $31=HEAP32[(($30)>>2)];
      $vertex=$31;
      var $tobool26=(($31)|0)!=0;
      if ($tobool26) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $32=$vertex;
      var $33=$32;
      var $bf_field_offs28=(($33+16)|0);
      var $34=$bf_field_offs28;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & -2147483648;
      HEAP32[(($34)>>2)]=$36;
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      $ridge=0;
      var $37=$ridges_addr;
      var $tobool31=(($37)|0)!=0;
      if ($tobool31) { label = 20; break; } else { label = 29; break; }
    case 20: 
      var $38=$ridges_addr;
      var $e33=(($38+4)|0);
      var $arrayidx34=(($e33)|0);
      var $p35=$arrayidx34;
      var $39=$p35;
      $ridgep=$39;
      label = 21; break;
    case 21: 
      var $40=$ridgep;
      var $incdec_ptr37=(($40+4)|0);
      $ridgep=$incdec_ptr37;
      var $41=HEAP32[(($40)>>2)];
      $ridge=$41;
      var $tobool38=(($41)|0)!=0;
      if ($tobool38) { label = 22; break; } else { label = 28; break; }
    case 22: 
      $vertex=0;
      var $42=$ridge;
      var $vertices40=(($42)|0);
      var $43=HEAP32[(($vertices40)>>2)];
      var $tobool41=(($43)|0)!=0;
      if ($tobool41) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $44=$ridge;
      var $vertices43=(($44)|0);
      var $45=HEAP32[(($vertices43)>>2)];
      var $e44=(($45+4)|0);
      var $arrayidx45=(($e44)|0);
      var $p46=$arrayidx45;
      var $46=$p46;
      $vertexp=$46;
      label = 24; break;
    case 24: 
      var $47=$vertexp;
      var $incdec_ptr48=(($47+4)|0);
      $vertexp=$incdec_ptr48;
      var $48=HEAP32[(($47)>>2)];
      $vertex=$48;
      var $tobool49=(($48)|0)!=0;
      if ($tobool49) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $49=$vertex;
      var $50=$49;
      var $bf_field_offs51=(($50+16)|0);
      var $51=$bf_field_offs51;
      var $52=HEAP32[(($51)>>2)];
      var $bf_clear52=$52 & 2147483647;
      var $inc=((($bf_clear52)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $53=$49;
      var $bf_field_offs53=(($53+16)|0);
      var $54=$bf_field_offs53;
      var $55=$bf_value & 2147483647;
      var $56=HEAP32[(($54)>>2)];
      var $57=$56 & -2147483648;
      var $58=$57 | $55;
      HEAP32[(($54)>>2)]=$58;
      label = 24; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 21; break;
    case 28: 
      label = 29; break;
    case 29: 
      $vertex=0;
      var $59=$vertices_addr;
      var $tobool58=(($59)|0)!=0;
      if ($tobool58) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $60=$vertices_addr;
      var $e60=(($60+4)|0);
      var $arrayidx61=(($e60)|0);
      var $p62=$arrayidx61;
      var $61=$p62;
      $vertexp=$61;
      label = 31; break;
    case 31: 
      var $62=$vertexp;
      var $incdec_ptr64=(($62+4)|0);
      $vertexp=$incdec_ptr64;
      var $63=HEAP32[(($62)>>2)];
      $vertex=$63;
      var $tobool65=(($63)|0)!=0;
      if ($tobool65) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $64=$vertex;
      var $65=$64;
      var $bf_field_offs67=(($65+16)|0);
      var $66=$bf_field_offs67;
      var $67=HEAP32[(($66)>>2)];
      var $bf_clear68=$67 & 2147483647;
      var $tobool69=(($bf_clear68)|0)!=0;
      if ($tobool69) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $68=$vertices_addr;
      var $69=$vertexp;
      var $70=$69;
      var $71=$vertices_addr;
      var $e71=(($71+4)|0);
      var $arrayidx72=(($e71+4)|0);
      var $p73=$arrayidx72;
      var $sub_ptr_lhs_cast=$70;
      var $sub_ptr_rhs_cast=$p73;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $call=_qh_setdelnth($68, $sub_ptr_div);
      var $72=$vertexp;
      var $incdec_ptr74=((($72)-(4))|0);
      $vertexp=$incdec_ptr74;
      label = 34; break;
    case 34: 
      label = 31; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $73=$ridges_addr;
      var $call78=_qh_setsize($73);
      var $74=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear79=$74 & 2147483647;
      var $add=((($bf_clear79)+($call78))|0);
      var $bf_value80=$add & 2147483647;
      var $75=$bf_value80 & 2147483647;
      var $76=HEAP32[(((((5249160)|0)))>>2)];
      var $77=$76 & -2147483648;
      var $78=$77 | $75;
      HEAP32[(((((5249160)|0)))>>2)]=$78;
      var $79=$vertices_addr;
      var $call81=_qh_setsize($79);
      var $tobool82=(($call81)|0)!=0;
      if ($tobool82) { label = 40; break; } else { label = 37; break; }
    case 37: 
      var $80=HEAP32[((((5247040)|0))>>2)];
      var $cmp84=(($80)|0) >= 4;
      if ($cmp84) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $81=HEAP32[((((5248924)|0))>>2)];
      var $82=$oldvertex_addr;
      var $83=$82;
      var $bf_field_offs86=(($83+20)|0);
      var $84=$bf_field_offs86;
      var $85=HEAP32[(($84)>>2)];
      var $bf_clear87=$85 & 16777215;
      _qh_fprintf($81, 4023, ((5276144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear87,tempInt));
      label = 39; break;
    case 39: 
      $retval=0;
      label = 71; break;
    case 40: 
      var $86=$vertices_addr;
      var $e90=(($86+4)|0);
      var $arrayidx91=(($e90)|0);
      var $p92=$arrayidx91;
      var $87=$p92;
      var $88=$87;
      var $89=$vertices_addr;
      var $call93=_qh_setsize($89);
      _qsort($88, $call93, 4, 8);
      var $90=HEAP32[((((5247316)|0))>>2)];
      var $tobool94=(($90)|0)!=0;
      if ($tobool94) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $91=$vertices_addr;
      var $call96=_qh_setsize($91);
      $size=$call96;
      var $92=HEAP32[(((((5243828)|0)))>>2)];
      var $inc97=((($92)+(1))|0);
      HEAP32[(((((5243828)|0)))>>2)]=$inc97;
      var $93=$size;
      var $94=HEAP32[(((((5243860)|0)))>>2)];
      var $add98=((($94)+($93))|0);
      HEAP32[(((((5243860)|0)))>>2)]=$add98;
      var $95=HEAP32[(((((5243844)|0)))>>2)];
      var $96=$size;
      var $cmp99=(($95)|0) < (($96)|0);
      if ($cmp99) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $97=$size;
      HEAP32[(((((5243844)|0)))>>2)]=$97;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $98=$ridges_addr;
      var $call103=_qh_setsize($98);
      var $call104=_qh_newhashtable($call103);
      $hashsize=$call104;
      $ridge=0;
      var $99=$ridges_addr;
      var $tobool105=(($99)|0)!=0;
      if ($tobool105) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $100=$ridges_addr;
      var $e107=(($100+4)|0);
      var $arrayidx108=(($e107)|0);
      var $p109=$arrayidx108;
      var $101=$p109;
      $ridgep=$101;
      label = 46; break;
    case 46: 
      var $102=$ridgep;
      var $incdec_ptr111=(($102+4)|0);
      $ridgep=$incdec_ptr111;
      var $103=HEAP32[(($102)>>2)];
      $ridge=$103;
      var $tobool112=(($103)|0)!=0;
      if ($tobool112) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $104=HEAP32[((((5249180)|0))>>2)];
      var $105=$hashsize;
      var $106=$ridge;
      var $107=$oldvertex_addr;
      _qh_hashridge($104, $105, $106, $107);
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      $vertex=0;
      var $108=$vertices_addr;
      var $tobool116=(($108)|0)!=0;
      if ($tobool116) { label = 50; break; } else { label = 63; break; }
    case 50: 
      var $109=$vertices_addr;
      var $e118=(($109+4)|0);
      var $arrayidx119=(($e118)|0);
      var $p120=$arrayidx119;
      var $110=$p120;
      $vertexp=$110;
      label = 51; break;
    case 51: 
      var $111=$vertexp;
      var $incdec_ptr122=(($111+4)|0);
      $vertexp=$incdec_ptr122;
      var $112=HEAP32[(($111)>>2)];
      $vertex=$112;
      var $tobool123=(($112)|0)!=0;
      if ($tobool123) { label = 52; break; } else { label = 62; break; }
    case 52: 
      var $113=$vertex;
      var $call125=_qh_vertexridges($113);
      HEAP32[(($newridges)>>2)]=$call125;
      $ridge=0;
      var $114=HEAP32[(($newridges)>>2)];
      var $tobool126=(($114)|0)!=0;
      if ($tobool126) { label = 53; break; } else { label = 59; break; }
    case 53: 
      var $115=HEAP32[(($newridges)>>2)];
      var $e128=(($115+4)|0);
      var $arrayidx129=(($e128)|0);
      var $p130=$arrayidx129;
      var $116=$p130;
      $ridgep=$116;
      label = 54; break;
    case 54: 
      var $117=$ridgep;
      var $incdec_ptr132=(($117+4)|0);
      $ridgep=$incdec_ptr132;
      var $118=HEAP32[(($117)>>2)];
      $ridge=$118;
      var $tobool133=(($118)|0)!=0;
      if ($tobool133) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $119=HEAP32[((((5249180)|0))>>2)];
      var $120=$hashsize;
      var $121=$ridge;
      var $122=$vertex;
      var $123=$oldvertex_addr;
      var $call135=_qh_hashridge_find($119, $120, $121, $122, $123, $hash);
      var $tobool136=(($call135)|0)!=0;
      if ($tobool136) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $124=HEAP32[(((((5243612)|0)))>>2)];
      var $inc138=((($124)+(1))|0);
      HEAP32[(((((5243612)|0)))>>2)]=$inc138;
      label = 58; break;
    case 57: 
      label = 54; break;
    case 58: 
      label = 59; break;
    case 59: 
      _qh_settempfree($newridges);
      var $125=$ridge;
      var $tobool142=(($125)|0)!=0;
      if ($tobool142) { label = 61; break; } else { label = 60; break; }
    case 60: 
      label = 62; break;
    case 61: 
      label = 51; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $126=$vertex;
      var $tobool147=(($126)|0)!=0;
      if ($tobool147) { label = 64; break; } else { label = 67; break; }
    case 64: 
      var $127=HEAP32[((((5247040)|0))>>2)];
      var $cmp149=(($127)|0) >= 2;
      if ($cmp149) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $128=HEAP32[((((5248924)|0))>>2)];
      var $129=$vertex;
      var $130=$129;
      var $bf_field_offs151=(($130+20)|0);
      var $131=$bf_field_offs151;
      var $132=HEAP32[(($131)>>2)];
      var $bf_clear152=$132 & 16777215;
      var $133=$oldvertex_addr;
      var $134=$133;
      var $bf_field_offs153=(($134+20)|0);
      var $135=$bf_field_offs153;
      var $136=HEAP32[(($135)>>2)];
      var $bf_clear154=$136 & 16777215;
      var $137=$vertices_addr;
      var $call155=_qh_setsize($137);
      var $138=$ridges_addr;
      var $call156=_qh_setsize($138);
      _qh_fprintf($128, 2020, ((5275548)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear152,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear154,HEAP32[(((tempInt)+(8))>>2)]=$call155,HEAP32[(((tempInt)+(12))>>2)]=$call156,tempInt));
      label = 66; break;
    case 66: 
      label = 70; break;
    case 67: 
      var $139=HEAP32[(((((5243692)|0)))>>2)];
      var $inc158=((($139)+(1))|0);
      HEAP32[(((((5243692)|0)))>>2)]=$inc158;
      var $140=HEAP32[((((5247040)|0))>>2)];
      var $tobool159=(($140)|0)!=0;
      if ($tobool159) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $141=HEAP32[((((5248924)|0))>>2)];
      var $142=$oldvertex_addr;
      var $143=$142;
      var $bf_field_offs161=(($143+20)|0);
      var $144=$bf_field_offs161;
      var $145=HEAP32[(($144)>>2)];
      var $bf_clear162=$145 & 16777215;
      var $146=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($141, 14, ((5274720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear162,HEAP32[(((tempInt)+(4))>>2)]=$146,tempInt));
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      _qh_setfree(((5249180)|0));
      var $147=$vertex;
      $retval=$147;
      label = 71; break;
    case 71: 
      var $148=$retval;
      STACKTOP = __stackBase__;
      return $148;
    default: assert(0, "bad label: " + label);
  }

}
_qh_find_newvertex["X"]=1;

function _qh_hashridge($hashtable, $hashsize, $ridge, $oldvertex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hashtable_addr;
      var $hashsize_addr;
      var $ridge_addr;
      var $oldvertex_addr;
      var $hash;
      var $ridgeA;
      $hashtable_addr=$hashtable;
      $hashsize_addr=$hashsize;
      $ridge_addr=$ridge;
      $oldvertex_addr=$oldvertex;
      var $0=$hashsize_addr;
      var $1=$ridge_addr;
      var $vertices=(($1)|0);
      var $2=HEAP32[(($vertices)>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($3)-(1))|0);
      var $4=$oldvertex_addr;
      var $5=$4;
      var $call=_qh_gethash($0, $2, $sub, 0, $5);
      $hash=$call;
      label = 3; break;
    case 3: 
      var $6=$hash;
      var $7=$hashtable_addr;
      var $e=(($7+4)|0);
      var $arrayidx=(($e+($6<<2))|0);
      var $p=$arrayidx;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      $ridgeA=$9;
      var $tobool=(($9)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$ridge_addr;
      var $11=$10;
      var $12=$hash;
      var $13=$hashtable_addr;
      var $e1=(($13+4)|0);
      var $arrayidx2=(($e1+($12<<2))|0);
      var $p3=$arrayidx2;
      HEAP32[(($p3)>>2)]=$11;
      label = 11; break;
    case 5: 
      var $14=$ridgeA;
      var $15=$ridge_addr;
      var $cmp=(($14)|0)==(($15)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 11; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $16=$hash;
      var $inc=((($16)+(1))|0);
      $hash=$inc;
      var $17=$hashsize_addr;
      var $cmp6=(($inc)|0)==(($17)|0);
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $hash=0;
      label = 10; break;
    case 10: 
      label = 3; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_hashridge["X"]=1;

function _qh_vertexridges($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $neighbor;
      var $neighborp;
      var $ridges=__stackBase__;
      var $size;
      $vertex_addr=$vertex;
      var $0=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($0);
      HEAP32[(($ridges)>>2)]=$call;
      var $1=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $neighbor=0;
      var $2=$vertex_addr;
      var $neighbors=(($2+12)|0);
      var $3=HEAP32[(($neighbors)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$vertex_addr;
      var $neighbors1=(($4+12)|0);
      var $5=HEAP32[(($neighbors1)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $neighborp=$6;
      label = 4; break;
    case 4: 
      var $7=$neighborp;
      var $incdec_ptr=(($7+4)|0);
      $neighborp=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      $neighbor=$8;
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=HEAP32[((((5249156)|0))>>2)];
      var $10=$neighbor;
      var $visitid=(($10+68)|0);
      HEAP32[(($visitid)>>2)]=$9;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      $neighbor=0;
      var $11=$vertex_addr;
      var $neighbors3=(($11+12)|0);
      var $12=HEAP32[(($neighbors3)>>2)];
      var $tobool4=(($12)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $13=$vertex_addr;
      var $neighbors6=(($13+12)|0);
      var $14=HEAP32[(($neighbors6)>>2)];
      var $e7=(($14+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $15=$p9;
      $neighborp=$15;
      label = 9; break;
    case 9: 
      var $16=$neighborp;
      var $incdec_ptr11=(($16+4)|0);
      $neighborp=$incdec_ptr11;
      var $17=HEAP32[(($16)>>2)];
      $neighbor=$17;
      var $tobool12=(($17)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $18=$neighborp;
      var $19=HEAP32[(($18)>>2)];
      var $tobool14=(($19)|0)!=0;
      if ($tobool14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=$vertex_addr;
      var $21=$neighbor;
      _qh_vertexridges_facet($20, $21, $ridges);
      label = 12; break;
    case 12: 
      label = 9; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $22=HEAP32[((((5247316)|0))>>2)];
      var $tobool19=(($22)|0)!=0;
      if ($tobool19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $23=HEAP32[((((5247040)|0))>>2)];
      var $tobool20=(($23)|0)!=0;
      if ($tobool20) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $24=HEAP32[(($ridges)>>2)];
      var $call22=_qh_setsize($24);
      $size=$call22;
      var $25=HEAP32[(((((5244692)|0)))>>2)];
      var $inc23=((($25)+(1))|0);
      HEAP32[(((((5244692)|0)))>>2)]=$inc23;
      var $26=$size;
      var $27=HEAP32[(((((5244700)|0)))>>2)];
      var $add=((($27)+($26))|0);
      HEAP32[(((((5244700)|0)))>>2)]=$add;
      var $28=HEAP32[(((((5244708)|0)))>>2)];
      var $29=$size;
      var $cmp=(($28)|0) < (($29)|0);
      if ($cmp) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $30=$size;
      HEAP32[(((((5244708)|0)))>>2)]=$30;
      label = 18; break;
    case 18: 
      var $31=HEAP32[((((5247040)|0))>>2)];
      var $cmp26=(($31)|0) >= 3;
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $32=HEAP32[((((5248924)|0))>>2)];
      var $33=$size;
      var $34=$vertex_addr;
      var $35=$34;
      var $bf_field_offs=(($35+20)|0);
      var $36=$bf_field_offs;
      var $37=HEAP32[(($36)>>2)];
      var $bf_clear=$37 & 16777215;
      _qh_fprintf($32, 3011, ((5298296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,tempInt));
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $38=HEAP32[(($ridges)>>2)];
      STACKTOP = __stackBase__;
      return $38;
    default: assert(0, "bad label: " + label);
  }

}
_qh_vertexridges["X"]=1;

function _qh_hashridge_find($hashtable, $hashsize, $ridge, $vertex, $oldvertex, $hashslot) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $hashtable_addr;
      var $hashsize_addr;
      var $ridge_addr;
      var $vertex_addr;
      var $oldvertex_addr;
      var $hashslot_addr;
      var $hash;
      var $ridgeA;
      $hashtable_addr=$hashtable;
      $hashsize_addr=$hashsize;
      $ridge_addr=$ridge;
      $vertex_addr=$vertex;
      $oldvertex_addr=$oldvertex;
      $hashslot_addr=$hashslot;
      var $0=$hashslot_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=HEAP32[(((((5243796)|0)))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[(((((5243796)|0)))>>2)]=$inc;
      var $2=$hashsize_addr;
      var $3=$ridge_addr;
      var $vertices=(($3)|0);
      var $4=HEAP32[(($vertices)>>2)];
      var $5=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($5)-(1))|0);
      var $6=$vertex_addr;
      var $7=$6;
      var $call=_qh_gethash($2, $4, $sub, 0, $7);
      $hash=$call;
      label = 3; break;
    case 3: 
      var $8=$hash;
      var $9=$hashtable_addr;
      var $e=(($9+4)|0);
      var $arrayidx=(($e+($8<<2))|0);
      var $p=$arrayidx;
      var $10=HEAP32[(($p)>>2)];
      var $11=$10;
      $ridgeA=$11;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $12=$ridgeA;
      var $13=$ridge_addr;
      var $cmp=(($12)|0)==(($13)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$hashslot_addr;
      HEAP32[(($14)>>2)]=-1;
      label = 9; break;
    case 6: 
      var $15=HEAP32[(((((5243804)|0)))>>2)];
      var $inc1=((($15)+(1))|0);
      HEAP32[(((((5243804)|0)))>>2)]=$inc1;
      var $16=$ridge_addr;
      var $vertices2=(($16)|0);
      var $17=HEAP32[(($vertices2)>>2)];
      var $18=$vertex_addr;
      var $19=$18;
      var $20=$ridgeA;
      var $vertices3=(($20)|0);
      var $21=HEAP32[(($vertices3)>>2)];
      var $22=$oldvertex_addr;
      var $23=$22;
      var $call4=_qh_setequal_except($17, $19, $21, $23);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$ridgeA;
      $retval=$24;
      label = 15; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $25=$hash;
      var $inc8=((($25)+(1))|0);
      $hash=$inc8;
      var $26=$hashsize_addr;
      var $cmp9=(($inc8)|0)==(($26)|0);
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $hash=0;
      label = 11; break;
    case 11: 
      label = 3; break;
    case 12: 
      var $27=$hashslot_addr;
      var $28=HEAP32[(($27)>>2)];
      var $tobool12=(($28)|0)!=0;
      if ($tobool12) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $29=$hash;
      var $30=$hashslot_addr;
      HEAP32[(($30)>>2)]=$29;
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $31=$retval;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_qh_hashridge_find["X"]=1;

function _qh_findbest_test($testcentrum, $facet, $neighbor, $bestfacet, $distp, $mindistp, $maxdistp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $testcentrum_addr;
      var $facet_addr;
      var $neighbor_addr;
      var $bestfacet_addr;
      var $distp_addr;
      var $mindistp_addr;
      var $maxdistp_addr;
      var $dist=__stackBase__;
      var $mindist=(__stackBase__)+(8);
      var $maxdist=(__stackBase__)+(16);
      $testcentrum_addr=$testcentrum;
      $facet_addr=$facet;
      $neighbor_addr=$neighbor;
      $bestfacet_addr=$bestfacet;
      $distp_addr=$distp;
      $mindistp_addr=$mindistp;
      $maxdistp_addr=$maxdistp;
      var $0=$testcentrum_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=HEAP32[(((((5243132)|0)))>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[(((((5243132)|0)))>>2)]=$inc;
      var $2=$facet_addr;
      var $center=(($2+36)|0);
      var $3=HEAP32[(($center)>>2)];
      var $4=$neighbor_addr;
      _qh_distplane($3, $4, $dist);
      var $5=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($5)|0);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($6)*($conv);
      (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$7 < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($maxdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[(($mindist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($mindist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$9);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 6; break;
    case 5: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($mindist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($mindist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$10,HEAP32[(($maxdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $11=$facet_addr;
      var $12=$neighbor_addr;
      var $call=_qh_getdistance($11, $12, $mindist, $maxdist);
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[(($dist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=$distp_addr;
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($14)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($14)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$13 < $15;
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$neighbor_addr;
      var $17=$bestfacet_addr;
      HEAP32[(($17)>>2)]=$16;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mindist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mindist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$mindistp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[(($19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $21=$maxdistp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$20,HEAP32[(($21)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($21)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=$distp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$22,HEAP32[(($23)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($23)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbest_test["X"]=1;

function _qh_findbestneighbor($facet, $distp, $mindistp, $maxdistp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $distp_addr;
      var $mindistp_addr;
      var $maxdistp_addr;
      var $neighbor;
      var $neighborp;
      var $bestfacet=__stackBase__;
      var $ridge;
      var $ridgep;
      var $nonconvex;
      var $testcentrum;
      var $size;
      $facet_addr=$facet;
      $distp_addr=$distp;
      $mindistp_addr=$mindistp;
      $maxdistp_addr=$maxdistp;
      HEAP32[(($bestfacet)>>2)]=0;
      $nonconvex=1;
      $testcentrum=0;
      var $0=$facet_addr;
      var $vertices=(($0+48)|0);
      var $1=HEAP32[(($vertices)>>2)];
      var $call=_qh_setsize($1);
      $size=$call;
      var $2=$distp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[(($2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $3=$size;
      var $4=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($4<<1))&-1);
      var $add=((($mul)+(20))|0);
      var $cmp=(($3)|0) > (($add)|0);
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      $testcentrum=1;
      var $5=HEAP32[(((((5243124)|0)))>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(((((5243124)|0)))>>2)]=$inc;
      var $6=$facet_addr;
      var $center=(($6+36)|0);
      var $7=HEAP32[(($center)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $8=$facet_addr;
      var $call2=_qh_getcentrum($8);
      var $9=$facet_addr;
      var $center3=(($9+36)|0);
      HEAP32[(($center3)>>2)]=$call2;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $10=$size;
      var $11=HEAP32[((((5247508)|0))>>2)];
      var $add5=((($11)+(15))|0);
      var $cmp6=(($10)|0) > (($add5)|0);
      if ($cmp6) { label = 7; break; } else { label = 18; break; }
    case 7: 
      $ridge=0;
      var $12=$facet_addr;
      var $ridges=(($12+52)|0);
      var $13=HEAP32[(($ridges)>>2)];
      var $tobool8=(($13)|0)!=0;
      if ($tobool8) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $14=$facet_addr;
      var $ridges10=(($14+52)|0);
      var $15=HEAP32[(($ridges10)>>2)];
      var $e=(($15+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $16=$p;
      $ridgep=$16;
      label = 9; break;
    case 9: 
      var $17=$ridgep;
      var $incdec_ptr=(($17+4)|0);
      $ridgep=$incdec_ptr;
      var $18=HEAP32[(($17)>>2)];
      $ridge=$18;
      var $tobool11=(($18)|0)!=0;
      if ($tobool11) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $19=$ridge;
      var $20=$19;
      var $bf_field_offs=(($20+12)|0);
      var $21=$bf_field_offs;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 >>> 26;
      var $bf_clear=$23 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $24=$ridge;
      var $top=(($24+4)|0);
      var $25=HEAP32[(($top)>>2)];
      var $26=$facet_addr;
      var $cmp14=(($25)|0)==(($26)|0);
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$ridge;
      var $bottom=(($27+8)|0);
      var $28=HEAP32[(($bottom)>>2)];
      var $cond = $28;label = 14; break;
    case 13: 
      var $29=$ridge;
      var $top15=(($29+4)|0);
      var $30=HEAP32[(($top15)>>2)];
      var $cond = $30;label = 14; break;
    case 14: 
      var $cond;
      $neighbor=$cond;
      var $31=$testcentrum;
      var $32=$facet_addr;
      var $33=$neighbor;
      var $34=$distp_addr;
      var $35=$mindistp_addr;
      var $36=$maxdistp_addr;
      _qh_findbest_test($31, $32, $33, $bestfacet, $34, $35, $36);
      label = 15; break;
    case 15: 
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $37=HEAP32[(($bestfacet)>>2)];
      var $tobool19=(($37)|0)!=0;
      if ($tobool19) { label = 25; break; } else { label = 19; break; }
    case 19: 
      $nonconvex=0;
      $neighbor=0;
      var $38=$facet_addr;
      var $neighbors=(($38+56)|0);
      var $39=HEAP32[(($neighbors)>>2)];
      var $tobool21=(($39)|0)!=0;
      if ($tobool21) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $40=$facet_addr;
      var $neighbors23=(($40+56)|0);
      var $41=HEAP32[(($neighbors23)>>2)];
      var $e24=(($41+4)|0);
      var $arrayidx25=(($e24)|0);
      var $p26=$arrayidx25;
      var $42=$p26;
      $neighborp=$42;
      label = 21; break;
    case 21: 
      var $43=$neighborp;
      var $incdec_ptr28=(($43+4)|0);
      $neighborp=$incdec_ptr28;
      var $44=HEAP32[(($43)>>2)];
      $neighbor=$44;
      var $tobool29=(($44)|0)!=0;
      if ($tobool29) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $45=$testcentrum;
      var $46=$facet_addr;
      var $47=$neighbor;
      var $48=$distp_addr;
      var $49=$mindistp_addr;
      var $50=$maxdistp_addr;
      _qh_findbest_test($45, $46, $47, $bestfacet, $48, $49, $50);
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $51=HEAP32[(($bestfacet)>>2)];
      var $tobool34=(($51)|0)!=0;
      if ($tobool34) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $52=HEAP32[((((5248924)|0))>>2)];
      var $53=$facet_addr;
      var $id=(($53+72)|0);
      var $54=HEAP32[(($id)>>2)];
      _qh_fprintf($52, 6095, ((5274144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,tempInt));
      var $55=$facet_addr;
      _qh_errexit(5, $55, 0);
      label = 27; break;
    case 27: 
      var $56=$testcentrum;
      var $tobool37=(($56)|0)!=0;
      if ($tobool37) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $57=$facet_addr;
      var $58=HEAP32[(($bestfacet)>>2)];
      var $59=$mindistp_addr;
      var $60=$maxdistp_addr;
      var $call39=_qh_getdistance($57, $58, $59, $60);
      label = 29; break;
    case 29: 
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp41=(($61)|0) >= 3;
      if ($cmp41) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=HEAP32[(($bestfacet)>>2)];
      var $id43=(($63+72)|0);
      var $64=HEAP32[(($id43)>>2)];
      var $65=$facet_addr;
      var $id44=(($65+72)|0);
      var $66=HEAP32[(($id44)>>2)];
      var $67=$testcentrum;
      var $68=$nonconvex;
      var $69=$distp_addr;
      var $70=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($69)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($69)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $71=$mindistp_addr;
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($71)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($71)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $73=$maxdistp_addr;
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($73)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($73)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($62, 3002, ((5273588)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 40)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,HEAP32[(((tempInt)+(4))>>2)]=$66,HEAP32[(((tempInt)+(8))>>2)]=$67,HEAP32[(((tempInt)+(12))>>2)]=$68,(HEAPF64[(tempDoublePtr)>>3]=$70,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$72,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$74,HEAP32[(((tempInt)+(32))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(32))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 31; break;
    case 31: 
      var $75=HEAP32[(($bestfacet)>>2)];
      STACKTOP = __stackBase__;
      return $75;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbestneighbor["X"]=1;

function _qh_mergefacet($facet1, $facet2, $mindist, $maxdist, $mergeapex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $mindist_addr;
      var $maxdist_addr;
      var $mergeapex_addr;
      var $traceonce;
      var $vertex;
      var $vertexp;
      var $tracerestore;
      var $nummerge;
      var $mergemin;
      var $mergemax;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      $mindist_addr=$mindist;
      $maxdist_addr=$maxdist;
      $mergeapex_addr=$mergeapex;
      $traceonce=0;
      $tracerestore=0;
      var $0=$facet1_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 9;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=$facet2_addr;
      var $6=$5;
      var $bf_field_offs1=(($6+76)|0);
      var $7=$bf_field_offs1;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 9;
      var $bf_clear2=$9 & 1;
      var $tobool3=(($bf_clear2)|0)!=0;
      if ($tobool3) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $10=HEAP32[((((5247456)|0))>>2)];
      var $tobool4=(($10)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($11, 6226, ((5255248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=$facet1_addr;
      var $13=$facet2_addr;
      _qh_errexit2(5, $12, $13);
      label = 6; break;
    case 6: 
      var $14=$facet2_addr;
      var $15=$14;
      var $bf_field_offs6=(($15+76)|0);
      var $16=$bf_field_offs6;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 9;
      var $bf_clear7=$18 & 1;
      var $tobool8=(($bf_clear7)|0)!=0;
      if ($tobool8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$facet2_addr;
      var $20=$19;
      var $bf_field_offs10=(($20+76)|0);
      var $21=$bf_field_offs10;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & -513;
      HEAP32[(($21)>>2)]=$23;
      var $24=$facet2_addr;
      var $25=$24;
      var $bf_field_offs11=(($25+76)|0);
      var $26=$bf_field_offs11;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & -268435457;
      HEAP32[(($26)>>2)]=$28;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $29=HEAP32[(((((5244580)|0)))>>2)];
      var $inc=((($29)+(1))|0);
      HEAP32[(((((5244580)|0)))>>2)]=$inc;
      var $30=HEAP32[((((5247376)|0))>>2)];
      var $tobool14=(($30)|0)!=0;
      if ($tobool14) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $31=HEAP32[((((5249124)|0))>>2)];
      var $tobool15=(($31)|0)!=0;
      if ($tobool15) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $32=HEAP32[(((((5244580)|0)))>>2)];
      var $33=HEAP32[((((5249260)|0))>>2)];
      var $34=HEAP32[((((5247376)|0))>>2)];
      var $add=((($33)+($34))|0);
      var $cmp=(($32)|0) > (($add)|0);
      if ($cmp) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _qh_tracemerging();
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $35=HEAP32[((((5249032)|0))>>2)];
      var $36=HEAP32[((((5247380)|0))>>2)];
      var $cmp20=(($35)|0) >= (($36)|0);
      if ($cmp20) { label = 15; break; } else { label = 27; break; }
    case 15: 
      var $37=$mindist_addr;
      var $tobool22=(($37)|0)!=0;
      if ($tobool22) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $38=$mindist_addr;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$39);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp24=$sub > $40;
      if ($cmp24) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $41=$maxdist_addr;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp26=$42 > $43;
      if ($cmp26) { label = 18; break; } else { label = 22; break; }
    case 18: 
      $tracerestore=0;
      var $44=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$44;
      $traceonce=1;
      var $45=HEAP32[((((5248924)|0))>>2)];
      var $46=HEAP32[(((((5244580)|0)))>>2)];
      var $47=$mindist_addr;
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub28=(-$48);
      var $49=$maxdist_addr;
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp29=$sub28 < $50;
      if ($cmp29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $51=$maxdist_addr;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $52;label = 21; break;
    case 20: 
      var $53=$mindist_addr;
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub30=(-$54);
      var $cond = $sub30;label = 21; break;
    case 21: 
      var $cond;
      var $55=$facet1_addr;
      var $id=(($55+72)|0);
      var $56=HEAP32[(($id)>>2)];
      var $57=$facet2_addr;
      var $id31=(($57+72)|0);
      var $58=HEAP32[(($id31)>>2)];
      var $59=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($45, 8075, ((5255016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$46,(HEAPF64[(tempDoublePtr)>>3]=$cond,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$56,HEAP32[(((tempInt)+(16))>>2)]=$58,HEAP32[(((tempInt)+(20))>>2)]=$59,tempInt));
      label = 26; break;
    case 22: 
      var $60=$facet1_addr;
      var $61=HEAP32[((((5248972)|0))>>2)];
      var $cmp32=(($60)|0)==(($61)|0);
      if ($cmp32) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $62=$facet2_addr;
      var $63=HEAP32[((((5248972)|0))>>2)];
      var $cmp34=(($62)|0)==(($63)|0);
      if ($cmp34) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $64=HEAP32[((((5247040)|0))>>2)];
      $tracerestore=$64;
      HEAP32[((((5247040)|0))>>2)]=4;
      $traceonce=1;
      var $65=HEAP32[((((5248924)|0))>>2)];
      var $66=HEAP32[(((((5244580)|0)))>>2)];
      var $67=HEAP32[((((5248968)|0))>>2)];
      var $68=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($65, 8076, ((5254616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$66,HEAP32[(((tempInt)+(4))>>2)]=$67,HEAP32[(((tempInt)+(8))>>2)]=$68,tempInt));
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $69=HEAP32[((((5247040)|0))>>2)];
      var $cmp39=(($69)|0) >= 2;
      if ($cmp39) { label = 28; break; } else { label = 31; break; }
    case 28: 
      $mergemin=-2;
      $mergemax=-2;
      var $70=$mindist_addr;
      var $tobool41=(($70)|0)!=0;
      if ($tobool41) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $71=$mindist_addr;
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($71)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($71)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mergemin=$72;
      var $73=$maxdist_addr;
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($73)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($73)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $mergemax=$74;
      label = 30; break;
    case 30: 
      var $75=HEAP32[((((5248924)|0))>>2)];
      var $76=HEAP32[(((((5244580)|0)))>>2)];
      var $77=$facet1_addr;
      var $id44=(($77+72)|0);
      var $78=HEAP32[(($id44)>>2)];
      var $79=$facet2_addr;
      var $id45=(($79+72)|0);
      var $80=HEAP32[(($id45)>>2)];
      var $81=$mergemin;
      var $82=$mergemax;
      _qh_fprintf($75, 8077, ((5254400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$76,HEAP32[(((tempInt)+(4))>>2)]=$78,HEAP32[(((tempInt)+(8))>>2)]=$80,(HEAPF64[(tempDoublePtr)>>3]=$81,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$82,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 31; break;
    case 31: 
      var $83=$facet1_addr;
      var $84=$facet2_addr;
      var $cmp47=(($83)|0)==(($84)|0);
      if ($cmp47) { label = 34; break; } else { label = 32; break; }
    case 32: 
      var $85=$facet1_addr;
      var $86=$85;
      var $bf_field_offs49=(($86+76)|0);
      var $87=$bf_field_offs49;
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 >>> 11;
      var $bf_clear50=$89 & 1;
      var $tobool51=(($bf_clear50)|0)!=0;
      if ($tobool51) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $90=$facet2_addr;
      var $91=$90;
      var $bf_field_offs53=(($91+76)|0);
      var $92=$bf_field_offs53;
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 >>> 11;
      var $bf_clear54=$94 & 1;
      var $tobool55=(($bf_clear54)|0)!=0;
      if ($tobool55) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $95=HEAP32[((((5248924)|0))>>2)];
      var $96=$facet1_addr;
      var $id57=(($96+72)|0);
      var $97=HEAP32[(($id57)>>2)];
      var $98=$facet2_addr;
      var $id58=(($98+72)|0);
      var $99=HEAP32[(($id58)>>2)];
      _qh_fprintf($95, 6099, ((5253976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$97,HEAP32[(((tempInt)+(4))>>2)]=$99,tempInt));
      var $100=$facet1_addr;
      var $101=$facet2_addr;
      _qh_errexit2(5, $100, $101);
      label = 35; break;
    case 35: 
      var $102=HEAP32[((((5248996)|0))>>2)];
      var $103=HEAP32[((((5248964)|0))>>2)];
      var $sub60=((($102)-($103))|0);
      var $104=HEAP32[((((5247508)|0))>>2)];
      var $add61=((($104)+(1))|0);
      var $cmp62=(($sub60)|0) <= (($add61)|0);
      if ($cmp62) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $105=HEAP32[((((5248924)|0))>>2)];
      var $106=HEAP32[((((5247508)|0))>>2)];
      var $add64=((($106)+(1))|0);
      _qh_fprintf($105, 6227, ((5253700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add64,tempInt));
      var $107=HEAP32[((((5247508)|0))>>2)];
      var $cmp65=(($107)|0) >= 5;
      if ($cmp65) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $108=HEAP32[((((5247076)|0))>>2)];
      var $tobool67=(($108)|0)!=0;
      if ($tobool67) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $109=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($109, 8079, ((5253516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 39; break;
    case 39: 
      _qh_errexit(3, 0, 0);
      label = 40; break;
    case 40: 
      var $110=HEAP32[((((5248580)|0))>>2)];
      var $tobool71=(($110)|0)!=0;
      if ($tobool71) { label = 42; break; } else { label = 41; break; }
    case 41: 
      _qh_vertexneighbors();
      label = 42; break;
    case 42: 
      var $111=$facet1_addr;
      _qh_makeridges($111);
      var $112=$facet2_addr;
      _qh_makeridges($112);
      var $113=HEAP32[((((5247040)|0))>>2)];
      var $cmp74=(($113)|0) >= 4;
      if ($cmp74) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $114=$facet1_addr;
      var $115=$facet2_addr;
      _qh_errprint(((5253304)|0), $114, $115, 0, 0);
      label = 44; break;
    case 44: 
      var $116=$mindist_addr;
      var $tobool77=(($116)|0)!=0;
      if ($tobool77) { label = 45; break; } else { label = 58; break; }
    case 45: 
      var $117=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $118=$maxdist_addr;
      var $119=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($118)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($118)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp79=$117 < $119;
      if ($cmp79) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $120=$maxdist_addr;
      var $121=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($120)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($120)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$121,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 47; break;
    case 47: 
      var $122=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249076)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249076)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $123=$maxdist_addr;
      var $124=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($123)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($123)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp82=$122 < $124;
      if ($cmp82) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $125=$maxdist_addr;
      var $126=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($125)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($125)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$126,HEAP32[((((5249076)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249076)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 49; break;
    case 49: 
      var $127=$facet2_addr;
      var $maxoutside=(($127+8)|0);
      var $128=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $129=$maxdist_addr;
      var $130=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($129)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($129)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp85=$128 < $130;
      if ($cmp85) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $131=$maxdist_addr;
      var $132=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($131)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($131)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $133=$facet2_addr;
      var $maxoutside87=(($133+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$132,HEAP32[(($maxoutside87)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside87)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 51; break;
    case 51: 
      var $134=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $135=$mindist_addr;
      var $136=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($135)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($135)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp89=$134 > $136;
      if ($cmp89) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $137=$mindist_addr;
      var $138=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($137)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($137)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$138,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 53; break;
    case 53: 
      var $139=$facet2_addr;
      var $140=$139;
      var $bf_field_offs92=(($140+76)|0);
      var $141=$bf_field_offs92;
      var $142=HEAP32[(($141)>>2)];
      var $143=$142 >>> 28;
      var $bf_clear93=$143 & 1;
      var $tobool94=(($bf_clear93)|0)!=0;
      if ($tobool94) { label = 57; break; } else { label = 54; break; }
    case 54: 
      var $144=$maxdist_addr;
      var $145=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($144)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($144)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $146=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp96=$145 > $146;
      if ($cmp96) { label = 56; break; } else { label = 55; break; }
    case 55: 
      var $147=$mindist_addr;
      var $148=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($147)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($147)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $149=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub98=(-$149);
      var $cmp99=$148 < $sub98;
      if ($cmp99) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $150=$facet2_addr;
      var $151=$150;
      var $bf_field_offs101=(($151+76)|0);
      var $152=$bf_field_offs101;
      var $153=HEAP32[(($152)>>2)];
      var $154=$153 & -268435457;
      var $155=$154 | 268435456;
      HEAP32[(($152)>>2)]=$155;
      var $156=HEAP32[(((((5244788)|0)))>>2)];
      var $inc102=((($156)+(1))|0);
      HEAP32[(((((5244788)|0)))>>2)]=$inc102;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $157=$facet1_addr;
      var $158=$157;
      var $bf_field_offs105=(($158+76)|0);
      var $159=$bf_field_offs105;
      var $160=HEAP32[(($159)>>2)];
      var $bf_clear106=$160 & 511;
      var $161=$facet2_addr;
      var $162=$161;
      var $bf_field_offs107=(($162+76)|0);
      var $163=$bf_field_offs107;
      var $164=HEAP32[(($163)>>2)];
      var $bf_clear108=$164 & 511;
      var $add109=((($bf_clear106)+($bf_clear108))|0);
      var $add110=((($add109)+(1))|0);
      $nummerge=$add110;
      var $165=$nummerge;
      var $cmp111=(($165)|0) >= 511;
      if ($cmp111) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $166=$facet2_addr;
      var $167=$166;
      var $bf_field_offs113=(($167+76)|0);
      var $168=$bf_field_offs113;
      var $169=HEAP32[(($168)>>2)];
      var $170=$169 & -512;
      var $171=$170 | 511;
      HEAP32[(($168)>>2)]=$171;
      label = 61; break;
    case 60: 
      var $172=$nummerge;
      var $conv=(($172) & 65535);
      var $conv115=(($conv)&65535);
      var $173=$facet2_addr;
      var $bf_value=$conv115 & 511;
      var $174=$173;
      var $bf_field_offs116=(($174+76)|0);
      var $175=$bf_field_offs116;
      var $176=$bf_value & 511;
      var $177=HEAP32[(($175)>>2)];
      var $178=$177 & -512;
      var $179=$178 | $176;
      HEAP32[(($175)>>2)]=$179;
      label = 61; break;
    case 61: 
      var $180=$facet2_addr;
      var $181=$180;
      var $bf_field_offs118=(($181+76)|0);
      var $182=$bf_field_offs118;
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & -536870913;
      var $185=$184 | 536870912;
      HEAP32[(($182)>>2)]=$185;
      var $186=$facet2_addr;
      var $187=$186;
      var $bf_field_offs119=(($187+76)|0);
      var $188=$bf_field_offs119;
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & -2097153;
      HEAP32[(($188)>>2)]=$190;
      var $191=$facet1_addr;
      var $192=$facet2_addr;
      _qh_updatetested($191, $192);
      var $193=HEAP32[((((5247508)|0))>>2)];
      var $cmp120=(($193)|0) > 2;
      if ($cmp120) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $194=$facet1_addr;
      var $vertices=(($194+48)|0);
      var $195=HEAP32[(($vertices)>>2)];
      var $call=_qh_setsize($195);
      var $196=HEAP32[((((5247508)|0))>>2)];
      var $cmp123=(($call)|0)==(($196)|0);
      if ($cmp123) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $197=$facet1_addr;
      var $198=$facet2_addr;
      var $199=$mergeapex_addr;
      _qh_mergesimplex($197, $198, $199);
      label = 75; break;
    case 64: 
      var $200=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear127=$200 & 2147483647;
      var $inc128=((($bf_clear127)+(1))|0);
      var $bf_value129=$inc128 & 2147483647;
      var $201=$bf_value129 & 2147483647;
      var $202=HEAP32[(((((5249160)|0)))>>2)];
      var $203=$202 & -2147483648;
      var $204=$203 | $201;
      HEAP32[(((((5249160)|0)))>>2)]=$204;
      $vertex=0;
      var $205=$facet2_addr;
      var $vertices130=(($205+48)|0);
      var $206=HEAP32[(($vertices130)>>2)];
      var $tobool131=(($206)|0)!=0;
      if ($tobool131) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $207=$facet2_addr;
      var $vertices133=(($207+48)|0);
      var $208=HEAP32[(($vertices133)>>2)];
      var $e=(($208+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $209=$p;
      $vertexp=$209;
      label = 66; break;
    case 66: 
      var $210=$vertexp;
      var $incdec_ptr=(($210+4)|0);
      $vertexp=$incdec_ptr;
      var $211=HEAP32[(($210)>>2)];
      $vertex=$211;
      var $tobool134=(($211)|0)!=0;
      if ($tobool134) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $212=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear135=$212 & 2147483647;
      var $213=$vertex;
      var $bf_value136=$bf_clear135 & 2147483647;
      var $214=$213;
      var $bf_field_offs137=(($214+16)|0);
      var $215=$bf_field_offs137;
      var $216=$bf_value136 & 2147483647;
      var $217=HEAP32[(($215)>>2)];
      var $218=$217 & -2147483648;
      var $219=$218 | $216;
      HEAP32[(($215)>>2)]=$219;
      label = 66; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $220=HEAP32[((((5247508)|0))>>2)];
      var $cmp139=(($220)|0)==2;
      if ($cmp139) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $221=$facet1_addr;
      var $222=$facet2_addr;
      _qh_mergefacet2d($221, $222);
      label = 72; break;
    case 71: 
      var $223=$facet1_addr;
      var $224=$facet2_addr;
      _qh_mergeneighbors($223, $224);
      var $225=$facet1_addr;
      var $vertices143=(($225+48)|0);
      var $226=HEAP32[(($vertices143)>>2)];
      var $227=$facet2_addr;
      var $vertices144=(($227+48)|0);
      _qh_mergevertices($226, $vertices144);
      label = 72; break;
    case 72: 
      var $228=$facet1_addr;
      var $229=$facet2_addr;
      _qh_mergeridges($228, $229);
      var $230=$facet1_addr;
      var $231=$facet2_addr;
      _qh_mergevertex_neighbors($230, $231);
      var $232=$facet2_addr;
      var $233=$232;
      var $bf_field_offs146=(($233+76)|0);
      var $234=$bf_field_offs146;
      var $235=HEAP32[(($234)>>2)];
      var $236=$235 >>> 10;
      var $bf_clear147=$236 & 1;
      var $tobool148=(($bf_clear147)|0)!=0;
      if ($tobool148) { label = 74; break; } else { label = 73; break; }
    case 73: 
      var $237=$facet2_addr;
      var $vertices150=(($237+48)|0);
      var $238=HEAP32[(($vertices150)>>2)];
      _qh_newvertices($238);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $239=$mergeapex_addr;
      var $tobool153=(($239)|0)!=0;
      if ($tobool153) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $240=$facet2_addr;
      var $241=$facet1_addr;
      _qh_degen_redundant_neighbors($240, $241);
      label = 77; break;
    case 77: 
      var $242=$facet2_addr;
      var $243=$242;
      var $bf_field_offs156=(($243+76)|0);
      var $244=$bf_field_offs156;
      var $245=HEAP32[(($244)>>2)];
      var $246=$245 >>> 24;
      var $bf_clear157=$246 & 1;
      var $tobool158=(($bf_clear157)|0)!=0;
      if ($tobool158) { label = 79; break; } else { label = 78; break; }
    case 78: 
      var $247=$facet2_addr;
      var $248=$247;
      var $bf_field_offs160=(($248+76)|0);
      var $249=$bf_field_offs160;
      var $250=HEAP32[(($249)>>2)];
      var $251=$250 >>> 10;
      var $bf_clear161=$251 & 1;
      var $tobool162=(($bf_clear161)|0)!=0;
      if ($tobool162) { label = 80; break; } else { label = 79; break; }
    case 79: 
      var $252=HEAP32[(((((5243996)|0)))>>2)];
      var $inc164=((($252)+(1))|0);
      HEAP32[(((((5243996)|0)))>>2)]=$inc164;
      label = 85; break;
    case 80: 
      var $253=$facet1_addr;
      var $254=$253;
      var $bf_field_offs166=(($254+76)|0);
      var $255=$bf_field_offs166;
      var $256=HEAP32[(($255)>>2)];
      var $257=$256 >>> 10;
      var $bf_clear167=$257 & 1;
      var $tobool168=(($bf_clear167)|0)!=0;
      if ($tobool168) { label = 83; break; } else { label = 81; break; }
    case 81: 
      var $258=$facet2_addr;
      var $259=$258;
      var $bf_field_offs170=(($259+76)|0);
      var $260=$bf_field_offs170;
      var $261=HEAP32[(($260)>>2)];
      var $262=$261 >>> 10;
      var $bf_clear171=$262 & 1;
      var $tobool172=(($bf_clear171)|0)!=0;
      if ($tobool172) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $263=HEAP32[(((((5243964)|0)))>>2)];
      var $inc174=((($263)+(1))|0);
      HEAP32[(((((5243964)|0)))>>2)]=$inc174;
      label = 84; break;
    case 83: 
      var $264=HEAP32[(((((5244004)|0)))>>2)];
      var $inc176=((($264)+(1))|0);
      HEAP32[(((((5244004)|0)))>>2)]=$inc176;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $265=$facet1_addr;
      var $266=$facet2_addr;
      _qh_willdelete($265, $266);
      var $267=$facet2_addr;
      _qh_removefacet($267);
      var $268=$facet2_addr;
      _qh_appendfacet($268);
      var $269=$facet2_addr;
      var $270=$269;
      var $bf_field_offs179=(($270+76)|0);
      var $271=$bf_field_offs179;
      var $272=HEAP32[(($271)>>2)];
      var $273=$272 & -1025;
      var $274=$273 | 1024;
      HEAP32[(($271)>>2)]=$274;
      var $275=$facet2_addr;
      var $276=$275;
      var $bf_field_offs180=(($276+76)|0);
      var $277=$bf_field_offs180;
      var $278=HEAP32[(($277)>>2)];
      var $279=$278 & -134217729;
      HEAP32[(($277)>>2)]=$279;
      var $280=$facet1_addr;
      var $281=$facet2_addr;
      _qh_tracemerge($280, $281);
      var $282=$traceonce;
      var $tobool181=(($282)|0)!=0;
      if ($tobool181) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $283=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($283, 8080, ((5253072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $284=$tracerestore;
      HEAP32[((((5247040)|0))>>2)]=$284;
      label = 87; break;
    case 87: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergefacet["X"]=1;

function _qh_test_appendmerge($facet, $neighbor) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facet_addr;
      var $neighbor_addr;
      var $dist=__stackBase__;
      var $dist2=(__stackBase__)+(8);
      var $angle=(__stackBase__)+(16);
      var $isconcave;
      var $iscoplanar;
      var $okangle;
      $facet_addr=$facet;
      $neighbor_addr=$neighbor;
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[(($dist2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($dist2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[(($angle)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angle)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $isconcave=0;
      $iscoplanar=0;
      $okangle=0;
      var $0=HEAP32[((((5247404)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=HEAP32[((((5249124)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 47; break;
    case 5: 
      var $2=HEAP32[((((5247076)|0))>>2)];
      var $tobool2=(($2)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=HEAP32[((((5249124)|0))>>2)];
      var $tobool3=(($3)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248620)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248620)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$4 < 8.988465674311579e+307;
      if ($cmp) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $5=$facet_addr;
      var $normal=(($5+24)|0);
      var $6=HEAP32[(($normal)>>2)];
      var $7=$neighbor_addr;
      var $normal6=(($7+24)|0);
      var $8=HEAP32[(($normal6)>>2)];
      var $call=_qh_getangle($6, $8);
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[(($angle)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angle)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $9=HEAP32[(((((5243060)|0)))>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[(((((5243060)|0)))>>2)]=$inc;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248620)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248620)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp7=$10 > $11;
      if ($cmp7) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $12=HEAP32[(((((5243244)|0)))>>2)];
      var $inc9=((($12)+(1))|0);
      HEAP32[(((((5243244)|0)))>>2)]=$inc9;
      var $13=$facet_addr;
      var $14=$neighbor_addr;
      _qh_appendmergeset($13, $14, 2, $angle);
      var $15=HEAP32[((((5247040)|0))>>2)];
      var $cmp10=(($15)|0) >= 2;
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=HEAP32[((((5248924)|0))>>2)];
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=$facet_addr;
      var $id=(($18+72)|0);
      var $19=HEAP32[(($id)>>2)];
      var $20=$neighbor_addr;
      var $id12=(($20+72)|0);
      var $21=HEAP32[(($id12)>>2)];
      _qh_fprintf($16, 2039, ((5300792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=$19,HEAP32[(((tempInt)+(12))>>2)]=$21,tempInt));
      label = 11; break;
    case 11: 
      $retval=1;
      label = 47; break;
    case 12: 
      $okangle=1;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $22=$facet_addr;
      var $center=(($22+36)|0);
      var $23=HEAP32[(($center)>>2)];
      var $tobool16=(($23)|0)!=0;
      if ($tobool16) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $24=$facet_addr;
      var $call18=_qh_getcentrum($24);
      var $25=$facet_addr;
      var $center19=(($25+36)|0);
      HEAP32[(($center19)>>2)]=$call18;
      label = 16; break;
    case 16: 
      var $26=HEAP32[(((((5243156)|0)))>>2)];
      var $inc21=((($26)+(1))|0);
      HEAP32[(((((5243156)|0)))>>2)]=$inc21;
      var $27=$facet_addr;
      var $center22=(($27+36)|0);
      var $28=HEAP32[(($center22)>>2)];
      var $29=$neighbor_addr;
      _qh_distplane($28, $29, $dist);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248612)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248612)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp23=$30 > $31;
      if ($cmp23) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $isconcave=1;
      label = 29; break;
    case 18: 
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248612)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248612)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$33);
      var $cmp26=$32 > $sub;
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $iscoplanar=1;
      label = 20; break;
    case 20: 
      var $34=$neighbor_addr;
      var $center29=(($34+36)|0);
      var $35=HEAP32[(($center29)>>2)];
      var $tobool30=(($35)|0)!=0;
      if ($tobool30) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $36=$neighbor_addr;
      var $call32=_qh_getcentrum($36);
      var $37=$neighbor_addr;
      var $center33=(($37+36)|0);
      HEAP32[(($center33)>>2)]=$call32;
      label = 22; break;
    case 22: 
      var $38=HEAP32[(((((5243156)|0)))>>2)];
      var $inc35=((($38)+(1))|0);
      HEAP32[(((((5243156)|0)))>>2)]=$inc35;
      var $39=$neighbor_addr;
      var $center36=(($39+36)|0);
      var $40=HEAP32[(($center36)>>2)];
      var $41=$facet_addr;
      _qh_distplane($40, $41, $dist2);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248612)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248612)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp37=$42 > $43;
      if ($cmp37) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $isconcave=1;
      label = 28; break;
    case 24: 
      var $44=$iscoplanar;
      var $tobool40=(($44)|0)!=0;
      if ($tobool40) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $45=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248612)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248612)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub42=(-$46);
      var $cmp43=$45 > $sub42;
      if ($cmp43) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $iscoplanar=1;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $47=$isconcave;
      var $tobool48=(($47)|0)!=0;
      if ($tobool48) { label = 34; break; } else { label = 30; break; }
    case 30: 
      var $48=$iscoplanar;
      var $tobool50=(($48)|0)!=0;
      if ($tobool50) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $49=HEAP32[((((5247076)|0))>>2)];
      var $tobool52=(($49)|0)!=0;
      if ($tobool52) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $50=HEAP32[((((5249124)|0))>>2)];
      var $tobool54=(($50)|0)!=0;
      if ($tobool54) { label = 34; break; } else { label = 33; break; }
    case 33: 
      $retval=0;
      label = 47; break;
    case 34: 
      var $51=$okangle;
      var $tobool57=(($51)|0)!=0;
      if ($tobool57) { label = 37; break; } else { label = 35; break; }
    case 35: 
      var $52=HEAP32[((((5246940)|0))>>2)];
      var $tobool59=(($52)|0)!=0;
      if ($tobool59) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $53=$facet_addr;
      var $normal61=(($53+24)|0);
      var $54=HEAP32[(($normal61)>>2)];
      var $55=$neighbor_addr;
      var $normal62=(($55+24)|0);
      var $56=HEAP32[(($normal62)>>2)];
      var $call63=_qh_getangle($54, $56);
      (HEAPF64[(tempDoublePtr)>>3]=$call63,HEAP32[(($angle)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angle)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $57=HEAP32[(((((5243060)|0)))>>2)];
      var $inc64=((($57)+(1))|0);
      HEAP32[(((((5243060)|0)))>>2)]=$inc64;
      label = 37; break;
    case 37: 
      var $58=$isconcave;
      var $tobool66=(($58)|0)!=0;
      if ($tobool66) { label = 38; break; } else { label = 43; break; }
    case 38: 
      var $59=HEAP32[(((((5243212)|0)))>>2)];
      var $inc68=((($59)+(1))|0);
      HEAP32[(((((5243212)|0)))>>2)]=$inc68;
      var $60=HEAP32[((((5246940)|0))>>2)];
      var $tobool69=(($60)|0)!=0;
      if ($tobool69) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($61)+(2);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($angle)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angle)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 40; break;
    case 40: 
      var $62=$facet_addr;
      var $63=$neighbor_addr;
      _qh_appendmergeset($62, $63, 3, $angle);
      var $64=HEAP32[((((5247040)|0))>>2)];
      var $tobool72=(($64)|0)!=0;
      if ($tobool72) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $65=HEAP32[((((5248924)|0))>>2)];
      var $66=$facet_addr;
      var $id74=(($66+72)|0);
      var $67=HEAP32[(($id74)>>2)];
      var $68=$neighbor_addr;
      var $id75=(($68+72)|0);
      var $69=HEAP32[(($id75)>>2)];
      var $70=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $71=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $72=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $73=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($65, 18, ((5300520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$67,HEAP32[(((tempInt)+(4))>>2)]=$69,(HEAPF64[(tempDoublePtr)>>3]=$70,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$71,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$72,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(32))>>2)]=$73,tempInt));
      label = 42; break;
    case 42: 
      label = 46; break;
    case 43: 
      var $74=HEAP32[(((((5243252)|0)))>>2)];
      var $inc78=((($74)+(1))|0);
      HEAP32[(((((5243252)|0)))>>2)]=$inc78;
      var $75=$facet_addr;
      var $76=$neighbor_addr;
      _qh_appendmergeset($75, $76, 1, $angle);
      var $77=HEAP32[((((5247040)|0))>>2)];
      var $cmp79=(($77)|0) >= 2;
      if ($cmp79) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $78=HEAP32[((((5248924)|0))>>2)];
      var $79=$facet_addr;
      var $id81=(($79+72)|0);
      var $80=HEAP32[(($id81)>>2)];
      var $81=$neighbor_addr;
      var $id82=(($81+72)|0);
      var $82=HEAP32[(($id82)>>2)];
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($78, 2040, ((5300092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$80,HEAP32[(((tempInt)+(4))>>2)]=$82,(HEAPF64[(tempDoublePtr)>>3]=$83,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$84,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$85,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      $retval=1;
      label = 47; break;
    case 47: 
      var $86=$retval;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }

}
_qh_test_appendmerge["X"]=1;

function _qh_makeridges($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      var $neighbor_i;
      var $neighbor_n;
      var $toporient;
      var $mergeridge;
      $facet_addr=$facet;
      $mergeridge=0;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 13;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 41; break;
    case 4: 
      var $5=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($5)|0) >= 4;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=HEAP32[((((5248924)|0))>>2)];
      var $7=$facet_addr;
      var $id=(($7+72)|0);
      var $8=HEAP32[(($id)>>2)];
      _qh_fprintf($6, 4027, ((5267748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      label = 6; break;
    case 6: 
      var $9=$facet_addr;
      var $10=$9;
      var $bf_field_offs3=(($10+76)|0);
      var $11=$bf_field_offs3;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & -8193;
      HEAP32[(($11)>>2)]=$13;
      $neighbor=0;
      var $14=$facet_addr;
      var $neighbors=(($14+56)|0);
      var $15=HEAP32[(($neighbors)>>2)];
      var $tobool4=(($15)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $16=$facet_addr;
      var $neighbors6=(($16+56)|0);
      var $17=HEAP32[(($neighbors6)>>2)];
      var $e=(($17+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $18=$p;
      $neighborp=$18;
      label = 8; break;
    case 8: 
      var $19=$neighborp;
      var $incdec_ptr=(($19+4)|0);
      $neighborp=$incdec_ptr;
      var $20=HEAP32[(($19)>>2)];
      $neighbor=$20;
      var $tobool7=(($20)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $21=$neighbor;
      var $cmp8=(($21)|0)==2;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $mergeridge=1;
      label = 12; break;
    case 11: 
      var $22=$neighbor;
      var $23=$22;
      var $bf_field_offs10=(($23+76)|0);
      var $24=$bf_field_offs10;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & -16385;
      HEAP32[(($24)>>2)]=$26;
      label = 12; break;
    case 12: 
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      $ridge=0;
      var $27=$facet_addr;
      var $ridges=(($27+52)|0);
      var $28=HEAP32[(($ridges)>>2)];
      var $tobool13=(($28)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $29=$facet_addr;
      var $ridges15=(($29+52)|0);
      var $30=HEAP32[(($ridges15)>>2)];
      var $e16=(($30+4)|0);
      var $arrayidx17=(($e16)|0);
      var $p18=$arrayidx17;
      var $31=$p18;
      $ridgep=$31;
      label = 16; break;
    case 16: 
      var $32=$ridgep;
      var $incdec_ptr20=(($32+4)|0);
      $ridgep=$incdec_ptr20;
      var $33=HEAP32[(($32)>>2)];
      $ridge=$33;
      var $tobool21=(($33)|0)!=0;
      if ($tobool21) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $34=$ridge;
      var $top=(($34+4)|0);
      var $35=HEAP32[(($top)>>2)];
      var $36=$facet_addr;
      var $cmp23=(($35)|0)==(($36)|0);
      if ($cmp23) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $37=$ridge;
      var $bottom=(($37+8)|0);
      var $38=HEAP32[(($bottom)>>2)];
      var $cond = $38;label = 20; break;
    case 19: 
      var $39=$ridge;
      var $top24=(($39+4)|0);
      var $40=HEAP32[(($top24)>>2)];
      var $cond = $40;label = 20; break;
    case 20: 
      var $cond;
      var $41=$cond;
      var $bf_field_offs25=(($41+76)|0);
      var $42=$bf_field_offs25;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & -16385;
      var $45=$44 | 16384;
      HEAP32[(($42)>>2)]=$45;
      label = 16; break;
    case 21: 
      label = 22; break;
    case 22: 
      $neighbor=0;
      var $46=$facet_addr;
      var $neighbors28=(($46+56)|0);
      var $47=HEAP32[(($neighbors28)>>2)];
      var $tobool29=(($47)|0)!=0;
      if ($tobool29) { label = 23; break; } else { label = 36; break; }
    case 23: 
      $neighbor_i=0;
      var $48=$facet_addr;
      var $neighbors31=(($48+56)|0);
      var $49=HEAP32[(($neighbors31)>>2)];
      var $e32=(($49+4)|0);
      var $arrayidx33=(($e32)|0);
      var $p34=$arrayidx33;
      var $50=HEAP32[(($p34)>>2)];
      var $51=$50;
      $neighbor=$51;
      var $52=$facet_addr;
      var $neighbors35=(($52+56)|0);
      var $53=HEAP32[(($neighbors35)>>2)];
      var $call=_qh_setsize($53);
      $neighbor_n=$call;
      label = 24; break;
    case 24: 
      var $54=$neighbor_i;
      var $55=$neighbor_n;
      var $cmp37=(($54)|0) < (($55)|0);
      if ($cmp37) { label = 25; break; } else { label = 35; break; }
    case 25: 
      var $56=$neighbor;
      var $cmp39=(($56)|0)==2;
      if ($cmp39) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 34; break;
    case 27: 
      var $57=$neighbor;
      var $58=$57;
      var $bf_field_offs42=(($58+76)|0);
      var $59=$bf_field_offs42;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60 >>> 14;
      var $bf_clear43=$61 & 1;
      var $tobool44=(($bf_clear43)|0)!=0;
      if ($tobool44) { label = 32; break; } else { label = 28; break; }
    case 28: 
      var $call46=_qh_newridge();
      $ridge=$call46;
      var $62=$facet_addr;
      var $vertices=(($62+48)|0);
      var $63=HEAP32[(($vertices)>>2)];
      var $64=HEAP32[((((5247508)|0))>>2)];
      var $65=$neighbor_i;
      var $call47=_qh_setnew_delnthsorted($63, $64, $65, 0);
      var $66=$ridge;
      var $vertices48=(($66)|0);
      HEAP32[(($vertices48)>>2)]=$call47;
      var $67=$facet_addr;
      var $68=$67;
      var $bf_field_offs49=(($68+76)|0);
      var $69=$bf_field_offs49;
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 >>> 12;
      var $bf_clear50=$71 & 1;
      var $72=$neighbor_i;
      var $and=$72 & 1;
      var $xor=$bf_clear50 ^ $and;
      $toporient=$xor;
      var $73=$toporient;
      var $tobool51=(($73)|0)!=0;
      if ($tobool51) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $74=$facet_addr;
      var $75=$ridge;
      var $top53=(($75+4)|0);
      HEAP32[(($top53)>>2)]=$74;
      var $76=$neighbor;
      var $77=$ridge;
      var $bottom54=(($77+8)|0);
      HEAP32[(($bottom54)>>2)]=$76;
      label = 31; break;
    case 30: 
      var $78=$neighbor;
      var $79=$ridge;
      var $top56=(($79+4)|0);
      HEAP32[(($top56)>>2)]=$78;
      var $80=$facet_addr;
      var $81=$ridge;
      var $bottom57=(($81+8)|0);
      HEAP32[(($bottom57)>>2)]=$80;
      label = 31; break;
    case 31: 
      var $82=$facet_addr;
      var $ridges59=(($82+52)|0);
      var $83=$ridge;
      var $84=$83;
      _qh_setappend($ridges59, $84);
      var $85=$neighbor;
      var $ridges60=(($85+52)|0);
      var $86=$ridge;
      var $87=$86;
      _qh_setappend($ridges60, $87);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $88=$neighbor_i;
      var $inc=((($88)+(1))|0);
      $neighbor_i=$inc;
      var $89=$facet_addr;
      var $neighbors63=(($89+56)|0);
      var $90=HEAP32[(($neighbors63)>>2)];
      var $e64=(($90+4)|0);
      var $arrayidx65=(($e64+($inc<<2))|0);
      var $p66=$arrayidx65;
      var $91=HEAP32[(($p66)>>2)];
      var $92=$91;
      $neighbor=$92;
      label = 24; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $93=$mergeridge;
      var $tobool69=(($93)|0)!=0;
      if ($tobool69) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $94=$facet_addr;
      var $neighbors71=(($94+56)|0);
      var $95=HEAP32[(($neighbors71)>>2)];
      var $call72=_qh_setdel($95, 2);
      var $tobool73=(($call72)|0)!=0;
      if ($tobool73) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_makeridges["X"]=1;

function _qh_maydropneighbor($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $ridge;
      var $ridgep;
      var $angledegen=__stackBase__;
      var $neighbor;
      var $neighborp;
      $facet_addr=$facet;
      (HEAPF64[(tempDoublePtr)>>3]=5,HEAP32[(($angledegen)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($angledegen)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $0=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=$facet_addr;
      var $id=(($3+72)|0);
      var $4=HEAP32[(($id)>>2)];
      _qh_fprintf($2, 4029, ((5266732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      label = 4; break;
    case 4: 
      $ridge=0;
      var $5=$facet_addr;
      var $ridges=(($5+52)|0);
      var $6=HEAP32[(($ridges)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $7=$facet_addr;
      var $ridges2=(($7+52)|0);
      var $8=HEAP32[(($ridges2)>>2)];
      var $e=(($8+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $9=$p;
      $ridgep=$9;
      label = 6; break;
    case 6: 
      var $10=$ridgep;
      var $incdec_ptr=(($10+4)|0);
      $ridgep=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $ridge=$11;
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=HEAP32[((((5249156)|0))>>2)];
      var $13=$ridge;
      var $top=(($13+4)|0);
      var $14=HEAP32[(($top)>>2)];
      var $visitid=(($14+68)|0);
      HEAP32[(($visitid)>>2)]=$12;
      var $15=HEAP32[((((5249156)|0))>>2)];
      var $16=$ridge;
      var $bottom=(($16+8)|0);
      var $17=HEAP32[(($bottom)>>2)];
      var $visitid4=(($17+68)|0);
      HEAP32[(($visitid4)>>2)]=$15;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      $neighbor=0;
      var $18=$facet_addr;
      var $neighbors=(($18+56)|0);
      var $19=HEAP32[(($neighbors)>>2)];
      var $tobool6=(($19)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 22; break; }
    case 10: 
      var $20=$facet_addr;
      var $neighbors8=(($20+56)|0);
      var $21=HEAP32[(($neighbors8)>>2)];
      var $e9=(($21+4)|0);
      var $arrayidx10=(($e9)|0);
      var $p11=$arrayidx10;
      var $22=$p11;
      $neighborp=$22;
      label = 11; break;
    case 11: 
      var $23=$neighborp;
      var $incdec_ptr13=(($23+4)|0);
      $neighborp=$incdec_ptr13;
      var $24=HEAP32[(($23)>>2)];
      $neighbor=$24;
      var $tobool14=(($24)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 21; break; }
    case 12: 
      var $25=$neighbor;
      var $visitid16=(($25+68)|0);
      var $26=HEAP32[(($visitid16)>>2)];
      var $27=HEAP32[((((5249156)|0))>>2)];
      var $cmp17=(($26)|0)!=(($27)|0);
      if ($cmp17) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $28=HEAP32[((((5247040)|0))>>2)];
      var $tobool19=(($28)|0)!=0;
      if ($tobool19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $29=HEAP32[((((5248924)|0))>>2)];
      var $30=$facet_addr;
      var $id21=(($30+72)|0);
      var $31=HEAP32[(($id21)>>2)];
      var $32=$neighbor;
      var $id22=(($32+72)|0);
      var $33=HEAP32[(($id22)>>2)];
      var $34=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($29, 17, ((5266240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$33,HEAP32[(((tempInt)+(8))>>2)]=$34,tempInt));
      label = 15; break;
    case 15: 
      var $35=HEAP32[(((((5243572)|0)))>>2)];
      var $inc24=((($35)+(1))|0);
      HEAP32[(((((5243572)|0)))>>2)]=$inc24;
      var $36=$facet_addr;
      var $neighbors25=(($36+56)|0);
      var $37=HEAP32[(($neighbors25)>>2)];
      var $38=$neighbor;
      var $39=$38;
      var $call=_qh_setdel($37, $39);
      var $40=$neighborp;
      var $incdec_ptr26=((($40)-(4))|0);
      $neighborp=$incdec_ptr26;
      var $41=$neighbor;
      var $neighbors27=(($41+56)|0);
      var $42=HEAP32[(($neighbors27)>>2)];
      var $43=$facet_addr;
      var $44=$43;
      var $call28=_qh_setdel($42, $44);
      var $45=$neighbor;
      var $neighbors29=(($45+56)|0);
      var $46=HEAP32[(($neighbors29)>>2)];
      var $call30=_qh_setsize($46);
      var $47=HEAP32[((((5247508)|0))>>2)];
      var $cmp31=(($call30)|0) < (($47)|0);
      if ($cmp31) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $48=HEAP32[(((((5243564)|0)))>>2)];
      var $inc33=((($48)+(1))|0);
      HEAP32[(((((5243564)|0)))>>2)]=$inc33;
      var $49=$neighbor;
      var $50=$neighbor;
      _qh_appendmergeset($49, $50, 6, $angledegen);
      var $51=HEAP32[((((5247040)|0))>>2)];
      var $cmp34=(($51)|0) >= 2;
      if ($cmp34) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $52=HEAP32[((((5248924)|0))>>2)];
      var $53=$neighbor;
      var $id36=(($53+72)|0);
      var $54=HEAP32[(($id36)>>2)];
      _qh_fprintf($52, 2023, ((5265924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,tempInt));
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 11; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $55=$facet_addr;
      var $neighbors42=(($55+56)|0);
      var $56=HEAP32[(($neighbors42)>>2)];
      var $call43=_qh_setsize($56);
      var $57=HEAP32[((((5247508)|0))>>2)];
      var $cmp44=(($call43)|0) < (($57)|0);
      if ($cmp44) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $58=HEAP32[(((((5243564)|0)))>>2)];
      var $inc46=((($58)+(1))|0);
      HEAP32[(((((5243564)|0)))>>2)]=$inc46;
      var $59=$facet_addr;
      var $60=$facet_addr;
      _qh_appendmergeset($59, $60, 6, $angledegen);
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp47=(($61)|0) >= 2;
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$facet_addr;
      var $id49=(($63+72)|0);
      var $64=HEAP32[(($id49)>>2)];
      _qh_fprintf($62, 2024, ((5265924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,tempInt));
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_maydropneighbor["X"]=1;

function _qh_willdelete($facet, $replace) {
  var label = 0;


  var $facet_addr;
  var $replace_addr;
  $facet_addr=$facet;
  $replace_addr=$replace;
  var $0=$facet_addr;
  _qh_removefacet($0);
  var $1=$facet_addr;
  _qh_prependfacet($1, ((5248960)|0));
  var $2=HEAP32[((((5248964)|0))>>2)];
  var $inc=((($2)+(1))|0);
  HEAP32[((((5248964)|0))>>2)]=$inc;
  var $3=$facet_addr;
  var $4=$3;
  var $bf_field_offs=(($4+76)|0);
  var $5=$bf_field_offs;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 & -2049;
  var $8=$7 | 2048;
  HEAP32[(($5)>>2)]=$8;
  var $9=$replace_addr;
  var $10=$facet_addr;
  var $f=(($10+28)|0);
  var $replace1=$f;
  HEAP32[(($replace1)>>2)]=$9;

  return;
}


function _qh_mergecycle($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $newfacet_addr;
      var $traceonce;
      var $tracerestore;
      var $apex;
      var $same;
      $samecycle_addr=$samecycle;
      $newfacet_addr=$newfacet;
      $traceonce=0;
      $tracerestore=0;
      var $0=$newfacet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 9;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=HEAP32[((((5247456)|0))>>2)];
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($6, 6224, ((5262500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=$newfacet_addr;
      _qh_errexit(5, $7, 0);
      label = 5; break;
    case 5: 
      var $8=$newfacet_addr;
      var $9=$8;
      var $bf_field_offs3=(($9+76)|0);
      var $10=$bf_field_offs3;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & -513;
      HEAP32[(($10)>>2)]=$12;
      var $13=$newfacet_addr;
      var $14=$13;
      var $bf_field_offs4=(($14+76)|0);
      var $15=$bf_field_offs4;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & -268435457;
      HEAP32[(($15)>>2)]=$17;
      label = 6; break;
    case 6: 
      var $18=HEAP32[((((5248580)|0))>>2)];
      var $tobool6=(($18)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 7; break; }
    case 7: 
      _qh_vertexneighbors();
      label = 8; break;
    case 8: 
      var $19=HEAP32[(((((5244580)|0)))>>2)];
      var $inc=((($19)+(1))|0);
      HEAP32[(((((5244580)|0)))>>2)]=$inc;
      var $20=HEAP32[((((5247376)|0))>>2)];
      var $tobool9=(($20)|0)!=0;
      if ($tobool9) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $21=HEAP32[((((5249124)|0))>>2)];
      var $tobool10=(($21)|0)!=0;
      if ($tobool10) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $22=HEAP32[(((((5244580)|0)))>>2)];
      var $23=HEAP32[((((5249260)|0))>>2)];
      var $24=HEAP32[((((5247376)|0))>>2)];
      var $add=((($23)+($24))|0);
      var $cmp=(($22)|0) > (($add)|0);
      if ($cmp) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _qh_tracemerging();
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $25=HEAP32[((((5247448)|0))>>2)];
      var $26=HEAP32[(((((5244580)|0)))>>2)];
      var $cmp15=(($25)|0)==(($26)|0);
      if ($cmp15) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $27=HEAP32[((((5247428)|0))>>2)];
      HEAP32[((((5247040)|0))>>2)]=$27;
      HEAP32[((((5242936)|0))>>2)]=$27;
      label = 15; break;
    case 15: 
      var $28=HEAP32[((((5247040)|0))>>2)];
      var $cmp18=(($28)|0) >= 2;
      if ($cmp18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $29=HEAP32[((((5248924)|0))>>2)];
      var $30=HEAP32[(((((5244580)|0)))>>2)];
      var $31=$samecycle_addr;
      var $id=(($31+72)|0);
      var $32=HEAP32[(($id)>>2)];
      var $33=$newfacet_addr;
      var $id20=(($33+72)|0);
      var $34=HEAP32[(($id20)>>2)];
      _qh_fprintf($29, 2030, ((5262016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$34,tempInt));
      label = 17; break;
    case 17: 
      var $35=$newfacet_addr;
      var $36=HEAP32[((((5248972)|0))>>2)];
      var $cmp22=(($35)|0)==(($36)|0);
      if ($cmp22) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $37=HEAP32[((((5247040)|0))>>2)];
      $tracerestore=$37;
      HEAP32[((((5247040)|0))>>2)]=4;
      var $38=HEAP32[((((5248924)|0))>>2)];
      var $39=HEAP32[(((((5244580)|0)))>>2)];
      var $40=$samecycle_addr;
      var $id24=(($40+72)|0);
      var $41=HEAP32[(($id24)>>2)];
      var $42=$newfacet_addr;
      var $id25=(($42+72)|0);
      var $43=HEAP32[(($id25)>>2)];
      var $44=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($38, 8068, ((5261540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$39,HEAP32[(((tempInt)+(4))>>2)]=$41,HEAP32[(((tempInt)+(8))>>2)]=$43,HEAP32[(((tempInt)+(12))>>2)]=$44,tempInt));
      $traceonce=1;
      label = 19; break;
    case 19: 
      var $45=HEAP32[((((5247040)|0))>>2)];
      var $cmp27=(($45)|0) >= 4;
      if ($cmp27) { label = 20; break; } else { label = 28; break; }
    case 20: 
      var $46=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($46, 8069, ((5261184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $47=$samecycle_addr;
      var $f=(($47+28)|0);
      var $samecycle29=$f;
      var $48=HEAP32[(($samecycle29)>>2)];
      $same=$48;
      label = 21; break;
    case 21: 
      var $49=$same;
      var $tobool30=(($49)|0)!=0;
      if ($tobool30) { label = 22; break; } else { label = 27; break; }
    case 22: 
      var $50=HEAP32[((((5248924)|0))>>2)];
      var $51=$same;
      var $id31=(($51+72)|0);
      var $52=HEAP32[(($id31)>>2)];
      _qh_fprintf($50, 8070, ((5260760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$52,tempInt));
      label = 23; break;
    case 23: 
      var $53=$same;
      var $54=$samecycle_addr;
      var $cmp32=(($53)|0)==(($54)|0);
      if ($cmp32) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $cond = 0;label = 26; break;
    case 25: 
      var $55=$same;
      var $f33=(($55+28)|0);
      var $samecycle34=$f33;
      var $56=HEAP32[(($samecycle34)>>2)];
      var $cond = $56;label = 26; break;
    case 26: 
      var $cond;
      $same=$cond;
      label = 21; break;
    case 27: 
      var $57=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($57, 8071, ((5276620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 28; break;
    case 28: 
      var $58=HEAP32[((((5247040)|0))>>2)];
      var $cmp36=(($58)|0) >= 4;
      if ($cmp36) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $59=$samecycle_addr;
      var $60=$newfacet_addr;
      _qh_errprint(((5260324)|0), $59, $60, 0, 0);
      label = 30; break;
    case 30: 
      var $61=$samecycle_addr;
      var $vertices=(($61+48)|0);
      var $62=HEAP32[(($vertices)>>2)];
      var $e=(($62+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $63=HEAP32[(($p)>>2)];
      var $64=$63;
      $apex=$64;
      var $65=$newfacet_addr;
      _qh_makeridges($65);
      var $66=$samecycle_addr;
      var $67=$newfacet_addr;
      _qh_mergecycle_neighbors($66, $67);
      var $68=$samecycle_addr;
      var $69=$newfacet_addr;
      _qh_mergecycle_ridges($68, $69);
      var $70=$samecycle_addr;
      var $71=$newfacet_addr;
      _qh_mergecycle_vneighbors($70, $71);
      var $72=$newfacet_addr;
      var $vertices39=(($72+48)|0);
      var $73=HEAP32[(($vertices39)>>2)];
      var $e40=(($73+4)|0);
      var $arrayidx41=(($e40)|0);
      var $p42=$arrayidx41;
      var $74=HEAP32[(($p42)>>2)];
      var $75=$74;
      var $76=$apex;
      var $cmp43=(($75)|0)!=(($76)|0);
      if ($cmp43) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $77=$newfacet_addr;
      var $vertices45=(($77+48)|0);
      var $78=$apex;
      var $79=$78;
      _qh_setaddnth($vertices45, 0, $79);
      label = 32; break;
    case 32: 
      var $80=$newfacet_addr;
      var $81=$80;
      var $bf_field_offs47=(($81+76)|0);
      var $82=$bf_field_offs47;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83 >>> 10;
      var $bf_clear48=$84 & 1;
      var $tobool49=(($bf_clear48)|0)!=0;
      if ($tobool49) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $85=$newfacet_addr;
      var $vertices51=(($85+48)|0);
      var $86=HEAP32[(($vertices51)>>2)];
      _qh_newvertices($86);
      label = 34; break;
    case 34: 
      var $87=$samecycle_addr;
      var $88=$newfacet_addr;
      _qh_mergecycle_facets($87, $88);
      var $89=$samecycle_addr;
      var $90=$newfacet_addr;
      _qh_tracemerge($89, $90);
      var $91=$traceonce;
      var $tobool53=(($91)|0)!=0;
      if ($tobool53) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $92=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($92, 8072, ((5260036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $93=$tracerestore;
      HEAP32[((((5247040)|0))>>2)]=$93;
      label = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle["X"]=1;

function _qh_tracemerging() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $cpu;
  var $total;
  var $timedata=__stackBase__;
  var $tp;
  var $0=HEAP32[(((((5244580)|0)))>>2)];
  HEAP32[((((5249260)|0))>>2)]=$0;
  var $call=_time($timedata);
  var $call1=_localtime($timedata);
  $tp=$call1;
  var $call2=_clock();
  var $conv=(($call2)>>>0);
  $cpu=$conv;
  var $1=$cpu;
  var $div=($1)/(1000);
  $cpu=$div;
  var $2=HEAP32[(((((5244580)|0)))>>2)];
  var $3=HEAP32[(((((5243316)|0)))>>2)];
  var $sub=((($2)-($3))|0);
  var $4=HEAP32[(((((5243308)|0)))>>2)];
  var $add=((($sub)+($4))|0);
  $total=$add;
  var $5=HEAP32[((((5248924)|0))>>2)];
  var $6=$tp;
  var $tm_hour=(($6+8)|0);
  var $7=HEAP32[(($tm_hour)>>2)];
  var $8=$tp;
  var $tm_min=(($8+4)|0);
  var $9=HEAP32[(($tm_min)>>2)];
  var $10=$tp;
  var $tm_sec=(($10)|0);
  var $11=HEAP32[(($tm_sec)>>2)];
  var $12=$cpu;
  var $13=$total;
  var $14=HEAP32[((((5248996)|0))>>2)];
  var $15=HEAP32[((((5248964)|0))>>2)];
  var $sub3=((($14)-($15))|0);
  var $16=HEAP32[((((5249000)|0))>>2)];
  var $17=HEAP32[((((5249188)|0))>>2)];
  var $call4=_qh_setsize($17);
  var $sub5=((($16)-($call4))|0);
  _qh_fprintf($5, 8087, ((5298536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$9,HEAP32[(((tempInt)+(8))>>2)]=$11,(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$13,HEAP32[(((tempInt)+(24))>>2)]=$sub3,HEAP32[(((tempInt)+(28))>>2)]=$sub5,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _qh_mergecycle_neighbors($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $newfacet_addr;
      var $same;
      var $neighbor;
      var $neighborp;
      var $delneighbors;
      var $newneighbors;
      var $samevisitid;
      var $ridge;
      var $ridgep;
      $samecycle_addr=$samecycle;
      $newfacet_addr=$newfacet;
      $delneighbors=0;
      $newneighbors=0;
      var $0=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $samevisitid=$inc;
      var $1=$samecycle_addr;
      var $f=(($1+28)|0);
      var $samecycle1=$f;
      var $2=HEAP32[(($samecycle1)>>2)];
      $same=$2;
      label = 3; break;
    case 3: 
      var $3=$same;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $4=$same;
      var $visitid=(($4+68)|0);
      var $5=HEAP32[(($visitid)>>2)];
      var $6=$samevisitid;
      var $cmp=(($5)|0)==(($6)|0);
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$same;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $bf_clear=$11 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$samecycle_addr;
      _qh_infiniteloop($12);
      label = 7; break;
    case 7: 
      var $13=$samevisitid;
      var $14=$same;
      var $visitid3=(($14+68)|0);
      HEAP32[(($visitid3)>>2)]=$13;
      label = 8; break;
    case 8: 
      var $15=$same;
      var $16=$samecycle_addr;
      var $cmp4=(($15)|0)==(($16)|0);
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $cond = 0;label = 11; break;
    case 10: 
      var $17=$same;
      var $f5=(($17+28)|0);
      var $samecycle6=$f5;
      var $18=HEAP32[(($samecycle6)>>2)];
      var $cond = $18;label = 11; break;
    case 11: 
      var $cond;
      $same=$cond;
      label = 3; break;
    case 12: 
      var $19=HEAP32[((((5249156)|0))>>2)];
      var $inc7=((($19)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc7;
      var $20=$newfacet_addr;
      var $visitid8=(($20+68)|0);
      HEAP32[(($visitid8)>>2)]=$inc7;
      var $21=HEAP32[((((5247040)|0))>>2)];
      var $cmp9=(($21)|0) >= 4;
      if ($cmp9) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($22, 4031, ((5258280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      $neighbor=0;
      var $23=$newfacet_addr;
      var $neighbors=(($23+56)|0);
      var $24=HEAP32[(($neighbors)>>2)];
      var $tobool12=(($24)|0)!=0;
      if ($tobool12) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $25=$newfacet_addr;
      var $neighbors14=(($25+56)|0);
      var $26=HEAP32[(($neighbors14)>>2)];
      var $e=(($26+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $27=$p;
      $neighborp=$27;
      label = 16; break;
    case 16: 
      var $28=$neighborp;
      var $incdec_ptr=(($28+4)|0);
      $neighborp=$incdec_ptr;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool16=(($29)|0)!=0;
      if ($tobool16) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $30=$neighbor;
      var $visitid18=(($30+68)|0);
      var $31=HEAP32[(($visitid18)>>2)];
      var $32=$samevisitid;
      var $cmp19=(($31)|0)==(($32)|0);
      if ($cmp19) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $33=$neighborp;
      var $arrayidx21=((($33)-(4))|0);
      HEAP32[(($arrayidx21)>>2)]=0;
      var $34=$delneighbors;
      var $inc22=((($34)+(1))|0);
      $delneighbors=$inc22;
      label = 20; break;
    case 19: 
      var $35=HEAP32[((((5249156)|0))>>2)];
      var $36=$neighbor;
      var $visitid23=(($36+68)|0);
      HEAP32[(($visitid23)>>2)]=$35;
      label = 20; break;
    case 20: 
      label = 16; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $37=$newfacet_addr;
      var $neighbors27=(($37+56)|0);
      var $38=HEAP32[(($neighbors27)>>2)];
      _qh_setcompact($38);
      var $39=HEAP32[((((5247040)|0))>>2)];
      var $cmp28=(($39)|0) >= 4;
      if ($cmp28) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $40=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($40, 4032, ((5258108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 24; break;
    case 24: 
      var $41=$samecycle_addr;
      var $f31=(($41+28)|0);
      var $samecycle32=$f31;
      var $42=HEAP32[(($samecycle32)>>2)];
      $same=$42;
      label = 25; break;
    case 25: 
      var $43=$same;
      var $tobool34=(($43)|0)!=0;
      if ($tobool34) { label = 26; break; } else { label = 56; break; }
    case 26: 
      $neighbor=0;
      var $44=$same;
      var $neighbors36=(($44+56)|0);
      var $45=HEAP32[(($neighbors36)>>2)];
      var $tobool37=(($45)|0)!=0;
      if ($tobool37) { label = 27; break; } else { label = 51; break; }
    case 27: 
      var $46=$same;
      var $neighbors39=(($46+56)|0);
      var $47=HEAP32[(($neighbors39)>>2)];
      var $e40=(($47+4)|0);
      var $arrayidx41=(($e40)|0);
      var $p42=$arrayidx41;
      var $48=$p42;
      $neighborp=$48;
      label = 28; break;
    case 28: 
      var $49=$neighborp;
      var $incdec_ptr44=(($49+4)|0);
      $neighborp=$incdec_ptr44;
      var $50=HEAP32[(($49)>>2)];
      $neighbor=$50;
      var $tobool45=(($50)|0)!=0;
      if ($tobool45) { label = 29; break; } else { label = 50; break; }
    case 29: 
      var $51=$neighbor;
      var $visitid47=(($51+68)|0);
      var $52=HEAP32[(($visitid47)>>2)];
      var $53=$samevisitid;
      var $cmp48=(($52)|0)==(($53)|0);
      if ($cmp48) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 28; break;
    case 31: 
      var $54=$neighbor;
      var $55=$54;
      var $bf_field_offs51=(($55+76)|0);
      var $56=$bf_field_offs51;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 13;
      var $bf_clear52=$58 & 1;
      var $tobool53=(($bf_clear52)|0)!=0;
      if ($tobool53) { label = 32; break; } else { label = 46; break; }
    case 32: 
      var $59=$neighbor;
      var $visitid55=(($59+68)|0);
      var $60=HEAP32[(($visitid55)>>2)];
      var $61=HEAP32[((((5249156)|0))>>2)];
      var $cmp56=(($60)|0)!=(($61)|0);
      if ($cmp56) { label = 33; break; } else { label = 44; break; }
    case 33: 
      var $62=$newfacet_addr;
      var $neighbors58=(($62+56)|0);
      var $63=$neighbor;
      var $64=$63;
      _qh_setappend($neighbors58, $64);
      var $65=$neighbor;
      var $neighbors59=(($65+56)|0);
      var $66=HEAP32[(($neighbors59)>>2)];
      var $67=$same;
      var $68=$67;
      var $69=$newfacet_addr;
      var $70=$69;
      _qh_setreplace($66, $68, $70);
      var $71=$newneighbors;
      var $inc60=((($71)+(1))|0);
      $newneighbors=$inc60;
      var $72=HEAP32[((((5249156)|0))>>2)];
      var $73=$neighbor;
      var $visitid61=(($73+68)|0);
      HEAP32[(($visitid61)>>2)]=$72;
      $ridge=0;
      var $74=$neighbor;
      var $ridges=(($74+52)|0);
      var $75=HEAP32[(($ridges)>>2)];
      var $tobool62=(($75)|0)!=0;
      if ($tobool62) { label = 34; break; } else { label = 43; break; }
    case 34: 
      var $76=$neighbor;
      var $ridges64=(($76+52)|0);
      var $77=HEAP32[(($ridges64)>>2)];
      var $e65=(($77+4)|0);
      var $arrayidx66=(($e65)|0);
      var $p67=$arrayidx66;
      var $78=$p67;
      $ridgep=$78;
      label = 35; break;
    case 35: 
      var $79=$ridgep;
      var $incdec_ptr69=(($79+4)|0);
      $ridgep=$incdec_ptr69;
      var $80=HEAP32[(($79)>>2)];
      $ridge=$80;
      var $tobool70=(($80)|0)!=0;
      if ($tobool70) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $81=$ridge;
      var $top=(($81+4)|0);
      var $82=HEAP32[(($top)>>2)];
      var $83=$same;
      var $cmp72=(($82)|0)==(($83)|0);
      if ($cmp72) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $84=$newfacet_addr;
      var $85=$ridge;
      var $top74=(($85+4)|0);
      HEAP32[(($top74)>>2)]=$84;
      label = 42; break;
    case 38: 
      var $86=$ridge;
      var $bottom=(($86+8)|0);
      var $87=HEAP32[(($bottom)>>2)];
      var $88=$same;
      var $cmp76=(($87)|0)==(($88)|0);
      if ($cmp76) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $89=$newfacet_addr;
      var $90=$ridge;
      var $bottom78=(($90+8)|0);
      HEAP32[(($bottom78)>>2)]=$89;
      label = 42; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 35; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 45; break;
    case 44: 
      var $91=$neighbor;
      _qh_makeridges($91);
      var $92=$neighbor;
      var $neighbors84=(($92+56)|0);
      var $93=HEAP32[(($neighbors84)>>2)];
      var $94=$same;
      var $95=$94;
      var $call=_qh_setdel($93, $95);
      label = 45; break;
    case 45: 
      label = 49; break;
    case 46: 
      var $96=$neighbor;
      var $neighbors87=(($96+56)|0);
      var $97=HEAP32[(($neighbors87)>>2)];
      var $98=$same;
      var $99=$98;
      var $call88=_qh_setdel($97, $99);
      var $100=$neighbor;
      var $visitid89=(($100+68)|0);
      var $101=HEAP32[(($visitid89)>>2)];
      var $102=HEAP32[((((5249156)|0))>>2)];
      var $cmp90=(($101)|0)!=(($102)|0);
      if ($cmp90) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $103=$neighbor;
      var $neighbors92=(($103+56)|0);
      var $104=$newfacet_addr;
      var $105=$104;
      _qh_setappend($neighbors92, $105);
      var $106=$newfacet_addr;
      var $neighbors93=(($106+56)|0);
      var $107=$neighbor;
      var $108=$107;
      _qh_setappend($neighbors93, $108);
      var $109=HEAP32[((((5249156)|0))>>2)];
      var $110=$neighbor;
      var $visitid94=(($110+68)|0);
      HEAP32[(($visitid94)>>2)]=$109;
      var $111=$newneighbors;
      var $inc95=((($111)+(1))|0);
      $newneighbors=$inc95;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 28; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $112=$same;
      var $113=$samecycle_addr;
      var $cmp101=(($112)|0)==(($113)|0);
      if ($cmp101) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $cond107 = 0;label = 55; break;
    case 54: 
      var $114=$same;
      var $f104=(($114+28)|0);
      var $samecycle105=$f104;
      var $115=HEAP32[(($samecycle105)>>2)];
      var $cond107 = $115;label = 55; break;
    case 55: 
      var $cond107;
      $same=$cond107;
      label = 25; break;
    case 56: 
      var $116=HEAP32[((((5247040)|0))>>2)];
      var $cmp109=(($116)|0) >= 2;
      if ($cmp109) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $117=HEAP32[((((5248924)|0))>>2)];
      var $118=$delneighbors;
      var $119=$newneighbors;
      _qh_fprintf($117, 2032, ((5257720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$118,HEAP32[(((tempInt)+(4))>>2)]=$119,tempInt));
      label = 58; break;
    case 58: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle_neighbors["X"]=1;

function _qh_mergecycle_ridges($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $newfacet_addr;
      var $same;
      var $neighbor;
      var $numold;
      var $numnew;
      var $neighbor_i;
      var $neighbor_n;
      var $samevisitid;
      var $ridge;
      var $ridgep;
      var $toporient;
      var $freelistp;
      $samecycle_addr=$samecycle;
      $newfacet_addr=$newfacet;
      $neighbor=0;
      $numold=0;
      $numnew=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 4033, ((5257320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5249156)|0))>>2)];
      var $sub=((($2)-(1))|0);
      $samevisitid=$sub;
      $ridge=0;
      var $3=$newfacet_addr;
      var $ridges=(($3+52)|0);
      var $4=HEAP32[(($ridges)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $5=$newfacet_addr;
      var $ridges2=(($5+52)|0);
      var $6=HEAP32[(($ridges2)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $7=$p;
      $ridgep=$7;
      label = 6; break;
    case 6: 
      var $8=$ridgep;
      var $incdec_ptr=(($8+4)|0);
      $ridgep=$incdec_ptr;
      var $9=HEAP32[(($8)>>2)];
      $ridge=$9;
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $10=$ridge;
      var $top=(($10+4)|0);
      var $11=HEAP32[(($top)>>2)];
      var $12=$newfacet_addr;
      var $cmp4=(($11)|0)==(($12)|0);
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=$ridge;
      var $bottom=(($13+8)|0);
      var $14=HEAP32[(($bottom)>>2)];
      var $cond = $14;label = 10; break;
    case 9: 
      var $15=$ridge;
      var $top5=(($15+4)|0);
      var $16=HEAP32[(($top5)>>2)];
      var $cond = $16;label = 10; break;
    case 10: 
      var $cond;
      $neighbor=$cond;
      var $17=$neighbor;
      var $visitid=(($17+68)|0);
      var $18=HEAP32[(($visitid)>>2)];
      var $19=$samevisitid;
      var $cmp6=(($18)|0)==(($19)|0);
      if ($cmp6) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=$ridgep;
      var $arrayidx8=((($20)-(4))|0);
      HEAP32[(($arrayidx8)>>2)]=0;
      label = 12; break;
    case 12: 
      label = 6; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $21=$newfacet_addr;
      var $ridges11=(($21+52)|0);
      var $22=HEAP32[(($ridges11)>>2)];
      _qh_setcompact($22);
      var $23=HEAP32[((((5247040)|0))>>2)];
      var $cmp12=(($23)|0) >= 4;
      if ($cmp12) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $24=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($24, 4034, ((5256996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 16; break;
    case 16: 
      var $25=$samecycle_addr;
      var $f=(($25+28)|0);
      var $samecycle15=$f;
      var $26=HEAP32[(($samecycle15)>>2)];
      $same=$26;
      label = 17; break;
    case 17: 
      var $27=$same;
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 18; break; } else { label = 60; break; }
    case 18: 
      $ridge=0;
      var $28=$same;
      var $ridges19=(($28+52)|0);
      var $29=HEAP32[(($ridges19)>>2)];
      var $tobool20=(($29)|0)!=0;
      if ($tobool20) { label = 19; break; } else { label = 39; break; }
    case 19: 
      var $30=$same;
      var $ridges22=(($30+52)|0);
      var $31=HEAP32[(($ridges22)>>2)];
      var $e23=(($31+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $32=$p25;
      $ridgep=$32;
      label = 20; break;
    case 20: 
      var $33=$ridgep;
      var $incdec_ptr27=(($33+4)|0);
      $ridgep=$incdec_ptr27;
      var $34=HEAP32[(($33)>>2)];
      $ridge=$34;
      var $tobool28=(($34)|0)!=0;
      if ($tobool28) { label = 21; break; } else { label = 38; break; }
    case 21: 
      var $35=$ridge;
      var $top30=(($35+4)|0);
      var $36=HEAP32[(($top30)>>2)];
      var $37=$same;
      var $cmp31=(($36)|0)==(($37)|0);
      if ($cmp31) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $38=$newfacet_addr;
      var $39=$ridge;
      var $top33=(($39+4)|0);
      HEAP32[(($top33)>>2)]=$38;
      var $40=$ridge;
      var $bottom34=(($40+8)|0);
      var $41=HEAP32[(($bottom34)>>2)];
      $neighbor=$41;
      label = 31; break;
    case 23: 
      var $42=$ridge;
      var $bottom35=(($42+8)|0);
      var $43=HEAP32[(($bottom35)>>2)];
      var $44=$same;
      var $cmp36=(($43)|0)==(($44)|0);
      if ($cmp36) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $45=$newfacet_addr;
      var $46=$ridge;
      var $bottom38=(($46+8)|0);
      HEAP32[(($bottom38)>>2)]=$45;
      var $47=$ridge;
      var $top39=(($47+4)|0);
      var $48=HEAP32[(($top39)>>2)];
      $neighbor=$48;
      label = 30; break;
    case 25: 
      var $49=$ridge;
      var $top41=(($49+4)|0);
      var $50=HEAP32[(($top41)>>2)];
      var $51=$newfacet_addr;
      var $cmp42=(($50)|0)==(($51)|0);
      if ($cmp42) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $52=$ridge;
      var $bottom43=(($52+8)|0);
      var $53=HEAP32[(($bottom43)>>2)];
      var $54=$newfacet_addr;
      var $cmp44=(($53)|0)==(($54)|0);
      if ($cmp44) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $55=$newfacet_addr;
      var $ridges46=(($55+52)|0);
      var $56=$ridge;
      var $57=$56;
      _qh_setappend($ridges46, $57);
      var $58=$numold;
      var $inc=((($58)+(1))|0);
      $numold=$inc;
      label = 20; break;
    case 28: 
      var $59=HEAP32[((((5248924)|0))>>2)];
      var $60=$ridge;
      var $61=$60;
      var $bf_field_offs=(($61+12)|0);
      var $62=$bf_field_offs;
      var $63=HEAP32[(($62)>>2)];
      var $bf_clear=$63 & 16777215;
      _qh_fprintf($59, 6098, ((5256640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      var $64=$ridge;
      _qh_errexit(5, 0, $64);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $65=$neighbor;
      var $66=$newfacet_addr;
      var $cmp51=(($65)|0)==(($66)|0);
      if ($cmp51) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $67=$ridge;
      var $vertices=(($67)|0);
      _qh_setfree($vertices);
      $freelistp=0;
      var $68=$ridge;
      var $69=$68;
      _qh_memfree($69, 16);
      var $70=$numold;
      var $inc53=((($70)+(1))|0);
      $numold=$inc53;
      label = 37; break;
    case 33: 
      var $71=$neighbor;
      var $visitid55=(($71+68)|0);
      var $72=HEAP32[(($visitid55)>>2)];
      var $73=$samevisitid;
      var $cmp56=(($72)|0)==(($73)|0);
      if ($cmp56) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $74=$neighbor;
      var $ridges58=(($74+52)|0);
      var $75=HEAP32[(($ridges58)>>2)];
      var $76=$ridge;
      var $77=$76;
      var $call=_qh_setdel($75, $77);
      var $78=$ridge;
      var $vertices59=(($78)|0);
      _qh_setfree($vertices59);
      $freelistp=0;
      var $79=$ridge;
      var $80=$79;
      _qh_memfree($80, 16);
      var $81=$numold;
      var $inc60=((($81)+(1))|0);
      $numold=$inc60;
      label = 36; break;
    case 35: 
      var $82=$newfacet_addr;
      var $ridges62=(($82+52)|0);
      var $83=$ridge;
      var $84=$83;
      _qh_setappend($ridges62, $84);
      var $85=$numold;
      var $inc63=((($85)+(1))|0);
      $numold=$inc63;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 20; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $86=$same;
      var $ridges68=(($86+52)|0);
      var $87=HEAP32[(($ridges68)>>2)];
      var $tobool69=(($87)|0)!=0;
      if ($tobool69) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $88=$same;
      var $ridges71=(($88+52)|0);
      var $89=HEAP32[(($ridges71)>>2)];
      _qh_settruncate($89, 0);
      label = 41; break;
    case 41: 
      var $90=$same;
      var $91=$90;
      var $bf_field_offs73=(($91+76)|0);
      var $92=$bf_field_offs73;
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 >>> 13;
      var $bf_clear74=$94 & 1;
      var $tobool75=(($bf_clear74)|0)!=0;
      if ($tobool75) { label = 43; break; } else { label = 42; break; }
    case 42: 
      label = 56; break;
    case 43: 
      $neighbor=0;
      var $95=$same;
      var $neighbors=(($95+56)|0);
      var $96=HEAP32[(($neighbors)>>2)];
      var $tobool78=(($96)|0)!=0;
      if ($tobool78) { label = 44; break; } else { label = 55; break; }
    case 44: 
      $neighbor_i=0;
      var $97=$same;
      var $neighbors80=(($97+56)|0);
      var $98=HEAP32[(($neighbors80)>>2)];
      var $e81=(($98+4)|0);
      var $arrayidx82=(($e81)|0);
      var $p83=$arrayidx82;
      var $99=HEAP32[(($p83)>>2)];
      var $100=$99;
      $neighbor=$100;
      var $101=$same;
      var $neighbors84=(($101+56)|0);
      var $102=HEAP32[(($neighbors84)>>2)];
      var $call85=_qh_setsize($102);
      $neighbor_n=$call85;
      label = 45; break;
    case 45: 
      var $103=$neighbor_i;
      var $104=$neighbor_n;
      var $cmp87=(($103)|0) < (($104)|0);
      if ($cmp87) { label = 46; break; } else { label = 54; break; }
    case 46: 
      var $105=$neighbor;
      var $visitid89=(($105+68)|0);
      var $106=HEAP32[(($visitid89)>>2)];
      var $107=$samevisitid;
      var $cmp90=(($106)|0)!=(($107)|0);
      if ($cmp90) { label = 47; break; } else { label = 52; break; }
    case 47: 
      var $108=$neighbor;
      var $109=$108;
      var $bf_field_offs91=(($109+76)|0);
      var $110=$bf_field_offs91;
      var $111=HEAP32[(($110)>>2)];
      var $112=$111 >>> 13;
      var $bf_clear92=$112 & 1;
      var $tobool93=(($bf_clear92)|0)!=0;
      if ($tobool93) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $call95=_qh_newridge();
      $ridge=$call95;
      var $113=$same;
      var $vertices96=(($113+48)|0);
      var $114=HEAP32[(($vertices96)>>2)];
      var $115=HEAP32[((((5247508)|0))>>2)];
      var $116=$neighbor_i;
      var $call97=_qh_setnew_delnthsorted($114, $115, $116, 0);
      var $117=$ridge;
      var $vertices98=(($117)|0);
      HEAP32[(($vertices98)>>2)]=$call97;
      var $118=$same;
      var $119=$118;
      var $bf_field_offs99=(($119+76)|0);
      var $120=$bf_field_offs99;
      var $121=HEAP32[(($120)>>2)];
      var $122=$121 >>> 12;
      var $bf_clear100=$122 & 1;
      var $123=$neighbor_i;
      var $and=$123 & 1;
      var $xor=$bf_clear100 ^ $and;
      $toporient=$xor;
      var $124=$toporient;
      var $tobool101=(($124)|0)!=0;
      if ($tobool101) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $125=$newfacet_addr;
      var $126=$ridge;
      var $top103=(($126+4)|0);
      HEAP32[(($top103)>>2)]=$125;
      var $127=$neighbor;
      var $128=$ridge;
      var $bottom104=(($128+8)|0);
      HEAP32[(($bottom104)>>2)]=$127;
      label = 51; break;
    case 50: 
      var $129=$neighbor;
      var $130=$ridge;
      var $top106=(($130+4)|0);
      HEAP32[(($top106)>>2)]=$129;
      var $131=$newfacet_addr;
      var $132=$ridge;
      var $bottom107=(($132+8)|0);
      HEAP32[(($bottom107)>>2)]=$131;
      label = 51; break;
    case 51: 
      var $133=$newfacet_addr;
      var $ridges109=(($133+52)|0);
      var $134=$ridge;
      var $135=$134;
      _qh_setappend($ridges109, $135);
      var $136=$neighbor;
      var $ridges110=(($136+52)|0);
      var $137=$ridge;
      var $138=$137;
      _qh_setappend($ridges110, $138);
      var $139=$numnew;
      var $inc111=((($139)+(1))|0);
      $numnew=$inc111;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $140=$neighbor_i;
      var $inc113=((($140)+(1))|0);
      $neighbor_i=$inc113;
      var $141=$same;
      var $neighbors114=(($141+56)|0);
      var $142=HEAP32[(($neighbors114)>>2)];
      var $e115=(($142+4)|0);
      var $arrayidx116=(($e115+($inc113<<2))|0);
      var $p117=$arrayidx116;
      var $143=HEAP32[(($p117)>>2)];
      var $144=$143;
      $neighbor=$144;
      label = 45; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $145=$same;
      var $146=$samecycle_addr;
      var $cmp121=(($145)|0)==(($146)|0);
      if ($cmp121) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $cond127 = 0;label = 59; break;
    case 58: 
      var $147=$same;
      var $f124=(($147+28)|0);
      var $samecycle125=$f124;
      var $148=HEAP32[(($samecycle125)>>2)];
      var $cond127 = $148;label = 59; break;
    case 59: 
      var $cond127;
      $same=$cond127;
      label = 17; break;
    case 60: 
      var $149=HEAP32[((((5247040)|0))>>2)];
      var $cmp129=(($149)|0) >= 2;
      if ($cmp129) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $150=HEAP32[((((5248924)|0))>>2)];
      var $151=$numold;
      var $152=$numnew;
      _qh_fprintf($150, 2033, ((5256284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$151,HEAP32[(((tempInt)+(4))>>2)]=$152,tempInt));
      label = 62; break;
    case 62: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle_ridges["X"]=1;

function _qh_mergecycle_vneighbors($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $newfacet_addr;
      var $neighbor;
      var $neighborp;
      var $mergeid;
      var $vertex;
      var $vertexp;
      var $apex;
      var $vertices=__stackBase__;
      $samecycle_addr=$samecycle;
      $newfacet_addr=$newfacet;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 4035, ((5255972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5249156)|0))>>2)];
      var $sub=((($2)-(1))|0);
      $mergeid=$sub;
      var $3=$mergeid;
      var $4=$newfacet_addr;
      var $visitid=(($4+68)|0);
      HEAP32[(($visitid)>>2)]=$3;
      var $5=$samecycle_addr;
      var $call=_qh_basevertices($5);
      HEAP32[(($vertices)>>2)]=$call;
      var $6=$samecycle_addr;
      var $vertices1=(($6+48)|0);
      var $7=HEAP32[(($vertices1)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      $apex=$9;
      var $10=$apex;
      var $11=$10;
      _qh_setappend($vertices, $11);
      $vertex=0;
      var $12=HEAP32[(($vertices)>>2)];
      var $tobool=(($12)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $13=HEAP32[(($vertices)>>2)];
      var $e3=(($13+4)|0);
      var $arrayidx4=(($e3)|0);
      var $p5=$arrayidx4;
      var $14=$p5;
      $vertexp=$14;
      label = 6; break;
    case 6: 
      var $15=$vertexp;
      var $incdec_ptr=(($15+4)|0);
      $vertexp=$incdec_ptr;
      var $16=HEAP32[(($15)>>2)];
      $vertex=$16;
      var $tobool6=(($16)|0)!=0;
      if ($tobool6) { label = 7; break; } else { label = 19; break; }
    case 7: 
      var $17=$vertex;
      var $18=$17;
      var $bf_field_offs=(($18+20)|0);
      var $19=$bf_field_offs;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & -536870913;
      var $22=$21 | 536870912;
      HEAP32[(($19)>>2)]=$22;
      $neighbor=0;
      var $23=$vertex;
      var $neighbors=(($23+12)|0);
      var $24=HEAP32[(($neighbors)>>2)];
      var $tobool7=(($24)|0)!=0;
      if ($tobool7) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $25=$vertex;
      var $neighbors9=(($25+12)|0);
      var $26=HEAP32[(($neighbors9)>>2)];
      var $e10=(($26+4)|0);
      var $arrayidx11=(($e10)|0);
      var $p12=$arrayidx11;
      var $27=$p12;
      $neighborp=$27;
      label = 9; break;
    case 9: 
      var $28=$neighborp;
      var $incdec_ptr14=(($28+4)|0);
      $neighborp=$incdec_ptr14;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool15=(($29)|0)!=0;
      if ($tobool15) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $30=$neighbor;
      var $visitid17=(($30+68)|0);
      var $31=HEAP32[(($visitid17)>>2)];
      var $32=$mergeid;
      var $cmp18=(($31)|0)==(($32)|0);
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $33=$neighborp;
      var $arrayidx20=((($33)-(4))|0);
      HEAP32[(($arrayidx20)>>2)]=0;
      label = 12; break;
    case 12: 
      label = 9; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $34=$vertex;
      var $neighbors23=(($34+12)|0);
      var $35=HEAP32[(($neighbors23)>>2)];
      _qh_setcompact($35);
      var $36=$vertex;
      var $neighbors24=(($36+12)|0);
      var $37=$newfacet_addr;
      var $38=$37;
      _qh_setappend($neighbors24, $38);
      var $39=$vertex;
      var $neighbors25=(($39+12)|0);
      var $40=HEAP32[(($neighbors25)>>2)];
      var $e26=(($40+4)|0);
      var $arrayidx27=(($e26+4)|0);
      var $p28=$arrayidx27;
      var $41=HEAP32[(($p28)>>2)];
      var $tobool29=(($41)|0)!=0;
      if ($tobool29) { label = 18; break; } else { label = 15; break; }
    case 15: 
      var $42=HEAP32[(((((5243324)|0)))>>2)];
      var $inc=((($42)+(1))|0);
      HEAP32[(((((5243324)|0)))>>2)]=$inc;
      var $43=HEAP32[((((5247040)|0))>>2)];
      var $cmp31=(($43)|0) >= 2;
      if ($cmp31) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $44=HEAP32[((((5248924)|0))>>2)];
      var $45=$vertex;
      var $46=$45;
      var $bf_field_offs33=(($46+20)|0);
      var $47=$bf_field_offs33;
      var $48=HEAP32[(($47)>>2)];
      var $bf_clear=$48 & 16777215;
      var $49=$samecycle_addr;
      var $id=(($49+72)|0);
      var $50=HEAP32[(($id)>>2)];
      var $51=$newfacet_addr;
      var $id34=(($51+72)|0);
      var $52=HEAP32[(($id34)>>2)];
      _qh_fprintf($44, 2034, ((5255684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,HEAP32[(((tempInt)+(4))>>2)]=$50,HEAP32[(((tempInt)+(8))>>2)]=$52,tempInt));
      label = 17; break;
    case 17: 
      var $53=$newfacet_addr;
      var $vertices36=(($53+48)|0);
      var $54=HEAP32[(($vertices36)>>2)];
      var $55=$vertex;
      var $56=$55;
      var $call37=_qh_setdelsorted($54, $56);
      var $57=$vertex;
      var $58=$57;
      var $bf_field_offs38=(($58+20)|0);
      var $59=$bf_field_offs38;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60 & -1073741825;
      var $62=$61 | 1073741824;
      HEAP32[(($59)>>2)]=$62;
      var $63=$vertex;
      var $64=$63;
      _qh_setappend(((5249188)|0), $64);
      label = 18; break;
    case 18: 
      label = 6; break;
    case 19: 
      label = 20; break;
    case 20: 
      _qh_settempfree($vertices);
      var $65=HEAP32[((((5247040)|0))>>2)];
      var $cmp42=(($65)|0) >= 3;
      if ($cmp42) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $66=HEAP32[((((5248924)|0))>>2)];
      var $67=$samecycle_addr;
      var $id44=(($67+72)|0);
      var $68=HEAP32[(($id44)>>2)];
      var $69=$newfacet_addr;
      var $id45=(($69+72)|0);
      var $70=HEAP32[(($id45)>>2)];
      _qh_fprintf($66, 3005, ((5255448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$68,HEAP32[(((tempInt)+(4))>>2)]=$70,tempInt));
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle_vneighbors["X"]=1;

function _qh_newvertices($vertices) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $vertex;
      var $vertexp;
      $vertices_addr=$vertices;
      $vertex=0;
      var $0=$vertices_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$vertices_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $vertexp=$2;
      label = 4; break;
    case 4: 
      var $3=$vertexp;
      var $incdec_ptr=(($3+4)|0);
      $vertexp=$incdec_ptr;
      var $4=HEAP32[(($3)>>2)];
      $vertex=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$vertex;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 31;
      var $bf_clear=$9 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $10=$vertex;
      _qh_removevertex($10);
      var $11=$vertex;
      _qh_appendvertex($11);
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_mergecycle_facets($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $samecycle_addr;
      var $newfacet_addr;
      var $same;
      var $next;
      $samecycle_addr=$samecycle;
      $newfacet_addr=$newfacet;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 4030, ((5258760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=$newfacet_addr;
      _qh_removefacet($2);
      var $3=$newfacet_addr;
      _qh_appendfacet($3);
      var $4=$newfacet_addr;
      var $5=$4;
      var $bf_field_offs=(($5+76)|0);
      var $6=$bf_field_offs;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & -1025;
      var $9=$8 | 1024;
      HEAP32[(($6)>>2)]=$9;
      var $10=$newfacet_addr;
      var $11=$10;
      var $bf_field_offs1=(($11+76)|0);
      var $12=$bf_field_offs1;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -8193;
      HEAP32[(($12)>>2)]=$14;
      var $15=$newfacet_addr;
      var $16=$15;
      var $bf_field_offs2=(($16+76)|0);
      var $17=$bf_field_offs2;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 & -536870913;
      var $20=$19 | 536870912;
      HEAP32[(($17)>>2)]=$20;
      var $21=$samecycle_addr;
      var $f=(($21+28)|0);
      var $samecycle3=$f;
      var $22=HEAP32[(($samecycle3)>>2)];
      $same=$22;
      label = 5; break;
    case 5: 
      var $23=$same;
      var $tobool=(($23)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $24=$same;
      var $f4=(($24+28)|0);
      var $samecycle5=$f4;
      var $25=HEAP32[(($samecycle5)>>2)];
      $next=$25;
      var $26=$same;
      var $27=$newfacet_addr;
      _qh_willdelete($26, $27);
      label = 7; break;
    case 7: 
      var $28=$same;
      var $29=$samecycle_addr;
      var $cmp6=(($28)|0)==(($29)|0);
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $cond = 0;label = 10; break;
    case 9: 
      var $30=$next;
      var $cond = $30;label = 10; break;
    case 10: 
      var $cond;
      $same=$cond;
      label = 5; break;
    case 11: 
      var $31=$newfacet_addr;
      var $center=(($31+36)|0);
      var $32=HEAP32[(($center)>>2)];
      var $tobool7=(($32)|0)!=0;
      if ($tobool7) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $33=$newfacet_addr;
      var $vertices=(($33+48)|0);
      var $34=HEAP32[(($vertices)>>2)];
      var $call=_qh_setsize($34);
      var $35=HEAP32[((((5247508)|0))>>2)];
      var $add=((($35)+(5))|0);
      var $cmp8=(($call)|0) <= (($add)|0);
      if ($cmp8) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $36=$newfacet_addr;
      var $center10=(($36+36)|0);
      var $37=HEAP32[(($center10)>>2)];
      var $38=$37;
      var $39=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($38, $39);
      var $40=$newfacet_addr;
      var $center11=(($40+36)|0);
      HEAP32[(($center11)>>2)]=0;
      label = 14; break;
    case 14: 
      var $41=HEAP32[((((5247040)|0))>>2)];
      var $cmp13=(($41)|0) >= 3;
      if ($cmp13) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=HEAP32[((((5248924)|0))>>2)];
      var $43=$samecycle_addr;
      var $id=(($43+72)|0);
      var $44=HEAP32[(($id)>>2)];
      var $45=$newfacet_addr;
      var $id15=(($45+72)|0);
      var $46=HEAP32[(($id15)>>2)];
      _qh_fprintf($42, 3004, ((5258520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$44,HEAP32[(((tempInt)+(4))>>2)]=$46,tempInt));
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergecycle_facets["X"]=1;

function _qh_tracemerge($facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $waserror=__stackBase__;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      HEAP32[(($waserror)>>2)]=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$facet2_addr;
      _qh_errprint(((5299324)|0), $1, 0, 0, 0);
      label = 4; break;
    case 4: 
      var $2=$facet2_addr;
      var $3=HEAP32[((((5248972)|0))>>2)];
      var $cmp1=(($2)|0)==(($3)|0);
      if ($cmp1) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $4=HEAP32[((((5248980)|0))>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $5=HEAP32[((((5248980)|0))>>2)];
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 31;
      var $bf_clear=$9 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=$facet1_addr;
      var $id=(($11+72)|0);
      var $12=HEAP32[(($id)>>2)];
      var $13=$facet2_addr;
      var $id4=(($13+72)|0);
      var $14=HEAP32[(($id4)>>2)];
      var $15=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($10, 8085, ((5299144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$12,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt));
      var $16=$facet2_addr;
      var $17=HEAP32[((((5248972)|0))>>2)];
      var $cmp5=(($16)|0)!=(($17)|0);
      if ($cmp5) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $18=HEAP32[((((5248972)|0))>>2)];
      var $19=HEAP32[((((5248980)|0))>>2)];
      var $tobool7=(($19)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $20=HEAP32[((((5248980)|0))>>2)];
      var $neighbors=(($20+12)|0);
      var $21=HEAP32[(($neighbors)>>2)];
      var $tobool9=(($21)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $22=HEAP32[((((5248980)|0))>>2)];
      var $neighbors10=(($22+12)|0);
      var $23=HEAP32[(($neighbors10)>>2)];
      var $e=(($23+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $24=HEAP32[(($p)>>2)];
      var $25=$24;
      var $cond = $25;label = 12; break;
    case 11: 
      var $cond = 0;label = 12; break;
    case 12: 
      var $cond;
      var $26=HEAP32[((((5248980)|0))>>2)];
      _qh_errprint(((5250116)|0), $18, $cond, 0, $26);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $27=HEAP32[((((5248980)|0))>>2)];
      var $tobool13=(($27)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $28=HEAP32[((((5248980)|0))>>2)];
      var $29=$28;
      var $bf_field_offs15=(($29+20)|0);
      var $30=$bf_field_offs15;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 >>> 30;
      var $bf_clear16=$32 & 1;
      var $tobool17=(($bf_clear16)|0)!=0;
      if ($tobool17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $33=HEAP32[((((5248924)|0))>>2)];
      var $34=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($33, 8086, ((5298948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$34,tempInt));
      label = 18; break;
    case 17: 
      var $35=HEAP32[((((5248980)|0))>>2)];
      _qh_checkvertex($35);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $36=HEAP32[((((5248972)|0))>>2)];
      var $tobool21=(($36)|0)!=0;
      if ($tobool21) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $37=HEAP32[((((5248972)|0))>>2)];
      _qh_checkfacet($37, 1, $waserror);
      var $38=HEAP32[(($waserror)>>2)];
      var $tobool23=(($38)|0)!=0;
      if ($tobool23) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $39=HEAP32[((((5248972)|0))>>2)];
      _qh_errexit(5, $39, 0);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $40=HEAP32[((((5246980)|0))>>2)];
      var $tobool27=(($40)|0)!=0;
      if ($tobool27) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $41=HEAP32[((((5247040)|0))>>2)];
      var $cmp29=(($41)|0) >= 4;
      if ($cmp29) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $42=$facet2_addr;
      _qh_checkfacet($42, 1, $waserror);
      var $43=HEAP32[(($waserror)>>2)];
      var $tobool31=(($43)|0)!=0;
      if ($tobool31) { label = 26; break; } else { label = 27; break; }
    case 26: 
      _qh_errexit(5, 0, 0);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_tracemerge["X"]=1;

function _qh_updatetested($facet1, $facet2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $ridge;
      var $ridgep;
      var $size;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=$facet2_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 & -134217729;
      HEAP32[(($2)>>2)]=$4;
      $ridge=0;
      var $5=$facet1_addr;
      var $ridges=(($5+52)|0);
      var $6=HEAP32[(($ridges)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $7=$facet1_addr;
      var $ridges1=(($7+52)|0);
      var $8=HEAP32[(($ridges1)>>2)];
      var $e=(($8+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $9=$p;
      $ridgep=$9;
      label = 4; break;
    case 4: 
      var $10=$ridgep;
      var $incdec_ptr=(($10+4)|0);
      $ridgep=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $ridge=$11;
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$ridge;
      var $13=$12;
      var $bf_field_offs3=(($13+12)|0);
      var $14=$bf_field_offs3;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -33554433;
      HEAP32[(($14)>>2)]=$16;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $17=$facet2_addr;
      var $center=(($17+36)|0);
      var $18=HEAP32[(($center)>>2)];
      var $tobool4=(($18)|0)!=0;
      if ($tobool4) { label = 9; break; } else { label = 8; break; }
    case 8: 
      label = 26; break;
    case 9: 
      var $19=$facet2_addr;
      var $vertices=(($19+48)|0);
      var $20=HEAP32[(($vertices)>>2)];
      var $call=_qh_setsize($20);
      $size=$call;
      var $21=$facet2_addr;
      var $22=$21;
      var $bf_field_offs7=(($22+76)|0);
      var $23=$bf_field_offs7;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 28;
      var $bf_clear=$25 & 1;
      var $tobool8=(($bf_clear)|0)!=0;
      if ($tobool8) { label = 13; break; } else { label = 10; break; }
    case 10: 
      var $26=$size;
      var $27=HEAP32[((((5247508)|0))>>2)];
      var $add=((($27)+(5))|0);
      var $cmp=(($26)|0) > (($add)|0);
      if ($cmp) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=$facet2_addr;
      var $29=$28;
      var $bf_field_offs11=(($29+76)|0);
      var $30=$bf_field_offs11;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & -268435457;
      var $33=$32 | 268435456;
      HEAP32[(($30)>>2)]=$33;
      var $34=HEAP32[(((((5244796)|0)))>>2)];
      var $inc=((($34)+(1))|0);
      HEAP32[(((((5244796)|0)))>>2)]=$inc;
      label = 12; break;
    case 12: 
      label = 19; break;
    case 13: 
      var $35=$size;
      var $36=HEAP32[((((5247508)|0))>>2)];
      var $add13=((($36)+(5))|0);
      var $cmp14=(($35)|0) <= (($add13)|0);
      if ($cmp14) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $37=$size;
      var $38=HEAP32[((((5247508)|0))>>2)];
      var $cmp16=(($37)|0)==(($38)|0);
      if ($cmp16) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $39=HEAP32[((((5249124)|0))>>2)];
      var $tobool17=(($39)|0)!=0;
      if ($tobool17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $40=$facet2_addr;
      var $41=$40;
      var $bf_field_offs19=(($41+76)|0);
      var $42=$bf_field_offs19;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & -268435457;
      HEAP32[(($42)>>2)]=$44;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $45=$facet2_addr;
      var $46=$45;
      var $bf_field_offs23=(($46+76)|0);
      var $47=$bf_field_offs23;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 28;
      var $bf_clear24=$49 & 1;
      var $tobool25=(($bf_clear24)|0)!=0;
      if ($tobool25) { label = 26; break; } else { label = 20; break; }
    case 20: 
      var $50=$facet2_addr;
      var $center27=(($50+36)|0);
      var $51=HEAP32[(($center27)>>2)];
      var $52=$51;
      var $53=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($52, $53);
      var $54=$facet2_addr;
      var $center28=(($54+36)|0);
      HEAP32[(($center28)>>2)]=0;
      $ridge=0;
      var $55=$facet2_addr;
      var $ridges29=(($55+52)|0);
      var $56=HEAP32[(($ridges29)>>2)];
      var $tobool30=(($56)|0)!=0;
      if ($tobool30) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $57=$facet2_addr;
      var $ridges32=(($57+52)|0);
      var $58=HEAP32[(($ridges32)>>2)];
      var $e33=(($58+4)|0);
      var $arrayidx34=(($e33)|0);
      var $p35=$arrayidx34;
      var $59=$p35;
      $ridgep=$59;
      label = 22; break;
    case 22: 
      var $60=$ridgep;
      var $incdec_ptr37=(($60+4)|0);
      $ridgep=$incdec_ptr37;
      var $61=HEAP32[(($60)>>2)];
      $ridge=$61;
      var $tobool38=(($61)|0)!=0;
      if ($tobool38) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $62=$ridge;
      var $63=$62;
      var $bf_field_offs40=(($63+12)|0);
      var $64=$bf_field_offs40;
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 & -33554433;
      HEAP32[(($64)>>2)]=$66;
      label = 22; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_updatetested["X"]=1;

function _qh_mergesimplex($facet1, $facet2, $mergeapex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $mergeapex_addr;
      var $vertex;
      var $vertexp;
      var $apex;
      var $ridge;
      var $ridgep;
      var $issubset;
      var $vertex_i;
      var $vertex_n;
      var $neighbor;
      var $neighborp;
      var $otherfacet;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      $mergeapex_addr=$mergeapex;
      $issubset=0;
      $vertex_i=-1;
      var $0=$mergeapex_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$facet2_addr;
      var $2=$1;
      var $bf_field_offs=(($2+76)|0);
      var $3=$bf_field_offs;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 10;
      var $bf_clear=$5 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$facet2_addr;
      var $vertices=(($6+48)|0);
      var $7=HEAP32[(($vertices)>>2)];
      _qh_newvertices($7);
      label = 5; break;
    case 5: 
      var $8=$facet1_addr;
      var $vertices3=(($8+48)|0);
      var $9=HEAP32[(($vertices3)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=HEAP32[(($p)>>2)];
      var $11=$10;
      $apex=$11;
      var $12=$facet2_addr;
      var $vertices4=(($12+48)|0);
      var $13=HEAP32[(($vertices4)>>2)];
      var $e5=(($13+4)|0);
      var $arrayidx6=(($e5)|0);
      var $p7=$arrayidx6;
      var $14=HEAP32[(($p7)>>2)];
      var $15=$14;
      var $16=$apex;
      var $cmp=(($15)|0)!=(($16)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$facet2_addr;
      var $vertices9=(($17+48)|0);
      var $18=$apex;
      var $19=$18;
      _qh_setaddnth($vertices9, 0, $19);
      label = 8; break;
    case 7: 
      $issubset=1;
      label = 8; break;
    case 8: 
      label = 57; break;
    case 9: 
      var $20=HEAP32[(((((5244036)|0)))>>2)];
      var $inc=((($20)+(1))|0);
      HEAP32[(((((5244036)|0)))>>2)]=$inc;
      $vertex=0;
      var $21=$facet1_addr;
      var $vertices12=(($21+48)|0);
      var $22=HEAP32[(($vertices12)>>2)];
      var $tobool13=(($22)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $23=$facet1_addr;
      var $vertices15=(($23+48)|0);
      var $24=HEAP32[(($vertices15)>>2)];
      var $e16=(($24+4)|0);
      var $arrayidx17=(($e16)|0);
      var $p18=$arrayidx17;
      var $25=$p18;
      $vertexp=$25;
      label = 11; break;
    case 11: 
      var $26=$vertexp;
      var $incdec_ptr=(($26+4)|0);
      $vertexp=$incdec_ptr;
      var $27=HEAP32[(($26)>>2)];
      $vertex=$27;
      var $tobool19=(($27)|0)!=0;
      if ($tobool19) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $28=$vertex;
      var $29=$28;
      var $bf_field_offs20=(($29+20)|0);
      var $30=$bf_field_offs20;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & -268435457;
      HEAP32[(($30)>>2)]=$32;
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      $ridge=0;
      var $33=$facet1_addr;
      var $ridges=(($33+52)|0);
      var $34=HEAP32[(($ridges)>>2)];
      var $tobool22=(($34)|0)!=0;
      if ($tobool22) { label = 15; break; } else { label = 29; break; }
    case 15: 
      var $35=$facet1_addr;
      var $ridges24=(($35+52)|0);
      var $36=HEAP32[(($ridges24)>>2)];
      var $e25=(($36+4)|0);
      var $arrayidx26=(($e25)|0);
      var $p27=$arrayidx26;
      var $37=$p27;
      $ridgep=$37;
      label = 16; break;
    case 16: 
      var $38=$ridgep;
      var $incdec_ptr29=(($38+4)|0);
      $ridgep=$incdec_ptr29;
      var $39=HEAP32[(($38)>>2)];
      $ridge=$39;
      var $tobool30=(($39)|0)!=0;
      if ($tobool30) { label = 17; break; } else { label = 28; break; }
    case 17: 
      var $40=$ridge;
      var $top=(($40+4)|0);
      var $41=HEAP32[(($top)>>2)];
      var $42=$facet1_addr;
      var $cmp32=(($41)|0)==(($42)|0);
      if ($cmp32) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $43=$ridge;
      var $bottom=(($43+8)|0);
      var $44=HEAP32[(($bottom)>>2)];
      var $cond = $44;label = 20; break;
    case 19: 
      var $45=$ridge;
      var $top33=(($45+4)|0);
      var $46=HEAP32[(($top33)>>2)];
      var $cond = $46;label = 20; break;
    case 20: 
      var $cond;
      var $47=$facet2_addr;
      var $cmp34=(($cond)|0)==(($47)|0);
      if ($cmp34) { label = 21; break; } else { label = 27; break; }
    case 21: 
      $vertex=0;
      var $48=$ridge;
      var $vertices36=(($48)|0);
      var $49=HEAP32[(($vertices36)>>2)];
      var $tobool37=(($49)|0)!=0;
      if ($tobool37) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $50=$ridge;
      var $vertices39=(($50)|0);
      var $51=HEAP32[(($vertices39)>>2)];
      var $e40=(($51+4)|0);
      var $arrayidx41=(($e40)|0);
      var $p42=$arrayidx41;
      var $52=$p42;
      $vertexp=$52;
      label = 23; break;
    case 23: 
      var $53=$vertexp;
      var $incdec_ptr44=(($53+4)|0);
      $vertexp=$incdec_ptr44;
      var $54=HEAP32[(($53)>>2)];
      $vertex=$54;
      var $tobool45=(($54)|0)!=0;
      if ($tobool45) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$vertex;
      var $56=$55;
      var $bf_field_offs47=(($56+20)|0);
      var $57=$bf_field_offs47;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & -268435457;
      var $60=$59 | 268435456;
      HEAP32[(($57)>>2)]=$60;
      var $61=$vertex;
      var $62=$61;
      var $bf_field_offs48=(($62+20)|0);
      var $63=$bf_field_offs48;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & -536870913;
      var $66=$65 | 536870912;
      HEAP32[(($63)>>2)]=$66;
      label = 23; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      label = 16; break;
    case 28: 
      label = 29; break;
    case 29: 
      $vertex=0;
      var $67=$facet1_addr;
      var $vertices54=(($67+48)|0);
      var $68=HEAP32[(($vertices54)>>2)];
      var $tobool55=(($68)|0)!=0;
      if ($tobool55) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $69=$facet1_addr;
      var $vertices57=(($69+48)|0);
      var $70=HEAP32[(($vertices57)>>2)];
      var $e58=(($70+4)|0);
      var $arrayidx59=(($e58)|0);
      var $p60=$arrayidx59;
      var $71=$p60;
      $vertexp=$71;
      label = 31; break;
    case 31: 
      var $72=$vertexp;
      var $incdec_ptr62=(($72+4)|0);
      $vertexp=$incdec_ptr62;
      var $73=HEAP32[(($72)>>2)];
      $vertex=$73;
      var $tobool63=(($73)|0)!=0;
      if ($tobool63) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $74=$vertex;
      var $75=$74;
      var $bf_field_offs65=(($75+20)|0);
      var $76=$bf_field_offs65;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 >>> 28;
      var $bf_clear66=$78 & 1;
      var $tobool67=(($bf_clear66)|0)!=0;
      if ($tobool67) { label = 34; break; } else { label = 33; break; }
    case 33: 
      label = 35; break;
    case 34: 
      label = 31; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $79=$vertex;
      $apex=$79;
      var $80=HEAP32[((((5247040)|0))>>2)];
      var $cmp72=(($80)|0) >= 4;
      if ($cmp72) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $81=HEAP32[((((5248924)|0))>>2)];
      var $82=$apex;
      var $83=$82;
      var $bf_field_offs74=(($83+20)|0);
      var $84=$bf_field_offs74;
      var $85=HEAP32[(($84)>>2)];
      var $bf_clear75=$85 & 16777215;
      var $86=$facet1_addr;
      var $id=(($86+72)|0);
      var $87=HEAP32[(($id)>>2)];
      var $88=$facet2_addr;
      var $id76=(($88+72)|0);
      var $89=HEAP32[(($id76)>>2)];
      _qh_fprintf($81, 4039, ((5252020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear75,HEAP32[(((tempInt)+(4))>>2)]=$87,HEAP32[(((tempInt)+(8))>>2)]=$89,tempInt));
      label = 38; break;
    case 38: 
      $vertex=0;
      var $90=$facet2_addr;
      var $vertices78=(($90+48)|0);
      var $91=HEAP32[(($vertices78)>>2)];
      var $tobool79=(($91)|0)!=0;
      if ($tobool79) { label = 39; break; } else { label = 49; break; }
    case 39: 
      $vertex_i=0;
      var $92=$facet2_addr;
      var $vertices81=(($92+48)|0);
      var $93=HEAP32[(($vertices81)>>2)];
      var $e82=(($93+4)|0);
      var $arrayidx83=(($e82)|0);
      var $p84=$arrayidx83;
      var $94=HEAP32[(($p84)>>2)];
      var $95=$94;
      $vertex=$95;
      var $96=$facet2_addr;
      var $vertices85=(($96+48)|0);
      var $97=HEAP32[(($vertices85)>>2)];
      var $call=_qh_setsize($97);
      $vertex_n=$call;
      label = 40; break;
    case 40: 
      var $98=$vertex_i;
      var $99=$vertex_n;
      var $cmp87=(($98)|0) < (($99)|0);
      if ($cmp87) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $100=$vertex;
      var $101=$100;
      var $bf_field_offs89=(($101+20)|0);
      var $102=$bf_field_offs89;
      var $103=HEAP32[(($102)>>2)];
      var $bf_clear90=$103 & 16777215;
      var $104=$apex;
      var $105=$104;
      var $bf_field_offs91=(($105+20)|0);
      var $106=$bf_field_offs91;
      var $107=HEAP32[(($106)>>2)];
      var $bf_clear92=$107 & 16777215;
      var $cmp93=(($bf_clear90)|0) < (($bf_clear92)|0);
      if ($cmp93) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 48; break;
    case 43: 
      var $108=$vertex;
      var $109=$108;
      var $bf_field_offs96=(($109+20)|0);
      var $110=$bf_field_offs96;
      var $111=HEAP32[(($110)>>2)];
      var $bf_clear97=$111 & 16777215;
      var $112=$apex;
      var $113=$112;
      var $bf_field_offs98=(($113+20)|0);
      var $114=$bf_field_offs98;
      var $115=HEAP32[(($114)>>2)];
      var $bf_clear99=$115 & 16777215;
      var $cmp100=(($bf_clear97)|0)==(($bf_clear99)|0);
      if ($cmp100) { label = 44; break; } else { label = 45; break; }
    case 44: 
      $issubset=1;
      label = 48; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $116=$vertex_i;
      var $inc104=((($116)+(1))|0);
      $vertex_i=$inc104;
      var $117=$facet2_addr;
      var $vertices105=(($117+48)|0);
      var $118=HEAP32[(($vertices105)>>2)];
      var $e106=(($118+4)|0);
      var $arrayidx107=(($e106+($inc104<<2))|0);
      var $p108=$arrayidx107;
      var $119=HEAP32[(($p108)>>2)];
      var $120=$119;
      $vertex=$120;
      label = 40; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $121=$issubset;
      var $tobool111=(($121)|0)!=0;
      if ($tobool111) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $122=$facet2_addr;
      var $vertices113=(($122+48)|0);
      var $123=$vertex_i;
      var $124=$apex;
      var $125=$124;
      _qh_setaddnth($vertices113, $123, $125);
      label = 51; break;
    case 51: 
      var $126=$facet2_addr;
      var $127=$126;
      var $bf_field_offs115=(($127+76)|0);
      var $128=$bf_field_offs115;
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 >>> 10;
      var $bf_clear116=$130 & 1;
      var $tobool117=(($bf_clear116)|0)!=0;
      if ($tobool117) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $131=$facet2_addr;
      var $vertices119=(($131+48)|0);
      var $132=HEAP32[(($vertices119)>>2)];
      _qh_newvertices($132);
      label = 56; break;
    case 53: 
      var $133=$apex;
      var $134=$133;
      var $bf_field_offs121=(($134+20)|0);
      var $135=$bf_field_offs121;
      var $136=HEAP32[(($135)>>2)];
      var $137=$136 >>> 31;
      var $bf_clear122=$137 & 1;
      var $tobool123=(($bf_clear122)|0)!=0;
      if ($tobool123) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $138=$apex;
      _qh_removevertex($138);
      var $139=$apex;
      _qh_appendvertex($139);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $140=HEAP32[((((5247040)|0))>>2)];
      var $cmp128=(($140)|0) >= 4;
      if ($cmp128) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $141=HEAP32[((((5248924)|0))>>2)];
      var $142=$facet1_addr;
      var $id130=(($142+72)|0);
      var $143=HEAP32[(($id130)>>2)];
      _qh_fprintf($141, 4040, ((5251664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$143,tempInt));
      label = 59; break;
    case 59: 
      $vertex=0;
      var $144=$facet1_addr;
      var $vertices132=(($144+48)|0);
      var $145=HEAP32[(($vertices132)>>2)];
      var $tobool133=(($145)|0)!=0;
      if ($tobool133) { label = 60; break; } else { label = 70; break; }
    case 60: 
      var $146=$facet1_addr;
      var $vertices135=(($146+48)|0);
      var $147=HEAP32[(($vertices135)>>2)];
      var $e136=(($147+4)|0);
      var $arrayidx137=(($e136)|0);
      var $p138=$arrayidx137;
      var $148=$p138;
      $vertexp=$148;
      label = 61; break;
    case 61: 
      var $149=$vertexp;
      var $incdec_ptr140=(($149+4)|0);
      $vertexp=$incdec_ptr140;
      var $150=HEAP32[(($149)>>2)];
      $vertex=$150;
      var $tobool141=(($150)|0)!=0;
      if ($tobool141) { label = 62; break; } else { label = 69; break; }
    case 62: 
      var $151=$vertex;
      var $152=$apex;
      var $cmp143=(($151)|0)==(($152)|0);
      if ($cmp143) { label = 63; break; } else { label = 65; break; }
    case 63: 
      var $153=$issubset;
      var $tobool144=(($153)|0)!=0;
      if ($tobool144) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $154=$vertex;
      var $neighbors=(($154+12)|0);
      var $155=HEAP32[(($neighbors)>>2)];
      var $156=$facet1_addr;
      var $157=$156;
      var $158=$facet2_addr;
      var $159=$158;
      _qh_setreplace($155, $157, $159);
      label = 68; break;
    case 65: 
      var $160=$vertex;
      var $neighbors147=(($160+12)|0);
      var $161=HEAP32[(($neighbors147)>>2)];
      var $162=$facet1_addr;
      var $163=$162;
      var $call148=_qh_setdel($161, $163);
      var $164=$vertex;
      var $neighbors149=(($164+12)|0);
      var $165=HEAP32[(($neighbors149)>>2)];
      var $e150=(($165+4)|0);
      var $arrayidx151=(($e150+4)|0);
      var $p152=$arrayidx151;
      var $166=HEAP32[(($p152)>>2)];
      var $tobool153=(($166)|0)!=0;
      if ($tobool153) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $167=$vertex;
      var $168=$facet1_addr;
      var $169=$facet2_addr;
      _qh_mergevertex_del($167, $168, $169);
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 61; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $170=HEAP32[((((5247040)|0))>>2)];
      var $cmp159=(($170)|0) >= 4;
      if ($cmp159) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $171=HEAP32[((((5248924)|0))>>2)];
      var $172=$facet1_addr;
      var $id161=(($172+72)|0);
      var $173=HEAP32[(($id161)>>2)];
      var $174=$facet2_addr;
      var $id162=(($174+72)|0);
      var $175=HEAP32[(($id162)>>2)];
      _qh_fprintf($171, 4041, ((5251428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$173,HEAP32[(((tempInt)+(4))>>2)]=$175,tempInt));
      label = 72; break;
    case 72: 
      var $176=HEAP32[((((5249156)|0))>>2)];
      var $inc164=((($176)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc164;
      $neighbor=0;
      var $177=$facet2_addr;
      var $neighbors165=(($177+56)|0);
      var $178=HEAP32[(($neighbors165)>>2)];
      var $tobool166=(($178)|0)!=0;
      if ($tobool166) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $179=$facet2_addr;
      var $neighbors168=(($179+56)|0);
      var $180=HEAP32[(($neighbors168)>>2)];
      var $e169=(($180+4)|0);
      var $arrayidx170=(($e169)|0);
      var $p171=$arrayidx170;
      var $181=$p171;
      $neighborp=$181;
      label = 74; break;
    case 74: 
      var $182=$neighborp;
      var $incdec_ptr173=(($182+4)|0);
      $neighborp=$incdec_ptr173;
      var $183=HEAP32[(($182)>>2)];
      $neighbor=$183;
      var $tobool174=(($183)|0)!=0;
      if ($tobool174) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $184=HEAP32[((((5249156)|0))>>2)];
      var $185=$neighbor;
      var $visitid=(($185+68)|0);
      HEAP32[(($visitid)>>2)]=$184;
      label = 74; break;
    case 76: 
      label = 77; break;
    case 77: 
      $ridge=0;
      var $186=$facet1_addr;
      var $ridges178=(($186+52)|0);
      var $187=HEAP32[(($ridges178)>>2)];
      var $tobool179=(($187)|0)!=0;
      if ($tobool179) { label = 78; break; } else { label = 99; break; }
    case 78: 
      var $188=$facet1_addr;
      var $ridges181=(($188+52)|0);
      var $189=HEAP32[(($ridges181)>>2)];
      var $e182=(($189+4)|0);
      var $arrayidx183=(($e182)|0);
      var $p184=$arrayidx183;
      var $190=$p184;
      $ridgep=$190;
      label = 79; break;
    case 79: 
      var $191=$ridgep;
      var $incdec_ptr186=(($191+4)|0);
      $ridgep=$incdec_ptr186;
      var $192=HEAP32[(($191)>>2)];
      $ridge=$192;
      var $tobool187=(($192)|0)!=0;
      if ($tobool187) { label = 80; break; } else { label = 98; break; }
    case 80: 
      var $193=$ridge;
      var $top189=(($193+4)|0);
      var $194=HEAP32[(($top189)>>2)];
      var $195=$facet1_addr;
      var $cmp190=(($194)|0)==(($195)|0);
      if ($cmp190) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $196=$ridge;
      var $bottom192=(($196+8)|0);
      var $197=HEAP32[(($bottom192)>>2)];
      var $cond196 = $197;label = 83; break;
    case 82: 
      var $198=$ridge;
      var $top194=(($198+4)|0);
      var $199=HEAP32[(($top194)>>2)];
      var $cond196 = $199;label = 83; break;
    case 83: 
      var $cond196;
      $otherfacet=$cond196;
      var $200=$otherfacet;
      var $201=$facet2_addr;
      var $cmp197=(($200)|0)==(($201)|0);
      if ($cmp197) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $202=$facet2_addr;
      var $ridges199=(($202+52)|0);
      var $203=HEAP32[(($ridges199)>>2)];
      var $204=$ridge;
      var $205=$204;
      var $call200=_qh_setdel($203, $205);
      var $206=$ridge;
      var $vertices201=(($206)|0);
      _qh_setfree($vertices201);
      var $207=$ridge;
      var $208=$207;
      _qh_memfree($208, 16);
      var $209=$facet2_addr;
      var $neighbors202=(($209+56)|0);
      var $210=HEAP32[(($neighbors202)>>2)];
      var $211=$facet1_addr;
      var $212=$211;
      var $call203=_qh_setdel($210, $212);
      label = 97; break;
    case 85: 
      var $213=$facet2_addr;
      var $ridges205=(($213+52)|0);
      var $214=$ridge;
      var $215=$214;
      _qh_setappend($ridges205, $215);
      var $216=$otherfacet;
      var $visitid206=(($216+68)|0);
      var $217=HEAP32[(($visitid206)>>2)];
      var $218=HEAP32[((((5249156)|0))>>2)];
      var $cmp207=(($217)|0)!=(($218)|0);
      if ($cmp207) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $219=$facet2_addr;
      var $neighbors209=(($219+56)|0);
      var $220=$otherfacet;
      var $221=$220;
      _qh_setappend($neighbors209, $221);
      var $222=$otherfacet;
      var $neighbors210=(($222+56)|0);
      var $223=HEAP32[(($neighbors210)>>2)];
      var $224=$facet1_addr;
      var $225=$224;
      var $226=$facet2_addr;
      var $227=$226;
      _qh_setreplace($223, $225, $227);
      var $228=HEAP32[((((5249156)|0))>>2)];
      var $229=$otherfacet;
      var $visitid211=(($229+68)|0);
      HEAP32[(($visitid211)>>2)]=$228;
      label = 93; break;
    case 87: 
      var $230=$otherfacet;
      var $231=$230;
      var $bf_field_offs213=(($231+76)|0);
      var $232=$bf_field_offs213;
      var $233=HEAP32[(($232)>>2)];
      var $234=$233 >>> 13;
      var $bf_clear214=$234 & 1;
      var $tobool215=(($bf_clear214)|0)!=0;
      if ($tobool215) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $235=$otherfacet;
      _qh_makeridges($235);
      label = 89; break;
    case 89: 
      var $236=$otherfacet;
      var $neighbors218=(($236+56)|0);
      var $237=HEAP32[(($neighbors218)>>2)];
      var $e219=(($237+4)|0);
      var $arrayidx220=(($e219)|0);
      var $p221=$arrayidx220;
      var $238=HEAP32[(($p221)>>2)];
      var $239=$238;
      var $240=$facet1_addr;
      var $cmp222=(($239)|0)!=(($240)|0);
      if ($cmp222) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $241=$otherfacet;
      var $neighbors224=(($241+56)|0);
      var $242=HEAP32[(($neighbors224)>>2)];
      var $243=$facet1_addr;
      var $244=$243;
      var $call225=_qh_setdel($242, $244);
      label = 92; break;
    case 91: 
      var $245=$otherfacet;
      var $neighbors227=(($245+56)|0);
      var $246=HEAP32[(($neighbors227)>>2)];
      var $247=$facet2_addr;
      var $248=$247;
      var $call228=_qh_setdel($246, $248);
      var $249=$otherfacet;
      var $neighbors229=(($249+56)|0);
      var $250=HEAP32[(($neighbors229)>>2)];
      var $251=$facet1_addr;
      var $252=$251;
      var $253=$facet2_addr;
      var $254=$253;
      _qh_setreplace($250, $252, $254);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $255=$ridge;
      var $top232=(($255+4)|0);
      var $256=HEAP32[(($top232)>>2)];
      var $257=$facet1_addr;
      var $cmp233=(($256)|0)==(($257)|0);
      if ($cmp233) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $258=$facet2_addr;
      var $259=$ridge;
      var $top235=(($259+4)|0);
      HEAP32[(($top235)>>2)]=$258;
      label = 96; break;
    case 95: 
      var $260=$facet2_addr;
      var $261=$ridge;
      var $bottom237=(($261+8)|0);
      HEAP32[(($bottom237)>>2)]=$260;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 79; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $262=$facet1_addr;
      var $ridges242=(($262+52)|0);
      var $263=HEAP32[(($ridges242)>>2)];
      var $e243=(($263+4)|0);
      var $arrayidx244=(($e243)|0);
      var $p245=$arrayidx244;
      HEAP32[(($p245)>>2)]=0;
      var $264=HEAP32[((((5247040)|0))>>2)];
      var $cmp246=(($264)|0) >= 3;
      if ($cmp246) { label = 100; break; } else { label = 104; break; }
    case 100: 
      var $265=HEAP32[((((5248924)|0))>>2)];
      var $266=$facet1_addr;
      var $id248=(($266+72)|0);
      var $267=HEAP32[(($id248)>>2)];
      var $268=$apex;
      var $tobool249=(($268)|0)!=0;
      if ($tobool249) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $269=$apex;
      var $270=$269;
      var $bf_field_offs251=(($270+20)|0);
      var $271=$bf_field_offs251;
      var $272=HEAP32[(($271)>>2)];
      var $bf_clear252=$272 & 16777215;
      var $cond255 = $bf_clear252;label = 103; break;
    case 102: 
      var $cond255 = -1;label = 103; break;
    case 103: 
      var $cond255;
      var $273=$facet2_addr;
      var $id256=(($273+72)|0);
      var $274=HEAP32[(($id256)>>2)];
      _qh_fprintf($265, 3006, ((5251212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$267,HEAP32[(((tempInt)+(4))>>2)]=$cond255,HEAP32[(((tempInt)+(8))>>2)]=$274,tempInt));
      label = 104; break;
    case 104: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergesimplex["X"]=1;

function _qh_mergefacet2d($facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $vertex1A;
      var $vertex1B;
      var $vertex2A;
      var $vertex2B;
      var $vertexA;
      var $vertexB;
      var $neighbor1A;
      var $neighbor1B;
      var $neighbor2A;
      var $neighbor2B;
      var $neighborA;
      var $neighborB;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=$facet1_addr;
      var $vertices=(($0+48)|0);
      var $1=HEAP32[(($vertices)>>2)];
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      $vertex1A=$3;
      var $4=$facet1_addr;
      var $vertices1=(($4+48)|0);
      var $5=HEAP32[(($vertices1)>>2)];
      var $e2=(($5+4)|0);
      var $arrayidx3=(($e2+4)|0);
      var $p4=$arrayidx3;
      var $6=HEAP32[(($p4)>>2)];
      var $7=$6;
      $vertex1B=$7;
      var $8=$facet2_addr;
      var $vertices5=(($8+48)|0);
      var $9=HEAP32[(($vertices5)>>2)];
      var $e6=(($9+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $10=HEAP32[(($p8)>>2)];
      var $11=$10;
      $vertex2A=$11;
      var $12=$facet2_addr;
      var $vertices9=(($12+48)|0);
      var $13=HEAP32[(($vertices9)>>2)];
      var $e10=(($13+4)|0);
      var $arrayidx11=(($e10+4)|0);
      var $p12=$arrayidx11;
      var $14=HEAP32[(($p12)>>2)];
      var $15=$14;
      $vertex2B=$15;
      var $16=$facet1_addr;
      var $neighbors=(($16+56)|0);
      var $17=HEAP32[(($neighbors)>>2)];
      var $e13=(($17+4)|0);
      var $arrayidx14=(($e13)|0);
      var $p15=$arrayidx14;
      var $18=HEAP32[(($p15)>>2)];
      var $19=$18;
      $neighbor1A=$19;
      var $20=$facet1_addr;
      var $neighbors16=(($20+56)|0);
      var $21=HEAP32[(($neighbors16)>>2)];
      var $e17=(($21+4)|0);
      var $arrayidx18=(($e17+4)|0);
      var $p19=$arrayidx18;
      var $22=HEAP32[(($p19)>>2)];
      var $23=$22;
      $neighbor1B=$23;
      var $24=$facet2_addr;
      var $neighbors20=(($24+56)|0);
      var $25=HEAP32[(($neighbors20)>>2)];
      var $e21=(($25+4)|0);
      var $arrayidx22=(($e21)|0);
      var $p23=$arrayidx22;
      var $26=HEAP32[(($p23)>>2)];
      var $27=$26;
      $neighbor2A=$27;
      var $28=$facet2_addr;
      var $neighbors24=(($28+56)|0);
      var $29=HEAP32[(($neighbors24)>>2)];
      var $e25=(($29+4)|0);
      var $arrayidx26=(($e25+4)|0);
      var $p27=$arrayidx26;
      var $30=HEAP32[(($p27)>>2)];
      var $31=$30;
      $neighbor2B=$31;
      var $32=$vertex1A;
      var $33=$vertex2A;
      var $cmp=(($32)|0)==(($33)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $34=$vertex1B;
      $vertexA=$34;
      var $35=$vertex2B;
      $vertexB=$35;
      var $36=$neighbor2A;
      $neighborA=$36;
      var $37=$neighbor1A;
      $neighborB=$37;
      label = 11; break;
    case 4: 
      var $38=$vertex1A;
      var $39=$vertex2B;
      var $cmp28=(($38)|0)==(($39)|0);
      if ($cmp28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $40=$vertex1B;
      $vertexA=$40;
      var $41=$vertex2A;
      $vertexB=$41;
      var $42=$neighbor2B;
      $neighborA=$42;
      var $43=$neighbor1A;
      $neighborB=$43;
      label = 10; break;
    case 6: 
      var $44=$vertex1B;
      var $45=$vertex2A;
      var $cmp31=(($44)|0)==(($45)|0);
      if ($cmp31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$vertex1A;
      $vertexA=$46;
      var $47=$vertex2B;
      $vertexB=$47;
      var $48=$neighbor2A;
      $neighborA=$48;
      var $49=$neighbor1B;
      $neighborB=$49;
      label = 9; break;
    case 8: 
      var $50=$vertex1A;
      $vertexA=$50;
      var $51=$vertex2A;
      $vertexB=$51;
      var $52=$neighbor2B;
      $neighborA=$52;
      var $53=$neighbor1B;
      $neighborB=$53;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $54=$vertexA;
      var $55=$54;
      var $bf_field_offs=(($55+20)|0);
      var $56=$bf_field_offs;
      var $57=HEAP32[(($56)>>2)];
      var $bf_clear=$57 & 16777215;
      var $58=$vertexB;
      var $59=$58;
      var $bf_field_offs36=(($59+20)|0);
      var $60=$bf_field_offs36;
      var $61=HEAP32[(($60)>>2)];
      var $bf_clear37=$61 & 16777215;
      var $cmp38=(($bf_clear)|0) > (($bf_clear37)|0);
      if ($cmp38) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $62=$vertexA;
      var $63=$62;
      var $64=$facet2_addr;
      var $vertices40=(($64+48)|0);
      var $65=HEAP32[(($vertices40)>>2)];
      var $e41=(($65+4)|0);
      var $arrayidx42=(($e41)|0);
      var $p43=$arrayidx42;
      HEAP32[(($p43)>>2)]=$63;
      var $66=$vertexB;
      var $67=$66;
      var $68=$facet2_addr;
      var $vertices44=(($68+48)|0);
      var $69=HEAP32[(($vertices44)>>2)];
      var $e45=(($69+4)|0);
      var $arrayidx46=(($e45+4)|0);
      var $p47=$arrayidx46;
      HEAP32[(($p47)>>2)]=$67;
      var $70=$vertexB;
      var $71=$vertex2A;
      var $cmp48=(($70)|0)==(($71)|0);
      if ($cmp48) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $72=$facet2_addr;
      var $73=$72;
      var $bf_field_offs50=(($73+76)|0);
      var $74=$bf_field_offs50;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 12;
      var $bf_clear51=$76 & 1;
      var $tobool=(($bf_clear51)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $77=$facet2_addr;
      var $bf_value=$lnot_ext & 1;
      var $78=$77;
      var $bf_field_offs52=(($78+76)|0);
      var $79=$bf_field_offs52;
      var $80=$bf_value & 1;
      var $81=$80 << 12;
      var $82=HEAP32[(($79)>>2)];
      var $83=$82 & -4097;
      var $84=$83 | $81;
      HEAP32[(($79)>>2)]=$84;
      label = 14; break;
    case 14: 
      var $85=$neighborA;
      var $86=$85;
      var $87=$facet2_addr;
      var $neighbors54=(($87+56)|0);
      var $88=HEAP32[(($neighbors54)>>2)];
      var $e55=(($88+4)|0);
      var $arrayidx56=(($e55)|0);
      var $p57=$arrayidx56;
      HEAP32[(($p57)>>2)]=$86;
      var $89=$neighborB;
      var $90=$89;
      var $91=$facet2_addr;
      var $neighbors58=(($91+56)|0);
      var $92=HEAP32[(($neighbors58)>>2)];
      var $e59=(($92+4)|0);
      var $arrayidx60=(($e59+4)|0);
      var $p61=$arrayidx60;
      HEAP32[(($p61)>>2)]=$90;
      label = 18; break;
    case 15: 
      var $93=$vertexB;
      var $94=$93;
      var $95=$facet2_addr;
      var $vertices63=(($95+48)|0);
      var $96=HEAP32[(($vertices63)>>2)];
      var $e64=(($96+4)|0);
      var $arrayidx65=(($e64)|0);
      var $p66=$arrayidx65;
      HEAP32[(($p66)>>2)]=$94;
      var $97=$vertexA;
      var $98=$97;
      var $99=$facet2_addr;
      var $vertices67=(($99+48)|0);
      var $100=HEAP32[(($vertices67)>>2)];
      var $e68=(($100+4)|0);
      var $arrayidx69=(($e68+4)|0);
      var $p70=$arrayidx69;
      HEAP32[(($p70)>>2)]=$98;
      var $101=$vertexB;
      var $102=$vertex2B;
      var $cmp71=(($101)|0)==(($102)|0);
      if ($cmp71) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $103=$facet2_addr;
      var $104=$103;
      var $bf_field_offs73=(($104+76)|0);
      var $105=$bf_field_offs73;
      var $106=HEAP32[(($105)>>2)];
      var $107=$106 >>> 12;
      var $bf_clear74=$107 & 1;
      var $tobool75=(($bf_clear74)|0)!=0;
      var $lnot76=$tobool75 ^ 1;
      var $lnot_ext77=(($lnot76)&1);
      var $108=$facet2_addr;
      var $bf_value78=$lnot_ext77 & 1;
      var $109=$108;
      var $bf_field_offs79=(($109+76)|0);
      var $110=$bf_field_offs79;
      var $111=$bf_value78 & 1;
      var $112=$111 << 12;
      var $113=HEAP32[(($110)>>2)];
      var $114=$113 & -4097;
      var $115=$114 | $112;
      HEAP32[(($110)>>2)]=$115;
      label = 17; break;
    case 17: 
      var $116=$neighborB;
      var $117=$116;
      var $118=$facet2_addr;
      var $neighbors81=(($118+56)|0);
      var $119=HEAP32[(($neighbors81)>>2)];
      var $e82=(($119+4)|0);
      var $arrayidx83=(($e82)|0);
      var $p84=$arrayidx83;
      HEAP32[(($p84)>>2)]=$117;
      var $120=$neighborA;
      var $121=$120;
      var $122=$facet2_addr;
      var $neighbors85=(($122+56)|0);
      var $123=HEAP32[(($neighbors85)>>2)];
      var $e86=(($123+4)|0);
      var $arrayidx87=(($e86+4)|0);
      var $p88=$arrayidx87;
      HEAP32[(($p88)>>2)]=$121;
      label = 18; break;
    case 18: 
      var $124=$neighborB;
      _qh_makeridges($124);
      var $125=$neighborB;
      var $neighbors90=(($125+56)|0);
      var $126=HEAP32[(($neighbors90)>>2)];
      var $127=$facet1_addr;
      var $128=$127;
      var $129=$facet2_addr;
      var $130=$129;
      _qh_setreplace($126, $128, $130);
      var $131=HEAP32[((((5247040)|0))>>2)];
      var $cmp91=(($131)|0) >= 4;
      if ($cmp91) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $132=HEAP32[((((5248924)|0))>>2)];
      var $133=$vertexA;
      var $134=$133;
      var $bf_field_offs93=(($134+20)|0);
      var $135=$bf_field_offs93;
      var $136=HEAP32[(($135)>>2)];
      var $bf_clear94=$136 & 16777215;
      var $137=$neighborB;
      var $id=(($137+72)|0);
      var $138=HEAP32[(($id)>>2)];
      var $139=$facet1_addr;
      var $id95=(($139+72)|0);
      var $140=HEAP32[(($id95)>>2)];
      var $141=$facet2_addr;
      var $id96=(($141+72)|0);
      var $142=HEAP32[(($id96)>>2)];
      _qh_fprintf($132, 4036, ((5252764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear94,HEAP32[(((tempInt)+(4))>>2)]=$138,HEAP32[(((tempInt)+(8))>>2)]=$140,HEAP32[(((tempInt)+(12))>>2)]=$142,tempInt));
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergefacet2d["X"]=1;

function _qh_mergeneighbors($facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $neighbor;
      var $neighborp;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet1_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$facet2_addr;
      var $id1=(($4+72)|0);
      var $5=HEAP32[(($id1)>>2)];
      _qh_fprintf($1, 4037, ((5252552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      var $6=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $neighbor=0;
      var $7=$facet2_addr;
      var $neighbors=(($7+56)|0);
      var $8=HEAP32[(($neighbors)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $9=$facet2_addr;
      var $neighbors3=(($9+56)|0);
      var $10=HEAP32[(($neighbors3)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $neighborp=$11;
      label = 6; break;
    case 6: 
      var $12=$neighborp;
      var $incdec_ptr=(($12+4)|0);
      $neighborp=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $neighbor=$13;
      var $tobool4=(($13)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=HEAP32[((((5249156)|0))>>2)];
      var $15=$neighbor;
      var $visitid=(($15+68)|0);
      HEAP32[(($visitid)>>2)]=$14;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      $neighbor=0;
      var $16=$facet1_addr;
      var $neighbors6=(($16+56)|0);
      var $17=HEAP32[(($neighbors6)>>2)];
      var $tobool7=(($17)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 24; break; }
    case 10: 
      var $18=$facet1_addr;
      var $neighbors9=(($18+56)|0);
      var $19=HEAP32[(($neighbors9)>>2)];
      var $e10=(($19+4)|0);
      var $arrayidx11=(($e10)|0);
      var $p12=$arrayidx11;
      var $20=$p12;
      $neighborp=$20;
      label = 11; break;
    case 11: 
      var $21=$neighborp;
      var $incdec_ptr14=(($21+4)|0);
      $neighborp=$incdec_ptr14;
      var $22=HEAP32[(($21)>>2)];
      $neighbor=$22;
      var $tobool15=(($22)|0)!=0;
      if ($tobool15) { label = 12; break; } else { label = 23; break; }
    case 12: 
      var $23=$neighbor;
      var $visitid17=(($23+68)|0);
      var $24=HEAP32[(($visitid17)>>2)];
      var $25=HEAP32[((((5249156)|0))>>2)];
      var $cmp18=(($24)|0)==(($25)|0);
      if ($cmp18) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $26=$neighbor;
      var $27=$26;
      var $bf_field_offs=(($27+76)|0);
      var $28=$bf_field_offs;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 13;
      var $bf_clear=$30 & 1;
      var $tobool20=(($bf_clear)|0)!=0;
      if ($tobool20) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $31=$neighbor;
      _qh_makeridges($31);
      label = 15; break;
    case 15: 
      var $32=$neighbor;
      var $neighbors23=(($32+56)|0);
      var $33=HEAP32[(($neighbors23)>>2)];
      var $e24=(($33+4)|0);
      var $arrayidx25=(($e24)|0);
      var $p26=$arrayidx25;
      var $34=HEAP32[(($p26)>>2)];
      var $35=$34;
      var $36=$facet1_addr;
      var $cmp27=(($35)|0)!=(($36)|0);
      if ($cmp27) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $37=$neighbor;
      var $neighbors29=(($37+56)|0);
      var $38=HEAP32[(($neighbors29)>>2)];
      var $39=$facet1_addr;
      var $40=$39;
      var $call=_qh_setdel($38, $40);
      label = 18; break;
    case 17: 
      var $41=$neighbor;
      var $neighbors30=(($41+56)|0);
      var $42=HEAP32[(($neighbors30)>>2)];
      var $43=$facet2_addr;
      var $44=$43;
      var $call31=_qh_setdel($42, $44);
      var $45=$neighbor;
      var $neighbors32=(($45+56)|0);
      var $46=HEAP32[(($neighbors32)>>2)];
      var $47=$facet1_addr;
      var $48=$47;
      var $49=$facet2_addr;
      var $50=$49;
      _qh_setreplace($46, $48, $50);
      label = 18; break;
    case 18: 
      label = 22; break;
    case 19: 
      var $51=$neighbor;
      var $52=$facet2_addr;
      var $cmp35=(($51)|0)!=(($52)|0);
      if ($cmp35) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $53=$facet2_addr;
      var $neighbors37=(($53+56)|0);
      var $54=$neighbor;
      var $55=$54;
      _qh_setappend($neighbors37, $55);
      var $56=$neighbor;
      var $neighbors38=(($56+56)|0);
      var $57=HEAP32[(($neighbors38)>>2)];
      var $58=$facet1_addr;
      var $59=$58;
      var $60=$facet2_addr;
      var $61=$60;
      _qh_setreplace($57, $59, $61);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 11; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $62=$facet1_addr;
      var $neighbors43=(($62+56)|0);
      var $63=HEAP32[(($neighbors43)>>2)];
      var $64=$facet2_addr;
      var $65=$64;
      var $call44=_qh_setdel($63, $65);
      var $66=$facet2_addr;
      var $neighbors45=(($66+56)|0);
      var $67=HEAP32[(($neighbors45)>>2)];
      var $68=$facet1_addr;
      var $69=$68;
      var $call46=_qh_setdel($67, $69);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergeneighbors["X"]=1;

function _qh_mergevertices($vertices1, $vertices2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices1_addr;
      var $vertices2_addr;
      var $newsize;
      var $mergedvertices=__stackBase__;
      var $vertex;
      var $vertexp;
      var $vertex2;
      $vertices1_addr=$vertices1;
      $vertices2_addr=$vertices2;
      var $0=$vertices1_addr;
      var $call=_qh_setsize($0);
      var $1=$vertices2_addr;
      var $2=HEAP32[(($1)>>2)];
      var $call1=_qh_setsize($2);
      var $add=((($call)+($call1))|0);
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($add)-($3))|0);
      var $add2=((($sub)+(1))|0);
      $newsize=$add2;
      var $4=$vertices2_addr;
      var $5=HEAP32[(($4)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=$p;
      $vertex2=$6;
      var $7=$newsize;
      var $call3=_qh_settemp($7);
      HEAP32[(($mergedvertices)>>2)]=$call3;
      $vertex=0;
      var $8=$vertices1_addr;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 20; break; }
    case 3: 
      var $9=$vertices1_addr;
      var $e4=(($9+4)|0);
      var $arrayidx5=(($e4)|0);
      var $p6=$arrayidx5;
      var $10=$p6;
      $vertexp=$10;
      label = 4; break;
    case 4: 
      var $11=$vertexp;
      var $incdec_ptr=(($11+4)|0);
      $vertexp=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $vertex=$12;
      var $tobool7=(($12)|0)!=0;
      if ($tobool7) { label = 5; break; } else { label = 19; break; }
    case 5: 
      var $13=$vertex2;
      var $14=HEAP32[(($13)>>2)];
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=$vertex;
      var $16=$15;
      var $bf_field_offs=(($16+20)|0);
      var $17=$bf_field_offs;
      var $18=HEAP32[(($17)>>2)];
      var $bf_clear=$18 & 16777215;
      var $19=$vertex2;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $bf_field_offs9=(($21+20)|0);
      var $22=$bf_field_offs9;
      var $23=HEAP32[(($22)>>2)];
      var $bf_clear10=$23 & 16777215;
      var $cmp=(($bf_clear)|0) > (($bf_clear10)|0);
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$vertex;
      var $25=$24;
      _qh_setappend($mergedvertices, $25);
      label = 18; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $26=$vertex2;
      var $27=HEAP32[(($26)>>2)];
      var $tobool12=(($27)|0)!=0;
      if ($tobool12) { label = 10; break; } else { var $37 = 0;label = 11; break; }
    case 10: 
      var $28=$vertex2;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $bf_field_offs13=(($30+20)|0);
      var $31=$bf_field_offs13;
      var $32=HEAP32[(($31)>>2)];
      var $bf_clear14=$32 & 16777215;
      var $33=$vertex;
      var $34=$33;
      var $bf_field_offs15=(($34+20)|0);
      var $35=$bf_field_offs15;
      var $36=HEAP32[(($35)>>2)];
      var $bf_clear16=$36 & 16777215;
      var $cmp17=(($bf_clear14)|0) > (($bf_clear16)|0);
      var $37 = $cmp17;label = 11; break;
    case 11: 
      var $37;
      if ($37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $38=$vertex2;
      var $incdec_ptr18=(($38+4)|0);
      $vertex2=$incdec_ptr18;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39;
      _qh_setappend($mergedvertices, $40);
      label = 9; break;
    case 13: 
      var $41=$vertex2;
      var $42=HEAP32[(($41)>>2)];
      var $tobool19=(($42)|0)!=0;
      if ($tobool19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $43=$vertex2;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $bf_field_offs21=(($45+20)|0);
      var $46=$bf_field_offs21;
      var $47=HEAP32[(($46)>>2)];
      var $bf_clear22=$47 & 16777215;
      var $48=$vertex;
      var $49=$48;
      var $bf_field_offs23=(($49+20)|0);
      var $50=$bf_field_offs23;
      var $51=HEAP32[(($50)>>2)];
      var $bf_clear24=$51 & 16777215;
      var $cmp25=(($bf_clear22)|0) < (($bf_clear24)|0);
      if ($cmp25) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $52=$vertex;
      var $53=$52;
      _qh_setappend($mergedvertices, $53);
      label = 17; break;
    case 16: 
      var $54=$vertex2;
      var $incdec_ptr28=(($54+4)|0);
      $vertex2=$incdec_ptr28;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      _qh_setappend($mergedvertices, $56);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 4; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $57=$vertex2;
      var $58=HEAP32[(($57)>>2)];
      var $tobool32=(($58)|0)!=0;
      if ($tobool32) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $59=$vertex2;
      var $incdec_ptr34=(($59+4)|0);
      $vertex2=$incdec_ptr34;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60;
      _qh_setappend($mergedvertices, $61);
      label = 21; break;
    case 23: 
      var $62=$newsize;
      var $63=HEAP32[(($mergedvertices)>>2)];
      var $call36=_qh_setsize($63);
      var $cmp37=(($62)|0) < (($call36)|0);
      if ($cmp37) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $64=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($64, 6100, ((5249780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 25; break;
    case 25: 
      var $65=$vertices2_addr;
      _qh_setfree($65);
      var $66=HEAP32[(($mergedvertices)>>2)];
      var $67=$vertices2_addr;
      HEAP32[(($67)>>2)]=$66;
      var $call40=_qh_settemppop();
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergevertices["X"]=1;

function _qh_mergeridges($facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $ridge;
      var $ridgep;
      var $vertex;
      var $vertexp;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet1_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$facet2_addr;
      var $id1=(($4+72)|0);
      var $5=HEAP32[(($id1)>>2)];
      _qh_fprintf($1, 4038, ((5252348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      $ridge=0;
      var $6=$facet2_addr;
      var $ridges=(($6+52)|0);
      var $7=HEAP32[(($ridges)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $8=$facet2_addr;
      var $ridges3=(($8+52)|0);
      var $9=HEAP32[(($ridges3)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=$p;
      $ridgep=$10;
      label = 6; break;
    case 6: 
      var $11=$ridgep;
      var $incdec_ptr=(($11+4)|0);
      $ridgep=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $ridge=$12;
      var $tobool4=(($12)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $13=$ridge;
      var $top=(($13+4)|0);
      var $14=HEAP32[(($top)>>2)];
      var $15=$facet1_addr;
      var $cmp5=(($14)|0)==(($15)|0);
      if ($cmp5) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $16=$ridge;
      var $bottom=(($16+8)|0);
      var $17=HEAP32[(($bottom)>>2)];
      var $18=$facet1_addr;
      var $cmp6=(($17)|0)==(($18)|0);
      if ($cmp6) { label = 9; break; } else { label = 15; break; }
    case 9: 
      $vertex=0;
      var $19=$ridge;
      var $vertices=(($19)|0);
      var $20=HEAP32[(($vertices)>>2)];
      var $tobool8=(($20)|0)!=0;
      if ($tobool8) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $21=$ridge;
      var $vertices10=(($21)|0);
      var $22=HEAP32[(($vertices10)>>2)];
      var $e11=(($22+4)|0);
      var $arrayidx12=(($e11)|0);
      var $p13=$arrayidx12;
      var $23=$p13;
      $vertexp=$23;
      label = 11; break;
    case 11: 
      var $24=$vertexp;
      var $incdec_ptr15=(($24+4)|0);
      $vertexp=$incdec_ptr15;
      var $25=HEAP32[(($24)>>2)];
      $vertex=$25;
      var $tobool16=(($25)|0)!=0;
      if ($tobool16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $26=$vertex;
      var $27=$26;
      var $bf_field_offs=(($27+20)|0);
      var $28=$bf_field_offs;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & -536870913;
      var $31=$30 | 536870912;
      HEAP32[(($28)>>2)]=$31;
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $32=$ridge;
      _qh_delridge($32);
      var $33=$ridgep;
      var $incdec_ptr19=((($33)-(4))|0);
      $ridgep=$incdec_ptr19;
      label = 15; break;
    case 15: 
      label = 6; break;
    case 16: 
      label = 17; break;
    case 17: 
      $ridge=0;
      var $34=$facet1_addr;
      var $ridges23=(($34+52)|0);
      var $35=HEAP32[(($ridges23)>>2)];
      var $tobool24=(($35)|0)!=0;
      if ($tobool24) { label = 18; break; } else { label = 25; break; }
    case 18: 
      var $36=$facet1_addr;
      var $ridges26=(($36+52)|0);
      var $37=HEAP32[(($ridges26)>>2)];
      var $e27=(($37+4)|0);
      var $arrayidx28=(($e27)|0);
      var $p29=$arrayidx28;
      var $38=$p29;
      $ridgep=$38;
      label = 19; break;
    case 19: 
      var $39=$ridgep;
      var $incdec_ptr31=(($39+4)|0);
      $ridgep=$incdec_ptr31;
      var $40=HEAP32[(($39)>>2)];
      $ridge=$40;
      var $tobool32=(($40)|0)!=0;
      if ($tobool32) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $41=$ridge;
      var $top34=(($41+4)|0);
      var $42=HEAP32[(($top34)>>2)];
      var $43=$facet1_addr;
      var $cmp35=(($42)|0)==(($43)|0);
      if ($cmp35) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $44=$facet2_addr;
      var $45=$ridge;
      var $top37=(($45+4)|0);
      HEAP32[(($top37)>>2)]=$44;
      label = 23; break;
    case 22: 
      var $46=$facet2_addr;
      var $47=$ridge;
      var $bottom38=(($47+8)|0);
      HEAP32[(($bottom38)>>2)]=$46;
      label = 23; break;
    case 23: 
      var $48=$facet2_addr;
      var $ridges40=(($48+52)|0);
      var $49=$ridge;
      var $50=$49;
      _qh_setappend($ridges40, $50);
      label = 19; break;
    case 24: 
      label = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergeridges["X"]=1;

function _qh_mergevertex_neighbors($facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet1_addr;
      var $facet2_addr;
      var $vertex;
      var $vertexp;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet1_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$facet2_addr;
      var $id1=(($4+72)|0);
      var $5=HEAP32[(($id1)>>2)];
      _qh_fprintf($1, 4042, ((5250496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      var $6=HEAP32[((((5248980)|0))>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=HEAP32[((((5248924)|0))>>2)];
      var $8=$facet1_addr;
      var $id3=(($8+72)|0);
      var $9=HEAP32[(($id3)>>2)];
      var $10=$facet2_addr;
      var $id4=(($10+72)|0);
      var $11=HEAP32[(($id4)>>2)];
      var $12=HEAP32[((((5249040)|0))>>2)];
      var $13=HEAP32[((((5248980)|0))>>2)];
      var $neighbors=(($13+12)|0);
      var $14=HEAP32[(($neighbors)>>2)];
      var $e=(($14+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $15=HEAP32[(($p)>>2)];
      _qh_fprintf($7, 8081, ((5250328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=$12,HEAP32[(((tempInt)+(12))>>2)]=$15,tempInt));
      var $16=HEAP32[((((5248980)|0))>>2)];
      _qh_errprint(((5250116)|0), 0, 0, 0, $16);
      label = 6; break;
    case 6: 
      $vertex=0;
      var $17=$facet1_addr;
      var $vertices=(($17+48)|0);
      var $18=HEAP32[(($vertices)>>2)];
      var $tobool6=(($18)|0)!=0;
      if ($tobool6) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $19=$facet1_addr;
      var $vertices8=(($19+48)|0);
      var $20=HEAP32[(($vertices8)>>2)];
      var $e9=(($20+4)|0);
      var $arrayidx10=(($e9)|0);
      var $p11=$arrayidx10;
      var $21=$p11;
      $vertexp=$21;
      label = 8; break;
    case 8: 
      var $22=$vertexp;
      var $incdec_ptr=(($22+4)|0);
      $vertexp=$incdec_ptr;
      var $23=HEAP32[(($22)>>2)];
      $vertex=$23;
      var $tobool12=(($23)|0)!=0;
      if ($tobool12) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $24=$vertex;
      var $25=$24;
      var $bf_field_offs=(($25+16)|0);
      var $26=$bf_field_offs;
      var $27=HEAP32[(($26)>>2)];
      var $bf_clear=$27 & 2147483647;
      var $28=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear13=$28 & 2147483647;
      var $cmp14=(($bf_clear)|0)!=(($bf_clear13)|0);
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $29=$vertex;
      var $neighbors16=(($29+12)|0);
      var $30=HEAP32[(($neighbors16)>>2)];
      var $31=$facet1_addr;
      var $32=$31;
      var $33=$facet2_addr;
      var $34=$33;
      _qh_setreplace($30, $32, $34);
      label = 14; break;
    case 11: 
      var $35=$vertex;
      var $neighbors17=(($35+12)|0);
      var $36=HEAP32[(($neighbors17)>>2)];
      var $37=$facet1_addr;
      var $38=$37;
      var $call=_qh_setdel($36, $38);
      var $39=$vertex;
      var $neighbors18=(($39+12)|0);
      var $40=HEAP32[(($neighbors18)>>2)];
      var $e19=(($40+4)|0);
      var $arrayidx20=(($e19+4)|0);
      var $p21=$arrayidx20;
      var $41=HEAP32[(($p21)>>2)];
      var $tobool22=(($41)|0)!=0;
      if ($tobool22) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $42=$vertex;
      var $43=$facet1_addr;
      var $44=$facet2_addr;
      _qh_mergevertex_del($42, $43, $44);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $45=HEAP32[((((5248980)|0))>>2)];
      var $tobool27=(($45)|0)!=0;
      if ($tobool27) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $46=HEAP32[((((5248980)|0))>>2)];
      _qh_errprint(((5250116)|0), 0, 0, 0, $46);
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_mergevertex_neighbors["X"]=1;

function _qh_mergevertex_del($vertex, $facet1, $facet2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $facet1_addr;
      var $facet2_addr;
      $vertex_addr=$vertex;
      $facet1_addr=$facet1;
      $facet2_addr=$facet2;
      var $0=HEAP32[(((((5244044)|0)))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[(((((5244044)|0)))>>2)]=$inc;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=$vertex_addr;
      var $4=$3;
      var $bf_field_offs=(($4+20)|0);
      var $5=$bf_field_offs;
      var $6=HEAP32[(($5)>>2)];
      var $bf_clear=$6 & 16777215;
      var $7=$facet1_addr;
      var $id=(($7+72)|0);
      var $8=HEAP32[(($id)>>2)];
      var $9=$facet2_addr;
      var $id1=(($9+72)|0);
      var $10=HEAP32[(($id1)>>2)];
      _qh_fprintf($2, 2035, ((5250792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,HEAP32[(((tempInt)+(4))>>2)]=$8,HEAP32[(((tempInt)+(8))>>2)]=$10,tempInt));
      label = 4; break;
    case 4: 
      var $11=$facet2_addr;
      var $vertices=(($11+48)|0);
      var $12=HEAP32[(($vertices)>>2)];
      var $13=$vertex_addr;
      var $14=$13;
      var $call=_qh_setdelsorted($12, $14);
      var $15=$vertex_addr;
      var $16=$15;
      var $bf_field_offs2=(($16+20)|0);
      var $17=$bf_field_offs2;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 & -1073741825;
      var $20=$19 | 1073741824;
      HEAP32[(($17)>>2)]=$20;
      var $21=$vertex_addr;
      var $22=$21;
      _qh_setappend(((5249188)|0), $22);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_neighbor_intersections($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $vertex_addr;
      var $neighbor;
      var $neighborp;
      var $neighborA;
      var $neighborB;
      var $intersect=__stackBase__;
      var $neighbor_i;
      var $neighbor_n;
      $vertex_addr=$vertex;
      $neighbor=0;
      var $0=$vertex_addr;
      var $neighbors=(($0+12)|0);
      var $1=HEAP32[(($neighbors)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $2=$vertex_addr;
      var $neighbors1=(($2+12)|0);
      var $3=HEAP32[(($neighbors1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $neighborp=$4;
      label = 4; break;
    case 4: 
      var $5=$neighborp;
      var $incdec_ptr=(($5+4)|0);
      $neighborp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $neighbor=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $7=$neighbor;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 13;
      var $bf_clear=$11 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 27; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $12=$vertex_addr;
      var $neighbors6=(($12+12)|0);
      var $13=HEAP32[(($neighbors6)>>2)];
      var $e7=(($13+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p9=$arrayidx8;
      var $14=HEAP32[(($p9)>>2)];
      var $15=$14;
      $neighborA=$15;
      var $16=$vertex_addr;
      var $neighbors10=(($16+12)|0);
      var $17=HEAP32[(($neighbors10)>>2)];
      var $e11=(($17+4)|0);
      var $arrayidx12=(($e11+4)|0);
      var $p13=$arrayidx12;
      var $18=HEAP32[(($p13)>>2)];
      var $19=$18;
      $neighborB=$19;
      var $20=HEAP32[(((((5243852)|0)))>>2)];
      var $inc=((($20)+(1))|0);
      HEAP32[(((((5243852)|0)))>>2)]=$inc;
      var $21=$neighborA;
      var $tobool14=(($21)|0)!=0;
      if ($tobool14) { label = 11; break; } else { label = 10; break; }
    case 10: 
      $retval=0;
      label = 27; break;
    case 11: 
      var $22=$neighborB;
      var $tobool17=(($22)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $23=$neighborA;
      var $vertices=(($23+48)|0);
      var $24=HEAP32[(($vertices)>>2)];
      var $call=_qh_setcopy($24, 0);
      HEAP32[(($intersect)>>2)]=$call;
      label = 14; break;
    case 13: 
      var $25=$neighborA;
      var $vertices19=(($25+48)|0);
      var $26=HEAP32[(($vertices19)>>2)];
      var $27=$neighborB;
      var $vertices20=(($27+48)|0);
      var $28=HEAP32[(($vertices20)>>2)];
      var $call21=_qh_vertexintersect_new($26, $28);
      HEAP32[(($intersect)>>2)]=$call21;
      label = 14; break;
    case 14: 
      var $29=HEAP32[(($intersect)>>2)];
      _qh_settemppush($29);
      var $30=HEAP32[(($intersect)>>2)];
      var $31=$vertex_addr;
      var $32=$31;
      var $call23=_qh_setdelsorted($30, $32);
      $neighbor=0;
      var $33=$vertex_addr;
      var $neighbors24=(($33+12)|0);
      var $34=HEAP32[(($neighbors24)>>2)];
      var $tobool25=(($34)|0)!=0;
      if ($tobool25) { label = 15; break; } else { label = 24; break; }
    case 15: 
      $neighbor_i=0;
      var $35=$vertex_addr;
      var $neighbors27=(($35+12)|0);
      var $36=HEAP32[(($neighbors27)>>2)];
      var $e28=(($36+4)|0);
      var $arrayidx29=(($e28)|0);
      var $p30=$arrayidx29;
      var $37=HEAP32[(($p30)>>2)];
      var $38=$37;
      $neighbor=$38;
      var $39=$vertex_addr;
      var $neighbors31=(($39+12)|0);
      var $40=HEAP32[(($neighbors31)>>2)];
      var $call32=_qh_setsize($40);
      $neighbor_n=$call32;
      label = 16; break;
    case 16: 
      var $41=$neighbor_i;
      var $42=$neighbor_n;
      var $cmp=(($41)|0) < (($42)|0);
      if ($cmp) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $43=$neighbor_i;
      var $cmp35=(($43)|0) >= 2;
      if ($cmp35) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $44=HEAP32[(((((5243852)|0)))>>2)];
      var $inc37=((($44)+(1))|0);
      HEAP32[(((((5243852)|0)))>>2)]=$inc37;
      var $45=$neighbor;
      var $vertices38=(($45+48)|0);
      var $46=HEAP32[(($vertices38)>>2)];
      _qh_vertexintersect($intersect, $46);
      var $47=HEAP32[(($intersect)>>2)];
      var $e39=(($47+4)|0);
      var $arrayidx40=(($e39)|0);
      var $p41=$arrayidx40;
      var $48=HEAP32[(($p41)>>2)];
      var $tobool42=(($48)|0)!=0;
      if ($tobool42) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $49=HEAP32[(((((5243836)|0)))>>2)];
      var $inc44=((($49)+(1))|0);
      HEAP32[(((((5243836)|0)))>>2)]=$inc44;
      _qh_settempfree($intersect);
      $retval=0;
      label = 27; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$neighbor_i;
      var $inc47=((($50)+(1))|0);
      $neighbor_i=$inc47;
      var $51=$vertex_addr;
      var $neighbors48=(($51+12)|0);
      var $52=HEAP32[(($neighbors48)>>2)];
      var $e49=(($52+4)|0);
      var $arrayidx50=(($e49+($inc47<<2))|0);
      var $p51=$arrayidx50;
      var $53=HEAP32[(($p51)>>2)];
      var $54=$53;
      $neighbor=$54;
      label = 16; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $55=HEAP32[((((5247040)|0))>>2)];
      var $cmp54=(($55)|0) >= 3;
      if ($cmp54) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $56=HEAP32[((((5248924)|0))>>2)];
      var $57=HEAP32[(($intersect)>>2)];
      var $call56=_qh_setsize($57);
      var $58=$vertex_addr;
      var $59=$58;
      var $bf_field_offs57=(($59+20)|0);
      var $60=$bf_field_offs57;
      var $61=HEAP32[(($60)>>2)];
      var $bf_clear58=$61 & 16777215;
      _qh_fprintf($56, 3007, ((5249512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call56,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear58,tempInt));
      label = 26; break;
    case 26: 
      var $62=HEAP32[(($intersect)>>2)];
      $retval=$62;
      label = 27; break;
    case 27: 
      var $63=$retval;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }

}
_qh_neighbor_intersections["X"]=1;

function _qh_remove_extravertices($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $ridge;
      var $ridgep;
      var $vertex;
      var $vertexp;
      var $foundrem;
      $facet_addr=$facet;
      $foundrem=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 4043, ((5303516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      $vertex=0;
      var $4=$facet_addr;
      var $vertices=(($4+48)|0);
      var $5=HEAP32[(($vertices)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $6=$facet_addr;
      var $vertices2=(($6+48)|0);
      var $7=HEAP32[(($vertices2)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $8=$p;
      $vertexp=$8;
      label = 6; break;
    case 6: 
      var $9=$vertexp;
      var $incdec_ptr=(($9+4)|0);
      $vertexp=$incdec_ptr;
      var $10=HEAP32[(($9)>>2)];
      $vertex=$10;
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$vertex;
      var $12=$11;
      var $bf_field_offs=(($12+20)|0);
      var $13=$bf_field_offs;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & -268435457;
      HEAP32[(($13)>>2)]=$15;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      $ridge=0;
      var $16=$facet_addr;
      var $ridges=(($16+52)|0);
      var $17=HEAP32[(($ridges)>>2)];
      var $tobool5=(($17)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $18=$facet_addr;
      var $ridges7=(($18+52)|0);
      var $19=HEAP32[(($ridges7)>>2)];
      var $e8=(($19+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      var $20=$p10;
      $ridgep=$20;
      label = 11; break;
    case 11: 
      var $21=$ridgep;
      var $incdec_ptr12=(($21+4)|0);
      $ridgep=$incdec_ptr12;
      var $22=HEAP32[(($21)>>2)];
      $ridge=$22;
      var $tobool13=(($22)|0)!=0;
      if ($tobool13) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $vertex=0;
      var $23=$ridge;
      var $vertices15=(($23)|0);
      var $24=HEAP32[(($vertices15)>>2)];
      var $tobool16=(($24)|0)!=0;
      if ($tobool16) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $25=$ridge;
      var $vertices18=(($25)|0);
      var $26=HEAP32[(($vertices18)>>2)];
      var $e19=(($26+4)|0);
      var $arrayidx20=(($e19)|0);
      var $p21=$arrayidx20;
      var $27=$p21;
      $vertexp=$27;
      label = 14; break;
    case 14: 
      var $28=$vertexp;
      var $incdec_ptr23=(($28+4)|0);
      $vertexp=$incdec_ptr23;
      var $29=HEAP32[(($28)>>2)];
      $vertex=$29;
      var $tobool24=(($29)|0)!=0;
      if ($tobool24) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$vertex;
      var $31=$30;
      var $bf_field_offs26=(($31+20)|0);
      var $32=$bf_field_offs26;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 & -268435457;
      var $35=$34 | 268435456;
      HEAP32[(($32)>>2)]=$35;
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 11; break;
    case 18: 
      label = 19; break;
    case 19: 
      $vertex=0;
      var $36=$facet_addr;
      var $vertices31=(($36+48)|0);
      var $37=HEAP32[(($vertices31)>>2)];
      var $tobool32=(($37)|0)!=0;
      if ($tobool32) { label = 20; break; } else { label = 33; break; }
    case 20: 
      var $38=$facet_addr;
      var $vertices34=(($38+48)|0);
      var $39=HEAP32[(($vertices34)>>2)];
      var $e35=(($39+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      var $40=$p37;
      $vertexp=$40;
      label = 21; break;
    case 21: 
      var $41=$vertexp;
      var $incdec_ptr39=(($41+4)|0);
      $vertexp=$incdec_ptr39;
      var $42=HEAP32[(($41)>>2)];
      $vertex=$42;
      var $tobool40=(($42)|0)!=0;
      if ($tobool40) { label = 22; break; } else { label = 32; break; }
    case 22: 
      var $43=$vertex;
      var $44=$43;
      var $bf_field_offs42=(($44+20)|0);
      var $45=$bf_field_offs42;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 >>> 28;
      var $bf_clear=$47 & 1;
      var $tobool43=(($bf_clear)|0)!=0;
      if ($tobool43) { label = 31; break; } else { label = 23; break; }
    case 23: 
      $foundrem=1;
      var $48=HEAP32[(((((5244388)|0)))>>2)];
      var $inc=((($48)+(1))|0);
      HEAP32[(((((5244388)|0)))>>2)]=$inc;
      var $49=$facet_addr;
      var $vertices45=(($49+48)|0);
      var $50=HEAP32[(($vertices45)>>2)];
      var $51=$vertex;
      var $52=$51;
      var $call=_qh_setdelsorted($50, $52);
      var $53=$vertex;
      var $neighbors=(($53+12)|0);
      var $54=HEAP32[(($neighbors)>>2)];
      var $55=$facet_addr;
      var $56=$55;
      var $call46=_qh_setdel($54, $56);
      var $57=$vertex;
      var $neighbors47=(($57+12)|0);
      var $58=HEAP32[(($neighbors47)>>2)];
      var $call48=_qh_setsize($58);
      var $tobool49=(($call48)|0)!=0;
      if ($tobool49) { label = 27; break; } else { label = 24; break; }
    case 24: 
      var $59=$vertex;
      var $60=$59;
      var $bf_field_offs51=(($60+20)|0);
      var $61=$bf_field_offs51;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -1073741825;
      var $64=$63 | 1073741824;
      HEAP32[(($61)>>2)]=$64;
      var $65=$vertex;
      var $66=$65;
      _qh_setappend(((5249188)|0), $66);
      var $67=HEAP32[(((((5244396)|0)))>>2)];
      var $inc52=((($67)+(1))|0);
      HEAP32[(((((5244396)|0)))>>2)]=$inc52;
      var $68=HEAP32[((((5247040)|0))>>2)];
      var $cmp53=(($68)|0) >= 2;
      if ($cmp53) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $69=HEAP32[((((5248924)|0))>>2)];
      var $70=$vertex;
      var $71=$70;
      var $bf_field_offs55=(($71+20)|0);
      var $72=$bf_field_offs55;
      var $73=HEAP32[(($72)>>2)];
      var $bf_clear56=$73 & 16777215;
      _qh_fprintf($69, 2036, ((5303260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear56,tempInt));
      label = 26; break;
    case 26: 
      label = 30; break;
    case 27: 
      var $74=HEAP32[((((5247040)|0))>>2)];
      var $cmp58=(($74)|0) >= 3;
      if ($cmp58) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $75=HEAP32[((((5248924)|0))>>2)];
      var $76=$vertex;
      var $77=$76;
      var $bf_field_offs60=(($77+20)|0);
      var $78=$bf_field_offs60;
      var $79=HEAP32[(($78)>>2)];
      var $bf_clear61=$79 & 16777215;
      var $80=$facet_addr;
      var $id62=(($80+72)|0);
      var $81=HEAP32[(($id62)>>2)];
      _qh_fprintf($75, 3009, ((5302904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear61,HEAP32[(((tempInt)+(4))>>2)]=$81,tempInt));
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $82=$vertexp;
      var $incdec_ptr65=((($82)-(4))|0);
      $vertexp=$incdec_ptr65;
      label = 31; break;
    case 31: 
      label = 21; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $83=$foundrem;
      STACKTOP = __stackBase__;
      return $83;
    default: assert(0, "bad label: " + label);
  }

}
_qh_remove_extravertices["X"]=1;

function _qh_rename_sharedvertex($vertex, $facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $vertex_addr;
      var $facet_addr;
      var $neighbor;
      var $neighborp;
      var $neighborA;
      var $vertices=__stackBase__;
      var $ridges=(__stackBase__)+(4);
      var $newvertex;
      $vertex_addr=$vertex;
      $facet_addr=$facet;
      $neighborA=0;
      var $0=$vertex_addr;
      var $neighbors=(($0+12)|0);
      var $1=HEAP32[(($neighbors)>>2)];
      var $call=_qh_setsize($1);
      var $cmp=(($call)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$vertex_addr;
      var $neighbors1=(($2+12)|0);
      var $3=HEAP32[(($neighbors1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      $neighborA=$5;
      var $6=$neighborA;
      var $7=$facet_addr;
      var $cmp2=(($6)|0)==(($7)|0);
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$vertex_addr;
      var $neighbors4=(($8+12)|0);
      var $9=HEAP32[(($neighbors4)>>2)];
      var $e5=(($9+4)|0);
      var $arrayidx6=(($e5+4)|0);
      var $p7=$arrayidx6;
      var $10=HEAP32[(($p7)>>2)];
      var $11=$10;
      $neighborA=$11;
      label = 5; break;
    case 5: 
      label = 26; break;
    case 6: 
      var $12=HEAP32[((((5247508)|0))>>2)];
      var $cmp8=(($12)|0)==3;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 31; break;
    case 8: 
      var $13=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($13)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      $neighbor=0;
      var $14=$facet_addr;
      var $neighbors11=(($14+56)|0);
      var $15=HEAP32[(($neighbors11)>>2)];
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $16=$facet_addr;
      var $neighbors13=(($16+56)|0);
      var $17=HEAP32[(($neighbors13)>>2)];
      var $e14=(($17+4)|0);
      var $arrayidx15=(($e14)|0);
      var $p16=$arrayidx15;
      var $18=$p16;
      $neighborp=$18;
      label = 10; break;
    case 10: 
      var $19=$neighborp;
      var $incdec_ptr=(($19+4)|0);
      $neighborp=$incdec_ptr;
      var $20=HEAP32[(($19)>>2)];
      $neighbor=$20;
      var $tobool17=(($20)|0)!=0;
      if ($tobool17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=HEAP32[((((5249156)|0))>>2)];
      var $22=$neighbor;
      var $visitid=(($22+68)|0);
      HEAP32[(($visitid)>>2)]=$21;
      label = 10; break;
    case 12: 
      label = 13; break;
    case 13: 
      $neighbor=0;
      var $23=$vertex_addr;
      var $neighbors19=(($23+12)|0);
      var $24=HEAP32[(($neighbors19)>>2)];
      var $tobool20=(($24)|0)!=0;
      if ($tobool20) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $25=$vertex_addr;
      var $neighbors22=(($25+12)|0);
      var $26=HEAP32[(($neighbors22)>>2)];
      var $e23=(($26+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $27=$p25;
      $neighborp=$27;
      label = 15; break;
    case 15: 
      var $28=$neighborp;
      var $incdec_ptr27=(($28+4)|0);
      $neighborp=$incdec_ptr27;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool28=(($29)|0)!=0;
      if ($tobool28) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $30=$neighbor;
      var $visitid30=(($30+68)|0);
      var $31=HEAP32[(($visitid30)>>2)];
      var $32=HEAP32[((((5249156)|0))>>2)];
      var $cmp31=(($31)|0)==(($32)|0);
      if ($cmp31) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $33=$neighborA;
      var $tobool33=(($33)|0)!=0;
      if ($tobool33) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $retval=0;
      label = 31; break;
    case 19: 
      var $34=$neighbor;
      $neighborA=$34;
      label = 20; break;
    case 20: 
      label = 15; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $35=$neighborA;
      var $tobool39=(($35)|0)!=0;
      if ($tobool39) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $36=HEAP32[((((5248924)|0))>>2)];
      var $37=$vertex_addr;
      var $38=$37;
      var $bf_field_offs=(($38+20)|0);
      var $39=$bf_field_offs;
      var $40=HEAP32[(($39)>>2)];
      var $bf_clear=$40 & 16777215;
      var $41=$facet_addr;
      var $id=(($41+72)|0);
      var $42=HEAP32[(($id)>>2)];
      _qh_fprintf($36, 6101, ((5302584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,HEAP32[(((tempInt)+(4))>>2)]=$42,tempInt));
      var $43=$facet_addr;
      var $44=$vertex_addr;
      _qh_errprint(((5302376)|0), $43, 0, 0, $44);
      _qh_errexit(5, 0, 0);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $45=HEAP32[((((5248940)|0))>>2)];
      var $call44=_qh_settemp($45);
      HEAP32[(($ridges)>>2)]=$call44;
      var $46=HEAP32[((((5249156)|0))>>2)];
      var $inc45=((($46)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc45;
      var $47=$neighborA;
      var $visitid46=(($47+68)|0);
      HEAP32[(($visitid46)>>2)]=$inc45;
      var $48=$vertex_addr;
      var $49=$facet_addr;
      _qh_vertexridges_facet($48, $49, $ridges);
      var $50=HEAP32[((((5247040)|0))>>2)];
      var $cmp47=(($50)|0) >= 2;
      if ($cmp47) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$vertex_addr;
      var $point=(($52+8)|0);
      var $53=HEAP32[(($point)>>2)];
      var $call49=_qh_pointid($53);
      var $54=$vertex_addr;
      var $55=$54;
      var $bf_field_offs50=(($55+20)|0);
      var $56=$bf_field_offs50;
      var $57=HEAP32[(($56)>>2)];
      var $bf_clear51=$57 & 16777215;
      var $58=$facet_addr;
      var $id52=(($58+72)|0);
      var $59=HEAP32[(($id52)>>2)];
      var $60=HEAP32[(($ridges)>>2)];
      var $call53=_qh_setsize($60);
      var $61=$neighborA;
      var $id54=(($61+72)|0);
      var $62=HEAP32[(($id54)>>2)];
      _qh_fprintf($51, 2037, ((5302160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call49,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear51,HEAP32[(((tempInt)+(8))>>2)]=$59,HEAP32[(((tempInt)+(12))>>2)]=$call53,HEAP32[(((tempInt)+(16))>>2)]=$62,tempInt));
      label = 28; break;
    case 28: 
      var $63=HEAP32[(((((5243852)|0)))>>2)];
      var $inc56=((($63)+(1))|0);
      HEAP32[(((((5243852)|0)))>>2)]=$inc56;
      var $64=$facet_addr;
      var $vertices57=(($64+48)|0);
      var $65=HEAP32[(($vertices57)>>2)];
      var $66=$neighborA;
      var $vertices58=(($66+48)|0);
      var $67=HEAP32[(($vertices58)>>2)];
      var $call59=_qh_vertexintersect_new($65, $67);
      HEAP32[(($vertices)>>2)]=$call59;
      var $68=HEAP32[(($vertices)>>2)];
      var $69=$vertex_addr;
      var $70=$69;
      var $call60=_qh_setdel($68, $70);
      var $71=HEAP32[(($vertices)>>2)];
      _qh_settemppush($71);
      var $72=$vertex_addr;
      var $73=HEAP32[(($vertices)>>2)];
      var $74=HEAP32[(($ridges)>>2)];
      var $call61=_qh_find_newvertex($72, $73, $74);
      $newvertex=$call61;
      var $tobool62=(($call61)|0)!=0;
      if ($tobool62) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $75=$vertex_addr;
      var $76=$newvertex;
      var $77=HEAP32[(($ridges)>>2)];
      var $78=$facet_addr;
      var $79=$neighborA;
      _qh_renamevertex($75, $76, $77, $78, $79);
      label = 30; break;
    case 30: 
      _qh_settempfree($vertices);
      _qh_settempfree($ridges);
      var $80=$newvertex;
      $retval=$80;
      label = 31; break;
    case 31: 
      var $81=$retval;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + label);
  }

}
_qh_rename_sharedvertex["X"]=1;

function _qh_redundant_vertex($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $newvertex;
      var $vertices=__stackBase__;
      var $ridges=(__stackBase__)+(4);
      $vertex_addr=$vertex;
      $newvertex=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$vertex_addr;
      var $3=$2;
      var $bf_field_offs=(($3+20)|0);
      var $4=$bf_field_offs;
      var $5=HEAP32[(($4)>>2)];
      var $bf_clear=$5 & 16777215;
      _qh_fprintf($1, 3008, ((5303804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      label = 4; break;
    case 4: 
      var $6=$vertex_addr;
      var $call=_qh_neighbor_intersections($6);
      HEAP32[(($vertices)>>2)]=$call;
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $7=$vertex_addr;
      var $call2=_qh_vertexridges($7);
      HEAP32[(($ridges)>>2)]=$call2;
      var $8=$vertex_addr;
      var $9=HEAP32[(($vertices)>>2)];
      var $10=HEAP32[(($ridges)>>2)];
      var $call3=_qh_find_newvertex($8, $9, $10);
      $newvertex=$call3;
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$vertex_addr;
      var $12=$newvertex;
      var $13=HEAP32[(($ridges)>>2)];
      _qh_renamevertex($11, $12, $13, 0, 0);
      label = 7; break;
    case 7: 
      _qh_settempfree($ridges);
      _qh_settempfree($vertices);
      label = 8; break;
    case 8: 
      var $14=$newvertex;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_renamevertex($oldvertex, $newvertex, $ridges, $oldfacet, $neighborA) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $oldvertex_addr;
      var $newvertex_addr;
      var $ridges_addr;
      var $oldfacet_addr;
      var $neighborA_addr;
      var $neighbor;
      var $neighborp;
      var $ridge;
      var $ridgep;
      var $istrace;
      $oldvertex_addr=$oldvertex;
      $newvertex_addr=$newvertex;
      $ridges_addr=$ridges;
      $oldfacet_addr=$oldfacet;
      $neighborA_addr=$neighborA;
      $istrace=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $1=$oldvertex_addr;
      var $2=$1;
      var $bf_field_offs=(($2+20)|0);
      var $3=$bf_field_offs;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 16777215;
      var $5=HEAP32[((((5248976)|0))>>2)];
      var $cmp1=(($bf_clear)|0)==(($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$newvertex_addr;
      var $7=$6;
      var $bf_field_offs3=(($7+20)|0);
      var $8=$bf_field_offs3;
      var $9=HEAP32[(($8)>>2)];
      var $bf_clear4=$9 & 16777215;
      var $10=HEAP32[((((5248976)|0))>>2)];
      var $cmp5=(($bf_clear4)|0)==(($10)|0);
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $istrace=1;
      label = 6; break;
    case 6: 
      $ridge=0;
      var $11=$ridges_addr;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $12=$ridges_addr;
      var $e=(($12+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $13=$p;
      $ridgep=$13;
      label = 8; break;
    case 8: 
      var $14=$ridgep;
      var $incdec_ptr=(($14+4)|0);
      $ridgep=$incdec_ptr;
      var $15=HEAP32[(($14)>>2)];
      $ridge=$15;
      var $tobool7=(($15)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$ridge;
      var $17=$oldvertex_addr;
      var $18=$newvertex_addr;
      _qh_renameridgevertex($16, $17, $18);
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$oldfacet_addr;
      var $tobool9=(($19)|0)!=0;
      if ($tobool9) { label = 24; break; } else { label = 12; break; }
    case 12: 
      var $20=HEAP32[(((((5244404)|0)))>>2)];
      var $inc=((($20)+(1))|0);
      HEAP32[(((((5244404)|0)))>>2)]=$inc;
      var $21=$istrace;
      var $tobool11=(($21)|0)!=0;
      if ($tobool11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=HEAP32[((((5248924)|0))>>2)];
      var $23=$oldvertex_addr;
      var $24=$23;
      var $bf_field_offs13=(($24+20)|0);
      var $25=$bf_field_offs13;
      var $26=HEAP32[(($25)>>2)];
      var $bf_clear14=$26 & 16777215;
      var $27=$newvertex_addr;
      var $28=$27;
      var $bf_field_offs15=(($28+20)|0);
      var $29=$bf_field_offs15;
      var $30=HEAP32[(($29)>>2)];
      var $bf_clear16=$30 & 16777215;
      _qh_fprintf($22, 8082, ((5301572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear14,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear16,tempInt));
      label = 14; break;
    case 14: 
      $neighbor=0;
      var $31=$oldvertex_addr;
      var $neighbors=(($31+12)|0);
      var $32=HEAP32[(($neighbors)>>2)];
      var $tobool18=(($32)|0)!=0;
      if ($tobool18) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $33=$oldvertex_addr;
      var $neighbors20=(($33+12)|0);
      var $34=HEAP32[(($neighbors20)>>2)];
      var $e21=(($34+4)|0);
      var $arrayidx22=(($e21)|0);
      var $p23=$arrayidx22;
      var $35=$p23;
      $neighborp=$35;
      label = 16; break;
    case 16: 
      var $36=$neighborp;
      var $incdec_ptr25=(($36+4)|0);
      $neighborp=$incdec_ptr25;
      var $37=HEAP32[(($36)>>2)];
      $neighbor=$37;
      var $tobool26=(($37)|0)!=0;
      if ($tobool26) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $38=$neighbor;
      _qh_maydropneighbor($38);
      var $39=$neighbor;
      var $vertices=(($39+48)|0);
      var $40=HEAP32[(($vertices)>>2)];
      var $41=$oldvertex_addr;
      var $42=$41;
      var $call=_qh_setdelsorted($40, $42);
      var $43=$neighbor;
      var $call28=_qh_remove_extravertices($43);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $44=$neighborp;
      var $incdec_ptr31=((($44)-(4))|0);
      $neighborp=$incdec_ptr31;
      label = 19; break;
    case 19: 
      label = 16; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $45=$oldvertex_addr;
      var $46=$45;
      var $bf_field_offs35=(($46+20)|0);
      var $47=$bf_field_offs35;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 30;
      var $bf_clear36=$49 & 1;
      var $tobool37=(($bf_clear36)|0)!=0;
      if ($tobool37) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $50=$oldvertex_addr;
      var $51=$50;
      var $bf_field_offs39=(($51+20)|0);
      var $52=$bf_field_offs39;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & -1073741825;
      var $55=$54 | 1073741824;
      HEAP32[(($52)>>2)]=$55;
      var $56=$oldvertex_addr;
      var $57=$56;
      _qh_setappend(((5249188)|0), $57);
      label = 23; break;
    case 23: 
      label = 38; break;
    case 24: 
      var $58=$oldvertex_addr;
      var $neighbors41=(($58+12)|0);
      var $59=HEAP32[(($neighbors41)>>2)];
      var $call42=_qh_setsize($59);
      var $cmp43=(($call42)|0)==2;
      if ($cmp43) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $60=HEAP32[(((((5244420)|0)))>>2)];
      var $inc45=((($60)+(1))|0);
      HEAP32[(((((5244420)|0)))>>2)]=$inc45;
      var $61=$istrace;
      var $tobool46=(($61)|0)!=0;
      if ($tobool46) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$oldvertex_addr;
      var $64=$63;
      var $bf_field_offs48=(($64+20)|0);
      var $65=$bf_field_offs48;
      var $66=HEAP32[(($65)>>2)];
      var $bf_clear49=$66 & 16777215;
      var $67=$newvertex_addr;
      var $68=$67;
      var $bf_field_offs50=(($68+20)|0);
      var $69=$bf_field_offs50;
      var $70=HEAP32[(($69)>>2)];
      var $bf_clear51=$70 & 16777215;
      var $71=$oldfacet_addr;
      var $id=(($71+72)|0);
      var $72=HEAP32[(($id)>>2)];
      _qh_fprintf($62, 8083, ((5301296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear49,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear51,HEAP32[(((tempInt)+(8))>>2)]=$72,tempInt));
      label = 27; break;
    case 27: 
      $neighbor=0;
      var $73=$oldvertex_addr;
      var $neighbors53=(($73+12)|0);
      var $74=HEAP32[(($neighbors53)>>2)];
      var $tobool54=(($74)|0)!=0;
      if ($tobool54) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $75=$oldvertex_addr;
      var $neighbors56=(($75+12)|0);
      var $76=HEAP32[(($neighbors56)>>2)];
      var $e57=(($76+4)|0);
      var $arrayidx58=(($e57)|0);
      var $p59=$arrayidx58;
      var $77=$p59;
      $neighborp=$77;
      label = 29; break;
    case 29: 
      var $78=$neighborp;
      var $incdec_ptr61=(($78+4)|0);
      $neighborp=$incdec_ptr61;
      var $79=HEAP32[(($78)>>2)];
      $neighbor=$79;
      var $tobool62=(($79)|0)!=0;
      if ($tobool62) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $80=$neighbor;
      var $vertices64=(($80+48)|0);
      var $81=HEAP32[(($vertices64)>>2)];
      var $82=$oldvertex_addr;
      var $83=$82;
      var $call65=_qh_setdelsorted($81, $83);
      label = 29; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $84=$oldvertex_addr;
      var $85=$84;
      var $bf_field_offs68=(($85+20)|0);
      var $86=$bf_field_offs68;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & -1073741825;
      var $89=$88 | 1073741824;
      HEAP32[(($86)>>2)]=$89;
      var $90=$oldvertex_addr;
      var $91=$90;
      _qh_setappend(((5249188)|0), $91);
      label = 37; break;
    case 33: 
      var $92=HEAP32[(((((5244412)|0)))>>2)];
      var $inc70=((($92)+(1))|0);
      HEAP32[(((((5244412)|0)))>>2)]=$inc70;
      var $93=$istrace;
      var $tobool71=(($93)|0)!=0;
      if ($tobool71) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $94=HEAP32[((((5247040)|0))>>2)];
      var $tobool73=(($94)|0)!=0;
      if ($tobool73) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $95=HEAP32[((((5248924)|0))>>2)];
      var $96=$oldvertex_addr;
      var $97=$96;
      var $bf_field_offs75=(($97+20)|0);
      var $98=$bf_field_offs75;
      var $99=HEAP32[(($98)>>2)];
      var $bf_clear76=$99 & 16777215;
      var $100=$newvertex_addr;
      var $101=$100;
      var $bf_field_offs77=(($101+20)|0);
      var $102=$bf_field_offs77;
      var $103=HEAP32[(($102)>>2)];
      var $bf_clear78=$103 & 16777215;
      var $104=$oldfacet_addr;
      var $id79=(($104+72)|0);
      var $105=HEAP32[(($id79)>>2)];
      var $106=$neighborA_addr;
      var $id80=(($106+72)|0);
      var $107=HEAP32[(($id80)>>2)];
      _qh_fprintf($95, 8084, ((5301020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear76,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear78,HEAP32[(((tempInt)+(8))>>2)]=$105,HEAP32[(((tempInt)+(12))>>2)]=$107,tempInt));
      label = 36; break;
    case 36: 
      var $108=$oldfacet_addr;
      var $vertices82=(($108+48)|0);
      var $109=HEAP32[(($vertices82)>>2)];
      var $110=$oldvertex_addr;
      var $111=$110;
      var $call83=_qh_setdelsorted($109, $111);
      var $112=$oldvertex_addr;
      var $neighbors84=(($112+12)|0);
      var $113=HEAP32[(($neighbors84)>>2)];
      var $114=$oldfacet_addr;
      var $115=$114;
      var $call85=_qh_setdel($113, $115);
      var $116=$neighborA_addr;
      var $call86=_qh_remove_extravertices($116);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_renamevertex["X"]=1;

function _qh_vertexridges_facet($vertex, $facet, $ridges) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $facet_addr;
      var $ridges_addr;
      var $ridge;
      var $ridgep;
      var $neighbor;
      $vertex_addr=$vertex;
      $facet_addr=$facet;
      $ridges_addr=$ridges;
      $ridge=0;
      var $0=$facet_addr;
      var $ridges1=(($0+52)|0);
      var $1=HEAP32[(($ridges1)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $2=$facet_addr;
      var $ridges2=(($2+52)|0);
      var $3=HEAP32[(($ridges2)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $ridgep=$4;
      label = 4; break;
    case 4: 
      var $5=$ridgep;
      var $incdec_ptr=(($5+4)|0);
      $ridgep=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $ridge=$6;
      var $tobool3=(($6)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $7=$ridge;
      var $top=(($7+4)|0);
      var $8=HEAP32[(($top)>>2)];
      var $9=$facet_addr;
      var $cmp=(($8)|0)==(($9)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$ridge;
      var $bottom=(($10+8)|0);
      var $11=HEAP32[(($bottom)>>2)];
      var $cond = $11;label = 8; break;
    case 7: 
      var $12=$ridge;
      var $top4=(($12+4)|0);
      var $13=HEAP32[(($top4)>>2)];
      var $cond = $13;label = 8; break;
    case 8: 
      var $cond;
      $neighbor=$cond;
      var $14=$neighbor;
      var $visitid=(($14+68)|0);
      var $15=HEAP32[(($visitid)>>2)];
      var $16=HEAP32[((((5249156)|0))>>2)];
      var $cmp5=(($15)|0)==(($16)|0);
      if ($cmp5) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $17=$ridge;
      var $vertices=(($17)|0);
      var $18=HEAP32[(($vertices)>>2)];
      var $19=$vertex_addr;
      var $20=$19;
      var $call=_qh_setin($18, $20);
      var $tobool6=(($call)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $21=$ridges_addr;
      var $22=$ridge;
      var $23=$22;
      _qh_setappend($21, $23);
      label = 11; break;
    case 11: 
      label = 4; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $24=HEAP32[((((5249156)|0))>>2)];
      var $sub=((($24)-(1))|0);
      var $25=$facet_addr;
      var $visitid9=(($25+68)|0);
      HEAP32[(($visitid9)>>2)]=$sub;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_vertexridges_facet["X"]=1;

function _qh_renameridgevertex($ridge, $oldvertex, $newvertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ridge_addr;
      var $oldvertex_addr;
      var $newvertex_addr;
      var $nth;
      var $oldnth;
      var $temp;
      var $vertex;
      var $vertexp;
      $ridge_addr=$ridge;
      $oldvertex_addr=$oldvertex;
      $newvertex_addr=$newvertex;
      $nth=0;
      var $0=$ridge_addr;
      var $vertices=(($0)|0);
      var $1=HEAP32[(($vertices)>>2)];
      var $2=$oldvertex_addr;
      var $3=$2;
      var $call=_qh_setindex($1, $3);
      $oldnth=$call;
      var $4=$ridge_addr;
      var $vertices1=(($4)|0);
      var $5=HEAP32[(($vertices1)>>2)];
      var $6=$oldnth;
      var $call2=_qh_setdelnthsorted($5, $6);
      $vertex=0;
      var $7=$ridge_addr;
      var $vertices3=(($7)|0);
      var $8=HEAP32[(($vertices3)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 15; break; }
    case 3: 
      var $9=$ridge_addr;
      var $vertices4=(($9)|0);
      var $10=HEAP32[(($vertices4)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $vertexp=$11;
      label = 4; break;
    case 4: 
      var $12=$vertexp;
      var $incdec_ptr=(($12+4)|0);
      $vertexp=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $vertex=$13;
      var $tobool5=(($13)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $14=$vertex;
      var $15=$newvertex_addr;
      var $cmp=(($14)|0)==(($15)|0);
      if ($cmp) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $16=HEAP32[(((((5243372)|0)))>>2)];
      var $inc=((($16)+(1))|0);
      HEAP32[(((((5243372)|0)))>>2)]=$inc;
      var $17=$ridge_addr;
      var $18=$17;
      var $bf_field_offs=(($18+12)|0);
      var $19=$bf_field_offs;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 >>> 26;
      var $bf_clear=$21 & 1;
      var $tobool7=(($bf_clear)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$ridge_addr;
      _qh_copynonconvex($22);
      label = 8; break;
    case 8: 
      var $23=$ridge_addr;
      _qh_delridge($23);
      var $24=HEAP32[((((5247040)|0))>>2)];
      var $cmp9=(($24)|0) >= 2;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $25=HEAP32[((((5248924)|0))>>2)];
      var $26=$ridge_addr;
      var $27=$26;
      var $bf_field_offs11=(($27+12)|0);
      var $28=$bf_field_offs11;
      var $29=HEAP32[(($28)>>2)];
      var $bf_clear12=$29 & 16777215;
      var $30=$oldvertex_addr;
      var $31=$30;
      var $bf_field_offs13=(($31+20)|0);
      var $32=$bf_field_offs13;
      var $33=HEAP32[(($32)>>2)];
      var $bf_clear14=$33 & 16777215;
      var $34=$newvertex_addr;
      var $35=$34;
      var $bf_field_offs15=(($35+20)|0);
      var $36=$bf_field_offs15;
      var $37=HEAP32[(($36)>>2)];
      var $bf_clear16=$37 & 16777215;
      _qh_fprintf($25, 2038, ((5301908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear12,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear14,HEAP32[(((tempInt)+(8))>>2)]=$bf_clear16,tempInt));
      label = 10; break;
    case 10: 
      label = 19; break;
    case 11: 
      var $38=$vertex;
      var $39=$38;
      var $bf_field_offs19=(($39+20)|0);
      var $40=$bf_field_offs19;
      var $41=HEAP32[(($40)>>2)];
      var $bf_clear20=$41 & 16777215;
      var $42=$newvertex_addr;
      var $43=$42;
      var $bf_field_offs21=(($43+20)|0);
      var $44=$bf_field_offs21;
      var $45=HEAP32[(($44)>>2)];
      var $bf_clear22=$45 & 16777215;
      var $cmp23=(($bf_clear20)|0) < (($bf_clear22)|0);
      if ($cmp23) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $46=$nth;
      var $inc26=((($46)+(1))|0);
      $nth=$inc26;
      label = 4; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $47=$ridge_addr;
      var $vertices28=(($47)|0);
      var $48=$nth;
      var $49=$newvertex_addr;
      var $50=$49;
      _qh_setaddnth($vertices28, $48, $50);
      var $51=$oldnth;
      var $52=$nth;
      var $sub=((($51)-($52))|0);
      var $call29=Math.abs($sub);
      var $rem=((($call29)|0))%(2);
      var $tobool30=(($rem)|0)!=0;
      if ($tobool30) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $53=HEAP32[((((5247040)|0))>>2)];
      var $cmp32=(($53)|0) >= 3;
      if ($cmp32) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $54=HEAP32[((((5248924)|0))>>2)];
      var $55=$ridge_addr;
      var $56=$55;
      var $bf_field_offs34=(($56+12)|0);
      var $57=$bf_field_offs34;
      var $58=HEAP32[(($57)>>2)];
      var $bf_clear35=$58 & 16777215;
      _qh_fprintf($54, 3010, ((5301780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear35,tempInt));
      label = 18; break;
    case 18: 
      var $59=$ridge_addr;
      var $top=(($59+4)|0);
      var $60=HEAP32[(($top)>>2)];
      $temp=$60;
      var $61=$ridge_addr;
      var $bottom=(($61+8)|0);
      var $62=HEAP32[(($bottom)>>2)];
      var $63=$ridge_addr;
      var $top37=(($63+4)|0);
      HEAP32[(($top37)>>2)]=$62;
      var $64=$temp;
      var $65=$ridge_addr;
      var $bottom38=(($65+8)|0);
      HEAP32[(($bottom38)>>2)]=$64;
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_renameridgevertex["X"]=1;

function _qh_appendfacet($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $tail;
      $facet_addr=$facet;
      var $0=HEAP32[((((5248948)|0))>>2)];
      $tail=$0;
      var $1=$tail;
      var $2=HEAP32[((((5248956)|0))>>2)];
      var $cmp=(($1)|0)==(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$facet_addr;
      HEAP32[((((5248956)|0))>>2)]=$3;
      label = 4; break;
    case 4: 
      var $4=$tail;
      var $5=HEAP32[((((5248952)|0))>>2)];
      var $cmp1=(($4)|0)==(($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$facet_addr;
      HEAP32[((((5248952)|0))>>2)]=$6;
      label = 6; break;
    case 6: 
      var $7=$tail;
      var $previous=(($7+40)|0);
      var $8=HEAP32[(($previous)>>2)];
      var $9=$facet_addr;
      var $previous4=(($9+40)|0);
      HEAP32[(($previous4)>>2)]=$8;
      var $10=$tail;
      var $11=$facet_addr;
      var $next=(($11+44)|0);
      HEAP32[(($next)>>2)]=$10;
      var $12=$tail;
      var $previous5=(($12+40)|0);
      var $13=HEAP32[(($previous5)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$facet_addr;
      var $15=$tail;
      var $previous7=(($15+40)|0);
      var $16=HEAP32[(($previous7)>>2)];
      var $next8=(($16+44)|0);
      HEAP32[(($next8)>>2)]=$14;
      label = 9; break;
    case 8: 
      var $17=$facet_addr;
      HEAP32[((((5248944)|0))>>2)]=$17;
      label = 9; break;
    case 9: 
      var $18=$facet_addr;
      var $19=$tail;
      var $previous10=(($19+40)|0);
      HEAP32[(($previous10)>>2)]=$18;
      var $20=HEAP32[((((5248996)|0))>>2)];
      var $inc=((($20)+(1))|0);
      HEAP32[((((5248996)|0))>>2)]=$inc;
      var $21=HEAP32[((((5247040)|0))>>2)];
      var $cmp11=(($21)|0) >= 4;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $22=HEAP32[((((5248924)|0))>>2)];
      var $23=$facet_addr;
      var $id=(($23+72)|0);
      var $24=HEAP32[(($id)>>2)];
      _qh_fprintf($22, 4044, ((5257044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_appendfacet["X"]=1;

function _qh_appendvertex($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $tail;
      $vertex_addr=$vertex;
      var $0=HEAP32[((((5248988)|0))>>2)];
      $tail=$0;
      var $1=$tail;
      var $2=HEAP32[((((5248992)|0))>>2)];
      var $cmp=(($1)|0)==(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$vertex_addr;
      HEAP32[((((5248992)|0))>>2)]=$3;
      label = 4; break;
    case 4: 
      var $4=$vertex_addr;
      var $5=$4;
      var $bf_field_offs=(($5+20)|0);
      var $6=$bf_field_offs;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 2147483647;
      var $9=$8 | -2147483648;
      HEAP32[(($6)>>2)]=$9;
      var $10=$tail;
      var $previous=(($10+4)|0);
      var $11=HEAP32[(($previous)>>2)];
      var $12=$vertex_addr;
      var $previous1=(($12+4)|0);
      HEAP32[(($previous1)>>2)]=$11;
      var $13=$tail;
      var $14=$vertex_addr;
      var $next=(($14)|0);
      HEAP32[(($next)>>2)]=$13;
      var $15=$tail;
      var $previous2=(($15+4)|0);
      var $16=HEAP32[(($previous2)>>2)];
      var $tobool=(($16)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$vertex_addr;
      var $18=$tail;
      var $previous4=(($18+4)|0);
      var $19=HEAP32[(($previous4)>>2)];
      var $next5=(($19)|0);
      HEAP32[(($next5)>>2)]=$17;
      label = 7; break;
    case 6: 
      var $20=$vertex_addr;
      HEAP32[((((5248984)|0))>>2)]=$20;
      label = 7; break;
    case 7: 
      var $21=$vertex_addr;
      var $22=$tail;
      var $previous7=(($22+4)|0);
      HEAP32[(($previous7)>>2)]=$21;
      var $23=HEAP32[((((5249000)|0))>>2)];
      var $inc=((($23)+(1))|0);
      HEAP32[((((5249000)|0))>>2)]=$inc;
      var $24=HEAP32[((((5247040)|0))>>2)];
      var $cmp8=(($24)|0) >= 4;
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $25=HEAP32[((((5248924)|0))>>2)];
      var $26=$vertex_addr;
      var $27=$26;
      var $bf_field_offs10=(($27+20)|0);
      var $28=$bf_field_offs10;
      var $29=HEAP32[(($28)>>2)];
      var $bf_clear=$29 & 16777215;
      _qh_fprintf($25, 4045, ((5289836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_appendvertex["X"]=1;

function _qh_attachnewfacets() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newfacet;
      var $neighbor;
      var $neighborp;
      var $horizon;
      var $visible;
      var $ridge;
      var $ridgep;
      $newfacet=0;
      HEAP32[((((5249092)|0))>>2)]=1;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 3012, ((5276640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($2)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $3=HEAP32[((((5248960)|0))>>2)];
      $visible=$3;
      label = 5; break;
    case 5: 
      var $4=$visible;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $10 = 0;label = 7; break; }
    case 6: 
      var $5=$visible;
      var $6=$5;
      var $bf_field_offs=(($6+76)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $bf_clear=$9 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      var $10 = $tobool1;label = 7; break;
    case 7: 
      var $10;
      if ($10) { label = 8; break; } else { label = 26; break; }
    case 8: 
      var $11=HEAP32[((((5249156)|0))>>2)];
      var $12=$visible;
      var $visitid=(($12+68)|0);
      HEAP32[(($visitid)>>2)]=$11;
      var $13=$visible;
      var $ridges=(($13+52)|0);
      var $14=HEAP32[(($ridges)>>2)];
      var $tobool2=(($14)|0)!=0;
      if ($tobool2) { label = 9; break; } else { label = 24; break; }
    case 9: 
      $ridge=0;
      var $15=$visible;
      var $ridges4=(($15+52)|0);
      var $16=HEAP32[(($ridges4)>>2)];
      var $tobool5=(($16)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 23; break; }
    case 10: 
      var $17=$visible;
      var $ridges7=(($17+52)|0);
      var $18=HEAP32[(($ridges7)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=$p;
      $ridgep=$19;
      label = 11; break;
    case 11: 
      var $20=$ridgep;
      var $incdec_ptr=(($20+4)|0);
      $ridgep=$incdec_ptr;
      var $21=HEAP32[(($20)>>2)];
      $ridge=$21;
      var $tobool9=(($21)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 22; break; }
    case 12: 
      var $22=$ridge;
      var $top=(($22+4)|0);
      var $23=HEAP32[(($top)>>2)];
      var $24=$visible;
      var $cmp11=(($23)|0)==(($24)|0);
      if ($cmp11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $25=$ridge;
      var $bottom=(($25+8)|0);
      var $26=HEAP32[(($bottom)>>2)];
      var $cond = $26;label = 15; break;
    case 14: 
      var $27=$ridge;
      var $top12=(($27+4)|0);
      var $28=HEAP32[(($top12)>>2)];
      var $cond = $28;label = 15; break;
    case 15: 
      var $cond;
      $neighbor=$cond;
      var $29=$neighbor;
      var $visitid13=(($29+68)|0);
      var $30=HEAP32[(($visitid13)>>2)];
      var $31=HEAP32[((((5249156)|0))>>2)];
      var $cmp14=(($30)|0)==(($31)|0);
      if ($cmp14) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $32=$neighbor;
      var $33=$32;
      var $bf_field_offs15=(($33+76)|0);
      var $34=$bf_field_offs15;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 >>> 11;
      var $bf_clear16=$36 & 1;
      var $tobool17=(($bf_clear16)|0)!=0;
      if ($tobool17) { label = 21; break; } else { label = 17; break; }
    case 17: 
      var $37=$neighbor;
      var $38=$37;
      var $bf_field_offs18=(($38+76)|0);
      var $39=$bf_field_offs18;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 >>> 13;
      var $bf_clear19=$41 & 1;
      var $tobool20=(($bf_clear19)|0)!=0;
      if ($tobool20) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $42=$neighbor;
      var $43=$42;
      var $bf_field_offs22=(($43+76)|0);
      var $44=$bf_field_offs22;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 11;
      var $bf_clear23=$46 & 1;
      var $tobool24=(($bf_clear23)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $47=$neighbor;
      var $ridges26=(($47+52)|0);
      var $48=HEAP32[(($ridges26)>>2)];
      var $49=$ridge;
      var $50=$49;
      var $call=_qh_setdel($48, $50);
      label = 20; break;
    case 20: 
      var $51=$ridge;
      var $vertices=(($51)|0);
      _qh_setfree($vertices);
      var $52=$ridge;
      var $53=$52;
      _qh_memfree($53, 16);
      label = 21; break;
    case 21: 
      label = 11; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $54=$visible;
      var $ridges30=(($54+52)|0);
      var $55=HEAP32[(($ridges30)>>2)];
      var $e31=(($55+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      HEAP32[(($p33)>>2)]=0;
      label = 24; break;
    case 24: 
      var $56=$visible;
      var $neighbors=(($56+56)|0);
      var $57=HEAP32[(($neighbors)>>2)];
      var $e35=(($57+4)|0);
      var $arrayidx36=(($e35)|0);
      var $p37=$arrayidx36;
      HEAP32[(($p37)>>2)]=0;
      label = 25; break;
    case 25: 
      var $58=$visible;
      var $next=(($58+44)|0);
      var $59=HEAP32[(($next)>>2)];
      $visible=$59;
      label = 5; break;
    case 26: 
      var $60=HEAP32[((((5247040)|0))>>2)];
      var $cmp39=(($60)|0) >= 1;
      if ($cmp39) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $61=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($61, 1017, ((5270772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 28; break;
    case 28: 
      var $62=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$62;
      label = 29; break;
    case 29: 
      var $63=$newfacet;
      var $tobool43=(($63)|0)!=0;
      if ($tobool43) { label = 30; break; } else { var $66 = 0;label = 31; break; }
    case 30: 
      var $64=$newfacet;
      var $next45=(($64+44)|0);
      var $65=HEAP32[(($next45)>>2)];
      var $tobool46=(($65)|0)!=0;
      var $66 = $tobool46;label = 31; break;
    case 31: 
      var $66;
      if ($66) { label = 32; break; } else { label = 62; break; }
    case 32: 
      var $67=$newfacet;
      var $neighbors49=(($67+56)|0);
      var $68=HEAP32[(($neighbors49)>>2)];
      var $e50=(($68+4)|0);
      var $arrayidx51=(($e50)|0);
      var $p52=$arrayidx51;
      var $69=HEAP32[(($p52)>>2)];
      var $70=$69;
      $horizon=$70;
      var $71=$horizon;
      var $72=$71;
      var $bf_field_offs53=(($72+76)|0);
      var $73=$bf_field_offs53;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 >>> 13;
      var $bf_clear54=$75 & 1;
      var $tobool55=(($bf_clear54)|0)!=0;
      if ($tobool55) { label = 33; break; } else { label = 49; break; }
    case 33: 
      $visible=0;
      $neighbor=0;
      var $76=$horizon;
      var $neighbors57=(($76+56)|0);
      var $77=HEAP32[(($neighbors57)>>2)];
      var $tobool58=(($77)|0)!=0;
      if ($tobool58) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $78=$horizon;
      var $neighbors60=(($78+56)|0);
      var $79=HEAP32[(($neighbors60)>>2)];
      var $e61=(($79+4)|0);
      var $arrayidx62=(($e61)|0);
      var $p63=$arrayidx62;
      var $80=$p63;
      $neighborp=$80;
      label = 35; break;
    case 35: 
      var $81=$neighborp;
      var $incdec_ptr65=(($81+4)|0);
      $neighborp=$incdec_ptr65;
      var $82=HEAP32[(($81)>>2)];
      $neighbor=$82;
      var $tobool66=(($82)|0)!=0;
      if ($tobool66) { label = 36; break; } else { label = 44; break; }
    case 36: 
      var $83=$neighbor;
      var $84=$83;
      var $bf_field_offs68=(($84+76)|0);
      var $85=$bf_field_offs68;
      var $86=HEAP32[(($85)>>2)];
      var $87=$86 >>> 11;
      var $bf_clear69=$87 & 1;
      var $tobool70=(($bf_clear69)|0)!=0;
      if ($tobool70) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $88=$visible;
      var $tobool72=(($88)|0)!=0;
      if ($tobool72) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $89=$newfacet;
      var $vertices74=(($89+48)|0);
      var $90=HEAP32[(($vertices74)>>2)];
      var $91=$horizon;
      var $vertices75=(($91+48)|0);
      var $92=HEAP32[(($vertices75)>>2)];
      var $93=$neighborp;
      var $94=$93;
      var $95=$horizon;
      var $neighbors76=(($95+56)|0);
      var $96=HEAP32[(($neighbors76)>>2)];
      var $e77=(($96+4)|0);
      var $arrayidx78=(($e77+4)|0);
      var $p79=$arrayidx78;
      var $sub_ptr_lhs_cast=$94;
      var $sub_ptr_rhs_cast=$p79;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $call80=_qh_setequal_skip($90, 0, $92, $sub_ptr_div);
      var $tobool81=(($call80)|0)!=0;
      if ($tobool81) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $97=$neighbor;
      $visible=$97;
      label = 44; break;
    case 40: 
      label = 42; break;
    case 41: 
      var $98=$neighbor;
      $visible=$98;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 35; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $99=$visible;
      var $tobool88=(($99)|0)!=0;
      if ($tobool88) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $100=$newfacet;
      var $101=$visible;
      var $f=(($101+28)|0);
      var $replace=$f;
      HEAP32[(($replace)>>2)]=$100;
      var $102=$horizon;
      var $neighbors90=(($102+56)|0);
      var $103=HEAP32[(($neighbors90)>>2)];
      var $104=$visible;
      var $105=$104;
      var $106=$newfacet;
      var $107=$106;
      _qh_setreplace($103, $105, $107);
      label = 48; break;
    case 47: 
      var $108=HEAP32[((((5248924)|0))>>2)];
      var $109=$horizon;
      var $id=(($109+72)|0);
      var $110=HEAP32[(($id)>>2)];
      var $111=$newfacet;
      var $id92=(($111+72)|0);
      var $112=HEAP32[(($id92)>>2)];
      _qh_fprintf($108, 6102, ((5266392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$110,HEAP32[(((tempInt)+(4))>>2)]=$112,tempInt));
      var $113=$horizon;
      var $114=$newfacet;
      _qh_errexit2(5, $113, $114);
      label = 48; break;
    case 48: 
      label = 60; break;
    case 49: 
      $neighbor=0;
      var $115=$horizon;
      var $neighbors95=(($115+56)|0);
      var $116=HEAP32[(($neighbors95)>>2)];
      var $tobool96=(($116)|0)!=0;
      if ($tobool96) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $117=$horizon;
      var $neighbors98=(($117+56)|0);
      var $118=HEAP32[(($neighbors98)>>2)];
      var $e99=(($118+4)|0);
      var $arrayidx100=(($e99)|0);
      var $p101=$arrayidx100;
      var $119=$p101;
      $neighborp=$119;
      label = 51; break;
    case 51: 
      var $120=$neighborp;
      var $incdec_ptr103=(($120+4)|0);
      $neighborp=$incdec_ptr103;
      var $121=HEAP32[(($120)>>2)];
      $neighbor=$121;
      var $tobool104=(($121)|0)!=0;
      if ($tobool104) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $122=$neighbor;
      var $123=$122;
      var $bf_field_offs106=(($123+76)|0);
      var $124=$bf_field_offs106;
      var $125=HEAP32[(($124)>>2)];
      var $126=$125 >>> 11;
      var $bf_clear107=$126 & 1;
      var $tobool108=(($bf_clear107)|0)!=0;
      if ($tobool108) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $127=$newfacet;
      var $128=$neighbor;
      var $f110=(($128+28)|0);
      var $replace111=$f110;
      HEAP32[(($replace111)>>2)]=$127;
      var $129=$horizon;
      var $neighbors112=(($129+56)|0);
      var $130=HEAP32[(($neighbors112)>>2)];
      var $131=$neighborp;
      var $132=$131;
      var $133=$horizon;
      var $neighbors113=(($133+56)|0);
      var $134=HEAP32[(($neighbors113)>>2)];
      var $e114=(($134+4)|0);
      var $arrayidx115=(($e114+4)|0);
      var $p116=$arrayidx115;
      var $sub_ptr_lhs_cast117=$132;
      var $sub_ptr_rhs_cast118=$p116;
      var $sub_ptr_sub119=((($sub_ptr_lhs_cast117)-($sub_ptr_rhs_cast118))|0);
      var $sub_ptr_div120=((((($sub_ptr_sub119)|0))/(4))&-1);
      var $call121=_qh_setdelnth($130, $sub_ptr_div120);
      var $135=$neighborp;
      var $incdec_ptr122=((($135)-(4))|0);
      $neighborp=$incdec_ptr122;
      label = 54; break;
    case 54: 
      label = 51; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $136=$horizon;
      var $neighbors126=(($136+56)|0);
      var $137=$newfacet;
      var $138=$137;
      _qh_setappend($neighbors126, $138);
      var $139=$newfacet;
      var $ridges127=(($139+52)|0);
      var $140=HEAP32[(($ridges127)>>2)];
      var $e128=(($140+4)|0);
      var $arrayidx129=(($e128)|0);
      var $p130=$arrayidx129;
      var $141=HEAP32[(($p130)>>2)];
      var $142=$141;
      $ridge=$142;
      var $143=$ridge;
      var $top131=(($143+4)|0);
      var $144=HEAP32[(($top131)>>2)];
      var $145=$horizon;
      var $cmp132=(($144)|0)==(($145)|0);
      if ($cmp132) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $146=$newfacet;
      var $147=$ridge;
      var $bottom134=(($147+8)|0);
      HEAP32[(($bottom134)>>2)]=$146;
      label = 59; break;
    case 58: 
      var $148=$newfacet;
      var $149=$ridge;
      var $top136=(($149+4)|0);
      HEAP32[(($top136)>>2)]=$148;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $150=$newfacet;
      var $next140=(($150+44)|0);
      var $151=HEAP32[(($next140)>>2)];
      $newfacet=$151;
      label = 29; break;
    case 62: 
      var $152=HEAP32[((((5247316)|0))>>2)];
      var $tobool142=(($152)|0)!=0;
      if ($tobool142) { label = 63; break; } else { label = 72; break; }
    case 63: 
      var $153=HEAP32[((((5248960)|0))>>2)];
      $visible=$153;
      label = 64; break;
    case 64: 
      var $154=$visible;
      var $tobool145=(($154)|0)!=0;
      if ($tobool145) { label = 65; break; } else { var $160 = 0;label = 66; break; }
    case 65: 
      var $155=$visible;
      var $156=$155;
      var $bf_field_offs147=(($156+76)|0);
      var $157=$bf_field_offs147;
      var $158=HEAP32[(($157)>>2)];
      var $159=$158 >>> 11;
      var $bf_clear148=$159 & 1;
      var $tobool149=(($bf_clear148)|0)!=0;
      var $160 = $tobool149;label = 66; break;
    case 66: 
      var $160;
      if ($160) { label = 67; break; } else { label = 71; break; }
    case 67: 
      var $161=$visible;
      var $f152=(($161+28)|0);
      var $replace153=$f152;
      var $162=HEAP32[(($replace153)>>2)];
      var $tobool154=(($162)|0)!=0;
      if ($tobool154) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $163=HEAP32[(((((5243820)|0)))>>2)];
      var $inc156=((($163)+(1))|0);
      HEAP32[(((((5243820)|0)))>>2)]=$inc156;
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $164=$visible;
      var $next159=(($164+44)|0);
      var $165=HEAP32[(($next159)>>2)];
      $visible=$165;
      label = 64; break;
    case 71: 
      label = 72; break;
    case 72: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_attachnewfacets["X"]=1;

function _qh_checkflipped($facet, $distp, $allerror) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facet_addr;
      var $distp_addr;
      var $allerror_addr;
      var $dist=__stackBase__;
      $facet_addr=$facet;
      $distp_addr=$distp;
      $allerror_addr=$allerror;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 16;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$distp_addr;
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 15; break;
    case 5: 
      var $6=HEAP32[(((((5243404)|0)))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[(((((5243404)|0)))>>2)]=$inc;
      var $7=HEAP32[((((5248928)|0))>>2)];
      var $8=$facet_addr;
      _qh_distplane($7, $8, $dist);
      var $9=$distp_addr;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$distp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$10,HEAP32[(($11)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($11)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      var $12=$allerror_addr;
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$14);
      var $cmp=$13 > $sub;
      if ($cmp) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $15=$allerror_addr;
      var $tobool7=(($15)|0)!=0;
      if ($tobool7) { label = 14; break; } else { label = 10; break; }
    case 10: 
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp9=$16 >= 0;
      if ($cmp9) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $17=$facet_addr;
      var $18=$17;
      var $bf_field_offs11=(($18+76)|0);
      var $19=$bf_field_offs11;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & -65537;
      var $22=$21 | 65536;
      HEAP32[(($19)>>2)]=$22;
      var $23=HEAP32[(((((5243652)|0)))>>2)];
      var $inc12=((($23)+(1))|0);
      HEAP32[(((((5243652)|0)))>>2)]=$inc12;
      var $24=HEAP32[((((5247040)|0))>>2)];
      var $tobool13=(($24)|0)!=0;
      if ($tobool13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $25=HEAP32[((((5248924)|0))>>2)];
      var $26=$facet_addr;
      var $id=(($26+72)|0);
      var $27=HEAP32[(($id)>>2)];
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $29=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($25, 19, ((5262148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,(HEAPF64[(tempDoublePtr)>>3]=$28,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$29,tempInt));
      label = 13; break;
    case 13: 
      _qh_precision(((5258596)|0));
      $retval=0;
      label = 15; break;
    case 14: 
      $retval=1;
      label = 15; break;
    case 15: 
      var $30=$retval;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkflipped["X"]=1;

function _qh_delfacet($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $freelistp;
      $facet_addr=$facet;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 4046, ((5255528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      var $4=$facet_addr;
      var $5=HEAP32[((((5248972)|0))>>2)];
      var $cmp1=(($4)|0)==(($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      HEAP32[((((5248972)|0))>>2)]=0;
      label = 6; break;
    case 6: 
      var $6=$facet_addr;
      var $7=HEAP32[((((5249044)|0))>>2)];
      var $cmp4=(($6)|0)==(($7)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      HEAP32[((((5249044)|0))>>2)]=0;
      label = 8; break;
    case 8: 
      var $8=$facet_addr;
      _qh_removefacet($8);
      var $9=$facet_addr;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 9;
      var $bf_clear=$13 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$facet_addr;
      var $15=$14;
      var $bf_field_offs7=(($15+76)|0);
      var $16=$bf_field_offs7;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 28;
      var $bf_clear8=$18 & 1;
      var $tobool9=(($bf_clear8)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 14; break; }
    case 10: 
      $freelistp=0;
      var $19=$facet_addr;
      var $normal=(($19+24)|0);
      var $20=HEAP32[(($normal)>>2)];
      var $21=$20;
      var $22=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($21, $22);
      var $23=HEAP32[((((5249036)|0))>>2)];
      var $cmp11=(($23)|0)==1;
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $freelistp=0;
      var $24=$facet_addr;
      var $center=(($24+36)|0);
      var $25=HEAP32[(($center)>>2)];
      var $26=$25;
      var $27=HEAP32[((((5248936)|0))>>2)];
      _qh_memfree($26, $27);
      label = 13; break;
    case 12: 
      $freelistp=0;
      var $28=$facet_addr;
      var $center13=(($28+36)|0);
      var $29=HEAP32[(($center13)>>2)];
      var $30=$29;
      var $31=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($30, $31);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $32=$facet_addr;
      var $neighbors=(($32+56)|0);
      _qh_setfree($neighbors);
      var $33=$facet_addr;
      var $ridges=(($33+52)|0);
      var $34=HEAP32[(($ridges)>>2)];
      var $tobool16=(($34)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$facet_addr;
      var $ridges18=(($35+52)|0);
      _qh_setfree($ridges18);
      label = 16; break;
    case 16: 
      var $36=$facet_addr;
      var $vertices=(($36+48)|0);
      _qh_setfree($vertices);
      var $37=$facet_addr;
      var $outsideset=(($37+60)|0);
      var $38=HEAP32[(($outsideset)>>2)];
      var $tobool20=(($38)|0)!=0;
      if ($tobool20) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$facet_addr;
      var $outsideset22=(($39+60)|0);
      _qh_setfree($outsideset22);
      label = 18; break;
    case 18: 
      var $40=$facet_addr;
      var $coplanarset=(($40+64)|0);
      var $41=HEAP32[(($coplanarset)>>2)];
      var $tobool24=(($41)|0)!=0;
      if ($tobool24) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $42=$facet_addr;
      var $coplanarset26=(($42+64)|0);
      _qh_setfree($coplanarset26);
      label = 20; break;
    case 20: 
      $freelistp=0;
      var $43=$facet_addr;
      var $44=$43;
      _qh_memfree($44, 80);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_delfacet["X"]=1;

function _qh_removefacet($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $next;
      var $previous;
      $facet_addr=$facet;
      var $0=$facet_addr;
      var $next1=(($0+44)|0);
      var $1=HEAP32[(($next1)>>2)];
      $next=$1;
      var $2=$facet_addr;
      var $previous2=(($2+40)|0);
      var $3=HEAP32[(($previous2)>>2)];
      $previous=$3;
      var $4=$facet_addr;
      var $5=HEAP32[((((5248956)|0))>>2)];
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$next;
      HEAP32[((((5248956)|0))>>2)]=$6;
      label = 4; break;
    case 4: 
      var $7=$facet_addr;
      var $8=HEAP32[((((5248952)|0))>>2)];
      var $cmp3=(($7)|0)==(($8)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$next;
      HEAP32[((((5248952)|0))>>2)]=$9;
      label = 6; break;
    case 6: 
      var $10=$facet_addr;
      var $11=HEAP32[((((5248960)|0))>>2)];
      var $cmp6=(($10)|0)==(($11)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$next;
      HEAP32[((((5248960)|0))>>2)]=$12;
      label = 8; break;
    case 8: 
      var $13=$previous;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$next;
      var $15=$previous;
      var $next10=(($15+44)|0);
      HEAP32[(($next10)>>2)]=$14;
      var $16=$previous;
      var $17=$next;
      var $previous11=(($17+40)|0);
      HEAP32[(($previous11)>>2)]=$16;
      label = 11; break;
    case 10: 
      var $18=$next;
      HEAP32[((((5248944)|0))>>2)]=$18;
      var $19=HEAP32[((((5248944)|0))>>2)];
      var $previous12=(($19+40)|0);
      HEAP32[(($previous12)>>2)]=0;
      label = 11; break;
    case 11: 
      var $20=HEAP32[((((5248996)|0))>>2)];
      var $dec=((($20)-(1))|0);
      HEAP32[((((5248996)|0))>>2)]=$dec;
      var $21=HEAP32[((((5247040)|0))>>2)];
      var $cmp14=(($21)|0) >= 4;
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=HEAP32[((((5248924)|0))>>2)];
      var $23=$facet_addr;
      var $id=(($23+72)|0);
      var $24=HEAP32[(($id)>>2)];
      _qh_fprintf($22, 4057, ((5274048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_removefacet["X"]=1;

function _qh_deletevisible() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $visible;
      var $nextfacet;
      var $vertex;
      var $vertexp;
      var $numvisible;
      var $numdel;
      $numvisible=0;
      var $0=HEAP32[((((5249188)|0))>>2)];
      var $call=_qh_setsize($0);
      $numdel=$call;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=HEAP32[((((5248964)|0))>>2)];
      var $4=$numdel;
      _qh_fprintf($2, 1018, ((5252868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt));
      label = 4; break;
    case 4: 
      var $5=HEAP32[((((5248960)|0))>>2)];
      $visible=$5;
      label = 5; break;
    case 5: 
      var $6=$visible;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $12 = 0;label = 7; break; }
    case 6: 
      var $7=$visible;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $bf_clear=$11 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      var $12 = $tobool1;label = 7; break;
    case 7: 
      var $12;
      if ($12) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $13=$visible;
      var $next=(($13+44)|0);
      var $14=HEAP32[(($next)>>2)];
      $nextfacet=$14;
      var $15=$numvisible;
      var $inc=((($15)+(1))|0);
      $numvisible=$inc;
      var $16=$visible;
      _qh_delfacet($16);
      label = 9; break;
    case 9: 
      var $17=$nextfacet;
      $visible=$17;
      label = 5; break;
    case 10: 
      var $18=$numvisible;
      var $19=HEAP32[((((5248964)|0))>>2)];
      var $cmp2=(($18)|0)!=(($19)|0);
      if ($cmp2) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=HEAP32[((((5248924)|0))>>2)];
      var $21=HEAP32[((((5248964)|0))>>2)];
      var $22=$numvisible;
      _qh_fprintf($20, 6103, ((5250152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,HEAP32[(((tempInt)+(4))>>2)]=$22,tempInt));
      _qh_errexit(5, 0, 0);
      label = 12; break;
    case 12: 
      HEAP32[((((5248964)|0))>>2)]=0;
      var $23=$numvisible;
      var $24=HEAP32[(((((5244724)|0)))>>2)];
      var $add=((($24)+($23))|0);
      HEAP32[(((((5244724)|0)))>>2)]=$add;
      var $25=HEAP32[(((((5244732)|0)))>>2)];
      var $26=$numvisible;
      var $cmp5=(($25)|0) < (($26)|0);
      if ($cmp5) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $27=$numvisible;
      HEAP32[(((((5244732)|0)))>>2)]=$27;
      label = 14; break;
    case 14: 
      var $28=$numdel;
      var $29=HEAP32[(((((5243380)|0)))>>2)];
      var $add8=((($29)+($28))|0);
      HEAP32[(((((5243380)|0)))>>2)]=$add8;
      var $30=HEAP32[(((((5243388)|0)))>>2)];
      var $31=$numdel;
      var $cmp9=(($30)|0) < (($31)|0);
      if ($cmp9) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $32=$numdel;
      HEAP32[(((((5243388)|0)))>>2)]=$32;
      label = 16; break;
    case 16: 
      $vertex=0;
      var $33=HEAP32[((((5249188)|0))>>2)];
      var $tobool12=(($33)|0)!=0;
      if ($tobool12) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $34=HEAP32[((((5249188)|0))>>2)];
      var $e=(($34+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $35=$p;
      $vertexp=$35;
      label = 18; break;
    case 18: 
      var $36=$vertexp;
      var $incdec_ptr=(($36+4)|0);
      $vertexp=$incdec_ptr;
      var $37=HEAP32[(($36)>>2)];
      $vertex=$37;
      var $tobool15=(($37)|0)!=0;
      if ($tobool15) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $38=$vertex;
      _qh_delvertex($38);
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $39=HEAP32[((((5249188)|0))>>2)];
      _qh_settruncate($39, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_deletevisible["X"]=1;

function _qh_facetintersect($facetA, $facetB, $skipA, $skipB, $prepend) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetA_addr;
      var $facetB_addr;
      var $skipA_addr;
      var $skipB_addr;
      var $prepend_addr;
      var $intersect;
      var $dim;
      var $i;
      var $j;
      var $neighborsA;
      var $neighborsB;
      $facetA_addr=$facetA;
      $facetB_addr=$facetB;
      $skipA_addr=$skipA;
      $skipB_addr=$skipB;
      $prepend_addr=$prepend;
      var $0=HEAP32[((((5247508)|0))>>2)];
      $dim=$0;
      var $1=$facetA_addr;
      var $neighbors=(($1+56)|0);
      var $2=HEAP32[(($neighbors)>>2)];
      var $e=(($2+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $3=$p;
      $neighborsA=$3;
      var $4=$facetB_addr;
      var $neighbors1=(($4+56)|0);
      var $5=HEAP32[(($neighbors1)>>2)];
      var $e2=(($5+4)|0);
      var $arrayidx3=(($e2)|0);
      var $p4=$arrayidx3;
      var $6=$p4;
      $neighborsB=$6;
      $j=0;
      $i=0;
      var $7=$facetB_addr;
      var $8=$neighborsA;
      var $incdec_ptr=(($8+4)|0);
      $neighborsA=$incdec_ptr;
      var $9=HEAP32[(($8)>>2)];
      var $cmp=(($7)|0)==(($9)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$skipA_addr;
      HEAP32[(($10)>>2)]=0;
      label = 17; break;
    case 4: 
      var $11=$facetB_addr;
      var $12=$neighborsA;
      var $incdec_ptr5=(($12+4)|0);
      $neighborsA=$incdec_ptr5;
      var $13=HEAP32[(($12)>>2)];
      var $cmp6=(($11)|0)==(($13)|0);
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$skipA_addr;
      HEAP32[(($14)>>2)]=1;
      label = 16; break;
    case 6: 
      var $15=$facetB_addr;
      var $16=$neighborsA;
      var $incdec_ptr9=(($16+4)|0);
      $neighborsA=$incdec_ptr9;
      var $17=HEAP32[(($16)>>2)];
      var $cmp10=(($15)|0)==(($17)|0);
      if ($cmp10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$skipA_addr;
      HEAP32[(($18)>>2)]=2;
      label = 15; break;
    case 8: 
      $i=3;
      label = 9; break;
    case 9: 
      var $19=$i;
      var $20=$dim;
      var $cmp13=(($19)|0) < (($20)|0);
      if ($cmp13) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $21=$facetB_addr;
      var $22=$neighborsA;
      var $incdec_ptr14=(($22+4)|0);
      $neighborsA=$incdec_ptr14;
      var $23=HEAP32[(($22)>>2)];
      var $cmp15=(($21)|0)==(($23)|0);
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $24=$i;
      var $25=$skipA_addr;
      HEAP32[(($25)>>2)]=$24;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $27=$facetA_addr;
      var $28=$neighborsB;
      var $incdec_ptr20=(($28+4)|0);
      $neighborsB=$incdec_ptr20;
      var $29=HEAP32[(($28)>>2)];
      var $cmp21=(($27)|0)==(($29)|0);
      if ($cmp21) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $30=$skipB_addr;
      HEAP32[(($30)>>2)]=0;
      label = 32; break;
    case 19: 
      var $31=$facetA_addr;
      var $32=$neighborsB;
      var $incdec_ptr24=(($32+4)|0);
      $neighborsB=$incdec_ptr24;
      var $33=HEAP32[(($32)>>2)];
      var $cmp25=(($31)|0)==(($33)|0);
      if ($cmp25) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $34=$skipB_addr;
      HEAP32[(($34)>>2)]=1;
      label = 31; break;
    case 21: 
      var $35=$facetA_addr;
      var $36=$neighborsB;
      var $incdec_ptr28=(($36+4)|0);
      $neighborsB=$incdec_ptr28;
      var $37=HEAP32[(($36)>>2)];
      var $cmp29=(($35)|0)==(($37)|0);
      if ($cmp29) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $38=$skipB_addr;
      HEAP32[(($38)>>2)]=2;
      label = 30; break;
    case 23: 
      $j=3;
      label = 24; break;
    case 24: 
      var $39=$j;
      var $40=$dim;
      var $cmp33=(($39)|0) < (($40)|0);
      if ($cmp33) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $41=$facetA_addr;
      var $42=$neighborsB;
      var $incdec_ptr35=(($42+4)|0);
      $neighborsB=$incdec_ptr35;
      var $43=HEAP32[(($42)>>2)];
      var $cmp36=(($41)|0)==(($43)|0);
      if ($cmp36) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $44=$j;
      var $45=$skipB_addr;
      HEAP32[(($45)>>2)]=$44;
      label = 29; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $46=$j;
      var $inc40=((($46)+(1))|0);
      $j=$inc40;
      label = 24; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $47=$i;
      var $48=$dim;
      var $cmp45=(($47)|0) >= (($48)|0);
      if ($cmp45) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $49=$j;
      var $50=$dim;
      var $cmp46=(($49)|0) >= (($50)|0);
      if ($cmp46) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$facetA_addr;
      var $id=(($52+72)|0);
      var $53=HEAP32[(($id)>>2)];
      var $54=$facetB_addr;
      var $id48=(($54+72)|0);
      var $55=HEAP32[(($id48)>>2)];
      _qh_fprintf($51, 6104, ((5302232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$53,HEAP32[(((tempInt)+(4))>>2)]=$55,tempInt));
      var $56=$facetA_addr;
      var $57=$facetB_addr;
      _qh_errexit2(5, $56, $57);
      label = 35; break;
    case 35: 
      var $58=$facetA_addr;
      var $vertices=(($58+48)|0);
      var $59=HEAP32[(($vertices)>>2)];
      var $60=HEAP32[((((5247508)|0))>>2)];
      var $61=$skipA_addr;
      var $62=HEAP32[(($61)>>2)];
      var $63=$prepend_addr;
      var $call=_qh_setnew_delnthsorted($59, $60, $62, $63);
      $intersect=$call;
      var $64=HEAP32[((((5247040)|0))>>2)];
      var $cmp50=(($64)|0) >= 4;
      if ($cmp50) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $65=HEAP32[((((5248924)|0))>>2)];
      var $66=$facetA_addr;
      var $id52=(($66+72)|0);
      var $67=HEAP32[(($id52)>>2)];
      var $68=$skipA_addr;
      var $69=HEAP32[(($68)>>2)];
      var $70=$facetB_addr;
      var $id53=(($70+72)|0);
      var $71=HEAP32[(($id53)>>2)];
      var $72=$skipB_addr;
      var $73=HEAP32[(($72)>>2)];
      _qh_fprintf($65, 4047, ((5299576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$67,HEAP32[(((tempInt)+(4))>>2)]=$69,HEAP32[(((tempInt)+(8))>>2)]=$71,HEAP32[(((tempInt)+(12))>>2)]=$73,tempInt));
      label = 37; break;
    case 37: 
      var $74=$intersect;
      STACKTOP = __stackBase__;
      return $74;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facetintersect["X"]=1;

function _qh_gethash($hashsize, $set, $size, $firstindex, $skipelem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hashsize_addr;
      var $set_addr;
      var $size_addr;
      var $firstindex_addr;
      var $skipelem_addr;
      var $elemp;
      var $hash;
      var $elem;
      var $result;
      var $i;
      $hashsize_addr=$hashsize;
      $set_addr=$set;
      $size_addr=$size;
      $firstindex_addr=$firstindex;
      $skipelem_addr=$skipelem;
      var $0=$firstindex_addr;
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e+($0<<2))|0);
      var $p=$arrayidx;
      $elemp=$p;
      $hash=0;
      var $2=$size_addr;
      var $3=$firstindex_addr;
      var $sub=((($2)-($3))|0);
      if ((($sub)|0)==1) {
        label = 3; break;
      }
      else if ((($sub)|0)==2) {
        label = 4; break;
      }
      else if ((($sub)|0)==3) {
        label = 5; break;
      }
      else if ((($sub)|0)==4) {
        label = 6; break;
      }
      else if ((($sub)|0)==5) {
        label = 7; break;
      }
      else if ((($sub)|0)==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $4=$elemp;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=$skipelem_addr;
      var $8=$7;
      var $sub1=((($6)-($8))|0);
      $hash=$sub1;
      label = 17; break;
    case 4: 
      var $9=$elemp;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=$elemp;
      var $arrayidx3=(($12+4)|0);
      var $13=HEAP32[(($arrayidx3)>>2)];
      var $14=$13;
      var $add=((($11)+($14))|0);
      var $15=$skipelem_addr;
      var $16=$15;
      var $sub4=((($add)-($16))|0);
      $hash=$sub4;
      label = 17; break;
    case 5: 
      var $17=$elemp;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$elemp;
      var $arrayidx6=(($20+4)|0);
      var $21=HEAP32[(($arrayidx6)>>2)];
      var $22=$21;
      var $add7=((($19)+($22))|0);
      var $23=$elemp;
      var $arrayidx8=(($23+8)|0);
      var $24=HEAP32[(($arrayidx8)>>2)];
      var $25=$24;
      var $add9=((($add7)+($25))|0);
      var $26=$skipelem_addr;
      var $27=$26;
      var $sub10=((($add9)-($27))|0);
      $hash=$sub10;
      label = 17; break;
    case 6: 
      var $28=$elemp;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$elemp;
      var $arrayidx12=(($31+4)|0);
      var $32=HEAP32[(($arrayidx12)>>2)];
      var $33=$32;
      var $add13=((($30)+($33))|0);
      var $34=$elemp;
      var $arrayidx14=(($34+8)|0);
      var $35=HEAP32[(($arrayidx14)>>2)];
      var $36=$35;
      var $add15=((($add13)+($36))|0);
      var $37=$elemp;
      var $arrayidx16=(($37+12)|0);
      var $38=HEAP32[(($arrayidx16)>>2)];
      var $39=$38;
      var $add17=((($add15)+($39))|0);
      var $40=$skipelem_addr;
      var $41=$40;
      var $sub18=((($add17)-($41))|0);
      $hash=$sub18;
      label = 17; break;
    case 7: 
      var $42=$elemp;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=$elemp;
      var $arrayidx20=(($45+4)|0);
      var $46=HEAP32[(($arrayidx20)>>2)];
      var $47=$46;
      var $add21=((($44)+($47))|0);
      var $48=$elemp;
      var $arrayidx22=(($48+8)|0);
      var $49=HEAP32[(($arrayidx22)>>2)];
      var $50=$49;
      var $add23=((($add21)+($50))|0);
      var $51=$elemp;
      var $arrayidx24=(($51+12)|0);
      var $52=HEAP32[(($arrayidx24)>>2)];
      var $53=$52;
      var $add25=((($add23)+($53))|0);
      var $54=$elemp;
      var $arrayidx26=(($54+16)|0);
      var $55=HEAP32[(($arrayidx26)>>2)];
      var $56=$55;
      var $add27=((($add25)+($56))|0);
      var $57=$skipelem_addr;
      var $58=$57;
      var $sub28=((($add27)-($58))|0);
      $hash=$sub28;
      label = 17; break;
    case 8: 
      var $59=$elemp;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60;
      var $62=$elemp;
      var $arrayidx30=(($62+4)|0);
      var $63=HEAP32[(($arrayidx30)>>2)];
      var $64=$63;
      var $add31=((($61)+($64))|0);
      var $65=$elemp;
      var $arrayidx32=(($65+8)|0);
      var $66=HEAP32[(($arrayidx32)>>2)];
      var $67=$66;
      var $add33=((($add31)+($67))|0);
      var $68=$elemp;
      var $arrayidx34=(($68+12)|0);
      var $69=HEAP32[(($arrayidx34)>>2)];
      var $70=$69;
      var $add35=((($add33)+($70))|0);
      var $71=$elemp;
      var $arrayidx36=(($71+16)|0);
      var $72=HEAP32[(($arrayidx36)>>2)];
      var $73=$72;
      var $add37=((($add35)+($73))|0);
      var $74=$elemp;
      var $arrayidx38=(($74+20)|0);
      var $75=HEAP32[(($arrayidx38)>>2)];
      var $76=$75;
      var $add39=((($add37)+($76))|0);
      var $77=$skipelem_addr;
      var $78=$77;
      var $sub40=((($add39)-($78))|0);
      $hash=$sub40;
      label = 17; break;
    case 9: 
      $hash=0;
      $i=3;
      label = 10; break;
    case 10: 
      var $79=$elemp;
      var $incdec_ptr=(($79+4)|0);
      $elemp=$incdec_ptr;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      $elem=$81;
      var $82=$skipelem_addr;
      var $83=$82;
      var $cmp=(($81)|0)!=(($83)|0);
      if ($cmp) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $84=$elem;
      var $85=$i;
      var $shl=$84 << $85;
      var $86=$elem;
      var $87=$i;
      var $sub41=(((32)-($87))|0);
      var $shr=$86 >> (($sub41)|0);
      var $add42=((($shl)+($shr))|0);
      var $88=$hash;
      var $xor=$88 ^ $add42;
      $hash=$xor;
      var $89=$i;
      var $add43=((($89)+(3))|0);
      $i=$add43;
      var $90=$i;
      var $cmp44=(($90)|0) >= 32;
      if ($cmp44) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $91=$i;
      var $sub46=((($91)-(32))|0);
      $i=$sub46;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $92=$elemp;
      var $93=HEAP32[(($92)>>2)];
      var $tobool=(($93)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $94=$hashsize_addr;
      var $cmp48=(($94)|0) < 0;
      if ($cmp48) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=HEAP32[((((5248924)|0))>>2)];
      var $96=$hashsize_addr;
      _qh_fprintf($95, 6202, ((5297336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$96,tempInt));
      _qh_errexit2(5, 0, 0);
      label = 19; break;
    case 19: 
      var $97=$hash;
      $result=$97;
      var $98=$hashsize_addr;
      var $99=$result;
      var $rem=((($99)>>>0))%((($98)>>>0));
      $result=$rem;
      var $100=$result;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }

}
_qh_gethash["X"]=1;

function _qh_makenewfacet($vertices, $toporient, $horizon) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $toporient_addr;
      var $horizon_addr;
      var $newfacet;
      var $vertex;
      var $vertexp;
      $vertices_addr=$vertices;
      $toporient_addr=$toporient;
      $horizon_addr=$horizon;
      $vertex=0;
      var $0=$vertices_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$vertices_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $vertexp=$2;
      label = 4; break;
    case 4: 
      var $3=$vertexp;
      var $incdec_ptr=(($3+4)|0);
      $vertexp=$incdec_ptr;
      var $4=HEAP32[(($3)>>2)];
      $vertex=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$vertex;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 31;
      var $bf_clear=$9 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $10=$vertex;
      _qh_removevertex($10);
      var $11=$vertex;
      _qh_appendvertex($11);
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $call=_qh_newfacet();
      $newfacet=$call;
      var $12=$vertices_addr;
      var $13=$newfacet;
      var $vertices5=(($13+48)|0);
      HEAP32[(($vertices5)>>2)]=$12;
      var $14=$toporient_addr;
      var $conv=(($14) & 255);
      var $conv6=(($conv)&255);
      var $15=$newfacet;
      var $bf_value=$conv6 & 1;
      var $16=$15;
      var $bf_field_offs7=(($16+76)|0);
      var $17=$bf_field_offs7;
      var $18=$bf_value & 1;
      var $19=$18 << 12;
      var $20=HEAP32[(($17)>>2)];
      var $21=$20 & -4097;
      var $22=$21 | $19;
      HEAP32[(($17)>>2)]=$22;
      var $23=$horizon_addr;
      var $tobool8=(($23)|0)!=0;
      if ($tobool8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=$newfacet;
      var $neighbors=(($24+56)|0);
      var $25=$horizon_addr;
      var $26=$25;
      _qh_setappend($neighbors, $26);
      label = 11; break;
    case 11: 
      var $27=$newfacet;
      _qh_appendfacet($27);
      var $28=$newfacet;

      return $28;
    default: assert(0, "bad label: " + label);
  }

}
_qh_makenewfacet["X"]=1;

function _qh_removevertex($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $next;
      var $previous;
      $vertex_addr=$vertex;
      var $0=$vertex_addr;
      var $next1=(($0)|0);
      var $1=HEAP32[(($next1)>>2)];
      $next=$1;
      var $2=$vertex_addr;
      var $previous2=(($2+4)|0);
      var $3=HEAP32[(($previous2)>>2)];
      $previous=$3;
      var $4=$vertex_addr;
      var $5=HEAP32[((((5248992)|0))>>2)];
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$next;
      HEAP32[((((5248992)|0))>>2)]=$6;
      label = 4; break;
    case 4: 
      var $7=$previous;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$next;
      var $9=$previous;
      var $next4=(($9)|0);
      HEAP32[(($next4)>>2)]=$8;
      var $10=$previous;
      var $11=$next;
      var $previous5=(($11+4)|0);
      HEAP32[(($previous5)>>2)]=$10;
      label = 7; break;
    case 6: 
      var $12=$vertex_addr;
      var $next6=(($12)|0);
      var $13=HEAP32[(($next6)>>2)];
      HEAP32[((((5248984)|0))>>2)]=$13;
      var $14=HEAP32[((((5248984)|0))>>2)];
      var $previous7=(($14+4)|0);
      HEAP32[(($previous7)>>2)]=0;
      label = 7; break;
    case 7: 
      var $15=HEAP32[((((5249000)|0))>>2)];
      var $dec=((($15)-(1))|0);
      HEAP32[((((5249000)|0))>>2)]=$dec;
      var $16=HEAP32[((((5247040)|0))>>2)];
      var $cmp9=(($16)|0) >= 4;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $17=HEAP32[((((5248924)|0))>>2)];
      var $18=$vertex_addr;
      var $19=$18;
      var $bf_field_offs=(($19+20)|0);
      var $20=$bf_field_offs;
      var $21=HEAP32[(($20)>>2)];
      var $bf_clear=$21 & 16777215;
      _qh_fprintf($17, 4058, ((5273488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_removevertex["X"]=1;

function _qh_newfacet() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $freelistp;
      $freelistp=0;
      var $call=_qh_memalloc(80);
      var $0=$call;
      $facet=$0;
      var $1=$facet;
      var $2=$1;
      _memset($2, 0, 80);
      var $3=HEAP32[((((5249012)|0))>>2)];
      var $4=HEAP32[((((5248968)|0))>>2)];
      var $cmp=(($3)|0)==(($4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$facet;
      HEAP32[((((5248972)|0))>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=HEAP32[((((5249012)|0))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[((((5249012)|0))>>2)]=$inc;
      var $7=$facet;
      var $id=(($7+72)|0);
      HEAP32[(($id)>>2)]=$6;
      var $8=HEAP32[((((5247508)|0))>>2)];
      var $call1=_qh_setnew($8);
      var $9=$facet;
      var $neighbors=(($9+56)|0);
      HEAP32[(($neighbors)>>2)]=$call1;
      var $10=$facet;
      var $furthestdist=(($10)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($furthestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($furthestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $11=HEAP32[((((5247012)|0))>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $12=HEAP32[((((5246944)|0))>>2)];
      var $tobool2=(($12)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=$facet;
      var $maxoutside=(($14+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(($maxoutside)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 7: 
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=$facet;
      var $maxoutside4=(($16+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[(($maxoutside4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      var $17=$facet;
      var $18=$17;
      var $bf_field_offs=(($18+76)|0);
      var $19=$bf_field_offs;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & -8193;
      var $22=$21 | 8192;
      HEAP32[(($19)>>2)]=$22;
      var $23=$facet;
      var $24=$23;
      var $bf_field_offs6=(($24+76)|0);
      var $25=$bf_field_offs6;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -524289;
      var $28=$27 | 524288;
      HEAP32[(($25)>>2)]=$28;
      var $29=$facet;
      var $30=$29;
      var $bf_field_offs7=(($30+76)|0);
      var $31=$bf_field_offs7;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & -1025;
      var $34=$33 | 1024;
      HEAP32[(($31)>>2)]=$34;
      var $35=HEAP32[((((5247040)|0))>>2)];
      var $cmp8=(($35)|0) >= 4;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $36=HEAP32[((((5248924)|0))>>2)];
      var $37=$facet;
      var $id10=(($37+72)|0);
      var $38=HEAP32[(($id10)>>2)];
      _qh_fprintf($36, 4055, ((5276104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$38,tempInt));
      label = 10; break;
    case 10: 
      var $39=$facet;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }

}
_qh_newfacet["X"]=1;

function _qh_makenewplanes() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newfacet;
      var $0=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$0;
      label = 3; break;
    case 3: 
      var $1=$newfacet;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $2=$newfacet;
      var $next=(($2+44)|0);
      var $3=HEAP32[(($next)>>2)];
      var $tobool1=(($3)|0)!=0;
      var $4 = $tobool1;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $5=$newfacet;
      var $6=$5;
      var $bf_field_offs=(($6+76)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 25;
      var $bf_clear=$9 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $10=$newfacet;
      _qh_setfacetplane($10);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$newfacet;
      var $next3=(($11+44)|0);
      var $12=HEAP32[(($next3)>>2)];
      $newfacet=$12;
      label = 3; break;
    case 10: 
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$13 < 8.988465674311579e+307;
      if ($cmp) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$15);
      var $cmp5=$14 > $sub;
      if ($cmp5) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244148)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244148)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub7=(-$16);
      (HEAPF64[(tempDoublePtr)>>3]=$sub7,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_makenew_nonsimplicial($visible, $apex, $numnew) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $visible_addr;
      var $apex_addr;
      var $numnew_addr;
      var $freelistp;
      var $ridge;
      var $ridgep;
      var $neighbor;
      var $newfacet;
      var $samecycle;
      var $vertices=__stackBase__;
      var $toporient;
      var $ridgeid;
      $visible_addr=$visible;
      $apex_addr=$apex;
      $numnew_addr=$numnew;
      $newfacet=0;
      $ridge=0;
      var $0=$visible_addr;
      var $ridges=(($0+52)|0);
      var $1=HEAP32[(($ridges)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 40; break; }
    case 3: 
      var $2=$visible_addr;
      var $ridges1=(($2+52)|0);
      var $3=HEAP32[(($ridges1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $ridgep=$4;
      label = 4; break;
    case 4: 
      var $5=$ridgep;
      var $incdec_ptr=(($5+4)|0);
      $ridgep=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $ridge=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 39; break; }
    case 5: 
      var $7=$ridge;
      var $8=$7;
      var $bf_field_offs=(($8+12)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $bf_clear=$10 & 16777215;
      $ridgeid=$bf_clear;
      var $11=$ridge;
      var $top=(($11+4)|0);
      var $12=HEAP32[(($top)>>2)];
      var $13=$visible_addr;
      var $cmp=(($12)|0)==(($13)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$ridge;
      var $bottom=(($14+8)|0);
      var $15=HEAP32[(($bottom)>>2)];
      var $cond = $15;label = 8; break;
    case 7: 
      var $16=$ridge;
      var $top3=(($16+4)|0);
      var $17=HEAP32[(($top3)>>2)];
      var $cond = $17;label = 8; break;
    case 8: 
      var $cond;
      $neighbor=$cond;
      var $18=$neighbor;
      var $19=$18;
      var $bf_field_offs4=(($19+76)|0);
      var $20=$bf_field_offs4;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 11;
      var $bf_clear5=$22 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $23=HEAP32[((((5247128)|0))>>2)];
      var $tobool8=(($23)|0)!=0;
      if ($tobool8) { label = 13; break; } else { label = 10; break; }
    case 10: 
      var $24=$neighbor;
      var $visitid=(($24+68)|0);
      var $25=HEAP32[(($visitid)>>2)];
      var $26=HEAP32[((((5249156)|0))>>2)];
      var $cmp10=(($25)|0)==(($26)|0);
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $27=$ridge;
      var $vertices12=(($27)|0);
      _qh_setfree($vertices12);
      $freelistp=0;
      var $28=$ridge;
      var $29=$28;
      _qh_memfree($29, 16);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 38; break;
    case 14: 
      var $30=$ridge;
      var $top14=(($30+4)|0);
      var $31=HEAP32[(($top14)>>2)];
      var $32=$visible_addr;
      var $cmp15=(($31)|0)==(($32)|0);
      var $conv=(($cmp15)&1);
      $toporient=$conv;
      var $33=HEAP32[((((5247508)|0))>>2)];
      var $call=_qh_setnew($33);
      HEAP32[(($vertices)>>2)]=$call;
      var $34=$apex_addr;
      var $35=$34;
      _qh_setappend($vertices, $35);
      var $36=$ridge;
      var $vertices16=(($36)|0);
      var $37=HEAP32[(($vertices16)>>2)];
      _qh_setappend_set($vertices, $37);
      var $38=HEAP32[(($vertices)>>2)];
      var $39=$toporient;
      var $40=$neighbor;
      var $call17=_qh_makenewfacet($38, $39, $40);
      $newfacet=$call17;
      var $41=$numnew_addr;
      var $42=HEAP32[(($41)>>2)];
      var $inc=((($42)+(1))|0);
      HEAP32[(($41)>>2)]=$inc;
      var $43=$neighbor;
      var $44=$43;
      var $bf_field_offs18=(($44+76)|0);
      var $45=$bf_field_offs18;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 >>> 24;
      var $bf_clear19=$47 & 1;
      var $tobool20=(($bf_clear19)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $48=$newfacet;
      var $49=$48;
      var $bf_field_offs22=(($49+76)|0);
      var $50=$bf_field_offs22;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 & -33554433;
      var $53=$52 | 33554432;
      HEAP32[(($50)>>2)]=$53;
      var $54=$neighbor;
      var $55=$54;
      var $bf_field_offs23=(($55+76)|0);
      var $56=$bf_field_offs23;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 14;
      var $bf_clear24=$58 & 1;
      var $tobool25=(($bf_clear24)|0)!=0;
      if ($tobool25) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $59=$newfacet;
      var $60=$newfacet;
      var $f=(($60+28)|0);
      var $samecycle27=$f;
      HEAP32[(($samecycle27)>>2)]=$59;
      var $61=$newfacet;
      var $62=$neighbor;
      var $f28=(($62+28)|0);
      var $newcycle=$f28;
      HEAP32[(($newcycle)>>2)]=$61;
      label = 18; break;
    case 17: 
      var $63=$neighbor;
      var $f30=(($63+28)|0);
      var $newcycle31=$f30;
      var $64=HEAP32[(($newcycle31)>>2)];
      $samecycle=$64;
      var $65=$samecycle;
      var $f32=(($65+28)|0);
      var $samecycle33=$f32;
      var $66=HEAP32[(($samecycle33)>>2)];
      var $67=$newfacet;
      var $f34=(($67+28)|0);
      var $samecycle35=$f34;
      HEAP32[(($samecycle35)>>2)]=$66;
      var $68=$newfacet;
      var $69=$samecycle;
      var $f36=(($69+28)|0);
      var $samecycle37=$f36;
      HEAP32[(($samecycle37)>>2)]=$68;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $70=HEAP32[((((5247128)|0))>>2)];
      var $tobool40=(($70)|0)!=0;
      if ($tobool40) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $71=$neighbor;
      var $72=$71;
      var $bf_field_offs42=(($72+76)|0);
      var $73=$bf_field_offs42;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 >>> 13;
      var $bf_clear43=$75 & 1;
      var $tobool44=(($bf_clear43)|0)!=0;
      if ($tobool44) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $76=$newfacet;
      var $ridges46=(($76+52)|0);
      var $77=$ridge;
      var $78=$77;
      _qh_setappend($ridges46, $78);
      label = 22; break;
    case 22: 
      label = 37; break;
    case 23: 
      var $79=$neighbor;
      var $80=$79;
      var $bf_field_offs49=(($80+76)|0);
      var $81=$bf_field_offs49;
      var $82=HEAP32[(($81)>>2)];
      var $83=$82 >>> 14;
      var $bf_clear50=$83 & 1;
      var $tobool51=(($bf_clear50)|0)!=0;
      if ($tobool51) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $84=$neighbor;
      var $85=$84;
      var $bf_field_offs53=(($85+76)|0);
      var $86=$bf_field_offs53;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 >>> 13;
      var $bf_clear54=$88 & 1;
      var $tobool55=(($bf_clear54)|0)!=0;
      if ($tobool55) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $89=HEAP32[((((5248924)|0))>>2)];
      var $90=$neighbor;
      var $id=(($90+72)|0);
      var $91=HEAP32[(($id)>>2)];
      var $92=$visible_addr;
      var $id57=(($92+72)|0);
      var $93=HEAP32[(($id57)>>2)];
      _qh_fprintf($89, 6105, ((5295780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$91,HEAP32[(((tempInt)+(4))>>2)]=$93,tempInt));
      var $94=$neighbor;
      var $95=$visible_addr;
      _qh_errexit2(5, $94, $95);
      label = 26; break;
    case 26: 
      var $96=$neighbor;
      var $neighbors=(($96+56)|0);
      var $97=$newfacet;
      var $98=$97;
      _qh_setappend($neighbors, $98);
      label = 28; break;
    case 27: 
      var $99=$neighbor;
      var $neighbors60=(($99+56)|0);
      var $100=HEAP32[(($neighbors60)>>2)];
      var $101=$visible_addr;
      var $102=$101;
      var $103=$newfacet;
      var $104=$103;
      _qh_setreplace($100, $102, $104);
      label = 28; break;
    case 28: 
      var $105=$neighbor;
      var $106=$105;
      var $bf_field_offs62=(($106+76)|0);
      var $107=$bf_field_offs62;
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 >>> 13;
      var $bf_clear63=$109 & 1;
      var $tobool64=(($bf_clear63)|0)!=0;
      if ($tobool64) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $110=$neighbor;
      var $ridges66=(($110+52)|0);
      var $111=HEAP32[(($ridges66)>>2)];
      var $112=$ridge;
      var $113=$112;
      var $call67=_qh_setdel($111, $113);
      var $114=$ridge;
      var $vertices68=(($114)|0);
      _qh_setfree($vertices68);
      var $115=$ridge;
      var $116=$115;
      _qh_memfree($116, 16);
      label = 34; break;
    case 30: 
      var $117=$newfacet;
      var $ridges70=(($117+52)|0);
      var $118=$ridge;
      var $119=$118;
      _qh_setappend($ridges70, $119);
      var $120=$toporient;
      var $tobool71=(($120)|0)!=0;
      if ($tobool71) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $121=$newfacet;
      var $122=$ridge;
      var $top73=(($122+4)|0);
      HEAP32[(($top73)>>2)]=$121;
      label = 33; break;
    case 32: 
      var $123=$newfacet;
      var $124=$ridge;
      var $bottom75=(($124+8)|0);
      HEAP32[(($bottom75)>>2)]=$123;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $125=HEAP32[((((5247040)|0))>>2)];
      var $cmp78=(($125)|0) >= 4;
      if ($cmp78) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $126=HEAP32[((((5248924)|0))>>2)];
      var $127=$newfacet;
      var $id81=(($127+72)|0);
      var $128=HEAP32[(($id81)>>2)];
      var $129=$apex_addr;
      var $130=$129;
      var $bf_field_offs82=(($130+20)|0);
      var $131=$bf_field_offs82;
      var $132=HEAP32[(($131)>>2)];
      var $bf_clear83=$132 & 16777215;
      var $133=$ridgeid;
      var $134=$neighbor;
      var $id84=(($134+72)|0);
      var $135=HEAP32[(($id84)>>2)];
      _qh_fprintf($126, 4048, ((5293776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$128,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear83,HEAP32[(((tempInt)+(8))>>2)]=$133,HEAP32[(((tempInt)+(12))>>2)]=$135,tempInt));
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $136=$neighbor;
      var $137=$136;
      var $bf_field_offs88=(($137+76)|0);
      var $138=$bf_field_offs88;
      var $139=HEAP32[(($138)>>2)];
      var $140=$139 & -16385;
      var $141=$140 | 16384;
      HEAP32[(($138)>>2)]=$141;
      label = 4; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $142=HEAP32[((((5247128)|0))>>2)];
      var $tobool90=(($142)|0)!=0;
      if ($tobool90) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $143=$visible_addr;
      var $ridges92=(($143+52)|0);
      var $144=HEAP32[(($ridges92)>>2)];
      var $e93=(($144+4)|0);
      var $arrayidx94=(($e93)|0);
      var $p95=$arrayidx94;
      HEAP32[(($p95)>>2)]=0;
      label = 42; break;
    case 42: 
      var $145=$newfacet;
      STACKTOP = __stackBase__;
      return $145;
    default: assert(0, "bad label: " + label);
  }

}
_qh_makenew_nonsimplicial["X"]=1;

function _qh_makenew_simplicial($visible, $apex, $numnew) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $visible_addr;
      var $apex_addr;
      var $numnew_addr;
      var $neighbor;
      var $neighborp;
      var $newfacet;
      var $vertices;
      var $flip;
      var $toporient;
      var $horizonskip=__stackBase__;
      var $visibleskip=(__stackBase__)+(4);
      $visible_addr=$visible;
      $apex_addr=$apex;
      $numnew_addr=$numnew;
      $newfacet=0;
      $neighbor=0;
      var $0=$visible_addr;
      var $neighbors=(($0+56)|0);
      var $1=HEAP32[(($neighbors)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 21; break; }
    case 3: 
      var $2=$visible_addr;
      var $neighbors1=(($2+56)|0);
      var $3=HEAP32[(($neighbors1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $neighborp=$4;
      label = 4; break;
    case 4: 
      var $5=$neighborp;
      var $incdec_ptr=(($5+4)|0);
      $neighborp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $neighbor=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $7=$neighbor;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 14;
      var $bf_clear=$11 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 19; break; } else { label = 6; break; }
    case 6: 
      var $12=$neighbor;
      var $13=$12;
      var $bf_field_offs4=(($13+76)|0);
      var $14=$bf_field_offs4;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 11;
      var $bf_clear5=$16 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 19; break; } else { label = 7; break; }
    case 7: 
      var $17=$neighbor;
      var $18=$visible_addr;
      var $call=_qh_facetintersect($17, $18, $horizonskip, $visibleskip, 1);
      $vertices=$call;
      var $19=$apex_addr;
      var $20=$19;
      var $21=$vertices;
      var $e8=(($21+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      HEAP32[(($p10)>>2)]=$20;
      var $22=HEAP32[(($horizonskip)>>2)];
      var $and=$22 & 1;
      var $23=HEAP32[(($visibleskip)>>2)];
      var $and11=$23 & 1;
      var $xor=$and ^ $and11;
      $flip=$xor;
      var $24=$neighbor;
      var $25=$24;
      var $bf_field_offs12=(($25+76)|0);
      var $26=$bf_field_offs12;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 >>> 12;
      var $bf_clear13=$28 & 1;
      var $tobool14=(($bf_clear13)|0)!=0;
      if ($tobool14) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $29=HEAP32[(($horizonskip)>>2)];
      var $and16=$29 & 1;
      $toporient=$and16;
      label = 10; break;
    case 9: 
      var $30=HEAP32[(($horizonskip)>>2)];
      var $and17=$30 & 1;
      var $xor18=$and17 ^ 1;
      $toporient=$xor18;
      label = 10; break;
    case 10: 
      var $31=$vertices;
      var $32=$toporient;
      var $33=$neighbor;
      var $call19=_qh_makenewfacet($31, $32, $33);
      $newfacet=$call19;
      var $34=$numnew_addr;
      var $35=HEAP32[(($34)>>2)];
      var $inc=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$inc;
      var $36=$neighbor;
      var $37=$36;
      var $bf_field_offs20=(($37+76)|0);
      var $38=$bf_field_offs20;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 24;
      var $bf_clear21=$40 & 1;
      var $tobool22=(($bf_clear21)|0)!=0;
      if ($tobool22) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $41=HEAP32[((((5247144)|0))>>2)];
      var $tobool24=(($41)|0)!=0;
      if ($tobool24) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $42=HEAP32[((((5247076)|0))>>2)];
      var $tobool25=(($42)|0)!=0;
      if ($tobool25) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$newfacet;
      var $44=$newfacet;
      var $f=(($44+28)|0);
      var $samecycle=$f;
      HEAP32[(($samecycle)>>2)]=$43;
      var $45=$newfacet;
      var $46=$45;
      var $bf_field_offs27=(($46+76)|0);
      var $47=$bf_field_offs27;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 & -33554433;
      var $50=$49 | 33554432;
      HEAP32[(($47)>>2)]=$50;
      label = 14; break;
    case 14: 
      var $51=HEAP32[((((5247128)|0))>>2)];
      var $tobool29=(($51)|0)!=0;
      if ($tobool29) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $52=$newfacet;
      var $53=$52;
      var $54=HEAP32[(($horizonskip)>>2)];
      var $55=$neighbor;
      var $neighbors31=(($55+56)|0);
      var $56=HEAP32[(($neighbors31)>>2)];
      var $e32=(($56+4)|0);
      var $arrayidx33=(($e32+($54<<2))|0);
      var $p34=$arrayidx33;
      HEAP32[(($p34)>>2)]=$53;
      label = 16; break;
    case 16: 
      var $57=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($57)|0) >= 4;
      if ($cmp) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $58=HEAP32[((((5248924)|0))>>2)];
      var $59=$newfacet;
      var $id=(($59+72)|0);
      var $60=HEAP32[(($id)>>2)];
      var $61=$toporient;
      var $62=$apex_addr;
      var $63=$62;
      var $bf_field_offs37=(($63+20)|0);
      var $64=$bf_field_offs37;
      var $65=HEAP32[(($64)>>2)];
      var $bf_clear38=$65 & 16777215;
      var $66=$neighbor;
      var $id39=(($66+72)|0);
      var $67=HEAP32[(($id39)>>2)];
      var $68=HEAP32[(($horizonskip)>>2)];
      var $69=$neighbor;
      var $70=$69;
      var $bf_field_offs40=(($70+76)|0);
      var $71=$bf_field_offs40;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72 >>> 12;
      var $bf_clear41=$73 & 1;
      var $74=$visible_addr;
      var $id42=(($74+72)|0);
      var $75=HEAP32[(($id42)>>2)];
      var $76=HEAP32[(($visibleskip)>>2)];
      var $77=$flip;
      _qh_fprintf($58, 4049, ((5292204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$60,HEAP32[(((tempInt)+(4))>>2)]=$61,HEAP32[(((tempInt)+(8))>>2)]=$bf_clear38,HEAP32[(((tempInt)+(12))>>2)]=$67,HEAP32[(((tempInt)+(16))>>2)]=$68,HEAP32[(((tempInt)+(20))>>2)]=$bf_clear41,HEAP32[(((tempInt)+(24))>>2)]=$75,HEAP32[(((tempInt)+(28))>>2)]=$76,HEAP32[(((tempInt)+(32))>>2)]=$77,tempInt));
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 4; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $78=$newfacet;
      STACKTOP = __stackBase__;
      return $78;
    default: assert(0, "bad label: " + label);
  }

}
_qh_makenew_simplicial["X"]=1;

function _qh_matchneighbor($newfacet, $newskip, $hashsize, $hashcount) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newfacet_addr;
      var $newskip_addr;
      var $hashsize_addr;
      var $hashcount_addr;
      var $newfound;
      var $same=__stackBase__;
      var $ismatch;
      var $hash;
      var $scan;
      var $facet;
      var $matchfacet;
      var $skip=(__stackBase__)+(4);
      var $matchskip;
      $newfacet_addr=$newfacet;
      $newskip_addr=$newskip;
      $hashsize_addr=$hashsize;
      $hashcount_addr=$hashcount;
      $newfound=0;
      var $0=$hashsize_addr;
      var $1=$newfacet_addr;
      var $vertices=(($1+48)|0);
      var $2=HEAP32[(($vertices)>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $4=$newskip_addr;
      var $5=$newfacet_addr;
      var $vertices1=(($5+48)|0);
      var $6=HEAP32[(($vertices1)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e+($4<<2))|0);
      var $p=$arrayidx;
      var $7=HEAP32[(($p)>>2)];
      var $call=_qh_gethash($0, $2, $3, 1, $7);
      $hash=$call;
      var $8=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($8)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=HEAP32[((((5248924)|0))>>2)];
      var $10=$newfacet_addr;
      var $id=(($10+72)|0);
      var $11=HEAP32[(($id)>>2)];
      var $12=$newskip_addr;
      var $13=$hash;
      var $14=$hashcount_addr;
      var $15=HEAP32[(($14)>>2)];
      _qh_fprintf($9, 4050, ((5291060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,HEAP32[(((tempInt)+(8))>>2)]=$13,HEAP32[(((tempInt)+(12))>>2)]=$15,tempInt));
      label = 4; break;
    case 4: 
      var $16=HEAP32[(((((5243788)|0)))>>2)];
      var $inc=((($16)+(1))|0);
      HEAP32[(((((5243788)|0)))>>2)]=$inc;
      var $17=$hash;
      $scan=$17;
      label = 5; break;
    case 5: 
      var $18=$scan;
      var $19=HEAP32[((((5249180)|0))>>2)];
      var $e2=(($19+4)|0);
      var $arrayidx3=(($e2+($18<<2))|0);
      var $p4=$arrayidx3;
      var $20=HEAP32[(($p4)>>2)];
      var $21=$20;
      $facet=$21;
      var $tobool=(($21)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 48; break; }
    case 6: 
      var $22=$facet;
      var $23=$newfacet_addr;
      var $cmp5=(($22)|0)==(($23)|0);
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $newfound=1;
      label = 44; break;
    case 8: 
      var $24=HEAP32[(((((5243812)|0)))>>2)];
      var $inc8=((($24)+(1))|0);
      HEAP32[(((((5243812)|0)))>>2)]=$inc8;
      var $25=$newfacet_addr;
      var $vertices9=(($25+48)|0);
      var $26=HEAP32[(($vertices9)>>2)];
      var $27=$newskip_addr;
      var $28=$facet;
      var $vertices10=(($28+48)|0);
      var $29=HEAP32[(($vertices10)>>2)];
      var $call11=_qh_matchvertices(1, $26, $27, $29, $skip, $same);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) { label = 9; break; } else { label = 43; break; }
    case 9: 
      var $30=$newskip_addr;
      var $31=$newfacet_addr;
      var $vertices14=(($31+48)|0);
      var $32=HEAP32[(($vertices14)>>2)];
      var $e15=(($32+4)|0);
      var $arrayidx16=(($e15+($30<<2))|0);
      var $p17=$arrayidx16;
      var $33=HEAP32[(($p17)>>2)];
      var $34=HEAP32[(($skip)>>2)];
      var $35=$facet;
      var $vertices18=(($35+48)|0);
      var $36=HEAP32[(($vertices18)>>2)];
      var $e19=(($36+4)|0);
      var $arrayidx20=(($e19+($34<<2))|0);
      var $p21=$arrayidx20;
      var $37=HEAP32[(($p21)>>2)];
      var $cmp22=(($33)|0)==(($37)|0);
      if ($cmp22) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _qh_precision(((5289108)|0));
      var $38=HEAP32[((((5248924)|0))>>2)];
      var $39=$facet;
      var $id24=(($39+72)|0);
      var $40=HEAP32[(($id24)>>2)];
      var $41=$newfacet_addr;
      var $id25=(($41+72)|0);
      var $42=HEAP32[(($id25)>>2)];
      _qh_fprintf($38, 6106, ((5286764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$42,tempInt));
      var $43=$facet;
      var $44=$newfacet_addr;
      _qh_errexit2(3, $43, $44);
      label = 11; break;
    case 11: 
      var $45=HEAP32[(($same)>>2)];
      var $46=$newfacet_addr;
      var $47=$46;
      var $bf_field_offs=(($47+76)|0);
      var $48=$bf_field_offs;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 >>> 12;
      var $bf_clear=$50 & 1;
      var $51=$facet;
      var $52=$51;
      var $bf_field_offs27=(($52+76)|0);
      var $53=$bf_field_offs27;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 >>> 12;
      var $bf_clear28=$55 & 1;
      var $xor=$bf_clear ^ $bf_clear28;
      var $cmp29=(($45)|0)==(($xor)|0);
      var $conv=(($cmp29)&1);
      $ismatch=$conv;
      var $56=HEAP32[(($skip)>>2)];
      var $57=$facet;
      var $neighbors=(($57+56)|0);
      var $58=HEAP32[(($neighbors)>>2)];
      var $e30=(($58+4)|0);
      var $arrayidx31=(($e30+($56<<2))|0);
      var $p32=$arrayidx31;
      var $59=HEAP32[(($p32)>>2)];
      var $60=$59;
      $matchfacet=$60;
      var $61=$ismatch;
      var $tobool33=(($61)|0)!=0;
      if ($tobool33) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $62=$matchfacet;
      var $tobool34=(($62)|0)!=0;
      if ($tobool34) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $63=$newfacet_addr;
      var $64=$63;
      var $65=HEAP32[(($skip)>>2)];
      var $66=$facet;
      var $neighbors36=(($66+56)|0);
      var $67=HEAP32[(($neighbors36)>>2)];
      var $e37=(($67+4)|0);
      var $arrayidx38=(($e37+($65<<2))|0);
      var $p39=$arrayidx38;
      HEAP32[(($p39)>>2)]=$64;
      var $68=$facet;
      var $69=$68;
      var $70=$newskip_addr;
      var $71=$newfacet_addr;
      var $neighbors40=(($71+56)|0);
      var $72=HEAP32[(($neighbors40)>>2)];
      var $e41=(($72+4)|0);
      var $arrayidx42=(($e41+($70<<2))|0);
      var $p43=$arrayidx42;
      HEAP32[(($p43)>>2)]=$69;
      var $73=$hashcount_addr;
      var $74=HEAP32[(($73)>>2)];
      var $dec=((($74)-(1))|0);
      HEAP32[(($73)>>2)]=$dec;
      var $75=HEAP32[((((5247040)|0))>>2)];
      var $cmp44=(($75)|0) >= 4;
      if ($cmp44) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $76=HEAP32[((((5248924)|0))>>2)];
      var $77=$facet;
      var $id47=(($77+72)|0);
      var $78=HEAP32[(($id47)>>2)];
      var $79=HEAP32[(($skip)>>2)];
      var $80=$newfacet_addr;
      var $id48=(($80+72)|0);
      var $81=HEAP32[(($id48)>>2)];
      var $82=$newskip_addr;
      _qh_fprintf($76, 4051, ((5285068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$78,HEAP32[(((tempInt)+(4))>>2)]=$79,HEAP32[(((tempInt)+(8))>>2)]=$81,HEAP32[(((tempInt)+(12))>>2)]=$82,tempInt));
      label = 15; break;
    case 15: 
      label = 52; break;
    case 16: 
      var $83=HEAP32[((((5247144)|0))>>2)];
      var $tobool51=(($83)|0)!=0;
      if ($tobool51) { label = 22; break; } else { label = 17; break; }
    case 17: 
      var $84=HEAP32[((((5247076)|0))>>2)];
      var $tobool53=(($84)|0)!=0;
      if ($tobool53) { label = 22; break; } else { label = 18; break; }
    case 18: 
      _qh_precision(((5282876)|0));
      var $85=HEAP32[((((5248924)|0))>>2)];
      var $86=$facet;
      var $id55=(($86+72)|0);
      var $87=HEAP32[(($id55)>>2)];
      var $88=$newfacet_addr;
      var $id56=(($88+72)|0);
      var $89=HEAP32[(($id56)>>2)];
      var $90=$matchfacet;
      var $tobool57=(($90)|0)!=0;
      if ($tobool57) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $91=$matchfacet;
      var $id58=(($91+72)|0);
      var $92=HEAP32[(($id58)>>2)];
      var $cond = $92;label = 21; break;
    case 20: 
      var $cond = -1;label = 21; break;
    case 21: 
      var $cond;
      _qh_fprintf($85, 6107, ((5280764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$87,HEAP32[(((tempInt)+(4))>>2)]=$89,HEAP32[(((tempInt)+(8))>>2)]=$cond,tempInt));
      var $93=$facet;
      var $94=$newfacet_addr;
      _qh_errexit2(3, $93, $94);
      label = 22; break;
    case 22: 
      var $95=$newskip_addr;
      var $96=$newfacet_addr;
      var $neighbors60=(($96+56)|0);
      var $97=HEAP32[(($neighbors60)>>2)];
      var $e61=(($97+4)|0);
      var $arrayidx62=(($e61+($95<<2))|0);
      var $p63=$arrayidx62;
      HEAP32[(($p63)>>2)]=1;
      var $98=$newfacet_addr;
      var $99=$98;
      var $bf_field_offs64=(($99+76)|0);
      var $100=$bf_field_offs64;
      var $101=HEAP32[(($100)>>2)];
      var $102=$101 & -2097153;
      var $103=$102 | 2097152;
      HEAP32[(($100)>>2)]=$103;
      var $104=$newfacet_addr;
      var $normal=(($104+24)|0);
      var $105=HEAP32[(($normal)>>2)];
      var $tobool65=(($105)|0)!=0;
      if ($tobool65) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $106=$newfacet_addr;
      _qh_setfacetplane($106);
      label = 24; break;
    case 24: 
      var $107=$newfacet_addr;
      var $108=$107;
      var $109=HEAP32[((((5249180)|0))>>2)];
      var $110=$hashsize_addr;
      var $111=$hash;
      _qh_addhash($108, $109, $110, $111);
      var $112=$hashcount_addr;
      var $113=HEAP32[(($112)>>2)];
      var $inc68=((($113)+(1))|0);
      HEAP32[(($112)>>2)]=$inc68;
      var $114=$facet;
      var $normal69=(($114+24)|0);
      var $115=HEAP32[(($normal69)>>2)];
      var $tobool70=(($115)|0)!=0;
      if ($tobool70) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $116=$facet;
      _qh_setfacetplane($116);
      label = 26; break;
    case 26: 
      var $117=$matchfacet;
      var $cmp73=(($117)|0)!=1;
      if ($cmp73) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $118=HEAP32[(($skip)>>2)];
      var $119=$facet;
      var $neighbors76=(($119+56)|0);
      var $120=HEAP32[(($neighbors76)>>2)];
      var $e77=(($120+4)|0);
      var $arrayidx78=(($e77+($118<<2))|0);
      var $p79=$arrayidx78;
      HEAP32[(($p79)>>2)]=1;
      var $121=$facet;
      var $122=$121;
      var $bf_field_offs80=(($122+76)|0);
      var $123=$bf_field_offs80;
      var $124=HEAP32[(($123)>>2)];
      var $125=$124 & -2097153;
      var $126=$125 | 2097152;
      HEAP32[(($123)>>2)]=$126;
      var $127=$facet;
      var $normal81=(($127+24)|0);
      var $128=HEAP32[(($normal81)>>2)];
      var $tobool82=(($128)|0)!=0;
      if ($tobool82) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $129=$facet;
      _qh_setfacetplane($129);
      label = 29; break;
    case 29: 
      var $130=$matchfacet;
      var $tobool85=(($130)|0)!=0;
      if ($tobool85) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $131=$matchfacet;
      var $neighbors87=(($131+56)|0);
      var $132=HEAP32[(($neighbors87)>>2)];
      var $133=$facet;
      var $134=$133;
      var $call88=_qh_setindex($132, $134);
      $matchskip=$call88;
      var $135=$matchskip;
      var $136=$matchfacet;
      var $neighbors89=(($136+56)|0);
      var $137=HEAP32[(($neighbors89)>>2)];
      var $e90=(($137+4)|0);
      var $arrayidx91=(($e90+($135<<2))|0);
      var $p92=$arrayidx91;
      HEAP32[(($p92)>>2)]=1;
      var $138=$matchfacet;
      var $139=$138;
      var $bf_field_offs93=(($139+76)|0);
      var $140=$bf_field_offs93;
      var $141=HEAP32[(($140)>>2)];
      var $142=$141 & -2097153;
      var $143=$142 | 2097152;
      HEAP32[(($140)>>2)]=$143;
      var $144=$matchfacet;
      var $normal94=(($144+24)|0);
      var $145=HEAP32[(($normal94)>>2)];
      var $tobool95=(($145)|0)!=0;
      if ($tobool95) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $146=$matchfacet;
      _qh_setfacetplane($146);
      label = 32; break;
    case 32: 
      var $147=$matchfacet;
      var $148=$147;
      var $149=HEAP32[((((5249180)|0))>>2)];
      var $150=$hashsize_addr;
      var $151=$hash;
      _qh_addhash($148, $149, $150, $151);
      var $152=$hashcount_addr;
      var $153=HEAP32[(($152)>>2)];
      var $add=((($153)+(2))|0);
      HEAP32[(($152)>>2)]=$add;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $154=HEAP32[((((5247040)|0))>>2)];
      var $cmp100=(($154)|0) >= 4;
      if ($cmp100) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $155=HEAP32[((((5248924)|0))>>2)];
      var $156=$newfacet_addr;
      var $id103=(($156+72)|0);
      var $157=HEAP32[(($id103)>>2)];
      var $158=$newskip_addr;
      var $159=$facet;
      var $id104=(($159+72)|0);
      var $160=HEAP32[(($id104)>>2)];
      var $161=HEAP32[(($skip)>>2)];
      var $162=$matchfacet;
      var $cmp105=(($162)|0)==1;
      if ($cmp105) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $cond116 = -2;label = 41; break;
    case 37: 
      var $163=$matchfacet;
      var $tobool109=(($163)|0)!=0;
      if ($tobool109) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$matchfacet;
      var $id111=(($164+72)|0);
      var $165=HEAP32[(($id111)>>2)];
      var $cond114 = $165;label = 40; break;
    case 39: 
      var $cond114 = -1;label = 40; break;
    case 40: 
      var $cond114;
      var $cond116 = $cond114;label = 41; break;
    case 41: 
      var $cond116;
      var $166=$ismatch;
      var $167=$hash;
      _qh_fprintf($155, 4052, ((5279992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$157,HEAP32[(((tempInt)+(4))>>2)]=$158,HEAP32[(((tempInt)+(8))>>2)]=$160,HEAP32[(((tempInt)+(12))>>2)]=$161,HEAP32[(((tempInt)+(16))>>2)]=$cond116,HEAP32[(((tempInt)+(20))>>2)]=$166,HEAP32[(((tempInt)+(24))>>2)]=$167,tempInt));
      label = 42; break;
    case 42: 
      label = 52; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $168=$scan;
      var $inc119=((($168)+(1))|0);
      $scan=$inc119;
      var $169=$hashsize_addr;
      var $cmp120=(($inc119)|0) >= (($169)|0);
      if ($cmp120) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $cond125 = 0;label = 47; break;
    case 46: 
      var $170=$scan;
      var $cond125 = $170;label = 47; break;
    case 47: 
      var $cond125;
      $scan=$cond125;
      label = 5; break;
    case 48: 
      var $171=$newfound;
      var $tobool126=(($171)|0)!=0;
      if ($tobool126) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $172=$newfacet_addr;
      var $173=$172;
      var $174=$scan;
      var $175=HEAP32[((((5249180)|0))>>2)];
      var $e128=(($175+4)|0);
      var $arrayidx129=(($e128+($174<<2))|0);
      var $p130=$arrayidx129;
      HEAP32[(($p130)>>2)]=$173;
      label = 50; break;
    case 50: 
      var $176=$hashcount_addr;
      var $177=HEAP32[(($176)>>2)];
      var $inc132=((($177)+(1))|0);
      HEAP32[(($176)>>2)]=$inc132;
      var $178=HEAP32[((((5247040)|0))>>2)];
      var $cmp133=(($178)|0) >= 4;
      if ($cmp133) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $179=HEAP32[((((5248924)|0))>>2)];
      var $180=$newfacet_addr;
      var $id136=(($180+72)|0);
      var $181=HEAP32[(($id136)>>2)];
      var $182=$newskip_addr;
      var $183=$hash;
      _qh_fprintf($179, 4053, ((5279404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$181,HEAP32[(((tempInt)+(4))>>2)]=$182,HEAP32[(((tempInt)+(8))>>2)]=$183,tempInt));
      label = 52; break;
    case 52: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_matchneighbor["X"]=1;

function _qh_matchvertices($firstindex, $verticesA, $skipA, $verticesB, $skipB, $same) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $firstindex_addr;
      var $verticesA_addr;
      var $skipA_addr;
      var $verticesB_addr;
      var $skipB_addr;
      var $same_addr;
      var $elemAp;
      var $elemBp;
      var $skipBp;
      var $skipAp;
      $firstindex_addr=$firstindex;
      $verticesA_addr=$verticesA;
      $skipA_addr=$skipA;
      $verticesB_addr=$verticesB;
      $skipB_addr=$skipB;
      $same_addr=$same;
      $skipBp=0;
      var $0=$firstindex_addr;
      var $1=$verticesA_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e+($0<<2))|0);
      var $p=$arrayidx;
      var $2=$p;
      $elemAp=$2;
      var $3=$firstindex_addr;
      var $4=$verticesB_addr;
      var $e1=(($4+4)|0);
      var $arrayidx2=(($e1+($3<<2))|0);
      var $p3=$arrayidx2;
      var $5=$p3;
      $elemBp=$5;
      var $6=$skipA_addr;
      var $7=$verticesA_addr;
      var $e4=(($7+4)|0);
      var $arrayidx5=(($e4+($6<<2))|0);
      var $p6=$arrayidx5;
      var $8=$p6;
      $skipAp=$8;
      label = 3; break;
    case 3: 
      var $9=$elemAp;
      var $10=$skipAp;
      var $cmp=(($9)|0)!=(($10)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $11=$elemAp;
      var $12=HEAP32[(($11)>>2)];
      var $13=$elemBp;
      var $incdec_ptr=(($13+4)|0);
      $elemBp=$incdec_ptr;
      var $14=HEAP32[(($13)>>2)];
      var $cmp7=(($12)|0)!=(($14)|0);
      if ($cmp7) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $15=$skipBp;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 17; break;
    case 8: 
      var $16=$elemBp;
      $skipBp=$16;
      label = 5; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$elemAp;
      var $incdec_ptr10=(($17+4)|0);
      $elemAp=$incdec_ptr10;
      var $18=HEAP32[(($incdec_ptr10)>>2)];
      var $tobool11=(($18)|0)!=0;
      if ($tobool11) { label = 3; break; } else { label = 12; break; }
    case 12: 
      var $19=$skipBp;
      var $tobool12=(($19)|0)!=0;
      if ($tobool12) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $20=$elemBp;
      var $incdec_ptr14=(($20+4)|0);
      $elemBp=$incdec_ptr14;
      $skipBp=$incdec_ptr14;
      label = 14; break;
    case 14: 
      var $21=$skipBp;
      var $22=$21;
      var $23=$verticesB_addr;
      var $e16=(($23+4)|0);
      var $arrayidx17=(($e16+4)|0);
      var $p18=$arrayidx17;
      var $sub_ptr_lhs_cast=$22;
      var $sub_ptr_rhs_cast=$p18;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $24=$skipB_addr;
      HEAP32[(($24)>>2)]=$sub_ptr_div;
      var $25=$skipA_addr;
      var $and=$25 & 1;
      var $26=$skipB_addr;
      var $27=HEAP32[(($26)>>2)];
      var $and19=$27 & 1;
      var $xor=$and ^ $and19;
      var $tobool20=(($xor)|0)!=0;
      var $lnot=$tobool20 ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $28=$same_addr;
      HEAP32[(($28)>>2)]=$lnot_ext;
      var $29=HEAP32[((((5247040)|0))>>2)];
      var $cmp21=(($29)|0) >= 4;
      if ($cmp21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=HEAP32[((((5248924)|0))>>2)];
      var $31=$skipA_addr;
      var $32=$skipAp;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      var $bf_field_offs=(($34+20)|0);
      var $35=$bf_field_offs;
      var $36=HEAP32[(($35)>>2)];
      var $bf_clear=$36 & 16777215;
      var $37=$skipB_addr;
      var $38=HEAP32[(($37)>>2)];
      var $39=$skipBp;
      var $add_ptr=((($39)-(4))|0);
      var $40=HEAP32[(($add_ptr)>>2)];
      var $41=$40;
      var $bf_field_offs23=(($41+20)|0);
      var $42=$bf_field_offs23;
      var $43=HEAP32[(($42)>>2)];
      var $bf_clear24=$43 & 16777215;
      var $44=$same_addr;
      var $45=HEAP32[(($44)>>2)];
      _qh_fprintf($30, 4054, ((5276492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,HEAP32[(((tempInt)+(8))>>2)]=$38,HEAP32[(((tempInt)+(12))>>2)]=$bf_clear24,HEAP32[(((tempInt)+(16))>>2)]=$45,tempInt));
      label = 16; break;
    case 16: 
      $retval=1;
      label = 17; break;
    case 17: 
      var $46=$retval;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }

}
_qh_matchvertices["X"]=1;

function _qh_matchnewfacets() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $numnew;
      var $hashcount=__stackBase__;
      var $newskip;
      var $newfacet;
      var $neighbor;
      var $dim;
      var $hashsize;
      var $neighbor_i;
      var $neighbor_n;
      var $neighbors;
      var $facet_i;
      var $facet_n;
      var $numfree;
      var $facet;
      $numnew=0;
      HEAP32[(($hashcount)>>2)]=0;
      var $0=HEAP32[((((5247508)|0))>>2)];
      $dim=$0;
      $numfree=0;
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 1019, ((5278360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $3=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$3;
      label = 5; break;
    case 5: 
      var $4=$newfacet;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $7 = 0;label = 7; break; }
    case 6: 
      var $5=$newfacet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool1=(($6)|0)!=0;
      var $7 = $tobool1;label = 7; break;
    case 7: 
      var $7;
      if ($7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $8=$numnew;
      var $inc=((($8)+(1))|0);
      $numnew=$inc;
      var $9=$newfacet;
      var $neighbors2=(($9+56)|0);
      var $10=HEAP32[(($neighbors2)>>2)];
      $neighbors=$10;
      var $11=$dim;
      var $add=((($11)+(1))|0);
      var $12=$neighbors;
      var $maxsize=(($12)|0);
      var $13=HEAP32[(($maxsize)>>2)];
      var $14=$neighbors;
      var $e=(($14+4)|0);
      var $arrayidx=(($e+($13<<2))|0);
      var $i=$arrayidx;
      HEAP32[(($i)>>2)]=$add;
      var $15=$neighbors;
      var $e3=(($15+4)|0);
      var $arrayidx4=(($e3+4)|0);
      var $p=$arrayidx4;
      var $16=$p;
      var $17=$dim;
      var $mul=((($17<<2))&-1);
      _memset($16, 0, $mul);
      label = 9; break;
    case 9: 
      var $18=$newfacet;
      var $next5=(($18+44)|0);
      var $19=HEAP32[(($next5)>>2)];
      $newfacet=$19;
      label = 5; break;
    case 10: 
      var $20=$numnew;
      var $21=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($21)-(1))|0);
      var $mul6=((($20)*($sub))&-1);
      var $call=_qh_newhashtable($mul6);
      var $22=HEAP32[((((5249180)|0))>>2)];
      var $call7=_qh_setsize($22);
      $hashsize=$call7;
      var $23=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$23;
      label = 11; break;
    case 11: 
      var $24=$newfacet;
      var $tobool9=(($24)|0)!=0;
      if ($tobool9) { label = 12; break; } else { var $27 = 0;label = 13; break; }
    case 12: 
      var $25=$newfacet;
      var $next11=(($25+44)|0);
      var $26=HEAP32[(($next11)>>2)];
      var $tobool12=(($26)|0)!=0;
      var $27 = $tobool12;label = 13; break;
    case 13: 
      var $27;
      if ($27) { label = 14; break; } else { label = 20; break; }
    case 14: 
      $newskip=1;
      label = 15; break;
    case 15: 
      var $28=$newskip;
      var $29=HEAP32[((((5247508)|0))>>2)];
      var $cmp16=(($28)|0) < (($29)|0);
      if ($cmp16) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $30=$newfacet;
      var $31=$newskip;
      var $32=$hashsize;
      _qh_matchneighbor($30, $31, $32, $hashcount);
      label = 17; break;
    case 17: 
      var $33=$newskip;
      var $inc19=((($33)+(1))|0);
      $newskip=$inc19;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $34=$newfacet;
      var $next22=(($34+44)|0);
      var $35=HEAP32[(($next22)>>2)];
      $newfacet=$35;
      label = 11; break;
    case 20: 
      var $36=HEAP32[(($hashcount)>>2)];
      var $tobool24=(($36)|0)!=0;
      if ($tobool24) { label = 21; break; } else { label = 38; break; }
    case 21: 
      var $37=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$37;
      label = 22; break;
    case 22: 
      var $38=$newfacet;
      var $tobool27=(($38)|0)!=0;
      if ($tobool27) { label = 23; break; } else { var $41 = 0;label = 24; break; }
    case 23: 
      var $39=$newfacet;
      var $next29=(($39+44)|0);
      var $40=HEAP32[(($next29)>>2)];
      var $tobool30=(($40)|0)!=0;
      var $41 = $tobool30;label = 24; break;
    case 24: 
      var $41;
      if ($41) { label = 25; break; } else { label = 37; break; }
    case 25: 
      var $42=$newfacet;
      var $43=$42;
      var $bf_field_offs=(($43+76)|0);
      var $44=$bf_field_offs;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 21;
      var $bf_clear=$46 & 1;
      var $tobool33=(($bf_clear)|0)!=0;
      if ($tobool33) { label = 26; break; } else { label = 35; break; }
    case 26: 
      $neighbor=0;
      var $47=$newfacet;
      var $neighbors35=(($47+56)|0);
      var $48=HEAP32[(($neighbors35)>>2)];
      var $tobool36=(($48)|0)!=0;
      if ($tobool36) { label = 27; break; } else { label = 34; break; }
    case 27: 
      $neighbor_i=0;
      var $49=$newfacet;
      var $neighbors38=(($49+56)|0);
      var $50=HEAP32[(($neighbors38)>>2)];
      var $e39=(($50+4)|0);
      var $arrayidx40=(($e39)|0);
      var $p41=$arrayidx40;
      var $51=HEAP32[(($p41)>>2)];
      var $52=$51;
      $neighbor=$52;
      var $53=$newfacet;
      var $neighbors42=(($53+56)|0);
      var $54=HEAP32[(($neighbors42)>>2)];
      var $call43=_qh_setsize($54);
      $neighbor_n=$call43;
      label = 28; break;
    case 28: 
      var $55=$neighbor_i;
      var $56=$neighbor_n;
      var $cmp45=(($55)|0) < (($56)|0);
      if ($cmp45) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $57=$neighbor;
      var $cmp47=(($57)|0)==1;
      if ($cmp47) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $58=$newfacet;
      var $59=$neighbor_i;
      var $60=$hashsize;
      _qh_matchduplicates($58, $59, $60, $hashcount);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $61=$neighbor_i;
      var $inc51=((($61)+(1))|0);
      $neighbor_i=$inc51;
      var $62=$newfacet;
      var $neighbors52=(($62+56)|0);
      var $63=HEAP32[(($neighbors52)>>2)];
      var $e53=(($63+4)|0);
      var $arrayidx54=(($e53+($inc51<<2))|0);
      var $p55=$arrayidx54;
      var $64=HEAP32[(($p55)>>2)];
      var $65=$64;
      $neighbor=$65;
      label = 28; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $66=$newfacet;
      var $next60=(($66+44)|0);
      var $67=HEAP32[(($next60)>>2)];
      $newfacet=$67;
      label = 22; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $68=HEAP32[(($hashcount)>>2)];
      var $tobool63=(($68)|0)!=0;
      if ($tobool63) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $69=HEAP32[((((5248924)|0))>>2)];
      var $70=HEAP32[(($hashcount)>>2)];
      _qh_fprintf($69, 6108, ((5277636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$70,tempInt));
      var $71=HEAP32[((((5248924)|0))>>2)];
      _qh_printhashtable($71);
      _qh_errexit(5, 0, 0);
      label = 40; break;
    case 40: 
      var $72=HEAP32[((((5247040)|0))>>2)];
      var $cmp66=(($72)|0) >= 2;
      if ($cmp66) { label = 41; break; } else { label = 50; break; }
    case 41: 
      $facet=0;
      var $73=HEAP32[((((5249180)|0))>>2)];
      var $tobool68=(($73)|0)!=0;
      if ($tobool68) { label = 42; break; } else { label = 49; break; }
    case 42: 
      $facet_i=0;
      var $74=HEAP32[((((5249180)|0))>>2)];
      var $e70=(($74+4)|0);
      var $arrayidx71=(($e70)|0);
      var $p72=$arrayidx71;
      var $75=HEAP32[(($p72)>>2)];
      var $76=$75;
      $facet=$76;
      var $77=HEAP32[((((5249180)|0))>>2)];
      var $call73=_qh_setsize($77);
      $facet_n=$call73;
      label = 43; break;
    case 43: 
      var $78=$facet_i;
      var $79=$facet_n;
      var $cmp75=(($78)|0) < (($79)|0);
      if ($cmp75) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $80=$facet;
      var $tobool77=(($80)|0)!=0;
      if ($tobool77) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $81=$numfree;
      var $inc79=((($81)+(1))|0);
      $numfree=$inc79;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $82=$facet_i;
      var $inc82=((($82)+(1))|0);
      $facet_i=$inc82;
      var $83=HEAP32[((((5249180)|0))>>2)];
      var $e83=(($83+4)|0);
      var $arrayidx84=(($e83+($inc82<<2))|0);
      var $p85=$arrayidx84;
      var $84=HEAP32[(($p85)>>2)];
      var $85=$84;
      $facet=$85;
      label = 43; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $86=HEAP32[((((5248924)|0))>>2)];
      var $87=$numnew;
      var $88=$numfree;
      var $89=HEAP32[((((5249180)|0))>>2)];
      var $call88=_qh_setsize($89);
      _qh_fprintf($86, 8089, ((5276972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$87,HEAP32[(((tempInt)+(4))>>2)]=$88,HEAP32[(((tempInt)+(8))>>2)]=$call88,tempInt));
      label = 50; break;
    case 50: 
      _qh_setfree(((5249180)|0));
      var $90=HEAP32[((((5247144)|0))>>2)];
      var $tobool90=(($90)|0)!=0;
      if ($tobool90) { label = 52; break; } else { label = 51; break; }
    case 51: 
      var $91=HEAP32[((((5247076)|0))>>2)];
      var $tobool91=(($91)|0)!=0;
      if ($tobool91) { label = 52; break; } else { label = 63; break; }
    case 52: 
      var $92=HEAP32[((((5247040)|0))>>2)];
      var $cmp93=(($92)|0) >= 4;
      if ($cmp93) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $93=HEAP32[((((5248956)|0))>>2)];
      _qh_printfacetlist($93, 0, 1);
      label = 54; break;
    case 54: 
      var $94=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$94;
      label = 55; break;
    case 55: 
      var $95=$newfacet;
      var $tobool97=(($95)|0)!=0;
      if ($tobool97) { label = 56; break; } else { var $98 = 0;label = 57; break; }
    case 56: 
      var $96=$newfacet;
      var $next99=(($96+44)|0);
      var $97=HEAP32[(($next99)>>2)];
      var $tobool100=(($97)|0)!=0;
      var $98 = $tobool100;label = 57; break;
    case 57: 
      var $98;
      if ($98) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $99=$newfacet;
      var $normal=(($99+24)|0);
      var $100=HEAP32[(($normal)>>2)];
      var $tobool103=(($100)|0)!=0;
      if ($tobool103) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $101=$newfacet;
      var $call105=_qh_checkflipped($101, 0, 1);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $102=$newfacet;
      var $next108=(($102+44)|0);
      var $103=HEAP32[(($next108)>>2)];
      $newfacet=$103;
      label = 55; break;
    case 62: 
      label = 66; break;
    case 63: 
      var $104=HEAP32[((((5247012)|0))>>2)];
      var $tobool110=(($104)|0)!=0;
      if ($tobool110) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $105=HEAP32[((((5248956)|0))>>2)];
      _qh_checkflipped_all($105);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_matchnewfacets["X"]=1;

function _qh_newridge() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ridge;
      var $freelistp;
      $freelistp=0;
      var $call=_qh_memalloc(16);
      var $0=$call;
      $ridge=$0;
      var $1=$ridge;
      var $2=$1;
      for (var $$dest = $2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      var $3=HEAP32[(((((5244604)|0)))>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[(((((5244604)|0)))>>2)]=$inc;
      var $4=HEAP32[(((((5249016)|0)))>>2)];
      var $bf_clear=$4 & 16777215;
      var $cmp=(($bf_clear)|0)==16777215;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($5, 7074, ((5275272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=16777215,tempInt));
      label = 4; break;
    case 4: 
      var $6=HEAP32[(((((5249016)|0)))>>2)];
      var $bf_clear1=$6 & 16777215;
      var $inc2=((($bf_clear1)+(1))|0);
      var $bf_value=$inc2 & 16777215;
      var $7=$bf_value & 16777215;
      var $8=HEAP32[(((((5249016)|0)))>>2)];
      var $9=$8 & -16777216;
      var $10=$9 | $7;
      HEAP32[(((((5249016)|0)))>>2)]=$10;
      var $11=$ridge;
      var $bf_value3=$bf_clear1 & 16777215;
      var $12=$11;
      var $bf_field_offs=(($12+12)|0);
      var $13=$bf_field_offs;
      var $14=$bf_value3 & 16777215;
      var $15=HEAP32[(($13)>>2)];
      var $16=$15 & -16777216;
      var $17=$16 | $14;
      HEAP32[(($13)>>2)]=$17;
      var $18=HEAP32[((((5247040)|0))>>2)];
      var $cmp4=(($18)|0) >= 4;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=HEAP32[((((5248924)|0))>>2)];
      var $20=$ridge;
      var $21=$20;
      var $bf_field_offs6=(($21+12)|0);
      var $22=$bf_field_offs6;
      var $23=HEAP32[(($22)>>2)];
      var $bf_clear7=$23 & 16777215;
      _qh_fprintf($19, 4056, ((5274672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear7,tempInt));
      label = 6; break;
    case 6: 
      var $24=$ridge;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }

}
_qh_newridge["X"]=1;

function _qh_pointid($point) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $point_addr;
      var $offset;
      var $id;
      $point_addr=$point;
      var $0=$point_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-3;
      label = 16; break;
    case 4: 
      var $1=$point_addr;
      var $2=HEAP32[((((5248928)|0))>>2)];
      var $cmp=(($1)|0)==(($2)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-2;
      label = 16; break;
    case 6: 
      var $3=$point_addr;
      var $4=HEAP32[((((5247520)|0))>>2)];
      var $cmp3=(($3)>>>0) >= (($4)>>>0);
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $5=$point_addr;
      var $6=HEAP32[((((5247520)|0))>>2)];
      var $7=HEAP32[((((5247516)|0))>>2)];
      var $8=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($7)*($8))&-1);
      var $add_ptr=(($6+($mul<<3))|0);
      var $cmp4=(($5)>>>0) < (($add_ptr)>>>0);
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$point_addr;
      var $10=HEAP32[((((5247520)|0))>>2)];
      var $sub_ptr_lhs_cast=$9;
      var $sub_ptr_rhs_cast=$10;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(8))&-1);
      $offset=$sub_ptr_div;
      var $11=$offset;
      var $12=HEAP32[((((5247508)|0))>>2)];
      var $div=((((($11)|0))/((($12)|0)))&-1);
      $id=$div;
      label = 13; break;
    case 9: 
      var $13=HEAP32[((((5249184)|0))>>2)];
      var $14=$point_addr;
      var $15=$14;
      var $call=_qh_setindex($13, $15);
      $id=$call;
      var $cmp7=(($call)|0)!=-1;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=HEAP32[((((5247516)|0))>>2)];
      var $17=$id;
      var $add=((($17)+($16))|0);
      $id=$add;
      label = 12; break;
    case 11: 
      $retval=-1;
      label = 16; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $18=$id;
      $retval=$18;
      label = 16; break;
    case 16: 
      var $19=$retval;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_qh_pointid["X"]=1;

function _qh_addhash($newelem, $hashtable, $hashsize, $hash) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newelem_addr;
      var $hashtable_addr;
      var $hashsize_addr;
      var $hash_addr;
      var $scan;
      var $elem;
      $newelem_addr=$newelem;
      $hashtable_addr=$hashtable;
      $hashsize_addr=$hashsize;
      $hash_addr=$hash;
      var $0=$hash_addr;
      $scan=$0;
      label = 3; break;
    case 3: 
      var $1=$scan;
      var $2=$hashtable_addr;
      var $e=(($2+4)|0);
      var $arrayidx=(($e+($1<<2))|0);
      var $p=$arrayidx;
      var $3=HEAP32[(($p)>>2)];
      $elem=$3;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $4=$elem;
      var $5=$newelem_addr;
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 11; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$scan;
      var $inc=((($6)+(1))|0);
      $scan=$inc;
      var $7=$hashsize_addr;
      var $cmp1=(($inc)|0) >= (($7)|0);
      if ($cmp1) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $cond = 0;label = 10; break;
    case 9: 
      var $8=$scan;
      var $cond = $8;label = 10; break;
    case 10: 
      var $cond;
      $scan=$cond;
      label = 3; break;
    case 11: 
      var $9=$elem;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $10=$newelem_addr;
      var $11=$scan;
      var $12=$hashtable_addr;
      var $e4=(($12+4)|0);
      var $arrayidx5=(($e4+($11<<2))|0);
      var $p6=$arrayidx5;
      HEAP32[(($p6)>>2)]=$10;
      label = 13; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_addhash["X"]=1;

function _qh_updatevertices() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newfacet;
      var $neighbor;
      var $neighborp;
      var $visible;
      var $vertex;
      var $vertexp;
      $newfacet=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 3013, ((5272976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5248580)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 56; break; }
    case 5: 
      var $3=HEAP32[((((5248992)|0))>>2)];
      $vertex=$3;
      label = 6; break;
    case 6: 
      var $4=$vertex;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $7 = 0;label = 8; break; }
    case 7: 
      var $5=$vertex;
      var $next=(($5)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool3=(($6)|0)!=0;
      var $7 = $tobool3;label = 8; break;
    case 8: 
      var $7;
      if ($7) { label = 9; break; } else { label = 18; break; }
    case 9: 
      $neighbor=0;
      var $8=$vertex;
      var $neighbors=(($8+12)|0);
      var $9=HEAP32[(($neighbors)>>2)];
      var $tobool4=(($9)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $10=$vertex;
      var $neighbors6=(($10+12)|0);
      var $11=HEAP32[(($neighbors6)>>2)];
      var $e=(($11+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $12=$p;
      $neighborp=$12;
      label = 11; break;
    case 11: 
      var $13=$neighborp;
      var $incdec_ptr=(($13+4)|0);
      $neighborp=$incdec_ptr;
      var $14=HEAP32[(($13)>>2)];
      $neighbor=$14;
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $15=$neighbor;
      var $16=$15;
      var $bf_field_offs=(($16+76)|0);
      var $17=$bf_field_offs;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 >>> 11;
      var $bf_clear=$19 & 1;
      var $tobool10=(($bf_clear)|0)!=0;
      if ($tobool10) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$neighborp;
      var $arrayidx12=((($20)-(4))|0);
      HEAP32[(($arrayidx12)>>2)]=0;
      label = 14; break;
    case 14: 
      label = 11; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$vertex;
      var $neighbors15=(($21+12)|0);
      var $22=HEAP32[(($neighbors15)>>2)];
      _qh_setcompact($22);
      label = 17; break;
    case 17: 
      var $23=$vertex;
      var $next16=(($23)|0);
      var $24=HEAP32[(($next16)>>2)];
      $vertex=$24;
      label = 6; break;
    case 18: 
      var $25=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$25;
      label = 19; break;
    case 19: 
      var $26=$newfacet;
      var $tobool19=(($26)|0)!=0;
      if ($tobool19) { label = 20; break; } else { var $29 = 0;label = 21; break; }
    case 20: 
      var $27=$newfacet;
      var $next21=(($27+44)|0);
      var $28=HEAP32[(($next21)>>2)];
      var $tobool22=(($28)|0)!=0;
      var $29 = $tobool22;label = 21; break;
    case 21: 
      var $29;
      if ($29) { label = 22; break; } else { label = 29; break; }
    case 22: 
      $vertex=0;
      var $30=$newfacet;
      var $vertices=(($30+48)|0);
      var $31=HEAP32[(($vertices)>>2)];
      var $tobool25=(($31)|0)!=0;
      if ($tobool25) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $32=$newfacet;
      var $vertices27=(($32+48)|0);
      var $33=HEAP32[(($vertices27)>>2)];
      var $e28=(($33+4)|0);
      var $arrayidx29=(($e28)|0);
      var $p30=$arrayidx29;
      var $34=$p30;
      $vertexp=$34;
      label = 24; break;
    case 24: 
      var $35=$vertexp;
      var $incdec_ptr32=(($35+4)|0);
      $vertexp=$incdec_ptr32;
      var $36=HEAP32[(($35)>>2)];
      $vertex=$36;
      var $tobool33=(($36)|0)!=0;
      if ($tobool33) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $37=$vertex;
      var $neighbors35=(($37+12)|0);
      var $38=$newfacet;
      var $39=$38;
      _qh_setappend($neighbors35, $39);
      label = 24; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $40=$newfacet;
      var $next39=(($40+44)|0);
      var $41=HEAP32[(($next39)>>2)];
      $newfacet=$41;
      label = 19; break;
    case 29: 
      var $42=HEAP32[((((5248960)|0))>>2)];
      $visible=$42;
      label = 30; break;
    case 30: 
      var $43=$visible;
      var $tobool42=(($43)|0)!=0;
      if ($tobool42) { label = 31; break; } else { var $49 = 0;label = 32; break; }
    case 31: 
      var $44=$visible;
      var $45=$44;
      var $bf_field_offs44=(($45+76)|0);
      var $46=$bf_field_offs44;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 >>> 11;
      var $bf_clear45=$48 & 1;
      var $tobool46=(($bf_clear45)|0)!=0;
      var $49 = $tobool46;label = 32; break;
    case 32: 
      var $49;
      if ($49) { label = 33; break; } else { label = 55; break; }
    case 33: 
      $vertex=0;
      var $50=$visible;
      var $vertices49=(($50+48)|0);
      var $51=HEAP32[(($vertices49)>>2)];
      var $tobool50=(($51)|0)!=0;
      if ($tobool50) { label = 34; break; } else { label = 53; break; }
    case 34: 
      var $52=$visible;
      var $vertices52=(($52+48)|0);
      var $53=HEAP32[(($vertices52)>>2)];
      var $e53=(($53+4)|0);
      var $arrayidx54=(($e53)|0);
      var $p55=$arrayidx54;
      var $54=$p55;
      $vertexp=$54;
      label = 35; break;
    case 35: 
      var $55=$vertexp;
      var $incdec_ptr57=(($55+4)|0);
      $vertexp=$incdec_ptr57;
      var $56=HEAP32[(($55)>>2)];
      $vertex=$56;
      var $tobool58=(($56)|0)!=0;
      if ($tobool58) { label = 36; break; } else { label = 52; break; }
    case 36: 
      var $57=$vertex;
      var $58=$57;
      var $bf_field_offs60=(($58+20)|0);
      var $59=$bf_field_offs60;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60 >>> 31;
      var $bf_clear61=$61 & 1;
      var $tobool62=(($bf_clear61)|0)!=0;
      if ($tobool62) { label = 51; break; } else { label = 37; break; }
    case 37: 
      var $62=$vertex;
      var $63=$62;
      var $bf_field_offs63=(($63+20)|0);
      var $64=$bf_field_offs63;
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 >>> 30;
      var $bf_clear64=$66 & 1;
      var $tobool65=(($bf_clear64)|0)!=0;
      if ($tobool65) { label = 51; break; } else { label = 38; break; }
    case 38: 
      $neighbor=0;
      var $67=$vertex;
      var $neighbors67=(($67+12)|0);
      var $68=HEAP32[(($neighbors67)>>2)];
      var $tobool68=(($68)|0)!=0;
      if ($tobool68) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $69=$vertex;
      var $neighbors70=(($69+12)|0);
      var $70=HEAP32[(($neighbors70)>>2)];
      var $e71=(($70+4)|0);
      var $arrayidx72=(($e71)|0);
      var $p73=$arrayidx72;
      var $71=$p73;
      $neighborp=$71;
      label = 40; break;
    case 40: 
      var $72=$neighborp;
      var $incdec_ptr75=(($72+4)|0);
      $neighborp=$incdec_ptr75;
      var $73=HEAP32[(($72)>>2)];
      $neighbor=$73;
      var $tobool76=(($73)|0)!=0;
      if ($tobool76) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $74=$neighbor;
      var $75=$74;
      var $bf_field_offs78=(($75+76)|0);
      var $76=$bf_field_offs78;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 >>> 11;
      var $bf_clear79=$78 & 1;
      var $tobool80=(($bf_clear79)|0)!=0;
      if ($tobool80) { label = 43; break; } else { label = 42; break; }
    case 42: 
      label = 44; break;
    case 43: 
      label = 40; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $79=$neighbor;
      var $tobool85=(($79)|0)!=0;
      if ($tobool85) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $80=$vertex;
      var $neighbors87=(($80+12)|0);
      var $81=HEAP32[(($neighbors87)>>2)];
      var $82=$visible;
      var $83=$82;
      var $call=_qh_setdel($81, $83);
      label = 50; break;
    case 47: 
      var $84=$vertex;
      var $85=$84;
      var $bf_field_offs88=(($85+20)|0);
      var $86=$bf_field_offs88;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & -1073741825;
      var $89=$88 | 1073741824;
      HEAP32[(($86)>>2)]=$89;
      var $90=$vertex;
      var $91=$90;
      _qh_setappend(((5249188)|0), $91);
      var $92=HEAP32[((((5247040)|0))>>2)];
      var $cmp89=(($92)|0) >= 2;
      if ($cmp89) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $93=HEAP32[((((5248924)|0))>>2)];
      var $94=$vertex;
      var $point=(($94+8)|0);
      var $95=HEAP32[(($point)>>2)];
      var $call91=_qh_pointid($95);
      var $96=$vertex;
      var $97=$96;
      var $bf_field_offs92=(($97+20)|0);
      var $98=$bf_field_offs92;
      var $99=HEAP32[(($98)>>2)];
      var $bf_clear93=$99 & 16777215;
      var $100=$visible;
      var $id=(($100+72)|0);
      var $101=HEAP32[(($id)>>2)];
      _qh_fprintf($93, 2041, ((5272436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call91,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear93,HEAP32[(((tempInt)+(8))>>2)]=$101,tempInt));
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 35; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $102=$visible;
      var $next100=(($102+44)|0);
      var $103=HEAP32[(($next100)>>2)];
      $visible=$103;
      label = 30; break;
    case 55: 
      label = 73; break;
    case 56: 
      var $104=HEAP32[((((5248960)|0))>>2)];
      $visible=$104;
      label = 57; break;
    case 57: 
      var $105=$visible;
      var $tobool104=(($105)|0)!=0;
      if ($tobool104) { label = 58; break; } else { var $111 = 0;label = 59; break; }
    case 58: 
      var $106=$visible;
      var $107=$106;
      var $bf_field_offs106=(($107+76)|0);
      var $108=$bf_field_offs106;
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 >>> 11;
      var $bf_clear107=$110 & 1;
      var $tobool108=(($bf_clear107)|0)!=0;
      var $111 = $tobool108;label = 59; break;
    case 59: 
      var $111;
      if ($111) { label = 60; break; } else { label = 72; break; }
    case 60: 
      $vertex=0;
      var $112=$visible;
      var $vertices111=(($112+48)|0);
      var $113=HEAP32[(($vertices111)>>2)];
      var $tobool112=(($113)|0)!=0;
      if ($tobool112) { label = 61; break; } else { label = 70; break; }
    case 61: 
      var $114=$visible;
      var $vertices114=(($114+48)|0);
      var $115=HEAP32[(($vertices114)>>2)];
      var $e115=(($115+4)|0);
      var $arrayidx116=(($e115)|0);
      var $p117=$arrayidx116;
      var $116=$p117;
      $vertexp=$116;
      label = 62; break;
    case 62: 
      var $117=$vertexp;
      var $incdec_ptr119=(($117+4)|0);
      $vertexp=$incdec_ptr119;
      var $118=HEAP32[(($117)>>2)];
      $vertex=$118;
      var $tobool120=(($118)|0)!=0;
      if ($tobool120) { label = 63; break; } else { label = 69; break; }
    case 63: 
      var $119=$vertex;
      var $120=$119;
      var $bf_field_offs122=(($120+20)|0);
      var $121=$bf_field_offs122;
      var $122=HEAP32[(($121)>>2)];
      var $123=$122 >>> 31;
      var $bf_clear123=$123 & 1;
      var $tobool124=(($bf_clear123)|0)!=0;
      if ($tobool124) { label = 68; break; } else { label = 64; break; }
    case 64: 
      var $124=$vertex;
      var $125=$124;
      var $bf_field_offs126=(($125+20)|0);
      var $126=$bf_field_offs126;
      var $127=HEAP32[(($126)>>2)];
      var $128=$127 >>> 30;
      var $bf_clear127=$128 & 1;
      var $tobool128=(($bf_clear127)|0)!=0;
      if ($tobool128) { label = 68; break; } else { label = 65; break; }
    case 65: 
      var $129=$vertex;
      var $130=$129;
      var $bf_field_offs130=(($130+20)|0);
      var $131=$bf_field_offs130;
      var $132=HEAP32[(($131)>>2)];
      var $133=$132 & -1073741825;
      var $134=$133 | 1073741824;
      HEAP32[(($131)>>2)]=$134;
      var $135=$vertex;
      var $136=$135;
      _qh_setappend(((5249188)|0), $136);
      var $137=HEAP32[((((5247040)|0))>>2)];
      var $cmp131=(($137)|0) >= 2;
      if ($cmp131) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $138=HEAP32[((((5248924)|0))>>2)];
      var $139=$vertex;
      var $point133=(($139+8)|0);
      var $140=HEAP32[(($point133)>>2)];
      var $call134=_qh_pointid($140);
      var $141=$vertex;
      var $142=$141;
      var $bf_field_offs135=(($142+20)|0);
      var $143=$bf_field_offs135;
      var $144=HEAP32[(($143)>>2)];
      var $bf_clear136=$144 & 16777215;
      var $145=$visible;
      var $id137=(($145+72)|0);
      var $146=HEAP32[(($id137)>>2)];
      _qh_fprintf($138, 2042, ((5272436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call134,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear136,HEAP32[(((tempInt)+(8))>>2)]=$146,tempInt));
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 62; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $147=$visible;
      var $next143=(($147+44)|0);
      var $148=HEAP32[(($next143)>>2)];
      $visible=$148;
      label = 57; break;
    case 72: 
      label = 73; break;
    case 73: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_updatevertices["X"]=1;

function _qh_pointfacet() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $numpoints;
      var $facets;
      var $facet;
      var $vertex;
      var $vertexp;
      var $point;
      var $pointp;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($1);
      var $add=((($0)+($call))|0);
      $numpoints=$add;
      var $2=$numpoints;
      var $call1=_qh_settemp($2);
      $facets=$call1;
      var $3=$facets;
      var $4=$numpoints;
      _qh_setzero($3, 0, $4);
      var $5=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$5 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $6=$bf_value & 2147483647;
      var $7=HEAP32[(((((5249160)|0)))>>2)];
      var $8=$7 & -2147483648;
      var $9=$8 | $6;
      HEAP32[(((((5249160)|0)))>>2)]=$9;
      var $10=HEAP32[((((5248944)|0))>>2)];
      $facet=$10;
      label = 3; break;
    case 3: 
      var $11=$facet;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $14 = 0;label = 5; break; }
    case 4: 
      var $12=$facet;
      var $next=(($12+44)|0);
      var $13=HEAP32[(($next)>>2)];
      var $tobool2=(($13)|0)!=0;
      var $14 = $tobool2;label = 5; break;
    case 5: 
      var $14;
      if ($14) { label = 6; break; } else { label = 25; break; }
    case 6: 
      $vertex=0;
      var $15=$facet;
      var $vertices=(($15+48)|0);
      var $16=HEAP32[(($vertices)>>2)];
      var $tobool3=(($16)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $17=$facet;
      var $vertices4=(($17+48)|0);
      var $18=HEAP32[(($vertices4)>>2)];
      var $e=(($18+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $19=$p;
      $vertexp=$19;
      label = 8; break;
    case 8: 
      var $20=$vertexp;
      var $incdec_ptr=(($20+4)|0);
      $vertexp=$incdec_ptr;
      var $21=HEAP32[(($20)>>2)];
      $vertex=$21;
      var $tobool6=(($21)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $22=$vertex;
      var $23=$22;
      var $bf_field_offs=(($23+16)|0);
      var $24=$bf_field_offs;
      var $25=HEAP32[(($24)>>2)];
      var $bf_clear8=$25 & 2147483647;
      var $26=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear9=$26 & 2147483647;
      var $cmp=(($bf_clear8)|0)!=(($bf_clear9)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear11=$27 & 2147483647;
      var $28=$vertex;
      var $bf_value12=$bf_clear11 & 2147483647;
      var $29=$28;
      var $bf_field_offs13=(($29+16)|0);
      var $30=$bf_field_offs13;
      var $31=$bf_value12 & 2147483647;
      var $32=HEAP32[(($30)>>2)];
      var $33=$32 & -2147483648;
      var $34=$33 | $31;
      HEAP32[(($30)>>2)]=$34;
      var $35=$facets;
      var $36=$vertex;
      var $point14=(($36+8)|0);
      var $37=HEAP32[(($point14)>>2)];
      var $38=$facet;
      var $39=$38;
      _qh_point_add($35, $37, $39);
      label = 11; break;
    case 11: 
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      $point=0;
      var $40=$facet;
      var $coplanarset=(($40+64)|0);
      var $41=HEAP32[(($coplanarset)>>2)];
      var $tobool16=(($41)|0)!=0;
      if ($tobool16) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $42=$facet;
      var $coplanarset18=(($42+64)|0);
      var $43=HEAP32[(($coplanarset18)>>2)];
      var $e19=(($43+4)|0);
      var $arrayidx20=(($e19)|0);
      var $p21=$arrayidx20;
      var $44=$p21;
      $pointp=$44;
      label = 15; break;
    case 15: 
      var $45=$pointp;
      var $incdec_ptr23=(($45+4)|0);
      $pointp=$incdec_ptr23;
      var $46=HEAP32[(($45)>>2)];
      $point=$46;
      var $tobool24=(($46)|0)!=0;
      if ($tobool24) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $47=$facets;
      var $48=$point;
      var $49=$facet;
      var $50=$49;
      _qh_point_add($47, $48, $50);
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      $point=0;
      var $51=$facet;
      var $outsideset=(($51+60)|0);
      var $52=HEAP32[(($outsideset)>>2)];
      var $tobool28=(($52)|0)!=0;
      if ($tobool28) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $53=$facet;
      var $outsideset30=(($53+60)|0);
      var $54=HEAP32[(($outsideset30)>>2)];
      var $e31=(($54+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      var $55=$p33;
      $pointp=$55;
      label = 20; break;
    case 20: 
      var $56=$pointp;
      var $incdec_ptr35=(($56+4)|0);
      $pointp=$incdec_ptr35;
      var $57=HEAP32[(($56)>>2)];
      $point=$57;
      var $tobool36=(($57)|0)!=0;
      if ($tobool36) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $58=$facets;
      var $59=$point;
      var $60=$facet;
      var $61=$60;
      _qh_point_add($58, $59, $61);
      label = 20; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $62=$facet;
      var $next40=(($62+44)|0);
      var $63=HEAP32[(($next40)>>2)];
      $facet=$63;
      label = 3; break;
    case 25: 
      var $64=$facets;

      return $64;
    default: assert(0, "bad label: " + label);
  }

}
_qh_pointfacet["X"]=1;

function _qh_point($id) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $id_addr;
      $id_addr=$id;
      var $0=$id_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 9; break;
    case 4: 
      var $1=$id_addr;
      var $2=HEAP32[((((5247516)|0))>>2)];
      var $cmp1=(($1)|0) < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=HEAP32[((((5247520)|0))>>2)];
      var $4=$id_addr;
      var $5=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($4)*($5))&-1);
      var $add_ptr=(($3+($mul<<3))|0);
      $retval=$add_ptr;
      label = 9; break;
    case 6: 
      var $6=HEAP32[((((5247516)|0))>>2)];
      var $7=$id_addr;
      var $sub=((($7)-($6))|0);
      $id_addr=$sub;
      var $8=$id_addr;
      var $9=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($9);
      var $cmp4=(($8)|0) < (($call)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$id_addr;
      var $11=HEAP32[((((5249184)|0))>>2)];
      var $e=(($11+4)|0);
      var $arrayidx=(($e+($10<<2))|0);
      var $p=$arrayidx;
      var $12=HEAP32[(($p)>>2)];
      var $13=$12;
      $retval=$13;
      label = 9; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $14=$retval;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_check_maxout() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $bestfacet;
      var $neighbor;
      var $neighborp;
      var $facetlist=__stackBase__;
      var $dist=(__stackBase__)+(4);
      var $maxoutside;
      var $minvertex;
      var $old_maxoutside;
      var $point;
      var $numpart=(__stackBase__)+(12);
      var $facet_i;
      var $facet_n;
      var $notgood;
      var $facets=(__stackBase__)+(16);
      var $vertices=(__stackBase__)+(20);
      var $vertex;
      HEAP32[(($numpart)>>2)]=0;
      $notgood=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1022, ((5249916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      $minvertex=0;
      $maxoutside=0;
      var $2=HEAP32[((((5248580)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 37; break; }
    case 5: 
      var $3=HEAP32[((((5247320)|0))>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 12; break; } else { label = 6; break; }
    case 6: 
      var $4=HEAP32[((((5247052)|0))>>2)];
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 12; break; } else { label = 7; break; }
    case 7: 
      var $5=HEAP32[((((5247048)|0))>>2)];
      var $tobool4=(($5)|0)!=0;
      if ($tobool4) { label = 12; break; } else { label = 8; break; }
    case 8: 
      var $6=HEAP32[((((5247428)|0))>>2)];
      var $tobool6=(($6)|0)!=0;
      if ($tobool6) { label = 12; break; } else { label = 9; break; }
    case 9: 
      var $7=HEAP32[((((5247316)|0))>>2)];
      var $tobool8=(($7)|0)!=0;
      if ($tobool8) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $8=HEAP32[((((5247192)|0))>>2)];
      var $cmp10=(($8)|0)==24;
      if ($cmp10) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $9=HEAP32[((((5247192)|0))>>2)];
      var $cmp12=(($9)|0)==0;
      if ($cmp12) { label = 12; break; } else { label = 37; break; }
    case 12: 
      var $10=HEAP32[((((5247040)|0))>>2)];
      var $cmp14=(($10)|0) >= 1;
      if ($cmp14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($11, 1023, ((5302044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      var $call=_qh_pointvertex();
      HEAP32[(($vertices)>>2)]=$call;
      var $12=HEAP32[((((5248984)|0))>>2)];
      $vertex=$12;
      label = 15; break;
    case 15: 
      var $13=$vertex;
      var $tobool17=(($13)|0)!=0;
      if ($tobool17) { label = 16; break; } else { var $16 = 0;label = 17; break; }
    case 16: 
      var $14=$vertex;
      var $next=(($14)|0);
      var $15=HEAP32[(($next)>>2)];
      var $tobool18=(($15)|0)!=0;
      var $16 = $tobool18;label = 17; break;
    case 17: 
      var $16;
      if ($16) { label = 18; break; } else { label = 32; break; }
    case 18: 
      $neighbor=0;
      var $17=$vertex;
      var $neighbors=(($17+12)|0);
      var $18=HEAP32[(($neighbors)>>2)];
      var $tobool19=(($18)|0)!=0;
      if ($tobool19) { label = 19; break; } else { label = 30; break; }
    case 19: 
      var $19=$vertex;
      var $neighbors21=(($19+12)|0);
      var $20=HEAP32[(($neighbors21)>>2)];
      var $e=(($20+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $21=$p;
      $neighborp=$21;
      label = 20; break;
    case 20: 
      var $22=$neighborp;
      var $incdec_ptr=(($22+4)|0);
      $neighborp=$incdec_ptr;
      var $23=HEAP32[(($22)>>2)];
      $neighbor=$23;
      var $tobool23=(($23)|0)!=0;
      if ($tobool23) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $24=HEAP32[(((((5243452)|0)))>>2)];
      var $inc=((($24)+(1))|0);
      HEAP32[(((((5243452)|0)))>>2)]=$inc;
      var $25=$vertex;
      var $point25=(($25+8)|0);
      var $26=HEAP32[(($point25)>>2)];
      var $27=$neighbor;
      _qh_distplane($26, $27, $dist);
      var $28=$minvertex;
      var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp26=$28 > $29;
      if ($cmp26) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $minvertex=$30;
      label = 23; break;
    case 23: 
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$31);
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp29=$sub > $32;
      if ($cmp29) { label = 27; break; } else { label = 24; break; }
    case 24: 
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp31=$33 > $34;
      if ($cmp31) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $35=$neighbor;
      var $36=HEAP32[((((5248972)|0))>>2)];
      var $cmp33=(($35)|0)==(($36)|0);
      if ($cmp33) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $37=$vertex;
      var $38=HEAP32[((((5248980)|0))>>2)];
      var $cmp35=(($37)|0)==(($38)|0);
      if ($cmp35) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $39=HEAP32[((((5248924)|0))>>2)];
      var $40=$vertex;
      var $point37=(($40+8)|0);
      var $41=HEAP32[(($point37)>>2)];
      var $call38=_qh_pointid($41);
      var $42=$vertex;
      var $43=$42;
      var $bf_field_offs=(($43+20)|0);
      var $44=$bf_field_offs;
      var $45=HEAP32[(($44)>>2)];
      var $bf_clear=$45 & 16777215;
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $47=$neighbor;
      var $id=(($47+72)|0);
      var $48=HEAP32[(($id)>>2)];
      _qh_fprintf($39, 8093, ((5299392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call38,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear,(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$48,tempInt));
      label = 28; break;
    case 28: 
      label = 20; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $49=$vertex;
      var $next41=(($49)|0);
      var $50=HEAP32[(($next41)>>2)];
      $vertex=$50;
      label = 15; break;
    case 32: 
      var $51=HEAP32[((((5247084)|0))>>2)];
      var $tobool43=(($51)|0)!=0;
      if ($tobool43) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp45=$52 > $53;
      if ($cmp45) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$54,HEAP32[((((5244060)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244060)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $55=$minvertex;
      (HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[((((5249084)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249084)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      _qh_settempfree($vertices);
      label = 37; break;
    case 37: 
      var $call50=_qh_pointfacet();
      HEAP32[(($facets)>>2)]=$call50;
      label = 38; break;
    case 38: 
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $57=$maxoutside;
      var $cmp51=$56 < $57;
      if ($cmp51) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $58=$maxoutside;
      var $cond = $58;label = 41; break;
    case 40: 
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $59;label = 41; break;
    case 41: 
      var $cond;
      $old_maxoutside=$cond;
      $facet=0;
      var $60=HEAP32[(($facets)>>2)];
      var $tobool52=(($60)|0)!=0;
      if ($tobool52) { label = 42; break; } else { label = 64; break; }
    case 42: 
      $facet_i=0;
      var $61=HEAP32[(($facets)>>2)];
      var $e54=(($61+4)|0);
      var $arrayidx55=(($e54)|0);
      var $p56=$arrayidx55;
      var $62=HEAP32[(($p56)>>2)];
      var $63=$62;
      $facet=$63;
      var $64=HEAP32[(($facets)>>2)];
      var $call57=_qh_setsize($64);
      $facet_n=$call57;
      label = 43; break;
    case 43: 
      var $65=$facet_i;
      var $66=$facet_n;
      var $cmp59=(($65)|0) < (($66)|0);
      if ($cmp59) { label = 44; break; } else { label = 63; break; }
    case 44: 
      var $67=$facet;
      var $tobool61=(($67)|0)!=0;
      if ($tobool61) { label = 45; break; } else { label = 61; break; }
    case 45: 
      var $68=$facet_i;
      var $call63=_qh_point($68);
      $point=$call63;
      var $69=$point;
      var $70=HEAP32[((((5247020)|0))>>2)];
      var $cmp64=(($69)|0)==(($70)|0);
      if ($cmp64) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 62; break;
    case 47: 
      var $71=HEAP32[(((((5244564)|0)))>>2)];
      var $inc67=((($71)+(1))|0);
      HEAP32[(((((5244564)|0)))>>2)]=$inc67;
      var $72=$point;
      var $73=$facet;
      _qh_distplane($72, $73, $dist);
      var $74=HEAP32[(($numpart)>>2)];
      var $inc68=((($74)+(1))|0);
      HEAP32[(($numpart)>>2)]=$inc68;
      var $75=$point;
      var $76=$facet;
      var $call69=_qh_findbesthorizon(1, $75, $76, 0, $dist, $numpart);
      $bestfacet=$call69;
      var $77=$bestfacet;
      var $tobool70=(($77)|0)!=0;
      if ($tobool70) { label = 48; break; } else { label = 56; break; }
    case 48: 
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $79=$maxoutside;
      var $cmp72=$78 > $79;
      if ($cmp72) { label = 49; break; } else { label = 56; break; }
    case 49: 
      var $80=HEAP32[((((5247128)|0))>>2)];
      var $tobool74=(($80)|0)!=0;
      if ($tobool74) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $81=$bestfacet;
      var $82=$81;
      var $bf_field_offs76=(($82+76)|0);
      var $83=$bf_field_offs76;
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 >>> 19;
      var $bf_clear77=$85 & 1;
      var $tobool78=(($bf_clear77)|0)!=0;
      if ($tobool78) { label = 54; break; } else { label = 51; break; }
    case 51: 
      var $86=$point;
      var $87=$bestfacet;
      var $call80=_qh_findgooddist($86, $87, $dist, $facetlist);
      $bestfacet=$call80;
      var $tobool81=(($call80)|0)!=0;
      if ($tobool81) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $89=$maxoutside;
      var $cmp83=$88 > $89;
      if ($cmp83) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $90=$notgood;
      var $inc85=((($90)+(1))|0);
      $notgood=$inc85;
      label = 55; break;
    case 54: 
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $maxoutside=$91;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $92=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $93=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247440)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247440)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp88=$92 > $93;
      if ($cmp88) { label = 59; break; } else { label = 57; break; }
    case 57: 
      var $94=$bestfacet;
      var $tobool90=(($94)|0)!=0;
      if ($tobool90) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $95=$bestfacet;
      var $96=HEAP32[((((5248972)|0))>>2)];
      var $cmp92=(($95)|0)==(($96)|0);
      if ($cmp92) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $97=HEAP32[((((5248924)|0))>>2)];
      var $98=$point;
      var $call94=_qh_pointid($98);
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $100=$bestfacet;
      var $id95=(($100+72)|0);
      var $101=HEAP32[(($id95)>>2)];
      _qh_fprintf($97, 8094, ((5297228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call94,(HEAPF64[(tempDoublePtr)>>3]=$99,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$101,tempInt));
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $102=$facet_i;
      var $inc99=((($102)+(1))|0);
      $facet_i=$inc99;
      var $103=HEAP32[(($facets)>>2)];
      var $e100=(($103+4)|0);
      var $arrayidx101=(($e100+($inc99<<2))|0);
      var $p102=$arrayidx101;
      var $104=HEAP32[(($p102)>>2)];
      var $105=$104;
      $facet=$105;
      label = 43; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $106=$maxoutside;
      var $107=$old_maxoutside;
      var $mul=($107)*(2);
      var $cmp105=$106 > $mul;
      if ($cmp105) { label = 38; break; } else { label = 66; break; }
    case 66: 
      var $108=HEAP32[(($numpart)>>2)];
      var $109=HEAP32[(((((5243164)|0)))>>2)];
      var $add=((($109)+($108))|0);
      HEAP32[(((((5243164)|0)))>>2)]=$add;
      _qh_settempfree($facets);
      var $110=$maxoutside;
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub106=($110)-($111);
      (HEAPF64[(tempDoublePtr)>>3]=$sub106,HEAP32[((((5243876)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243876)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $112=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243884)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243884)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $113=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp107=$112 < $113;
      if ($cmp107) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $114=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$114,HEAP32[((((5243884)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243884)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 68; break;
    case 68: 
      var $115=$maxoutside;
      (HEAPF64[(tempDoublePtr)>>3]=$115,HEAP32[((((5249068)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5249068)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      _qh_nearcoplanar();
      HEAP32[((((5249064)|0))>>2)]=1;
      var $116=HEAP32[((((5247040)|0))>>2)];
      var $cmp110=(($116)|0) >= 1;
      if ($cmp110) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $117=HEAP32[((((5248924)|0))>>2)];
      var $118=$maxoutside;
      var $119=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $120=$notgood;
      _qh_fprintf($117, 1024, ((5295624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$118,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$119,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(16))>>2)]=$120,tempInt));
      label = 70; break;
    case 70: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_check_maxout["X"]=1;

function _qh_pointvertex() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $numpoints;
      var $vertices;
      var $vertex;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249184)|0))>>2)];
      var $call=_qh_setsize($1);
      var $add=((($0)+($call))|0);
      $numpoints=$add;
      var $2=$numpoints;
      var $call1=_qh_settemp($2);
      $vertices=$call1;
      var $3=$vertices;
      var $4=$numpoints;
      _qh_setzero($3, 0, $4);
      var $5=HEAP32[((((5248984)|0))>>2)];
      $vertex=$5;
      label = 3; break;
    case 3: 
      var $6=$vertex;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $9 = 0;label = 5; break; }
    case 4: 
      var $7=$vertex;
      var $next=(($7)|0);
      var $8=HEAP32[(($next)>>2)];
      var $tobool2=(($8)|0)!=0;
      var $9 = $tobool2;label = 5; break;
    case 5: 
      var $9;
      if ($9) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$vertices;
      var $11=$vertex;
      var $point=(($11+8)|0);
      var $12=HEAP32[(($point)>>2)];
      var $13=$vertex;
      var $14=$13;
      _qh_point_add($10, $12, $14);
      label = 7; break;
    case 7: 
      var $15=$vertex;
      var $next3=(($15)|0);
      var $16=HEAP32[(($next3)>>2)];
      $vertex=$16;
      label = 3; break;
    case 8: 
      var $17=$vertices;

      return $17;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_nearcoplanar() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $point;
      var $pointp;
      var $numpart;
      var $dist=__stackBase__;
      var $innerplane=(__stackBase__)+(8);
      var $0=HEAP32[((((5247048)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 13; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247052)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 13; break; } else { label = 4; break; }
    case 4: 
      var $2=HEAP32[((((5248944)|0))>>2)];
      $facet=$2;
      label = 5; break;
    case 5: 
      var $3=$facet;
      var $tobool2=(($3)|0)!=0;
      if ($tobool2) { label = 6; break; } else { var $6 = 0;label = 7; break; }
    case 6: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      var $tobool3=(($5)|0)!=0;
      var $6 = $tobool3;label = 7; break;
    case 7: 
      var $6;
      if ($6) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $7=$facet;
      var $coplanarset=(($7+64)|0);
      var $8=HEAP32[(($coplanarset)>>2)];
      var $tobool4=(($8)|0)!=0;
      if ($tobool4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $9=$facet;
      var $coplanarset6=(($9+64)|0);
      _qh_setfree($coplanarset6);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $10=$facet;
      var $next7=(($10+44)|0);
      var $11=HEAP32[(($next7)>>2)];
      $facet=$11;
      label = 5; break;
    case 12: 
      label = 39; break;
    case 13: 
      var $12=HEAP32[((((5247048)|0))>>2)];
      var $tobool8=(($12)|0)!=0;
      if ($tobool8) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $13=HEAP32[((((5247052)|0))>>2)];
      var $tobool9=(($13)|0)!=0;
      if ($tobool9) { label = 38; break; } else { label = 15; break; }
    case 15: 
      _qh_outerinner(0, 0, $innerplane);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$14 < 8.988465674311579e+307;
      if ($cmp) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=HEAP32[((((5247508)|0))>>2)];
      var $conv=(($16)|0);
      var $call=Math.sqrt($conv);
      var $mul=($15)*($call);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=($17)-($mul);
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($innerplane)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($innerplane)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 17; break;
    case 17: 
      $numpart=0;
      var $18=HEAP32[((((5248944)|0))>>2)];
      $facet=$18;
      label = 18; break;
    case 18: 
      var $19=$facet;
      var $tobool14=(($19)|0)!=0;
      if ($tobool14) { label = 19; break; } else { var $22 = 0;label = 20; break; }
    case 19: 
      var $20=$facet;
      var $next16=(($20+44)|0);
      var $21=HEAP32[(($next16)>>2)];
      var $tobool17=(($21)|0)!=0;
      var $22 = $tobool17;label = 20; break;
    case 20: 
      var $22;
      if ($22) { label = 21; break; } else { label = 37; break; }
    case 21: 
      var $23=$facet;
      var $coplanarset20=(($23+64)|0);
      var $24=HEAP32[(($coplanarset20)>>2)];
      var $tobool21=(($24)|0)!=0;
      if ($tobool21) { label = 22; break; } else { label = 35; break; }
    case 22: 
      $point=0;
      var $25=$facet;
      var $coplanarset23=(($25+64)|0);
      var $26=HEAP32[(($coplanarset23)>>2)];
      var $tobool24=(($26)|0)!=0;
      if ($tobool24) { label = 23; break; } else { label = 34; break; }
    case 23: 
      var $27=$facet;
      var $coplanarset26=(($27+64)|0);
      var $28=HEAP32[(($coplanarset26)>>2)];
      var $e=(($28+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $29=$p;
      $pointp=$29;
      label = 24; break;
    case 24: 
      var $30=$pointp;
      var $incdec_ptr=(($30+4)|0);
      $pointp=$incdec_ptr;
      var $31=HEAP32[(($30)>>2)];
      $point=$31;
      var $tobool28=(($31)|0)!=0;
      if ($tobool28) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $32=$numpart;
      var $inc=((($32)+(1))|0);
      $numpart=$inc;
      var $33=$point;
      var $34=$facet;
      _qh_distplane($33, $34, $dist);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($innerplane)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($innerplane)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp30=$35 < $36;
      if ($cmp30) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $37=HEAP32[((((5247052)|0))>>2)];
      var $tobool33=(($37)|0)!=0;
      if ($tobool33) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $38=$pointp;
      var $arrayidx35=((($38)-(4))|0);
      HEAP32[(($arrayidx35)>>2)]=0;
      label = 28; break;
    case 28: 
      label = 32; break;
    case 29: 
      var $39=HEAP32[((((5247048)|0))>>2)];
      var $tobool38=(($39)|0)!=0;
      if ($tobool38) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $40=$pointp;
      var $arrayidx40=((($40)-(4))|0);
      HEAP32[(($arrayidx40)>>2)]=0;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 24; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $41=$facet;
      var $coplanarset45=(($41+64)|0);
      var $42=HEAP32[(($coplanarset45)>>2)];
      _qh_setcompact($42);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $43=$facet;
      var $next48=(($43+44)|0);
      var $44=HEAP32[(($next48)>>2)];
      $facet=$44;
      label = 18; break;
    case 37: 
      var $45=$numpart;
      var $46=HEAP32[(((((5243164)|0)))>>2)];
      var $add=((($46)+($45))|0);
      HEAP32[(((((5243164)|0)))>>2)]=$add;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_nearcoplanar["X"]=1;

function _qh_checkpolygon($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $vertex;
      var $vertexp;
      var $vertexlist;
      var $numfacets;
      var $numvertices;
      var $numridges;
      var $totvneighbors;
      var $totvertices;
      var $waserror=__stackBase__;
      var $nextseen;
      var $visibleseen;
      $facetlist_addr=$facetlist;
      $numfacets=0;
      $numvertices=0;
      $numridges=0;
      $totvneighbors=0;
      $totvertices=0;
      HEAP32[(($waserror)>>2)]=0;
      $nextseen=0;
      $visibleseen=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facetlist_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 1027, ((5259696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      var $4=$facetlist_addr;
      var $5=HEAP32[((((5248944)|0))>>2)];
      var $cmp1=(($4)|0)!=(($5)|0);
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=HEAP32[((((5247128)|0))>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $nextseen=1;
      label = 7; break;
    case 7: 
      var $7=$facetlist_addr;
      var $tobool4=(($7)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 29; break; }
    case 8: 
      var $8=$facetlist_addr;
      $facet=$8;
      label = 9; break;
    case 9: 
      var $9=$facet;
      var $tobool6=(($9)|0)!=0;
      if ($tobool6) { label = 10; break; } else { var $12 = 0;label = 11; break; }
    case 10: 
      var $10=$facet;
      var $next=(($10+44)|0);
      var $11=HEAP32[(($next)>>2)];
      var $tobool7=(($11)|0)!=0;
      var $12 = $tobool7;label = 11; break;
    case 11: 
      var $12;
      if ($12) { label = 12; break; } else { label = 28; break; }
    case 12: 
      var $13=$facet;
      var $14=HEAP32[((((5248960)|0))>>2)];
      var $cmp8=(($13)|0)==(($14)|0);
      if ($cmp8) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $visibleseen=1;
      label = 14; break;
    case 14: 
      var $15=$facet;
      var $16=$15;
      var $bf_field_offs=(($16+76)|0);
      var $17=$bf_field_offs;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 >>> 11;
      var $bf_clear=$19 & 1;
      var $tobool11=(($bf_clear)|0)!=0;
      if ($tobool11) { label = 26; break; } else { label = 15; break; }
    case 15: 
      var $20=$nextseen;
      var $tobool13=(($20)|0)!=0;
      if ($tobool13) { label = 25; break; } else { label = 16; break; }
    case 16: 
      var $21=$facet;
      var $22=HEAP32[((((5248952)|0))>>2)];
      var $cmp15=(($21)|0)==(($22)|0);
      if ($cmp15) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $nextseen=1;
      label = 24; break;
    case 18: 
      var $23=$facet;
      var $outsideset=(($23+60)|0);
      var $24=HEAP32[(($outsideset)>>2)];
      var $call=_qh_setsize($24);
      var $tobool17=(($call)|0)!=0;
      if ($tobool17) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $25=HEAP32[((((5248708)|0))>>2)];
      var $tobool19=(($25)|0)!=0;
      if ($tobool19) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $26=$facet;
      var $furthestdist=(($26)|0);
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($furthestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($furthestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp21=$27 >= $28;
      if ($cmp21) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $29=HEAP32[((((5248924)|0))>>2)];
      var $30=$facet;
      var $id23=(($30+72)|0);
      var $31=HEAP32[(($id23)>>2)];
      _qh_fprintf($29, 6137, ((5259336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,tempInt));
      var $32=$facet;
      _qh_errexit(5, $32, 0);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $33=$numfacets;
      var $inc=((($33)+(1))|0);
      $numfacets=$inc;
      var $34=$facet;
      _qh_checkfacet($34, 0, $waserror);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $35=$facet;
      var $next29=(($35+44)|0);
      var $36=HEAP32[(($next29)>>2)];
      $facet=$36;
      label = 9; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $37=HEAP32[((((5248960)|0))>>2)];
      var $tobool31=(($37)|0)!=0;
      if ($tobool31) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $38=$visibleseen;
      var $tobool32=(($38)|0)!=0;
      if ($tobool32) { label = 33; break; } else { label = 31; break; }
    case 31: 
      var $39=$facetlist_addr;
      var $40=HEAP32[((((5248944)|0))>>2)];
      var $cmp34=(($39)|0)==(($40)|0);
      if ($cmp34) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $41=HEAP32[((((5248924)|0))>>2)];
      var $42=HEAP32[((((5248960)|0))>>2)];
      var $id36=(($42+72)|0);
      var $43=HEAP32[(($id36)>>2)];
      _qh_fprintf($41, 6138, ((5258988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$43,tempInt));
      _qh_printlists();
      var $44=HEAP32[((((5248960)|0))>>2)];
      _qh_errexit(5, $44, 0);
      label = 33; break;
    case 33: 
      var $45=$facetlist_addr;
      var $46=HEAP32[((((5248944)|0))>>2)];
      var $cmp38=(($45)|0)==(($46)|0);
      if ($cmp38) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $47=HEAP32[((((5248984)|0))>>2)];
      $vertexlist=$47;
      label = 39; break;
    case 35: 
      var $48=$facetlist_addr;
      var $49=HEAP32[((((5248956)|0))>>2)];
      var $cmp41=(($48)|0)==(($49)|0);
      if ($cmp41) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $50=HEAP32[((((5248992)|0))>>2)];
      $vertexlist=$50;
      label = 38; break;
    case 37: 
      $vertexlist=0;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $51=$vertexlist;
      $vertex=$51;
      label = 40; break;
    case 40: 
      var $52=$vertex;
      var $tobool47=(($52)|0)!=0;
      if ($tobool47) { label = 41; break; } else { var $55 = 0;label = 42; break; }
    case 41: 
      var $53=$vertex;
      var $next49=(($53)|0);
      var $54=HEAP32[(($next49)>>2)];
      var $tobool50=(($54)|0)!=0;
      var $55 = $tobool50;label = 42; break;
    case 42: 
      var $55;
      if ($55) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $56=$vertex;
      var $57=$56;
      var $bf_field_offs53=(($57+20)|0);
      var $58=$bf_field_offs53;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 & -268435457;
      HEAP32[(($58)>>2)]=$60;
      var $61=$vertex;
      var $62=$61;
      var $bf_field_offs54=(($62+16)|0);
      var $63=$bf_field_offs54;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & -2147483648;
      HEAP32[(($63)>>2)]=$65;
      label = 44; break;
    case 44: 
      var $66=$vertex;
      var $next56=(($66)|0);
      var $67=HEAP32[(($next56)>>2)];
      $vertex=$67;
      label = 40; break;
    case 45: 
      var $68=$facetlist_addr;
      var $tobool58=(($68)|0)!=0;
      if ($tobool58) { label = 46; break; } else { label = 67; break; }
    case 46: 
      var $69=$facetlist_addr;
      $facet=$69;
      label = 47; break;
    case 47: 
      var $70=$facet;
      var $tobool61=(($70)|0)!=0;
      if ($tobool61) { label = 48; break; } else { var $73 = 0;label = 49; break; }
    case 48: 
      var $71=$facet;
      var $next63=(($71+44)|0);
      var $72=HEAP32[(($next63)>>2)];
      var $tobool64=(($72)|0)!=0;
      var $73 = $tobool64;label = 49; break;
    case 49: 
      var $73;
      if ($73) { label = 50; break; } else { label = 66; break; }
    case 50: 
      var $74=$facet;
      var $75=$74;
      var $bf_field_offs67=(($75+76)|0);
      var $76=$bf_field_offs67;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 >>> 11;
      var $bf_clear68=$78 & 1;
      var $tobool69=(($bf_clear68)|0)!=0;
      if ($tobool69) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 65; break;
    case 52: 
      var $79=$facet;
      var $80=$79;
      var $bf_field_offs72=(($80+76)|0);
      var $81=$bf_field_offs72;
      var $82=HEAP32[(($81)>>2)];
      var $83=$82 >>> 13;
      var $bf_clear73=$83 & 1;
      var $tobool74=(($bf_clear73)|0)!=0;
      if ($tobool74) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $84=HEAP32[((((5247508)|0))>>2)];
      var $85=$numridges;
      var $add=((($85)+($84))|0);
      $numridges=$add;
      label = 55; break;
    case 54: 
      var $86=$facet;
      var $ridges=(($86+52)|0);
      var $87=HEAP32[(($ridges)>>2)];
      var $call77=_qh_setsize($87);
      var $88=$numridges;
      var $add78=((($88)+($call77))|0);
      $numridges=$add78;
      label = 55; break;
    case 55: 
      $vertex=0;
      var $89=$facet;
      var $vertices=(($89+48)|0);
      var $90=HEAP32[(($vertices)>>2)];
      var $tobool80=(($90)|0)!=0;
      if ($tobool80) { label = 56; break; } else { label = 64; break; }
    case 56: 
      var $91=$facet;
      var $vertices82=(($91+48)|0);
      var $92=HEAP32[(($vertices82)>>2)];
      var $e=(($92+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $93=$p;
      $vertexp=$93;
      label = 57; break;
    case 57: 
      var $94=$vertexp;
      var $incdec_ptr=(($94+4)|0);
      $vertexp=$incdec_ptr;
      var $95=HEAP32[(($94)>>2)];
      $vertex=$95;
      var $tobool84=(($95)|0)!=0;
      if ($tobool84) { label = 58; break; } else { label = 63; break; }
    case 58: 
      var $96=$vertex;
      var $97=$96;
      var $bf_field_offs86=(($97+16)|0);
      var $98=$bf_field_offs86;
      var $99=HEAP32[(($98)>>2)];
      var $bf_clear87=$99 & 2147483647;
      var $inc88=((($bf_clear87)+(1))|0);
      var $bf_value=$inc88 & 2147483647;
      var $100=$96;
      var $bf_field_offs89=(($100+16)|0);
      var $101=$bf_field_offs89;
      var $102=$bf_value & 2147483647;
      var $103=HEAP32[(($101)>>2)];
      var $104=$103 & -2147483648;
      var $105=$104 | $102;
      HEAP32[(($101)>>2)]=$105;
      var $106=$vertex;
      var $107=$106;
      var $bf_field_offs90=(($107+20)|0);
      var $108=$bf_field_offs90;
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 >>> 28;
      var $bf_clear91=$110 & 1;
      var $tobool92=(($bf_clear91)|0)!=0;
      if ($tobool92) { label = 62; break; } else { label = 59; break; }
    case 59: 
      var $111=$vertex;
      var $112=$111;
      var $bf_field_offs94=(($112+20)|0);
      var $113=$bf_field_offs94;
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -268435457;
      var $116=$115 | 268435456;
      HEAP32[(($113)>>2)]=$116;
      var $117=$numvertices;
      var $inc95=((($117)+(1))|0);
      $numvertices=$inc95;
      var $118=$vertex;
      var $point=(($118+8)|0);
      var $119=HEAP32[(($point)>>2)];
      var $call96=_qh_pointid($119);
      var $cmp97=(($call96)|0)==-1;
      if ($cmp97) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $120=HEAP32[((((5248924)|0))>>2)];
      var $121=$vertex;
      var $point99=(($121+8)|0);
      var $122=HEAP32[(($point99)>>2)];
      var $123=$vertex;
      var $124=$123;
      var $bf_field_offs100=(($124+20)|0);
      var $125=$bf_field_offs100;
      var $126=HEAP32[(($125)>>2)];
      var $bf_clear101=$126 & 16777215;
      var $127=HEAP32[((((5247520)|0))>>2)];
      _qh_fprintf($120, 6139, ((5258672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$122,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear101,HEAP32[(((tempInt)+(8))>>2)]=$127,tempInt));
      HEAP32[(($waserror)>>2)]=1;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 57; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $128=$facet;
      var $next107=(($128+44)|0);
      var $129=HEAP32[(($next107)>>2)];
      $facet=$129;
      label = 47; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $130=$numfacets;
      var $131=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear110=$131 & 2147483647;
      var $add111=((($bf_clear110)+($130))|0);
      var $bf_value112=$add111 & 2147483647;
      var $132=$bf_value112 & 2147483647;
      var $133=HEAP32[(((((5249160)|0)))>>2)];
      var $134=$133 & -2147483648;
      var $135=$134 | $132;
      HEAP32[(((((5249160)|0)))>>2)]=$135;
      var $136=$facetlist_addr;
      var $137=HEAP32[((((5248944)|0))>>2)];
      var $cmp113=(($136)|0)==(($137)|0);
      if ($cmp113) { label = 68; break; } else { label = 99; break; }
    case 68: 
      var $138=$numfacets;
      var $139=HEAP32[((((5248996)|0))>>2)];
      var $140=HEAP32[((((5248964)|0))>>2)];
      var $sub=((($139)-($140))|0);
      var $cmp115=(($138)|0)!=(($sub)|0);
      if ($cmp115) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $141=HEAP32[((((5248924)|0))>>2)];
      var $142=$numfacets;
      var $143=HEAP32[((((5248996)|0))>>2)];
      var $144=HEAP32[((((5248964)|0))>>2)];
      _qh_fprintf($141, 6140, ((5258396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$142,HEAP32[(((tempInt)+(4))>>2)]=$143,HEAP32[(((tempInt)+(8))>>2)]=$144,tempInt));
      HEAP32[(($waserror)>>2)]=1;
      label = 70; break;
    case 70: 
      var $145=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear118=$145 & 2147483647;
      var $inc119=((($bf_clear118)+(1))|0);
      var $bf_value120=$inc119 & 2147483647;
      var $146=$bf_value120 & 2147483647;
      var $147=HEAP32[(((((5249160)|0)))>>2)];
      var $148=$147 & -2147483648;
      var $149=$148 | $146;
      HEAP32[(((((5249160)|0)))>>2)]=$149;
      var $150=HEAP32[((((5248580)|0))>>2)];
      var $tobool121=(($150)|0)!=0;
      if ($tobool121) { label = 71; break; } else { label = 90; break; }
    case 71: 
      var $151=HEAP32[((((5248984)|0))>>2)];
      $vertex=$151;
      label = 72; break;
    case 72: 
      var $152=$vertex;
      var $tobool124=(($152)|0)!=0;
      if ($tobool124) { label = 73; break; } else { var $155 = 0;label = 74; break; }
    case 73: 
      var $153=$vertex;
      var $next126=(($153)|0);
      var $154=HEAP32[(($next126)>>2)];
      var $tobool127=(($154)|0)!=0;
      var $155 = $tobool127;label = 74; break;
    case 74: 
      var $155;
      if ($155) { label = 75; break; } else { label = 79; break; }
    case 75: 
      var $156=$vertex;
      var $neighbors=(($156+12)|0);
      var $157=HEAP32[(($neighbors)>>2)];
      var $158=$vertex;
      var $159=$158;
      var $bf_field_offs130=(($159+20)|0);
      var $160=$bf_field_offs130;
      var $161=HEAP32[(($160)>>2)];
      var $bf_clear131=$161 & 16777215;
      _qh_setcheck($157, ((5258264)|0), $bf_clear131);
      var $162=$vertex;
      var $163=$162;
      var $bf_field_offs132=(($163+20)|0);
      var $164=$bf_field_offs132;
      var $165=HEAP32[(($164)>>2)];
      var $166=$165 >>> 30;
      var $bf_clear133=$166 & 1;
      var $tobool134=(($bf_clear133)|0)!=0;
      if ($tobool134) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 78; break;
    case 77: 
      var $167=$vertex;
      var $neighbors137=(($167+12)|0);
      var $168=HEAP32[(($neighbors137)>>2)];
      var $call138=_qh_setsize($168);
      var $169=$totvneighbors;
      var $add139=((($169)+($call138))|0);
      $totvneighbors=$add139;
      label = 78; break;
    case 78: 
      var $170=$vertex;
      var $next141=(($170)|0);
      var $171=HEAP32[(($next141)>>2)];
      $vertex=$171;
      label = 72; break;
    case 79: 
      var $172=$facetlist_addr;
      var $tobool143=(($172)|0)!=0;
      if ($tobool143) { label = 80; break; } else { label = 87; break; }
    case 80: 
      var $173=$facetlist_addr;
      $facet=$173;
      label = 81; break;
    case 81: 
      var $174=$facet;
      var $tobool146=(($174)|0)!=0;
      if ($tobool146) { label = 82; break; } else { var $177 = 0;label = 83; break; }
    case 82: 
      var $175=$facet;
      var $next148=(($175+44)|0);
      var $176=HEAP32[(($next148)>>2)];
      var $tobool149=(($176)|0)!=0;
      var $177 = $tobool149;label = 83; break;
    case 83: 
      var $177;
      if ($177) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $178=$facet;
      var $vertices152=(($178+48)|0);
      var $179=HEAP32[(($vertices152)>>2)];
      var $call153=_qh_setsize($179);
      var $180=$totvertices;
      var $add154=((($180)+($call153))|0);
      $totvertices=$add154;
      label = 85; break;
    case 85: 
      var $181=$facet;
      var $next156=(($181+44)|0);
      var $182=HEAP32[(($next156)>>2)];
      $facet=$182;
      label = 81; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $183=$totvneighbors;
      var $184=$totvertices;
      var $cmp159=(($183)|0)!=(($184)|0);
      if ($cmp159) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $185=HEAP32[((((5248924)|0))>>2)];
      var $186=$totvneighbors;
      var $187=$totvertices;
      _qh_fprintf($185, 6141, ((5257948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$186,HEAP32[(((tempInt)+(4))>>2)]=$187,tempInt));
      HEAP32[(($waserror)>>2)]=1;
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $188=$numvertices;
      var $189=HEAP32[((((5249000)|0))>>2)];
      var $190=HEAP32[((((5249188)|0))>>2)];
      var $call163=_qh_setsize($190);
      var $sub164=((($189)-($call163))|0);
      var $cmp165=(($188)|0)!=(($sub164)|0);
      if ($cmp165) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $191=HEAP32[((((5248924)|0))>>2)];
      var $192=$numvertices;
      var $193=HEAP32[((((5249000)|0))>>2)];
      var $194=HEAP32[((((5249188)|0))>>2)];
      var $call167=_qh_setsize($194);
      var $sub168=((($193)-($call167))|0);
      _qh_fprintf($191, 6142, ((5257616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$192,HEAP32[(((tempInt)+(4))>>2)]=$sub168,tempInt));
      HEAP32[(($waserror)>>2)]=1;
      label = 92; break;
    case 92: 
      var $195=HEAP32[((((5247508)|0))>>2)];
      var $cmp170=(($195)|0)==2;
      if ($cmp170) { label = 93; break; } else { label = 95; break; }
    case 93: 
      var $196=$numvertices;
      var $197=$numfacets;
      var $cmp172=(($196)|0)!=(($197)|0);
      if ($cmp172) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $198=HEAP32[((((5248924)|0))>>2)];
      var $199=$numvertices;
      var $200=$numfacets;
      _qh_fprintf($198, 6143, ((5257252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$199,HEAP32[(((tempInt)+(4))>>2)]=$200,tempInt));
      HEAP32[(($waserror)>>2)]=1;
      label = 95; break;
    case 95: 
      var $201=HEAP32[((((5247508)|0))>>2)];
      var $cmp175=(($201)|0)==3;
      if ($cmp175) { label = 96; break; } else { label = 98; break; }
    case 96: 
      var $202=$numvertices;
      var $203=$numfacets;
      var $add177=((($202)+($203))|0);
      var $204=$numridges;
      var $div=((((($204)|0))/(2))&-1);
      var $sub178=((($add177)-($div))|0);
      var $cmp179=(($sub178)|0)!=2;
      if ($cmp179) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $205=HEAP32[((((5248924)|0))>>2)];
      var $206=$numvertices;
      var $207=$numfacets;
      var $208=$numridges;
      var $div181=((((($208)|0))/(2))&-1);
      _qh_fprintf($205, 7063, ((5256864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$206,HEAP32[(((tempInt)+(4))>>2)]=$207,HEAP32[(((tempInt)+(8))>>2)]=$div181,tempInt));
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $209=HEAP32[(($waserror)>>2)];
      var $tobool184=(($209)|0)!=0;
      if ($tobool184) { label = 100; break; } else { label = 101; break; }
    case 100: 
      _qh_errexit(5, 0, 0);
      label = 101; break;
    case 101: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkpolygon["X"]=1;

function _qh_checkflipped_all($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $waserror;
      var $dist=__stackBase__;
      $facetlist_addr=$facetlist;
      $waserror=0;
      var $0=$facetlist_addr;
      var $1=HEAP32[((((5248944)|0))>>2)];
      var $cmp=(($0)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[(((((5243652)|0)))>>2)]=0;
      label = 4; break;
    case 4: 
      var $2=$facetlist_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $3=$facetlist_addr;
      $facet=$3;
      label = 6; break;
    case 6: 
      var $4=$facet;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 7; break; } else { var $7 = 0;label = 8; break; }
    case 7: 
      var $5=$facet;
      var $next=(($5+44)|0);
      var $6=HEAP32[(($next)>>2)];
      var $tobool3=(($6)|0)!=0;
      var $7 = $tobool3;label = 8; break;
    case 8: 
      var $7;
      if ($7) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $8=$facet;
      var $normal=(($8+24)|0);
      var $9=HEAP32[(($normal)>>2)];
      var $tobool4=(($9)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $10=$facet;
      var $call=_qh_checkflipped($10, $dist, 0);
      var $tobool5=(($call)|0)!=0;
      if ($tobool5) { label = 14; break; } else { label = 11; break; }
    case 11: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      var $12=$facet;
      var $id=(($12+72)|0);
      var $13=HEAP32[(($id)>>2)];
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($11, 6136, ((5260260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,(HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $15=HEAP32[((((5247012)|0))>>2)];
      var $tobool7=(($15)|0)!=0;
      if ($tobool7) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $16=$facet;
      _qh_errprint(((5267284)|0), $16, 0, 0, 0);
      $waserror=1;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $17=$facet;
      var $next11=(($17+44)|0);
      var $18=HEAP32[(($next11)>>2)];
      $facet=$18;
      label = 6; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $19=$waserror;
      var $tobool13=(($19)|0)!=0;
      if ($tobool13) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $20=HEAP32[((((5248924)|0))>>2)];
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$21);
      _qh_fprintf($20, 8101, ((5259920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(3, 0, 0);
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkflipped_all["X"]=1;

function _qh_checkconvex($facetlist, $fault) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $fault_addr;
      var $facet;
      var $neighbor;
      var $neighborp;
      var $errfacet1;
      var $errfacet2;
      var $vertex;
      var $dist=__stackBase__;
      var $centrum;
      var $waserror;
      var $centrum_warning;
      var $tempcentrum;
      var $allsimplicial;
      var $neighbor_i;
      $facetlist_addr=$facetlist;
      $fault_addr=$fault;
      $errfacet1=0;
      $errfacet2=0;
      $waserror=0;
      $centrum_warning=0;
      $tempcentrum=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1026, ((5279356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5247380)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      HEAP32[(((((5243204)|0)))>>2)]=0;
      HEAP32[(((((5243284)|0)))>>2)]=0;
      label = 6; break;
    case 6: 
      var $3=$facetlist_addr;
      var $tobool3=(($3)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 74; break; }
    case 7: 
      var $4=$facetlist_addr;
      $facet=$4;
      label = 8; break;
    case 8: 
      var $5=$facet;
      var $tobool5=(($5)|0)!=0;
      if ($tobool5) { label = 9; break; } else { var $8 = 0;label = 10; break; }
    case 9: 
      var $6=$facet;
      var $next=(($6+44)|0);
      var $7=HEAP32[(($next)>>2)];
      var $tobool6=(($7)|0)!=0;
      var $8 = $tobool6;label = 10; break;
    case 10: 
      var $8;
      if ($8) { label = 11; break; } else { label = 73; break; }
    case 11: 
      var $9=$facet;
      var $10=$9;
      var $bf_field_offs=(($10+76)|0);
      var $11=$bf_field_offs;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 16;
      var $bf_clear=$13 & 1;
      var $tobool7=(($bf_clear)|0)!=0;
      if ($tobool7) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _qh_precision(((5278344)|0));
      var $14=HEAP32[((((5248924)|0))>>2)];
      var $15=$facet;
      var $id=(($15+72)|0);
      var $16=HEAP32[(($id)>>2)];
      _qh_fprintf($14, 6113, ((5277568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=$facet;
      $errfacet1=$17;
      $waserror=1;
      label = 72; break;
    case 13: 
      var $18=HEAP32[((((5247084)|0))>>2)];
      var $tobool10=(($18)|0)!=0;
      if ($tobool10) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $19=HEAP32[((((5248584)|0))>>2)];
      var $tobool11=(($19)|0)!=0;
      if ($tobool11) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $20=$facet;
      var $21=$20;
      var $bf_field_offs12=(($21+76)|0);
      var $22=$bf_field_offs12;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 13;
      var $bf_clear13=$24 & 1;
      var $tobool14=(($bf_clear13)|0)!=0;
      if ($tobool14) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $25=$facet;
      var $26=$25;
      var $bf_field_offs16=(($26+76)|0);
      var $27=$bf_field_offs16;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 >>> 9;
      var $bf_clear17=$29 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $allsimplicial=0;
      label = 41; break;
    case 18: 
      $allsimplicial=1;
      $neighbor_i=0;
      $neighbor=0;
      var $30=$facet;
      var $neighbors=(($30+56)|0);
      var $31=HEAP32[(($neighbors)>>2)];
      var $tobool20=(($31)|0)!=0;
      if ($tobool20) { label = 19; break; } else { label = 40; break; }
    case 19: 
      var $32=$facet;
      var $neighbors22=(($32+56)|0);
      var $33=HEAP32[(($neighbors22)>>2)];
      var $e=(($33+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $34=$p;
      $neighborp=$34;
      label = 20; break;
    case 20: 
      var $35=$neighborp;
      var $incdec_ptr=(($35+4)|0);
      $neighborp=$incdec_ptr;
      var $36=HEAP32[(($35)>>2)];
      $neighbor=$36;
      var $tobool24=(($36)|0)!=0;
      if ($tobool24) { label = 21; break; } else { label = 39; break; }
    case 21: 
      var $37=$neighbor_i;
      var $inc=((($37)+(1))|0);
      $neighbor_i=$inc;
      var $38=$facet;
      var $vertices=(($38+48)|0);
      var $39=HEAP32[(($vertices)>>2)];
      var $e26=(($39+4)|0);
      var $arrayidx27=(($e26+($37<<2))|0);
      var $p28=$arrayidx27;
      var $40=HEAP32[(($p28)>>2)];
      var $41=$40;
      $vertex=$41;
      var $42=$neighbor;
      var $43=$42;
      var $bf_field_offs29=(($43+76)|0);
      var $44=$bf_field_offs29;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 13;
      var $bf_clear30=$46 & 1;
      var $tobool31=(($bf_clear30)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $47=$neighbor;
      var $48=$47;
      var $bf_field_offs33=(($48+76)|0);
      var $49=$bf_field_offs33;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50 >>> 9;
      var $bf_clear34=$51 & 1;
      var $tobool35=(($bf_clear34)|0)!=0;
      if ($tobool35) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $allsimplicial=0;
      label = 20; break;
    case 24: 
      var $52=$vertex;
      var $point=(($52+8)|0);
      var $53=HEAP32[(($point)>>2)];
      var $54=$neighbor;
      _qh_distplane($53, $54, $dist);
      var $55=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $56=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$56);
      var $cmp38=$55 > $sub;
      if ($cmp38) { label = 25; break; } else { label = 38; break; }
    case 25: 
      var $57=$fault_addr;
      var $cmp40=(($57)|0)==1;
      if ($cmp40) { label = 26; break; } else { label = 27; break; }
    case 26: 
      _qh_precision(((5276944)|0));
      var $58=HEAP32[((((5248924)|0))>>2)];
      var $59=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($58, 6114, ((5276420)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      _qh_errexit(2, 0, 0);
      label = 27; break;
    case 27: 
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $61=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp43=$60 > $61;
      if ($cmp43) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $62=HEAP32[(((((5243204)|0)))>>2)];
      var $inc45=((($62)+(1))|0);
      HEAP32[(((((5243204)|0)))>>2)]=$inc45;
      _qh_precision(((5276088)|0));
      var $63=HEAP32[((((5248924)|0))>>2)];
      var $64=$facet;
      var $id46=(($64+72)|0);
      var $65=HEAP32[(($id46)>>2)];
      var $66=$neighbor;
      var $id47=(($66+72)|0);
      var $67=HEAP32[(($id47)>>2)];
      var $68=$vertex;
      var $point48=(($68+8)|0);
      var $69=HEAP32[(($point48)>>2)];
      var $call=_qh_pointid($69);
      var $70=$vertex;
      var $71=$70;
      var $bf_field_offs49=(($71+20)|0);
      var $72=$bf_field_offs49;
      var $73=HEAP32[(($72)>>2)];
      var $bf_clear50=$73 & 16777215;
      var $74=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($63, 6115, ((5275192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$65,HEAP32[(((tempInt)+(4))>>2)]=$67,HEAP32[(((tempInt)+(8))>>2)]=$call,HEAP32[(((tempInt)+(12))>>2)]=$bf_clear50,(HEAPF64[(tempDoublePtr)>>3]=$74,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $75=$facet;
      $errfacet1=$75;
      var $76=$neighbor;
      $errfacet2=$76;
      $waserror=1;
      label = 37; break;
    case 29: 
      var $77=HEAP32[((((5248584)|0))>>2)];
      var $tobool52=(($77)|0)!=0;
      if ($tobool52) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp54=$78 > 0;
      if ($cmp54) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $79=HEAP32[(((((5243284)|0)))>>2)];
      var $inc56=((($79)+(1))|0);
      HEAP32[(((((5243284)|0)))>>2)]=$inc56;
      _qh_precision(((5274656)|0));
      var $80=HEAP32[((((5248924)|0))>>2)];
      var $81=$facet;
      var $id57=(($81+72)|0);
      var $82=HEAP32[(($id57)>>2)];
      var $83=$neighbor;
      var $id58=(($83+72)|0);
      var $84=HEAP32[(($id58)>>2)];
      var $85=$vertex;
      var $point59=(($85+8)|0);
      var $86=HEAP32[(($point59)>>2)];
      var $call60=_qh_pointid($86);
      var $87=$vertex;
      var $88=$87;
      var $bf_field_offs61=(($88+20)|0);
      var $89=$bf_field_offs61;
      var $90=HEAP32[(($89)>>2)];
      var $bf_clear62=$90 & 16777215;
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($80, 6116, ((5273960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$82,HEAP32[(((tempInt)+(4))>>2)]=$84,HEAP32[(((tempInt)+(8))>>2)]=$call60,HEAP32[(((tempInt)+(12))>>2)]=$bf_clear62,(HEAPF64[(tempDoublePtr)>>3]=$91,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $92=$facet;
      $errfacet1=$92;
      var $93=$neighbor;
      $errfacet2=$93;
      $waserror=1;
      label = 32; break;
    case 32: 
      label = 36; break;
    case 33: 
      var $94=HEAP32[(((((5243284)|0)))>>2)];
      var $inc65=((($94)+(1))|0);
      HEAP32[(((((5243284)|0)))>>2)]=$inc65;
      _qh_precision(((5274656)|0));
      var $95=HEAP32[((((5247040)|0))>>2)];
      var $tobool66=(($95)|0)!=0;
      if ($tobool66) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $96=HEAP32[((((5248924)|0))>>2)];
      var $97=$facet;
      var $id68=(($97+72)|0);
      var $98=HEAP32[(($id68)>>2)];
      var $99=$neighbor;
      var $id69=(($99+72)|0);
      var $100=HEAP32[(($id69)>>2)];
      var $101=$vertex;
      var $point70=(($101+8)|0);
      var $102=HEAP32[(($point70)>>2)];
      var $call71=_qh_pointid($102);
      var $103=$vertex;
      var $104=$103;
      var $bf_field_offs72=(($104+20)|0);
      var $105=$bf_field_offs72;
      var $106=HEAP32[(($105)>>2)];
      var $bf_clear73=$106 & 16777215;
      var $107=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $108=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($96, 22, ((5273392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$98,HEAP32[(((tempInt)+(4))>>2)]=$100,HEAP32[(((tempInt)+(8))>>2)]=$call71,HEAP32[(((tempInt)+(12))>>2)]=$bf_clear73,(HEAPF64[(tempDoublePtr)>>3]=$107,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(24))>>2)]=$108,tempInt));
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 20; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $109=$allsimplicial;
      var $tobool80=(($109)|0)!=0;
      if ($tobool80) { label = 71; break; } else { label = 42; break; }
    case 42: 
      var $110=HEAP32[((((5249036)|0))>>2)];
      var $cmp82=(($110)|0)==2;
      if ($cmp82) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $111=$facet;
      var $center=(($111+36)|0);
      var $112=HEAP32[(($center)>>2)];
      var $tobool84=(($112)|0)!=0;
      if ($tobool84) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $113=$facet;
      var $call86=_qh_getcentrum($113);
      var $114=$facet;
      var $center87=(($114+36)|0);
      HEAP32[(($center87)>>2)]=$call86;
      label = 45; break;
    case 45: 
      var $115=$facet;
      var $center89=(($115+36)|0);
      var $116=HEAP32[(($center89)>>2)];
      $centrum=$116;
      label = 51; break;
    case 46: 
      var $117=$centrum_warning;
      var $tobool91=(($117)|0)!=0;
      if ($tobool91) { label = 50; break; } else { label = 47; break; }
    case 47: 
      var $118=$facet;
      var $119=$118;
      var $bf_field_offs93=(($119+76)|0);
      var $120=$bf_field_offs93;
      var $121=HEAP32[(($120)>>2)];
      var $122=$121 >>> 13;
      var $bf_clear94=$122 & 1;
      var $tobool95=(($bf_clear94)|0)!=0;
      if ($tobool95) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $123=$facet;
      var $124=$123;
      var $bf_field_offs97=(($124+76)|0);
      var $125=$bf_field_offs97;
      var $126=HEAP32[(($125)>>2)];
      var $127=$126 >>> 9;
      var $bf_clear98=$127 & 1;
      var $tobool99=(($bf_clear98)|0)!=0;
      if ($tobool99) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $centrum_warning=1;
      var $128=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($128, 7062, ((5272876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 50; break;
    case 50: 
      var $129=$facet;
      var $call102=_qh_getcentrum($129);
      $centrum=$call102;
      $tempcentrum=1;
      label = 51; break;
    case 51: 
      $neighbor=0;
      var $130=$facet;
      var $neighbors104=(($130+56)|0);
      var $131=HEAP32[(($neighbors104)>>2)];
      var $tobool105=(($131)|0)!=0;
      if ($tobool105) { label = 52; break; } else { label = 68; break; }
    case 52: 
      var $132=$facet;
      var $neighbors107=(($132+56)|0);
      var $133=HEAP32[(($neighbors107)>>2)];
      var $e108=(($133+4)|0);
      var $arrayidx109=(($e108)|0);
      var $p110=$arrayidx109;
      var $134=$p110;
      $neighborp=$134;
      label = 53; break;
    case 53: 
      var $135=$neighborp;
      var $incdec_ptr112=(($135+4)|0);
      $neighborp=$incdec_ptr112;
      var $136=HEAP32[(($135)>>2)];
      $neighbor=$136;
      var $tobool113=(($136)|0)!=0;
      if ($tobool113) { label = 54; break; } else { label = 67; break; }
    case 54: 
      var $137=HEAP32[((((5248584)|0))>>2)];
      var $tobool115=(($137)|0)!=0;
      if ($tobool115) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $138=$facet;
      var $139=$138;
      var $bf_field_offs117=(($139+76)|0);
      var $140=$bf_field_offs117;
      var $141=HEAP32[(($140)>>2)];
      var $142=$141 >>> 13;
      var $bf_clear118=$142 & 1;
      var $tobool119=(($bf_clear118)|0)!=0;
      if ($tobool119) { label = 56; break; } else { label = 58; break; }
    case 56: 
      var $143=$neighbor;
      var $144=$143;
      var $bf_field_offs121=(($144+76)|0);
      var $145=$bf_field_offs121;
      var $146=HEAP32[(($145)>>2)];
      var $147=$146 >>> 13;
      var $bf_clear122=$147 & 1;
      var $tobool123=(($bf_clear122)|0)!=0;
      if ($tobool123) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 53; break;
    case 58: 
      var $148=$facet;
      var $149=$148;
      var $bf_field_offs126=(($149+76)|0);
      var $150=$bf_field_offs126;
      var $151=HEAP32[(($150)>>2)];
      var $152=$151 >>> 9;
      var $bf_clear127=$152 & 1;
      var $tobool128=(($bf_clear127)|0)!=0;
      if ($tobool128) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $153=$neighbor;
      var $154=$153;
      var $bf_field_offs130=(($154+76)|0);
      var $155=$bf_field_offs130;
      var $156=HEAP32[(($155)>>2)];
      var $157=$156 >>> 9;
      var $bf_clear131=$157 & 1;
      var $tobool132=(($bf_clear131)|0)!=0;
      if ($tobool132) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 53; break;
    case 61: 
      var $158=HEAP32[(((((5243412)|0)))>>2)];
      var $inc135=((($158)+(1))|0);
      HEAP32[(((((5243412)|0)))>>2)]=$inc135;
      var $159=$centrum;
      var $160=$neighbor;
      _qh_distplane($159, $160, $dist);
      var $161=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $162=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp136=$161 > $162;
      if ($cmp136) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $163=HEAP32[(((((5243204)|0)))>>2)];
      var $inc138=((($163)+(1))|0);
      HEAP32[(((((5243204)|0)))>>2)]=$inc138;
      _qh_precision(((5276088)|0));
      var $164=HEAP32[((((5248924)|0))>>2)];
      var $165=$facet;
      var $id139=(($165+72)|0);
      var $166=HEAP32[(($id139)>>2)];
      var $167=$neighbor;
      var $id140=(($167+72)|0);
      var $168=HEAP32[(($id140)>>2)];
      var $169=$facet;
      var $id141=(($169+72)|0);
      var $170=HEAP32[(($id141)>>2)];
      var $171=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $172=$neighbor;
      var $id142=(($172+72)|0);
      var $173=HEAP32[(($id142)>>2)];
      _qh_fprintf($164, 6117, ((5272352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$166,HEAP32[(((tempInt)+(4))>>2)]=$168,HEAP32[(((tempInt)+(8))>>2)]=$170,(HEAPF64[(tempDoublePtr)>>3]=$171,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$173,tempInt));
      var $174=$facet;
      $errfacet1=$174;
      var $175=$neighbor;
      $errfacet2=$175;
      $waserror=1;
      label = 66; break;
    case 63: 
      var $176=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp144=$176 >= 0;
      if ($cmp144) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $177=HEAP32[(((((5243284)|0)))>>2)];
      var $inc146=((($177)+(1))|0);
      HEAP32[(((((5243284)|0)))>>2)]=$inc146;
      _qh_precision(((5274656)|0));
      var $178=HEAP32[((((5248924)|0))>>2)];
      var $179=$facet;
      var $id147=(($179+72)|0);
      var $180=HEAP32[(($id147)>>2)];
      var $181=$neighbor;
      var $id148=(($181+72)|0);
      var $182=HEAP32[(($id148)>>2)];
      var $183=$facet;
      var $id149=(($183+72)|0);
      var $184=HEAP32[(($id149)>>2)];
      var $185=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $186=$neighbor;
      var $id150=(($186+72)|0);
      var $187=HEAP32[(($id150)>>2)];
      _qh_fprintf($178, 6118, ((5271672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$180,HEAP32[(((tempInt)+(4))>>2)]=$182,HEAP32[(((tempInt)+(8))>>2)]=$184,(HEAPF64[(tempDoublePtr)>>3]=$185,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(20))>>2)]=$187,tempInt));
      var $188=$facet;
      $errfacet1=$188;
      var $189=$neighbor;
      $errfacet2=$189;
      $waserror=1;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 53; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $190=$tempcentrum;
      var $tobool155=(($190)|0)!=0;
      if ($tobool155) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $191=$centrum;
      var $192=$191;
      var $193=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($192, $193);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $194=$facet;
      var $next159=(($194+44)|0);
      var $195=HEAP32[(($next159)>>2)];
      $facet=$195;
      label = 8; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $196=$waserror;
      var $tobool162=(($196)|0)!=0;
      if ($tobool162) { label = 75; break; } else { label = 77; break; }
    case 75: 
      var $197=HEAP32[((((5247012)|0))>>2)];
      var $tobool164=(($197)|0)!=0;
      if ($tobool164) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $198=$errfacet1;
      var $199=$errfacet2;
      _qh_errexit2(3, $198, $199);
      label = 77; break;
    case 77: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkconvex["X"]=1;

function _qh_checkfacet($facet, $newmerge, $waserrorp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $newmerge_addr;
      var $waserrorp_addr;
      var $neighbor;
      var $neighborp;
      var $errother;
      var $ridge;
      var $ridgep;
      var $errridge;
      var $ridge2;
      var $vertex;
      var $vertexp;
      var $previousid;
      var $numneighbors;
      var $numvertices;
      var $numridges;
      var $numRvertices;
      var $waserror;
      var $skipA;
      var $skipB;
      var $ridge_i;
      var $ridge_n;
      var $i;
      var $intersection=__stackBase__;
      $facet_addr=$facet;
      $newmerge_addr=$newmerge;
      $waserrorp_addr=$waserrorp;
      $errother=0;
      $errridge=0;
      $previousid=2147483647;
      $numridges=0;
      $numRvertices=0;
      $waserror=0;
      var $0=$facet_addr;
      var $1=$0;
      var $bf_field_offs=(($1+76)|0);
      var $2=$bf_field_offs;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 11;
      var $bf_clear=$4 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      var $6=$facet_addr;
      var $id=(($6+72)|0);
      var $7=HEAP32[(($id)>>2)];
      _qh_fprintf($5, 6119, ((5271052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
      var $8=$facet_addr;
      _qh_errexit(5, $8, 0);
      label = 4; break;
    case 4: 
      var $9=$facet_addr;
      var $normal=(($9+24)|0);
      var $10=HEAP32[(($normal)>>2)];
      var $tobool1=(($10)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      var $12=$facet_addr;
      var $id3=(($12+72)|0);
      var $13=HEAP32[(($id3)>>2)];
      _qh_fprintf($11, 6120, ((5270424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      $waserror=1;
      label = 6; break;
    case 6: 
      var $14=$facet_addr;
      var $vertices=(($14+48)|0);
      var $15=HEAP32[(($vertices)>>2)];
      var $16=$facet_addr;
      var $id5=(($16+72)|0);
      var $17=HEAP32[(($id5)>>2)];
      _qh_setcheck($15, ((5269988)|0), $17);
      var $18=$facet_addr;
      var $ridges=(($18+52)|0);
      var $19=HEAP32[(($ridges)>>2)];
      var $20=$facet_addr;
      var $id6=(($20+72)|0);
      var $21=HEAP32[(($id6)>>2)];
      _qh_setcheck($19, ((5269128)|0), $21);
      var $22=$facet_addr;
      var $outsideset=(($22+60)|0);
      var $23=HEAP32[(($outsideset)>>2)];
      var $24=$facet_addr;
      var $id7=(($24+72)|0);
      var $25=HEAP32[(($id7)>>2)];
      _qh_setcheck($23, ((5268448)|0), $25);
      var $26=$facet_addr;
      var $coplanarset=(($26+64)|0);
      var $27=HEAP32[(($coplanarset)>>2)];
      var $28=$facet_addr;
      var $id8=(($28+72)|0);
      var $29=HEAP32[(($id8)>>2)];
      _qh_setcheck($27, ((5268208)|0), $29);
      var $30=$facet_addr;
      var $neighbors=(($30+56)|0);
      var $31=HEAP32[(($neighbors)>>2)];
      var $32=$facet_addr;
      var $id9=(($32+72)|0);
      var $33=HEAP32[(($id9)>>2)];
      _qh_setcheck($31, ((5267964)|0), $33);
      $vertex=0;
      var $34=$facet_addr;
      var $vertices10=(($34+48)|0);
      var $35=HEAP32[(($vertices10)>>2)];
      var $tobool11=(($35)|0)!=0;
      if ($tobool11) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $36=$facet_addr;
      var $vertices13=(($36+48)|0);
      var $37=HEAP32[(($vertices13)>>2)];
      var $e=(($37+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $38=$p;
      $vertexp=$38;
      label = 8; break;
    case 8: 
      var $39=$vertexp;
      var $incdec_ptr=(($39+4)|0);
      $vertexp=$incdec_ptr;
      var $40=HEAP32[(($39)>>2)];
      $vertex=$40;
      var $tobool14=(($40)|0)!=0;
      if ($tobool14) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $41=$vertex;
      var $42=$41;
      var $bf_field_offs15=(($42+20)|0);
      var $43=$bf_field_offs15;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 30;
      var $bf_clear16=$45 & 1;
      var $tobool17=(($bf_clear16)|0)!=0;
      if ($tobool17) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $46=HEAP32[((((5248924)|0))>>2)];
      var $47=$vertex;
      var $48=$47;
      var $bf_field_offs19=(($48+20)|0);
      var $49=$bf_field_offs19;
      var $50=HEAP32[(($49)>>2)];
      var $bf_clear20=$50 & 16777215;
      var $51=$facet_addr;
      var $id21=(($51+72)|0);
      var $52=HEAP32[(($id21)>>2)];
      _qh_fprintf($46, 6121, ((5267680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear20,HEAP32[(((tempInt)+(4))>>2)]=$52,tempInt));
      var $53=$vertex;
      _qh_errprint(((5267284)|0), 0, 0, 0, $53);
      $waserror=1;
      label = 11; break;
    case 11: 
      var $54=$vertex;
      var $55=$54;
      var $bf_field_offs23=(($55+20)|0);
      var $56=$bf_field_offs23;
      var $57=HEAP32[(($56)>>2)];
      var $bf_clear24=$57 & 16777215;
      var $58=$previousid;
      var $cmp=(($bf_clear24)>>>0) >= (($58)>>>0);
      if ($cmp) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $59=HEAP32[((((5248924)|0))>>2)];
      var $60=$facet_addr;
      var $id26=(($60+72)|0);
      var $61=HEAP32[(($id26)>>2)];
      var $62=$vertex;
      var $63=$62;
      var $bf_field_offs27=(($63+20)|0);
      var $64=$bf_field_offs27;
      var $65=HEAP32[(($64)>>2)];
      var $bf_clear28=$65 & 16777215;
      _qh_fprintf($59, 6122, ((5266980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear28,tempInt));
      $waserror=1;
      label = 14; break;
    case 13: 
      var $66=$vertex;
      var $67=$66;
      var $bf_field_offs30=(($67+20)|0);
      var $68=$bf_field_offs30;
      var $69=HEAP32[(($68)>>2)];
      var $bf_clear31=$69 & 16777215;
      $previousid=$bf_clear31;
      label = 8; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $70=$facet_addr;
      var $neighbors33=(($70+56)|0);
      var $71=HEAP32[(($neighbors33)>>2)];
      var $call=_qh_setsize($71);
      $numneighbors=$call;
      var $72=$facet_addr;
      var $vertices34=(($72+48)|0);
      var $73=HEAP32[(($vertices34)>>2)];
      var $call35=_qh_setsize($73);
      $numvertices=$call35;
      var $74=$facet_addr;
      var $ridges36=(($74+52)|0);
      var $75=HEAP32[(($ridges36)>>2)];
      var $call37=_qh_setsize($75);
      $numridges=$call37;
      var $76=$facet_addr;
      var $77=$76;
      var $bf_field_offs38=(($77+76)|0);
      var $78=$bf_field_offs38;
      var $79=HEAP32[(($78)>>2)];
      var $80=$79 >>> 13;
      var $bf_clear39=$80 & 1;
      var $tobool40=(($bf_clear39)|0)!=0;
      if ($tobool40) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $81=$numvertices;
      var $82=$numneighbors;
      var $add=((($81)+($82))|0);
      var $83=HEAP32[((((5247508)|0))>>2)];
      var $mul=((($83<<1))&-1);
      var $cmp42=(($add)|0)!=(($mul)|0);
      if ($cmp42) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $84=$facet_addr;
      var $85=$84;
      var $bf_field_offs43=(($85+76)|0);
      var $86=$bf_field_offs43;
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 >>> 30;
      var $bf_clear44=$88 & 1;
      var $tobool45=(($bf_clear44)|0)!=0;
      if ($tobool45) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $89=$facet_addr;
      var $90=$89;
      var $bf_field_offs47=(($90+76)|0);
      var $91=$bf_field_offs47;
      var $92=HEAP32[(($91)>>2)];
      var $93=$92 >>> 31;
      var $bf_clear48=$93 & 1;
      var $tobool49=(($bf_clear48)|0)!=0;
      if ($tobool49) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $94=HEAP32[((((5248924)|0))>>2)];
      var $95=$facet_addr;
      var $id51=(($95+72)|0);
      var $96=HEAP32[(($id51)>>2)];
      var $97=$numvertices;
      var $98=$numneighbors;
      _qh_fprintf($94, 6123, ((5266620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$96,HEAP32[(((tempInt)+(4))>>2)]=$97,HEAP32[(((tempInt)+(8))>>2)]=$98,tempInt));
      var $99=HEAP32[((((5248924)|0))>>2)];
      var $100=$facet_addr;
      var $neighbors52=(($100+56)|0);
      var $101=HEAP32[(($neighbors52)>>2)];
      _qh_setprint($99, ((5266136)|0), $101);
      $waserror=1;
      label = 20; break;
    case 20: 
      label = 38; break;
    case 21: 
      var $102=$newmerge_addr;
      var $tobool54=(($102)|0)!=0;
      if ($tobool54) { label = 27; break; } else { label = 22; break; }
    case 22: 
      var $103=$numvertices;
      var $104=HEAP32[((((5247508)|0))>>2)];
      var $cmp56=(($103)|0) < (($104)|0);
      if ($cmp56) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $105=$numneighbors;
      var $106=HEAP32[((((5247508)|0))>>2)];
      var $cmp57=(($105)|0) < (($106)|0);
      if ($cmp57) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $107=$facet_addr;
      var $108=$107;
      var $bf_field_offs59=(($108+76)|0);
      var $109=$bf_field_offs59;
      var $110=HEAP32[(($109)>>2)];
      var $111=$110 >>> 30;
      var $bf_clear60=$111 & 1;
      var $tobool61=(($bf_clear60)|0)!=0;
      if ($tobool61) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $112=$facet_addr;
      var $113=$112;
      var $bf_field_offs63=(($113+76)|0);
      var $114=$bf_field_offs63;
      var $115=HEAP32[(($114)>>2)];
      var $116=$115 >>> 31;
      var $bf_clear64=$116 & 1;
      var $tobool65=(($bf_clear64)|0)!=0;
      if ($tobool65) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $117=HEAP32[((((5248924)|0))>>2)];
      var $118=$facet_addr;
      var $id67=(($118+72)|0);
      var $119=HEAP32[(($id67)>>2)];
      var $120=$numvertices;
      var $121=$numneighbors;
      _qh_fprintf($117, 6124, ((5266140)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$119,HEAP32[(((tempInt)+(4))>>2)]=$120,HEAP32[(((tempInt)+(8))>>2)]=$121,tempInt));
      $waserror=1;
      label = 27; break;
    case 27: 
      var $122=$numridges;
      var $123=$numneighbors;
      var $cmp69=(($122)|0) < (($123)|0);
      if ($cmp69) { label = 33; break; } else { label = 28; break; }
    case 28: 
      var $124=HEAP32[((((5247508)|0))>>2)];
      var $cmp71=(($124)|0)==3;
      if ($cmp71) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $125=$numvertices;
      var $126=$numridges;
      var $cmp73=(($125)|0) > (($126)|0);
      if ($cmp73) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $127=HEAP32[((((5249092)|0))>>2)];
      var $tobool75=(($127)|0)!=0;
      if ($tobool75) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $128=HEAP32[((((5247508)|0))>>2)];
      var $cmp77=(($128)|0)==2;
      if ($cmp77) { label = 32; break; } else { label = 37; break; }
    case 32: 
      var $129=$numridges;
      var $130=$numvertices;
      var $add79=((($129)+($130))|0);
      var $131=$numneighbors;
      var $add80=((($add79)+($131))|0);
      var $cmp81=(($add80)|0)!=6;
      if ($cmp81) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $132=$facet_addr;
      var $133=$132;
      var $bf_field_offs83=(($133+76)|0);
      var $134=$bf_field_offs83;
      var $135=HEAP32[(($134)>>2)];
      var $136=$135 >>> 30;
      var $bf_clear84=$136 & 1;
      var $tobool85=(($bf_clear84)|0)!=0;
      if ($tobool85) { label = 36; break; } else { label = 34; break; }
    case 34: 
      var $137=$facet_addr;
      var $138=$137;
      var $bf_field_offs87=(($138+76)|0);
      var $139=$bf_field_offs87;
      var $140=HEAP32[(($139)>>2)];
      var $141=$140 >>> 31;
      var $bf_clear88=$141 & 1;
      var $tobool89=(($bf_clear88)|0)!=0;
      if ($tobool89) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $142=HEAP32[((((5248924)|0))>>2)];
      var $143=$facet_addr;
      var $id91=(($143+72)|0);
      var $144=HEAP32[(($id91)>>2)];
      var $145=$numridges;
      var $146=$numneighbors;
      var $147=$numvertices;
      _qh_fprintf($142, 6125, ((5265800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$144,HEAP32[(((tempInt)+(4))>>2)]=$145,HEAP32[(((tempInt)+(8))>>2)]=$146,HEAP32[(((tempInt)+(12))>>2)]=$147,tempInt));
      $waserror=1;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      $neighbor=0;
      var $148=$facet_addr;
      var $neighbors95=(($148+56)|0);
      var $149=HEAP32[(($neighbors95)>>2)];
      var $tobool96=(($149)|0)!=0;
      if ($tobool96) { label = 39; break; } else { label = 46; break; }
    case 39: 
      var $150=$facet_addr;
      var $neighbors98=(($150+56)|0);
      var $151=HEAP32[(($neighbors98)>>2)];
      var $e99=(($151+4)|0);
      var $arrayidx100=(($e99)|0);
      var $p101=$arrayidx100;
      var $152=$p101;
      $neighborp=$152;
      label = 40; break;
    case 40: 
      var $153=$neighborp;
      var $incdec_ptr103=(($153+4)|0);
      $neighborp=$incdec_ptr103;
      var $154=HEAP32[(($153)>>2)];
      $neighbor=$154;
      var $tobool104=(($154)|0)!=0;
      if ($tobool104) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $155=$neighbor;
      var $cmp106=(($155)|0)==2;
      if ($cmp106) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $156=$neighbor;
      var $cmp108=(($156)|0)==1;
      if ($cmp108) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $157=HEAP32[((((5248924)|0))>>2)];
      var $158=$facet_addr;
      var $id110=(($158+72)|0);
      var $159=HEAP32[(($id110)>>2)];
      _qh_fprintf($157, 6126, ((5265456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$159,tempInt));
      var $160=$facet_addr;
      _qh_errexit(5, $160, 0);
      label = 44; break;
    case 44: 
      var $161=$neighbor;
      var $162=$161;
      var $bf_field_offs112=(($162+76)|0);
      var $163=$bf_field_offs112;
      var $164=HEAP32[(($163)>>2)];
      var $165=$164 & -16385;
      var $166=$165 | 16384;
      HEAP32[(($163)>>2)]=$166;
      label = 40; break;
    case 45: 
      label = 46; break;
    case 46: 
      $neighbor=0;
      var $167=$facet_addr;
      var $neighbors115=(($167+56)|0);
      var $168=HEAP32[(($neighbors115)>>2)];
      var $tobool116=(($168)|0)!=0;
      if ($tobool116) { label = 47; break; } else { label = 55; break; }
    case 47: 
      var $169=$facet_addr;
      var $neighbors118=(($169+56)|0);
      var $170=HEAP32[(($neighbors118)>>2)];
      var $e119=(($170+4)|0);
      var $arrayidx120=(($e119)|0);
      var $p121=$arrayidx120;
      var $171=$p121;
      $neighborp=$171;
      label = 48; break;
    case 48: 
      var $172=$neighborp;
      var $incdec_ptr123=(($172+4)|0);
      $neighborp=$incdec_ptr123;
      var $173=HEAP32[(($172)>>2)];
      $neighbor=$173;
      var $tobool124=(($173)|0)!=0;
      if ($tobool124) { label = 49; break; } else { label = 54; break; }
    case 49: 
      var $174=$neighbor;
      var $neighbors126=(($174+56)|0);
      var $175=HEAP32[(($neighbors126)>>2)];
      var $176=$facet_addr;
      var $177=$176;
      var $call127=_qh_setin($175, $177);
      var $tobool128=(($call127)|0)!=0;
      if ($tobool128) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $178=HEAP32[((((5248924)|0))>>2)];
      var $179=$facet_addr;
      var $id130=(($179+72)|0);
      var $180=HEAP32[(($id130)>>2)];
      var $181=$neighbor;
      var $id131=(($181+72)|0);
      var $182=HEAP32[(($id131)>>2)];
      var $183=$neighbor;
      var $id132=(($183+72)|0);
      var $184=HEAP32[(($id132)>>2)];
      var $185=$facet_addr;
      var $id133=(($185+72)|0);
      var $186=HEAP32[(($id133)>>2)];
      _qh_fprintf($178, 6127, ((5265032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$180,HEAP32[(((tempInt)+(4))>>2)]=$182,HEAP32[(((tempInt)+(8))>>2)]=$184,HEAP32[(((tempInt)+(12))>>2)]=$186,tempInt));
      var $187=$neighbor;
      $errother=$187;
      $waserror=1;
      label = 51; break;
    case 51: 
      var $188=$neighbor;
      var $189=$188;
      var $bf_field_offs135=(($189+76)|0);
      var $190=$bf_field_offs135;
      var $191=HEAP32[(($190)>>2)];
      var $192=$191 >>> 14;
      var $bf_clear136=$192 & 1;
      var $tobool137=(($bf_clear136)|0)!=0;
      if ($tobool137) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $193=HEAP32[((((5248924)|0))>>2)];
      var $194=$facet_addr;
      var $id139=(($194+72)|0);
      var $195=HEAP32[(($id139)>>2)];
      var $196=$neighbor;
      var $id140=(($196+72)|0);
      var $197=HEAP32[(($id140)>>2)];
      _qh_fprintf($193, 6128, ((5264660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$195,HEAP32[(((tempInt)+(4))>>2)]=$197,tempInt));
      var $198=$neighbor;
      $errother=$198;
      $waserror=1;
      label = 53; break;
    case 53: 
      var $199=$neighbor;
      var $200=$199;
      var $bf_field_offs142=(($200+76)|0);
      var $201=$bf_field_offs142;
      var $202=HEAP32[(($201)>>2)];
      var $203=$202 & -16385;
      HEAP32[(($201)>>2)]=$203;
      label = 48; break;
    case 54: 
      label = 55; break;
    case 55: 
      $ridge=0;
      var $204=$facet_addr;
      var $ridges145=(($204+52)|0);
      var $205=HEAP32[(($ridges145)>>2)];
      var $tobool146=(($205)|0)!=0;
      if ($tobool146) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $206=$facet_addr;
      var $ridges148=(($206+52)|0);
      var $207=HEAP32[(($ridges148)>>2)];
      var $e149=(($207+4)|0);
      var $arrayidx150=(($e149)|0);
      var $p151=$arrayidx150;
      var $208=$p151;
      $ridgep=$208;
      label = 57; break;
    case 57: 
      var $209=$ridgep;
      var $incdec_ptr153=(($209+4)|0);
      $ridgep=$incdec_ptr153;
      var $210=HEAP32[(($209)>>2)];
      $ridge=$210;
      var $tobool154=(($210)|0)!=0;
      if ($tobool154) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $211=$ridge;
      var $vertices156=(($211)|0);
      var $212=HEAP32[(($vertices156)>>2)];
      var $213=$ridge;
      var $214=$213;
      var $bf_field_offs157=(($214+12)|0);
      var $215=$bf_field_offs157;
      var $216=HEAP32[(($215)>>2)];
      var $bf_clear158=$216 & 16777215;
      _qh_setcheck($212, ((5264272)|0), $bf_clear158);
      var $217=$ridge;
      var $218=$217;
      var $bf_field_offs159=(($218+12)|0);
      var $219=$bf_field_offs159;
      var $220=HEAP32[(($219)>>2)];
      var $221=$220 & -16777217;
      HEAP32[(($219)>>2)]=$221;
      label = 57; break;
    case 59: 
      label = 60; break;
    case 60: 
      $ridge=0;
      var $222=$facet_addr;
      var $ridges162=(($222+52)|0);
      var $223=HEAP32[(($ridges162)>>2)];
      var $tobool163=(($223)|0)!=0;
      if ($tobool163) { label = 61; break; } else { label = 74; break; }
    case 61: 
      var $224=$facet_addr;
      var $ridges165=(($224+52)|0);
      var $225=HEAP32[(($ridges165)>>2)];
      var $e166=(($225+4)|0);
      var $arrayidx167=(($e166)|0);
      var $p168=$arrayidx167;
      var $226=$p168;
      $ridgep=$226;
      label = 62; break;
    case 62: 
      var $227=$ridgep;
      var $incdec_ptr170=(($227+4)|0);
      $ridgep=$incdec_ptr170;
      var $228=HEAP32[(($227)>>2)];
      $ridge=$228;
      var $tobool171=(($228)|0)!=0;
      if ($tobool171) { label = 63; break; } else { label = 73; break; }
    case 63: 
      var $229=$ridge;
      var $230=$229;
      var $bf_field_offs173=(($230+12)|0);
      var $231=$bf_field_offs173;
      var $232=HEAP32[(($231)>>2)];
      var $233=$232 >>> 24;
      var $bf_clear174=$233 & 1;
      var $tobool175=(($bf_clear174)|0)!=0;
      if ($tobool175) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $234=HEAP32[((((5248924)|0))>>2)];
      var $235=$facet_addr;
      var $id177=(($235+72)|0);
      var $236=HEAP32[(($id177)>>2)];
      var $237=$ridge;
      var $238=$237;
      var $bf_field_offs178=(($238+12)|0);
      var $239=$bf_field_offs178;
      var $240=HEAP32[(($239)>>2)];
      var $bf_clear179=$240 & 16777215;
      _qh_fprintf($234, 6129, ((5263800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$236,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear179,tempInt));
      var $241=$ridge;
      $errridge=$241;
      $waserror=1;
      label = 65; break;
    case 65: 
      var $242=$ridge;
      var $243=$242;
      var $bf_field_offs181=(($243+12)|0);
      var $244=$bf_field_offs181;
      var $245=HEAP32[(($244)>>2)];
      var $246=$245 & -16777217;
      var $247=$246 | 16777216;
      HEAP32[(($244)>>2)]=$247;
      var $248=$ridge;
      var $vertices182=(($248)|0);
      var $249=HEAP32[(($vertices182)>>2)];
      var $call183=_qh_setsize($249);
      $numRvertices=$call183;
      var $250=$numRvertices;
      var $251=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($251)-(1))|0);
      var $cmp184=(($250)|0)!=(($sub)|0);
      if ($cmp184) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $252=HEAP32[((((5248924)|0))>>2)];
      var $253=$ridge;
      var $top=(($253+4)|0);
      var $254=HEAP32[(($top)>>2)];
      var $id186=(($254+72)|0);
      var $255=HEAP32[(($id186)>>2)];
      var $256=$ridge;
      var $bottom=(($256+8)|0);
      var $257=HEAP32[(($bottom)>>2)];
      var $id187=(($257+72)|0);
      var $258=HEAP32[(($id187)>>2)];
      var $259=$numRvertices;
      _qh_fprintf($252, 6130, ((5263400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$255,HEAP32[(((tempInt)+(4))>>2)]=$258,HEAP32[(((tempInt)+(8))>>2)]=$259,tempInt));
      var $260=$ridge;
      $errridge=$260;
      $waserror=1;
      label = 67; break;
    case 67: 
      var $261=$ridge;
      var $top189=(($261+4)|0);
      var $262=HEAP32[(($top189)>>2)];
      var $263=$facet_addr;
      var $cmp190=(($262)|0)==(($263)|0);
      if ($cmp190) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $264=$ridge;
      var $bottom191=(($264+8)|0);
      var $265=HEAP32[(($bottom191)>>2)];
      var $cond = $265;label = 70; break;
    case 69: 
      var $266=$ridge;
      var $top192=(($266+4)|0);
      var $267=HEAP32[(($top192)>>2)];
      var $cond = $267;label = 70; break;
    case 70: 
      var $cond;
      $neighbor=$cond;
      var $268=$neighbor;
      var $269=$268;
      var $bf_field_offs193=(($269+76)|0);
      var $270=$bf_field_offs193;
      var $271=HEAP32[(($270)>>2)];
      var $272=$271 & -16385;
      var $273=$272 | 16384;
      HEAP32[(($270)>>2)]=$273;
      var $274=$facet_addr;
      var $neighbors194=(($274+56)|0);
      var $275=HEAP32[(($neighbors194)>>2)];
      var $276=$neighbor;
      var $277=$276;
      var $call195=_qh_setin($275, $277);
      var $tobool196=(($call195)|0)!=0;
      if ($tobool196) { label = 72; break; } else { label = 71; break; }
    case 71: 
      var $278=HEAP32[((((5248924)|0))>>2)];
      var $279=$facet_addr;
      var $id198=(($279+72)|0);
      var $280=HEAP32[(($id198)>>2)];
      var $281=$neighbor;
      var $id199=(($281+72)|0);
      var $282=HEAP32[(($id199)>>2)];
      var $283=$ridge;
      var $284=$283;
      var $bf_field_offs200=(($284+12)|0);
      var $285=$bf_field_offs200;
      var $286=HEAP32[(($285)>>2)];
      var $bf_clear201=$286 & 16777215;
      _qh_fprintf($278, 6131, ((5262968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$280,HEAP32[(((tempInt)+(4))>>2)]=$282,HEAP32[(((tempInt)+(8))>>2)]=$bf_clear201,tempInt));
      var $287=$ridge;
      $errridge=$287;
      $waserror=1;
      label = 72; break;
    case 72: 
      label = 62; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $288=$facet_addr;
      var $289=$288;
      var $bf_field_offs205=(($289+76)|0);
      var $290=$bf_field_offs205;
      var $291=HEAP32[(($290)>>2)];
      var $292=$291 >>> 13;
      var $bf_clear206=$292 & 1;
      var $tobool207=(($bf_clear206)|0)!=0;
      if ($tobool207) { label = 127; break; } else { label = 75; break; }
    case 75: 
      $neighbor=0;
      var $293=$facet_addr;
      var $neighbors209=(($293+56)|0);
      var $294=HEAP32[(($neighbors209)>>2)];
      var $tobool210=(($294)|0)!=0;
      if ($tobool210) { label = 76; break; } else { label = 126; break; }
    case 76: 
      var $295=$facet_addr;
      var $neighbors212=(($295+56)|0);
      var $296=HEAP32[(($neighbors212)>>2)];
      var $e213=(($296+4)|0);
      var $arrayidx214=(($e213)|0);
      var $p215=$arrayidx214;
      var $297=$p215;
      $neighborp=$297;
      label = 77; break;
    case 77: 
      var $298=$neighborp;
      var $incdec_ptr217=(($298+4)|0);
      $neighborp=$incdec_ptr217;
      var $299=HEAP32[(($298)>>2)];
      $neighbor=$299;
      var $tobool218=(($299)|0)!=0;
      if ($tobool218) { label = 78; break; } else { label = 125; break; }
    case 78: 
      var $300=$neighbor;
      var $301=$300;
      var $bf_field_offs220=(($301+76)|0);
      var $302=$bf_field_offs220;
      var $303=HEAP32[(($302)>>2)];
      var $304=$303 >>> 14;
      var $bf_clear221=$304 & 1;
      var $tobool222=(($bf_clear221)|0)!=0;
      if ($tobool222) { label = 80; break; } else { label = 79; break; }
    case 79: 
      var $305=HEAP32[((((5248924)|0))>>2)];
      var $306=$facet_addr;
      var $id224=(($306+72)|0);
      var $307=HEAP32[(($id224)>>2)];
      var $308=$neighbor;
      var $id225=(($308+72)|0);
      var $309=HEAP32[(($id225)>>2)];
      _qh_fprintf($305, 6132, ((5262412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$307,HEAP32[(((tempInt)+(4))>>2)]=$309,tempInt));
      var $310=$neighbor;
      $errother=$310;
      $waserror=1;
      label = 80; break;
    case 80: 
      var $311=$facet_addr;
      var $vertices227=(($311+48)|0);
      var $312=HEAP32[(($vertices227)>>2)];
      var $313=$neighbor;
      var $vertices228=(($313+48)|0);
      var $314=HEAP32[(($vertices228)>>2)];
      var $call229=_qh_vertexintersect_new($312, $314);
      HEAP32[(($intersection)>>2)]=$call229;
      var $315=HEAP32[(($intersection)>>2)];
      _qh_settemppush($315);
      $vertex=0;
      var $316=$facet_addr;
      var $vertices230=(($316+48)|0);
      var $317=HEAP32[(($vertices230)>>2)];
      var $tobool231=(($317)|0)!=0;
      if ($tobool231) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $318=$facet_addr;
      var $vertices233=(($318+48)|0);
      var $319=HEAP32[(($vertices233)>>2)];
      var $e234=(($319+4)|0);
      var $arrayidx235=(($e234)|0);
      var $p236=$arrayidx235;
      var $320=$p236;
      $vertexp=$320;
      label = 82; break;
    case 82: 
      var $321=$vertexp;
      var $incdec_ptr238=(($321+4)|0);
      $vertexp=$incdec_ptr238;
      var $322=HEAP32[(($321)>>2)];
      $vertex=$322;
      var $tobool239=(($322)|0)!=0;
      if ($tobool239) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $323=$vertex;
      var $324=$323;
      var $bf_field_offs241=(($324+20)|0);
      var $325=$bf_field_offs241;
      var $326=HEAP32[(($325)>>2)];
      var $327=$326 & -268435457;
      HEAP32[(($325)>>2)]=$327;
      var $328=$vertex;
      var $329=$328;
      var $bf_field_offs242=(($329+16)|0);
      var $330=$bf_field_offs242;
      var $331=HEAP32[(($330)>>2)];
      var $332=$331 & 2147483647;
      HEAP32[(($330)>>2)]=$332;
      label = 82; break;
    case 84: 
      label = 85; break;
    case 85: 
      $vertex=0;
      var $333=HEAP32[(($intersection)>>2)];
      var $tobool245=(($333)|0)!=0;
      if ($tobool245) { label = 86; break; } else { label = 90; break; }
    case 86: 
      var $334=HEAP32[(($intersection)>>2)];
      var $e247=(($334+4)|0);
      var $arrayidx248=(($e247)|0);
      var $p249=$arrayidx248;
      var $335=$p249;
      $vertexp=$335;
      label = 87; break;
    case 87: 
      var $336=$vertexp;
      var $incdec_ptr251=(($336+4)|0);
      $vertexp=$incdec_ptr251;
      var $337=HEAP32[(($336)>>2)];
      $vertex=$337;
      var $tobool252=(($337)|0)!=0;
      if ($tobool252) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $338=$vertex;
      var $339=$338;
      var $bf_field_offs254=(($339+20)|0);
      var $340=$bf_field_offs254;
      var $341=HEAP32[(($340)>>2)];
      var $342=$341 & -268435457;
      var $343=$342 | 268435456;
      HEAP32[(($340)>>2)]=$343;
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      $ridge=0;
      var $344=$facet_addr;
      var $ridges257=(($344+52)|0);
      var $345=HEAP32[(($ridges257)>>2)];
      var $tobool258=(($345)|0)!=0;
      if ($tobool258) { label = 91; break; } else { label = 107; break; }
    case 91: 
      var $346=$facet_addr;
      var $ridges260=(($346+52)|0);
      var $347=HEAP32[(($ridges260)>>2)];
      var $e261=(($347+4)|0);
      var $arrayidx262=(($e261)|0);
      var $p263=$arrayidx262;
      var $348=$p263;
      $ridgep=$348;
      label = 92; break;
    case 92: 
      var $349=$ridgep;
      var $incdec_ptr265=(($349+4)|0);
      $ridgep=$incdec_ptr265;
      var $350=HEAP32[(($349)>>2)];
      $ridge=$350;
      var $tobool266=(($350)|0)!=0;
      if ($tobool266) { label = 93; break; } else { label = 106; break; }
    case 93: 
      var $351=$neighbor;
      var $352=$ridge;
      var $top268=(($352+4)|0);
      var $353=HEAP32[(($top268)>>2)];
      var $354=$facet_addr;
      var $cmp269=(($353)|0)==(($354)|0);
      if ($cmp269) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $355=$ridge;
      var $bottom271=(($355+8)|0);
      var $356=HEAP32[(($bottom271)>>2)];
      var $cond275 = $356;label = 96; break;
    case 95: 
      var $357=$ridge;
      var $top273=(($357+4)|0);
      var $358=HEAP32[(($top273)>>2)];
      var $cond275 = $358;label = 96; break;
    case 96: 
      var $cond275;
      var $cmp276=(($351)|0)!=(($cond275)|0);
      if ($cmp276) { label = 97; break; } else { label = 98; break; }
    case 97: 
      label = 92; break;
    case 98: 
      $vertex=0;
      var $359=$ridge;
      var $vertices279=(($359)|0);
      var $360=HEAP32[(($vertices279)>>2)];
      var $tobool280=(($360)|0)!=0;
      if ($tobool280) { label = 99; break; } else { label = 105; break; }
    case 99: 
      var $361=$ridge;
      var $vertices282=(($361)|0);
      var $362=HEAP32[(($vertices282)>>2)];
      var $e283=(($362+4)|0);
      var $arrayidx284=(($e283)|0);
      var $p285=$arrayidx284;
      var $363=$p285;
      $vertexp=$363;
      label = 100; break;
    case 100: 
      var $364=$vertexp;
      var $incdec_ptr287=(($364+4)|0);
      $vertexp=$incdec_ptr287;
      var $365=HEAP32[(($364)>>2)];
      $vertex=$365;
      var $tobool288=(($365)|0)!=0;
      if ($tobool288) { label = 101; break; } else { label = 104; break; }
    case 101: 
      var $366=$vertex;
      var $367=$366;
      var $bf_field_offs290=(($367+20)|0);
      var $368=$bf_field_offs290;
      var $369=HEAP32[(($368)>>2)];
      var $370=$369 >>> 28;
      var $bf_clear291=$370 & 1;
      var $tobool292=(($bf_clear291)|0)!=0;
      if ($tobool292) { label = 103; break; } else { label = 102; break; }
    case 102: 
      var $371=HEAP32[((((5248924)|0))>>2)];
      var $372=$vertex;
      var $373=$372;
      var $bf_field_offs294=(($373+20)|0);
      var $374=$bf_field_offs294;
      var $375=HEAP32[(($374)>>2)];
      var $bf_clear295=$375 & 16777215;
      var $376=$ridge;
      var $377=$376;
      var $bf_field_offs296=(($377+12)|0);
      var $378=$bf_field_offs296;
      var $379=HEAP32[(($378)>>2)];
      var $bf_clear297=$379 & 16777215;
      var $380=$facet_addr;
      var $id298=(($380+72)|0);
      var $381=HEAP32[(($id298)>>2)];
      var $382=$neighbor;
      var $id299=(($382+72)|0);
      var $383=HEAP32[(($id299)>>2)];
      _qh_fprintf($371, 6133, ((5261932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear295,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear297,HEAP32[(((tempInt)+(8))>>2)]=$381,HEAP32[(((tempInt)+(12))>>2)]=$383,tempInt));
      var $384=$facet_addr;
      var $385=$ridge;
      _qh_errexit(5, $384, $385);
      label = 103; break;
    case 103: 
      var $386=$vertex;
      var $387=$386;
      var $bf_field_offs301=(($387+16)|0);
      var $388=$bf_field_offs301;
      var $389=HEAP32[(($388)>>2)];
      var $390=$389 & 2147483647;
      var $391=$390 | -2147483648;
      HEAP32[(($388)>>2)]=$391;
      label = 100; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 92; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $392=$newmerge_addr;
      var $tobool306=(($392)|0)!=0;
      if ($tobool306) { label = 124; break; } else { label = 108; break; }
    case 108: 
      $vertex=0;
      var $393=HEAP32[(($intersection)>>2)];
      var $tobool308=(($393)|0)!=0;
      if ($tobool308) { label = 109; break; } else { label = 123; break; }
    case 109: 
      var $394=HEAP32[(($intersection)>>2)];
      var $e310=(($394+4)|0);
      var $arrayidx311=(($e310)|0);
      var $p312=$arrayidx311;
      var $395=$p312;
      $vertexp=$395;
      label = 110; break;
    case 110: 
      var $396=$vertexp;
      var $incdec_ptr314=(($396+4)|0);
      $vertexp=$incdec_ptr314;
      var $397=HEAP32[(($396)>>2)];
      $vertex=$397;
      var $tobool315=(($397)|0)!=0;
      if ($tobool315) { label = 111; break; } else { label = 122; break; }
    case 111: 
      var $398=$vertex;
      var $399=$398;
      var $bf_field_offs317=(($399+16)|0);
      var $400=$bf_field_offs317;
      var $401=HEAP32[(($400)>>2)];
      var $402=$401 >>> 31;
      var $bf_clear318=$402 & 1;
      var $tobool319=(($bf_clear318)|0)!=0;
      if ($tobool319) { label = 121; break; } else { label = 112; break; }
    case 112: 
      var $403=HEAP32[((((5247040)|0))>>2)];
      var $cmp321=(($403)|0) >= 3;
      if ($cmp321) { label = 114; break; } else { label = 113; break; }
    case 113: 
      var $404=HEAP32[((((5247084)|0))>>2)];
      var $tobool323=(($404)|0)!=0;
      if ($tobool323) { label = 120; break; } else { label = 114; break; }
    case 114: 
      var $405=HEAP32[((((5248924)|0))>>2)];
      var $406=$vertex;
      var $407=$406;
      var $bf_field_offs325=(($407+20)|0);
      var $408=$bf_field_offs325;
      var $409=HEAP32[(($408)>>2)];
      var $bf_clear326=$409 & 16777215;
      var $410=$facet_addr;
      var $id327=(($410+72)|0);
      var $411=HEAP32[(($id327)>>2)];
      var $412=$neighbor;
      var $id328=(($412+72)|0);
      var $413=HEAP32[(($id328)>>2)];
      var $414=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($405, 6134, ((5261400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear326,HEAP32[(((tempInt)+(4))>>2)]=$411,HEAP32[(((tempInt)+(8))>>2)]=$413,HEAP32[(((tempInt)+(12))>>2)]=$414,tempInt));
      var $415=HEAP32[((((5247012)|0))>>2)];
      var $tobool329=(($415)|0)!=0;
      if ($tobool329) { label = 119; break; } else { label = 115; break; }
    case 115: 
      var $416=HEAP32[((((5247084)|0))>>2)];
      var $tobool331=(($416)|0)!=0;
      if ($tobool331) { label = 119; break; } else { label = 116; break; }
    case 116: 
      var $417=$facet_addr;
      var $418=$neighbor;
      var $419=$vertex;
      _qh_errprint(((5267284)|0), $417, $418, 0, $419);
      var $420=HEAP32[((((5247084)|0))>>2)];
      var $tobool333=(($420)|0)!=0;
      if ($tobool333) { label = 118; break; } else { label = 117; break; }
    case 117: 
      _qh_errexit(5, 0, 0);
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 110; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      _qh_settempfree($intersection);
      label = 77; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 137; break;
    case 127: 
      $neighbor=0;
      var $421=$facet_addr;
      var $neighbors345=(($421+56)|0);
      var $422=HEAP32[(($neighbors345)>>2)];
      var $tobool346=(($422)|0)!=0;
      if ($tobool346) { label = 128; break; } else { label = 136; break; }
    case 128: 
      var $423=$facet_addr;
      var $neighbors348=(($423+56)|0);
      var $424=HEAP32[(($neighbors348)>>2)];
      var $e349=(($424+4)|0);
      var $arrayidx350=(($e349)|0);
      var $p351=$arrayidx350;
      var $425=$p351;
      $neighborp=$425;
      label = 129; break;
    case 129: 
      var $426=$neighborp;
      var $incdec_ptr353=(($426+4)|0);
      $neighborp=$incdec_ptr353;
      var $427=HEAP32[(($426)>>2)];
      $neighbor=$427;
      var $tobool354=(($427)|0)!=0;
      if ($tobool354) { label = 130; break; } else { label = 135; break; }
    case 130: 
      var $428=$neighbor;
      var $429=$428;
      var $bf_field_offs356=(($429+76)|0);
      var $430=$bf_field_offs356;
      var $431=HEAP32[(($430)>>2)];
      var $432=$431 >>> 13;
      var $bf_clear357=$432 & 1;
      var $tobool358=(($bf_clear357)|0)!=0;
      if ($tobool358) { label = 131; break; } else { label = 134; break; }
    case 131: 
      var $433=$neighborp;
      var $434=$433;
      var $435=$facet_addr;
      var $neighbors360=(($435+56)|0);
      var $436=HEAP32[(($neighbors360)>>2)];
      var $e361=(($436+4)|0);
      var $arrayidx362=(($e361+4)|0);
      var $p363=$arrayidx362;
      var $sub_ptr_lhs_cast=$434;
      var $sub_ptr_rhs_cast=$p363;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      $skipA=$sub_ptr_div;
      var $437=$neighbor;
      var $neighbors364=(($437+56)|0);
      var $438=HEAP32[(($neighbors364)>>2)];
      var $439=$facet_addr;
      var $440=$439;
      var $call365=_qh_setindex($438, $440);
      $skipB=$call365;
      var $441=$facet_addr;
      var $vertices366=(($441+48)|0);
      var $442=HEAP32[(($vertices366)>>2)];
      var $443=$skipA;
      var $444=$neighbor;
      var $vertices367=(($444+48)|0);
      var $445=HEAP32[(($vertices367)>>2)];
      var $446=$skipB;
      var $call368=_qh_setequal_skip($442, $443, $445, $446);
      var $tobool369=(($call368)|0)!=0;
      if ($tobool369) { label = 133; break; } else { label = 132; break; }
    case 132: 
      var $447=HEAP32[((((5248924)|0))>>2)];
      var $448=$facet_addr;
      var $id371=(($448+72)|0);
      var $449=HEAP32[(($id371)>>2)];
      var $450=$skipA;
      var $451=$neighbor;
      var $id372=(($451+72)|0);
      var $452=HEAP32[(($id372)>>2)];
      var $453=$skipB;
      _qh_fprintf($447, 6135, ((5261012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$449,HEAP32[(((tempInt)+(4))>>2)]=$450,HEAP32[(((tempInt)+(8))>>2)]=$452,HEAP32[(((tempInt)+(12))>>2)]=$453,tempInt));
      var $454=$neighbor;
      $errother=$454;
      $waserror=1;
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 129; break;
    case 135: 
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $455=HEAP32[((((5247508)|0))>>2)];
      var $cmp378=(($455)|0) < 5;
      if ($cmp378) { label = 138; break; } else { label = 153; break; }
    case 138: 
      var $456=HEAP32[((((5247040)|0))>>2)];
      var $cmp380=(($456)|0) > 2;
      if ($cmp380) { label = 140; break; } else { label = 139; break; }
    case 139: 
      var $457=HEAP32[((((5246980)|0))>>2)];
      var $tobool382=(($457)|0)!=0;
      if ($tobool382) { label = 140; break; } else { label = 153; break; }
    case 140: 
      $ridge=0;
      var $458=$facet_addr;
      var $ridges384=(($458+52)|0);
      var $459=HEAP32[(($ridges384)>>2)];
      var $tobool385=(($459)|0)!=0;
      if ($tobool385) { label = 141; break; } else { label = 152; break; }
    case 141: 
      $ridge_i=0;
      var $460=$facet_addr;
      var $ridges387=(($460+52)|0);
      var $461=HEAP32[(($ridges387)>>2)];
      var $e388=(($461+4)|0);
      var $arrayidx389=(($e388)|0);
      var $p390=$arrayidx389;
      var $462=HEAP32[(($p390)>>2)];
      var $463=$462;
      $ridge=$463;
      var $464=$facet_addr;
      var $ridges391=(($464+52)|0);
      var $465=HEAP32[(($ridges391)>>2)];
      var $call392=_qh_setsize($465);
      $ridge_n=$call392;
      label = 142; break;
    case 142: 
      var $466=$ridge_i;
      var $467=$ridge_n;
      var $cmp394=(($466)|0) < (($467)|0);
      if ($cmp394) { label = 143; break; } else { label = 151; break; }
    case 143: 
      var $468=$ridge_i;
      var $add396=((($468)+(1))|0);
      $i=$add396;
      label = 144; break;
    case 144: 
      var $469=$i;
      var $470=$ridge_n;
      var $cmp398=(($469)|0) < (($470)|0);
      if ($cmp398) { label = 145; break; } else { label = 149; break; }
    case 145: 
      var $471=$i;
      var $472=$facet_addr;
      var $ridges400=(($472+52)|0);
      var $473=HEAP32[(($ridges400)>>2)];
      var $e401=(($473+4)|0);
      var $arrayidx402=(($e401+($471<<2))|0);
      var $p403=$arrayidx402;
      var $474=HEAP32[(($p403)>>2)];
      var $475=$474;
      $ridge2=$475;
      var $476=$ridge;
      var $vertices404=(($476)|0);
      var $477=HEAP32[(($vertices404)>>2)];
      var $478=$ridge2;
      var $vertices405=(($478)|0);
      var $479=HEAP32[(($vertices405)>>2)];
      var $call406=_qh_setequal($477, $479);
      var $tobool407=(($call406)|0)!=0;
      if ($tobool407) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $480=HEAP32[((((5248924)|0))>>2)];
      var $481=$ridge;
      var $482=$481;
      var $bf_field_offs409=(($482+12)|0);
      var $483=$bf_field_offs409;
      var $484=HEAP32[(($483)>>2)];
      var $bf_clear410=$484 & 16777215;
      var $485=$ridge2;
      var $486=$485;
      var $bf_field_offs411=(($486+12)|0);
      var $487=$bf_field_offs411;
      var $488=HEAP32[(($487)>>2)];
      var $bf_clear412=$488 & 16777215;
      _qh_fprintf($480, 6227, ((5260676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear410,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear412,tempInt));
      var $489=$ridge;
      $errridge=$489;
      $waserror=1;
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $490=$i;
      var $inc=((($490)+(1))|0);
      $i=$inc;
      label = 144; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $491=$ridge_i;
      var $inc416=((($491)+(1))|0);
      $ridge_i=$inc416;
      var $492=$facet_addr;
      var $ridges417=(($492+52)|0);
      var $493=HEAP32[(($ridges417)>>2)];
      var $e418=(($493+4)|0);
      var $arrayidx419=(($e418+($inc416<<2))|0);
      var $p420=$arrayidx419;
      var $494=HEAP32[(($p420)>>2)];
      var $495=$494;
      $ridge=$495;
      label = 142; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $496=$waserror;
      var $tobool424=(($496)|0)!=0;
      if ($tobool424) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $497=$facet_addr;
      var $498=$errother;
      var $499=$errridge;
      _qh_errprint(((5267284)|0), $497, $498, $499, 0);
      var $500=$waserrorp_addr;
      HEAP32[(($500)>>2)]=1;
      label = 155; break;
    case 155: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkfacet["X"]=1;

function _qh_vertexintersect_new($vertexsetA, $vertexsetB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertexsetA_addr;
      var $vertexsetB_addr;
      var $intersection=__stackBase__;
      var $vertexA;
      var $vertexB;
      $vertexsetA_addr=$vertexsetA;
      $vertexsetB_addr=$vertexsetB;
      var $0=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($0)-(1))|0);
      var $call=_qh_setnew($sub);
      HEAP32[(($intersection)>>2)]=$call;
      var $1=$vertexsetA_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $vertexA=$2;
      var $3=$vertexsetB_addr;
      var $e1=(($3+4)|0);
      var $arrayidx2=(($e1)|0);
      var $p3=$arrayidx2;
      var $4=$p3;
      $vertexB=$4;
      label = 3; break;
    case 3: 
      var $5=$vertexA;
      var $6=HEAP32[(($5)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $9 = 0;label = 5; break; }
    case 4: 
      var $7=$vertexB;
      var $8=HEAP32[(($7)>>2)];
      var $tobool4=(($8)|0)!=0;
      var $9 = $tobool4;label = 5; break;
    case 5: 
      var $9;
      if ($9) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $10=$vertexA;
      var $11=HEAP32[(($10)>>2)];
      var $12=$vertexB;
      var $13=HEAP32[(($12)>>2)];
      var $cmp=(($11)|0)==(($13)|0);
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$vertexA;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      _qh_setappend($intersection, $16);
      var $17=$vertexA;
      var $incdec_ptr=(($17+4)|0);
      $vertexA=$incdec_ptr;
      var $18=$vertexB;
      var $incdec_ptr5=(($18+4)|0);
      $vertexB=$incdec_ptr5;
      label = 12; break;
    case 8: 
      var $19=$vertexA;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $bf_field_offs=(($21+20)|0);
      var $22=$bf_field_offs;
      var $23=HEAP32[(($22)>>2)];
      var $bf_clear=$23 & 16777215;
      var $24=$vertexB;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $bf_field_offs6=(($26+20)|0);
      var $27=$bf_field_offs6;
      var $28=HEAP32[(($27)>>2)];
      var $bf_clear7=$28 & 16777215;
      var $cmp8=(($bf_clear)|0) > (($bf_clear7)|0);
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $29=$vertexA;
      var $incdec_ptr10=(($29+4)|0);
      $vertexA=$incdec_ptr10;
      label = 11; break;
    case 10: 
      var $30=$vertexB;
      var $incdec_ptr12=(($30+4)|0);
      $vertexB=$incdec_ptr12;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 3; break;
    case 13: 
      var $31=HEAP32[(($intersection)>>2)];
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_qh_vertexintersect_new["X"]=1;

function _qh_printlists() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $vertex;
      var $count;
      $count=0;
      var $0=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($0, 8108, ((5296444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((((5248944)|0))>>2)];
      $facet=$1;
      label = 3; break;
    case 3: 
      var $2=$facet;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $5 = 0;label = 5; break; }
    case 4: 
      var $3=$facet;
      var $next=(($3+44)|0);
      var $4=HEAP32[(($next)>>2)];
      var $tobool1=(($4)|0)!=0;
      var $5 = $tobool1;label = 5; break;
    case 5: 
      var $5;
      if ($5) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$count;
      var $inc=((($6)+(1))|0);
      $count=$inc;
      var $rem=((($inc)|0))%(100);
      var $cmp=(($rem)|0)==0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($7, 8109, ((5296284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 8: 
      var $8=HEAP32[((((5248924)|0))>>2)];
      var $9=$facet;
      var $id=(($9+72)|0);
      var $10=HEAP32[(($id)>>2)];
      _qh_fprintf($8, 8110, ((5296520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$10,tempInt));
      label = 9; break;
    case 9: 
      var $11=$facet;
      var $next2=(($11+44)|0);
      var $12=HEAP32[(($next2)>>2)];
      $facet=$12;
      label = 3; break;
    case 10: 
      var $13=HEAP32[((((5248924)|0))>>2)];
      var $14=HEAP32[((((5248956)|0))>>2)];
      var $tobool3=(($14)|0)!=0;
      if ($tobool3) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $15=HEAP32[((((5248956)|0))>>2)];
      var $id4=(($15+72)|0);
      var $16=HEAP32[(($id4)>>2)];
      var $cond = $16;label = 13; break;
    case 12: 
      var $cond = -1;label = 13; break;
    case 13: 
      var $cond;
      var $17=HEAP32[((((5248960)|0))>>2)];
      var $tobool5=(($17)|0)!=0;
      if ($tobool5) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $18=HEAP32[((((5248960)|0))>>2)];
      var $id7=(($18+72)|0);
      var $19=HEAP32[(($id7)>>2)];
      var $cond10 = $19;label = 16; break;
    case 15: 
      var $cond10 = -1;label = 16; break;
    case 16: 
      var $cond10;
      var $20=HEAP32[((((5248952)|0))>>2)];
      var $tobool11=(($20)|0)!=0;
      if ($tobool11) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $21=HEAP32[((((5248952)|0))>>2)];
      var $id13=(($21+72)|0);
      var $22=HEAP32[(($id13)>>2)];
      var $cond16 = $22;label = 19; break;
    case 18: 
      var $cond16 = -1;label = 19; break;
    case 19: 
      var $cond16;
      var $23=HEAP32[((((5248992)|0))>>2)];
      var $tobool17=(($23)|0)!=0;
      if ($tobool17) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $24=HEAP32[((((5248992)|0))>>2)];
      var $25=$24;
      var $bf_field_offs=(($25+20)|0);
      var $26=$bf_field_offs;
      var $27=HEAP32[(($26)>>2)];
      var $bf_clear=$27 & 16777215;
      var $cond21 = $bf_clear;label = 22; break;
    case 21: 
      var $cond21 = -1;label = 22; break;
    case 22: 
      var $cond21;
      _qh_fprintf($13, 8111, ((5296020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,HEAP32[(((tempInt)+(4))>>2)]=$cond10,HEAP32[(((tempInt)+(8))>>2)]=$cond16,HEAP32[(((tempInt)+(12))>>2)]=$cond21,tempInt));
      $count=0;
      var $28=HEAP32[((((5248984)|0))>>2)];
      $vertex=$28;
      label = 23; break;
    case 23: 
      var $29=$vertex;
      var $tobool23=(($29)|0)!=0;
      if ($tobool23) { label = 24; break; } else { var $32 = 0;label = 25; break; }
    case 24: 
      var $30=$vertex;
      var $next25=(($30)|0);
      var $31=HEAP32[(($next25)>>2)];
      var $tobool26=(($31)|0)!=0;
      var $32 = $tobool26;label = 25; break;
    case 25: 
      var $32;
      if ($32) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $33=$count;
      var $inc29=((($33)+(1))|0);
      $count=$inc29;
      var $rem30=((($inc29)|0))%(100);
      var $cmp31=(($rem30)|0)==0;
      if ($cmp31) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($34, 8112, ((5296284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 28; break;
    case 28: 
      var $35=HEAP32[((((5248924)|0))>>2)];
      var $36=$vertex;
      var $37=$36;
      var $bf_field_offs34=(($37+20)|0);
      var $38=$bf_field_offs34;
      var $39=HEAP32[(($38)>>2)];
      var $bf_clear35=$39 & 16777215;
      _qh_fprintf($35, 8113, ((5296520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear35,tempInt));
      label = 29; break;
    case 29: 
      var $40=$vertex;
      var $next37=(($40)|0);
      var $41=HEAP32[(($next37)>>2)];
      $vertex=$41;
      label = 23; break;
    case 30: 
      var $42=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($42, 8114, ((5301776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printlists["X"]=1;

function _qh_checkvertex($vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      var $waserror;
      var $neighbor;
      var $neighborp;
      var $errfacet;
      $vertex_addr=$vertex;
      $waserror=0;
      $errfacet=0;
      var $0=$vertex_addr;
      var $point=(($0+8)|0);
      var $1=HEAP32[(($point)>>2)];
      var $call=_qh_pointid($1);
      var $cmp=(($call)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      var $3=$vertex_addr;
      var $point1=(($3+8)|0);
      var $4=HEAP32[(($point1)>>2)];
      _qh_fprintf($2, 6144, ((5256580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      $waserror=1;
      label = 4; break;
    case 4: 
      var $5=$vertex_addr;
      var $6=$5;
      var $bf_field_offs=(($6+20)|0);
      var $7=$bf_field_offs;
      var $8=HEAP32[(($7)>>2)];
      var $bf_clear=$8 & 16777215;
      var $9=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear2=$9 & 16777215;
      var $cmp3=(($bf_clear)|0) >= (($bf_clear2)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=$vertex_addr;
      var $12=$11;
      var $bf_field_offs5=(($12+20)|0);
      var $13=$bf_field_offs5;
      var $14=HEAP32[(($13)>>2)];
      var $bf_clear6=$14 & 16777215;
      _qh_fprintf($10, 6145, ((5256220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear6,tempInt));
      $waserror=1;
      label = 6; break;
    case 6: 
      var $15=$waserror;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 18; break; } else { label = 7; break; }
    case 7: 
      var $16=$vertex_addr;
      var $17=$16;
      var $bf_field_offs8=(($17+20)|0);
      var $18=$bf_field_offs8;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 30;
      var $bf_clear9=$20 & 1;
      var $tobool10=(($bf_clear9)|0)!=0;
      if ($tobool10) { label = 18; break; } else { label = 8; break; }
    case 8: 
      var $21=$vertex_addr;
      var $neighbors=(($21+12)|0);
      var $22=HEAP32[(($neighbors)>>2)];
      var $call12=_qh_setsize($22);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { label = 9; break; } else { label = 17; break; }
    case 9: 
      $neighbor=0;
      var $23=$vertex_addr;
      var $neighbors15=(($23+12)|0);
      var $24=HEAP32[(($neighbors15)>>2)];
      var $tobool16=(($24)|0)!=0;
      if ($tobool16) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $25=$vertex_addr;
      var $neighbors18=(($25+12)|0);
      var $26=HEAP32[(($neighbors18)>>2)];
      var $e=(($26+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $27=$p;
      $neighborp=$27;
      label = 11; break;
    case 11: 
      var $28=$neighborp;
      var $incdec_ptr=(($28+4)|0);
      $neighborp=$incdec_ptr;
      var $29=HEAP32[(($28)>>2)];
      $neighbor=$29;
      var $tobool19=(($29)|0)!=0;
      if ($tobool19) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $30=$neighbor;
      var $vertices=(($30+48)|0);
      var $31=HEAP32[(($vertices)>>2)];
      var $32=$vertex_addr;
      var $33=$32;
      var $call20=_qh_setin($31, $33);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=$neighbor;
      var $id=(($35+72)|0);
      var $36=HEAP32[(($id)>>2)];
      var $37=$vertex_addr;
      var $38=$37;
      var $bf_field_offs23=(($38+20)|0);
      var $39=$bf_field_offs23;
      var $40=HEAP32[(($39)>>2)];
      var $bf_clear24=$40 & 16777215;
      _qh_fprintf($34, 6146, ((5255896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear24,tempInt));
      var $41=$neighbor;
      $errfacet=$41;
      $waserror=1;
      label = 14; break;
    case 14: 
      label = 11; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $42=$waserror;
      var $tobool29=(($42)|0)!=0;
      if ($tobool29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $43=$vertex_addr;
      _qh_errprint(((5267284)|0), 0, 0, 0, $43);
      var $44=$errfacet;
      _qh_errexit(5, $44, 0);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_checkvertex["X"]=1;

function _qh_clearcenters($type) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $type_addr;
      var $facet;
      $type_addr=$type;
      var $0=HEAP32[((((5249036)|0))>>2)];
      var $1=$type_addr;
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 21; break; }
    case 3: 
      var $2=HEAP32[((((5248944)|0))>>2)];
      $facet=$2;
      label = 4; break;
    case 4: 
      var $3=$facet;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 5; break; } else { var $6 = 0;label = 6; break; }
    case 5: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      var $tobool1=(($5)|0)!=0;
      var $6 = $tobool1;label = 6; break;
    case 6: 
      var $6;
      if ($6) { label = 7; break; } else { label = 20; break; }
    case 7: 
      var $7=$facet;
      var $8=$7;
      var $bf_field_offs=(($8+76)|0);
      var $9=$bf_field_offs;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 9;
      var $bf_clear=$11 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      if ($tobool2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $12=$facet;
      var $13=$12;
      var $bf_field_offs3=(($13+76)|0);
      var $14=$bf_field_offs3;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 28;
      var $bf_clear4=$16 & 1;
      var $tobool5=(($bf_clear4)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $17=$facet;
      var $center=(($17+36)|0);
      HEAP32[(($center)>>2)]=0;
      label = 18; break;
    case 10: 
      var $18=HEAP32[((((5249036)|0))>>2)];
      var $cmp7=(($18)|0)==1;
      if ($cmp7) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $19=$facet;
      var $center9=(($19+36)|0);
      var $20=HEAP32[(($center9)>>2)];
      var $tobool10=(($20)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$facet;
      var $center12=(($21+36)|0);
      var $22=HEAP32[(($center12)>>2)];
      var $23=$22;
      var $24=HEAP32[((((5248936)|0))>>2)];
      _qh_memfree($23, $24);
      var $25=$facet;
      var $center13=(($25+36)|0);
      HEAP32[(($center13)>>2)]=0;
      label = 13; break;
    case 13: 
      label = 17; break;
    case 14: 
      var $26=$facet;
      var $center15=(($26+36)|0);
      var $27=HEAP32[(($center15)>>2)];
      var $tobool16=(($27)|0)!=0;
      if ($tobool16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $28=$facet;
      var $center18=(($28+36)|0);
      var $29=HEAP32[(($center18)>>2)];
      var $30=$29;
      var $31=HEAP32[((((5248932)|0))>>2)];
      _qh_memfree($30, $31);
      var $32=$facet;
      var $center19=(($32+36)|0);
      HEAP32[(($center19)>>2)]=0;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $33=$facet;
      var $next23=(($33+44)|0);
      var $34=HEAP32[(($next23)>>2)];
      $facet=$34;
      label = 4; break;
    case 20: 
      var $35=$type_addr;
      HEAP32[((((5249036)|0))>>2)]=$35;
      label = 21; break;
    case 21: 
      var $36=HEAP32[((((5247040)|0))>>2)];
      var $cmp25=(($36)|0) >= 2;
      if ($cmp25) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $37=HEAP32[((((5248924)|0))>>2)];
      var $38=$type_addr;
      _qh_fprintf($37, 2043, ((5255636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$38,tempInt));
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_clearcenters["X"]=1;

function _qh_createsimplex($vertices) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $facet;
      var $newfacet;
      var $toporient;
      var $vertex_i;
      var $vertex_n;
      var $nth;
      var $newfacets=__stackBase__;
      var $vertex;
      $vertices_addr=$vertices;
      $facet=0;
      $toporient=1;
      var $0=HEAP32[((((5247508)|0))>>2)];
      var $add=((($0)+(1))|0);
      var $call=_qh_settemp($add);
      HEAP32[(($newfacets)>>2)]=$call;
      var $call1=_qh_newfacet();
      HEAP32[((((5248948)|0))>>2)]=$call1;
      HEAP32[((((5248956)|0))>>2)]=$call1;
      HEAP32[((((5248944)|0))>>2)]=$call1;
      HEAP32[((((5248964)|0))>>2)]=0;
      HEAP32[((((5249000)|0))>>2)]=0;
      HEAP32[((((5248996)|0))>>2)]=0;
      var $call2=_qh_newvertex(0);
      HEAP32[((((5248988)|0))>>2)]=$call2;
      HEAP32[((((5248992)|0))>>2)]=$call2;
      HEAP32[((((5248984)|0))>>2)]=$call2;
      $vertex=0;
      var $1=$vertices_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $vertex_i=0;
      var $2=$vertices_addr;
      var $e=(($2+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      $vertex=$4;
      var $5=$vertices_addr;
      var $call3=_qh_setsize($5);
      $vertex_n=$call3;
      label = 4; break;
    case 4: 
      var $6=$vertex_i;
      var $7=$vertex_n;
      var $cmp=(($6)|0) < (($7)|0);
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $call4=_qh_newfacet();
      $newfacet=$call4;
      var $8=$vertices_addr;
      var $9=$vertex_n;
      var $10=$vertex_i;
      var $call5=_qh_setnew_delnthsorted($8, $9, $10, 0);
      var $11=$newfacet;
      var $vertices6=(($11+48)|0);
      HEAP32[(($vertices6)>>2)]=$call5;
      var $12=$toporient;
      var $conv=(($12) & 255);
      var $conv7=(($conv)&255);
      var $13=$newfacet;
      var $bf_value=$conv7 & 1;
      var $14=$13;
      var $bf_field_offs=(($14+76)|0);
      var $15=$bf_field_offs;
      var $16=$bf_value & 1;
      var $17=$16 << 12;
      var $18=HEAP32[(($15)>>2)];
      var $19=$18 & -4097;
      var $20=$19 | $17;
      HEAP32[(($15)>>2)]=$20;
      var $21=$newfacet;
      _qh_appendfacet($21);
      var $22=$newfacet;
      var $23=$22;
      var $bf_field_offs8=(($23+76)|0);
      var $24=$bf_field_offs8;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & -1025;
      var $27=$26 | 1024;
      HEAP32[(($24)>>2)]=$27;
      var $28=$vertex;
      _qh_appendvertex($28);
      var $29=$newfacet;
      var $30=$29;
      _qh_setappend($newfacets, $30);
      var $31=$toporient;
      var $xor=$31 ^ 1;
      $toporient=$xor;
      label = 6; break;
    case 6: 
      var $32=$vertex_i;
      var $inc=((($32)+(1))|0);
      $vertex_i=$inc;
      var $33=$vertices_addr;
      var $e9=(($33+4)|0);
      var $arrayidx10=(($e9+($inc<<2))|0);
      var $p11=$arrayidx10;
      var $34=HEAP32[(($p11)>>2)];
      var $35=$34;
      $vertex=$35;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $36=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$36;
      label = 9; break;
    case 9: 
      var $37=$newfacet;
      var $tobool13=(($37)|0)!=0;
      if ($tobool13) { label = 10; break; } else { var $40 = 0;label = 11; break; }
    case 10: 
      var $38=$newfacet;
      var $next=(($38+44)|0);
      var $39=HEAP32[(($next)>>2)];
      var $tobool14=(($39)|0)!=0;
      var $40 = $tobool14;label = 11; break;
    case 11: 
      var $40;
      if ($40) { label = 12; break; } else { label = 24; break; }
    case 12: 
      $nth=0;
      var $41=HEAP32[((((5248956)|0))>>2)];
      var $tobool16=(($41)|0)!=0;
      if ($tobool16) { label = 13; break; } else { label = 22; break; }
    case 13: 
      var $42=HEAP32[((((5248956)|0))>>2)];
      $facet=$42;
      label = 14; break;
    case 14: 
      var $43=$facet;
      var $tobool19=(($43)|0)!=0;
      if ($tobool19) { label = 15; break; } else { var $46 = 0;label = 16; break; }
    case 15: 
      var $44=$facet;
      var $next21=(($44+44)|0);
      var $45=HEAP32[(($next21)>>2)];
      var $tobool22=(($45)|0)!=0;
      var $46 = $tobool22;label = 16; break;
    case 16: 
      var $46;
      if ($46) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $47=$facet;
      var $48=$newfacet;
      var $cmp25=(($47)|0)!=(($48)|0);
      if ($cmp25) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $49=$facet;
      var $50=$49;
      var $51=$nth;
      var $inc28=((($51)+(1))|0);
      $nth=$inc28;
      var $52=$newfacet;
      var $neighbors=(($52+56)|0);
      var $53=HEAP32[(($neighbors)>>2)];
      var $e29=(($53+4)|0);
      var $arrayidx30=(($e29+($51<<2))|0);
      var $p31=$arrayidx30;
      HEAP32[(($p31)>>2)]=$50;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $54=$facet;
      var $next34=(($54+44)|0);
      var $55=HEAP32[(($next34)>>2)];
      $facet=$55;
      label = 14; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $56=$newfacet;
      var $neighbors37=(($56+56)|0);
      var $57=HEAP32[(($neighbors37)>>2)];
      var $58=HEAP32[((((5247508)|0))>>2)];
      _qh_settruncate($57, $58);
      label = 23; break;
    case 23: 
      var $59=$newfacet;
      var $next39=(($59+44)|0);
      var $60=HEAP32[(($next39)>>2)];
      $newfacet=$60;
      label = 9; break;
    case 24: 
      _qh_settempfree($newfacets);
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp41=(($61)|0) >= 1;
      if ($cmp41) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($62, 1028, ((5255412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_createsimplex["X"]=1;

function _qh_newvertex($point) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $vertex;
      $point_addr=$point;
      var $0=HEAP32[(((((5244612)|0)))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[(((((5244612)|0)))>>2)]=$inc;
      var $call=_qh_memalloc(24);
      var $1=$call;
      $vertex=$1;
      var $2=$vertex;
      var $3=$2;
      _memset($3, 0, 24);
      var $4=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear=$4 & 16777215;
      var $cmp=(($bf_clear)|0)==16777215;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($5, 6159, ((5297988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=16777215,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $6=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear1=$6 & 16777215;
      var $7=HEAP32[((((5248976)|0))>>2)];
      var $cmp2=(($bf_clear1)|0)==(($7)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$vertex;
      HEAP32[((((5248980)|0))>>2)]=$8;
      label = 6; break;
    case 6: 
      var $9=HEAP32[(((((5249020)|0)))>>2)];
      var $bf_clear5=$9 & 16777215;
      var $inc6=((($bf_clear5)+(1))|0);
      var $bf_value=$inc6 & 16777215;
      var $10=$bf_value & 16777215;
      var $11=HEAP32[(((((5249020)|0)))>>2)];
      var $12=$11 & -16777216;
      var $13=$12 | $10;
      HEAP32[(((((5249020)|0)))>>2)]=$13;
      var $14=$vertex;
      var $bf_value7=$bf_clear5 & 16777215;
      var $15=$14;
      var $bf_field_offs=(($15+20)|0);
      var $16=$bf_field_offs;
      var $17=$bf_value7 & 16777215;
      var $18=HEAP32[(($16)>>2)];
      var $19=$18 & -16777216;
      var $20=$19 | $17;
      HEAP32[(($16)>>2)]=$20;
      var $21=$point_addr;
      var $22=$vertex;
      var $point8=(($22+8)|0);
      HEAP32[(($point8)>>2)]=$21;
      var $23=HEAP32[((((5247508)|0))>>2)];
      var $cmp9=(($23)|0) <= 15;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=HEAP32[((((5247508)|0))>>2)];
      var $cond = $24;label = 9; break;
    case 8: 
      var $cond = 0;label = 9; break;
    case 9: 
      var $cond;
      var $conv=(($cond) & 255);
      var $conv10=(($conv)&255);
      var $25=$vertex;
      var $bf_value11=$conv10 & 15;
      var $26=$25;
      var $bf_field_offs12=(($26+20)|0);
      var $27=$bf_field_offs12;
      var $28=$bf_value11 & 15;
      var $29=$28 << 24;
      var $30=HEAP32[(($27)>>2)];
      var $31=$30 & -251658241;
      var $32=$31 | $29;
      HEAP32[(($27)>>2)]=$32;
      var $33=HEAP32[((((5247040)|0))>>2)];
      var $cmp13=(($33)|0) >= 4;
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=$vertex;
      var $point16=(($35+8)|0);
      var $36=HEAP32[(($point16)>>2)];
      var $call17=_qh_pointid($36);
      var $37=$vertex;
      var $38=$37;
      var $bf_field_offs18=(($38+20)|0);
      var $39=$bf_field_offs18;
      var $40=HEAP32[(($39)>>2)];
      var $bf_clear19=$40 & 16777215;
      _qh_fprintf($34, 4060, ((5297840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call17,HEAP32[(((tempInt)+(4))>>2)]=$bf_clear19,tempInt));
      label = 11; break;
    case 11: 
      var $41=$vertex;
      STACKTOP = __stackBase__;
      return $41;
    default: assert(0, "bad label: " + label);
  }

}
_qh_newvertex["X"]=1;

function _qh_delridge($ridge) {
  var label = 0;


  var $ridge_addr;
  var $freelistp;
  $ridge_addr=$ridge;
  var $0=$ridge_addr;
  var $top=(($0+4)|0);
  var $1=HEAP32[(($top)>>2)];
  var $ridges=(($1+52)|0);
  var $2=HEAP32[(($ridges)>>2)];
  var $3=$ridge_addr;
  var $4=$3;
  var $call=_qh_setdel($2, $4);
  var $5=$ridge_addr;
  var $bottom=(($5+8)|0);
  var $6=HEAP32[(($bottom)>>2)];
  var $ridges1=(($6+52)|0);
  var $7=HEAP32[(($ridges1)>>2)];
  var $8=$ridge_addr;
  var $9=$8;
  var $call2=_qh_setdel($7, $9);
  var $10=$ridge_addr;
  var $vertices=(($10)|0);
  _qh_setfree($vertices);
  $freelistp=0;
  var $11=$ridge_addr;
  var $12=$11;
  _qh_memfree($12, 16);

  return;
}


function _qh_delvertex($vertex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertex_addr;
      $vertex_addr=$vertex;
      var $0=$vertex_addr;
      var $1=HEAP32[((((5248980)|0))>>2)];
      var $cmp=(($0)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((((5248980)|0))>>2)]=0;
      label = 4; break;
    case 4: 
      var $2=$vertex_addr;
      _qh_removevertex($2);
      var $3=$vertex_addr;
      var $neighbors=(($3+12)|0);
      _qh_setfree($neighbors);
      var $4=$vertex_addr;
      var $5=$4;
      _qh_memfree($5, 24);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_nextridge3d($atridge, $facet, $vertexp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $atridge_addr;
      var $facet_addr;
      var $vertexp_addr;
      var $atvertex;
      var $vertex;
      var $othervertex;
      var $ridge;
      var $ridgep;
      $atridge_addr=$atridge;
      $facet_addr=$facet;
      $vertexp_addr=$vertexp;
      var $0=$atridge_addr;
      var $top=(($0+4)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$facet_addr;
      var $cmp=(($1)|0)==(($2)|0);
      var $conv=(($cmp)&1);
      var $xor=$conv ^ 0;
      var $tobool=(($xor)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$atridge_addr;
      var $vertices=(($3)|0);
      var $4=HEAP32[(($vertices)>>2)];
      var $e=(($4+4)|0);
      var $arrayidx=(($e+4)|0);
      var $p=$arrayidx;
      var $5=HEAP32[(($p)>>2)];
      var $6=$5;
      $atvertex=$6;
      label = 5; break;
    case 4: 
      var $7=$atridge_addr;
      var $vertices1=(($7)|0);
      var $8=HEAP32[(($vertices1)>>2)];
      var $e2=(($8+4)|0);
      var $arrayidx3=(($e2)|0);
      var $p4=$arrayidx3;
      var $9=HEAP32[(($p4)>>2)];
      var $10=$9;
      $atvertex=$10;
      label = 5; break;
    case 5: 
      $ridge=0;
      var $11=$facet_addr;
      var $ridges=(($11+52)|0);
      var $12=HEAP32[(($ridges)>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $13=$facet_addr;
      var $ridges7=(($13+52)|0);
      var $14=HEAP32[(($ridges7)>>2)];
      var $e8=(($14+4)|0);
      var $arrayidx9=(($e8)|0);
      var $p10=$arrayidx9;
      var $15=$p10;
      $ridgep=$15;
      label = 7; break;
    case 7: 
      var $16=$ridgep;
      var $incdec_ptr=(($16+4)|0);
      $ridgep=$incdec_ptr;
      var $17=HEAP32[(($16)>>2)];
      $ridge=$17;
      var $tobool11=(($17)|0)!=0;
      if ($tobool11) { label = 8; break; } else { label = 18; break; }
    case 8: 
      var $18=$ridge;
      var $19=$atridge_addr;
      var $cmp12=(($18)|0)==(($19)|0);
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 7; break;
    case 10: 
      var $20=$ridge;
      var $top16=(($20+4)|0);
      var $21=HEAP32[(($top16)>>2)];
      var $22=$facet_addr;
      var $cmp17=(($21)|0)==(($22)|0);
      var $conv18=(($cmp17)&1);
      var $xor19=$conv18 ^ 0;
      var $tobool20=(($xor19)|0)!=0;
      if ($tobool20) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$ridge;
      var $vertices22=(($23)|0);
      var $24=HEAP32[(($vertices22)>>2)];
      var $e23=(($24+4)|0);
      var $arrayidx24=(($e23+4)|0);
      var $p25=$arrayidx24;
      var $25=HEAP32[(($p25)>>2)];
      var $26=$25;
      $othervertex=$26;
      var $27=$ridge;
      var $vertices26=(($27)|0);
      var $28=HEAP32[(($vertices26)>>2)];
      var $e27=(($28+4)|0);
      var $arrayidx28=(($e27)|0);
      var $p29=$arrayidx28;
      var $29=HEAP32[(($p29)>>2)];
      var $30=$29;
      $vertex=$30;
      label = 13; break;
    case 12: 
      var $31=$ridge;
      var $vertices31=(($31)|0);
      var $32=HEAP32[(($vertices31)>>2)];
      var $e32=(($32+4)|0);
      var $arrayidx33=(($e32+4)|0);
      var $p34=$arrayidx33;
      var $33=HEAP32[(($p34)>>2)];
      var $34=$33;
      $vertex=$34;
      var $35=$ridge;
      var $vertices35=(($35)|0);
      var $36=HEAP32[(($vertices35)>>2)];
      var $e36=(($36+4)|0);
      var $arrayidx37=(($e36)|0);
      var $p38=$arrayidx37;
      var $37=HEAP32[(($p38)>>2)];
      var $38=$37;
      $othervertex=$38;
      label = 13; break;
    case 13: 
      var $39=$vertex;
      var $40=$atvertex;
      var $cmp40=(($39)|0)==(($40)|0);
      if ($cmp40) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $41=$vertexp_addr;
      var $tobool43=(($41)|0)!=0;
      if ($tobool43) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=$othervertex;
      var $43=$vertexp_addr;
      HEAP32[(($43)>>2)]=$42;
      label = 16; break;
    case 16: 
      var $44=$ridge;
      $retval=$44;
      label = 20; break;
    case 17: 
      label = 7; break;
    case 18: 
      label = 19; break;
    case 19: 
      $retval=0;
      label = 20; break;
    case 20: 
      var $45=$retval;

      return $45;
    default: assert(0, "bad label: " + label);
  }

}
_qh_nextridge3d["X"]=1;

function _qh_facet3vertex($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $ridge;
      var $firstridge;
      var $vertex=__stackBase__;
      var $cntvertices;
      var $cntprojected;
      var $vertices=(__stackBase__)+(4);
      $facet_addr=$facet;
      $cntprojected=0;
      var $0=$facet_addr;
      var $vertices1=(($0+48)|0);
      var $1=HEAP32[(($vertices1)>>2)];
      var $call=_qh_setsize($1);
      $cntvertices=$call;
      var $2=$cntvertices;
      var $call2=_qh_settemp($2);
      HEAP32[(($vertices)>>2)]=$call2;
      var $3=$facet_addr;
      var $4=$3;
      var $bf_field_offs=(($4+76)|0);
      var $5=$bf_field_offs;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 13;
      var $bf_clear=$7 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$cntvertices;
      var $cmp=(($8)|0)!=3;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=HEAP32[((((5248924)|0))>>2)];
      var $10=$cntvertices;
      var $11=$facet_addr;
      var $id=(($11+72)|0);
      var $12=HEAP32[(($id)>>2)];
      _qh_fprintf($9, 6147, ((5255164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));
      var $13=$facet_addr;
      _qh_errexit(5, $13, 0);
      label = 5; break;
    case 5: 
      var $14=$facet_addr;
      var $vertices4=(($14+48)|0);
      var $15=HEAP32[(($vertices4)>>2)];
      var $e=(($15+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $16=HEAP32[(($p)>>2)];
      _qh_setappend($vertices, $16);
      var $17=$facet_addr;
      var $18=$17;
      var $bf_field_offs5=(($18+76)|0);
      var $19=$bf_field_offs5;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 >>> 12;
      var $bf_clear6=$21 & 1;
      var $xor=$bf_clear6 ^ 0;
      var $tobool7=(($xor)|0)!=0;
      if ($tobool7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$facet_addr;
      var $vertices9=(($22+48)|0);
      var $23=HEAP32[(($vertices9)>>2)];
      var $e10=(($23+4)|0);
      var $arrayidx11=(($e10+4)|0);
      var $p12=$arrayidx11;
      var $24=HEAP32[(($p12)>>2)];
      _qh_setappend($vertices, $24);
      label = 8; break;
    case 7: 
      var $25=$facet_addr;
      var $vertices13=(($25+48)|0);
      var $26=HEAP32[(($vertices13)>>2)];
      var $e14=(($26+4)|0);
      var $arrayidx15=(($e14+4)|0);
      var $p16=$arrayidx15;
      var $27=HEAP32[(($p16)>>2)];
      _qh_setaddnth($vertices, 0, $27);
      label = 8; break;
    case 8: 
      var $28=$facet_addr;
      var $vertices18=(($28+48)|0);
      var $29=HEAP32[(($vertices18)>>2)];
      var $e19=(($29+4)|0);
      var $arrayidx20=(($e19+8)|0);
      var $p21=$arrayidx20;
      var $30=HEAP32[(($p21)>>2)];
      _qh_setappend($vertices, $30);
      label = 19; break;
    case 9: 
      var $31=$facet_addr;
      var $ridges=(($31+52)|0);
      var $32=HEAP32[(($ridges)>>2)];
      var $e23=(($32+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $33=HEAP32[(($p25)>>2)];
      var $34=$33;
      $firstridge=$34;
      $ridge=$34;
      label = 10; break;
    case 10: 
      var $35=$ridge;
      var $36=$facet_addr;
      var $call26=_qh_nextridge3d($35, $36, $vertex);
      $ridge=$call26;
      var $tobool27=(($call26)|0)!=0;
      if ($tobool27) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $37=HEAP32[(($vertex)>>2)];
      var $38=$37;
      _qh_setappend($vertices, $38);
      var $39=$cntprojected;
      var $inc=((($39)+(1))|0);
      $cntprojected=$inc;
      var $40=$cntvertices;
      var $cmp28=(($inc)|0) > (($40)|0);
      if ($cmp28) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $41=$ridge;
      var $42=$firstridge;
      var $cmp29=(($41)|0)==(($42)|0);
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      label = 10; break;
    case 15: 
      var $43=$ridge;
      var $tobool32=(($43)|0)!=0;
      if ($tobool32) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $44=$cntprojected;
      var $45=$cntvertices;
      var $cmp34=(($44)|0)!=(($45)|0);
      if ($cmp34) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $46=HEAP32[((((5248924)|0))>>2)];
      var $47=$facet_addr;
      var $id36=(($47+72)|0);
      var $48=HEAP32[(($id36)>>2)];
      var $49=$cntprojected;
      _qh_fprintf($46, 6148, ((5254892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$48,HEAP32[(((tempInt)+(4))>>2)]=$49,tempInt));
      var $50=$facet_addr;
      var $51=$ridge;
      _qh_errexit(5, $50, $51);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $52=HEAP32[(($vertices)>>2)];
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }

}
_qh_facet3vertex["X"]=1;

function _qh_findbestlower($upperfacet, $point, $bestdistp, $numpart) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $upperfacet_addr;
      var $point_addr;
      var $bestdistp_addr;
      var $numpart_addr;
      var $neighbor;
      var $neighborp;
      var $bestfacet;
      var $bestdist;
      var $dist=__stackBase__;
      var $vertex;
      $upperfacet_addr=$upperfacet;
      $point_addr=$point;
      $bestdistp_addr=$bestdistp;
      $numpart_addr=$numpart;
      $bestfacet=0;
      $bestdist=-8.988465674311579e+307;
      var $0=HEAP32[(((((5243140)|0)))>>2)];
      var $inc=((($0)+(1))|0);
      HEAP32[(((((5243140)|0)))>>2)]=$inc;
      $neighbor=0;
      var $1=$upperfacet_addr;
      var $neighbors=(($1+56)|0);
      var $2=HEAP32[(($neighbors)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $3=$upperfacet_addr;
      var $neighbors1=(($3+56)|0);
      var $4=HEAP32[(($neighbors1)>>2)];
      var $e=(($4+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $5=$p;
      $neighborp=$5;
      label = 4; break;
    case 4: 
      var $6=$neighborp;
      var $incdec_ptr=(($6+4)|0);
      $neighborp=$incdec_ptr;
      var $7=HEAP32[(($6)>>2)];
      $neighbor=$7;
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $8=$neighbor;
      var $9=$8;
      var $bf_field_offs=(($9+76)|0);
      var $10=$bf_field_offs;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 17;
      var $bf_clear=$12 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $13=$neighbor;
      var $14=$13;
      var $bf_field_offs4=(($14+76)|0);
      var $15=$bf_field_offs4;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 16;
      var $bf_clear5=$17 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 4; break;
    case 8: 
      var $18=$numpart_addr;
      var $19=HEAP32[(($18)>>2)];
      var $inc8=((($19)+(1))|0);
      HEAP32[(($18)>>2)]=$inc8;
      var $20=$point_addr;
      var $21=$neighbor;
      _qh_distplane($20, $21, $dist);
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=$bestdist;
      var $cmp=$22 > $23;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$neighbor;
      $bestfacet=$24;
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestdist=$25;
      label = 10; break;
    case 10: 
      label = 4; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$bestfacet;
      var $tobool12=(($26)|0)!=0;
      if ($tobool12) { label = 24; break; } else { label = 13; break; }
    case 13: 
      var $27=HEAP32[(((((5243148)|0)))>>2)];
      var $inc14=((($27)+(1))|0);
      HEAP32[(((((5243148)|0)))>>2)]=$inc14;
      var $28=$upperfacet_addr;
      var $29=$point_addr;
      var $call=_qh_nearvertex($28, $29, $dist);
      $vertex=$call;
      _qh_vertexneighbors();
      $neighbor=0;
      var $30=$vertex;
      var $neighbors15=(($30+12)|0);
      var $31=HEAP32[(($neighbors15)>>2)];
      var $tobool16=(($31)|0)!=0;
      if ($tobool16) { label = 14; break; } else { label = 23; break; }
    case 14: 
      var $32=$vertex;
      var $neighbors18=(($32+12)|0);
      var $33=HEAP32[(($neighbors18)>>2)];
      var $e19=(($33+4)|0);
      var $arrayidx20=(($e19)|0);
      var $p21=$arrayidx20;
      var $34=$p21;
      $neighborp=$34;
      label = 15; break;
    case 15: 
      var $35=$neighborp;
      var $incdec_ptr23=(($35+4)|0);
      $neighborp=$incdec_ptr23;
      var $36=HEAP32[(($35)>>2)];
      $neighbor=$36;
      var $tobool24=(($36)|0)!=0;
      if ($tobool24) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $37=$neighbor;
      var $38=$37;
      var $bf_field_offs26=(($38+76)|0);
      var $39=$bf_field_offs26;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 >>> 17;
      var $bf_clear27=$41 & 1;
      var $tobool28=(($bf_clear27)|0)!=0;
      if ($tobool28) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $42=$neighbor;
      var $43=$42;
      var $bf_field_offs30=(($43+76)|0);
      var $44=$bf_field_offs30;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 16;
      var $bf_clear31=$46 & 1;
      var $tobool32=(($bf_clear31)|0)!=0;
      if ($tobool32) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 15; break;
    case 19: 
      var $47=$numpart_addr;
      var $48=HEAP32[(($47)>>2)];
      var $inc35=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$inc35;
      var $49=$point_addr;
      var $50=$neighbor;
      _qh_distplane($49, $50, $dist);
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $52=$bestdist;
      var $cmp36=$51 > $52;
      if ($cmp36) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $53=$neighbor;
      $bestfacet=$53;
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestdist=$54;
      label = 21; break;
    case 21: 
      label = 15; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $55=$bestfacet;
      var $tobool42=(($55)|0)!=0;
      if ($tobool42) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $56=HEAP32[((((5248924)|0))>>2)];
      var $57=$upperfacet_addr;
      var $id=(($57+72)|0);
      var $58=HEAP32[(($id)>>2)];
      _qh_fprintf($56, 6228, ((5254212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$58,tempInt));
      var $59=$upperfacet_addr;
      _qh_errexit(5, $59, 0);
      label = 26; break;
    case 26: 
      var $60=$bestdist;
      var $61=$bestdistp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[(($61)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($61)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $62=HEAP32[((((5247040)|0))>>2)];
      var $cmp45=(($62)|0) >= 3;
      if ($cmp45) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $63=HEAP32[((((5248924)|0))>>2)];
      var $64=$bestfacet;
      var $id47=(($64+72)|0);
      var $65=HEAP32[(($id47)>>2)];
      var $66=$bestdist;
      var $67=$upperfacet_addr;
      var $id48=(($67+72)|0);
      var $68=HEAP32[(($id48)>>2)];
      var $69=$point_addr;
      var $call49=_qh_pointid($69);
      _qh_fprintf($63, 3015, ((5253928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$65,(HEAPF64[(tempDoublePtr)>>3]=$66,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$68,HEAP32[(((tempInt)+(16))>>2)]=$call49,tempInt));
      label = 28; break;
    case 28: 
      var $70=$bestfacet;
      STACKTOP = __stackBase__;
      return $70;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findbestlower["X"]=1;

function _qh_nearvertex($facet, $point, $bestdistp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $point_addr;
      var $bestdistp_addr;
      var $bestdist;
      var $dist;
      var $bestvertex;
      var $vertex;
      var $vertexp;
      var $apex;
      var $center;
      var $neighbor;
      var $neighborp;
      var $vertices=__stackBase__;
      var $dim;
      $facet_addr=$facet;
      $point_addr=$point;
      $bestdistp_addr=$bestdistp;
      $bestdist=1.7976931348623157e+308;
      $bestvertex=0;
      var $0=HEAP32[((((5247508)|0))>>2)];
      $dim=$0;
      var $1=HEAP32[((((5247000)|0))>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$dim;
      var $dec=((($2)-(1))|0);
      $dim=$dec;
      label = 4; break;
    case 4: 
      var $3=$facet_addr;
      var $4=$3;
      var $bf_field_offs=(($4+76)|0);
      var $5=$bf_field_offs;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 9;
      var $bf_clear=$7 & 1;
      var $tobool1=(($bf_clear)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 21; break; }
    case 5: 
      var $8=HEAP32[((((5248580)|0))>>2)];
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$facet_addr;
      var $center4=(($9+36)|0);
      var $10=HEAP32[(($center4)>>2)];
      var $tobool5=(($10)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($11, 6158, ((5298840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=$facet_addr;
      _qh_errexit(5, $12, 0);
      label = 8; break;
    case 8: 
      var $13=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($13);
      HEAP32[(($vertices)>>2)]=$call;
      var $14=$facet_addr;
      var $vertices8=(($14+48)|0);
      var $15=HEAP32[(($vertices8)>>2)];
      var $e=(($15+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $16=HEAP32[(($p)>>2)];
      var $17=$16;
      $apex=$17;
      var $18=$facet_addr;
      var $center9=(($18+36)|0);
      var $19=HEAP32[(($center9)>>2)];
      $center=$19;
      $neighbor=0;
      var $20=$apex;
      var $neighbors=(($20+12)|0);
      var $21=HEAP32[(($neighbors)>>2)];
      var $tobool10=(($21)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $22=$apex;
      var $neighbors12=(($22+12)|0);
      var $23=HEAP32[(($neighbors12)>>2)];
      var $e13=(($23+4)|0);
      var $arrayidx14=(($e13)|0);
      var $p15=$arrayidx14;
      var $24=$p15;
      $neighborp=$24;
      label = 10; break;
    case 10: 
      var $25=$neighborp;
      var $incdec_ptr=(($25+4)|0);
      $neighborp=$incdec_ptr;
      var $26=HEAP32[(($25)>>2)];
      $neighbor=$26;
      var $tobool16=(($26)|0)!=0;
      if ($tobool16) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $27=$neighbor;
      var $center17=(($27+36)|0);
      var $28=HEAP32[(($center17)>>2)];
      var $29=$center;
      var $cmp=(($28)|0)==(($29)|0);
      if ($cmp) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $vertex=0;
      var $30=$neighbor;
      var $vertices19=(($30+48)|0);
      var $31=HEAP32[(($vertices19)>>2)];
      var $tobool20=(($31)|0)!=0;
      if ($tobool20) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $32=$neighbor;
      var $vertices22=(($32+48)|0);
      var $33=HEAP32[(($vertices22)>>2)];
      var $e23=(($33+4)|0);
      var $arrayidx24=(($e23)|0);
      var $p25=$arrayidx24;
      var $34=$p25;
      $vertexp=$34;
      label = 14; break;
    case 14: 
      var $35=$vertexp;
      var $incdec_ptr27=(($35+4)|0);
      $vertexp=$incdec_ptr27;
      var $36=HEAP32[(($35)>>2)];
      $vertex=$36;
      var $tobool28=(($36)|0)!=0;
      if ($tobool28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $37=$vertex;
      var $38=$37;
      _qh_setappend($vertices, $38);
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 10; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      var $39=$facet_addr;
      var $vertices34=(($39+48)|0);
      var $40=HEAP32[(($vertices34)>>2)];
      HEAP32[(($vertices)>>2)]=$40;
      label = 22; break;
    case 22: 
      $vertex=0;
      var $41=HEAP32[(($vertices)>>2)];
      var $tobool36=(($41)|0)!=0;
      if ($tobool36) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $42=HEAP32[(($vertices)>>2)];
      var $e38=(($42+4)|0);
      var $arrayidx39=(($e38)|0);
      var $p40=$arrayidx39;
      var $43=$p40;
      $vertexp=$43;
      label = 24; break;
    case 24: 
      var $44=$vertexp;
      var $incdec_ptr42=(($44+4)|0);
      $vertexp=$incdec_ptr42;
      var $45=HEAP32[(($44)>>2)];
      $vertex=$45;
      var $tobool43=(($45)|0)!=0;
      if ($tobool43) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $46=$vertex;
      var $point45=(($46+8)|0);
      var $47=HEAP32[(($point45)>>2)];
      var $48=$point_addr;
      var $49=$dim;
      var $sub=(((-$49))|0);
      var $call46=_qh_pointdist($47, $48, $sub);
      $dist=$call46;
      var $50=$dist;
      var $51=$bestdist;
      var $cmp47=$50 < $51;
      if ($cmp47) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $52=$dist;
      $bestdist=$52;
      var $53=$vertex;
      $bestvertex=$53;
      label = 27; break;
    case 27: 
      label = 24; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $54=$facet_addr;
      var $55=$54;
      var $bf_field_offs52=(($55+76)|0);
      var $56=$bf_field_offs52;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 9;
      var $bf_clear53=$58 & 1;
      var $tobool54=(($bf_clear53)|0)!=0;
      if ($tobool54) { label = 30; break; } else { label = 31; break; }
    case 30: 
      _qh_settempfree($vertices);
      label = 31; break;
    case 31: 
      var $59=$bestdist;
      var $call57=Math.sqrt($59);
      var $60=$bestdistp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$call57,HEAP32[(($60)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($60)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $61=HEAP32[((((5247040)|0))>>2)];
      var $cmp58=(($61)|0) >= 3;
      if ($cmp58) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $62=HEAP32[((((5248924)|0))>>2)];
      var $63=$bestvertex;
      var $64=$63;
      var $bf_field_offs60=(($64+20)|0);
      var $65=$bf_field_offs60;
      var $66=HEAP32[(($65)>>2)];
      var $bf_clear61=$66 & 16777215;
      var $67=$bestdistp_addr;
      var $68=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($67)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($67)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $69=$facet_addr;
      var $id=(($69+72)|0);
      var $70=HEAP32[(($id)>>2)];
      var $71=$point_addr;
      var $call62=_qh_pointid($71);
      _qh_fprintf($62, 3019, ((5298492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear61,(HEAPF64[(tempDoublePtr)>>3]=$68,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(12))>>2)]=$70,HEAP32[(((tempInt)+(16))>>2)]=$call62,tempInt));
      label = 33; break;
    case 33: 
      var $72=$bestvertex;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }

}
_qh_nearvertex["X"]=1;

function _qh_isvertex($point, $vertices) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $point_addr;
      var $vertices_addr;
      var $vertex;
      var $vertexp;
      $point_addr=$point;
      $vertices_addr=$vertices;
      $vertex=0;
      var $0=$vertices_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$vertices_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $vertexp=$2;
      label = 4; break;
    case 4: 
      var $3=$vertexp;
      var $incdec_ptr=(($3+4)|0);
      $vertexp=$incdec_ptr;
      var $4=HEAP32[(($3)>>2)];
      $vertex=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$vertex;
      var $point2=(($5+8)|0);
      var $6=HEAP32[(($point2)>>2)];
      var $7=$point_addr;
      var $cmp=(($6)|0)==(($7)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$vertex;
      $retval=$8;
      label = 10; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $9=$retval;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_vertexneighbors() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $vertex;
      var $vertexp;
      var $0=HEAP32[((((5248580)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 22; break;
    case 4: 
      var $1=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($1)|0) >= 1;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($2, 1035, ((5292880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      var $3=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear=$3 & 2147483647;
      var $inc=((($bf_clear)+(1))|0);
      var $bf_value=$inc & 2147483647;
      var $4=$bf_value & 2147483647;
      var $5=HEAP32[(((((5249160)|0)))>>2)];
      var $6=$5 & -2147483648;
      var $7=$6 | $4;
      HEAP32[(((((5249160)|0)))>>2)]=$7;
      var $8=HEAP32[((((5248944)|0))>>2)];
      $facet=$8;
      label = 7; break;
    case 7: 
      var $9=$facet;
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 8; break; } else { var $12 = 0;label = 9; break; }
    case 8: 
      var $10=$facet;
      var $next=(($10+44)|0);
      var $11=HEAP32[(($next)>>2)];
      var $tobool4=(($11)|0)!=0;
      var $12 = $tobool4;label = 9; break;
    case 9: 
      var $12;
      if ($12) { label = 10; break; } else { label = 21; break; }
    case 10: 
      var $13=$facet;
      var $14=$13;
      var $bf_field_offs=(($14+76)|0);
      var $15=$bf_field_offs;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 11;
      var $bf_clear5=$17 & 1;
      var $tobool6=(($bf_clear5)|0)!=0;
      if ($tobool6) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 20; break;
    case 12: 
      $vertex=0;
      var $18=$facet;
      var $vertices=(($18+48)|0);
      var $19=HEAP32[(($vertices)>>2)];
      var $tobool9=(($19)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $20=$facet;
      var $vertices11=(($20+48)|0);
      var $21=HEAP32[(($vertices11)>>2)];
      var $e=(($21+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $22=$p;
      $vertexp=$22;
      label = 14; break;
    case 14: 
      var $23=$vertexp;
      var $incdec_ptr=(($23+4)|0);
      $vertexp=$incdec_ptr;
      var $24=HEAP32[(($23)>>2)];
      $vertex=$24;
      var $tobool13=(($24)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $25=$vertex;
      var $26=$25;
      var $bf_field_offs15=(($26+16)|0);
      var $27=$bf_field_offs15;
      var $28=HEAP32[(($27)>>2)];
      var $bf_clear16=$28 & 2147483647;
      var $29=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear17=$29 & 2147483647;
      var $cmp18=(($bf_clear16)|0)!=(($bf_clear17)|0);
      if ($cmp18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=HEAP32[(((((5249160)|0)))>>2)];
      var $bf_clear20=$30 & 2147483647;
      var $31=$vertex;
      var $bf_value21=$bf_clear20 & 2147483647;
      var $32=$31;
      var $bf_field_offs22=(($32+16)|0);
      var $33=$bf_field_offs22;
      var $34=$bf_value21 & 2147483647;
      var $35=HEAP32[(($33)>>2)];
      var $36=$35 & -2147483648;
      var $37=$36 | $34;
      HEAP32[(($33)>>2)]=$37;
      var $38=HEAP32[((((5247508)|0))>>2)];
      var $call=_qh_setnew($38);
      var $39=$vertex;
      var $neighbors=(($39+12)|0);
      HEAP32[(($neighbors)>>2)]=$call;
      label = 17; break;
    case 17: 
      var $40=$vertex;
      var $neighbors24=(($40+12)|0);
      var $41=$facet;
      var $42=$41;
      _qh_setappend($neighbors24, $42);
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $43=$facet;
      var $next26=(($43+44)|0);
      var $44=HEAP32[(($next26)>>2)];
      $facet=$44;
      label = 7; break;
    case 21: 
      HEAP32[((((5248580)|0))>>2)]=1;
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_vertexneighbors["X"]=1;

function _qh_findgood($facetlist, $goodhorizon) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $facetlist_addr;
      var $goodhorizon_addr;
      var $facet;
      var $bestfacet;
      var $angle=__stackBase__;
      var $bestangle;
      var $dist=(__stackBase__)+(8);
      var $numgood;
      $facetlist_addr=$facetlist;
      $goodhorizon_addr=$goodhorizon;
      $bestfacet=0;
      $bestangle=1.7976931348623157e+308;
      $numgood=0;
      var $0=$facetlist_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $1=$facetlist_addr;
      $facet=$1;
      label = 4; break;
    case 4: 
      var $2=$facet;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $5 = 0;label = 6; break; }
    case 5: 
      var $3=$facet;
      var $next=(($3+44)|0);
      var $4=HEAP32[(($next)>>2)];
      var $tobool2=(($4)|0)!=0;
      var $5 = $tobool2;label = 6; break;
    case 6: 
      var $5;
      if ($5) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $6=$facet;
      var $7=$6;
      var $bf_field_offs=(($7+76)|0);
      var $8=$bf_field_offs;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 19;
      var $bf_clear=$10 & 1;
      var $tobool3=(($bf_clear)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$numgood;
      var $inc=((($11)+(1))|0);
      $numgood=$inc;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$facet;
      var $next5=(($12+44)|0);
      var $13=HEAP32[(($next5)>>2)];
      $facet=$13;
      label = 4; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=HEAP32[((((5247028)|0))>>2)];
      var $cmp=(($14)|0) > 0;
      if ($cmp) { label = 13; break; } else { label = 25; break; }
    case 13: 
      var $15=HEAP32[((((5247084)|0))>>2)];
      var $tobool7=(($15)|0)!=0;
      if ($tobool7) { label = 25; break; } else { label = 14; break; }
    case 14: 
      var $16=$facetlist_addr;
      var $tobool9=(($16)|0)!=0;
      if ($tobool9) { label = 15; break; } else { label = 24; break; }
    case 15: 
      var $17=$facetlist_addr;
      $facet=$17;
      label = 16; break;
    case 16: 
      var $18=$facet;
      var $tobool12=(($18)|0)!=0;
      if ($tobool12) { label = 17; break; } else { var $21 = 0;label = 18; break; }
    case 17: 
      var $19=$facet;
      var $next14=(($19+44)|0);
      var $20=HEAP32[(($next14)>>2)];
      var $tobool15=(($20)|0)!=0;
      var $21 = $tobool15;label = 18; break;
    case 18: 
      var $21;
      if ($21) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $22=HEAP32[((((5247032)|0))>>2)];
      var $23=$facet;
      var $vertices=(($23+48)|0);
      var $24=HEAP32[(($vertices)>>2)];
      var $call=_qh_isvertex($22, $24);
      var $tobool18=(($call)|0)!=0;
      if ($tobool18) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $25=$facet;
      var $26=$25;
      var $bf_field_offs20=(($26+76)|0);
      var $27=$bf_field_offs20;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 & -524289;
      HEAP32[(($27)>>2)]=$29;
      var $30=$numgood;
      var $dec=((($30)-(1))|0);
      $numgood=$dec;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $31=$facet;
      var $next23=(($31+44)|0);
      var $32=HEAP32[(($next23)>>2)];
      $facet=$32;
      label = 16; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $33=HEAP32[((((5247016)|0))>>2)];
      var $tobool27=(($33)|0)!=0;
      if ($tobool27) { label = 26; break; } else { label = 41; break; }
    case 26: 
      var $34=$numgood;
      var $tobool29=(($34)|0)!=0;
      if ($tobool29) { label = 27; break; } else { label = 41; break; }
    case 27: 
      var $35=$facetlist_addr;
      var $tobool31=(($35)|0)!=0;
      if ($tobool31) { label = 28; break; } else { label = 40; break; }
    case 28: 
      var $36=$facetlist_addr;
      $facet=$36;
      label = 29; break;
    case 29: 
      var $37=$facet;
      var $tobool34=(($37)|0)!=0;
      if ($tobool34) { label = 30; break; } else { var $40 = 0;label = 31; break; }
    case 30: 
      var $38=$facet;
      var $next36=(($38+44)|0);
      var $39=HEAP32[(($next36)>>2)];
      var $tobool37=(($39)|0)!=0;
      var $40 = $tobool37;label = 31; break;
    case 31: 
      var $40;
      if ($40) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $41=$facet;
      var $42=$41;
      var $bf_field_offs40=(($42+76)|0);
      var $43=$bf_field_offs40;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 >>> 19;
      var $bf_clear41=$45 & 1;
      var $tobool42=(($bf_clear41)|0)!=0;
      if ($tobool42) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $46=$facet;
      var $normal=(($46+24)|0);
      var $47=HEAP32[(($normal)>>2)];
      var $tobool44=(($47)|0)!=0;
      if ($tobool44) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $48=HEAP32[(((((5243420)|0)))>>2)];
      var $inc46=((($48)+(1))|0);
      HEAP32[(((((5243420)|0)))>>2)]=$inc46;
      var $49=HEAP32[((((5247020)|0))>>2)];
      var $50=$facet;
      _qh_distplane($49, $50, $dist);
      var $51=HEAP32[((((5247016)|0))>>2)];
      var $cmp47=(($51)|0) > 0;
      var $conv=(($cmp47)&1);
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp48=$52 > 0;
      var $conv49=(($cmp48)&1);
      var $xor=$conv ^ $conv49;
      var $tobool50=(($xor)|0)!=0;
      if ($tobool50) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $53=$facet;
      var $54=$53;
      var $bf_field_offs52=(($54+76)|0);
      var $55=$bf_field_offs52;
      var $56=HEAP32[(($55)>>2)];
      var $57=$56 & -524289;
      HEAP32[(($55)>>2)]=$57;
      var $58=$numgood;
      var $dec53=((($58)-(1))|0);
      $numgood=$dec53;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $59=$facet;
      var $next57=(($59+44)|0);
      var $60=HEAP32[(($next57)>>2)];
      $facet=$60;
      label = 29; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $61=HEAP32[((((5247024)|0))>>2)];
      var $tobool61=(($61)|0)!=0;
      if ($tobool61) { label = 42; break; } else { label = 82; break; }
    case 42: 
      var $62=$numgood;
      var $tobool63=(($62)|0)!=0;
      if ($tobool63) { label = 45; break; } else { label = 43; break; }
    case 43: 
      var $63=$goodhorizon_addr;
      var $tobool64=(($63)|0)!=0;
      if ($tobool64) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $64=HEAP32[((((5249044)|0))>>2)];
      var $tobool66=(($64)|0)!=0;
      if ($tobool66) { label = 45; break; } else { label = 82; break; }
    case 45: 
      var $65=$facetlist_addr;
      var $tobool68=(($65)|0)!=0;
      if ($tobool68) { label = 46; break; } else { label = 60; break; }
    case 46: 
      var $66=$facetlist_addr;
      $facet=$66;
      label = 47; break;
    case 47: 
      var $67=$facet;
      var $tobool71=(($67)|0)!=0;
      if ($tobool71) { label = 48; break; } else { var $70 = 0;label = 49; break; }
    case 48: 
      var $68=$facet;
      var $next73=(($68+44)|0);
      var $69=HEAP32[(($next73)>>2)];
      var $tobool74=(($69)|0)!=0;
      var $70 = $tobool74;label = 49; break;
    case 49: 
      var $70;
      if ($70) { label = 50; break; } else { label = 59; break; }
    case 50: 
      var $71=$facet;
      var $72=$71;
      var $bf_field_offs77=(($72+76)|0);
      var $73=$bf_field_offs77;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 >>> 19;
      var $bf_clear78=$75 & 1;
      var $tobool79=(($bf_clear78)|0)!=0;
      if ($tobool79) { label = 51; break; } else { label = 57; break; }
    case 51: 
      var $76=$facet;
      var $normal81=(($76+24)|0);
      var $77=HEAP32[(($normal81)>>2)];
      var $tobool82=(($77)|0)!=0;
      if ($tobool82) { label = 52; break; } else { label = 57; break; }
    case 52: 
      var $78=$facet;
      var $normal84=(($78+24)|0);
      var $79=HEAP32[(($normal84)>>2)];
      var $call85=_qh_inthresholds($79, $angle);
      var $tobool86=(($call85)|0)!=0;
      if ($tobool86) { label = 56; break; } else { label = 53; break; }
    case 53: 
      var $80=$facet;
      var $81=$80;
      var $bf_field_offs88=(($81+76)|0);
      var $82=$bf_field_offs88;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83 & -524289;
      HEAP32[(($82)>>2)]=$84;
      var $85=$numgood;
      var $dec89=((($85)-(1))|0);
      $numgood=$dec89;
      var $86=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $87=$bestangle;
      var $cmp90=$86 < $87;
      if ($cmp90) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestangle=$88;
      var $89=$facet;
      $bestfacet=$89;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $90=$facet;
      var $next97=(($90+44)|0);
      var $91=HEAP32[(($next97)>>2)];
      $facet=$91;
      label = 47; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $92=$numgood;
      var $tobool100=(($92)|0)!=0;
      if ($tobool100) { label = 78; break; } else { label = 61; break; }
    case 61: 
      var $93=$goodhorizon_addr;
      var $tobool102=(($93)|0)!=0;
      if ($tobool102) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $94=HEAP32[((((5249044)|0))>>2)];
      var $tobool104=(($94)|0)!=0;
      if ($tobool104) { label = 63; break; } else { label = 78; break; }
    case 63: 
      var $95=HEAP32[((((5249044)|0))>>2)];
      var $tobool106=(($95)|0)!=0;
      if ($tobool106) { label = 64; break; } else { label = 70; break; }
    case 64: 
      var $96=HEAP32[((((5249044)|0))>>2)];
      var $97=$96;
      var $bf_field_offs108=(($97+76)|0);
      var $98=$bf_field_offs108;
      var $99=HEAP32[(($98)>>2)];
      var $100=$99 >>> 11;
      var $bf_clear109=$100 & 1;
      var $tobool110=(($bf_clear109)|0)!=0;
      if ($tobool110) { label = 65; break; } else { label = 66; break; }
    case 65: 
      HEAP32[((((5249044)|0))>>2)]=0;
      label = 69; break;
    case 66: 
      var $101=HEAP32[((((5249044)|0))>>2)];
      var $normal112=(($101+24)|0);
      var $102=HEAP32[(($normal112)>>2)];
      var $call113=_qh_inthresholds($102, $angle);
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $104=$bestangle;
      var $cmp114=$103 < $104;
      if ($cmp114) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $105=HEAP32[((((5249044)|0))>>2)];
      $bestfacet=$105;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $106=$bestfacet;
      var $tobool120=(($106)|0)!=0;
      if ($tobool120) { label = 71; break; } else { label = 77; break; }
    case 71: 
      var $107=$bestfacet;
      var $108=HEAP32[((((5249044)|0))>>2)];
      var $cmp122=(($107)|0)!=(($108)|0);
      if ($cmp122) { label = 72; break; } else { label = 77; break; }
    case 72: 
      var $109=HEAP32[((((5249044)|0))>>2)];
      var $tobool125=(($109)|0)!=0;
      if ($tobool125) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $110=HEAP32[((((5249044)|0))>>2)];
      var $111=$110;
      var $bf_field_offs127=(($111+76)|0);
      var $112=$bf_field_offs127;
      var $113=HEAP32[(($112)>>2)];
      var $114=$113 & -524289;
      HEAP32[(($112)>>2)]=$114;
      label = 74; break;
    case 74: 
      var $115=$bestfacet;
      HEAP32[((((5249044)|0))>>2)]=$115;
      var $116=$bestfacet;
      var $117=$116;
      var $bf_field_offs129=(($117+76)|0);
      var $118=$bf_field_offs129;
      var $119=HEAP32[(($118)>>2)];
      var $120=$119 & -524289;
      var $121=$120 | 524288;
      HEAP32[(($118)>>2)]=$121;
      var $122=$numgood;
      var $inc130=((($122)+(1))|0);
      $numgood=$inc130;
      var $123=HEAP32[((((5247040)|0))>>2)];
      var $cmp131=(($123)|0) >= 2;
      if ($cmp131) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $124=HEAP32[((((5248924)|0))>>2)];
      var $125=$bestfacet;
      var $id=(($125+72)|0);
      var $126=HEAP32[(($id)>>2)];
      var $127=$bestangle;
      _qh_fprintf($124, 2044, ((5253432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$126,(HEAPF64[(tempDoublePtr)>>3]=$127,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 76; break;
    case 76: 
      var $128=$numgood;
      $retval=$128;
      label = 89; break;
    case 77: 
      label = 81; break;
    case 78: 
      var $129=HEAP32[((((5249044)|0))>>2)];
      var $tobool137=(($129)|0)!=0;
      if ($tobool137) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $130=HEAP32[((((5249044)|0))>>2)];
      var $131=$130;
      var $bf_field_offs139=(($131+76)|0);
      var $132=$bf_field_offs139;
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -524289;
      HEAP32[(($132)>>2)]=$134;
      HEAP32[((((5249044)|0))>>2)]=0;
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $135=$numgood;
      var $136=HEAP32[(((((5243780)|0)))>>2)];
      var $add=((($136)+($135))|0);
      HEAP32[(((((5243780)|0)))>>2)]=$add;
      var $137=HEAP32[((((5247040)|0))>>2)];
      var $cmp143=(($137)|0) >= 2;
      if ($cmp143) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $138=HEAP32[((((5248924)|0))>>2)];
      var $139=$numgood;
      var $140=$goodhorizon_addr;
      _qh_fprintf($138, 2045, ((5253248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$139,HEAP32[(((tempInt)+(4))>>2)]=$140,tempInt));
      label = 84; break;
    case 84: 
      var $141=$numgood;
      var $tobool147=(($141)|0)!=0;
      if ($tobool147) { label = 88; break; } else { label = 85; break; }
    case 85: 
      var $142=HEAP32[((((5247028)|0))>>2)];
      var $cmp149=(($142)|0) > 0;
      if ($cmp149) { label = 86; break; } else { label = 88; break; }
    case 86: 
      var $143=HEAP32[((((5247084)|0))>>2)];
      var $tobool152=(($143)|0)!=0;
      if ($tobool152) { label = 88; break; } else { label = 87; break; }
    case 87: 
      var $144=$goodhorizon_addr;
      $retval=$144;
      label = 89; break;
    case 88: 
      var $145=$numgood;
      $retval=$145;
      label = 89; break;
    case 89: 
      var $146=$retval;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findgood["X"]=1;

function _qh_findgood_all($facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facet;
      var $bestfacet;
      var $angle=__stackBase__;
      var $bestangle;
      var $numgood;
      var $startgood;
      $facetlist_addr=$facetlist;
      $bestfacet=0;
      $bestangle=1.7976931348623157e+308;
      $numgood=0;
      var $0=HEAP32[((((5247028)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247024)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $2=HEAP32[((((5247016)|0))>>2)];
      var $tobool3=(($2)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $3=HEAP32[((((5247408)|0))>>2)];
      var $tobool5=(($3)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 65; break;
    case 7: 
      var $4=HEAP32[((((5247128)|0))>>2)];
      var $tobool6=(($4)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $5=HEAP32[((((5248944)|0))>>2)];
      var $call=_qh_findgood($5, 0);
      label = 9; break;
    case 9: 
      var $6=$facetlist_addr;
      var $tobool9=(($6)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $7=$facetlist_addr;
      $facet=$7;
      label = 11; break;
    case 11: 
      var $8=$facet;
      var $tobool11=(($8)|0)!=0;
      if ($tobool11) { label = 12; break; } else { var $11 = 0;label = 13; break; }
    case 12: 
      var $9=$facet;
      var $next=(($9+44)|0);
      var $10=HEAP32[(($next)>>2)];
      var $tobool12=(($10)|0)!=0;
      var $11 = $tobool12;label = 13; break;
    case 13: 
      var $11;
      if ($11) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $12=$facet;
      var $13=$12;
      var $bf_field_offs=(($13+76)|0);
      var $14=$bf_field_offs;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 19;
      var $bf_clear=$16 & 1;
      var $tobool13=(($bf_clear)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $17=$numgood;
      var $inc=((($17)+(1))|0);
      $numgood=$inc;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $18=$facet;
      var $next16=(($18+44)|0);
      var $19=HEAP32[(($next16)>>2)];
      $facet=$19;
      label = 11; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $20=HEAP32[((((5247028)|0))>>2)];
      var $cmp=(($20)|0) < 0;
      if ($cmp) { label = 22; break; } else { label = 20; break; }
    case 20: 
      var $21=HEAP32[((((5247028)|0))>>2)];
      var $cmp18=(($21)|0) > 0;
      if ($cmp18) { label = 21; break; } else { label = 42; break; }
    case 21: 
      var $22=HEAP32[((((5247084)|0))>>2)];
      var $tobool20=(($22)|0)!=0;
      if ($tobool20) { label = 22; break; } else { label = 42; break; }
    case 22: 
      var $23=$facetlist_addr;
      var $tobool22=(($23)|0)!=0;
      if ($tobool22) { label = 23; break; } else { label = 41; break; }
    case 23: 
      var $24=$facetlist_addr;
      $facet=$24;
      label = 24; break;
    case 24: 
      var $25=$facet;
      var $tobool25=(($25)|0)!=0;
      if ($tobool25) { label = 25; break; } else { var $28 = 0;label = 26; break; }
    case 25: 
      var $26=$facet;
      var $next27=(($26+44)|0);
      var $27=HEAP32[(($next27)>>2)];
      var $tobool28=(($27)|0)!=0;
      var $28 = $tobool28;label = 26; break;
    case 26: 
      var $28;
      if ($28) { label = 27; break; } else { label = 40; break; }
    case 27: 
      var $29=$facet;
      var $30=$29;
      var $bf_field_offs31=(($30+76)|0);
      var $31=$bf_field_offs31;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 19;
      var $bf_clear32=$33 & 1;
      var $tobool33=(($bf_clear32)|0)!=0;
      if ($tobool33) { label = 28; break; } else { label = 38; break; }
    case 28: 
      var $34=HEAP32[((((5247028)|0))>>2)];
      var $cmp35=(($34)|0) > 0;
      var $conv=(($cmp35)&1);
      var $35=HEAP32[((((5247032)|0))>>2)];
      var $36=$facet;
      var $vertices=(($36+48)|0);
      var $37=HEAP32[(($vertices)>>2)];
      var $call36=_qh_isvertex($35, $37);
      var $tobool37=(($call36)|0)!=0;
      var $lnot=$tobool37 ^ 1;
      var $lnot38=$lnot ^ 1;
      var $lnot_ext=(($lnot38)&1);
      var $xor=$conv ^ $lnot_ext;
      var $tobool39=(($xor)|0)!=0;
      if ($tobool39) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $38=$numgood;
      var $dec=((($38)-(1))|0);
      $numgood=$dec;
      var $tobool41=(($dec)|0)!=0;
      if ($tobool41) { label = 37; break; } else { label = 30; break; }
    case 30: 
      var $39=HEAP32[((((5247128)|0))>>2)];
      var $tobool43=(($39)|0)!=0;
      if ($tobool43) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $40=HEAP32[((((5248924)|0))>>2)];
      var $41=HEAP32[((((5247032)|0))>>2)];
      var $call45=_qh_pointid($41);
      var $42=$facet;
      var $id=(($42+72)|0);
      var $43=HEAP32[(($id)>>2)];
      _qh_fprintf($40, 7064, ((5252992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call45,HEAP32[(((tempInt)+(4))>>2)]=$43,tempInt));
      label = 65; break;
    case 32: 
      var $44=HEAP32[((((5247028)|0))>>2)];
      var $cmp46=(($44)|0) > 0;
      if ($cmp46) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $45=HEAP32[((((5248924)|0))>>2)];
      var $46=HEAP32[((((5247028)|0))>>2)];
      var $sub=((($46)-(1))|0);
      var $47=HEAP32[((((5247028)|0))>>2)];
      var $sub49=((($47)-(1))|0);
      _qh_fprintf($45, 7065, ((5252712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub,HEAP32[(((tempInt)+(4))>>2)]=$sub49,tempInt));
      label = 35; break;
    case 34: 
      var $48=HEAP32[((((5248924)|0))>>2)];
      var $49=HEAP32[((((5247028)|0))>>2)];
      var $sub51=(((-$49))|0);
      var $sub52=((($sub51)-(1))|0);
      var $50=HEAP32[((((5247028)|0))>>2)];
      var $sub53=(((-$50))|0);
      var $sub54=((($sub53)-(1))|0);
      _qh_fprintf($48, 7066, ((5252488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub52,HEAP32[(((tempInt)+(4))>>2)]=$sub54,tempInt));
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $51=$facet;
      var $52=$51;
      var $bf_field_offs58=(($52+76)|0);
      var $53=$bf_field_offs58;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -524289;
      HEAP32[(($53)>>2)]=$55;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $56=$facet;
      var $next61=(($56+44)|0);
      var $57=HEAP32[(($next61)>>2)];
      $facet=$57;
      label = 24; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $58=$numgood;
      $startgood=$58;
      var $59=HEAP32[((((5247408)|0))>>2)];
      var $tobool65=(($59)|0)!=0;
      if ($tobool65) { label = 43; break; } else { label = 63; break; }
    case 43: 
      var $60=$facetlist_addr;
      var $tobool67=(($60)|0)!=0;
      if ($tobool67) { label = 44; break; } else { label = 57; break; }
    case 44: 
      var $61=$facetlist_addr;
      $facet=$61;
      label = 45; break;
    case 45: 
      var $62=$facet;
      var $tobool70=(($62)|0)!=0;
      if ($tobool70) { label = 46; break; } else { var $65 = 0;label = 47; break; }
    case 46: 
      var $63=$facet;
      var $next72=(($63+44)|0);
      var $64=HEAP32[(($next72)>>2)];
      var $tobool73=(($64)|0)!=0;
      var $65 = $tobool73;label = 47; break;
    case 47: 
      var $65;
      if ($65) { label = 48; break; } else { label = 56; break; }
    case 48: 
      var $66=$facet;
      var $67=$66;
      var $bf_field_offs76=(($67+76)|0);
      var $68=$bf_field_offs76;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 19;
      var $bf_clear77=$70 & 1;
      var $tobool78=(($bf_clear77)|0)!=0;
      if ($tobool78) { label = 49; break; } else { label = 54; break; }
    case 49: 
      var $71=$facet;
      var $normal=(($71+24)|0);
      var $72=HEAP32[(($normal)>>2)];
      var $call80=_qh_inthresholds($72, $angle);
      var $tobool81=(($call80)|0)!=0;
      if ($tobool81) { label = 53; break; } else { label = 50; break; }
    case 50: 
      var $73=$facet;
      var $74=$73;
      var $bf_field_offs83=(($74+76)|0);
      var $75=$bf_field_offs83;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & -524289;
      HEAP32[(($75)>>2)]=$77;
      var $78=$numgood;
      var $dec84=((($78)-(1))|0);
      $numgood=$dec84;
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $80=$bestangle;
      var $cmp85=$79 < $80;
      if ($cmp85) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($angle)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($angle)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestangle=$81;
      var $82=$facet;
      $bestfacet=$82;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $83=$facet;
      var $next92=(($83+44)|0);
      var $84=HEAP32[(($next92)>>2)];
      $facet=$84;
      label = 45; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $85=$numgood;
      var $tobool95=(($85)|0)!=0;
      if ($tobool95) { label = 62; break; } else { label = 58; break; }
    case 58: 
      var $86=$bestfacet;
      var $tobool97=(($86)|0)!=0;
      if ($tobool97) { label = 59; break; } else { label = 62; break; }
    case 59: 
      var $87=$bestfacet;
      var $88=$87;
      var $bf_field_offs99=(($88+76)|0);
      var $89=$bf_field_offs99;
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 & -524289;
      var $92=$91 | 524288;
      HEAP32[(($89)>>2)]=$92;
      var $93=$numgood;
      var $inc100=((($93)+(1))|0);
      $numgood=$inc100;
      var $94=HEAP32[((((5247040)|0))>>2)];
      var $tobool101=(($94)|0)!=0;
      if ($tobool101) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $95=HEAP32[((((5248924)|0))>>2)];
      var $96=$bestfacet;
      var $id103=(($96+72)|0);
      var $97=HEAP32[(($id103)>>2)];
      var $98=$bestangle;
      _qh_fprintf($95, 23, ((5252292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$97,(HEAPF64[(tempDoublePtr)>>3]=$98,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 61; break;
    case 61: 
      label = 65; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $99=$numgood;
      HEAP32[((((5249008)|0))>>2)]=$99;
      var $100=HEAP32[((((5247040)|0))>>2)];
      var $tobool107=(($100)|0)!=0;
      if ($tobool107) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $101=HEAP32[((((5248924)|0))>>2)];
      var $102=$numgood;
      var $103=$startgood;
      _qh_fprintf($101, 24, ((5251960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$102,HEAP32[(((tempInt)+(4))>>2)]=$103,tempInt));
      label = 65; break;
    case 65: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_findgood_all["X"]=1;

function _qh_furthestnext() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $bestfacet;
      var $dist;
      var $bestdist;
      $bestfacet=0;
      $bestdist=-1.7976931348623157e+308;
      var $0=HEAP32[((((5248944)|0))>>2)];
      $facet=$0;
      label = 3; break;
    case 3: 
      var $1=$facet;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $2=$facet;
      var $next=(($2+44)|0);
      var $3=HEAP32[(($next)>>2)];
      var $tobool1=(($3)|0)!=0;
      var $4 = $tobool1;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $5=$facet;
      var $outsideset=(($5+60)|0);
      var $6=HEAP32[(($outsideset)>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $7=$facet;
      var $furthestdist=(($7)|0);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($furthestdist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($furthestdist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dist=$8;
      var $9=$dist;
      var $10=$bestdist;
      var $cmp=$9 > $10;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$facet;
      $bestfacet=$11;
      var $12=$dist;
      $bestdist=$12;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $13=$facet;
      var $next5=(($13+44)|0);
      var $14=HEAP32[(($next5)>>2)];
      $facet=$14;
      label = 3; break;
    case 12: 
      var $15=$bestfacet;
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $16=$bestfacet;
      _qh_removefacet($16);
      var $17=$bestfacet;
      _qh_prependfacet($17, ((5248952)|0));
      var $18=HEAP32[((((5247040)|0))>>2)];
      var $cmp8=(($18)|0) >= 1;
      if ($cmp8) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $19=HEAP32[((((5248924)|0))>>2)];
      var $20=$bestfacet;
      var $id=(($20+72)|0);
      var $21=HEAP32[(($id)>>2)];
      var $22=$bestdist;
      _qh_fprintf($19, 1029, ((5251612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,(HEAPF64[(tempDoublePtr)>>3]=$22,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_furthestnext["X"]=1;

function _qh_prependfacet($facet, $facetlist) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $facetlist_addr;
      var $prevfacet;
      var $list;
      $facet_addr=$facet;
      $facetlist_addr=$facetlist;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facet_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$facetlist_addr;
      var $5=HEAP32[(($4)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$facetlist_addr;
      var $7=HEAP32[(($6)>>2)];
      var $id1=(($7+72)|0);
      var $8=HEAP32[(($id1)>>2)];
      var $cond = $8;label = 6; break;
    case 5: 
      var $cond = -1;label = 6; break;
    case 6: 
      var $cond;
      _qh_fprintf($1, 4061, ((5297116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$cond,tempInt));
      label = 7; break;
    case 7: 
      var $9=$facetlist_addr;
      var $10=HEAP32[(($9)>>2)];
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $11=HEAP32[((((5248948)|0))>>2)];
      var $12=$facetlist_addr;
      HEAP32[(($12)>>2)]=$11;
      label = 9; break;
    case 9: 
      var $13=$facetlist_addr;
      var $14=HEAP32[(($13)>>2)];
      $list=$14;
      var $15=$list;
      var $previous=(($15+40)|0);
      var $16=HEAP32[(($previous)>>2)];
      $prevfacet=$16;
      var $17=$prevfacet;
      var $18=$facet_addr;
      var $previous5=(($18+40)|0);
      HEAP32[(($previous5)>>2)]=$17;
      var $19=$prevfacet;
      var $tobool6=(($19)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$facet_addr;
      var $21=$prevfacet;
      var $next=(($21+44)|0);
      HEAP32[(($next)>>2)]=$20;
      label = 11; break;
    case 11: 
      var $22=$facet_addr;
      var $23=$list;
      var $previous9=(($23+40)|0);
      HEAP32[(($previous9)>>2)]=$22;
      var $24=$facetlist_addr;
      var $25=HEAP32[(($24)>>2)];
      var $26=$facet_addr;
      var $next10=(($26+44)|0);
      HEAP32[(($next10)>>2)]=$25;
      var $27=HEAP32[((((5248944)|0))>>2)];
      var $28=$list;
      var $cmp11=(($27)|0)==(($28)|0);
      if ($cmp11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $29=$facet_addr;
      HEAP32[((((5248944)|0))>>2)]=$29;
      label = 13; break;
    case 13: 
      var $30=HEAP32[((((5248952)|0))>>2)];
      var $31=$list;
      var $cmp14=(($30)|0)==(($31)|0);
      if ($cmp14) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $32=$facet_addr;
      HEAP32[((((5248952)|0))>>2)]=$32;
      label = 15; break;
    case 15: 
      var $33=$facet_addr;
      var $34=$facetlist_addr;
      HEAP32[(($34)>>2)]=$33;
      var $35=HEAP32[((((5248996)|0))>>2)];
      var $inc=((($35)+(1))|0);
      HEAP32[((((5248996)|0))>>2)]=$inc;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_prependfacet["X"]=1;

function _qh_furthestout($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet_addr;
      var $point;
      var $pointp;
      var $bestpoint;
      var $dist=__stackBase__;
      var $bestdist;
      $facet_addr=$facet;
      $bestpoint=0;
      $bestdist=-1.7976931348623157e+308;
      $point=0;
      var $0=$facet_addr;
      var $outsideset=(($0+60)|0);
      var $1=HEAP32[(($outsideset)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $2=$facet_addr;
      var $outsideset1=(($2+60)|0);
      var $3=HEAP32[(($outsideset1)>>2)];
      var $e=(($3+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $4=$p;
      $pointp=$4;
      label = 4; break;
    case 4: 
      var $5=$pointp;
      var $incdec_ptr=(($5+4)|0);
      $pointp=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $point=$6;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $7=$point;
      var $8=$facet_addr;
      _qh_distplane($7, $8, $dist);
      var $9=HEAP32[(((((5243172)|0)))>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[(((((5243172)|0)))>>2)]=$inc;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $11=$bestdist;
      var $cmp=$10 > $11;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$point;
      $bestpoint=$12;
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $bestdist=$13;
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $14=$bestpoint;
      var $tobool5=(($14)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$facet_addr;
      var $outsideset7=(($15+60)|0);
      var $16=HEAP32[(($outsideset7)>>2)];
      var $17=$point;
      var $18=$17;
      var $call=_qh_setdel($16, $18);
      var $19=$facet_addr;
      var $outsideset8=(($19+60)|0);
      var $20=$point;
      var $21=$20;
      _qh_setappend($outsideset8, $21);
      var $22=$bestdist;
      var $23=$facet_addr;
      var $furthestdist=(($23)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$22,HEAP32[(($furthestdist)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($furthestdist)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 11: 
      var $24=$facet_addr;
      var $25=$24;
      var $bf_field_offs=(($25+76)|0);
      var $26=$bf_field_offs;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & -262145;
      HEAP32[(($26)>>2)]=$28;
      var $29=HEAP32[((((5247040)|0))>>2)];
      var $cmp10=(($29)|0) >= 3;
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $30=HEAP32[((((5248924)|0))>>2)];
      var $31=$point;
      var $call12=_qh_pointid($31);
      var $32=$facet_addr;
      var $id=(($32+72)|0);
      var $33=HEAP32[(($id)>>2)];
      _qh_fprintf($30, 3017, ((5251372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call12,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_furthestout["X"]=1;

function _qh_infiniteloop($facet) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $facet_addr;
  $facet_addr=$facet;
  var $0=HEAP32[((((5248924)|0))>>2)];
  _qh_fprintf($0, 6149, ((5251136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$facet_addr;
  _qh_errexit(5, $1, 0);
  STACKTOP = __stackBase__;
  return;
}


function _qh_initbuild() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $maxpoints=__stackBase__;
      var $vertices=(__stackBase__)+(4);
      var $facet;
      var $i;
      var $numpart=(__stackBase__)+(8);
      var $dist=(__stackBase__)+(12);
      var $isoutside=(__stackBase__)+(20);
      HEAP32[((((5249040)|0))>>2)]=-1;
      HEAP32[((((5249256)|0))>>2)]=0;
      var $0=HEAP32[(((((5249016)|0)))>>2)];
      var $1=$0 & -16777216;
      HEAP32[(((((5249016)|0)))>>2)]=$1;
      var $2=HEAP32[(((((5249020)|0)))>>2)];
      var $3=$2 & -16777216;
      HEAP32[(((((5249020)|0)))>>2)]=$3;
      HEAP32[((((5249012)|0))>>2)]=0;
      var $4=HEAP32[(((((5249160)|0)))>>2)];
      var $5=$4 & -2147483648;
      HEAP32[(((((5249160)|0)))>>2)]=$5;
      HEAP32[((((5249156)|0))>>2)]=0;
      HEAP32[((((5249064)|0))>>2)]=0;
      var $6=HEAP32[((((5247016)|0))>>2)];
      var $cmp=(($6)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((((5247016)|0))>>2)];
      var $sub=((($7)-(1))|0);
      var $call=_qh_point($sub);
      HEAP32[((((5247020)|0))>>2)]=$call;
      label = 7; break;
    case 4: 
      var $8=HEAP32[((((5247016)|0))>>2)];
      var $cmp1=(($8)|0) < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=HEAP32[((((5247016)|0))>>2)];
      var $sub3=(((-$9))|0);
      var $sub4=((($sub3)-(1))|0);
      var $call5=_qh_point($sub4);
      HEAP32[((((5247020)|0))>>2)]=$call5;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=HEAP32[((((5247028)|0))>>2)];
      var $cmp7=(($10)|0) > 0;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=HEAP32[((((5247028)|0))>>2)];
      var $sub9=((($11)-(1))|0);
      var $call10=_qh_point($sub9);
      HEAP32[((((5247032)|0))>>2)]=$call10;
      label = 12; break;
    case 9: 
      var $12=HEAP32[((((5247028)|0))>>2)];
      var $cmp12=(($12)|0) < 0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=HEAP32[((((5247028)|0))>>2)];
      var $sub14=(((-$13))|0);
      var $sub15=((($sub14)-(1))|0);
      var $call16=_qh_point($sub15);
      HEAP32[((((5247032)|0))>>2)]=$call16;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=HEAP32[((((5247016)|0))>>2)];
      var $tobool=(($14)|0)!=0;
      if ($tobool) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $15=HEAP32[((((5247020)|0))>>2)];
      var $16=HEAP32[((((5247520)|0))>>2)];
      var $cmp19=(($15)>>>0) < (($16)>>>0);
      if ($cmp19) { label = 18; break; } else { label = 14; break; }
    case 14: 
      var $17=HEAP32[((((5247020)|0))>>2)];
      var $18=HEAP32[((((5247516)|0))>>2)];
      var $sub20=((($18)-(1))|0);
      var $call21=_qh_point($sub20);
      var $cmp22=(($17)>>>0) > (($call21)>>>0);
      if ($cmp22) { label = 18; break; } else { label = 15; break; }
    case 15: 
      var $19=HEAP32[((((5247028)|0))>>2)];
      var $tobool24=(($19)|0)!=0;
      if ($tobool24) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $20=HEAP32[((((5247032)|0))>>2)];
      var $21=HEAP32[((((5247520)|0))>>2)];
      var $cmp26=(($20)>>>0) < (($21)>>>0);
      if ($cmp26) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $22=HEAP32[((((5247032)|0))>>2)];
      var $23=HEAP32[((((5247516)|0))>>2)];
      var $sub28=((($23)-(1))|0);
      var $call29=_qh_point($sub28);
      var $cmp30=(($22)>>>0) > (($call29)>>>0);
      if ($cmp30) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $24=HEAP32[((((5248924)|0))>>2)];
      var $25=HEAP32[((((5247516)|0))>>2)];
      var $sub32=((($25)-(1))|0);
      _qh_fprintf($24, 6150, ((5250724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$sub32,tempInt));
      _qh_errexit(1, 0, 0);
      label = 19; break;
    case 19: 
      var $26=HEAP32[((((5247520)|0))>>2)];
      var $27=HEAP32[((((5247516)|0))>>2)];
      var $28=HEAP32[((((5247508)|0))>>2)];
      var $call34=_qh_maxmin($26, $27, $28);
      HEAP32[(($maxpoints)>>2)]=$call34;
      var $29=HEAP32[((((5247392)|0))>>2)];
      var $tobool35=(($29)|0)!=0;
      if ($tobool35) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $30=HEAP32[((((5247520)|0))>>2)];
      var $31=HEAP32[((((5247516)|0))>>2)];
      var $32=HEAP32[((((5247508)|0))>>2)];
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248700)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248700)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248644)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248644)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248660)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248660)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_scalelast($30, $31, $32, $33, $34, $35);
      label = 21; break;
    case 21: 
      _qh_detroundoff();
      var $36=HEAP32[((((5247000)|0))>>2)];
      var $tobool38=(($36)|0)!=0;
      if ($tobool38) { label = 22; break; } else { label = 40; break; }
    case 22: 
      var $37=HEAP32[((((5247508)|0))>>2)];
      var $sub40=((($37)-(1))|0);
      var $38=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx=(($38+($sub40<<3))|0);
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp41=$39 > 8.988465674311579e+307;
      if ($cmp41) { label = 23; break; } else { label = 40; break; }
    case 23: 
      var $40=HEAP32[((((5247508)|0))>>2)];
      var $sub43=((($40)-(1))|0);
      var $41=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx44=(($41+($sub43<<3))|0);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx44)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx44)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp45=$42 < -8.988465674311579e+307;
      if ($cmp45) { label = 24; break; } else { label = 40; break; }
    case 24: 
      $i=29;
      label = 25; break;
    case 25: 
      var $43=$i;
      var $dec=((($43)-(1))|0);
      $i=$dec;
      var $tobool47=(($43)|0)!=0;
      if ($tobool47) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $44=$i;
      var $arrayidx48=((((5247192)|0)+($44<<2))|0);
      var $45=HEAP32[(($arrayidx48)>>2)];
      var $cmp49=(($45)|0)==7;
      if ($cmp49) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $46=HEAP32[((((5247008)|0))>>2)];
      var $cmp51=(($46)|0) < 0;
      if ($cmp51) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $47=HEAP32[((((5247024)|0))>>2)];
      var $tobool53=(($47)|0)!=0;
      if ($tobool53) { label = 31; break; } else { label = 29; break; }
    case 29: 
      var $48=HEAP32[((((5247408)|0))>>2)];
      var $tobool55=(($48)|0)!=0;
      if ($tobool55) { label = 31; break; } else { label = 30; break; }
    case 30: 
      label = 32; break;
    case 31: 
      label = 25; break;
    case 32: 
      var $49=$i;
      var $cmp58=(($49)|0) < 0;
      if ($cmp58) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $50=HEAP32[((((5247460)|0))>>2)];
      var $tobool60=(($50)|0)!=0;
      if ($tobool60) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $51=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($51)*(2);
      var $52=HEAP32[((((5247508)|0))>>2)];
      var $sub62=((($52)-(1))|0);
      var $53=HEAP32[((((5248592)|0))>>2)];
      var $arrayidx63=(($53+($sub62<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($arrayidx63)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx63)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[((((5247024)|0))>>2)]=1;
      label = 38; break;
    case 35: 
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub65=(-$54);
      var $mul66=($sub65)*(2);
      var $55=HEAP32[((((5247508)|0))>>2)];
      var $sub67=((($55)-(1))|0);
      var $56=HEAP32[((((5248588)|0))>>2)];
      var $arrayidx68=(($56+($sub67<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul66,HEAP32[(($arrayidx68)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx68)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $57=HEAP32[((((5247024)|0))>>2)];
      var $tobool69=(($57)|0)!=0;
      if ($tobool69) { label = 37; break; } else { label = 36; break; }
    case 36: 
      HEAP32[((((5247408)|0))>>2)]=1;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $58=HEAP32[((((5247508)|0))>>2)];
      var $59=HEAP32[(($maxpoints)>>2)];
      var $60=HEAP32[((((5247520)|0))>>2)];
      var $61=HEAP32[((((5247516)|0))>>2)];
      var $call75=_qh_initialvertices($58, $59, $60, $61);
      HEAP32[(($vertices)>>2)]=$call75;
      var $62=HEAP32[(($vertices)>>2)];
      _qh_initialhull($62);
      var $63=HEAP32[(($vertices)>>2)];
      var $64=HEAP32[((((5247520)|0))>>2)];
      var $65=HEAP32[((((5247516)|0))>>2)];
      _qh_partitionall($63, $64, $65);
      var $66=HEAP32[((((5247180)|0))>>2)];
      var $tobool76=(($66)|0)!=0;
      if ($tobool76) { label = 43; break; } else { label = 41; break; }
    case 41: 
      var $67=HEAP32[((((5247428)|0))>>2)];
      var $tobool78=(($67)|0)!=0;
      if ($tobool78) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $68=HEAP32[((((5247040)|0))>>2)];
      var $tobool80=(($68)|0)!=0;
      if ($tobool80) { label = 43; break; } else { label = 50; break; }
    case 43: 
      var $69=HEAP32[((((5247428)|0))>>2)];
      var $tobool82=(($69)|0)!=0;
      if ($tobool82) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $70=HEAP32[((((5247040)|0))>>2)];
      var $tobool84=(($70)|0)!=0;
      if ($tobool84) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $71=HEAP32[((((5248924)|0))>>2)];
      var $72=HEAP32[((((5247040)|0))>>2)];
      var $tobool86=(($72)|0)!=0;
      if ($tobool86) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $73=HEAP32[((((5247040)|0))>>2)];
      var $cond = $73;label = 48; break;
    case 47: 
      var $74=HEAP32[((((5247428)|0))>>2)];
      var $cond = $74;label = 48; break;
    case 48: 
      var $cond;
      _qh_fprintf($71, 8103, ((5250464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,HEAP32[(((tempInt)+(4))>>2)]=((5247796)|0),HEAP32[(((tempInt)+(8))>>2)]=((5247536)|0),tempInt));
      label = 49; break;
    case 49: 
      var $75=HEAP32[((((5248924)|0))>>2)];
      var $76=HEAP32[((5242996)>>2)];
      _qh_fprintf($75, 8104, ((5250292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$76,HEAP32[(((tempInt)+(4))>>2)]=((5248052)|0),tempInt));
      label = 50; break;
    case 50: 
      _qh_resetlists(0, 1);
      var $77=HEAP32[((((5248944)|0))>>2)];
      HEAP32[((((5248952)|0))>>2)]=$77;
      _qh_furthestnext();
      var $78=HEAP32[((((5247144)|0))>>2)];
      var $tobool89=(($78)|0)!=0;
      if ($tobool89) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$79,HEAP32[((((5248620)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248620)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$80,HEAP32[((((5248612)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5248612)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 52; break;
    case 52: 
      var $81=HEAP32[((((5247128)|0))>>2)];
      var $tobool92=(($81)|0)!=0;
      if ($tobool92) { label = 53; break; } else { label = 71; break; }
    case 53: 
      var $82=HEAP32[((((5247028)|0))>>2)];
      var $cmp94=(($82)|0) > 0;
      if ($cmp94) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $83=HEAP32[((((5247084)|0))>>2)];
      var $tobool96=(($83)|0)!=0;
      if ($tobool96) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $84=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($84, 6151, ((5249980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 56; break;
    case 56: 
      var $85=HEAP32[((((5247024)|0))>>2)];
      var $tobool99=(($85)|0)!=0;
      if ($tobool99) { label = 62; break; } else { label = 57; break; }
    case 57: 
      var $86=HEAP32[((((5247016)|0))>>2)];
      var $tobool101=(($86)|0)!=0;
      if ($tobool101) { label = 62; break; } else { label = 58; break; }
    case 58: 
      var $87=HEAP32[((((5247076)|0))>>2)];
      var $tobool103=(($87)|0)!=0;
      if ($tobool103) { label = 61; break; } else { label = 59; break; }
    case 59: 
      var $88=HEAP32[((((5247144)|0))>>2)];
      var $tobool105=(($88)|0)!=0;
      if ($tobool105) { label = 61; break; } else { label = 60; break; }
    case 60: 
      var $89=HEAP32[((((5247032)|0))>>2)];
      var $tobool107=(($89)|0)!=0;
      if ($tobool107) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $90=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($90, 6152, ((5249640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(1, 0, 0);
      label = 62; break;
    case 62: 
      var $91=HEAP32[((((5247028)|0))>>2)];
      var $cmp110=(($91)|0) > 0;
      if ($cmp110) { label = 63; break; } else { label = 70; break; }
    case 63: 
      var $92=HEAP32[((((5247084)|0))>>2)];
      var $tobool112=(($92)|0)!=0;
      if ($tobool112) { label = 70; break; } else { label = 64; break; }
    case 64: 
      var $93=HEAP32[((((5247032)|0))>>2)];
      var $94=HEAP32[(($vertices)>>2)];
      var $call114=_qh_isvertex($93, $94);
      var $tobool115=(($call114)|0)!=0;
      if ($tobool115) { label = 70; break; } else { label = 65; break; }
    case 65: 
      var $95=HEAP32[((((5247032)|0))>>2)];
      var $96=HEAP32[((((5248944)|0))>>2)];
      var $call117=_qh_findbestnew($95, $96, $dist, 0, $isoutside, $numpart);
      $facet=$call117;
      var $97=HEAP32[(($numpart)>>2)];
      var $98=HEAP32[(((((5243420)|0)))>>2)];
      var $add=((($98)+($97))|0);
      HEAP32[(((((5243420)|0)))>>2)]=$add;
      var $99=HEAP32[(($isoutside)>>2)];
      var $tobool118=(($99)|0)!=0;
      if ($tobool118) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $100=HEAP32[((((5248924)|0))>>2)];
      var $101=HEAP32[((((5247032)|0))>>2)];
      var $call120=_qh_pointid($101);
      _qh_fprintf($100, 6153, ((5249420)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call120,tempInt));
      _qh_errexit(1, 0, 0);
      label = 67; break;
    case 67: 
      var $102=HEAP32[((((5247032)|0))>>2)];
      var $103=$facet;
      var $call122=_qh_addpoint($102, $103, 0);
      var $tobool123=(($call122)|0)!=0;
      if ($tobool123) { label = 69; break; } else { label = 68; break; }
    case 68: 
      _qh_settempfree($vertices);
      _qh_settempfree($maxpoints);
      label = 73; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $104=HEAP32[((((5248944)|0))>>2)];
      var $call127=_qh_findgood($104, 0);
      label = 71; break;
    case 71: 
      _qh_settempfree($vertices);
      _qh_settempfree($maxpoints);
      var $105=HEAP32[((((5247040)|0))>>2)];
      var $cmp129=(($105)|0) >= 1;
      if ($cmp129) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $106=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($106, 1030, ((5304160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 73; break;
    case 73: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initbuild["X"]=1;

function _qh_initialvertices($dim, $maxpoints, $points, $numpoints) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_addr;
      var $maxpoints_addr;
      var $points_addr;
      var $numpoints_addr;
      var $point;
      var $pointp;
      var $vertices=__stackBase__;
      var $simplex=(__stackBase__)+(4);
      var $tested=(__stackBase__)+(8);
      var $randr;
      var $idx;
      var $point_i;
      var $point_n;
      var $k;
      var $nearzero=(__stackBase__)+(12);
      $dim_addr=$dim;
      $maxpoints_addr=$maxpoints;
      $points_addr=$points;
      $numpoints_addr=$numpoints;
      HEAP32[(($nearzero)>>2)]=0;
      var $0=$dim_addr;
      var $add=((($0)+(1))|0);
      var $call=_qh_settemp($add);
      HEAP32[(($vertices)>>2)]=$call;
      var $1=$dim_addr;
      var $add1=((($1)+(1))|0);
      var $call2=_qh_settemp($add1);
      HEAP32[(($simplex)>>2)]=$call2;
      var $2=HEAP32[((((5246936)|0))>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$dim_addr;
      var $4=$points_addr;
      var $5=$numpoints_addr;
      _qh_maxsimplex($3, 0, $4, $5, $simplex);
      label = 60; break;
    case 4: 
      var $6=HEAP32[((((5247368)|0))>>2)];
      var $tobool3=(($6)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 15; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $7=HEAP32[(($simplex)>>2)];
      var $call5=_qh_setsize($7);
      var $8=$dim_addr;
      var $add6=((($8)+(1))|0);
      var $cmp=(($call5)|0)!=(($add6)|0);
      if ($cmp) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $call7=_qh_rand();
      var $conv=(($call7)|0);
      $randr=$conv;
      var $9=$randr;
      var $div=($9)/(2147483647);
      $randr=$div;
      var $10=HEAP32[((((5247516)|0))>>2)];
      var $conv8=(($10)|0);
      var $11=$randr;
      var $mul=($conv8)*($11);
      var $call9=Math.floor($mul);
      var $conv10=(($call9)&-1);
      $idx=$conv10;
      label = 8; break;
    case 8: 
      var $12=HEAP32[(($simplex)>>2)];
      var $13=$idx;
      var $call12=_qh_point($13);
      var $14=$call12;
      var $call13=_qh_setin($12, $14);
      var $tobool14=(($call13)|0)!=0;
      if ($tobool14) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $15=$idx;
      var $inc=((($15)+(1))|0);
      $idx=$inc;
      var $16=$idx;
      var $17=HEAP32[((((5247516)|0))>>2)];
      var $cmp16=(($16)|0) < (($17)|0);
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$idx;
      var $cond = $18;label = 12; break;
    case 11: 
      var $cond = 0;label = 12; break;
    case 12: 
      var $cond;
      $idx=$cond;
      label = 8; break;
    case 13: 
      var $19=$idx;
      var $call18=_qh_point($19);
      var $20=$call18;
      _qh_setappend($simplex, $20);
      label = 6; break;
    case 14: 
      label = 59; break;
    case 15: 
      var $21=HEAP32[((((5247508)|0))>>2)];
      var $cmp21=(($21)|0) >= 8;
      if ($cmp21) { label = 16; break; } else { label = 57; break; }
    case 16: 
      var $22=$dim_addr;
      var $add24=((($22)+(1))|0);
      var $call25=_qh_settemp($add24);
      HEAP32[(($tested)>>2)]=$call25;
      var $23=$maxpoints_addr;
      var $e=(($23+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $24=HEAP32[(($p)>>2)];
      _qh_setappend($simplex, $24);
      var $25=$maxpoints_addr;
      var $e26=(($25+4)|0);
      var $arrayidx27=(($e26+4)|0);
      var $p28=$arrayidx27;
      var $26=HEAP32[(($p28)>>2)];
      _qh_setappend($simplex, $26);
      var $27=$dim_addr;
      var $cmp29=6 > (($27)|0);
      if ($cmp29) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $28=$dim_addr;
      var $cond34 = $28;label = 19; break;
    case 18: 
      var $cond34 = 6;label = 19; break;
    case 19: 
      var $cond34;
      var $29=$maxpoints_addr;
      var $30=$points_addr;
      var $31=$numpoints_addr;
      _qh_maxsimplex($cond34, $29, $30, $31, $simplex);
      var $32=HEAP32[(($simplex)>>2)];
      var $call35=_qh_setsize($32);
      $k=$call35;
      $point=0;
      var $33=$maxpoints_addr;
      var $tobool36=(($33)|0)!=0;
      if ($tobool36) { label = 20; break; } else { label = 35; break; }
    case 20: 
      $point_i=0;
      var $34=$maxpoints_addr;
      var $e38=(($34+4)|0);
      var $arrayidx39=(($e38)|0);
      var $p40=$arrayidx39;
      var $35=HEAP32[(($p40)>>2)];
      var $36=$35;
      $point=$36;
      var $37=$maxpoints_addr;
      var $call41=_qh_setsize($37);
      $point_n=$call41;
      label = 21; break;
    case 21: 
      var $38=$point_i;
      var $39=$point_n;
      var $cmp42=(($38)|0) < (($39)|0);
      if ($cmp42) { label = 22; break; } else { label = 34; break; }
    case 22: 
      var $40=$point_i;
      var $and=$40 & 1;
      var $tobool44=(($and)|0)!=0;
      if ($tobool44) { label = 23; break; } else { label = 32; break; }
    case 23: 
      var $41=HEAP32[(($simplex)>>2)];
      var $42=$point;
      var $43=$42;
      var $call46=_qh_setin($41, $43);
      var $tobool47=(($call46)|0)!=0;
      if ($tobool47) { label = 31; break; } else { label = 24; break; }
    case 24: 
      var $44=HEAP32[(($tested)>>2)];
      var $45=$point;
      var $46=$45;
      var $call48=_qh_setin($44, $46);
      var $tobool49=(($call48)|0)!=0;
      if ($tobool49) { label = 31; break; } else { label = 25; break; }
    case 25: 
      var $47=$point;
      var $48=HEAP32[(($simplex)>>2)];
      var $49=$k;
      var $call51=_qh_detsimplex($47, $48, $49, $nearzero);
      var $50=HEAP32[(($nearzero)>>2)];
      var $tobool52=(($50)|0)!=0;
      if ($tobool52) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $51=$point;
      var $52=$51;
      _qh_setappend($tested, $52);
      label = 30; break;
    case 27: 
      var $53=$point;
      var $54=$53;
      _qh_setappend($simplex, $54);
      var $55=$k;
      var $inc55=((($55)+(1))|0);
      $k=$inc55;
      var $56=$dim_addr;
      var $cmp56=(($inc55)|0)==(($56)|0);
      if ($cmp56) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 34; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $57=$point_i;
      var $inc62=((($57)+(1))|0);
      $point_i=$inc62;
      var $58=$maxpoints_addr;
      var $e63=(($58+4)|0);
      var $arrayidx64=(($e63+($inc62<<2))|0);
      var $p65=$arrayidx64;
      var $59=HEAP32[(($p65)>>2)];
      var $60=$59;
      $point=$60;
      label = 21; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $61=$k;
      var $62=$dim_addr;
      var $cmp68=(($61)|0)!=(($62)|0);
      if ($cmp68) { label = 37; break; } else { var $65 = 0;label = 38; break; }
    case 37: 
      var $63=$maxpoints_addr;
      var $call70=_qh_setdellast($63);
      var $64=$call70;
      $point=$64;
      var $tobool71=(($64)|0)!=0;
      var $65 = $tobool71;label = 38; break;
    case 38: 
      var $65;
      if ($65) { label = 39; break; } else { label = 46; break; }
    case 39: 
      var $66=HEAP32[(($simplex)>>2)];
      var $67=$point;
      var $68=$67;
      var $call73=_qh_setin($66, $68);
      var $tobool74=(($call73)|0)!=0;
      if ($tobool74) { label = 45; break; } else { label = 40; break; }
    case 40: 
      var $69=HEAP32[(($tested)>>2)];
      var $70=$point;
      var $71=$70;
      var $call76=_qh_setin($69, $71);
      var $tobool77=(($call76)|0)!=0;
      if ($tobool77) { label = 45; break; } else { label = 41; break; }
    case 41: 
      var $72=$point;
      var $73=HEAP32[(($simplex)>>2)];
      var $74=$k;
      var $call79=_qh_detsimplex($72, $73, $74, $nearzero);
      var $75=HEAP32[(($nearzero)>>2)];
      var $tobool80=(($75)|0)!=0;
      if ($tobool80) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $76=$point;
      var $77=$76;
      _qh_setappend($tested, $77);
      label = 44; break;
    case 43: 
      var $78=$point;
      var $79=$78;
      _qh_setappend($simplex, $79);
      var $80=$k;
      var $inc83=((($80)+(1))|0);
      $k=$inc83;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 36; break;
    case 46: 
      $idx=0;
      label = 47; break;
    case 47: 
      var $81=$k;
      var $82=$dim_addr;
      var $cmp88=(($81)|0)!=(($82)|0);
      if ($cmp88) { label = 48; break; } else { var $84 = 0;label = 49; break; }
    case 48: 
      var $83=$idx;
      var $inc91=((($83)+(1))|0);
      $idx=$inc91;
      var $call92=_qh_point($83);
      $point=$call92;
      var $tobool93=(($call92)|0)!=0;
      var $84 = $tobool93;label = 49; break;
    case 49: 
      var $84;
      if ($84) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $85=HEAP32[(($simplex)>>2)];
      var $86=$point;
      var $87=$86;
      var $call96=_qh_setin($85, $87);
      var $tobool97=(($call96)|0)!=0;
      if ($tobool97) { label = 55; break; } else { label = 51; break; }
    case 51: 
      var $88=HEAP32[(($tested)>>2)];
      var $89=$point;
      var $90=$89;
      var $call99=_qh_setin($88, $90);
      var $tobool100=(($call99)|0)!=0;
      if ($tobool100) { label = 55; break; } else { label = 52; break; }
    case 52: 
      var $91=$point;
      var $92=HEAP32[(($simplex)>>2)];
      var $93=$k;
      var $call102=_qh_detsimplex($91, $92, $93, $nearzero);
      var $94=HEAP32[(($nearzero)>>2)];
      var $tobool103=(($94)|0)!=0;
      if ($tobool103) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $95=$point;
      var $96=$95;
      _qh_setappend($simplex, $96);
      var $97=$k;
      var $inc105=((($97)+(1))|0);
      $k=$inc105;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 47; break;
    case 56: 
      _qh_settempfree($tested);
      var $98=$dim_addr;
      var $99=$maxpoints_addr;
      var $100=$points_addr;
      var $101=$numpoints_addr;
      _qh_maxsimplex($98, $99, $100, $101, $simplex);
      label = 58; break;
    case 57: 
      var $102=$dim_addr;
      var $103=$maxpoints_addr;
      var $104=$points_addr;
      var $105=$numpoints_addr;
      _qh_maxsimplex($102, $103, $104, $105, $simplex);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      $point=0;
      var $106=HEAP32[(($simplex)>>2)];
      var $tobool113=(($106)|0)!=0;
      if ($tobool113) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $107=HEAP32[(($simplex)>>2)];
      var $e115=(($107+4)|0);
      var $arrayidx116=(($e115)|0);
      var $p117=$arrayidx116;
      var $108=$p117;
      $pointp=$108;
      label = 62; break;
    case 62: 
      var $109=$pointp;
      var $incdec_ptr=(($109+4)|0);
      $pointp=$incdec_ptr;
      var $110=HEAP32[(($109)>>2)];
      $point=$110;
      var $tobool119=(($110)|0)!=0;
      if ($tobool119) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $111=$point;
      var $call121=_qh_newvertex($111);
      var $112=$call121;
      _qh_setaddnth($vertices, 0, $112);
      label = 62; break;
    case 64: 
      label = 65; break;
    case 65: 
      _qh_settempfree($simplex);
      var $113=HEAP32[(($vertices)>>2)];
      STACKTOP = __stackBase__;
      return $113;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initialvertices["X"]=1;

function _qh_initialhull($vertices) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vertices_addr;
      var $facet;
      var $firstfacet;
      var $neighbor;
      var $neighborp;
      var $dist=__stackBase__;
      var $angle;
      var $minangle;
      var $k;
      var $diff=(__stackBase__)+(8);
      $vertices_addr=$vertices;
      $minangle=1.7976931348623157e+308;
      var $0=$vertices_addr;
      _qh_createsimplex($0);
      _qh_resetlists(0, 1);
      var $1=HEAP32[((((5248944)|0))>>2)];
      HEAP32[((((5248952)|0))>>2)]=$1;
      var $2=$vertices_addr;
      var $call=_qh_getcenter($2);
      HEAP32[((((5248928)|0))>>2)]=$call;
      var $3=HEAP32[((((5248944)|0))>>2)];
      $firstfacet=$3;
      var $4=$firstfacet;
      _qh_setfacetplane($4);
      var $5=HEAP32[(((((5244252)|0)))>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(((((5244252)|0)))>>2)]=$inc;
      var $6=HEAP32[((((5248928)|0))>>2)];
      var $7=$firstfacet;
      _qh_distplane($6, $7, $dist);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$8 > 0;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=HEAP32[((((5248944)|0))>>2)];
      $facet=$9;
      label = 4; break;
    case 4: 
      var $10=$facet;
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 5; break; } else { var $13 = 0;label = 6; break; }
    case 5: 
      var $11=$facet;
      var $next=(($11+44)|0);
      var $12=HEAP32[(($next)>>2)];
      var $tobool1=(($12)|0)!=0;
      var $13 = $tobool1;label = 6; break;
    case 6: 
      var $13;
      if ($13) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $14=$facet;
      var $15=$14;
      var $bf_field_offs=(($15+76)|0);
      var $16=$bf_field_offs;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 12;
      var $bf_clear=$18 & 1;
      var $xor=$bf_clear ^ 1;
      var $bf_value=$xor & 1;
      var $19=$14;
      var $bf_field_offs2=(($19+76)|0);
      var $20=$bf_field_offs2;
      var $21=$bf_value & 1;
      var $22=$21 << 12;
      var $23=HEAP32[(($20)>>2)];
      var $24=$23 & -4097;
      var $25=$24 | $22;
      HEAP32[(($20)>>2)]=$25;
      label = 8; break;
    case 8: 
      var $26=$facet;
      var $next3=(($26+44)|0);
      var $27=HEAP32[(($next3)>>2)];
      $facet=$27;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $28=HEAP32[((((5248944)|0))>>2)];
      $facet=$28;
      label = 11; break;
    case 11: 
      var $29=$facet;
      var $tobool5=(($29)|0)!=0;
      if ($tobool5) { label = 12; break; } else { var $32 = 0;label = 13; break; }
    case 12: 
      var $30=$facet;
      var $next7=(($30+44)|0);
      var $31=HEAP32[(($next7)>>2)];
      var $tobool8=(($31)|0)!=0;
      var $32 = $tobool8;label = 13; break;
    case 13: 
      var $32;
      if ($32) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$facet;
      _qh_setfacetplane($33);
      label = 15; break;
    case 15: 
      var $34=$facet;
      var $next12=(($34+44)|0);
      var $35=HEAP32[(($next12)>>2)];
      $facet=$35;
      label = 11; break;
    case 16: 
      var $36=HEAP32[((((5248944)|0))>>2)];
      $facet=$36;
      label = 17; break;
    case 17: 
      var $37=$facet;
      var $tobool15=(($37)|0)!=0;
      if ($tobool15) { label = 18; break; } else { var $40 = 0;label = 19; break; }
    case 18: 
      var $38=$facet;
      var $next17=(($38+44)|0);
      var $39=HEAP32[(($next17)>>2)];
      var $tobool18=(($39)|0)!=0;
      var $40 = $tobool18;label = 19; break;
    case 19: 
      var $40;
      if ($40) { label = 20; break; } else { label = 32; break; }
    case 20: 
      var $41=$facet;
      var $call21=_qh_checkflipped($41, 0, 1);
      var $tobool22=(($call21)|0)!=0;
      if ($tobool22) { label = 30; break; } else { label = 21; break; }
    case 21: 
      var $42=HEAP32[((((5247040)|0))>>2)];
      var $cmp24=(($42)|0) >= 1;
      if ($cmp24) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $43=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($43, 1031, ((5303736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 23; break;
    case 23: 
      var $44=$facet;
      var $45=$44;
      var $bf_field_offs27=(($45+76)|0);
      var $46=$bf_field_offs27;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 & -65537;
      HEAP32[(($46)>>2)]=$48;
      var $49=HEAP32[((((5248944)|0))>>2)];
      $facet=$49;
      label = 24; break;
    case 24: 
      var $50=$facet;
      var $tobool29=(($50)|0)!=0;
      if ($tobool29) { label = 25; break; } else { var $53 = 0;label = 26; break; }
    case 25: 
      var $51=$facet;
      var $next31=(($51+44)|0);
      var $52=HEAP32[(($next31)>>2)];
      var $tobool32=(($52)|0)!=0;
      var $53 = $tobool32;label = 26; break;
    case 26: 
      var $53;
      if ($53) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $54=$facet;
      var $55=$54;
      var $bf_field_offs35=(($55+76)|0);
      var $56=$bf_field_offs35;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 12;
      var $bf_clear36=$58 & 1;
      var $xor37=$bf_clear36 ^ 1;
      var $bf_value38=$xor37 & 1;
      var $59=$54;
      var $bf_field_offs39=(($59+76)|0);
      var $60=$bf_field_offs39;
      var $61=$bf_value38 & 1;
      var $62=$61 << 12;
      var $63=HEAP32[(($60)>>2)];
      var $64=$63 & -4097;
      var $65=$64 | $62;
      HEAP32[(($60)>>2)]=$65;
      var $66=$facet;
      var $call40=_qh_orientoutside($66);
      label = 28; break;
    case 28: 
      var $67=$facet;
      var $next42=(($67+44)|0);
      var $68=HEAP32[(($next42)>>2)];
      $facet=$68;
      label = 24; break;
    case 29: 
      label = 32; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $69=$facet;
      var $next46=(($69+44)|0);
      var $70=HEAP32[(($next46)>>2)];
      $facet=$70;
      label = 17; break;
    case 32: 
      var $71=HEAP32[((((5248944)|0))>>2)];
      $facet=$71;
      label = 33; break;
    case 33: 
      var $72=$facet;
      var $tobool49=(($72)|0)!=0;
      if ($tobool49) { label = 34; break; } else { var $75 = 0;label = 35; break; }
    case 34: 
      var $73=$facet;
      var $next51=(($73+44)|0);
      var $74=HEAP32[(($next51)>>2)];
      var $tobool52=(($74)|0)!=0;
      var $75 = $tobool52;label = 35; break;
    case 35: 
      var $75;
      if ($75) { label = 36; break; } else { label = 53; break; }
    case 36: 
      var $76=$facet;
      var $call55=_qh_checkflipped($76, 0, 0);
      var $tobool56=(($call55)|0)!=0;
      if ($tobool56) { label = 44; break; } else { label = 37; break; }
    case 37: 
      var $77=HEAP32[((((5247000)|0))>>2)];
      var $tobool58=(($77)|0)!=0;
      if ($tobool58) { label = 38; break; } else { label = 43; break; }
    case 38: 
      var $78=HEAP32[((((5246960)|0))>>2)];
      var $tobool59=(($78)|0)!=0;
      if ($tobool59) { label = 43; break; } else { label = 39; break; }
    case 39: 
      var $79=HEAP32[((((5247460)|0))>>2)];
      var $tobool61=(($79)|0)!=0;
      if ($tobool61) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $80=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($80, 6240, ((5303388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 41: 
      var $81=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($81, 6239, ((5303060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 42: 
      _qh_errexit(1, 0, 0);
      label = 43; break;
    case 43: 
      _qh_precision(((5302856)|0));
      var $82=HEAP32[((((5248924)|0))>>2)];
      var $83=$facet;
      var $id=(($83+72)|0);
      var $84=HEAP32[(($id)>>2)];
      _qh_fprintf($82, 6154, ((5302504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$84,tempInt));
      var $85=$facet;
      _qh_errexit(2, $85, 0);
      label = 44; break;
    case 44: 
      $neighbor=0;
      var $86=$facet;
      var $neighbors=(($86+56)|0);
      var $87=HEAP32[(($neighbors)>>2)];
      var $tobool66=(($87)|0)!=0;
      if ($tobool66) { label = 45; break; } else { label = 51; break; }
    case 45: 
      var $88=$facet;
      var $neighbors68=(($88+56)|0);
      var $89=HEAP32[(($neighbors68)>>2)];
      var $e=(($89+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $90=$p;
      $neighborp=$90;
      label = 46; break;
    case 46: 
      var $91=$neighborp;
      var $incdec_ptr=(($91+4)|0);
      $neighborp=$incdec_ptr;
      var $92=HEAP32[(($91)>>2)];
      $neighbor=$92;
      var $tobool70=(($92)|0)!=0;
      if ($tobool70) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $93=$facet;
      var $normal=(($93+24)|0);
      var $94=HEAP32[(($normal)>>2)];
      var $95=$neighbor;
      var $normal72=(($95+24)|0);
      var $96=HEAP32[(($normal72)>>2)];
      var $call73=_qh_getangle($94, $96);
      $angle=$call73;
      var $97=$minangle;
      var $98=$angle;
      var $cmp74=$97 > $98;
      if ($cmp74) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $99=$angle;
      $minangle=$99;
      label = 49; break;
    case 49: 
      label = 46; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $100=$facet;
      var $next80=(($100+44)|0);
      var $101=HEAP32[(($next80)>>2)];
      $facet=$101;
      label = 33; break;
    case 53: 
      var $102=$minangle;
      var $cmp82=$102 < -0.99999999;
      if ($cmp82) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $103=HEAP32[((((5247116)|0))>>2)];
      var $tobool84=(($103)|0)!=0;
      if ($tobool84) { label = 60; break; } else { label = 55; break; }
    case 55: 
      var $104=$minangle;
      var $add=($104)+(1);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($diff)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($diff)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[((((5248708)|0))>>2)]=1;
      _qh_option(((5302360)|0), 0, $diff);
      var $105=$minangle;
      var $cmp86=$105 < -0.999999999999999;
      if ($cmp86) { label = 56; break; } else { label = 59; break; }
    case 56: 
      var $106=HEAP32[((((5247380)|0))>>2)];
      var $tobool88=(($106)|0)!=0;
      if ($tobool88) { label = 59; break; } else { label = 57; break; }
    case 57: 
      var $107=HEAP32[((((5247188)|0))>>2)];
      var $tobool90=(($107)|0)!=0;
      if ($tobool90) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $108=HEAP32[((((5248924)|0))>>2)];
      var $109=$minangle;
      _qh_printhelp_narrowhull($108, $109);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $110=HEAP32[((((5247508)|0))>>2)];
      var $add94=((($110)+(1))|0);
      HEAP32[(((((5244380)|0)))>>2)]=$add94;
      var $111=HEAP32[((((5248944)|0))>>2)];
      _qh_checkpolygon($111);
      var $112=HEAP32[((((5248944)|0))>>2)];
      _qh_checkconvex($112, 1);
      var $113=HEAP32[((((5247040)|0))>>2)];
      var $cmp95=(($113)|0) >= 1;
      if ($cmp95) { label = 61; break; } else { label = 66; break; }
    case 61: 
      var $114=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($114, 8105, ((5302104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $k=0;
      label = 62; break;
    case 62: 
      var $115=$k;
      var $116=HEAP32[((((5247508)|0))>>2)];
      var $cmp98=(($115)|0) < (($116)|0);
      if ($cmp98) { label = 63; break; } else { label = 65; break; }
    case 63: 
      var $117=HEAP32[((((5248924)|0))>>2)];
      var $118=$k;
      var $119=HEAP32[((((5248928)|0))>>2)];
      var $arrayidx100=(($119+($118<<3))|0);
      var $120=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx100)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx100)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($117, 8106, ((5301900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$120,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 64; break;
    case 64: 
      var $121=$k;
      var $inc102=((($121)+(1))|0);
      $k=$inc102;
      label = 62; break;
    case 65: 
      var $122=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($122, 8107, ((5301776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 66; break;
    case 66: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initialhull["X"]=1;


function _qh_resetlists($stats, $resetVisible) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $stats_addr;
      var $resetVisible_addr;
      var $vertex;
      var $newfacet;
      var $visible;
      var $totnew;
      var $totver;
      $stats_addr=$stats;
      $resetVisible_addr=$resetVisible;
      $totnew=0;
      $totver=0;
      var $0=$stats_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 20; break; }
    case 3: 
      var $1=HEAP32[((((5248992)|0))>>2)];
      $vertex=$1;
      label = 4; break;
    case 4: 
      var $2=$vertex;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $5 = 0;label = 6; break; }
    case 5: 
      var $3=$vertex;
      var $next=(($3)|0);
      var $4=HEAP32[(($next)>>2)];
      var $tobool2=(($4)|0)!=0;
      var $5 = $tobool2;label = 6; break;
    case 6: 
      var $5;
      if ($5) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $6=$totver;
      var $inc=((($6)+(1))|0);
      $totver=$inc;
      label = 8; break;
    case 8: 
      var $7=$vertex;
      var $next3=(($7)|0);
      var $8=HEAP32[(($next3)>>2)];
      $vertex=$8;
      label = 4; break;
    case 9: 
      var $9=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$9;
      label = 10; break;
    case 10: 
      var $10=$newfacet;
      var $tobool5=(($10)|0)!=0;
      if ($tobool5) { label = 11; break; } else { var $13 = 0;label = 12; break; }
    case 11: 
      var $11=$newfacet;
      var $next7=(($11+44)|0);
      var $12=HEAP32[(($next7)>>2)];
      var $tobool8=(($12)|0)!=0;
      var $13 = $tobool8;label = 12; break;
    case 12: 
      var $13;
      if ($13) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $14=$totnew;
      var $inc11=((($14)+(1))|0);
      $totnew=$inc11;
      label = 14; break;
    case 14: 
      var $15=$newfacet;
      var $next13=(($15+44)|0);
      var $16=HEAP32[(($next13)>>2)];
      $newfacet=$16;
      label = 10; break;
    case 15: 
      var $17=$totver;
      var $18=HEAP32[(((((5244756)|0)))>>2)];
      var $add=((($18)+($17))|0);
      HEAP32[(((((5244756)|0)))>>2)]=$add;
      var $19=HEAP32[(((((5244764)|0)))>>2)];
      var $20=$totver;
      var $cmp=(($19)|0) < (($20)|0);
      if ($cmp) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $21=$totver;
      HEAP32[(((((5244764)|0)))>>2)]=$21;
      label = 17; break;
    case 17: 
      var $22=$totnew;
      var $23=HEAP32[(((((5244116)|0)))>>2)];
      var $add16=((($23)+($22))|0);
      HEAP32[(((((5244116)|0)))>>2)]=$add16;
      var $24=HEAP32[(((((5244124)|0)))>>2)];
      var $25=$totnew;
      var $cmp17=(($24)|0) < (($25)|0);
      if ($cmp17) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $26=$totnew;
      HEAP32[(((((5244124)|0)))>>2)]=$26;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $27=HEAP32[((((5248992)|0))>>2)];
      $vertex=$27;
      label = 21; break;
    case 21: 
      var $28=$vertex;
      var $tobool22=(($28)|0)!=0;
      if ($tobool22) { label = 22; break; } else { var $31 = 0;label = 23; break; }
    case 22: 
      var $29=$vertex;
      var $next24=(($29)|0);
      var $30=HEAP32[(($next24)>>2)];
      var $tobool25=(($30)|0)!=0;
      var $31 = $tobool25;label = 23; break;
    case 23: 
      var $31;
      if ($31) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $32=$vertex;
      var $33=$32;
      var $bf_field_offs=(($33+20)|0);
      var $34=$bf_field_offs;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 2147483647;
      HEAP32[(($34)>>2)]=$36;
      label = 25; break;
    case 25: 
      var $37=$vertex;
      var $next29=(($37)|0);
      var $38=HEAP32[(($next29)>>2)];
      $vertex=$38;
      label = 21; break;
    case 26: 
      HEAP32[((((5248992)|0))>>2)]=0;
      var $39=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$39;
      label = 27; break;
    case 27: 
      var $40=$newfacet;
      var $tobool32=(($40)|0)!=0;
      if ($tobool32) { label = 28; break; } else { var $43 = 0;label = 29; break; }
    case 28: 
      var $41=$newfacet;
      var $next34=(($41+44)|0);
      var $42=HEAP32[(($next34)>>2)];
      var $tobool35=(($42)|0)!=0;
      var $43 = $tobool35;label = 29; break;
    case 29: 
      var $43;
      if ($43) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $44=$newfacet;
      var $45=$44;
      var $bf_field_offs38=(($45+76)|0);
      var $46=$bf_field_offs38;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 & -1025;
      HEAP32[(($46)>>2)]=$48;
      label = 31; break;
    case 31: 
      var $49=$newfacet;
      var $next40=(($49+44)|0);
      var $50=HEAP32[(($next40)>>2)];
      $newfacet=$50;
      label = 27; break;
    case 32: 
      HEAP32[((((5248956)|0))>>2)]=0;
      var $51=$resetVisible_addr;
      var $tobool42=(($51)|0)!=0;
      if ($tobool42) { label = 33; break; } else { label = 40; break; }
    case 33: 
      var $52=HEAP32[((((5248960)|0))>>2)];
      $visible=$52;
      label = 34; break;
    case 34: 
      var $53=$visible;
      var $tobool45=(($53)|0)!=0;
      if ($tobool45) { label = 35; break; } else { var $59 = 0;label = 36; break; }
    case 35: 
      var $54=$visible;
      var $55=$54;
      var $bf_field_offs47=(($55+76)|0);
      var $56=$bf_field_offs47;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 >>> 11;
      var $bf_clear=$58 & 1;
      var $tobool48=(($bf_clear)|0)!=0;
      var $59 = $tobool48;label = 36; break;
    case 36: 
      var $59;
      if ($59) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $60=$visible;
      var $f=(($60+28)|0);
      var $replace=$f;
      HEAP32[(($replace)>>2)]=0;
      var $61=$visible;
      var $62=$61;
      var $bf_field_offs51=(($62+76)|0);
      var $63=$bf_field_offs51;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & -2049;
      HEAP32[(($63)>>2)]=$65;
      label = 38; break;
    case 38: 
      var $66=$visible;
      var $next53=(($66+44)|0);
      var $67=HEAP32[(($next53)>>2)];
      $visible=$67;
      label = 34; break;
    case 39: 
      HEAP32[((((5248964)|0))>>2)]=0;
      label = 40; break;
    case 40: 
      HEAP32[((((5248960)|0))>>2)]=0;
      HEAP32[((((5249092)|0))>>2)]=0;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_resetlists["X"]=1;

function _qh_makenewfacets($point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_addr;
      var $visible;
      var $newfacet;
      var $newfacet2;
      var $neighbor;
      var $neighborp;
      var $apex;
      var $numnew=__stackBase__;
      $point_addr=$point;
      $newfacet=0;
      $newfacet2=0;
      HEAP32[(($numnew)>>2)]=0;
      var $0=HEAP32[((((5248948)|0))>>2)];
      HEAP32[((((5248956)|0))>>2)]=$0;
      var $1=HEAP32[((((5248988)|0))>>2)];
      HEAP32[((((5248992)|0))>>2)]=$1;
      var $2=$point_addr;
      var $call=_qh_newvertex($2);
      $apex=$call;
      var $3=$apex;
      _qh_appendvertex($3);
      var $4=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($4)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $5=HEAP32[((((5247128)|0))>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      HEAP32[((((5249092)|0))>>2)]=1;
      label = 4; break;
    case 4: 
      var $6=HEAP32[((((5248960)|0))>>2)];
      $visible=$6;
      label = 5; break;
    case 5: 
      var $7=$visible;
      var $tobool1=(($7)|0)!=0;
      if ($tobool1) { label = 6; break; } else { var $13 = 0;label = 7; break; }
    case 6: 
      var $8=$visible;
      var $9=$8;
      var $bf_field_offs=(($9+76)|0);
      var $10=$bf_field_offs;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 11;
      var $bf_clear=$12 & 1;
      var $tobool2=(($bf_clear)|0)!=0;
      var $13 = $tobool2;label = 7; break;
    case 7: 
      var $13;
      if ($13) { label = 8; break; } else { label = 26; break; }
    case 8: 
      $neighbor=0;
      var $14=$visible;
      var $neighbors=(($14+56)|0);
      var $15=HEAP32[(($neighbors)>>2)];
      var $tobool3=(($15)|0)!=0;
      if ($tobool3) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $16=$visible;
      var $neighbors5=(($16+56)|0);
      var $17=HEAP32[(($neighbors5)>>2)];
      var $e=(($17+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $18=$p;
      $neighborp=$18;
      label = 10; break;
    case 10: 
      var $19=$neighborp;
      var $incdec_ptr=(($19+4)|0);
      $neighborp=$incdec_ptr;
      var $20=HEAP32[(($19)>>2)];
      $neighbor=$20;
      var $tobool7=(($20)|0)!=0;
      if ($tobool7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=$neighbor;
      var $22=$21;
      var $bf_field_offs9=(($22+76)|0);
      var $23=$bf_field_offs9;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & -16385;
      HEAP32[(($23)>>2)]=$25;
      label = 10; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$visible;
      var $ridges=(($26+52)|0);
      var $27=HEAP32[(($ridges)>>2)];
      var $tobool11=(($27)|0)!=0;
      if ($tobool11) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=HEAP32[((((5249156)|0))>>2)];
      var $29=$visible;
      var $visitid=(($29+68)|0);
      HEAP32[(($visitid)>>2)]=$28;
      var $30=$visible;
      var $31=$apex;
      var $call13=_qh_makenew_nonsimplicial($30, $31, $numnew);
      $newfacet2=$call13;
      label = 15; break;
    case 15: 
      var $32=$visible;
      var $33=$32;
      var $bf_field_offs15=(($33+76)|0);
      var $34=$bf_field_offs15;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 >>> 13;
      var $bf_clear16=$36 & 1;
      var $tobool17=(($bf_clear16)|0)!=0;
      if ($tobool17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $37=$visible;
      var $38=$apex;
      var $call19=_qh_makenew_simplicial($37, $38, $numnew);
      $newfacet=$call19;
      label = 17; break;
    case 17: 
      var $39=HEAP32[((((5247128)|0))>>2)];
      var $tobool21=(($39)|0)!=0;
      if ($tobool21) { label = 24; break; } else { label = 18; break; }
    case 18: 
      var $40=$newfacet2;
      var $tobool23=(($40)|0)!=0;
      if ($tobool23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $41=$newfacet2;
      $newfacet=$41;
      label = 20; break;
    case 20: 
      var $42=$newfacet;
      var $tobool26=(($42)|0)!=0;
      if ($tobool26) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $43=$newfacet;
      var $44=$visible;
      var $f=(($44+28)|0);
      var $replace=$f;
      HEAP32[(($replace)>>2)]=$43;
      label = 23; break;
    case 22: 
      var $45=HEAP32[(((((5243820)|0)))>>2)];
      var $inc28=((($45)+(1))|0);
      HEAP32[(((((5243820)|0)))>>2)]=$inc28;
      label = 23; break;
    case 23: 
      var $46=$visible;
      var $neighbors30=(($46+56)|0);
      var $47=HEAP32[(($neighbors30)>>2)];
      var $e31=(($47+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      HEAP32[(($p33)>>2)]=0;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $48=$visible;
      var $next=(($48+44)|0);
      var $49=HEAP32[(($next)>>2)];
      $visible=$49;
      label = 5; break;
    case 26: 
      var $50=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($50)|0) >= 1;
      if ($cmp) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=HEAP32[(($numnew)>>2)];
      var $53=$point_addr;
      var $call37=_qh_pointid($53);
      _qh_fprintf($51, 1032, ((5301504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$52,HEAP32[(((tempInt)+(4))>>2)]=$call37,tempInt));
      label = 28; break;
    case 28: 
      var $54=HEAP32[((((5247040)|0))>>2)];
      var $cmp39=(($54)|0) >= 4;
      if ($cmp39) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $55=HEAP32[((((5248956)|0))>>2)];
      _qh_printfacetlist($55, 0, 1);
      label = 30; break;
    case 30: 
      var $56=$apex;
      STACKTOP = __stackBase__;
      return $56;
    default: assert(0, "bad label: " + label);
  }

}
_qh_makenewfacets["X"]=1;

function _qh_matchduplicates($atfacet, $atskip, $hashsize, $hashcount) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $atfacet_addr;
      var $atskip_addr;
      var $hashsize_addr;
      var $hashcount_addr;
      var $same=__stackBase__;
      var $ismatch;
      var $hash;
      var $scan;
      var $facet;
      var $newfacet;
      var $maxmatch;
      var $maxmatch2;
      var $nextfacet;
      var $skip=(__stackBase__)+(4);
      var $newskip;
      var $nextskip;
      var $maxskip;
      var $maxskip2;
      var $makematch;
      var $maxdist;
      var $mindist;
      var $dist2;
      var $low=(__stackBase__)+(8);
      var $high=(__stackBase__)+(16);
      $atfacet_addr=$atfacet;
      $atskip_addr=$atskip;
      $hashsize_addr=$hashsize;
      $hashcount_addr=$hashcount;
      $maxmatch=0;
      $maxmatch2=0;
      $nextskip=0;
      $maxskip=0;
      $maxskip2=0;
      $maxdist=-1.7976931348623157e+308;
      var $0=$hashsize_addr;
      var $1=$atfacet_addr;
      var $vertices=(($1+48)|0);
      var $2=HEAP32[(($vertices)>>2)];
      var $3=HEAP32[((((5247508)|0))>>2)];
      var $4=$atskip_addr;
      var $5=$atfacet_addr;
      var $vertices1=(($5+48)|0);
      var $6=HEAP32[(($vertices1)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e+($4<<2))|0);
      var $p=$arrayidx;
      var $7=HEAP32[(($p)>>2)];
      var $call=_qh_gethash($0, $2, $3, 1, $7);
      $hash=$call;
      var $8=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($8)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=HEAP32[((((5248924)|0))>>2)];
      var $10=$atfacet_addr;
      var $id=(($10+72)|0);
      var $11=HEAP32[(($id)>>2)];
      var $12=$atskip_addr;
      var $13=$hash;
      var $14=$hashcount_addr;
      var $15=HEAP32[(($14)>>2)];
      _qh_fprintf($9, 2046, ((5301212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,HEAP32[(((tempInt)+(8))>>2)]=$13,HEAP32[(((tempInt)+(12))>>2)]=$15,tempInt));
      label = 4; break;
    case 4: 
      $makematch=0;
      label = 5; break;
    case 5: 
      var $16=$makematch;
      var $cmp2=(($16)|0) < 2;
      if ($cmp2) { label = 6; break; } else { label = 61; break; }
    case 6: 
      var $17=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($17)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      var $18=$atfacet_addr;
      $newfacet=$18;
      var $19=$atskip_addr;
      $newskip=$19;
      label = 7; break;
    case 7: 
      var $20=$newfacet;
      var $tobool=(($20)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 51; break; }
    case 8: 
      var $21=HEAP32[(((((5243788)|0)))>>2)];
      var $inc5=((($21)+(1))|0);
      HEAP32[(((((5243788)|0)))>>2)]=$inc5;
      $nextfacet=0;
      var $22=HEAP32[((((5249156)|0))>>2)];
      var $23=$newfacet;
      var $visitid=(($23+68)|0);
      HEAP32[(($visitid)>>2)]=$22;
      var $24=$hash;
      $scan=$24;
      label = 9; break;
    case 9: 
      var $25=$scan;
      var $26=HEAP32[((((5249180)|0))>>2)];
      var $e7=(($26+4)|0);
      var $arrayidx8=(($e7+($25<<2))|0);
      var $p9=$arrayidx8;
      var $27=HEAP32[(($p9)>>2)];
      var $28=$27;
      $facet=$28;
      var $tobool10=(($28)|0)!=0;
      if ($tobool10) { label = 10; break; } else { label = 49; break; }
    case 10: 
      var $29=$facet;
      var $30=$29;
      var $bf_field_offs=(($30+76)|0);
      var $31=$bf_field_offs;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 21;
      var $bf_clear=$33 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $34=$facet;
      var $visitid13=(($34+68)|0);
      var $35=HEAP32[(($visitid13)>>2)];
      var $36=HEAP32[((((5249156)|0))>>2)];
      var $cmp14=(($35)|0)==(($36)|0);
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 45; break;
    case 13: 
      var $37=HEAP32[(((((5243812)|0)))>>2)];
      var $inc17=((($37)+(1))|0);
      HEAP32[(((((5243812)|0)))>>2)]=$inc17;
      var $38=$newfacet;
      var $vertices18=(($38+48)|0);
      var $39=HEAP32[(($vertices18)>>2)];
      var $40=$newskip;
      var $41=$facet;
      var $vertices19=(($41+48)|0);
      var $42=HEAP32[(($vertices19)>>2)];
      var $call20=_qh_matchvertices(1, $39, $40, $42, $skip, $same);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { label = 14; break; } else { label = 40; break; }
    case 14: 
      var $43=HEAP32[(($same)>>2)];
      var $44=$newfacet;
      var $45=$44;
      var $bf_field_offs23=(($45+76)|0);
      var $46=$bf_field_offs23;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 >>> 12;
      var $bf_clear24=$48 & 1;
      var $49=$facet;
      var $50=$49;
      var $bf_field_offs25=(($50+76)|0);
      var $51=$bf_field_offs25;
      var $52=HEAP32[(($51)>>2)];
      var $53=$52 >>> 12;
      var $bf_clear26=$53 & 1;
      var $xor=$bf_clear24 ^ $bf_clear26;
      var $cmp27=(($43)|0)==(($xor)|0);
      var $conv=(($cmp27)&1);
      $ismatch=$conv;
      var $54=HEAP32[(($skip)>>2)];
      var $55=$facet;
      var $neighbors=(($55+56)|0);
      var $56=HEAP32[(($neighbors)>>2)];
      var $e28=(($56+4)|0);
      var $arrayidx29=(($e28+($54<<2))|0);
      var $p30=$arrayidx29;
      var $57=HEAP32[(($p30)>>2)];
      var $58=$57;
      var $cmp31=(($58)|0)!=1;
      if ($cmp31) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $59=$makematch;
      var $tobool34=(($59)|0)!=0;
      if ($tobool34) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $60=HEAP32[((((5248924)|0))>>2)];
      var $61=$facet;
      var $id36=(($61+72)|0);
      var $62=HEAP32[(($id36)>>2)];
      var $63=HEAP32[(($skip)>>2)];
      var $64=$newfacet;
      var $id37=(($64+72)|0);
      var $65=HEAP32[(($id37)>>2)];
      var $66=$newskip;
      var $67=$hash;
      _qh_fprintf($60, 6155, ((5300916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$62,HEAP32[(((tempInt)+(4))>>2)]=$63,HEAP32[(((tempInt)+(8))>>2)]=$65,HEAP32[(((tempInt)+(12))>>2)]=$66,HEAP32[(((tempInt)+(16))>>2)]=$67,tempInt));
      var $68=$facet;
      var $69=$newfacet;
      _qh_errexit2(5, $68, $69);
      label = 17; break;
    case 17: 
      label = 39; break;
    case 18: 
      var $70=$ismatch;
      var $tobool39=(($70)|0)!=0;
      if ($tobool39) { label = 19; break; } else { label = 28; break; }
    case 19: 
      var $71=$makematch;
      var $tobool40=(($71)|0)!=0;
      if ($tobool40) { label = 20; break; } else { label = 28; break; }
    case 20: 
      var $72=$newskip;
      var $73=$newfacet;
      var $neighbors42=(($73+56)|0);
      var $74=HEAP32[(($neighbors42)>>2)];
      var $e43=(($74+4)|0);
      var $arrayidx44=(($e43+($72<<2))|0);
      var $p45=$arrayidx44;
      var $75=HEAP32[(($p45)>>2)];
      var $76=$75;
      var $cmp46=(($76)|0)==1;
      if ($cmp46) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $77=$newfacet;
      var $78=$77;
      var $79=HEAP32[(($skip)>>2)];
      var $80=$facet;
      var $neighbors49=(($80+56)|0);
      var $81=HEAP32[(($neighbors49)>>2)];
      var $e50=(($81+4)|0);
      var $arrayidx51=(($e50+($79<<2))|0);
      var $p52=$arrayidx51;
      HEAP32[(($p52)>>2)]=$78;
      var $82=$newfacet;
      var $83=$82;
      var $bf_field_offs53=(($83+76)|0);
      var $84=$bf_field_offs53;
      var $85=HEAP32[(($84)>>2)];
      var $86=$85 >>> 9;
      var $bf_clear54=$86 & 1;
      var $tobool55=(($bf_clear54)|0)!=0;
      if ($tobool55) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $87=$facet;
      var $88=$87;
      var $89=$newskip;
      var $90=$newfacet;
      var $neighbors57=(($90+56)|0);
      var $91=HEAP32[(($neighbors57)>>2)];
      var $e58=(($91+4)|0);
      var $arrayidx59=(($e58+($89<<2))|0);
      var $p60=$arrayidx59;
      HEAP32[(($p60)>>2)]=$88;
      label = 24; break;
    case 23: 
      var $92=$newskip;
      var $93=$newfacet;
      var $neighbors62=(($93+56)|0);
      var $94=HEAP32[(($neighbors62)>>2)];
      var $e63=(($94+4)|0);
      var $arrayidx64=(($e63+($92<<2))|0);
      var $p65=$arrayidx64;
      HEAP32[(($p65)>>2)]=2;
      label = 24; break;
    case 24: 
      var $95=$hashcount_addr;
      var $96=HEAP32[(($95)>>2)];
      var $sub=((($96)-(2))|0);
      HEAP32[(($95)>>2)]=$sub;
      var $97=HEAP32[((((5247040)|0))>>2)];
      var $cmp67=(($97)|0) >= 4;
      if ($cmp67) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $98=HEAP32[((((5248924)|0))>>2)];
      var $99=$facet;
      var $id70=(($99+72)|0);
      var $100=HEAP32[(($id70)>>2)];
      var $101=HEAP32[(($skip)>>2)];
      var $102=$newfacet;
      var $id71=(($102+72)|0);
      var $103=HEAP32[(($id71)>>2)];
      var $104=$newskip;
      _qh_fprintf($98, 4059, ((5300712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$100,HEAP32[(((tempInt)+(4))>>2)]=$101,HEAP32[(((tempInt)+(8))>>2)]=$103,HEAP32[(((tempInt)+(12))>>2)]=$104,tempInt));
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 38; break;
    case 28: 
      var $105=$ismatch;
      var $tobool75=(($105)|0)!=0;
      if ($tobool75) { label = 29; break; } else { label = 36; break; }
    case 29: 
      var $106=$facet;
      var $107=$newfacet;
      var $call77=_qh_getdistance($106, $107, $low, $high);
      $mindist=$call77;
      var $108=$newfacet;
      var $109=$facet;
      var $call78=_qh_getdistance($108, $109, $low, $high);
      $dist2=$call78;
      var $110=$mindist;
      var $111=$dist2;
      var $cmp79=$110 > $111;
      if ($cmp79) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $112=$dist2;
      $mindist=$112;
      label = 31; break;
    case 31: 
      var $113=$mindist;
      var $114=$maxdist;
      var $cmp83=$113 > $114;
      if ($cmp83) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $115=$mindist;
      $maxdist=$115;
      var $116=$facet;
      $maxmatch=$116;
      var $117=HEAP32[(($skip)>>2)];
      $maxskip=$117;
      var $118=$newfacet;
      $maxmatch2=$118;
      var $119=$newskip;
      $maxskip2=$119;
      label = 33; break;
    case 33: 
      var $120=HEAP32[((((5247040)|0))>>2)];
      var $cmp87=(($120)|0) >= 3;
      if ($cmp87) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $121=HEAP32[((((5248924)|0))>>2)];
      var $122=$facet;
      var $id90=(($122+72)|0);
      var $123=HEAP32[(($id90)>>2)];
      var $124=HEAP32[(($skip)>>2)];
      var $125=$newfacet;
      var $id91=(($125+72)|0);
      var $126=HEAP32[(($id91)>>2)];
      var $127=$newskip;
      var $128=$mindist;
      var $129=$maxmatch;
      var $id92=(($129+72)|0);
      var $130=HEAP32[(($id92)>>2)];
      var $131=$maxmatch2;
      var $id93=(($131+72)|0);
      var $132=HEAP32[(($id93)>>2)];
      _qh_fprintf($121, 3018, ((5300424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$123,HEAP32[(((tempInt)+(4))>>2)]=$124,HEAP32[(((tempInt)+(8))>>2)]=$126,HEAP32[(((tempInt)+(12))>>2)]=$127,(HEAPF64[(tempDoublePtr)>>3]=$128,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(24))>>2)]=$130,HEAP32[(((tempInt)+(28))>>2)]=$132,tempInt));
      label = 35; break;
    case 35: 
      label = 37; break;
    case 36: 
      var $133=$facet;
      $nextfacet=$133;
      var $134=HEAP32[(($skip)>>2)];
      $nextskip=$134;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $135=$makematch;
      var $tobool100=(($135)|0)!=0;
      if ($tobool100) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $136=$facet;
      var $tobool102=(($136)|0)!=0;
      if ($tobool102) { label = 44; break; } else { label = 42; break; }
    case 42: 
      var $137=HEAP32[(($skip)>>2)];
      var $138=$facet;
      var $neighbors104=(($138+56)|0);
      var $139=HEAP32[(($neighbors104)>>2)];
      var $e105=(($139+4)|0);
      var $arrayidx106=(($e105+($137<<2))|0);
      var $p107=$arrayidx106;
      var $140=HEAP32[(($p107)>>2)];
      var $141=$140;
      var $cmp108=(($141)|0)==1;
      if ($cmp108) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $142=HEAP32[((((5248924)|0))>>2)];
      var $143=$newfacet;
      var $id111=(($143+72)|0);
      var $144=HEAP32[(($id111)>>2)];
      var $145=$newskip;
      var $146=$hash;
      _qh_fprintf($142, 6156, ((5299988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$144,HEAP32[(((tempInt)+(4))>>2)]=$145,HEAP32[(((tempInt)+(8))>>2)]=$146,tempInt));
      var $147=$newfacet;
      _qh_errexit(5, $147, 0);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $148=$scan;
      var $inc113=((($148)+(1))|0);
      $scan=$inc113;
      var $149=$hashsize_addr;
      var $cmp114=(($inc113)|0) >= (($149)|0);
      if ($cmp114) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $cond = 0;label = 48; break;
    case 47: 
      var $150=$scan;
      var $cond = $150;label = 48; break;
    case 48: 
      var $cond;
      $scan=$cond;
      label = 9; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $151=$nextfacet;
      $newfacet=$151;
      var $152=$nextskip;
      $newskip=$152;
      label = 7; break;
    case 51: 
      var $153=$makematch;
      var $tobool118=(($153)|0)!=0;
      if ($tobool118) { label = 59; break; } else { label = 52; break; }
    case 52: 
      var $154=$maxmatch;
      var $tobool120=(($154)|0)!=0;
      if ($tobool120) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $155=HEAP32[((((5248924)|0))>>2)];
      var $156=$atfacet_addr;
      var $id122=(($156+72)|0);
      var $157=HEAP32[(($id122)>>2)];
      var $158=$atskip_addr;
      var $159=$hash;
      _qh_fprintf($155, 6157, ((5299688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$157,HEAP32[(((tempInt)+(4))>>2)]=$158,HEAP32[(((tempInt)+(8))>>2)]=$159,tempInt));
      var $160=$atfacet_addr;
      _qh_errexit(5, $160, 0);
      label = 54; break;
    case 54: 
      var $161=$maxmatch2;
      var $162=$161;
      var $163=$maxskip;
      var $164=$maxmatch;
      var $neighbors124=(($164+56)|0);
      var $165=HEAP32[(($neighbors124)>>2)];
      var $e125=(($165+4)|0);
      var $arrayidx126=(($e125+($163<<2))|0);
      var $p127=$arrayidx126;
      HEAP32[(($p127)>>2)]=$162;
      var $166=$maxmatch;
      var $167=$166;
      var $168=$maxskip2;
      var $169=$maxmatch2;
      var $neighbors128=(($169+56)|0);
      var $170=HEAP32[(($neighbors128)>>2)];
      var $e129=(($170+4)|0);
      var $arrayidx130=(($e129+($168<<2))|0);
      var $p131=$arrayidx130;
      HEAP32[(($p131)>>2)]=$167;
      var $171=$hashcount_addr;
      var $172=HEAP32[(($171)>>2)];
      var $sub132=((($172)-(2))|0);
      HEAP32[(($171)>>2)]=$sub132;
      var $173=HEAP32[(((((5244076)|0)))>>2)];
      var $inc133=((($173)+(1))|0);
      HEAP32[(((((5244076)|0)))>>2)]=$inc133;
      var $174=HEAP32[((((5247040)|0))>>2)];
      var $tobool134=(($174)|0)!=0;
      if ($tobool134) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $175=HEAP32[((((5248924)|0))>>2)];
      var $176=$maxmatch;
      var $id136=(($176+72)|0);
      var $177=HEAP32[(($id136)>>2)];
      var $178=$maxskip;
      var $179=$maxmatch2;
      var $id137=(($179+72)|0);
      var $180=HEAP32[(($id137)>>2)];
      var $181=$maxskip2;
      _qh_fprintf($175, 25, ((5299436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$177,HEAP32[(((tempInt)+(4))>>2)]=$178,HEAP32[(((tempInt)+(8))>>2)]=$180,HEAP32[(((tempInt)+(12))>>2)]=$181,tempInt));
      label = 56; break;
    case 56: 
      _qh_precision(((5299292)|0));
      var $182=HEAP32[((((5247040)|0))>>2)];
      var $cmp139=(($182)|0) >= 4;
      if ($cmp139) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $183=$maxmatch;
      var $184=$maxmatch2;
      _qh_errprint(((5299124)|0), $183, $184, 0, 0);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $185=$makematch;
      var $inc145=((($185)+(1))|0);
      $makematch=$inc145;
      label = 5; break;
    case 61: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_matchduplicates["X"]=1;

function _qh_newhashtable($newsize) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $newsize_addr;
      var $size;
      $newsize_addr=$newsize;
      var $0=$newsize_addr;
      var $add=((($0)+(1))|0);
      var $mul=((($add<<1))&-1);
      var $or=$mul | 1;
      $size=$or;
      label = 3; break;
    case 3: 
      var $1=$newsize_addr;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$size;
      var $cmp1=(($2)|0) < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=HEAP32[((((5242932)|0))>>2)];
      var $4=$newsize_addr;
      var $5=$size;
      _qh_fprintf($3, 6236, ((5298192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      _qh_errexit(4, 0, 0);
      label = 6; break;
    case 6: 
      var $6=$size;
      var $rem=((($6)|0))%(3);
      var $tobool=(($rem)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $7=$size;
      var $rem2=((($7)|0))%(5);
      var $tobool3=(($rem2)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $8=$size;
      var $add6=((($8)+(2))|0);
      $size=$add6;
      label = 3; break;
    case 10: 
      var $9=$size;
      var $call=_qh_setnew($9);
      HEAP32[((((5249180)|0))>>2)]=$call;
      var $10=HEAP32[((((5249180)|0))>>2)];
      var $11=$size;
      _qh_setzero($10, 0, $11);
      var $12=$size;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_outcoplanar() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point;
      var $pointp;
      var $facet;
      var $dist=__stackBase__;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 1033, ((5297624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $2=HEAP32[((((5248944)|0))>>2)];
      $facet=$2;
      label = 5; break;
    case 5: 
      var $3=$facet;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $6 = 0;label = 7; break; }
    case 6: 
      var $4=$facet;
      var $next=(($4+44)|0);
      var $5=HEAP32[(($next)>>2)];
      var $tobool1=(($5)|0)!=0;
      var $6 = $tobool1;label = 7; break;
    case 7: 
      var $6;
      if ($6) { label = 8; break; } else { label = 18; break; }
    case 8: 
      $point=0;
      var $7=$facet;
      var $outsideset=(($7+60)|0);
      var $8=HEAP32[(($outsideset)>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $9=$facet;
      var $outsideset4=(($9+60)|0);
      var $10=HEAP32[(($outsideset4)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $pointp=$11;
      label = 10; break;
    case 10: 
      var $12=$pointp;
      var $incdec_ptr=(($12+4)|0);
      $pointp=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $point=$13;
      var $tobool6=(($13)|0)!=0;
      if ($tobool6) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $14=HEAP32[((((5249004)|0))>>2)];
      var $dec=((($14)-(1))|0);
      HEAP32[((((5249004)|0))>>2)]=$dec;
      var $15=HEAP32[((((5247048)|0))>>2)];
      var $tobool8=(($15)|0)!=0;
      if ($tobool8) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $16=HEAP32[((((5247504)|0))>>2)];
      var $tobool9=(($16)|0)!=0;
      if ($tobool9) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $17=$point;
      var $18=$facet;
      _qh_distplane($17, $18, $dist);
      var $19=HEAP32[(((((5244316)|0)))>>2)];
      var $inc=((($19)+(1))|0);
      HEAP32[(((((5244316)|0)))>>2)]=$inc;
      var $20=$point;
      var $21=$facet;
      _qh_partitioncoplanar($20, $21, $dist);
      label = 14; break;
    case 14: 
      label = 10; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $22=$facet;
      var $outsideset13=(($22+60)|0);
      _qh_setfree($outsideset13);
      label = 17; break;
    case 17: 
      var $23=$facet;
      var $next14=(($23+44)|0);
      var $24=HEAP32[(($next14)>>2)];
      $facet=$24;
      label = 5; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_outcoplanar["X"]=1;

function _qh_point_add($set, $point, $elem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $point_addr;
      var $elem_addr;
      var $id;
      var $size;
      $set_addr=$set;
      $point_addr=$point;
      $elem_addr=$elem;
      var $0=$set_addr;
      var $maxsize=(($0)|0);
      var $1=HEAP32[(($maxsize)>>2)];
      var $2=$set_addr;
      var $e=(($2+4)|0);
      var $arrayidx=(($e+($1<<2))|0);
      var $i=$arrayidx;
      var $3=HEAP32[(($i)>>2)];
      $size=$3;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$size;
      var $dec=((($4)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 5; break;
    case 4: 
      var $5=$set_addr;
      var $maxsize1=(($5)|0);
      var $6=HEAP32[(($maxsize1)>>2)];
      $size=$6;
      var $cond = $6;label = 5; break;
    case 5: 
      var $cond;
      var $7=$point_addr;
      var $call=_qh_pointid($7);
      $id=$call;
      var $cmp=(($call)|0) < 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=HEAP32[((((5248924)|0))>>2)];
      var $9=$point_addr;
      var $10=$id;
      _qh_fprintf($8, 7067, ((5297476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$10,tempInt));
      label = 11; break;
    case 7: 
      var $11=$id;
      var $12=$size;
      var $cmp2=(($11)|0) >= (($12)|0);
      if ($cmp2) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=HEAP32[((((5248924)|0))>>2)];
      var $14=$id;
      var $15=$size;
      _qh_fprintf($13, 6160, ((5297268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      _qh_errexit(5, 0, 0);
      label = 10; break;
    case 9: 
      var $16=$elem_addr;
      var $17=$id;
      var $18=$set_addr;
      var $e5=(($18+4)|0);
      var $arrayidx6=(($e5+($17<<2))|0);
      var $p=$arrayidx6;
      HEAP32[(($p)>>2)]=$16;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_point_add["X"]=1;

function _qh_printhashtable($fp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet;
      var $neighbor;
      var $id;
      var $facet_i;
      var $facet_n;
      var $neighbor_i;
      var $neighbor_n;
      var $vertex;
      var $vertexp;
      $fp_addr=$fp;
      $neighbor_i=0;
      $neighbor_n=0;
      $facet=0;
      var $0=HEAP32[((((5249180)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 42; break; }
    case 3: 
      $facet_i=0;
      var $1=HEAP32[((((5249180)|0))>>2)];
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      $facet=$3;
      var $4=HEAP32[((((5249180)|0))>>2)];
      var $call=_qh_setsize($4);
      $facet_n=$call;
      label = 4; break;
    case 4: 
      var $5=$facet_i;
      var $6=$facet_n;
      var $cmp=(($5)|0) < (($6)|0);
      if ($cmp) { label = 5; break; } else { label = 41; break; }
    case 5: 
      var $7=$facet;
      var $tobool1=(($7)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 39; break; }
    case 6: 
      $neighbor=0;
      var $8=$facet;
      var $neighbors=(($8+56)|0);
      var $9=HEAP32[(($neighbors)>>2)];
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 16; break; }
    case 7: 
      $neighbor_i=0;
      var $10=$facet;
      var $neighbors5=(($10+56)|0);
      var $11=HEAP32[(($neighbors5)>>2)];
      var $e6=(($11+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $12=HEAP32[(($p8)>>2)];
      var $13=$12;
      $neighbor=$13;
      var $14=$facet;
      var $neighbors9=(($14+56)|0);
      var $15=HEAP32[(($neighbors9)>>2)];
      var $call10=_qh_setsize($15);
      $neighbor_n=$call10;
      label = 8; break;
    case 8: 
      var $16=$neighbor_i;
      var $17=$neighbor_n;
      var $cmp12=(($16)|0) < (($17)|0);
      if ($cmp12) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $18=$neighbor;
      var $tobool14=(($18)|0)!=0;
      if ($tobool14) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $19=$neighbor;
      var $cmp15=(($19)|0)==2;
      if ($cmp15) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $20=$neighbor;
      var $cmp17=(($20)|0)==1;
      if ($cmp17) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $21=$neighbor_i;
      var $inc=((($21)+(1))|0);
      $neighbor_i=$inc;
      var $22=$facet;
      var $neighbors19=(($22+56)|0);
      var $23=HEAP32[(($neighbors19)>>2)];
      var $e20=(($23+4)|0);
      var $arrayidx21=(($e20+($inc<<2))|0);
      var $p22=$arrayidx21;
      var $24=HEAP32[(($p22)>>2)];
      var $25=$24;
      $neighbor=$25;
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $26=$neighbor_i;
      var $27=$neighbor_n;
      var $cmp24=(($26)|0)==(($27)|0);
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 40; break;
    case 18: 
      var $28=$fp_addr;
      var $29=$facet_i;
      var $30=$facet;
      var $id27=(($30+72)|0);
      var $31=HEAP32[(($id27)>>2)];
      _qh_fprintf($28, 9283, ((5297020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=$31,tempInt));
      $vertex=0;
      var $32=$facet;
      var $vertices=(($32+48)|0);
      var $33=HEAP32[(($vertices)>>2)];
      var $tobool28=(($33)|0)!=0;
      if ($tobool28) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $34=$facet;
      var $vertices30=(($34+48)|0);
      var $35=HEAP32[(($vertices30)>>2)];
      var $e31=(($35+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      var $36=$p33;
      $vertexp=$36;
      label = 20; break;
    case 20: 
      var $37=$vertexp;
      var $incdec_ptr=(($37+4)|0);
      $vertexp=$incdec_ptr;
      var $38=HEAP32[(($37)>>2)];
      $vertex=$38;
      var $tobool35=(($38)|0)!=0;
      if ($tobool35) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $39=$fp_addr;
      var $40=$vertex;
      var $41=$40;
      var $bf_field_offs=(($41+20)|0);
      var $42=$bf_field_offs;
      var $43=HEAP32[(($42)>>2)];
      var $bf_clear=$43 & 16777215;
      _qh_fprintf($39, 9284, ((5296924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$bf_clear,tempInt));
      label = 20; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $44=$fp_addr;
      _qh_fprintf($44, 9285, ((5296656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $neighbor=0;
      var $45=$facet;
      var $neighbors39=(($45+56)|0);
      var $46=HEAP32[(($neighbors39)>>2)];
      var $tobool40=(($46)|0)!=0;
      if ($tobool40) { label = 24; break; } else { label = 38; break; }
    case 24: 
      $neighbor_i=0;
      var $47=$facet;
      var $neighbors42=(($47+56)|0);
      var $48=HEAP32[(($neighbors42)>>2)];
      var $e43=(($48+4)|0);
      var $arrayidx44=(($e43)|0);
      var $p45=$arrayidx44;
      var $49=HEAP32[(($p45)>>2)];
      var $50=$49;
      $neighbor=$50;
      var $51=$facet;
      var $neighbors46=(($51+56)|0);
      var $52=HEAP32[(($neighbors46)>>2)];
      var $call47=_qh_setsize($52);
      $neighbor_n=$call47;
      label = 25; break;
    case 25: 
      var $53=$neighbor_i;
      var $54=$neighbor_n;
      var $cmp49=(($53)|0) < (($54)|0);
      if ($cmp49) { label = 26; break; } else { label = 37; break; }
    case 26: 
      var $55=$neighbor;
      var $cmp51=(($55)|0)==2;
      if ($cmp51) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $id=-3;
      label = 35; break;
    case 28: 
      var $56=$neighbor;
      var $cmp53=(($56)|0)==1;
      if ($cmp53) { label = 29; break; } else { label = 30; break; }
    case 29: 
      $id=-2;
      label = 34; break;
    case 30: 
      var $57=$neighbor;
      var $tobool56=(($57)|0)!=0;
      if ($tobool56) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $58=$neighbor;
      var $id57=(($58+72)|0);
      var $59=HEAP32[(($id57)>>2)];
      var $cond = $59;label = 33; break;
    case 32: 
      var $cond = -1;label = 33; break;
    case 33: 
      var $cond;
      $id=$cond;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $60=$fp_addr;
      var $61=$id;
      _qh_fprintf($60, 9286, ((5296520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,tempInt));
      label = 36; break;
    case 36: 
      var $62=$neighbor_i;
      var $inc61=((($62)+(1))|0);
      $neighbor_i=$inc61;
      var $63=$facet;
      var $neighbors62=(($63+56)|0);
      var $64=HEAP32[(($neighbors62)>>2)];
      var $e63=(($64+4)|0);
      var $arrayidx64=(($e63+($inc61<<2))|0);
      var $p65=$arrayidx64;
      var $65=HEAP32[(($p65)>>2)];
      var $66=$65;
      $neighbor=$66;
      label = 25; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $67=$fp_addr;
      _qh_fprintf($67, 9287, ((5301776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $68=$facet_i;
      var $inc70=((($68)+(1))|0);
      $facet_i=$inc70;
      var $69=HEAP32[((((5249180)|0))>>2)];
      var $e71=(($69+4)|0);
      var $arrayidx72=(($e71+($inc70<<2))|0);
      var $p73=$arrayidx72;
      var $70=HEAP32[(($p73)>>2)];
      var $71=$70;
      $facet=$71;
      label = 4; break;
    case 41: 
      label = 42; break;
    case 42: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printhashtable["X"]=1;

function _qh_triangulate() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $nextfacet;
      var $owner;
      var $onlygood;
      var $neighbor;
      var $visible;
      var $facet1;
      var $facet2;
      var $new_facet_list;
      var $orig_neighbor;
      var $otherfacet;
      var $new_vertex_list=__stackBase__;
      var $merge;
      var $mergetype;
      var $neighbor_i;
      var $neighbor_n;
      var $0=HEAP32[((((5247128)|0))>>2)];
      $onlygood=$0;
      $visible=0;
      $new_facet_list=0;
      $orig_neighbor=0;
      HEAP32[(($new_vertex_list)>>2)]=0;
      var $1=HEAP32[((((5249052)|0))>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 128; break;
    case 4: 
      var $2=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($2)|0) >= 1;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($3, 1034, ((5295924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      var $4=HEAP32[((((5247508)|0))>>2)];
      var $cmp3=(($4)|0)==2;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 128; break;
    case 8: 
      var $5=HEAP32[((((5247476)|0))>>2)];
      var $tobool6=(($5)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _qh_clearcenters(1);
      _qh_vertexneighbors();
      label = 10; break;
    case 10: 
      HEAP32[((((5247128)|0))>>2)]=0;
      var $6=HEAP32[((((5249156)|0))>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[((((5249156)|0))>>2)]=$inc;
      HEAP32[((((5249092)|0))>>2)]=1;
      var $7=HEAP32[((((5248940)|0))>>2)];
      var $call=_qh_settemp($7);
      HEAP32[((((5249176)|0))>>2)]=$call;
      var $8=HEAP32[((((5248988)|0))>>2)];
      HEAP32[((((5248992)|0))>>2)]=$8;
      var $9=HEAP32[((((5248944)|0))>>2)];
      $facet=$9;
      label = 11; break;
    case 11: 
      var $10=$facet;
      var $tobool9=(($10)|0)!=0;
      if ($tobool9) { label = 12; break; } else { var $13 = 0;label = 13; break; }
    case 12: 
      var $11=$facet;
      var $next=(($11+44)|0);
      var $12=HEAP32[(($next)>>2)];
      var $tobool10=(($12)|0)!=0;
      var $13 = $tobool10;label = 13; break;
    case 13: 
      var $13;
      if ($13) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $14=$facet;
      var $next11=(($14+44)|0);
      var $15=HEAP32[(($next11)>>2)];
      $nextfacet=$15;
      var $16=$facet;
      var $17=$16;
      var $bf_field_offs=(($17+76)|0);
      var $18=$bf_field_offs;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $bf_clear=$20 & 1;
      var $tobool12=(($bf_clear)|0)!=0;
      if ($tobool12) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $21=$facet;
      var $22=$21;
      var $bf_field_offs13=(($22+76)|0);
      var $23=$bf_field_offs13;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 13;
      var $bf_clear14=$25 & 1;
      var $tobool15=(($bf_clear14)|0)!=0;
      if ($tobool15) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 20; break;
    case 17: 
      var $26=$new_facet_list;
      var $tobool18=(($26)|0)!=0;
      if ($tobool18) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $27=$facet;
      $new_facet_list=$27;
      label = 19; break;
    case 19: 
      var $28=$facet;
      _qh_triangulate_facet($28, $new_vertex_list);
      label = 20; break;
    case 20: 
      var $29=$nextfacet;
      $facet=$29;
      label = 11; break;
    case 21: 
      var $30=HEAP32[((((5247040)|0))>>2)];
      var $cmp21=(($30)|0) >= 2;
      if ($cmp21) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $31=HEAP32[((((5248924)|0))>>2)];
      var $32=$new_facet_list;
      var $tobool23=(($32)|0)!=0;
      if ($tobool23) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $33=$new_facet_list;
      var $id=(($33+72)|0);
      var $34=HEAP32[(($id)>>2)];
      var $cond = $34;label = 25; break;
    case 24: 
      var $cond = -1;label = 25; break;
    case 25: 
      var $cond;
      _qh_fprintf($31, 2047, ((5295704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      label = 26; break;
    case 26: 
      var $35=$new_facet_list;
      $facet=$35;
      label = 27; break;
    case 27: 
      var $36=$facet;
      var $tobool26=(($36)|0)!=0;
      if ($tobool26) { label = 28; break; } else { var $39 = 0;label = 29; break; }
    case 28: 
      var $37=$facet;
      var $next28=(($37+44)|0);
      var $38=HEAP32[(($next28)>>2)];
      var $tobool29=(($38)|0)!=0;
      var $39 = $tobool29;label = 29; break;
    case 29: 
      var $39;
      if ($39) { label = 30; break; } else { label = 40; break; }
    case 30: 
      var $40=$facet;
      var $next32=(($40+44)|0);
      var $41=HEAP32[(($next32)>>2)];
      $nextfacet=$41;
      var $42=$facet;
      var $43=$42;
      var $bf_field_offs33=(($43+76)|0);
      var $44=$bf_field_offs33;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 11;
      var $bf_clear34=$46 & 1;
      var $tobool35=(($bf_clear34)|0)!=0;
      if ($tobool35) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 39; break;
    case 32: 
      var $47=$facet;
      var $ridges=(($47+52)|0);
      var $48=HEAP32[(($ridges)>>2)];
      var $tobool38=(($48)|0)!=0;
      if ($tobool38) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $49=$facet;
      var $ridges40=(($49+52)|0);
      var $50=HEAP32[(($ridges40)>>2)];
      var $call41=_qh_setsize($50);
      var $cmp42=(($call41)|0) > 0;
      if ($cmp42) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$facet;
      var $id44=(($52+72)|0);
      var $53=HEAP32[(($id44)>>2)];
      _qh_fprintf($51, 6161, ((5295480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$53,tempInt));
      var $54=$facet;
      _qh_errexit(5, $54, 0);
      label = 35; break;
    case 35: 
      var $55=$facet;
      var $ridges46=(($55+52)|0);
      _qh_setfree($ridges46);
      label = 36; break;
    case 36: 
      var $56=$facet;
      var $vertices=(($56+48)|0);
      var $57=HEAP32[(($vertices)>>2)];
      var $e=(($57+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $58=HEAP32[(($p)>>2)];
      var $59=$facet;
      var $vertices48=(($59+48)|0);
      var $60=HEAP32[(($vertices48)>>2)];
      var $e49=(($60+4)|0);
      var $arrayidx50=(($e49+4)|0);
      var $p51=$arrayidx50;
      var $61=HEAP32[(($p51)>>2)];
      var $cmp52=(($58)|0)==(($61)|0);
      if ($cmp52) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $62=HEAP32[(((((5244668)|0)))>>2)];
      var $inc54=((($62)+(1))|0);
      HEAP32[(((((5244668)|0)))>>2)]=$inc54;
      var $63=$facet;
      _qh_triangulate_null($63);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $64=$nextfacet;
      $facet=$64;
      label = 27; break;
    case 40: 
      var $65=HEAP32[((((5247040)|0))>>2)];
      var $cmp58=(($65)|0) >= 2;
      if ($cmp58) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $66=HEAP32[((((5248924)|0))>>2)];
      var $67=HEAP32[((((5249176)|0))>>2)];
      var $call60=_qh_setsize($67);
      _qh_fprintf($66, 2048, ((5295368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call60,tempInt));
      label = 42; break;
    case 42: 
      var $68=HEAP32[((((5248948)|0))>>2)];
      HEAP32[((((5248960)|0))>>2)]=$68;
      label = 43; break;
    case 43: 
      var $69=HEAP32[((((5249176)|0))>>2)];
      var $call62=_qh_setdellast($69);
      var $70=$call62;
      $merge=$70;
      var $tobool63=(($70)|0)!=0;
      if ($tobool63) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $71=$merge;
      var $facet164=(($71+8)|0);
      var $72=HEAP32[(($facet164)>>2)];
      $facet1=$72;
      var $73=$merge;
      var $facet265=(($73+12)|0);
      var $74=HEAP32[(($facet265)>>2)];
      $facet2=$74;
      var $75=$merge;
      var $type=(($75+16)|0);
      var $76=HEAP32[(($type)>>2)];
      $mergetype=$76;
      var $77=$merge;
      var $78=$77;
      _qh_memfree($78, 20);
      var $79=$mergetype;
      var $cmp66=(($79)|0)==8;
      if ($cmp66) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $80=HEAP32[(((((5244660)|0)))>>2)];
      var $inc68=((($80)+(1))|0);
      HEAP32[(((((5244660)|0)))>>2)]=$inc68;
      var $81=$facet1;
      var $82=$facet2;
      _qh_triangulate_mirror($81, $82);
      label = 46; break;
    case 46: 
      label = 43; break;
    case 47: 
      _qh_settempfree(((5249176)|0));
      var $83=HEAP32[((((5247040)|0))>>2)];
      var $cmp70=(($83)|0) >= 2;
      if ($cmp70) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $84=HEAP32[((((5248924)|0))>>2)];
      var $85=HEAP32[(($new_vertex_list)>>2)];
      var $tobool72=(($85)|0)!=0;
      if ($tobool72) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $86=HEAP32[(($new_vertex_list)>>2)];
      var $87=$86;
      var $bf_field_offs74=(($87+20)|0);
      var $88=$bf_field_offs74;
      var $89=HEAP32[(($88)>>2)];
      var $bf_clear75=$89 & 16777215;
      var $cond78 = $bf_clear75;label = 51; break;
    case 50: 
      var $cond78 = -1;label = 51; break;
    case 51: 
      var $cond78;
      _qh_fprintf($84, 2049, ((5295172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond78,tempInt));
      label = 52; break;
    case 52: 
      var $90=HEAP32[(($new_vertex_list)>>2)];
      HEAP32[((((5248992)|0))>>2)]=$90;
      HEAP32[((((5248960)|0))>>2)]=0;
      _qh_updatevertices();
      _qh_resetlists(0, 0);
      var $91=HEAP32[((((5247040)|0))>>2)];
      var $cmp80=(($91)|0) >= 2;
      if ($cmp80) { label = 53; break; } else { label = 57; break; }
    case 53: 
      var $92=HEAP32[((((5248924)|0))>>2)];
      var $93=$new_facet_list;
      var $tobool82=(($93)|0)!=0;
      if ($tobool82) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $94=$new_facet_list;
      var $id84=(($94+72)|0);
      var $95=HEAP32[(($id84)>>2)];
      var $cond87 = $95;label = 56; break;
    case 55: 
      var $cond87 = -1;label = 56; break;
    case 56: 
      var $cond87;
      _qh_fprintf($92, 2050, ((5294952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond87,tempInt));
      label = 57; break;
    case 57: 
      var $96=HEAP32[((((5247040)|0))>>2)];
      var $cmp89=(($96)|0) >= 2;
      if ($cmp89) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $97=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($97, 2051, ((5294664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 59; break;
    case 59: 
      var $98=$new_facet_list;
      var $tobool92=(($98)|0)!=0;
      if ($tobool92) { label = 60; break; } else { label = 87; break; }
    case 60: 
      var $99=$new_facet_list;
      $facet=$99;
      label = 61; break;
    case 61: 
      var $100=$facet;
      var $tobool95=(($100)|0)!=0;
      if ($tobool95) { label = 62; break; } else { var $103 = 0;label = 63; break; }
    case 62: 
      var $101=$facet;
      var $next97=(($101+44)|0);
      var $102=HEAP32[(($next97)>>2)];
      var $tobool98=(($102)|0)!=0;
      var $103 = $tobool98;label = 63; break;
    case 63: 
      var $103;
      if ($103) { label = 64; break; } else { label = 86; break; }
    case 64: 
      var $104=$facet;
      var $105=$104;
      var $bf_field_offs101=(($105+76)|0);
      var $106=$bf_field_offs101;
      var $107=HEAP32[(($106)>>2)];
      var $108=$107 >>> 9;
      var $bf_clear102=$108 & 1;
      var $tobool103=(($bf_clear102)|0)!=0;
      if ($tobool103) { label = 65; break; } else { label = 84; break; }
    case 65: 
      var $109=$facet;
      var $110=$109;
      var $bf_field_offs104=(($110+76)|0);
      var $111=$bf_field_offs104;
      var $112=HEAP32[(($111)>>2)];
      var $113=$112 >>> 11;
      var $bf_clear105=$113 & 1;
      var $tobool106=(($bf_clear105)|0)!=0;
      if ($tobool106) { label = 84; break; } else { label = 66; break; }
    case 66: 
      $neighbor=0;
      var $114=$facet;
      var $neighbors=(($114+56)|0);
      var $115=HEAP32[(($neighbors)>>2)];
      var $tobool108=(($115)|0)!=0;
      if ($tobool108) { label = 67; break; } else { label = 83; break; }
    case 67: 
      $neighbor_i=0;
      var $116=$facet;
      var $neighbors110=(($116+56)|0);
      var $117=HEAP32[(($neighbors110)>>2)];
      var $e111=(($117+4)|0);
      var $arrayidx112=(($e111)|0);
      var $p113=$arrayidx112;
      var $118=HEAP32[(($p113)>>2)];
      var $119=$118;
      $neighbor=$119;
      var $120=$facet;
      var $neighbors114=(($120+56)|0);
      var $121=HEAP32[(($neighbors114)>>2)];
      var $call115=_qh_setsize($121);
      $neighbor_n=$call115;
      label = 68; break;
    case 68: 
      var $122=$neighbor_i;
      var $123=$neighbor_n;
      var $cmp117=(($122)|0) < (($123)|0);
      if ($cmp117) { label = 69; break; } else { label = 82; break; }
    case 69: 
      var $124=$neighbor_i;
      var $cmp119=(($124)|0)==0;
      if ($cmp119) { label = 70; break; } else { label = 74; break; }
    case 70: 
      var $125=$neighbor;
      var $126=$125;
      var $bf_field_offs121=(($126+76)|0);
      var $127=$bf_field_offs121;
      var $128=HEAP32[(($127)>>2)];
      var $129=$128 >>> 9;
      var $bf_clear122=$129 & 1;
      var $tobool123=(($bf_clear122)|0)!=0;
      if ($tobool123) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $130=$neighbor;
      var $f=(($130+28)|0);
      var $triowner=$f;
      var $131=HEAP32[(($triowner)>>2)];
      $orig_neighbor=$131;
      label = 73; break;
    case 72: 
      var $132=$neighbor;
      $orig_neighbor=$132;
      label = 73; break;
    case 73: 
      label = 80; break;
    case 74: 
      var $133=$neighbor;
      var $134=$133;
      var $bf_field_offs127=(($134+76)|0);
      var $135=$bf_field_offs127;
      var $136=HEAP32[(($135)>>2)];
      var $137=$136 >>> 9;
      var $bf_clear128=$137 & 1;
      var $tobool129=(($bf_clear128)|0)!=0;
      if ($tobool129) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $138=$neighbor;
      var $f131=(($138+28)|0);
      var $triowner132=$f131;
      var $139=HEAP32[(($triowner132)>>2)];
      $otherfacet=$139;
      label = 77; break;
    case 76: 
      var $140=$neighbor;
      $otherfacet=$140;
      label = 77; break;
    case 77: 
      var $141=$orig_neighbor;
      var $142=$otherfacet;
      var $cmp135=(($141)|0)==(($142)|0);
      if ($cmp135) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $143=HEAP32[(((((5244652)|0)))>>2)];
      var $inc137=((($143)+(1))|0);
      HEAP32[(((((5244652)|0)))>>2)]=$inc137;
      var $144=$facet;
      var $145=$144;
      var $bf_field_offs138=(($145+76)|0);
      var $146=$bf_field_offs138;
      var $147=HEAP32[(($146)>>2)];
      var $148=$147 & -1073741825;
      var $149=$148 | 1073741824;
      HEAP32[(($146)>>2)]=$149;
      label = 82; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $150=$neighbor_i;
      var $inc142=((($150)+(1))|0);
      $neighbor_i=$inc142;
      var $151=$facet;
      var $neighbors143=(($151+56)|0);
      var $152=HEAP32[(($neighbors143)>>2)];
      var $e144=(($152+4)|0);
      var $arrayidx145=(($e144+($inc142<<2))|0);
      var $p146=$arrayidx145;
      var $153=HEAP32[(($p146)>>2)];
      var $154=$153;
      $neighbor=$154;
      label = 68; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $155=$facet;
      var $next151=(($155+44)|0);
      var $156=HEAP32[(($next151)>>2)];
      $facet=$156;
      label = 61; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $157=HEAP32[((((5247040)|0))>>2)];
      var $cmp154=(($157)|0) >= 2;
      if ($cmp154) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $158=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($158, 2052, ((5294532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 89; break;
    case 89: 
      $owner=0;
      $visible=0;
      var $159=$new_facet_list;
      $facet=$159;
      label = 90; break;
    case 90: 
      var $160=$facet;
      var $tobool158=(($160)|0)!=0;
      if ($tobool158) { label = 91; break; } else { var $163 = 0;label = 92; break; }
    case 91: 
      var $161=$facet;
      var $next160=(($161+44)|0);
      var $162=HEAP32[(($next160)>>2)];
      var $tobool161=(($162)|0)!=0;
      var $163 = $tobool161;label = 92; break;
    case 92: 
      var $163;
      if ($163) { label = 93; break; } else { label = 120; break; }
    case 93: 
      var $164=$facet;
      var $next164=(($164+44)|0);
      var $165=HEAP32[(($next164)>>2)];
      $nextfacet=$165;
      var $166=$facet;
      var $167=$166;
      var $bf_field_offs165=(($167+76)|0);
      var $168=$bf_field_offs165;
      var $169=HEAP32[(($168)>>2)];
      var $170=$169 >>> 11;
      var $bf_clear166=$170 & 1;
      var $tobool167=(($bf_clear166)|0)!=0;
      if ($tobool167) { label = 94; break; } else { label = 103; break; }
    case 94: 
      var $171=$facet;
      var $172=$171;
      var $bf_field_offs169=(($172+76)|0);
      var $173=$bf_field_offs169;
      var $174=HEAP32[(($173)>>2)];
      var $175=$174 >>> 9;
      var $bf_clear170=$175 & 1;
      var $tobool171=(($bf_clear170)|0)!=0;
      if ($tobool171) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $176=$facet;
      _qh_delfacet($176);
      var $177=HEAP32[((((5248964)|0))>>2)];
      var $dec=((($177)-(1))|0);
      HEAP32[((((5248964)|0))>>2)]=$dec;
      label = 102; break;
    case 96: 
      var $178=$visible;
      var $tobool174=(($178)|0)!=0;
      if ($tobool174) { label = 97; break; } else { label = 101; break; }
    case 97: 
      var $179=$owner;
      var $tobool176=(($179)|0)!=0;
      if ($tobool176) { label = 101; break; } else { label = 98; break; }
    case 98: 
      var $180=HEAP32[((((5247040)|0))>>2)];
      var $cmp178=(($180)|0) >= 2;
      if ($cmp178) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $181=HEAP32[((((5248924)|0))>>2)];
      var $182=$visible;
      var $id180=(($182+72)|0);
      var $183=HEAP32[(($id180)>>2)];
      _qh_fprintf($181, 2053, ((5294356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$183,tempInt));
      label = 100; break;
    case 100: 
      var $184=$visible;
      _qh_delfacet($184);
      var $185=HEAP32[((((5248964)|0))>>2)];
      var $dec182=((($185)-(1))|0);
      HEAP32[((((5248964)|0))>>2)]=$dec182;
      label = 101; break;
    case 101: 
      var $186=$facet;
      $visible=$186;
      $owner=0;
      label = 102; break;
    case 102: 
      label = 118; break;
    case 103: 
      var $187=$facet;
      var $188=$187;
      var $bf_field_offs186=(($188+76)|0);
      var $189=$bf_field_offs186;
      var $190=HEAP32[(($189)>>2)];
      var $191=$190 >>> 9;
      var $bf_clear187=$191 & 1;
      var $tobool188=(($bf_clear187)|0)!=0;
      if ($tobool188) { label = 104; break; } else { label = 117; break; }
    case 104: 
      var $192=$facet;
      var $f190=(($192+28)|0);
      var $triowner191=$f190;
      var $193=HEAP32[(($triowner191)>>2)];
      var $194=$visible;
      var $cmp192=(($193)|0)!=(($194)|0);
      if ($cmp192) { label = 105; break; } else { label = 109; break; }
    case 105: 
      var $195=HEAP32[((((5248924)|0))>>2)];
      var $196=$facet;
      var $id194=(($196+72)|0);
      var $197=HEAP32[(($id194)>>2)];
      var $198=$visible;
      var $tobool195=(($198)|0)!=0;
      if ($tobool195) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $199=$visible;
      var $id197=(($199+72)|0);
      var $200=HEAP32[(($id197)>>2)];
      var $cond200 = $200;label = 108; break;
    case 107: 
      var $cond200 = -1;label = 108; break;
    case 108: 
      var $cond200;
      _qh_fprintf($195, 6162, ((5294124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$197,HEAP32[(((tempInt)+(4))>>2)]=$cond200,tempInt));
      var $201=$facet;
      var $202=$visible;
      _qh_errexit2(5, $201, $202);
      label = 109; break;
    case 109: 
      var $203=$owner;
      var $tobool202=(($203)|0)!=0;
      if ($tobool202) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $204=$owner;
      var $205=$facet;
      var $f204=(($205+28)|0);
      var $triowner205=$f204;
      HEAP32[(($triowner205)>>2)]=$204;
      label = 116; break;
    case 111: 
      var $206=$facet;
      var $207=$206;
      var $bf_field_offs207=(($207+76)|0);
      var $208=$bf_field_offs207;
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 >>> 30;
      var $bf_clear208=$210 & 1;
      var $tobool209=(($bf_clear208)|0)!=0;
      if ($tobool209) { label = 115; break; } else { label = 112; break; }
    case 112: 
      var $211=$facet;
      $owner=$211;
      var $212=$visible;
      var $next211=(($212+44)|0);
      var $213=HEAP32[(($next211)>>2)];
      $nextfacet=$213;
      var $214=$facet;
      var $215=$214;
      var $bf_field_offs212=(($215+76)|0);
      var $216=$bf_field_offs212;
      var $217=HEAP32[(($216)>>2)];
      var $218=$217 & -268435457;
      var $219=$218 | 268435456;
      HEAP32[(($216)>>2)]=$219;
      var $220=$visible;
      var $coplanarset=(($220+64)|0);
      var $221=HEAP32[(($coplanarset)>>2)];
      var $222=$facet;
      var $coplanarset213=(($222+64)|0);
      HEAP32[(($coplanarset213)>>2)]=$221;
      var $223=$visible;
      var $outsideset=(($223+60)|0);
      var $224=HEAP32[(($outsideset)>>2)];
      var $225=$facet;
      var $outsideset214=(($225+60)|0);
      HEAP32[(($outsideset214)>>2)]=$224;
      var $226=$visible;
      var $coplanarset215=(($226+64)|0);
      HEAP32[(($coplanarset215)>>2)]=0;
      var $227=$visible;
      var $outsideset216=(($227+60)|0);
      HEAP32[(($outsideset216)>>2)]=0;
      var $228=HEAP32[((((5247456)|0))>>2)];
      var $tobool217=(($228)|0)!=0;
      if ($tobool217) { label = 114; break; } else { label = 113; break; }
    case 113: 
      var $229=$visible;
      var $center=(($229+36)|0);
      HEAP32[(($center)>>2)]=0;
      var $230=$visible;
      var $normal=(($230+24)|0);
      HEAP32[(($normal)>>2)]=0;
      label = 114; break;
    case 114: 
      var $231=$visible;
      _qh_delfacet($231);
      var $232=HEAP32[((((5248964)|0))>>2)];
      var $dec220=((($232)-(1))|0);
      HEAP32[((((5248964)|0))>>2)]=$dec220;
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $233=$nextfacet;
      $facet=$233;
      label = 90; break;
    case 120: 
      var $234=$visible;
      var $tobool227=(($234)|0)!=0;
      if ($tobool227) { label = 121; break; } else { label = 125; break; }
    case 121: 
      var $235=$owner;
      var $tobool229=(($235)|0)!=0;
      if ($tobool229) { label = 125; break; } else { label = 122; break; }
    case 122: 
      var $236=HEAP32[((((5247040)|0))>>2)];
      var $cmp231=(($236)|0) >= 2;
      if ($cmp231) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $237=HEAP32[((((5248924)|0))>>2)];
      var $238=$visible;
      var $id233=(($238+72)|0);
      var $239=HEAP32[(($id233)>>2)];
      _qh_fprintf($237, 2054, ((5293944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$239,tempInt));
      label = 124; break;
    case 124: 
      var $240=$visible;
      _qh_delfacet($240);
      var $241=HEAP32[((((5248964)|0))>>2)];
      var $dec235=((($241)-(1))|0);
      HEAP32[((((5248964)|0))>>2)]=$dec235;
      label = 125; break;
    case 125: 
      HEAP32[((((5249092)|0))>>2)]=0;
      var $242=$onlygood;
      HEAP32[((((5247128)|0))>>2)]=$242;
      var $243=HEAP32[((((5246980)|0))>>2)];
      var $tobool237=(($243)|0)!=0;
      if ($tobool237) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $244=HEAP32[((((5248944)|0))>>2)];
      _qh_checkpolygon($244);
      label = 127; break;
    case 127: 
      HEAP32[((((5249052)|0))>>2)]=1;
      label = 128; break;
    case 128: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_triangulate["X"]=1;

function _qh_triangulate_facet($facetA, $first_vertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetA_addr;
      var $first_vertex_addr;
      var $newfacet;
      var $neighbor;
      var $neighborp;
      var $apex;
      var $numnew=__stackBase__;
      $facetA_addr=$facetA;
      $first_vertex_addr=$first_vertex;
      HEAP32[(($numnew)>>2)]=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facetA_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 3020, ((5293728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5247040)|0))>>2)];
      var $cmp1=(($4)|0) >= 4;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=HEAP32[((((5248924)|0))>>2)];
      var $6=$facetA_addr;
      _qh_printfacet($5, $6);
      label = 6; break;
    case 6: 
      $neighbor=0;
      var $7=$facetA_addr;
      var $neighbors=(($7+56)|0);
      var $8=HEAP32[(($neighbors)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $9=$facetA_addr;
      var $neighbors5=(($9+56)|0);
      var $10=HEAP32[(($neighbors5)>>2)];
      var $e=(($10+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $11=$p;
      $neighborp=$11;
      label = 8; break;
    case 8: 
      var $12=$neighborp;
      var $incdec_ptr=(($12+4)|0);
      $neighborp=$incdec_ptr;
      var $13=HEAP32[(($12)>>2)];
      $neighbor=$13;
      var $tobool6=(($13)|0)!=0;
      if ($tobool6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$neighbor;
      var $15=$14;
      var $bf_field_offs=(($15+76)|0);
      var $16=$bf_field_offs;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & -16385;
      HEAP32[(($16)>>2)]=$18;
      var $19=$neighbor;
      var $20=$19;
      var $bf_field_offs7=(($20+76)|0);
      var $21=$bf_field_offs7;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & -16777217;
      HEAP32[(($21)>>2)]=$23;
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $24=HEAP32[((((5249036)|0))>>2)];
      var $cmp9=(($24)|0)==1;
      if ($cmp9) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $25=$facetA_addr;
      var $center=(($25+36)|0);
      var $26=HEAP32[(($center)>>2)];
      var $tobool10=(($26)|0)!=0;
      if ($tobool10) { label = 18; break; } else { label = 13; break; }
    case 13: 
      var $27=HEAP32[((((5247508)|0))>>2)];
      var $sub=((($27)-(1))|0);
      var $28=$facetA_addr;
      var $normal=(($28+24)|0);
      var $29=HEAP32[(($normal)>>2)];
      var $arrayidx12=(($29+($sub<<3))|0);
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp13=$30 < 0;
      if ($cmp13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $31=HEAP32[((((5247508)|0))>>2)];
      var $sub14=((($31)-(1))|0);
      var $32=$facetA_addr;
      var $normal15=(($32+24)|0);
      var $33=HEAP32[(($normal15)>>2)];
      var $arrayidx16=(($33+($sub14<<3))|0);
      var $34=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx16)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx16)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub17=(-$34);
      var $cond = $sub17;label = 16; break;
    case 15: 
      var $35=HEAP32[((((5247508)|0))>>2)];
      var $sub18=((($35)-(1))|0);
      var $36=$facetA_addr;
      var $normal19=(($36+24)|0);
      var $37=HEAP32[(($normal19)>>2)];
      var $arrayidx20=(($37+($sub18<<3))|0);
      var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx20)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx20)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cond = $38;label = 16; break;
    case 16: 
      var $cond;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul=($39)*(2);
      var $cmp21=$cond >= $mul;
      if ($cmp21) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $40=$facetA_addr;
      var $vertices=(($40+48)|0);
      var $41=HEAP32[(($vertices)>>2)];
      var $call=_qh_facetcenter($41);
      var $42=$facetA_addr;
      var $center23=(($42+36)|0);
      HEAP32[(($center23)>>2)]=$call;
      label = 18; break;
    case 18: 
      var $43=$facetA_addr;
      _qh_willdelete($43, 0);
      var $44=HEAP32[((((5248948)|0))>>2)];
      HEAP32[((((5248956)|0))>>2)]=$44;
      var $45=HEAP32[((((5249156)|0))>>2)];
      var $46=$facetA_addr;
      var $visitid=(($46+68)|0);
      HEAP32[(($visitid)>>2)]=$45;
      var $47=$facetA_addr;
      var $vertices25=(($47+48)|0);
      var $48=HEAP32[(($vertices25)>>2)];
      var $e26=(($48+4)|0);
      var $arrayidx27=(($e26)|0);
      var $p28=$arrayidx27;
      var $49=HEAP32[(($p28)>>2)];
      var $50=$49;
      $apex=$50;
      var $51=$facetA_addr;
      var $52=$apex;
      var $call29=_qh_makenew_nonsimplicial($51, $52, $numnew);
      var $53=$facetA_addr;
      var $neighbors30=(($53+56)|0);
      var $54=HEAP32[(($neighbors30)>>2)];
      var $e31=(($54+4)|0);
      var $arrayidx32=(($e31)|0);
      var $p33=$arrayidx32;
      HEAP32[(($p33)>>2)]=0;
      var $55=HEAP32[((((5248956)|0))>>2)];
      $newfacet=$55;
      label = 19; break;
    case 19: 
      var $56=$newfacet;
      var $tobool35=(($56)|0)!=0;
      if ($tobool35) { label = 20; break; } else { var $59 = 0;label = 21; break; }
    case 20: 
      var $57=$newfacet;
      var $next=(($57+44)|0);
      var $58=HEAP32[(($next)>>2)];
      var $tobool36=(($58)|0)!=0;
      var $59 = $tobool36;label = 21; break;
    case 21: 
      var $59;
      if ($59) { label = 22; break; } else { label = 30; break; }
    case 22: 
      var $60=$newfacet;
      var $61=$60;
      var $bf_field_offs38=(($61+76)|0);
      var $62=$bf_field_offs38;
      var $63=HEAP32[(($62)>>2)];
      var $64=$63 & -513;
      var $65=$64 | 512;
      HEAP32[(($62)>>2)]=$65;
      var $66=$facetA_addr;
      var $67=$newfacet;
      var $f=(($67+28)|0);
      var $trivisible=$f;
      HEAP32[(($trivisible)>>2)]=$66;
      var $68=$newfacet;
      var $69=$68;
      var $bf_field_offs39=(($69+76)|0);
      var $70=$bf_field_offs39;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & -1073741825;
      HEAP32[(($70)>>2)]=$72;
      var $73=$facetA_addr;
      var $74=$73;
      var $bf_field_offs40=(($74+76)|0);
      var $75=$bf_field_offs40;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 >>> 17;
      var $bf_clear=$77 & 1;
      var $78=$newfacet;
      var $bf_value=$bf_clear & 1;
      var $79=$78;
      var $bf_field_offs41=(($79+76)|0);
      var $80=$bf_field_offs41;
      var $81=$bf_value & 1;
      var $82=$81 << 17;
      var $83=HEAP32[(($80)>>2)];
      var $84=$83 & -131073;
      var $85=$84 | $82;
      HEAP32[(($80)>>2)]=$85;
      var $86=$facetA_addr;
      var $87=$86;
      var $bf_field_offs42=(($87+76)|0);
      var $88=$bf_field_offs42;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89 >>> 19;
      var $bf_clear43=$90 & 1;
      var $91=$newfacet;
      var $bf_value44=$bf_clear43 & 1;
      var $92=$91;
      var $bf_field_offs45=(($92+76)|0);
      var $93=$bf_field_offs45;
      var $94=$bf_value44 & 1;
      var $95=$94 << 19;
      var $96=HEAP32[(($93)>>2)];
      var $97=$96 & -524289;
      var $98=$97 | $95;
      HEAP32[(($93)>>2)]=$98;
      var $99=HEAP32[((((5247456)|0))>>2)];
      var $tobool46=(($99)|0)!=0;
      if ($tobool46) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $100=$newfacet;
      var $101=$100;
      var $bf_field_offs48=(($101+76)|0);
      var $102=$bf_field_offs48;
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 & -268435457;
      var $105=$104 | 268435456;
      HEAP32[(($102)>>2)]=$105;
      var $106=$facetA_addr;
      var $normal49=(($106+24)|0);
      var $107=HEAP32[(($normal49)>>2)];
      var $108=HEAP32[((((5247508)|0))>>2)];
      var $call50=_qh_copypoints($107, 1, $108);
      var $109=$newfacet;
      var $normal51=(($109+24)|0);
      HEAP32[(($normal51)>>2)]=$call50;
      var $110=HEAP32[((((5249036)|0))>>2)];
      var $cmp52=(($110)|0)==2;
      if ($cmp52) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $111=$newfacet;
      var $call54=_qh_getcentrum($111);
      var $112=$newfacet;
      var $center55=(($112+36)|0);
      HEAP32[(($center55)>>2)]=$call54;
      label = 26; break;
    case 25: 
      var $113=$facetA_addr;
      var $center56=(($113+36)|0);
      var $114=HEAP32[(($center56)>>2)];
      var $115=HEAP32[((((5247508)|0))>>2)];
      var $call57=_qh_copypoints($114, 1, $115);
      var $116=$newfacet;
      var $center58=(($116+36)|0);
      HEAP32[(($center58)>>2)]=$call57;
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      var $117=$newfacet;
      var $118=$117;
      var $bf_field_offs61=(($118+76)|0);
      var $119=$bf_field_offs61;
      var $120=HEAP32[(($119)>>2)];
      var $121=$120 & -268435457;
      HEAP32[(($119)>>2)]=$121;
      var $122=$facetA_addr;
      var $normal62=(($122+24)|0);
      var $123=HEAP32[(($normal62)>>2)];
      var $124=$newfacet;
      var $normal63=(($124+24)|0);
      HEAP32[(($normal63)>>2)]=$123;
      var $125=$facetA_addr;
      var $center64=(($125+36)|0);
      var $126=HEAP32[(($center64)>>2)];
      var $127=$newfacet;
      var $center65=(($127+36)|0);
      HEAP32[(($center65)>>2)]=$126;
      label = 28; break;
    case 28: 
      var $128=$facetA_addr;
      var $offset=(($128+16)|0);
      var $129=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($offset)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($offset)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $130=$newfacet;
      var $offset67=(($130+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$129,HEAP32[(($offset67)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($offset67)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $131=$facetA_addr;
      var $maxoutside=(($131+8)|0);
      var $132=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($maxoutside)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($maxoutside)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $133=$newfacet;
      var $maxoutside68=(($133+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$132,HEAP32[(($maxoutside68)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($maxoutside68)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 29; break;
    case 29: 
      var $134=$newfacet;
      var $next69=(($134+44)|0);
      var $135=HEAP32[(($next69)>>2)];
      $newfacet=$135;
      label = 19; break;
    case 30: 
      _qh_matchnewfacets();
      var $136=HEAP32[(((((5244628)|0)))>>2)];
      var $inc=((($136)+(1))|0);
      HEAP32[(((((5244628)|0)))>>2)]=$inc;
      var $137=HEAP32[(($numnew)>>2)];
      var $138=HEAP32[(((((5244644)|0)))>>2)];
      var $add=((($138)+($137))|0);
      HEAP32[(((((5244644)|0)))>>2)]=$add;
      var $139=HEAP32[(((((5244636)|0)))>>2)];
      var $140=HEAP32[(($numnew)>>2)];
      var $cmp71=(($139)|0) < (($140)|0);
      if ($cmp71) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $141=HEAP32[(($numnew)>>2)];
      HEAP32[(((((5244636)|0)))>>2)]=$141;
      label = 32; break;
    case 32: 
      HEAP32[((((5248960)|0))>>2)]=0;
      var $142=$first_vertex_addr;
      var $143=HEAP32[(($142)>>2)];
      var $tobool74=(($143)|0)!=0;
      if ($tobool74) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $144=HEAP32[((((5248992)|0))>>2)];
      var $145=$first_vertex_addr;
      HEAP32[(($145)>>2)]=$144;
      label = 34; break;
    case 34: 
      HEAP32[((((5248992)|0))>>2)]=0;
      _qh_updatevertices();
      _qh_resetlists(0, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_triangulate_facet["X"]=1;

function _qh_triangulate_null($facetA) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetA_addr;
      var $neighbor;
      var $otherfacet;
      $facetA_addr=$facetA;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facetA_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      _qh_fprintf($1, 3023, ((5293080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 4; break;
    case 4: 
      var $4=$facetA_addr;
      var $neighbors=(($4+56)|0);
      var $5=HEAP32[(($neighbors)>>2)];
      var $e=(($5+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      $neighbor=$7;
      var $8=$facetA_addr;
      var $neighbors1=(($8+56)|0);
      var $9=HEAP32[(($neighbors1)>>2)];
      var $e2=(($9+4)|0);
      var $arrayidx3=(($e2+4)|0);
      var $p4=$arrayidx3;
      var $10=HEAP32[(($p4)>>2)];
      var $11=$10;
      $otherfacet=$11;
      var $12=$facetA_addr;
      var $13=$neighbor;
      var $14=$facetA_addr;
      var $15=$otherfacet;
      _qh_triangulate_link($12, $13, $14, $15);
      var $16=$facetA_addr;
      _qh_willdelete($16, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_triangulate_mirror($facetA, $facetB) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetA_addr;
      var $facetB_addr;
      var $neighbor;
      var $neighborB;
      var $neighbor_i;
      var $neighbor_n;
      $facetA_addr=$facetA;
      $facetB_addr=$facetB;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$facetA_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$facetB_addr;
      var $id1=(($4+72)|0);
      var $5=HEAP32[(($id1)>>2)];
      _qh_fprintf($1, 3022, ((5293284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      $neighbor=0;
      var $6=$facetA_addr;
      var $neighbors=(($6+56)|0);
      var $7=HEAP32[(($neighbors)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 12; break; }
    case 5: 
      $neighbor_i=0;
      var $8=$facetA_addr;
      var $neighbors3=(($8+56)|0);
      var $9=HEAP32[(($neighbors3)>>2)];
      var $e=(($9+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $10=HEAP32[(($p)>>2)];
      var $11=$10;
      $neighbor=$11;
      var $12=$facetA_addr;
      var $neighbors4=(($12+56)|0);
      var $13=HEAP32[(($neighbors4)>>2)];
      var $call=_qh_setsize($13);
      $neighbor_n=$call;
      label = 6; break;
    case 6: 
      var $14=$neighbor_i;
      var $15=$neighbor_n;
      var $cmp5=(($14)|0) < (($15)|0);
      if ($cmp5) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $16=$neighbor_i;
      var $17=$facetB_addr;
      var $neighbors6=(($17+56)|0);
      var $18=HEAP32[(($neighbors6)>>2)];
      var $e7=(($18+4)|0);
      var $arrayidx8=(($e7+($16<<2))|0);
      var $p9=$arrayidx8;
      var $19=HEAP32[(($p9)>>2)];
      var $20=$19;
      $neighborB=$20;
      var $21=$neighbor;
      var $22=$neighborB;
      var $cmp10=(($21)|0)==(($22)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $23=$facetA_addr;
      var $24=$neighbor;
      var $25=$facetB_addr;
      var $26=$neighborB;
      _qh_triangulate_link($23, $24, $25, $26);
      label = 10; break;
    case 10: 
      var $27=$neighbor_i;
      var $inc=((($27)+(1))|0);
      $neighbor_i=$inc;
      var $28=$facetA_addr;
      var $neighbors13=(($28+56)|0);
      var $29=HEAP32[(($neighbors13)>>2)];
      var $e14=(($29+4)|0);
      var $arrayidx15=(($e14+($inc<<2))|0);
      var $p16=$arrayidx15;
      var $30=HEAP32[(($p16)>>2)];
      var $31=$30;
      $neighbor=$31;
      label = 6; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $32=$facetA_addr;
      _qh_willdelete($32, 0);
      var $33=$facetB_addr;
      _qh_willdelete($33, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_triangulate_mirror["X"]=1;

function _qh_triangulate_link($oldfacetA, $facetA, $oldfacetB, $facetB) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $oldfacetA_addr;
      var $facetA_addr;
      var $oldfacetB_addr;
      var $facetB_addr;
      var $errmirror;
      $oldfacetA_addr=$oldfacetA;
      $facetA_addr=$facetA;
      $oldfacetB_addr=$oldfacetB;
      $facetB_addr=$facetB;
      $errmirror=0;
      var $0=HEAP32[((((5247040)|0))>>2)];
      var $cmp=(($0)|0) >= 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$oldfacetA_addr;
      var $id=(($2+72)|0);
      var $3=HEAP32[(($id)>>2)];
      var $4=$oldfacetB_addr;
      var $id1=(($4+72)|0);
      var $5=HEAP32[(($id1)>>2)];
      var $6=$facetA_addr;
      var $id2=(($6+72)|0);
      var $7=HEAP32[(($id2)>>2)];
      var $8=$facetB_addr;
      var $id3=(($8+72)|0);
      var $9=HEAP32[(($id3)>>2)];
      _qh_fprintf($1, 3021, ((5293592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$5,HEAP32[(((tempInt)+(8))>>2)]=$7,HEAP32[(((tempInt)+(12))>>2)]=$9,tempInt));
      label = 4; break;
    case 4: 
      var $10=$facetA_addr;
      var $neighbors=(($10+56)|0);
      var $11=HEAP32[(($neighbors)>>2)];
      var $12=$facetB_addr;
      var $13=$12;
      var $call=_qh_setin($11, $13);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $14=$facetB_addr;
      var $neighbors5=(($14+56)|0);
      var $15=HEAP32[(($neighbors5)>>2)];
      var $16=$facetA_addr;
      var $17=$16;
      var $call6=_qh_setin($15, $17);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $errmirror=1;
      label = 8; break;
    case 7: 
      var $18=$facetA_addr;
      var $19=$facetB_addr;
      _qh_appendmergeset($18, $19, 8, 0);
      label = 8; break;
    case 8: 
      label = 12; break;
    case 9: 
      var $20=$facetB_addr;
      var $neighbors11=(($20+56)|0);
      var $21=HEAP32[(($neighbors11)>>2)];
      var $22=$facetA_addr;
      var $23=$22;
      var $call12=_qh_setin($21, $23);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $errmirror=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $24=$errmirror;
      var $tobool17=(($24)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $25=HEAP32[((((5248924)|0))>>2)];
      var $26=$facetA_addr;
      var $id19=(($26+72)|0);
      var $27=HEAP32[(($id19)>>2)];
      var $28=$facetB_addr;
      var $id20=(($28+72)|0);
      var $29=HEAP32[(($id20)>>2)];
      var $30=$oldfacetA_addr;
      var $id21=(($30+72)|0);
      var $31=HEAP32[(($id21)>>2)];
      var $32=$oldfacetB_addr;
      var $id22=(($32+72)|0);
      var $33=HEAP32[(($id22)>>2)];
      _qh_fprintf($25, 6163, ((5293440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$29,HEAP32[(((tempInt)+(8))>>2)]=$31,HEAP32[(((tempInt)+(12))>>2)]=$33,tempInt));
      var $34=$facetA_addr;
      var $35=$facetB_addr;
      _qh_errexit2(5, $34, $35);
      label = 14; break;
    case 14: 
      var $36=$facetB_addr;
      var $neighbors24=(($36+56)|0);
      var $37=HEAP32[(($neighbors24)>>2)];
      var $38=$oldfacetB_addr;
      var $39=$38;
      var $40=$facetA_addr;
      var $41=$40;
      _qh_setreplace($37, $39, $41);
      var $42=$facetA_addr;
      var $neighbors25=(($42+56)|0);
      var $43=HEAP32[(($neighbors25)>>2)];
      var $44=$oldfacetA_addr;
      var $45=$44;
      var $46=$facetB_addr;
      var $47=$46;
      _qh_setreplace($43, $45, $47);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_triangulate_link["X"]=1;

function _qh_vertexintersect($vertexsetA, $vertexsetB) {
  var label = 0;


  var $vertexsetA_addr;
  var $vertexsetB_addr;
  var $intersection;
  $vertexsetA_addr=$vertexsetA;
  $vertexsetB_addr=$vertexsetB;
  var $0=$vertexsetA_addr;
  var $1=HEAP32[(($0)>>2)];
  var $2=$vertexsetB_addr;
  var $call=_qh_vertexintersect_new($1, $2);
  $intersection=$call;
  var $3=$vertexsetA_addr;
  _qh_settempfree($3);
  var $4=$intersection;
  var $5=$vertexsetA_addr;
  HEAP32[(($5)>>2)]=$4;
  var $6=$intersection;
  _qh_settemppush($6);

  return;
}


function _qh_setaddnth($setp, $nth, $newelem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $nth_addr;
      var $newelem_addr;
      var $oldsize;
      var $i;
      var $sizep;
      var $oldp;
      var $newp;
      $setp_addr=$setp;
      $nth_addr=$nth;
      $newelem_addr=$newelem;
      var $0=$setp_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$setp_addr;
      var $3=HEAP32[(($2)>>2)];
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $5=$setp_addr;
      var $6=HEAP32[(($5)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e+($4<<2))|0);
      $sizep=$arrayidx;
      var $i1=$arrayidx;
      var $7=HEAP32[(($i1)>>2)];
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$setp_addr;
      _qh_setlarger($8);
      var $9=$setp_addr;
      var $10=HEAP32[(($9)>>2)];
      var $maxsize2=(($10)|0);
      var $11=HEAP32[(($maxsize2)>>2)];
      var $12=$setp_addr;
      var $13=HEAP32[(($12)>>2)];
      var $e3=(($13+4)|0);
      var $arrayidx4=(($e3+($11<<2))|0);
      $sizep=$arrayidx4;
      label = 5; break;
    case 5: 
      var $14=$sizep;
      var $i5=$14;
      var $15=HEAP32[(($i5)>>2)];
      var $sub=((($15)-(1))|0);
      $oldsize=$sub;
      var $16=$nth_addr;
      var $cmp6=(($16)|0) < 0;
      if ($cmp6) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$nth_addr;
      var $18=$oldsize;
      var $cmp8=(($17)|0) > (($18)|0);
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=HEAP32[((((5242932)|0))>>2)];
      var $20=$nth_addr;
      _qh_fprintf($19, 6171, ((5304088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
      var $21=HEAP32[((((5242932)|0))>>2)];
      var $22=$setp_addr;
      var $23=HEAP32[(($22)>>2)];
      _qh_setprint($21, ((5301696)|0), $23);
      _qh_errexit(5, 0, 0);
      label = 8; break;
    case 8: 
      var $24=$sizep;
      var $i11=$24;
      var $25=HEAP32[(($i11)>>2)];
      var $inc=((($25)+(1))|0);
      HEAP32[(($i11)>>2)]=$inc;
      var $26=$oldsize;
      var $27=$setp_addr;
      var $28=HEAP32[(($27)>>2)];
      var $e12=(($28+4)|0);
      var $arrayidx13=(($e12+($26<<2))|0);
      var $p=$arrayidx13;
      var $29=$p;
      $oldp=$29;
      var $30=$oldp;
      var $add_ptr=(($30+4)|0);
      $newp=$add_ptr;
      var $31=$oldsize;
      var $32=$nth_addr;
      var $sub14=((($31)-($32))|0);
      var $add=((($sub14)+(1))|0);
      $i=$add;
      label = 9; break;
    case 9: 
      var $33=$i;
      var $dec=((($33)-(1))|0);
      $i=$dec;
      var $tobool15=(($33)|0)!=0;
      if ($tobool15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=$oldp;
      var $incdec_ptr=((($34)-(4))|0);
      $oldp=$incdec_ptr;
      var $p16=$34;
      var $35=HEAP32[(($p16)>>2)];
      var $36=$newp;
      var $incdec_ptr17=((($36)-(4))|0);
      $newp=$incdec_ptr17;
      var $p18=$36;
      HEAP32[(($p18)>>2)]=$35;
      label = 9; break;
    case 11: 
      var $37=$newelem_addr;
      var $38=$newp;
      var $p19=$38;
      HEAP32[(($p19)>>2)]=$37;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setaddnth["X"]=1;

function _qh_setlarger($oldsetp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $oldsetp_addr;
      var $size;
      var $newset;
      var $set;
      var $setp;
      var $oldset;
      var $sizep;
      var $newp;
      var $oldp;
      $oldsetp_addr=$oldsetp;
      $size=1;
      var $0=$oldsetp_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $2=$oldsetp_addr;
      var $3=HEAP32[(($2)>>2)];
      $oldset=$3;
      var $4=$oldset;
      var $maxsize=(($4)|0);
      var $5=HEAP32[(($maxsize)>>2)];
      var $6=$oldset;
      var $e=(($6+4)|0);
      var $arrayidx=(($e+($5<<2))|0);
      var $i=$arrayidx;
      var $7=HEAP32[(($i)>>2)];
      $size=$7;
      var $tobool1=(($7)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$size;
      var $dec=((($8)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 6; break;
    case 5: 
      var $9=$oldset;
      var $maxsize2=(($9)|0);
      var $10=HEAP32[(($maxsize2)>>2)];
      $size=$10;
      var $cond = $10;label = 6; break;
    case 6: 
      var $cond;
      var $11=HEAP32[((((5242988)|0))>>2)];
      var $inc=((($11)+(1))|0);
      HEAP32[((((5242988)|0))>>2)]=$inc;
      var $12=$size;
      var $add=((($12)+(1))|0);
      var $13=HEAP32[((((5242992)|0))>>2)];
      var $add3=((($13)+($add))|0);
      HEAP32[((((5242992)|0))>>2)]=$add3;
      var $14=$size;
      var $mul=((($14<<1))&-1);
      var $call=_qh_setnew($mul);
      $newset=$call;
      var $15=$oldset;
      var $e4=(($15+4)|0);
      var $arrayidx5=(($e4)|0);
      var $p=$arrayidx5;
      var $16=$p;
      $oldp=$16;
      var $17=$newset;
      var $e6=(($17+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $18=$p8;
      $newp=$18;
      var $19=$newp;
      var $20=$19;
      var $21=$oldp;
      var $22=$21;
      var $23=$size;
      var $add9=((($23)+(1))|0);
      var $mul10=((($add9<<2))&-1);
      assert($mul10 % 1 === 0);_memcpy($20, $22, $mul10);
      var $24=$newset;
      var $maxsize11=(($24)|0);
      var $25=HEAP32[(($maxsize11)>>2)];
      var $26=$newset;
      var $e12=(($26+4)|0);
      var $arrayidx13=(($e12+($25<<2))|0);
      $sizep=$arrayidx13;
      var $27=$size;
      var $add14=((($27)+(1))|0);
      var $28=$sizep;
      var $i15=$28;
      HEAP32[(($i15)>>2)]=$add14;
      $set=0;
      var $29=HEAP32[((((5242928)|0))>>2)];
      var $tobool16=(($29)|0)!=0;
      if ($tobool16) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $30=HEAP32[((((5242928)|0))>>2)];
      var $e18=(($30+4)|0);
      var $arrayidx19=(($e18)|0);
      var $p20=$arrayidx19;
      var $31=$p20;
      $setp=$31;
      label = 8; break;
    case 8: 
      var $32=$setp;
      var $incdec_ptr=(($32+4)|0);
      $setp=$incdec_ptr;
      var $33=HEAP32[(($32)>>2)];
      $set=$33;
      var $tobool21=(($33)|0)!=0;
      if ($tobool21) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $34=$set;
      var $35=$oldset;
      var $cmp=(($34)|0)==(($35)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $36=$newset;
      var $37=$setp;
      var $add_ptr=((($37)-(4))|0);
      HEAP32[(($add_ptr)>>2)]=$36;
      label = 11; break;
    case 11: 
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $38=$oldsetp_addr;
      _qh_setfree($38);
      label = 15; break;
    case 14: 
      var $call24=_qh_setnew(3);
      $newset=$call24;
      label = 15; break;
    case 15: 
      var $39=$newset;
      var $40=$oldsetp_addr;
      HEAP32[(($40)>>2)]=$39;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setlarger["X"]=1;

function _qh_setprint($fp, $string, $set) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $set_addr;
      var $size;
      var $k;
      $fp_addr=$fp;
      $string_addr=$string;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$fp_addr;
      var $2=$string_addr;
      _qh_fprintf($1, 9346, ((5254600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      label = 14; break;
    case 4: 
      var $3=$set_addr;
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $5=$set_addr;
      var $e=(($5+4)|0);
      var $arrayidx=(($e+($4<<2))|0);
      var $i=$arrayidx;
      var $6=HEAP32[(($i)>>2)];
      $size=$6;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$size;
      var $dec=((($7)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $8=$set_addr;
      var $maxsize2=(($8)|0);
      var $9=HEAP32[(($maxsize2)>>2)];
      $size=$9;
      var $cond = $9;label = 7; break;
    case 7: 
      var $cond;
      var $10=$fp_addr;
      var $11=$string_addr;
      var $12=$set_addr;
      var $13=$set_addr;
      var $maxsize3=(($13)|0);
      var $14=HEAP32[(($maxsize3)>>2)];
      var $15=$size;
      _qh_fprintf($10, 9347, ((5251888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,HEAP32[(((tempInt)+(8))>>2)]=$14,HEAP32[(((tempInt)+(12))>>2)]=$15,tempInt));
      var $16=$size;
      var $17=$set_addr;
      var $maxsize4=(($17)|0);
      var $18=HEAP32[(($maxsize4)>>2)];
      var $cmp=(($16)|0) > (($18)|0);
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$set_addr;
      var $maxsize6=(($19)|0);
      var $20=HEAP32[(($maxsize6)>>2)];
      var $add=((($20)+(1))|0);
      $size=$add;
      label = 9; break;
    case 9: 
      $k=0;
      label = 10; break;
    case 10: 
      var $21=$k;
      var $22=$size;
      var $cmp7=(($21)|0) < (($22)|0);
      if ($cmp7) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $23=$fp_addr;
      var $24=$k;
      var $25=$set_addr;
      var $e8=(($25+4)|0);
      var $arrayidx9=(($e8+($24<<2))|0);
      var $p=$arrayidx9;
      var $26=HEAP32[(($p)>>2)];
      _qh_fprintf($23, 9348, ((5304024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,tempInt));
      label = 12; break;
    case 12: 
      var $27=$k;
      var $inc=((($27)+(1))|0);
      $k=$inc;
      label = 10; break;
    case 13: 
      var $28=$fp_addr;
      _qh_fprintf($28, 9349, ((5301492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setprint["X"]=1;

function _qh_setappend($setp, $newelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $newelem_addr;
      var $sizep;
      var $endp;
      var $count;
      $setp_addr=$setp;
      $newelem_addr=$newelem;
      var $0=$newelem_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 8; break;
    case 4: 
      var $1=$setp_addr;
      var $2=HEAP32[(($1)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$setp_addr;
      var $4=HEAP32[(($3)>>2)];
      var $maxsize=(($4)|0);
      var $5=HEAP32[(($maxsize)>>2)];
      var $6=$setp_addr;
      var $7=HEAP32[(($6)>>2)];
      var $e=(($7+4)|0);
      var $arrayidx=(($e+($5<<2))|0);
      $sizep=$arrayidx;
      var $i=$arrayidx;
      var $8=HEAP32[(($i)>>2)];
      var $cmp=(($8)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$setp_addr;
      _qh_setlarger($9);
      var $10=$setp_addr;
      var $11=HEAP32[(($10)>>2)];
      var $maxsize3=(($11)|0);
      var $12=HEAP32[(($maxsize3)>>2)];
      var $13=$setp_addr;
      var $14=HEAP32[(($13)>>2)];
      var $e4=(($14+4)|0);
      var $arrayidx5=(($e4+($12<<2))|0);
      $sizep=$arrayidx5;
      label = 7; break;
    case 7: 
      var $15=$sizep;
      var $i7=$15;
      var $16=HEAP32[(($i7)>>2)];
      var $inc=((($16)+(1))|0);
      HEAP32[(($i7)>>2)]=$inc;
      var $sub=((($16)-(1))|0);
      $count=$sub;
      var $17=$count;
      var $18=$setp_addr;
      var $19=HEAP32[(($18)>>2)];
      var $e8=(($19+4)|0);
      var $arrayidx9=(($e8+($17<<2))|0);
      var $p=$arrayidx9;
      var $20=$p;
      $endp=$20;
      var $21=$newelem_addr;
      var $22=$endp;
      var $incdec_ptr=(($22+4)|0);
      $endp=$incdec_ptr;
      var $p10=$22;
      HEAP32[(($p10)>>2)]=$21;
      var $23=$endp;
      var $p11=$23;
      HEAP32[(($p11)>>2)]=0;
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setappend["X"]=1;

function _qh_setappend_set($setp, $setA) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $setA_addr;
      var $sizeA;
      var $size;
      var $oldset=__stackBase__;
      var $sizep;
      $setp_addr=$setp;
      $setA_addr=$setA;
      var $0=$setA_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 16; break;
    case 4: 
      var $1=$setA_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$setA_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $sizeA=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$sizeA;
      var $dec=((($5)-(1))|0);
      $sizeA=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $6=$setA_addr;
      var $maxsize2=(($6)|0);
      var $7=HEAP32[(($maxsize2)>>2)];
      $sizeA=$7;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$setp_addr;
      var $9=HEAP32[(($8)>>2)];
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $10=$sizeA;
      var $call=_qh_setnew($10);
      var $11=$setp_addr;
      HEAP32[(($11)>>2)]=$call;
      label = 9; break;
    case 9: 
      var $12=$setp_addr;
      var $13=HEAP32[(($12)>>2)];
      var $maxsize6=(($13)|0);
      var $14=HEAP32[(($maxsize6)>>2)];
      var $15=$setp_addr;
      var $16=HEAP32[(($15)>>2)];
      var $e7=(($16+4)|0);
      var $arrayidx8=(($e7+($14<<2))|0);
      $sizep=$arrayidx8;
      var $17=$sizep;
      var $i9=$17;
      var $18=HEAP32[(($i9)>>2)];
      $size=$18;
      var $tobool10=(($18)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $19=$setp_addr;
      var $20=HEAP32[(($19)>>2)];
      var $maxsize12=(($20)|0);
      var $21=HEAP32[(($maxsize12)>>2)];
      $size=$21;
      label = 12; break;
    case 11: 
      var $22=$size;
      var $dec13=((($22)-(1))|0);
      $size=$dec13;
      label = 12; break;
    case 12: 
      var $23=$size;
      var $24=$sizeA;
      var $add=((($23)+($24))|0);
      var $25=$setp_addr;
      var $26=HEAP32[(($25)>>2)];
      var $maxsize15=(($26)|0);
      var $27=HEAP32[(($maxsize15)>>2)];
      var $cmp=(($add)|0) > (($27)|0);
      if ($cmp) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$setp_addr;
      var $29=HEAP32[(($28)>>2)];
      HEAP32[(($oldset)>>2)]=$29;
      var $30=HEAP32[(($oldset)>>2)];
      var $31=$sizeA;
      var $call17=_qh_setcopy($30, $31);
      var $32=$setp_addr;
      HEAP32[(($32)>>2)]=$call17;
      _qh_setfree($oldset);
      var $33=$setp_addr;
      var $34=HEAP32[(($33)>>2)];
      var $maxsize18=(($34)|0);
      var $35=HEAP32[(($maxsize18)>>2)];
      var $36=$setp_addr;
      var $37=HEAP32[(($36)>>2)];
      var $e19=(($37+4)|0);
      var $arrayidx20=(($e19+($35<<2))|0);
      $sizep=$arrayidx20;
      label = 14; break;
    case 14: 
      var $38=$sizeA;
      var $cmp22=(($38)|0) > 0;
      if ($cmp22) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $39=$size;
      var $40=$sizeA;
      var $add24=((($39)+($40))|0);
      var $add25=((($add24)+(1))|0);
      var $41=$sizep;
      var $i26=$41;
      HEAP32[(($i26)>>2)]=$add25;
      var $42=$size;
      var $43=$setp_addr;
      var $44=HEAP32[(($43)>>2)];
      var $e27=(($44+4)|0);
      var $arrayidx28=(($e27+($42<<2))|0);
      var $p=$arrayidx28;
      var $45=$p;
      var $46=$setA_addr;
      var $e29=(($46+4)|0);
      var $arrayidx30=(($e29)|0);
      var $p31=$arrayidx30;
      var $47=$p31;
      var $48=$sizeA;
      var $add32=((($48)+(1))|0);
      var $mul=((($add32<<2))&-1);
      assert($mul % 1 === 0);_memcpy($45, $47, $mul);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setappend_set["X"]=1;

function _qh_setnew($setsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setsize_addr;
      var $set;
      var $sizereceived;
      var $size;
      var $freelistp;
      $setsize_addr=$setsize;
      var $0=$setsize_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$setsize_addr;
      var $inc=((($1)+(1))|0);
      $setsize_addr=$inc;
      label = 4; break;
    case 4: 
      var $2=$setsize_addr;
      var $mul=((($2<<2))&-1);
      var $add=((($mul)+(8))|0);
      $size=$add;
      var $3=$size;
      var $cmp=(($3)|0) > 0;
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $4=$size;
      var $5=HEAP32[((((5242896)|0))>>2)];
      var $cmp1=(($4)|0) <= (($5)|0);
      if ($cmp1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      $freelistp=0;
      var $6=$size;
      var $call=_qh_memalloc($6);
      var $7=$call;
      $set=$7;
      var $8=$size;
      var $9=HEAP32[((((5242912)|0))>>2)];
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $11=HEAP32[((((5242908)|0))>>2)];
      var $arrayidx3=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      $sizereceived=$12;
      var $13=$sizereceived;
      var $14=$size;
      var $cmp4=(($13)|0) > (($14)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$sizereceived;
      var $16=$size;
      var $sub=((($15)-($16))|0);
      var $div=((((($sub)|0))/(4))&-1);
      var $17=$setsize_addr;
      var $add6=((($17)+($div))|0);
      $setsize_addr=$add6;
      label = 8; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $18=$size;
      var $call8=_qh_memalloc($18);
      var $19=$call8;
      $set=$19;
      label = 10; break;
    case 10: 
      var $20=$setsize_addr;
      var $21=$set;
      var $maxsize=(($21)|0);
      HEAP32[(($maxsize)>>2)]=$20;
      var $22=$setsize_addr;
      var $23=$set;
      var $e=(($23+4)|0);
      var $arrayidx10=(($e+($22<<2))|0);
      var $i=$arrayidx10;
      HEAP32[(($i)>>2)]=1;
      var $24=$set;
      var $e11=(($24+4)|0);
      var $arrayidx12=(($e11)|0);
      var $p=$arrayidx12;
      HEAP32[(($p)>>2)]=0;
      var $25=$set;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setnew["X"]=1;

function _qh_setcopy($set, $extra) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $extra_addr;
      var $newset;
      var $size;
      $set_addr=$set;
      $extra_addr=$extra;
      var $0=$extra_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $extra_addr=0;
      label = 4; break;
    case 4: 
      var $1=$set_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $size=$4;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$size;
      var $dec=((($5)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $6=$set_addr;
      var $maxsize1=(($6)|0);
      var $7=HEAP32[(($maxsize1)>>2)];
      $size=$7;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$size;
      var $9=$extra_addr;
      var $add=((($8)+($9))|0);
      var $call=_qh_setnew($add);
      $newset=$call;
      var $10=$size;
      var $add2=((($10)+(1))|0);
      var $11=$newset;
      var $maxsize3=(($11)|0);
      var $12=HEAP32[(($maxsize3)>>2)];
      var $13=$newset;
      var $e4=(($13+4)|0);
      var $arrayidx5=(($e4+($12<<2))|0);
      var $i6=$arrayidx5;
      HEAP32[(($i6)>>2)]=$add2;
      var $14=$newset;
      var $e7=(($14+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p=$arrayidx8;
      var $15=$p;
      var $16=$set_addr;
      var $e9=(($16+4)|0);
      var $arrayidx10=(($e9)|0);
      var $p11=$arrayidx10;
      var $17=$p11;
      var $18=$size;
      var $add12=((($18)+(1))|0);
      var $mul=((($add12<<2))&-1);
      assert($mul % 1 === 0);_memcpy($15, $17, $mul);
      var $19=$newset;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setcopy["X"]=1;

function _qh_setfree($setp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $size;
      var $freelistp;
      $setp_addr=$setp;
      var $0=$setp_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$setp_addr;
      var $3=HEAP32[(($2)>>2)];
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $mul=((($4<<2))&-1);
      var $add=((($mul)+(8))|0);
      $size=$add;
      var $5=$size;
      var $6=HEAP32[((((5242896)|0))>>2)];
      var $cmp=(($5)|0) <= (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $freelistp=0;
      var $7=$setp_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=$size;
      _qh_memfree($9, $10);
      label = 6; break;
    case 5: 
      var $11=$setp_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=$size;
      _qh_memfree($13, $14);
      label = 6; break;
    case 6: 
      var $15=$setp_addr;
      HEAP32[(($15)>>2)]=0;
      label = 7; break;
    case 7: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setappend2ndlast($setp, $newelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $newelem_addr;
      var $sizep;
      var $endp;
      var $lastp;
      var $count;
      $setp_addr=$setp;
      $newelem_addr=$newelem;
      var $0=$setp_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$setp_addr;
      var $3=HEAP32[(($2)>>2)];
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $5=$setp_addr;
      var $6=HEAP32[(($5)>>2)];
      var $e=(($6+4)|0);
      var $arrayidx=(($e+($4<<2))|0);
      $sizep=$arrayidx;
      var $i=$arrayidx;
      var $7=HEAP32[(($i)>>2)];
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$setp_addr;
      _qh_setlarger($8);
      var $9=$setp_addr;
      var $10=HEAP32[(($9)>>2)];
      var $maxsize1=(($10)|0);
      var $11=HEAP32[(($maxsize1)>>2)];
      var $12=$setp_addr;
      var $13=HEAP32[(($12)>>2)];
      var $e2=(($13+4)|0);
      var $arrayidx3=(($e2+($11<<2))|0);
      $sizep=$arrayidx3;
      label = 5; break;
    case 5: 
      var $14=$sizep;
      var $i4=$14;
      var $15=HEAP32[(($i4)>>2)];
      var $inc=((($15)+(1))|0);
      HEAP32[(($i4)>>2)]=$inc;
      var $sub=((($15)-(1))|0);
      $count=$sub;
      var $16=$count;
      var $17=$setp_addr;
      var $18=HEAP32[(($17)>>2)];
      var $e5=(($18+4)|0);
      var $arrayidx6=(($e5+($16<<2))|0);
      var $p=$arrayidx6;
      var $19=$p;
      $endp=$19;
      var $20=$endp;
      var $add_ptr=((($20)-(4))|0);
      $lastp=$add_ptr;
      var $21=$endp;
      var $incdec_ptr=(($21+4)|0);
      $endp=$incdec_ptr;
      var $22=$lastp;
      var $23=$21;
      var $24=$22;
      assert(4 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];
      var $25=$endp;
      var $p7=$25;
      HEAP32[(($p7)>>2)]=0;
      var $26=$newelem_addr;
      var $27=$lastp;
      var $p8=$27;
      HEAP32[(($p8)>>2)]=$26;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setappend2ndlast["X"]=1;

function _qh_setcheck($set, $tname, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $tname_addr;
      var $id_addr;
      var $maxsize;
      var $size;
      var $waserr;
      $set_addr=$set;
      $tname_addr=$tname;
      $id_addr=$id;
      $waserr=0;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 15; break;
    case 4: 
      var $1=$set_addr;
      var $maxsize1=(($1)|0);
      var $2=HEAP32[(($maxsize1)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $size=$4;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$size;
      var $dec=((($5)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $6=$set_addr;
      var $maxsize3=(($6)|0);
      var $7=HEAP32[(($maxsize3)>>2)];
      $size=$7;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$set_addr;
      var $maxsize4=(($8)|0);
      var $9=HEAP32[(($maxsize4)>>2)];
      $maxsize=$9;
      var $10=$size;
      var $11=$maxsize;
      var $cmp=(($10)|0) > (($11)|0);
      if ($cmp) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $12=$maxsize;
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $13=HEAP32[((((5242932)|0))>>2)];
      var $14=$size;
      var $15=$tname_addr;
      var $16=$id_addr;
      var $17=$maxsize;
      _qh_fprintf($13, 6172, ((5282448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,HEAP32[(((tempInt)+(8))>>2)]=$16,HEAP32[(((tempInt)+(12))>>2)]=$17,tempInt));
      $waserr=1;
      label = 13; break;
    case 10: 
      var $18=$size;
      var $19=$set_addr;
      var $e7=(($19+4)|0);
      var $arrayidx8=(($e7+($18<<2))|0);
      var $p=$arrayidx8;
      var $20=HEAP32[(($p)>>2)];
      var $tobool9=(($20)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=HEAP32[((((5242932)|0))>>2)];
      var $22=$tname_addr;
      var $23=$id_addr;
      var $24=$size;
      var $sub=((($24)-(1))|0);
      var $25=$maxsize;
      _qh_fprintf($21, 6173, ((5274472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=$23,HEAP32[(((tempInt)+(8))>>2)]=$sub,HEAP32[(((tempInt)+(12))>>2)]=$25,tempInt));
      $waserr=1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$waserr;
      var $tobool13=(($26)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $27=HEAP32[((((5242932)|0))>>2)];
      var $28=$set_addr;
      _qh_setprint($27, ((5268432)|0), $28);
      _qh_errexit(5, 0, 0);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setcheck["X"]=1;

function _qh_setcompact($set) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $size;
      var $destp;
      var $elemp;
      var $endp;
      var $firstp;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 14; break;
    case 4: 
      var $1=$set_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $size=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$size;
      var $dec=((($5)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $6=$set_addr;
      var $maxsize2=(($6)|0);
      var $7=HEAP32[(($maxsize2)>>2)];
      $size=$7;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$set_addr;
      var $e3=(($8+4)|0);
      var $arrayidx4=(($e3)|0);
      var $p=$arrayidx4;
      $firstp=$p;
      $elemp=$p;
      $destp=$p;
      var $9=$destp;
      var $10=$size;
      var $add_ptr=(($9+($10<<2))|0);
      $endp=$add_ptr;
      label = 8; break;
    case 8: 
      var $11=$elemp;
      var $incdec_ptr=(($11+4)|0);
      $elemp=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$destp;
      var $incdec_ptr5=(($13+4)|0);
      $destp=$incdec_ptr5;
      HEAP32[(($13)>>2)]=$12;
      var $tobool6=(($12)|0)!=0;
      if ($tobool6) { label = 12; break; } else { label = 9; break; }
    case 9: 
      var $14=$destp;
      var $incdec_ptr8=((($14)-(4))|0);
      $destp=$incdec_ptr8;
      var $15=$elemp;
      var $16=$endp;
      var $cmp=(($15)>>>0) > (($16)>>>0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 8; break;
    case 13: 
      var $17=$set_addr;
      var $18=$destp;
      var $19=$firstp;
      var $sub_ptr_lhs_cast=$18;
      var $sub_ptr_rhs_cast=$19;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      _qh_settruncate($17, $sub_ptr_div);
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setcompact["X"]=1;

function _qh_settruncate($set, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $size_addr;
      $set_addr=$set;
      $size_addr=$size;
      var $0=$size_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$size_addr;
      var $2=$set_addr;
      var $maxsize=(($2)|0);
      var $3=HEAP32[(($maxsize)>>2)];
      var $cmp1=(($1)|0) > (($3)|0);
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=HEAP32[((((5242932)|0))>>2)];
      var $5=$size_addr;
      _qh_fprintf($4, 6181, ((5282288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=HEAP32[((((5242932)|0))>>2)];
      var $7=$set_addr;
      _qh_setprint($6, ((5301696)|0), $7);
      _qh_errexit(5, 0, 0);
      label = 5; break;
    case 5: 
      var $8=$size_addr;
      var $add=((($8)+(1))|0);
      var $9=$set_addr;
      var $maxsize2=(($9)|0);
      var $10=HEAP32[(($maxsize2)>>2)];
      var $11=$set_addr;
      var $e=(($11+4)|0);
      var $arrayidx=(($e+($10<<2))|0);
      var $i=$arrayidx;
      HEAP32[(($i)>>2)]=$add;
      var $12=$size_addr;
      var $13=$set_addr;
      var $e3=(($13+4)|0);
      var $arrayidx4=(($e3+($12<<2))|0);
      var $p=$arrayidx4;
      HEAP32[(($p)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setdel($set, $oldelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $oldelem_addr;
      var $sizep;
      var $elemp;
      var $lastp;
      $set_addr=$set;
      $oldelem_addr=$oldelem;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 14; break;
    case 4: 
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $elemp=$2;
      label = 5; break;
    case 5: 
      var $3=$elemp;
      var $p1=$3;
      var $4=HEAP32[(($p1)>>2)];
      var $5=$oldelem_addr;
      var $cmp=(($4)|0)!=(($5)|0);
      if ($cmp) { label = 6; break; } else { var $8 = 0;label = 7; break; }
    case 6: 
      var $6=$elemp;
      var $p2=$6;
      var $7=HEAP32[(($p2)>>2)];
      var $tobool3=(($7)|0)!=0;
      var $8 = $tobool3;label = 7; break;
    case 7: 
      var $8;
      if ($8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$elemp;
      var $incdec_ptr=(($9+4)|0);
      $elemp=$incdec_ptr;
      label = 5; break;
    case 9: 
      var $10=$elemp;
      var $p4=$10;
      var $11=HEAP32[(($p4)>>2)];
      var $tobool5=(($11)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $12=$set_addr;
      var $maxsize=(($12)|0);
      var $13=HEAP32[(($maxsize)>>2)];
      var $14=$set_addr;
      var $e7=(($14+4)|0);
      var $arrayidx8=(($e7+($13<<2))|0);
      $sizep=$arrayidx8;
      var $15=$sizep;
      var $i=$15;
      var $16=HEAP32[(($i)>>2)];
      var $dec=((($16)-(1))|0);
      HEAP32[(($i)>>2)]=$dec;
      var $tobool9=(($16)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $17=$set_addr;
      var $maxsize11=(($17)|0);
      var $18=HEAP32[(($maxsize11)>>2)];
      var $19=$sizep;
      var $i12=$19;
      HEAP32[(($i12)>>2)]=$18;
      label = 12; break;
    case 12: 
      var $20=$sizep;
      var $i14=$20;
      var $21=HEAP32[(($i14)>>2)];
      var $sub=((($21)-(1))|0);
      var $22=$set_addr;
      var $e15=(($22+4)|0);
      var $arrayidx16=(($e15+($sub<<2))|0);
      var $p17=$arrayidx16;
      var $23=$p17;
      $lastp=$23;
      var $24=$lastp;
      var $p18=$24;
      var $25=HEAP32[(($p18)>>2)];
      var $26=$elemp;
      var $p19=$26;
      HEAP32[(($p19)>>2)]=$25;
      var $27=$lastp;
      var $p20=$27;
      HEAP32[(($p20)>>2)]=0;
      var $28=$oldelem_addr;
      $retval=$28;
      label = 14; break;
    case 13: 
      $retval=0;
      label = 14; break;
    case 14: 
      var $29=$retval;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdel["X"]=1;

function _qh_setdellast($set) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $setsize;
      var $maxsize;
      var $sizep;
      var $returnvalue;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=HEAP32[(($p)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 9; break;
    case 5: 
      var $3=$set_addr;
      var $maxsize2=(($3)|0);
      var $4=HEAP32[(($maxsize2)>>2)];
      var $5=$set_addr;
      var $e3=(($5+4)|0);
      var $arrayidx4=(($e3+($4<<2))|0);
      $sizep=$arrayidx4;
      var $6=$sizep;
      var $i=$6;
      var $7=HEAP32[(($i)>>2)];
      $setsize=$7;
      var $tobool5=(($7)|0)!=0;
      if ($tobool5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$setsize;
      var $sub=((($8)-(2))|0);
      var $9=$set_addr;
      var $e7=(($9+4)|0);
      var $arrayidx8=(($e7+($sub<<2))|0);
      var $p9=$arrayidx8;
      var $10=HEAP32[(($p9)>>2)];
      $returnvalue=$10;
      var $11=$setsize;
      var $sub10=((($11)-(2))|0);
      var $12=$set_addr;
      var $e11=(($12+4)|0);
      var $arrayidx12=(($e11+($sub10<<2))|0);
      var $p13=$arrayidx12;
      HEAP32[(($p13)>>2)]=0;
      var $13=$sizep;
      var $i14=$13;
      var $14=HEAP32[(($i14)>>2)];
      var $dec=((($14)-(1))|0);
      HEAP32[(($i14)>>2)]=$dec;
      label = 8; break;
    case 7: 
      var $15=$set_addr;
      var $maxsize15=(($15)|0);
      var $16=HEAP32[(($maxsize15)>>2)];
      $maxsize=$16;
      var $17=$maxsize;
      var $sub16=((($17)-(1))|0);
      var $18=$set_addr;
      var $e17=(($18+4)|0);
      var $arrayidx18=(($e17+($sub16<<2))|0);
      var $p19=$arrayidx18;
      var $19=HEAP32[(($p19)>>2)];
      $returnvalue=$19;
      var $20=$maxsize;
      var $sub20=((($20)-(1))|0);
      var $21=$set_addr;
      var $e21=(($21+4)|0);
      var $arrayidx22=(($e21+($sub20<<2))|0);
      var $p23=$arrayidx22;
      HEAP32[(($p23)>>2)]=0;
      var $22=$maxsize;
      var $23=$sizep;
      var $i24=$23;
      HEAP32[(($i24)>>2)]=$22;
      label = 8; break;
    case 8: 
      var $24=$returnvalue;
      $retval=$24;
      label = 9; break;
    case 9: 
      var $25=$retval;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdellast["X"]=1;

function _qh_setdelsorted($set, $oldelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $oldelem_addr;
      var $sizep;
      var $newp;
      var $oldp;
      $set_addr=$set;
      $oldelem_addr=$oldelem;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 17; break;
    case 4: 
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $newp=$2;
      label = 5; break;
    case 5: 
      var $3=$newp;
      var $p1=$3;
      var $4=HEAP32[(($p1)>>2)];
      var $5=$oldelem_addr;
      var $cmp=(($4)|0)!=(($5)|0);
      if ($cmp) { label = 6; break; } else { var $8 = 0;label = 7; break; }
    case 6: 
      var $6=$newp;
      var $p2=$6;
      var $7=HEAP32[(($p2)>>2)];
      var $tobool3=(($7)|0)!=0;
      var $8 = $tobool3;label = 7; break;
    case 7: 
      var $8;
      if ($8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$newp;
      var $incdec_ptr=(($9+4)|0);
      $newp=$incdec_ptr;
      label = 5; break;
    case 9: 
      var $10=$newp;
      var $p4=$10;
      var $11=HEAP32[(($p4)>>2)];
      var $tobool5=(($11)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $12=$newp;
      var $add_ptr=(($12+4)|0);
      $oldp=$add_ptr;
      label = 11; break;
    case 11: 
      var $13=$oldp;
      var $incdec_ptr8=(($13+4)|0);
      $oldp=$incdec_ptr8;
      var $p9=$13;
      var $14=HEAP32[(($p9)>>2)];
      var $15=$newp;
      var $incdec_ptr10=(($15+4)|0);
      $newp=$incdec_ptr10;
      var $p11=$15;
      HEAP32[(($p11)>>2)]=$14;
      var $tobool12=(($14)|0)!=0;
      if ($tobool12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      var $16=$set_addr;
      var $maxsize=(($16)|0);
      var $17=HEAP32[(($maxsize)>>2)];
      var $18=$set_addr;
      var $e15=(($18+4)|0);
      var $arrayidx16=(($e15+($17<<2))|0);
      $sizep=$arrayidx16;
      var $19=$sizep;
      var $i=$19;
      var $20=HEAP32[(($i)>>2)];
      var $dec=((($20)-(1))|0);
      HEAP32[(($i)>>2)]=$dec;
      var $cmp17=(($20)|0)==0;
      if ($cmp17) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $21=$set_addr;
      var $maxsize19=(($21)|0);
      var $22=HEAP32[(($maxsize19)>>2)];
      var $23=$sizep;
      var $i20=$23;
      HEAP32[(($i20)>>2)]=$22;
      label = 15; break;
    case 15: 
      var $24=$oldelem_addr;
      $retval=$24;
      label = 17; break;
    case 16: 
      $retval=0;
      label = 17; break;
    case 17: 
      var $25=$retval;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdelsorted["X"]=1;

function _qh_setequal_except($setA, $skipelemA, $setB, $skipelemB) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $setA_addr;
      var $skipelemA_addr;
      var $setB_addr;
      var $skipelemB_addr;
      var $elemA;
      var $elemB;
      var $skip;
      $setA_addr=$setA;
      $skipelemA_addr=$skipelemA;
      $setB_addr=$setB;
      $skipelemB_addr=$skipelemB;
      $skip=0;
      var $0=$setA_addr;
      var $e=(($0+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      $elemA=$p;
      var $1=$setB_addr;
      var $e1=(($1+4)|0);
      var $arrayidx2=(($e1)|0);
      var $p3=$arrayidx2;
      $elemB=$p3;
      label = 3; break;
    case 3: 
      var $2=$elemA;
      var $3=HEAP32[(($2)>>2)];
      var $4=$skipelemA_addr;
      var $cmp=(($3)|0)==(($4)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$skip;
      var $inc=((($5)+(1))|0);
      $skip=$inc;
      var $6=$elemA;
      var $incdec_ptr=(($6+4)|0);
      $elemA=$incdec_ptr;
      label = 5; break;
    case 5: 
      var $7=$skipelemB_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $8=$elemB;
      var $9=HEAP32[(($8)>>2)];
      var $10=$skipelemB_addr;
      var $cmp5=(($9)|0)==(($10)|0);
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$skip;
      var $inc7=((($11)+(1))|0);
      $skip=$inc7;
      var $12=$elemB;
      var $incdec_ptr8=(($12+4)|0);
      $elemB=$incdec_ptr8;
      label = 8; break;
    case 8: 
      label = 14; break;
    case 9: 
      var $13=$elemA;
      var $14=HEAP32[(($13)>>2)];
      var $15=$elemB;
      var $16=HEAP32[(($15)>>2)];
      var $cmp10=(($14)|0)!=(($16)|0);
      if ($cmp10) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $17=$skip;
      var $inc12=((($17)+(1))|0);
      $skip=$inc12;
      var $18=$elemB;
      var $incdec_ptr13=(($18+4)|0);
      $elemB=$incdec_ptr13;
      var $19=HEAP32[(($18)>>2)];
      $skipelemB_addr=$19;
      var $tobool14=(($19)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $retval=0;
      label = 23; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $20=$elemA;
      var $21=HEAP32[(($20)>>2)];
      var $tobool19=(($21)|0)!=0;
      if ($tobool19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      label = 19; break;
    case 16: 
      var $22=$elemA;
      var $incdec_ptr22=(($22+4)|0);
      $elemA=$incdec_ptr22;
      var $23=HEAP32[(($22)>>2)];
      var $24=$elemB;
      var $incdec_ptr23=(($24+4)|0);
      $elemB=$incdec_ptr23;
      var $25=HEAP32[(($24)>>2)];
      var $cmp24=(($23)|0)!=(($25)|0);
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=0;
      label = 23; break;
    case 18: 
      label = 3; break;
    case 19: 
      var $26=$skip;
      var $cmp27=(($26)|0)!=2;
      if ($cmp27) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $27=$elemB;
      var $28=HEAP32[(($27)>>2)];
      var $tobool28=(($28)|0)!=0;
      if ($tobool28) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $retval=0;
      label = 23; break;
    case 22: 
      $retval=1;
      label = 23; break;
    case 23: 
      var $29=$retval;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setequal_except["X"]=1;

function _qh_setdelnth($set, $nth) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $nth_addr;
      var $elem;
      var $sizep;
      var $elemp;
      var $lastp;
      $set_addr=$set;
      $nth_addr=$nth;
      var $0=$nth_addr;
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e+($0<<2))|0);
      var $p=$arrayidx;
      var $2=$p;
      $elemp=$2;
      var $3=$set_addr;
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $5=$set_addr;
      var $e1=(($5+4)|0);
      var $arrayidx2=(($e1+($4<<2))|0);
      $sizep=$arrayidx2;
      var $6=$sizep;
      var $i=$6;
      var $7=HEAP32[(($i)>>2)];
      var $dec=((($7)-(1))|0);
      HEAP32[(($i)>>2)]=$dec;
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$set_addr;
      var $maxsize3=(($8)|0);
      var $9=HEAP32[(($maxsize3)>>2)];
      var $10=$sizep;
      var $i4=$10;
      HEAP32[(($i4)>>2)]=$9;
      label = 4; break;
    case 4: 
      var $11=$nth_addr;
      var $cmp5=(($11)|0) < 0;
      if ($cmp5) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $12=$nth_addr;
      var $13=$sizep;
      var $i6=$13;
      var $14=HEAP32[(($i6)>>2)];
      var $cmp7=(($12)|0) >= (($14)|0);
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=HEAP32[((((5242932)|0))>>2)];
      var $16=$nth_addr;
      _qh_fprintf($15, 6174, ((5264896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=HEAP32[((((5242932)|0))>>2)];
      var $18=$set_addr;
      _qh_setprint($17, ((5301696)|0), $18);
      _qh_errexit(5, 0, 0);
      label = 7; break;
    case 7: 
      var $19=$sizep;
      var $i10=$19;
      var $20=HEAP32[(($i10)>>2)];
      var $sub=((($20)-(1))|0);
      var $21=$set_addr;
      var $e11=(($21+4)|0);
      var $arrayidx12=(($e11+($sub<<2))|0);
      var $p13=$arrayidx12;
      var $22=$p13;
      $lastp=$22;
      var $23=$elemp;
      var $p14=$23;
      var $24=HEAP32[(($p14)>>2)];
      $elem=$24;
      var $25=$lastp;
      var $p15=$25;
      var $26=HEAP32[(($p15)>>2)];
      var $27=$elemp;
      var $p16=$27;
      HEAP32[(($p16)>>2)]=$26;
      var $28=$lastp;
      var $p17=$28;
      HEAP32[(($p17)>>2)]=0;
      var $29=$elem;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdelnth["X"]=1;

function _qh_setdelnthsorted($set, $nth) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $nth_addr;
      var $elem;
      var $sizep;
      var $newp;
      var $oldp;
      $set_addr=$set;
      $nth_addr=$nth;
      var $0=$set_addr;
      var $maxsize=(($0)|0);
      var $1=HEAP32[(($maxsize)>>2)];
      var $2=$set_addr;
      var $e=(($2+4)|0);
      var $arrayidx=(($e+($1<<2))|0);
      $sizep=$arrayidx;
      var $3=$nth_addr;
      var $cmp=(($3)|0) < 0;
      if ($cmp) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=$sizep;
      var $i=$4;
      var $5=HEAP32[(($i)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$nth_addr;
      var $7=$sizep;
      var $i1=$7;
      var $8=HEAP32[(($i1)>>2)];
      var $sub=((($8)-(1))|0);
      var $cmp2=(($6)|0) >= (($sub)|0);
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $9=$nth_addr;
      var $10=$set_addr;
      var $maxsize4=(($10)|0);
      var $11=HEAP32[(($maxsize4)>>2)];
      var $cmp5=(($9)|0) >= (($11)|0);
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=HEAP32[((((5242932)|0))>>2)];
      var $13=$nth_addr;
      _qh_fprintf($12, 6175, ((5260520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $14=HEAP32[((((5242932)|0))>>2)];
      var $15=$set_addr;
      _qh_setprint($14, ((5301696)|0), $15);
      _qh_errexit(5, 0, 0);
      label = 7; break;
    case 7: 
      var $16=$nth_addr;
      var $17=$set_addr;
      var $e6=(($17+4)|0);
      var $arrayidx7=(($e6+($16<<2))|0);
      var $p=$arrayidx7;
      var $18=$p;
      $newp=$18;
      var $19=$newp;
      var $p8=$19;
      var $20=HEAP32[(($p8)>>2)];
      $elem=$20;
      var $21=$newp;
      var $add_ptr=(($21+4)|0);
      $oldp=$add_ptr;
      label = 8; break;
    case 8: 
      var $22=$oldp;
      var $incdec_ptr=(($22+4)|0);
      $oldp=$incdec_ptr;
      var $p9=$22;
      var $23=HEAP32[(($p9)>>2)];
      var $24=$newp;
      var $incdec_ptr10=(($24+4)|0);
      $newp=$incdec_ptr10;
      var $p11=$24;
      HEAP32[(($p11)>>2)]=$23;
      var $tobool12=(($23)|0)!=0;
      if ($tobool12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 8; break;
    case 10: 
      var $25=$sizep;
      var $i13=$25;
      var $26=HEAP32[(($i13)>>2)];
      var $dec=((($26)-(1))|0);
      HEAP32[(($i13)>>2)]=$dec;
      var $cmp14=(($26)|0)==0;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $27=$set_addr;
      var $maxsize16=(($27)|0);
      var $28=HEAP32[(($maxsize16)>>2)];
      var $29=$sizep;
      var $i17=$29;
      HEAP32[(($i17)>>2)]=$28;
      label = 12; break;
    case 12: 
      var $30=$elem;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setdelnthsorted["X"]=1;

function _qh_setsize($set) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $size;
      var $sizep;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 10; break;
    case 4: 
      var $1=$set_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      $sizep=$arrayidx;
      var $4=$sizep;
      var $i=$4;
      var $5=HEAP32[(($i)>>2)];
      $size=$5;
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $6=$size;
      var $dec=((($6)-(1))|0);
      $size=$dec;
      var $7=$size;
      var $8=$set_addr;
      var $maxsize3=(($8)|0);
      var $9=HEAP32[(($maxsize3)>>2)];
      var $cmp=(($7)|0) > (($9)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=HEAP32[((((5242932)|0))>>2)];
      var $11=$size;
      var $12=$set_addr;
      var $maxsize5=(($12)|0);
      var $13=HEAP32[(($maxsize5)>>2)];
      _qh_fprintf($10, 6178, ((5296836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$13,tempInt));
      var $14=HEAP32[((((5242932)|0))>>2)];
      var $15=$set_addr;
      _qh_setprint($14, ((5295164)|0), $15);
      _qh_errexit(5, 0, 0);
      label = 7; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $16=$set_addr;
      var $maxsize7=(($16)|0);
      var $17=HEAP32[(($maxsize7)>>2)];
      $size=$17;
      label = 9; break;
    case 9: 
      var $18=$size;
      $retval=$18;
      label = 10; break;
    case 10: 
      var $19=$retval;
      STACKTOP = __stackBase__;
      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setsize["X"]=1;

function _qh_setequal($setA, $setB) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $setA_addr;
      var $setB_addr;
      var $elemAp;
      var $elemBp;
      var $sizeA;
      var $sizeB;
      $setA_addr=$setA;
      $setB_addr=$setB;
      $sizeA=0;
      $sizeB=0;
      var $0=$setA_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$setA_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$setA_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $sizeA=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$sizeA;
      var $dec=((($5)-(1))|0);
      $sizeA=$dec;
      var $cond = $dec;label = 6; break;
    case 5: 
      var $6=$setA_addr;
      var $maxsize2=(($6)|0);
      var $7=HEAP32[(($maxsize2)>>2)];
      $sizeA=$7;
      var $cond = $7;label = 6; break;
    case 6: 
      var $cond;
      label = 7; break;
    case 7: 
      var $8=$setB_addr;
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $9=$setB_addr;
      var $maxsize5=(($9)|0);
      var $10=HEAP32[(($maxsize5)>>2)];
      var $11=$setB_addr;
      var $e6=(($11+4)|0);
      var $arrayidx7=(($e6+($10<<2))|0);
      var $i8=$arrayidx7;
      var $12=HEAP32[(($i8)>>2)];
      $sizeB=$12;
      var $tobool9=(($12)|0)!=0;
      if ($tobool9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$sizeB;
      var $dec11=((($13)-(1))|0);
      $sizeB=$dec11;
      var $cond15 = $dec11;label = 11; break;
    case 10: 
      var $14=$setB_addr;
      var $maxsize13=(($14)|0);
      var $15=HEAP32[(($maxsize13)>>2)];
      $sizeB=$15;
      var $cond15 = $15;label = 11; break;
    case 11: 
      var $cond15;
      label = 12; break;
    case 12: 
      var $16=$sizeA;
      var $17=$sizeB;
      var $cmp=(($16)|0)!=(($17)|0);
      if ($cmp) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 19; break;
    case 14: 
      var $18=$sizeA;
      var $tobool19=(($18)|0)!=0;
      if ($tobool19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $retval=1;
      label = 19; break;
    case 16: 
      var $19=$setA_addr;
      var $e22=(($19+4)|0);
      var $arrayidx23=(($e22)|0);
      var $p=$arrayidx23;
      $elemAp=$p;
      var $20=$setB_addr;
      var $e24=(($20+4)|0);
      var $arrayidx25=(($e24)|0);
      var $p26=$arrayidx25;
      $elemBp=$p26;
      var $21=$elemAp;
      var $22=$21;
      var $23=$elemBp;
      var $24=$23;
      var $25=$sizeA;
      var $mul=((($25<<2))&-1);
      var $call=_memcmp($22, $24, $mul);
      var $tobool27=(($call)|0)!=0;
      if ($tobool27) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $retval=1;
      label = 19; break;
    case 18: 
      $retval=0;
      label = 19; break;
    case 19: 
      var $26=$retval;

      return $26;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setequal["X"]=1;

function _qh_setequal_skip($setA, $skipA, $setB, $skipB) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $setA_addr;
      var $skipA_addr;
      var $setB_addr;
      var $skipB_addr;
      var $elemA;
      var $elemB;
      var $skipAp;
      var $skipBp;
      $setA_addr=$setA;
      $skipA_addr=$skipA;
      $setB_addr=$setB;
      $skipB_addr=$skipB;
      var $0=$setA_addr;
      var $e=(($0+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      $elemA=$p;
      var $1=$setB_addr;
      var $e1=(($1+4)|0);
      var $arrayidx2=(($e1)|0);
      var $p3=$arrayidx2;
      $elemB=$p3;
      var $2=$skipA_addr;
      var $3=$setA_addr;
      var $e4=(($3+4)|0);
      var $arrayidx5=(($e4+($2<<2))|0);
      var $p6=$arrayidx5;
      $skipAp=$p6;
      var $4=$skipB_addr;
      var $5=$setB_addr;
      var $e7=(($5+4)|0);
      var $arrayidx8=(($e7+($4<<2))|0);
      var $p9=$arrayidx8;
      $skipBp=$p9;
      label = 3; break;
    case 3: 
      var $6=$elemA;
      var $7=$skipAp;
      var $cmp=(($6)|0)==(($7)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$elemA;
      var $incdec_ptr=(($8+4)|0);
      $elemA=$incdec_ptr;
      label = 5; break;
    case 5: 
      var $9=$elemB;
      var $10=$skipBp;
      var $cmp10=(($9)|0)==(($10)|0);
      if ($cmp10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$elemB;
      var $incdec_ptr12=(($11+4)|0);
      $elemB=$incdec_ptr12;
      label = 7; break;
    case 7: 
      var $12=$elemA;
      var $13=HEAP32[(($12)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      label = 12; break;
    case 9: 
      var $14=$elemA;
      var $incdec_ptr16=(($14+4)|0);
      $elemA=$incdec_ptr16;
      var $15=HEAP32[(($14)>>2)];
      var $16=$elemB;
      var $incdec_ptr17=(($16+4)|0);
      $elemB=$incdec_ptr17;
      var $17=HEAP32[(($16)>>2)];
      var $cmp18=(($15)|0)!=(($17)|0);
      if ($cmp18) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=0;
      label = 15; break;
    case 11: 
      label = 3; break;
    case 12: 
      var $18=$elemB;
      var $19=HEAP32[(($18)>>2)];
      var $tobool21=(($19)|0)!=0;
      if ($tobool21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 15; break;
    case 14: 
      $retval=1;
      label = 15; break;
    case 15: 
      var $20=$retval;

      return $20;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setequal_skip["X"]=1;

function _qh_setin($set, $setelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $setelem_addr;
      var $elem;
      var $elemp;
      $set_addr=$set;
      $setelem_addr=$setelem;
      $elem=0;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$set_addr;
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      $elemp=$p;
      label = 4; break;
    case 4: 
      var $2=$elemp;
      var $incdec_ptr=(($2+4)|0);
      $elemp=$incdec_ptr;
      var $3=HEAP32[(($2)>>2)];
      $elem=$3;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$elem;
      var $5=$setelem_addr;
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=1;
      label = 10; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setindex($set, $atelem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $atelem_addr;
      var $elem;
      var $size;
      var $i;
      $set_addr=$set;
      $atelem_addr=$atelem;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-1;
      label = 16; break;
    case 4: 
      var $1=$set_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i1=$arrayidx;
      var $4=HEAP32[(($i1)>>2)];
      $size=$4;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$size;
      var $dec=((($5)-(1))|0);
      $size=$dec;
      var $cond = $dec;label = 7; break;
    case 6: 
      var $6=$set_addr;
      var $maxsize3=(($6)|0);
      var $7=HEAP32[(($maxsize3)>>2)];
      $size=$7;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$size;
      var $9=$set_addr;
      var $maxsize4=(($9)|0);
      var $10=HEAP32[(($maxsize4)>>2)];
      var $cmp=(($8)|0) > (($10)|0);
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=-1;
      label = 16; break;
    case 9: 
      var $11=$set_addr;
      var $e7=(($11+4)|0);
      var $arrayidx8=(($e7)|0);
      var $p=$arrayidx8;
      $elem=$p;
      $i=0;
      label = 10; break;
    case 10: 
      var $12=$i;
      var $13=$size;
      var $cmp9=(($12)|0) < (($13)|0);
      if ($cmp9) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $14=$elem;
      var $incdec_ptr=(($14+4)|0);
      $elem=$incdec_ptr;
      var $15=HEAP32[(($14)>>2)];
      var $16=$atelem_addr;
      var $cmp10=(($15)|0)==(($16)|0);
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $17=$i;
      $retval=$17;
      label = 16; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 15: 
      $retval=-1;
      label = 16; break;
    case 16: 
      var $19=$retval;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setindex["X"]=1;

function _qh_setlast($set) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $size;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$set_addr;
      var $maxsize=(($1)|0);
      var $2=HEAP32[(($maxsize)>>2)];
      var $3=$set_addr;
      var $e=(($3+4)|0);
      var $arrayidx=(($e+($2<<2))|0);
      var $i=$arrayidx;
      var $4=HEAP32[(($i)>>2)];
      $size=$4;
      var $5=$size;
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$set_addr;
      var $maxsize3=(($6)|0);
      var $7=HEAP32[(($maxsize3)>>2)];
      var $sub=((($7)-(1))|0);
      var $8=$set_addr;
      var $e4=(($8+4)|0);
      var $arrayidx5=(($e4+($sub<<2))|0);
      var $p=$arrayidx5;
      var $9=HEAP32[(($p)>>2)];
      $retval=$9;
      label = 10; break;
    case 5: 
      var $10=$size;
      var $cmp=(($10)|0) > 1;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$size;
      var $sub7=((($11)-(2))|0);
      var $12=$set_addr;
      var $e8=(($12+4)|0);
      var $arrayidx9=(($e8+($sub7<<2))|0);
      var $p10=$arrayidx9;
      var $13=HEAP32[(($p10)>>2)];
      $retval=$13;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $14=$retval;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setfreelong($setp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setp_addr;
      var $size;
      $setp_addr=$setp;
      var $0=$setp_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$setp_addr;
      var $3=HEAP32[(($2)>>2)];
      var $maxsize=(($3)|0);
      var $4=HEAP32[(($maxsize)>>2)];
      var $mul=((($4<<2))&-1);
      var $add=((($mul)+(8))|0);
      $size=$add;
      var $5=$size;
      var $6=HEAP32[((((5242896)|0))>>2)];
      var $cmp=(($5)|0) > (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$setp_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=$size;
      _qh_memfree($9, $10);
      var $11=$setp_addr;
      HEAP32[(($11)>>2)]=0;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setnew_delnthsorted($set, $size, $nth, $prepend) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $size_addr;
      var $nth_addr;
      var $prepend_addr;
      var $newset;
      var $oldp;
      var $newp;
      var $tailsize;
      var $newsize;
      $set_addr=$set;
      $size_addr=$size;
      $nth_addr=$nth;
      $prepend_addr=$prepend;
      var $0=$size_addr;
      var $1=$nth_addr;
      var $sub=((($0)-($1))|0);
      var $sub1=((($sub)-(1))|0);
      $tailsize=$sub1;
      var $2=$tailsize;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=HEAP32[((((5242932)|0))>>2)];
      var $4=$nth_addr;
      _qh_fprintf($3, 6176, ((5257532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      var $5=HEAP32[((((5242932)|0))>>2)];
      var $6=$set_addr;
      _qh_setprint($5, ((5301696)|0), $6);
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $7=$size_addr;
      var $sub2=((($7)-(1))|0);
      var $8=$prepend_addr;
      var $add=((($sub2)+($8))|0);
      $newsize=$add;
      var $9=$newsize;
      var $call=_qh_setnew($9);
      $newset=$call;
      var $10=$newsize;
      var $add3=((($10)+(1))|0);
      var $11=$newset;
      var $maxsize=(($11)|0);
      var $12=HEAP32[(($maxsize)>>2)];
      var $13=$newset;
      var $e=(($13+4)|0);
      var $arrayidx=(($e+($12<<2))|0);
      var $i=$arrayidx;
      HEAP32[(($i)>>2)]=$add3;
      var $14=$set_addr;
      var $e4=(($14+4)|0);
      var $arrayidx5=(($e4)|0);
      var $p=$arrayidx5;
      $oldp=$p;
      var $15=$newset;
      var $e6=(($15+4)|0);
      var $arrayidx7=(($e6)|0);
      var $p8=$arrayidx7;
      var $16=$prepend_addr;
      var $add_ptr=(($p8+($16<<2))|0);
      $newp=$add_ptr;
      var $17=$nth_addr;
      if ((($17)|0)==0) {
        label = 5; break;
      }
      else if ((($17)|0)==1) {
        label = 6; break;
      }
      else if ((($17)|0)==2) {
        label = 7; break;
      }
      else if ((($17)|0)==3) {
        label = 8; break;
      }
      else if ((($17)|0)==4) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 5: 
      label = 11; break;
    case 6: 
      var $18=$oldp;
      var $incdec_ptr=(($18+4)|0);
      $oldp=$incdec_ptr;
      var $19=HEAP32[(($18)>>2)];
      var $20=$newp;
      var $incdec_ptr10=(($20+4)|0);
      $newp=$incdec_ptr10;
      HEAP32[(($20)>>2)]=$19;
      label = 11; break;
    case 7: 
      var $21=$oldp;
      var $incdec_ptr12=(($21+4)|0);
      $oldp=$incdec_ptr12;
      var $22=HEAP32[(($21)>>2)];
      var $23=$newp;
      var $incdec_ptr13=(($23+4)|0);
      $newp=$incdec_ptr13;
      HEAP32[(($23)>>2)]=$22;
      var $24=$oldp;
      var $incdec_ptr14=(($24+4)|0);
      $oldp=$incdec_ptr14;
      var $25=HEAP32[(($24)>>2)];
      var $26=$newp;
      var $incdec_ptr15=(($26+4)|0);
      $newp=$incdec_ptr15;
      HEAP32[(($26)>>2)]=$25;
      label = 11; break;
    case 8: 
      var $27=$oldp;
      var $incdec_ptr17=(($27+4)|0);
      $oldp=$incdec_ptr17;
      var $28=HEAP32[(($27)>>2)];
      var $29=$newp;
      var $incdec_ptr18=(($29+4)|0);
      $newp=$incdec_ptr18;
      HEAP32[(($29)>>2)]=$28;
      var $30=$oldp;
      var $incdec_ptr19=(($30+4)|0);
      $oldp=$incdec_ptr19;
      var $31=HEAP32[(($30)>>2)];
      var $32=$newp;
      var $incdec_ptr20=(($32+4)|0);
      $newp=$incdec_ptr20;
      HEAP32[(($32)>>2)]=$31;
      var $33=$oldp;
      var $incdec_ptr21=(($33+4)|0);
      $oldp=$incdec_ptr21;
      var $34=HEAP32[(($33)>>2)];
      var $35=$newp;
      var $incdec_ptr22=(($35+4)|0);
      $newp=$incdec_ptr22;
      HEAP32[(($35)>>2)]=$34;
      label = 11; break;
    case 9: 
      var $36=$oldp;
      var $incdec_ptr24=(($36+4)|0);
      $oldp=$incdec_ptr24;
      var $37=HEAP32[(($36)>>2)];
      var $38=$newp;
      var $incdec_ptr25=(($38+4)|0);
      $newp=$incdec_ptr25;
      HEAP32[(($38)>>2)]=$37;
      var $39=$oldp;
      var $incdec_ptr26=(($39+4)|0);
      $oldp=$incdec_ptr26;
      var $40=HEAP32[(($39)>>2)];
      var $41=$newp;
      var $incdec_ptr27=(($41+4)|0);
      $newp=$incdec_ptr27;
      HEAP32[(($41)>>2)]=$40;
      var $42=$oldp;
      var $incdec_ptr28=(($42+4)|0);
      $oldp=$incdec_ptr28;
      var $43=HEAP32[(($42)>>2)];
      var $44=$newp;
      var $incdec_ptr29=(($44+4)|0);
      $newp=$incdec_ptr29;
      HEAP32[(($44)>>2)]=$43;
      var $45=$oldp;
      var $incdec_ptr30=(($45+4)|0);
      $oldp=$incdec_ptr30;
      var $46=HEAP32[(($45)>>2)];
      var $47=$newp;
      var $incdec_ptr31=(($47+4)|0);
      $newp=$incdec_ptr31;
      HEAP32[(($47)>>2)]=$46;
      label = 11; break;
    case 10: 
      var $48=$newp;
      var $49=$48;
      var $50=$oldp;
      var $51=$50;
      var $52=$nth_addr;
      var $mul=((($52<<2))&-1);
      assert($mul % 1 === 0);_memcpy($49, $51, $mul);
      var $53=$nth_addr;
      var $54=$newp;
      var $add_ptr32=(($54+($53<<2))|0);
      $newp=$add_ptr32;
      var $55=$nth_addr;
      var $56=$oldp;
      var $add_ptr33=(($56+($55<<2))|0);
      $oldp=$add_ptr33;
      label = 11; break;
    case 11: 
      var $57=$oldp;
      var $incdec_ptr34=(($57+4)|0);
      $oldp=$incdec_ptr34;
      var $58=$tailsize;
      if ((($58)|0)==0) {
        label = 12; break;
      }
      else if ((($58)|0)==1) {
        label = 13; break;
      }
      else if ((($58)|0)==2) {
        label = 14; break;
      }
      else if ((($58)|0)==3) {
        label = 15; break;
      }
      else if ((($58)|0)==4) {
        label = 16; break;
      }
      else {
      label = 17; break;
      }
      
    case 12: 
      label = 18; break;
    case 13: 
      var $59=$oldp;
      var $incdec_ptr37=(($59+4)|0);
      $oldp=$incdec_ptr37;
      var $60=HEAP32[(($59)>>2)];
      var $61=$newp;
      var $incdec_ptr38=(($61+4)|0);
      $newp=$incdec_ptr38;
      HEAP32[(($61)>>2)]=$60;
      label = 18; break;
    case 14: 
      var $62=$oldp;
      var $incdec_ptr40=(($62+4)|0);
      $oldp=$incdec_ptr40;
      var $63=HEAP32[(($62)>>2)];
      var $64=$newp;
      var $incdec_ptr41=(($64+4)|0);
      $newp=$incdec_ptr41;
      HEAP32[(($64)>>2)]=$63;
      var $65=$oldp;
      var $incdec_ptr42=(($65+4)|0);
      $oldp=$incdec_ptr42;
      var $66=HEAP32[(($65)>>2)];
      var $67=$newp;
      var $incdec_ptr43=(($67+4)|0);
      $newp=$incdec_ptr43;
      HEAP32[(($67)>>2)]=$66;
      label = 18; break;
    case 15: 
      var $68=$oldp;
      var $incdec_ptr45=(($68+4)|0);
      $oldp=$incdec_ptr45;
      var $69=HEAP32[(($68)>>2)];
      var $70=$newp;
      var $incdec_ptr46=(($70+4)|0);
      $newp=$incdec_ptr46;
      HEAP32[(($70)>>2)]=$69;
      var $71=$oldp;
      var $incdec_ptr47=(($71+4)|0);
      $oldp=$incdec_ptr47;
      var $72=HEAP32[(($71)>>2)];
      var $73=$newp;
      var $incdec_ptr48=(($73+4)|0);
      $newp=$incdec_ptr48;
      HEAP32[(($73)>>2)]=$72;
      var $74=$oldp;
      var $incdec_ptr49=(($74+4)|0);
      $oldp=$incdec_ptr49;
      var $75=HEAP32[(($74)>>2)];
      var $76=$newp;
      var $incdec_ptr50=(($76+4)|0);
      $newp=$incdec_ptr50;
      HEAP32[(($76)>>2)]=$75;
      label = 18; break;
    case 16: 
      var $77=$oldp;
      var $incdec_ptr52=(($77+4)|0);
      $oldp=$incdec_ptr52;
      var $78=HEAP32[(($77)>>2)];
      var $79=$newp;
      var $incdec_ptr53=(($79+4)|0);
      $newp=$incdec_ptr53;
      HEAP32[(($79)>>2)]=$78;
      var $80=$oldp;
      var $incdec_ptr54=(($80+4)|0);
      $oldp=$incdec_ptr54;
      var $81=HEAP32[(($80)>>2)];
      var $82=$newp;
      var $incdec_ptr55=(($82+4)|0);
      $newp=$incdec_ptr55;
      HEAP32[(($82)>>2)]=$81;
      var $83=$oldp;
      var $incdec_ptr56=(($83+4)|0);
      $oldp=$incdec_ptr56;
      var $84=HEAP32[(($83)>>2)];
      var $85=$newp;
      var $incdec_ptr57=(($85+4)|0);
      $newp=$incdec_ptr57;
      HEAP32[(($85)>>2)]=$84;
      var $86=$oldp;
      var $incdec_ptr58=(($86+4)|0);
      $oldp=$incdec_ptr58;
      var $87=HEAP32[(($86)>>2)];
      var $88=$newp;
      var $incdec_ptr59=(($88+4)|0);
      $newp=$incdec_ptr59;
      HEAP32[(($88)>>2)]=$87;
      label = 18; break;
    case 17: 
      var $89=$newp;
      var $90=$89;
      var $91=$oldp;
      var $92=$91;
      var $93=$tailsize;
      var $mul61=((($93<<2))&-1);
      assert($mul61 % 1 === 0);_memcpy($90, $92, $mul61);
      var $94=$tailsize;
      var $95=$newp;
      var $add_ptr62=(($95+($94<<2))|0);
      $newp=$add_ptr62;
      label = 18; break;
    case 18: 
      var $96=$newp;
      HEAP32[(($96)>>2)]=0;
      var $97=$newset;
      STACKTOP = __stackBase__;
      return $97;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setnew_delnthsorted["X"]=1;

function _qh_setreplace($set, $oldelem, $newelem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $oldelem_addr;
      var $newelem_addr;
      var $elemp;
      $set_addr=$set;
      $oldelem_addr=$oldelem;
      $newelem_addr=$newelem;
      var $0=$set_addr;
      var $e=(($0+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      $elemp=$p;
      label = 3; break;
    case 3: 
      var $1=$elemp;
      var $2=HEAP32[(($1)>>2)];
      var $3=$oldelem_addr;
      var $cmp=(($2)|0)!=(($3)|0);
      if ($cmp) { label = 4; break; } else { var $6 = 0;label = 5; break; }
    case 4: 
      var $4=$elemp;
      var $5=HEAP32[(($4)>>2)];
      var $tobool=(($5)|0)!=0;
      var $6 = $tobool;label = 5; break;
    case 5: 
      var $6;
      if ($6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$elemp;
      var $incdec_ptr=(($7+4)|0);
      $elemp=$incdec_ptr;
      label = 3; break;
    case 7: 
      var $8=$elemp;
      var $9=HEAP32[(($8)>>2)];
      var $tobool1=(($9)|0)!=0;
      if ($tobool1) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$newelem_addr;
      var $11=$elemp;
      HEAP32[(($11)>>2)]=$10;
      label = 10; break;
    case 9: 
      var $12=HEAP32[((((5242932)|0))>>2)];
      var $13=$oldelem_addr;
      _qh_fprintf($12, 6177, ((5298776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $14=HEAP32[((((5242932)|0))>>2)];
      var $15=$set_addr;
      _qh_setprint($14, ((5301696)|0), $15);
      _qh_errexit(5, 0, 0);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_settemp($setsize) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $setsize_addr;
      var $newset;
      $setsize_addr=$setsize;
      var $0=$setsize_addr;
      var $call=_qh_setnew($0);
      $newset=$call;
      var $1=$newset;
      var $2=$1;
      _qh_setappend(((5242928)|0), $2);
      var $3=HEAP32[((((5242936)|0))>>2)];
      var $cmp=(($3)|0) >= 5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=HEAP32[((((5242932)|0))>>2)];
      var $5=$newset;
      var $6=$newset;
      var $maxsize=(($6)|0);
      var $7=HEAP32[(($maxsize)>>2)];
      var $8=HEAP32[((((5242928)|0))>>2)];
      var $call1=_qh_setsize($8);
      _qh_fprintf($4, 8123, ((5293232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$call1,tempInt));
      label = 4; break;
    case 4: 
      var $9=$newset;
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_settempfree($set) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $stackedset;
      $set_addr=$set;
      var $0=$set_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 7; break;
    case 4: 
      var $call=_qh_settemppop();
      $stackedset=$call;
      var $2=$stackedset;
      var $3=$set_addr;
      var $4=HEAP32[(($3)>>2)];
      var $cmp=(($2)|0)!=(($4)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$stackedset;
      _qh_settemppush($5);
      var $6=HEAP32[((((5242932)|0))>>2)];
      var $7=$set_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$set_addr;
      var $10=HEAP32[(($9)>>2)];
      var $call2=_qh_setsize($10);
      var $11=HEAP32[((((5242928)|0))>>2)];
      var $call3=_qh_setsize($11);
      var $add=((($call3)+(1))|0);
      var $12=$stackedset;
      var $13=$stackedset;
      var $call4=_qh_setsize($13);
      _qh_fprintf($6, 6179, ((5291888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$call2,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$12,HEAP32[(((tempInt)+(16))>>2)]=$call4,tempInt));
      _qh_errexit(5, 0, 0);
      label = 6; break;
    case 6: 
      var $14=$set_addr;
      _qh_setfree($14);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_settemppop() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $stackedset;
      var $0=HEAP32[((((5242928)|0))>>2)];
      var $call=_qh_setdellast($0);
      var $1=$call;
      $stackedset=$1;
      var $2=$stackedset;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=HEAP32[((((5242932)|0))>>2)];
      _qh_fprintf($3, 6180, ((5290096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $4=HEAP32[((((5242936)|0))>>2)];
      var $cmp=(($4)|0) >= 5;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=HEAP32[((((5242932)|0))>>2)];
      var $6=HEAP32[((((5242928)|0))>>2)];
      var $call2=_qh_setsize($6);
      var $add=((($call2)+(1))|0);
      var $7=$stackedset;
      var $8=$stackedset;
      var $call3=_qh_setsize($8);
      _qh_fprintf($5, 8124, ((5288488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$add,HEAP32[(((tempInt)+(4))>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$call3,tempInt));
      label = 6; break;
    case 6: 
      var $9=$stackedset;
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_settemppush($set) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      $set_addr=$set;
      var $0=$set_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5242932)|0))>>2)];
      var $call=_fprintf($1, ((5286196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_errexit(5, 0, 0);
      label = 4; break;
    case 4: 
      var $2=$set_addr;
      var $3=$2;
      _qh_setappend(((5242928)|0), $3);
      var $4=HEAP32[((((5242936)|0))>>2)];
      var $cmp=(($4)|0) >= 5;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=HEAP32[((((5242932)|0))>>2)];
      var $6=HEAP32[((((5242928)|0))>>2)];
      var $call2=_qh_setsize($6);
      var $7=$set_addr;
      var $8=$set_addr;
      var $call3=_qh_setsize($8);
      _qh_fprintf($5, 8125, ((5284556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call2,HEAP32[(((tempInt)+(4))>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$call3,tempInt));
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_settempfree_all() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set=__stackBase__;
      var $setp;
      HEAP32[(($set)>>2)]=0;
      var $0=HEAP32[((((5242928)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=HEAP32[((((5242928)|0))>>2)];
      var $e=(($1+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $2=$p;
      $setp=$2;
      label = 4; break;
    case 4: 
      var $3=$setp;
      var $incdec_ptr=(($3+4)|0);
      $setp=$incdec_ptr;
      var $4=HEAP32[(($3)>>2)];
      HEAP32[(($set)>>2)]=$4;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _qh_setfree($set);
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      _qh_setfree(((5242928)|0));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_setunique($set, $elem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $set_addr;
      var $elem_addr;
      $set_addr=$set;
      $elem_addr=$elem;
      var $0=$set_addr;
      var $1=HEAP32[(($0)>>2)];
      var $2=$elem_addr;
      var $call=_qh_setin($1, $2);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$set_addr;
      var $4=$elem_addr;
      _qh_setappend($3, $4);
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_rand() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $lo;
      var $hi;
      var $test;
      var $seed;
      var $0=HEAP32[((5243000)>>2)];
      $seed=$0;
      var $1=$seed;
      var $div=((((($1)|0))/(127773))&-1);
      $hi=$div;
      var $2=$seed;
      var $rem=((($2)|0))%(127773);
      $lo=$rem;
      var $3=$lo;
      var $mul=((($3)*(16807))&-1);
      var $4=$hi;
      var $mul1=((($4)*(2836))&-1);
      var $sub=((($mul)-($mul1))|0);
      $test=$sub;
      var $5=$test;
      var $cmp=(($5)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$test;
      $seed=$6;
      label = 5; break;
    case 4: 
      var $7=$test;
      var $add=((($7)+(2147483647))|0);
      $seed=$add;
      label = 5; break;
    case 5: 
      var $8=$seed;
      HEAP32[((5243000)>>2)]=$8;
      var $9=$seed;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_srand($seed) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $cmp=(($0)|0) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((5243000)>>2)]=1;
      label = 8; break;
    case 4: 
      var $1=$seed_addr;
      var $cmp1=(($1)|0) >= 2147483647;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      HEAP32[((5243000)>>2)]=2147483646;
      label = 7; break;
    case 6: 
      var $2=$seed_addr;
      HEAP32[((5243000)>>2)]=$2;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_allstatA() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=59;
  HEAP32[((((5245276)|0))>>2)]=((5300308)|0);
  HEAP16[((((5246058)|0))>>1)]=-1;
  HEAP8[(((5246449)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-115;
  HEAP32[((((5245604)|0))>>2)]=0;
  HEAP16[((((5246222)|0))>>1)]=-1;
  HEAP8[(((5246531)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=-114;
  HEAP32[((((5245608)|0))>>2)]=((5301352)|0);
  HEAP16[((((5246224)|0))>>1)]=141;
  HEAP8[(((5246532)|0))]=6;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=-113;
  HEAP32[((((5245612)|0))>>2)]=((5281424)|0);
  HEAP16[((((5246226)|0))>>1)]=-1;
  HEAP8[(((5246533)|0))]=7;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=-47;
  HEAP32[((((5245876)|0))>>2)]=((5274388)|0);
  HEAP16[((((5246358)|0))>>1)]=-1;
  HEAP8[(((5246599)|0))]=7;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=-46;
  HEAP32[((((5245880)|0))>>2)]=((5268360)|0);
  HEAP16[((((5246360)|0))>>1)]=-1;
  HEAP8[(((5246600)|0))]=8;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=-125;
  HEAP32[((((5245564)|0))>>2)]=((5264840)|0);
  HEAP16[((((5246202)|0))>>1)]=-1;
  HEAP8[(((5246521)|0))]=8;
  var $7=HEAP32[((((5246912)|0))>>2)];
  HEAP32[((((5246916)|0))>>2)]=$7;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx14)]=60;
  HEAP32[((((5245280)|0))>>2)]=((5260420)|0);
  HEAP16[((((5246060)|0))>>1)]=-1;
  HEAP8[(((5246450)|0))]=0;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx16)]=35;
  HEAP32[((((5245180)|0))>>2)]=((5257480)|0);
  HEAP16[((((5246010)|0))>>1)]=-1;
  HEAP8[(((5246425)|0))]=1;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx18)]=25;
  HEAP32[((((5245140)|0))>>2)]=((5254544)|0);
  HEAP16[((((5245990)|0))>>1)]=-1;
  HEAP8[(((5246415)|0))]=1;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx20)]=81;
  HEAP32[((((5245364)|0))>>2)]=((5251824)|0);
  HEAP16[((((5246102)|0))>>1)]=-1;
  HEAP8[(((5246471)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx22)]=32;
  HEAP32[((((5245168)|0))>>2)]=((5303952)|0);
  HEAP16[((((5246004)|0))>>1)]=-1;
  HEAP8[(((5246422)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx24)]=34;
  HEAP32[((((5245176)|0))>>2)]=((5301416)|0);
  HEAP16[((((5246008)|0))>>1)]=-1;
  HEAP8[(((5246424)|0))]=1;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx26)]=-123;
  HEAP32[((((5245572)|0))>>2)]=((5298680)|0);
  HEAP16[((((5246206)|0))>>1)]=-1;
  HEAP8[(((5246523)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx28)]=-121;
  HEAP32[((((5245580)|0))>>2)]=((5296720)|0);
  HEAP16[((((5246210)|0))>>1)]=-1;
  HEAP8[(((5246525)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx30)]=14;
  HEAP32[((((5245096)|0))>>2)]=((5295092)|0);
  HEAP16[((((5245968)|0))>>1)]=-1;
  HEAP8[(((5246404)|0))]=1;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx32)]=96;
  HEAP32[((((5245424)|0))>>2)]=((5293160)|0);
  HEAP16[((((5246132)|0))>>1)]=-1;
  HEAP8[(((5246486)|0))]=1;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx34)]=-122;
  HEAP32[((((5245576)|0))>>2)]=((5291820)|0);
  HEAP16[((((5246208)|0))>>1)]=-1;
  HEAP8[(((5246524)|0))]=1;

  return;
}
_qh_allstatA["X"]=1;

function _qh_allstatB() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=58;
  HEAP32[((((5245272)|0))>>2)]=((5290020)|0);
  HEAP16[((((5246056)|0))>>1)]=-1;
  HEAP8[(((5246448)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-42;
  HEAP32[((((5245896)|0))>>2)]=((5288408)|0);
  HEAP16[((((5246368)|0))>>1)]=-1;
  HEAP8[(((5246604)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=-106;
  HEAP32[((((5245640)|0))>>2)]=((5286144)|0);
  HEAP16[((((5246240)|0))>>1)]=-1;
  HEAP8[(((5246540)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=-111;
  HEAP32[((((5245620)|0))>>2)]=((5284392)|0);
  HEAP16[((((5246230)|0))>>1)]=-1;
  HEAP8[(((5246535)|0))]=1;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=-110;
  HEAP32[((((5245624)|0))>>2)]=((5282236)|0);
  HEAP16[((((5246232)|0))>>1)]=-1;
  HEAP8[(((5246536)|0))]=1;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=-102;
  HEAP32[((((5245656)|0))>>2)]=((5280548)|0);
  HEAP16[((((5246248)|0))>>1)]=-1;
  HEAP8[(((5246544)|0))]=1;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=-102;
  HEAP32[((((5245656)|0))>>2)]=((5279892)|0);
  HEAP16[((((5246248)|0))>>1)]=150;
  HEAP8[(((5246544)|0))]=2;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=111;
  HEAP32[((((5245484)|0))>>2)]=((5279232)|0);
  HEAP16[((((5246162)|0))>>1)]=-1;
  HEAP8[(((5246501)|0))]=3;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=-103;
  HEAP32[((((5245652)|0))>>2)]=((5278256)|0);
  HEAP16[((((5246246)|0))>>1)]=150;
  HEAP8[(((5246543)|0))]=2;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=108;
  HEAP32[((((5245472)|0))>>2)]=((5277468)|0);
  HEAP16[((((5246156)|0))>>1)]=-1;
  HEAP8[(((5246498)|0))]=3;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=-101;
  HEAP32[((((5245660)|0))>>2)]=((5276868)|0);
  HEAP16[((((5246250)|0))>>1)]=150;
  HEAP8[(((5246545)|0))]=2;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=113;
  HEAP32[((((5245492)|0))>>2)]=((5276368)|0);
  HEAP16[((((5246166)|0))>>1)]=-1;
  HEAP8[(((5246503)|0))]=3;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=-99;
  HEAP32[((((5245668)|0))>>2)]=((5276024)|0);
  HEAP16[((((5246254)|0))>>1)]=214;
  HEAP8[(((5246547)|0))]=2;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=114;
  HEAP32[((((5245496)|0))>>2)]=((5277468)|0);
  HEAP16[((((5246168)|0))>>1)]=-1;
  HEAP8[(((5246504)|0))]=3;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=36;
  HEAP32[((((5245184)|0))>>2)]=((5274992)|0);
  HEAP16[((((5246012)|0))>>1)]=-1;
  HEAP8[(((5246426)|0))]=6;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=-55;
  HEAP32[((((5245844)|0))>>2)]=((5274444)|0);
  HEAP16[((((5246342)|0))>>1)]=-1;
  HEAP8[(((5246591)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=-63;
  HEAP32[((((5245812)|0))>>2)]=((5273924)|0);
  HEAP16[((((5246326)|0))>>1)]=-1;
  HEAP8[(((5246583)|0))]=1;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=-56;
  HEAP32[((((5245840)|0))>>2)]=((5273320)|0);
  HEAP16[((((5246340)|0))>>1)]=-1;
  HEAP8[(((5246590)|0))]=1;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=-86;
  HEAP32[((((5245720)|0))>>2)]=((5272840)|0);
  HEAP16[((((5246280)|0))>>1)]=-1;
  HEAP8[(((5246560)|0))]=1;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=-104;
  HEAP32[((((5245648)|0))>>2)]=((5272308)|0);
  HEAP16[((((5246244)|0))>>1)]=150;
  HEAP8[(((5246542)|0))]=2;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=-105;
  HEAP32[((((5245644)|0))>>2)]=((5271528)|0);
  HEAP16[((((5246242)|0))>>1)]=-1;
  HEAP8[(((5246541)|0))]=3;
  var $21=HEAP32[((((5246912)|0))>>2)];
  var $inc41=((($21)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc41;
  var $arrayidx42=((((5244804)|0)+$21)|0);
  HEAP8[($arrayidx42)]=3;
  HEAP32[((((5245052)|0))>>2)]=0;
  HEAP16[((((5245946)|0))>>1)]=-1;
  HEAP8[(((5246393)|0))]=1;
  var $22=HEAP32[((((5246912)|0))>>2)];
  var $inc43=((($22)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc43;
  var $arrayidx44=((((5244804)|0)+$22)|0);
  HEAP8[($arrayidx44)]=4;
  HEAP32[((((5245056)|0))>>2)]=((5270912)|0);
  HEAP16[((((5245948)|0))>>1)]=3;
  HEAP8[(((5246394)|0))]=6;
  var $23=HEAP32[((((5246912)|0))>>2)];
  var $inc45=((($23)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc45;
  var $arrayidx46=((((5244804)|0)+$23)|0);
  HEAP8[($arrayidx46)]=5;
  HEAP32[((((5245060)|0))>>2)]=((5270276)|0);
  HEAP16[((((5245950)|0))>>1)]=-1;
  HEAP8[(((5246395)|0))]=7;
  var $24=HEAP32[((((5246912)|0))>>2)];
  var $inc47=((($24)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc47;
  var $arrayidx48=((((5244804)|0)+$24)|0);
  HEAP8[($arrayidx48)]=6;
  HEAP32[((((5245064)|0))>>2)]=((5269880)|0);
  HEAP16[((((5245952)|0))>>1)]=-1;
  HEAP8[(((5246396)|0))]=8;
  var $25=HEAP32[((((5246912)|0))>>2)];
  var $inc49=((($25)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc49;
  var $arrayidx50=((((5244804)|0)+$25)|0);
  HEAP8[($arrayidx50)]=8;
  HEAP32[((((5245072)|0))>>2)]=((5269000)|0);
  HEAP16[((((5245956)|0))>>1)]=-1;
  HEAP8[(((5246398)|0))]=6;
  var $26=HEAP32[((((5246912)|0))>>2)];
  var $inc51=((($26)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc51;
  var $arrayidx52=((((5244804)|0)+$26)|0);
  HEAP8[($arrayidx52)]=9;
  HEAP32[((((5245076)|0))>>2)]=((5268408)|0);
  HEAP16[((((5245958)|0))>>1)]=-1;
  HEAP8[(((5246399)|0))]=7;
  var $27=HEAP32[((((5246912)|0))>>2)];
  var $inc53=((($27)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc53;
  var $arrayidx54=((((5244804)|0)+$27)|0);
  HEAP8[($arrayidx54)]=10;
  HEAP32[((((5245080)|0))>>2)]=((5268176)|0);
  HEAP16[((((5245960)|0))>>1)]=-1;
  HEAP8[(((5246400)|0))]=8;

  return;
}
_qh_allstatB["X"]=1;

function _qh_setzero($set, $idx, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $set_addr;
      var $idx_addr;
      var $size_addr;
      var $count;
      $set_addr=$set;
      $idx_addr=$idx;
      $size_addr=$size;
      var $0=$idx_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $1=$idx_addr;
      var $2=$size_addr;
      var $cmp1=(($1)|0) >= (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$size_addr;
      var $4=$set_addr;
      var $maxsize=(($4)|0);
      var $5=HEAP32[(($maxsize)>>2)];
      var $cmp3=(($3)|0) > (($5)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=HEAP32[((((5242932)|0))>>2)];
      var $7=$idx_addr;
      var $8=$size_addr;
      _qh_fprintf($6, 6182, ((5280576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));
      var $9=HEAP32[((((5242932)|0))>>2)];
      var $10=$set_addr;
      _qh_setprint($9, ((5301696)|0), $10);
      _qh_errexit(5, 0, 0);
      label = 6; break;
    case 6: 
      var $11=$size_addr;
      var $add=((($11)+(1))|0);
      var $12=$set_addr;
      var $maxsize4=(($12)|0);
      var $13=HEAP32[(($maxsize4)>>2)];
      var $14=$set_addr;
      var $e=(($14+4)|0);
      var $arrayidx=(($e+($13<<2))|0);
      var $i=$arrayidx;
      HEAP32[(($i)>>2)]=$add;
      var $15=$size_addr;
      var $16=$idx_addr;
      var $sub=((($15)-($16))|0);
      var $add5=((($sub)+(1))|0);
      $count=$add5;
      var $17=$idx_addr;
      var $18=$set_addr;
      var $e6=(($18+4)|0);
      var $arrayidx7=(($e6+($17<<2))|0);
      var $p=$arrayidx7;
      var $19=$p;
      var $20=$count;
      var $mul=((($20<<2))&-1);
      _memset($19, 0, $mul);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_setzero["X"]=1;

function _qh_argv_to_command($argc, $argv, $command, $max_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $argc_addr;
      var $argv_addr;
      var $command_addr;
      var $max_size_addr;
      var $i;
      var $remaining;
      var $s;
      var $t;
      $argc_addr=$argc;
      $argv_addr=$argv;
      $command_addr=$command;
      $max_size_addr=$max_size;
      var $0=$command_addr;
      HEAP8[($0)]=0;
      var $1=$argc_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $2=$argv_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_strrchr($3, 92);
      $s=$call;
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$argv_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAP32[(($arrayidx2)>>2)];
      var $call3=_strrchr($5, 47);
      $s=$call3;
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$s;
      var $incdec_ptr=(($6+1)|0);
      $s=$incdec_ptr;
      label = 7; break;
    case 6: 
      var $7=$argv_addr;
      var $arrayidx6=(($7)|0);
      var $8=HEAP32[(($arrayidx6)>>2)];
      $s=$8;
      label = 7; break;
    case 7: 
      var $9=$s;
      var $call7=_strlen($9);
      var $10=$max_size_addr;
      var $cmp=(($call7)|0) < (($10)|0);
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$command_addr;
      var $12=$s;
      var $call9=_strcpy($11, $12);
      label = 10; break;
    case 9: 
      label = 35; break;
    case 10: 
      var $13=$command_addr;
      var $call12=_strstr($13, ((5301768)|0));
      $s=$call12;
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $14=$command_addr;
      var $call15=_strstr($14, ((5301496)|0));
      $s=$call15;
      var $tobool16=(($call15)|0)!=0;
      if ($tobool16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $15=$s;
      HEAP8[($15)]=0;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $i=1;
      label = 15; break;
    case 15: 
      var $16=$i;
      var $17=$argc_addr;
      var $cmp20=(($16)|0) < (($17)|0);
      if ($cmp20) { label = 16; break; } else { label = 34; break; }
    case 16: 
      var $18=$i;
      var $19=$argv_addr;
      var $arrayidx21=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx21)>>2)];
      $s=$20;
      var $21=$max_size_addr;
      var $22=$command_addr;
      var $call22=_strlen($22);
      var $sub=((($21)-($call22))|0);
      var $23=$s;
      var $call23=_strlen($23);
      var $sub24=((($sub)-($call23))|0);
      var $sub25=((($sub24)-(2))|0);
      $remaining=$sub25;
      var $24=$s;
      var $25=HEAP8[($24)];
      var $tobool26=(($25 << 24) >> 24)!=0;
      if ($tobool26) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $26=$s;
      var $call28=_strchr($26, 32);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 18; break; } else { label = 28; break; }
    case 18: 
      var $27=$command_addr;
      var $28=$command_addr;
      var $call31=_strlen($28);
      var $add_ptr=(($27+$call31)|0);
      $t=$add_ptr;
      var $29=$remaining;
      var $sub32=((($29)-(2))|0);
      $remaining=$sub32;
      var $30=$remaining;
      var $cmp33=(($30)|0) < 0;
      if ($cmp33) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 35; break;
    case 20: 
      var $31=$t;
      var $incdec_ptr36=(($31+1)|0);
      $t=$incdec_ptr36;
      HEAP8[($31)]=32;
      var $32=$t;
      var $incdec_ptr37=(($32+1)|0);
      $t=$incdec_ptr37;
      HEAP8[($32)]=34;
      label = 21; break;
    case 21: 
      var $33=$s;
      var $34=HEAP8[($33)];
      var $tobool38=(($34 << 24) >> 24)!=0;
      if ($tobool38) { label = 22; break; } else { label = 27; break; }
    case 22: 
      var $35=$s;
      var $36=HEAP8[($35)];
      var $conv=(($36 << 24) >> 24);
      var $cmp39=(($conv)|0)==34;
      if ($cmp39) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $37=$remaining;
      var $dec=((($37)-(1))|0);
      $remaining=$dec;
      var $cmp42=(($dec)|0) < 0;
      if ($cmp42) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 35; break;
    case 25: 
      var $38=$t;
      var $incdec_ptr46=(($38+1)|0);
      $t=$incdec_ptr46;
      HEAP8[($38)]=92;
      label = 26; break;
    case 26: 
      var $39=$s;
      var $incdec_ptr48=(($39+1)|0);
      $s=$incdec_ptr48;
      var $40=HEAP8[($39)];
      var $41=$t;
      var $incdec_ptr49=(($41+1)|0);
      $t=$incdec_ptr49;
      HEAP8[($41)]=$40;
      label = 21; break;
    case 27: 
      var $42=$t;
      var $incdec_ptr50=(($42+1)|0);
      $t=$incdec_ptr50;
      HEAP8[($42)]=34;
      var $43=$t;
      HEAP8[($43)]=0;
      label = 32; break;
    case 28: 
      var $44=$remaining;
      var $cmp52=(($44)|0) < 0;
      if ($cmp52) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 35; break;
    case 30: 
      var $45=$command_addr;
      var $call56=_strcat($45, ((5282360)|0));
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $46=$command_addr;
      var $47=$s;
      var $call59=_strcat($46, $47);
      label = 33; break;
    case 33: 
      var $48=$i;
      var $inc=((($48)+(1))|0);
      $i=$inc;
      label = 15; break;
    case 34: 
      $retval=1;
      label = 36; break;
    case 35: 
      $retval=0;
      label = 36; break;
    case 36: 
      var $49=$retval;

      return $49;
    default: assert(0, "bad label: " + label);
  }

}
_qh_argv_to_command["X"]=1;

function _qh_randomfactor($scale, $offset) {
  var label = 0;


  var $scale_addr;
  var $offset_addr;
  var $randr;
  $scale_addr=$scale;
  $offset_addr=$offset;
  var $call=_qh_rand();
  var $conv=(($call)|0);
  $randr=$conv;
  var $0=$randr;
  var $1=$scale_addr;
  var $mul=($0)*($1);
  var $2=$offset_addr;
  var $add=($mul)+($2);

  return $add;
}


function _qh_randommatrix($buffer, $dim, $rows) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $buffer_addr;
      var $dim_addr;
      var $rows_addr;
      var $i;
      var $k;
      var $rowi;
      var $coord;
      var $realr;
      $buffer_addr=$buffer;
      $dim_addr=$dim;
      $rows_addr=$rows;
      var $0=$buffer_addr;
      $coord=$0;
      var $1=$rows_addr;
      $rowi=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$dim_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $4=$coord;
      var $5=$rowi;
      var $incdec_ptr=(($5+4)|0);
      $rowi=$incdec_ptr;
      HEAP32[(($5)>>2)]=$4;
      $k=0;
      label = 5; break;
    case 5: 
      var $6=$k;
      var $7=$dim_addr;
      var $cmp2=(($6)|0) < (($7)|0);
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $call=_qh_rand();
      var $conv=(($call)|0);
      $realr=$conv;
      var $8=$realr;
      var $mul=($8)*(2);
      var $div=($mul)/(2147483647);
      var $sub=($div)-(1);
      var $9=$coord;
      var $incdec_ptr4=(($9+8)|0);
      $coord=$incdec_ptr4;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($9)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($9)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      var $10=$k;
      var $inc=((($10)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$i;
      var $inc6=((($11)+(1))|0);
      $i=$inc6;
      label = 3; break;
    case 10: 
      var $12=$coord;
      var $13=$rowi;
      HEAP32[(($13)>>2)]=$12;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_randommatrix["X"]=1;

function _qh_strtod($s, $endp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $endp_addr;
      var $result;
      $s_addr=$s;
      $endp_addr=$endp;
      var $0=$s_addr;
      var $1=$endp_addr;
      var $call=_strtod($0, $1);
      $result=$call;
      var $2=$s_addr;
      var $3=$endp_addr;
      var $4=HEAP32[(($3)>>2)];
      var $cmp=(($2)>>>0) < (($4)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$endp_addr;
      var $6=HEAP32[(($5)>>2)];
      var $arrayidx=((($6)-(1))|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7 << 24) >> 24);
      var $cmp1=(($conv)|0)==32;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$endp_addr;
      var $9=HEAP32[(($8)>>2)];
      var $incdec_ptr=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$incdec_ptr;
      label = 5; break;
    case 5: 
      var $10=$result;

      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_strtol($s, $endp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $endp_addr;
      var $result;
      $s_addr=$s;
      $endp_addr=$endp;
      var $0=$s_addr;
      var $1=$endp_addr;
      var $call=_strtol($0, $1, 10);
      $result=$call;
      var $2=$s_addr;
      var $3=$endp_addr;
      var $4=HEAP32[(($3)>>2)];
      var $cmp=(($2)>>>0) < (($4)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$endp_addr;
      var $6=HEAP32[(($5)>>2)];
      var $arrayidx=((($6)-(1))|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7 << 24) >> 24);
      var $cmp1=(($conv)|0)==32;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$endp_addr;
      var $9=HEAP32[(($8)>>2)];
      var $incdec_ptr=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$incdec_ptr;
      label = 5; break;
    case 5: 
      var $10=$result;

      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_allstatC() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=66;
  HEAP32[((((5245304)|0))>>2)]=((5267936)|0);
  HEAP16[((((5246072)|0))>>1)]=-1;
  HEAP8[(((5246456)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-84;
  HEAP32[((((5245728)|0))>>2)]=((5267656)|0);
  HEAP16[((((5246284)|0))>>1)]=-1;
  HEAP8[(((5246562)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=-78;
  HEAP32[((((5245752)|0))>>2)]=((5267240)|0);
  HEAP16[((((5246296)|0))>>1)]=-1;
  HEAP8[(((5246568)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=-77;
  HEAP32[((((5245756)|0))>>2)]=((5266892)|0);
  HEAP16[((((5246298)|0))>>1)]=-1;
  HEAP8[(((5246569)|0))]=7;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=112;
  HEAP32[((((5245488)|0))>>2)]=((5266500)|0);
  HEAP16[((((5246164)|0))>>1)]=-1;
  HEAP8[(((5246502)|0))]=3;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=-54;
  HEAP32[((((5245848)|0))>>2)]=((5266044)|0);
  HEAP16[((((5246344)|0))>>1)]=172;
  HEAP8[(((5246592)|0))]=1;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=102;
  HEAP32[((((5245448)|0))>>2)]=((5265696)|0);
  HEAP16[((((5246144)|0))>>1)]=172;
  HEAP8[(((5246492)|0))]=1;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=-41;
  HEAP32[((((5245900)|0))>>2)]=((5265304)|0);
  HEAP16[((((5246370)|0))>>1)]=172;
  HEAP8[(((5246605)|0))]=2;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=-40;
  HEAP32[((((5245904)|0))>>2)]=((5264884)|0);
  HEAP16[((((5246372)|0))>>1)]=-1;
  HEAP8[(((5246606)|0))]=3;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=-37;
  HEAP32[((((5245916)|0))>>2)]=((5264540)|0);
  HEAP16[((((5246378)|0))>>1)]=172;
  HEAP8[(((5246609)|0))]=2;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=-36;
  HEAP32[((((5245920)|0))>>2)]=((5264884)|0);
  HEAP16[((((5246380)|0))>>1)]=-1;
  HEAP8[(((5246610)|0))]=3;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=-60;
  HEAP32[((((5245824)|0))>>2)]=((5264172)|0);
  HEAP16[((((5246332)|0))>>1)]=172;
  HEAP8[(((5246586)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=-117;
  HEAP32[((((5245596)|0))>>2)]=((5263724)|0);
  HEAP16[((((5246218)|0))>>1)]=172;
  HEAP8[(((5246529)|0))]=2;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=-116;
  HEAP32[((((5245600)|0))>>2)]=((5263288)|0);
  HEAP16[((((5246220)|0))>>1)]=-1;
  HEAP8[(((5246530)|0))]=3;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=-119;
  HEAP32[((((5245588)|0))>>2)]=((5262612)|0);
  HEAP16[((((5246214)|0))>>1)]=172;
  HEAP8[(((5246527)|0))]=6;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=-118;
  HEAP32[((((5245592)|0))>>2)]=((5262252)|0);
  HEAP16[((((5246216)|0))>>1)]=-1;
  HEAP8[(((5246528)|0))]=6;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=-88;
  HEAP32[((((5245712)|0))>>2)]=((5261808)|0);
  HEAP16[((((5246276)|0))>>1)]=167;
  HEAP8[(((5246558)|0))]=6;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=-87;
  HEAP32[((((5245716)|0))>>2)]=((5262252)|0);
  HEAP16[((((5246278)|0))>>1)]=-1;
  HEAP8[(((5246559)|0))]=6;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=-89;
  HEAP32[((((5245708)|0))>>2)]=((5261272)|0);
  HEAP16[((((5246274)|0))>>1)]=-1;
  HEAP8[(((5246557)|0))]=1;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=-64;
  HEAP32[((((5245808)|0))>>2)]=((5260808)|0);
  HEAP16[((((5246324)|0))>>1)]=-1;
  HEAP8[(((5246582)|0))]=1;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=49;
  HEAP32[((((5245236)|0))>>2)]=((5260476)|0);
  HEAP16[((((5246038)|0))>>1)]=-1;
  HEAP8[(((5246439)|0))]=1;
  var $21=HEAP32[((((5246912)|0))>>2)];
  var $inc41=((($21)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc41;
  var $arrayidx42=((((5244804)|0)+$21)|0);
  HEAP8[($arrayidx42)]=-112;
  HEAP32[((((5245616)|0))>>2)]=((5260208)|0);
  HEAP16[((((5246228)|0))>>1)]=-1;
  HEAP8[(((5246534)|0))]=1;
  var $22=HEAP32[((((5246912)|0))>>2)];
  var $inc43=((($22)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc43;
  var $arrayidx44=((((5244804)|0)+$22)|0);
  HEAP8[($arrayidx44)]=-107;
  HEAP32[((((5245636)|0))>>2)]=((5259884)|0);
  HEAP16[((((5246238)|0))>>1)]=-1;
  HEAP8[(((5246539)|0))]=1;
  var $23=HEAP32[((((5246912)|0))>>2)];
  var $inc45=((($23)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc45;
  var $arrayidx46=((((5244804)|0)+$23)|0);
  HEAP8[($arrayidx46)]=-109;
  HEAP32[((((5245628)|0))>>2)]=((5259660)|0);
  HEAP16[((((5246234)|0))>>1)]=-1;
  HEAP8[(((5246537)|0))]=1;
  var $24=HEAP32[((((5246912)|0))>>2)];
  var $inc47=((($24)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc47;
  var $arrayidx48=((((5244804)|0)+$24)|0);
  HEAP8[($arrayidx48)]=-108;
  HEAP32[((((5245632)|0))>>2)]=((5259288)|0);
  HEAP16[((((5246236)|0))>>1)]=-1;
  HEAP8[(((5246538)|0))]=1;
  var $25=HEAP32[((((5246912)|0))>>2)];
  var $inc49=((($25)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc49;
  var $arrayidx50=((((5244804)|0)+$25)|0);
  HEAP8[($arrayidx50)]=97;
  HEAP32[((((5245428)|0))>>2)]=((5258888)|0);
  HEAP16[((((5246134)|0))>>1)]=-1;
  HEAP8[(((5246487)|0))]=1;
  var $26=HEAP32[((((5246912)|0))>>2)];
  var $inc51=((($26)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc51;
  var $arrayidx52=((((5244804)|0)+$26)|0);
  HEAP8[($arrayidx52)]=-100;
  HEAP32[((((5245664)|0))>>2)]=((5258636)|0);
  HEAP16[((((5246252)|0))>>1)]=-1;
  HEAP8[(((5246546)|0))]=1;
  var $27=HEAP32[((((5246912)|0))>>2)];
  var $inc53=((($27)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc53;
  var $arrayidx54=((((5244804)|0)+$27)|0);
  HEAP8[($arrayidx54)]=56;
  HEAP32[((((5245264)|0))>>2)]=((5258356)|0);
  HEAP16[((((5246052)|0))>>1)]=-1;
  HEAP8[(((5246446)|0))]=1;
  var $28=HEAP32[((((5246912)|0))>>2)];
  var $inc55=((($28)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc55;
  var $arrayidx56=((((5244804)|0)+$28)|0);
  HEAP8[($arrayidx56)]=-61;
  HEAP32[((((5245820)|0))>>2)]=((5258224)|0);
  HEAP16[((((5246330)|0))>>1)]=-1;
  HEAP8[(((5246585)|0))]=1;
  var $29=HEAP32[((((5246912)|0))>>2)];
  var $inc57=((($29)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc57;
  var $arrayidx58=((((5244804)|0)+$29)|0);
  HEAP8[($arrayidx58)]=20;
  HEAP32[((((5245120)|0))>>2)]=((5257864)|0);
  HEAP16[((((5245980)|0))>>1)]=195;
  HEAP8[(((5246410)|0))]=1;

  return;
}
_qh_allstatC["X"]=1;

function _qh_allstatD() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=-39;
  HEAP32[((((5245908)|0))>>2)]=((5257512)|0);
  HEAP16[((((5246374)|0))>>1)]=-1;
  HEAP8[(((5246607)|0))]=1;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-35;
  HEAP32[((((5245924)|0))>>2)]=((5257200)|0);
  HEAP16[((((5246382)|0))>>1)]=-1;
  HEAP8[(((5246611)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=-38;
  HEAP32[((((5245912)|0))>>2)]=((5256744)|0);
  HEAP16[((((5246376)|0))>>1)]=-1;
  HEAP8[(((5246608)|0))]=3;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=-34;
  HEAP32[((((5245928)|0))>>2)]=((5256520)|0);
  HEAP16[((((5246384)|0))>>1)]=-1;
  HEAP8[(((5246612)|0))]=3;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=61;
  HEAP32[((((5245284)|0))>>2)]=((5256120)|0);
  HEAP16[((((5246062)|0))>>1)]=-1;
  HEAP8[(((5246451)|0))]=0;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=47;
  HEAP32[((((5245228)|0))>>2)]=((5255772)|0);
  HEAP16[((((5246034)|0))>>1)]=-1;
  HEAP8[(((5246437)|0))]=2;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=48;
  HEAP32[((((5245232)|0))>>2)]=((5255584)|0);
  HEAP16[((((5246036)|0))>>1)]=-1;
  HEAP8[(((5246438)|0))]=3;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=82;
  HEAP32[((((5245368)|0))>>2)]=((5255376)|0);
  HEAP16[((((5246104)|0))>>1)]=-1;
  HEAP8[(((5246472)|0))]=1;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=84;
  HEAP32[((((5245376)|0))>>2)]=((5255144)|0);
  HEAP16[((((5246108)|0))>>1)]=82;
  HEAP8[(((5246474)|0))]=2;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=83;
  HEAP32[((((5245372)|0))>>2)]=((5254752)|0);
  HEAP16[((((5246106)|0))>>1)]=-1;
  HEAP8[(((5246473)|0))]=3;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=85;
  HEAP32[((((5245380)|0))>>2)]=((5254576)|0);
  HEAP16[((((5246110)|0))>>1)]=82;
  HEAP8[(((5246475)|0))]=2;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=91;
  HEAP32[((((5245404)|0))>>2)]=((5254188)|0);
  HEAP16[((((5246122)|0))>>1)]=-1;
  HEAP8[(((5246481)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=93;
  HEAP32[((((5245412)|0))>>2)]=((5255144)|0);
  HEAP16[((((5246126)|0))>>1)]=91;
  HEAP8[(((5246483)|0))]=2;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=92;
  HEAP32[((((5245408)|0))>>2)]=((5254752)|0);
  HEAP16[((((5246124)|0))>>1)]=-1;
  HEAP8[(((5246482)|0))]=3;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=94;
  HEAP32[((((5245416)|0))>>2)]=((5253904)|0);
  HEAP16[((((5246128)|0))>>1)]=91;
  HEAP8[(((5246484)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=95;
  HEAP32[((((5245420)|0))>>2)]=((5253668)|0);
  HEAP16[((((5246130)|0))>>1)]=-1;
  HEAP8[(((5246485)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=87;
  HEAP32[((((5245388)|0))>>2)]=((5253408)|0);
  HEAP16[((((5246114)|0))>>1)]=-1;
  HEAP8[(((5246477)|0))]=1;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=89;
  HEAP32[((((5245396)|0))>>2)]=((5255144)|0);
  HEAP16[((((5246118)|0))>>1)]=87;
  HEAP8[(((5246479)|0))]=2;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=88;
  HEAP32[((((5245392)|0))>>2)]=((5254752)|0);
  HEAP16[((((5246116)|0))>>1)]=-1;
  HEAP8[(((5246478)|0))]=3;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=90;
  HEAP32[((((5245400)|0))>>2)]=((5253904)|0);
  HEAP16[((((5246120)|0))>>1)]=87;
  HEAP8[(((5246480)|0))]=1;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=-94;
  HEAP32[((((5245688)|0))>>2)]=((5253172)|0);
  HEAP16[((((5246264)|0))>>1)]=-1;
  HEAP8[(((5246552)|0))]=1;
  var $21=HEAP32[((((5246912)|0))>>2)];
  var $inc41=((($21)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc41;
  var $arrayidx42=((((5244804)|0)+$21)|0);
  HEAP8[($arrayidx42)]=-97;
  HEAP32[((((5245676)|0))>>2)]=((5252944)|0);
  HEAP16[((((5246258)|0))>>1)]=-1;
  HEAP8[(((5246549)|0))]=1;
  var $22=HEAP32[((((5246912)|0))>>2)];
  var $inc43=((($22)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc43;
  var $arrayidx44=((((5244804)|0)+$22)|0);
  HEAP8[($arrayidx44)]=-95;
  HEAP32[((((5245684)|0))>>2)]=((5252656)|0);
  HEAP16[((((5246262)|0))>>1)]=-1;
  HEAP8[(((5246551)|0))]=1;

  return;
}
_qh_allstatD["X"]=1;

function _qh_allstatE() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=-93;
  HEAP32[((((5245692)|0))>>2)]=((5252452)|0);
  HEAP16[((((5246266)|0))>>1)]=-1;
  HEAP8[(((5246553)|0))]=1;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-90;
  HEAP32[((((5245704)|0))>>2)]=((5252128)|0);
  HEAP16[((((5246272)|0))>>1)]=-1;
  HEAP8[(((5246556)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=33;
  HEAP32[((((5245172)|0))>>2)]=((5251840)|0);
  HEAP16[((((5246006)|0))>>1)]=-1;
  HEAP8[(((5246423)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=17;
  HEAP32[((((5245108)|0))>>2)]=((5251588)|0);
  HEAP16[((((5245974)|0))>>1)]=-1;
  HEAP8[(((5246407)|0))]=1;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=18;
  HEAP32[((((5245112)|0))>>2)]=((5251336)|0);
  HEAP16[((((5245976)|0))>>1)]=-1;
  HEAP8[(((5246408)|0))]=1;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=109;
  HEAP32[((((5245476)|0))>>2)]=((5251092)|0);
  HEAP16[((((5246158)|0))>>1)]=-1;
  HEAP8[(((5246499)|0))]=6;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=-91;
  HEAP32[((((5245700)|0))>>2)]=((5250684)|0);
  HEAP16[((((5246270)|0))>>1)]=-1;
  HEAP8[(((5246555)|0))]=1;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=-57;
  HEAP32[((((5245836)|0))>>2)]=((5250440)|0);
  HEAP16[((((5246338)|0))>>1)]=-1;
  HEAP8[(((5246589)|0))]=1;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=-92;
  HEAP32[((((5245696)|0))>>2)]=((5250260)|0);
  HEAP16[((((5246268)|0))>>1)]=-1;
  HEAP8[(((5246554)|0))]=1;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=50;
  HEAP32[((((5245240)|0))>>2)]=((5249872)|0);
  HEAP16[((((5246040)|0))>>1)]=-1;
  HEAP8[(((5246440)|0))]=1;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=51;
  HEAP32[((((5245244)|0))>>2)]=((5249600)|0);
  HEAP16[((((5246042)|0))>>1)]=-1;
  HEAP8[(((5246441)|0))]=1;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=52;
  HEAP32[((((5245248)|0))>>2)]=((5304340)|0);
  HEAP16[((((5246044)|0))>>1)]=-1;
  HEAP8[(((5246442)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=53;
  HEAP32[((((5245252)|0))>>2)]=((5303996)|0);
  HEAP16[((((5246046)|0))>>1)]=-1;
  HEAP8[(((5246443)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=55;
  HEAP32[((((5245260)|0))>>2)]=((5303688)|0);
  HEAP16[((((5246050)|0))>>1)]=-1;
  HEAP8[(((5246445)|0))]=1;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=54;
  HEAP32[((((5245256)|0))>>2)]=((5303356)|0);
  HEAP16[((((5246048)|0))>>1)]=-1;
  HEAP8[(((5246444)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=-58;
  HEAP32[((((5245832)|0))>>2)]=((5303008)|0);
  HEAP16[((((5246336)|0))>>1)]=-1;
  HEAP8[(((5246588)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=-96;
  HEAP32[((((5245680)|0))>>2)]=((5302800)|0);
  HEAP16[((((5246260)|0))>>1)]=-1;
  HEAP8[(((5246550)|0))]=1;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=21;
  HEAP32[((((5245124)|0))>>2)]=((5302404)|0);
  HEAP16[((((5245982)|0))>>1)]=-1;
  HEAP8[(((5246411)|0))]=1;

  return;
}
_qh_allstatE["X"]=1;

function _qh_allstatE2() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=62;
  HEAP32[((((5245288)|0))>>2)]=((5302328)|0);
  HEAP16[((((5246064)|0))>>1)]=-1;
  HEAP8[(((5246452)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=98;
  HEAP32[((((5245432)|0))>>2)]=((5301996)|0);
  HEAP16[((((5246136)|0))>>1)]=-1;
  HEAP8[(((5246488)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=101;
  HEAP32[((((5245444)|0))>>2)]=((5301856)|0);
  HEAP16[((((5246142)|0))>>1)]=98;
  HEAP8[(((5246491)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=99;
  HEAP32[((((5245436)|0))>>2)]=((5301644)|0);
  HEAP16[((((5246138)|0))>>1)]=-1;
  HEAP8[(((5246489)|0))]=1;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=100;
  HEAP32[((((5245440)|0))>>2)]=((5301452)|0);
  HEAP16[((((5246140)|0))>>1)]=99;
  HEAP8[(((5246490)|0))]=1;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=77;
  HEAP32[((((5245348)|0))>>2)]=((5301172)|0);
  HEAP16[((((5246094)|0))>>1)]=-1;
  HEAP8[(((5246467)|0))]=1;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=72;
  HEAP32[((((5245328)|0))>>2)]=((5300876)|0);
  HEAP16[((((5246084)|0))>>1)]=-1;
  HEAP8[(((5246462)|0))]=1;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=63;
  HEAP32[((((5245292)|0))>>2)]=((5300676)|0);
  HEAP16[((((5246066)|0))>>1)]=-1;
  HEAP8[(((5246453)|0))]=0;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=7;
  HEAP32[((((5245068)|0))>>2)]=((5300272)|0);
  HEAP16[((((5245954)|0))>>1)]=-1;
  HEAP8[(((5246397)|0))]=1;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=15;
  HEAP32[((((5245100)|0))>>2)]=((5299896)|0);
  HEAP16[((((5245970)|0))>>1)]=-1;
  HEAP8[(((5246405)|0))]=1;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=16;
  HEAP32[((((5245104)|0))>>2)]=((5299656)|0);
  HEAP16[((((5245972)|0))>>1)]=-1;
  HEAP8[(((5246406)|0))]=1;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=19;
  HEAP32[((((5245116)|0))>>2)]=((5299352)|0);
  HEAP16[((((5245978)|0))>>1)]=-1;
  HEAP8[(((5246409)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=57;
  HEAP32[((((5245268)|0))>>2)]=((5299240)|0);
  HEAP16[((((5246054)|0))>>1)]=-1;
  HEAP8[(((5246447)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=30;
  HEAP32[((((5245160)|0))>>2)]=((5299028)|0);
  HEAP16[((((5246000)|0))>>1)]=-1;
  HEAP8[(((5246420)|0))]=1;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=31;
  HEAP32[((((5245164)|0))>>2)]=((5298740)|0);
  HEAP16[((((5246002)|0))>>1)]=-1;
  HEAP8[(((5246421)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=26;
  HEAP32[((((5245144)|0))>>2)]=((5298456)|0);
  HEAP16[((((5245992)|0))>>1)]=-1;
  HEAP8[(((5246416)|0))]=1;

  return;
}
_qh_allstatE2["X"]=1;

function _qh_allstatF() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=64;
  HEAP32[((((5245296)|0))>>2)]=((5298168)|0);
  HEAP16[((((5246068)|0))>>1)]=-1;
  HEAP8[(((5246454)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-85;
  HEAP32[((((5245724)|0))>>2)]=((5297968)|0);
  HEAP16[((((5246282)|0))>>1)]=-1;
  HEAP8[(((5246561)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=121;
  HEAP32[((((5245524)|0))>>2)]=((5297772)|0);
  HEAP16[((((5246182)|0))>>1)]=171;
  HEAP8[(((5246511)|0))]=2;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=122;
  HEAP32[((((5245528)|0))>>2)]=((5297568)|0);
  HEAP16[((((5246184)|0))>>1)]=-1;
  HEAP8[(((5246512)|0))]=2;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=126;
  HEAP32[((((5245544)|0))>>2)]=((5297424)|0);
  HEAP16[((((5246192)|0))>>1)]=171;
  HEAP8[(((5246516)|0))]=2;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=127;
  HEAP32[((((5245548)|0))>>2)]=((5297192)|0);
  HEAP16[((((5246194)|0))>>1)]=-1;
  HEAP8[(((5246517)|0))]=2;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=123;
  HEAP32[((((5245532)|0))>>2)]=((5297072)|0);
  HEAP16[((((5246186)|0))>>1)]=-1;
  HEAP8[(((5246513)|0))]=2;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=-128;
  HEAP32[((((5245552)|0))>>2)]=((5296952)|0);
  HEAP16[((((5246196)|0))>>1)]=-1;
  HEAP8[(((5246518)|0))]=2;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=110;
  HEAP32[((((5245480)|0))>>2)]=((5296768)|0);
  HEAP16[((((5246160)|0))>>1)]=-1;
  HEAP8[(((5246500)|0))]=7;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=-124;
  HEAP32[((((5245568)|0))>>2)]=((5296600)|0);
  HEAP16[((((5246204)|0))>>1)]=-1;
  HEAP8[(((5246522)|0))]=8;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=-33;
  HEAP32[((((5245932)|0))>>2)]=((5296484)|0);
  HEAP16[((((5246386)|0))>>1)]=-1;
  HEAP8[(((5246613)|0))]=1;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=-32;
  HEAP32[((((5245936)|0))>>2)]=((5296388)|0);
  HEAP16[((((5246388)|0))>>1)]=-1;
  HEAP8[(((5246614)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=-59;
  HEAP32[((((5245828)|0))>>2)]=((5296232)|0);
  HEAP16[((((5246334)|0))>>1)]=-1;
  HEAP8[(((5246587)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=-127;
  HEAP32[((((5245556)|0))>>2)]=((5295984)|0);
  HEAP16[((((5246198)|0))>>1)]=-1;
  HEAP8[(((5246519)|0))]=1;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=-98;
  HEAP32[((((5245672)|0))>>2)]=((5295884)|0);
  HEAP16[((((5246256)|0))>>1)]=-1;
  HEAP8[(((5246548)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=39;
  HEAP32[((((5245196)|0))>>2)]=((5295576)|0);
  HEAP16[((((5246018)|0))>>1)]=-1;
  HEAP8[(((5246429)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=38;
  HEAP32[((((5245192)|0))>>2)]=((5295456)|0);
  HEAP16[((((5246016)|0))>>1)]=39;
  HEAP8[(((5246428)|0))]=2;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=37;
  HEAP32[((((5245188)|0))>>2)]=((5295252)|0);
  HEAP16[((((5246014)|0))>>1)]=-1;
  HEAP8[(((5246427)|0))]=3;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=124;
  HEAP32[((((5245536)|0))>>2)]=((5295132)|0);
  HEAP16[((((5246188)|0))>>1)]=-1;
  HEAP8[(((5246514)|0))]=1;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=125;
  HEAP32[((((5245540)|0))>>2)]=((5294932)|0);
  HEAP16[((((5246190)|0))>>1)]=-1;
  HEAP8[(((5246515)|0))]=1;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=120;
  HEAP32[((((5245520)|0))>>2)]=((5294624)|0);
  HEAP16[((((5246180)|0))>>1)]=-1;
  HEAP8[(((5246510)|0))]=1;
  var $21=HEAP32[((((5246912)|0))>>2)];
  var $inc41=((($21)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc41;
  var $arrayidx42=((((5244804)|0)+$21)|0);
  HEAP8[($arrayidx42)]=-126;
  HEAP32[((((5245560)|0))>>2)]=((5294504)|0);
  HEAP16[((((5246200)|0))>>1)]=-1;
  HEAP8[(((5246520)|0))]=1;
  var $22=HEAP32[((((5246912)|0))>>2)];
  var $inc43=((($22)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc43;
  var $arrayidx44=((((5244804)|0)+$22)|0);
  HEAP8[($arrayidx44)]=40;
  HEAP32[((((5245200)|0))>>2)]=((5294304)|0);
  HEAP16[((((5246020)|0))>>1)]=-1;
  HEAP8[(((5246430)|0))]=1;
  var $23=HEAP32[((((5246912)|0))>>2)];
  var $inc45=((($23)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc45;
  var $arrayidx46=((((5244804)|0)+$23)|0);
  HEAP8[($arrayidx46)]=44;
  HEAP32[((((5245216)|0))>>2)]=((5294040)|0);
  HEAP16[((((5246028)|0))>>1)]=-1;
  HEAP8[(((5246434)|0))]=1;
  var $24=HEAP32[((((5246912)|0))>>2)];
  var $inc47=((($24)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc47;
  var $arrayidx48=((((5244804)|0)+$24)|0);
  HEAP8[($arrayidx48)]=119;
  HEAP32[((((5245516)|0))>>2)]=((5293892)|0);
  HEAP16[((((5246178)|0))>>1)]=-1;
  HEAP8[(((5246509)|0))]=1;
  var $25=HEAP32[((((5246912)|0))>>2)];
  var $inc49=((($25)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc49;
  var $arrayidx50=((((5244804)|0)+$25)|0);
  HEAP8[($arrayidx50)]=-120;
  HEAP32[((((5245584)|0))>>2)]=((5293692)|0);
  HEAP16[((((5246212)|0))>>1)]=-1;
  HEAP8[(((5246526)|0))]=1;
  var $26=HEAP32[((((5246912)|0))>>2)];
  var $inc51=((($26)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc51;
  var $arrayidx52=((((5244804)|0)+$26)|0);
  HEAP8[($arrayidx52)]=-62;
  HEAP32[((((5245816)|0))>>2)]=((5293564)|0);
  HEAP16[((((5246328)|0))>>1)]=-1;
  HEAP8[(((5246584)|0))]=2;

  return;
}
_qh_allstatF["X"]=1;

function _qh_allstatG() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=0;
  HEAP32[((((5245040)|0))>>2)]=((5293356)|0);
  HEAP16[((((5245940)|0))>>1)]=-1;
  HEAP8[(((5246390)|0))]=1;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=2;
  HEAP32[((((5245048)|0))>>2)]=((5293204)|0);
  HEAP16[((((5245944)|0))>>1)]=0;
  HEAP8[(((5246392)|0))]=6;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=1;
  HEAP32[((((5245044)|0))>>2)]=((5293052)|0);
  HEAP16[((((5245942)|0))>>1)]=-1;
  HEAP8[(((5246391)|0))]=7;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=27;
  HEAP32[((((5245148)|0))>>2)]=((5292848)|0);
  HEAP16[((((5245994)|0))>>1)]=-1;
  HEAP8[(((5246417)|0))]=1;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=29;
  HEAP32[((((5245156)|0))>>2)]=((5293204)|0);
  HEAP16[((((5245998)|0))>>1)]=27;
  HEAP8[(((5246419)|0))]=6;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=28;
  HEAP32[((((5245152)|0))>>2)]=((5293052)|0);
  HEAP16[((((5245996)|0))>>1)]=-1;
  HEAP8[(((5246418)|0))]=7;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=22;
  HEAP32[((((5245128)|0))>>2)]=((5292788)|0);
  HEAP16[((((5245984)|0))>>1)]=-1;
  HEAP8[(((5246412)|0))]=1;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=24;
  HEAP32[((((5245136)|0))>>2)]=((5293204)|0);
  HEAP16[((((5245988)|0))>>1)]=22;
  HEAP8[(((5246414)|0))]=6;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=23;
  HEAP32[((((5245132)|0))>>2)]=((5293052)|0);
  HEAP16[((((5245986)|0))>>1)]=-1;
  HEAP8[(((5246413)|0))]=7;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=11;
  HEAP32[((((5245084)|0))>>2)]=((5292656)|0);
  HEAP16[((((5245962)|0))>>1)]=-1;
  HEAP8[(((5246401)|0))]=1;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=13;
  HEAP32[((((5245092)|0))>>2)]=((5293204)|0);
  HEAP16[((((5245966)|0))>>1)]=11;
  HEAP8[(((5246403)|0))]=6;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=12;
  HEAP32[((((5245088)|0))>>2)]=((5293052)|0);
  HEAP16[((((5245964)|0))>>1)]=-1;
  HEAP8[(((5246402)|0))]=7;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=41;
  HEAP32[((((5245204)|0))>>2)]=((5292416)|0);
  HEAP16[((((5246022)|0))>>1)]=-1;
  HEAP8[(((5246431)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=43;
  HEAP32[((((5245212)|0))>>2)]=((5293204)|0);
  HEAP16[((((5246026)|0))>>1)]=41;
  HEAP8[(((5246433)|0))]=6;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=42;
  HEAP32[((((5245208)|0))>>2)]=((5293052)|0);
  HEAP16[((((5246024)|0))>>1)]=-1;
  HEAP8[(((5246432)|0))]=7;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=78;
  HEAP32[((((5245352)|0))>>2)]=((5292344)|0);
  HEAP16[((((5246096)|0))>>1)]=-1;
  HEAP8[(((5246468)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=80;
  HEAP32[((((5245360)|0))>>2)]=((5293204)|0);
  HEAP16[((((5246100)|0))>>1)]=78;
  HEAP8[(((5246470)|0))]=6;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=79;
  HEAP32[((((5245356)|0))>>2)]=((5293052)|0);
  HEAP16[((((5246098)|0))>>1)]=-1;
  HEAP8[(((5246469)|0))]=7;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=73;
  HEAP32[((((5245332)|0))>>2)]=((5292172)|0);
  HEAP16[((((5246086)|0))>>1)]=-1;
  HEAP8[(((5246463)|0))]=1;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=75;
  HEAP32[((((5245340)|0))>>2)]=((5293204)|0);
  HEAP16[((((5246090)|0))>>1)]=73;
  HEAP8[(((5246465)|0))]=6;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=74;
  HEAP32[((((5245336)|0))>>2)]=((5293052)|0);
  HEAP16[((((5246088)|0))>>1)]=-1;
  HEAP8[(((5246464)|0))]=7;

  return;
}
_qh_allstatG["X"]=1;

function _qh_allstatH() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($0)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$0)|0);
  HEAP8[($arrayidx)]=65;
  HEAP32[((((5245300)|0))>>2)]=((5292136)|0);
  HEAP16[((((5246070)|0))>>1)]=-1;
  HEAP8[(((5246455)|0))]=0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx2)]=-79;
  HEAP32[((((5245748)|0))>>2)]=((5292028)|0);
  HEAP16[((((5246294)|0))>>1)]=-1;
  HEAP8[(((5246567)|0))]=1;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx4)]=-80;
  HEAP32[((((5245744)|0))>>2)]=((5291852)|0);
  HEAP16[((((5246292)|0))>>1)]=-1;
  HEAP8[(((5246566)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx6)]=-81;
  HEAP32[((((5245740)|0))>>2)]=((5291752)|0);
  HEAP16[((((5246290)|0))>>1)]=-1;
  HEAP8[(((5246565)|0))]=1;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx8)]=86;
  HEAP32[((((5245384)|0))>>2)]=((5291692)|0);
  HEAP16[((((5246112)|0))>>1)]=-1;
  HEAP8[(((5246476)|0))]=1;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx10)]=76;
  HEAP32[((((5245344)|0))>>2)]=((5291656)|0);
  HEAP16[((((5246092)|0))>>1)]=-1;
  HEAP8[(((5246466)|0))]=1;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx12)]=46;
  HEAP32[((((5245224)|0))>>2)]=((5291524)|0);
  HEAP16[((((5246032)|0))>>1)]=-1;
  HEAP8[(((5246436)|0))]=1;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx14)]=71;
  HEAP32[((((5245324)|0))>>2)]=((5291224)|0);
  HEAP16[((((5246082)|0))>>1)]=-1;
  HEAP8[(((5246461)|0))]=1;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx16)]=70;
  HEAP32[((((5245320)|0))>>2)]=((5291156)|0);
  HEAP16[((((5246080)|0))>>1)]=-1;
  HEAP8[(((5246460)|0))]=1;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx18)]=45;
  HEAP32[((((5245220)|0))>>2)]=((5291016)|0);
  HEAP16[((((5246030)|0))>>1)]=-1;
  HEAP8[(((5246435)|0))]=1;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx20)]=-83;
  HEAP32[((((5245732)|0))>>2)]=((5290264)|0);
  HEAP16[((((5246286)|0))>>1)]=-1;
  HEAP8[(((5246563)|0))]=1;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx22)]=-82;
  HEAP32[((((5245736)|0))>>2)]=((5290172)|0);
  HEAP16[((((5246288)|0))>>1)]=-1;
  HEAP8[(((5246564)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx24)]=106;
  HEAP32[((((5245464)|0))>>2)]=((5290040)|0);
  HEAP16[((((5246152)|0))>>1)]=-1;
  HEAP8[(((5246496)|0))]=1;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx26)]=104;
  HEAP32[((((5245456)|0))>>2)]=((5289952)|0);
  HEAP16[((((5246148)|0))>>1)]=-1;
  HEAP8[(((5246494)|0))]=1;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx28)]=103;
  HEAP32[((((5245452)|0))>>2)]=((5289760)|0);
  HEAP16[((((5246146)|0))>>1)]=-1;
  HEAP8[(((5246493)|0))]=1;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx30)]=107;
  HEAP32[((((5245468)|0))>>2)]=((5289700)|0);
  HEAP16[((((5246154)|0))>>1)]=103;
  HEAP8[(((5246497)|0))]=2;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx32)]=105;
  HEAP32[((((5245460)|0))>>2)]=((5289600)|0);
  HEAP16[((((5246150)|0))>>1)]=-1;
  HEAP8[(((5246495)|0))]=3;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx34)]=-45;
  HEAP32[((((5245884)|0))>>2)]=0;
  HEAP16[((((5246362)|0))>>1)]=-1;
  HEAP8[(((5246601)|0))]=1;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx36)]=-44;
  HEAP32[((((5245888)|0))>>2)]=((5289296)|0);
  HEAP16[((((5246364)|0))>>1)]=211;
  HEAP8[(((5246602)|0))]=2;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx38)]=-43;
  HEAP32[((((5245892)|0))>>2)]=((5289160)|0);
  HEAP16[((((5246366)|0))>>1)]=-1;
  HEAP8[(((5246603)|0))]=3;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc39=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc39;
  var $arrayidx40=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx40)]=67;
  HEAP32[((((5245308)|0))>>2)]=((5289056)|0);
  HEAP16[((((5246074)|0))>>1)]=-1;
  HEAP8[(((5246457)|0))]=0;
  var $21=HEAP32[((((5246912)|0))>>2)];
  var $inc41=((($21)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc41;
  var $arrayidx42=((((5244804)|0)+$21)|0);
  HEAP8[($arrayidx42)]=115;
  HEAP32[((((5245500)|0))>>2)]=((5288856)|0);
  HEAP16[((((5246170)|0))>>1)]=-1;
  HEAP8[(((5246505)|0))]=2;
  var $22=HEAP32[((((5246912)|0))>>2)];
  var $inc43=((($22)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc43;
  var $arrayidx44=((((5244804)|0)+$22)|0);
  HEAP8[($arrayidx44)]=118;
  HEAP32[((((5245512)|0))>>2)]=((5288656)|0);
  HEAP16[((((5246176)|0))>>1)]=-1;
  HEAP8[(((5246508)|0))]=2;
  var $23=HEAP32[((((5246912)|0))>>2)];
  var $inc45=((($23)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc45;
  var $arrayidx46=((((5244804)|0)+$23)|0);
  HEAP8[($arrayidx46)]=116;
  HEAP32[((((5245504)|0))>>2)]=((5288440)|0);
  HEAP16[((((5246172)|0))>>1)]=-1;
  HEAP8[(((5246506)|0))]=2;
  var $24=HEAP32[((((5246912)|0))>>2)];
  var $inc47=((($24)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc47;
  var $arrayidx48=((((5244804)|0)+$24)|0);
  HEAP8[($arrayidx48)]=117;
  HEAP32[((((5245508)|0))>>2)]=((5288272)|0);
  HEAP16[((((5246174)|0))>>1)]=-1;
  HEAP8[(((5246507)|0))]=2;

  return;
}
_qh_allstatH["X"]=1;

function _qh_allstatI() {
  var label = 0;


  var $0=HEAP32[((((5246912)|0))>>2)];
  HEAP32[((((5246920)|0))>>2)]=$0;
  var $1=HEAP32[((((5246912)|0))>>2)];
  var $inc=((($1)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc;
  var $arrayidx=((((5244804)|0)+$1)|0);
  HEAP8[($arrayidx)]=68;
  HEAP32[((((5245312)|0))>>2)]=((5288080)|0);
  HEAP16[((((5246076)|0))>>1)]=-1;
  HEAP8[(((5246458)|0))]=0;
  var $2=HEAP32[((((5246912)|0))>>2)];
  var $inc1=((($2)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc1;
  var $arrayidx2=((((5244804)|0)+$2)|0);
  HEAP8[($arrayidx2)]=-76;
  HEAP32[((((5245760)|0))>>2)]=((5287948)|0);
  HEAP16[((((5246300)|0))>>1)]=-1;
  HEAP8[(((5246570)|0))]=1;
  var $3=HEAP32[((((5246912)|0))>>2)];
  var $inc3=((($3)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc3;
  var $arrayidx4=((((5244804)|0)+$3)|0);
  HEAP8[($arrayidx4)]=-75;
  HEAP32[((((5245764)|0))>>2)]=((5287700)|0);
  HEAP16[((((5246302)|0))>>1)]=180;
  HEAP8[(((5246571)|0))]=6;
  var $4=HEAP32[((((5246912)|0))>>2)];
  var $inc5=((($4)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc5;
  var $arrayidx6=((((5244804)|0)+$4)|0);
  HEAP8[($arrayidx6)]=-74;
  HEAP32[((((5245768)|0))>>2)]=((5287012)|0);
  HEAP16[((((5246304)|0))>>1)]=-1;
  HEAP8[(((5246572)|0))]=7;
  var $5=HEAP32[((((5246912)|0))>>2)];
  var $inc7=((($5)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc7;
  var $arrayidx8=((((5244804)|0)+$5)|0);
  HEAP8[($arrayidx8)]=-70;
  HEAP32[((((5245784)|0))>>2)]=((5286888)|0);
  HEAP16[((((5246312)|0))>>1)]=-1;
  HEAP8[(((5246576)|0))]=1;
  var $6=HEAP32[((((5246912)|0))>>2)];
  var $inc9=((($6)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc9;
  var $arrayidx10=((((5244804)|0)+$6)|0);
  HEAP8[($arrayidx10)]=-69;
  HEAP32[((((5245788)|0))>>2)]=((5286708)|0);
  HEAP16[((((5246314)|0))>>1)]=186;
  HEAP8[(((5246577)|0))]=6;
  var $7=HEAP32[((((5246912)|0))>>2)];
  var $inc11=((($7)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc11;
  var $arrayidx12=((((5244804)|0)+$7)|0);
  HEAP8[($arrayidx12)]=-68;
  HEAP32[((((5245792)|0))>>2)]=((5286560)|0);
  HEAP16[((((5246316)|0))>>1)]=-1;
  HEAP8[(((5246578)|0))]=7;
  var $8=HEAP32[((((5246912)|0))>>2)];
  var $inc13=((($8)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc13;
  var $arrayidx14=((((5244804)|0)+$8)|0);
  HEAP8[($arrayidx14)]=-67;
  HEAP32[((((5245796)|0))>>2)]=((5286336)|0);
  HEAP16[((((5246318)|0))>>1)]=-1;
  HEAP8[(((5246579)|0))]=1;
  var $9=HEAP32[((((5246912)|0))>>2)];
  var $inc15=((($9)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc15;
  var $arrayidx16=((((5244804)|0)+$9)|0);
  HEAP8[($arrayidx16)]=-66;
  HEAP32[((((5245800)|0))>>2)]=((5286172)|0);
  HEAP16[((((5246320)|0))>>1)]=189;
  HEAP8[(((5246580)|0))]=6;
  var $10=HEAP32[((((5246912)|0))>>2)];
  var $inc17=((($10)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc17;
  var $arrayidx18=((((5244804)|0)+$10)|0);
  HEAP8[($arrayidx18)]=-65;
  HEAP32[((((5245804)|0))>>2)]=((5286076)|0);
  HEAP16[((((5246322)|0))>>1)]=-1;
  HEAP8[(((5246581)|0))]=7;
  var $11=HEAP32[((((5246912)|0))>>2)];
  var $inc19=((($11)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc19;
  var $arrayidx20=((((5244804)|0)+$11)|0);
  HEAP8[($arrayidx20)]=-73;
  HEAP32[((((5245772)|0))>>2)]=((5285992)|0);
  HEAP16[((((5246306)|0))>>1)]=-1;
  HEAP8[(((5246573)|0))]=1;
  var $12=HEAP32[((((5246912)|0))>>2)];
  var $inc21=((($12)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc21;
  var $arrayidx22=((((5244804)|0)+$12)|0);
  HEAP8[($arrayidx22)]=-72;
  HEAP32[((((5245776)|0))>>2)]=((5286172)|0);
  HEAP16[((((5246308)|0))>>1)]=183;
  HEAP8[(((5246574)|0))]=6;
  var $13=HEAP32[((((5246912)|0))>>2)];
  var $inc23=((($13)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc23;
  var $arrayidx24=((((5244804)|0)+$13)|0);
  HEAP8[($arrayidx24)]=-71;
  HEAP32[((((5245780)|0))>>2)]=((5286076)|0);
  HEAP16[((((5246310)|0))>>1)]=-1;
  HEAP8[(((5246575)|0))]=7;
  var $14=HEAP32[((((5246912)|0))>>2)];
  var $inc25=((($14)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc25;
  var $arrayidx26=((((5244804)|0)+$14)|0);
  HEAP8[($arrayidx26)]=69;
  HEAP32[((((5245316)|0))>>2)]=((5285876)|0);
  HEAP16[((((5246078)|0))>>1)]=-1;
  HEAP8[(((5246459)|0))]=0;
  var $15=HEAP32[((((5246912)|0))>>2)];
  var $inc27=((($15)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc27;
  var $arrayidx28=((((5244804)|0)+$15)|0);
  HEAP8[($arrayidx28)]=-53;
  HEAP32[((((5245852)|0))>>2)]=((5285548)|0);
  HEAP16[((((5246346)|0))>>1)]=-1;
  HEAP8[(((5246593)|0))]=1;
  var $16=HEAP32[((((5246912)|0))>>2)];
  var $inc29=((($16)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc29;
  var $arrayidx30=((((5244804)|0)+$16)|0);
  HEAP8[($arrayidx30)]=-51;
  HEAP32[((((5245860)|0))>>2)]=((5285284)|0);
  HEAP16[((((5246350)|0))>>1)]=203;
  HEAP8[(((5246595)|0))]=2;
  var $17=HEAP32[((((5246912)|0))>>2)];
  var $inc31=((($17)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc31;
  var $arrayidx32=((((5244804)|0)+$17)|0);
  HEAP8[($arrayidx32)]=-52;
  HEAP32[((((5245856)|0))>>2)]=((5285128)|0);
  HEAP16[((((5246348)|0))>>1)]=-1;
  HEAP8[(((5246594)|0))]=3;
  var $18=HEAP32[((((5246912)|0))>>2)];
  var $inc33=((($18)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc33;
  var $arrayidx34=((((5244804)|0)+$18)|0);
  HEAP8[($arrayidx34)]=-48;
  HEAP32[((((5245872)|0))>>2)]=((5285012)|0);
  HEAP16[((((5246356)|0))>>1)]=-1;
  HEAP8[(((5246598)|0))]=1;
  var $19=HEAP32[((((5246912)|0))>>2)];
  var $inc35=((($19)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc35;
  var $arrayidx36=((((5244804)|0)+$19)|0);
  HEAP8[($arrayidx36)]=-49;
  HEAP32[((((5245868)|0))>>2)]=((5284948)|0);
  HEAP16[((((5246354)|0))>>1)]=-1;
  HEAP8[(((5246597)|0))]=1;
  var $20=HEAP32[((((5246912)|0))>>2)];
  var $inc37=((($20)+(1))|0);
  HEAP32[((((5246912)|0))>>2)]=$inc37;
  var $arrayidx38=((((5244804)|0)+$20)|0);
  HEAP8[($arrayidx38)]=-50;
  HEAP32[((((5245864)|0))>>2)]=((5284740)|0);
  HEAP16[((((5246352)|0))>>1)]=-1;
  HEAP8[(((5246596)|0))]=1;

  return;
}
_qh_allstatI["X"]=1;

function _qh_allstatistics() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      $i=225;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $dec=((($0)-(1))|0);
      $i=$dec;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$i;
      var $arrayidx=((((5246615)|0)+$1)|0);
      HEAP8[($arrayidx)]=0;
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_freestatistics() {
  var label = 0;



  return;
}


function _qh_collectstatistics() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facet;
      var $neighbor;
      var $neighborp;
      var $vertex;
      var $vertexp;
      var $dotproduct;
      var $dist=__stackBase__;
      var $sizneighbors;
      var $sizridges;
      var $sizvertices;
      var $i;
      var $0=HEAP32[((((5247340)|0))>>2)];
      HEAP32[((((5249224)|0))>>2)]=$0;
      HEAP32[((((5247340)|0))>>2)]=0;
      var $1=HEAP32[((((5247516)|0))>>2)];
      var $2=HEAP32[((((5248932)|0))>>2)];
      var $mul=((($1)*($2))&-1);
      var $add=((($mul)+(2340))|0);
      var $add1=((($add)+(3932))|0);
      HEAP32[(((((5243932)|0)))>>2)]=$add1;
      HEAP32[(((((5243924)|0)))>>2)]=0;
      HEAP32[(((((5243940)|0)))>>2)]=0;
      HEAP32[(((((5243948)|0)))>>2)]=0;
      HEAP32[(((((5243028)|0)))>>2)]=0;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5243036)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243036)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      HEAP32[(((((5244236)|0)))>>2)]=0;
      HEAP32[(((((5244204)|0)))>>2)]=0;
      HEAP32[(((((5244228)|0)))>>2)]=0;
      HEAP32[(((((5244244)|0)))>>2)]=0;
      HEAP32[(((((5244260)|0)))>>2)]=0;
      HEAP32[(((((5244220)|0)))>>2)]=0;
      HEAP32[(((((5244212)|0)))>>2)]=0;
      var $3=HEAP32[((((5249000)|0))>>2)];
      var $4=HEAP32[((((5249188)|0))>>2)];
      var $call=_qh_setsize($4);
      var $sub=((($3)-($call))|0);
      HEAP32[(((((5244716)|0)))>>2)]=$sub;
      var $5=HEAP32[((((5247084)|0))>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $6=HEAP32[((((5246944)|0))>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$7 < 8.988465674311579e+307;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243884)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243884)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp4=$8 < $9;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$10,HEAP32[((((5243884)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243884)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=HEAP32[((((5247084)|0))>>2)];
      var $tobool7=(($11)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244060)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244060)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp9=$12 > $13;
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249084)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249084)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[((((5244060)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244060)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=HEAP32[((((5248944)|0))>>2)];
      $facet=$15;
      label = 13; break;
    case 13: 
      var $16=$facet;
      var $tobool13=(($16)|0)!=0;
      if ($tobool13) { label = 14; break; } else { var $19 = 0;label = 15; break; }
    case 14: 
      var $17=$facet;
      var $next=(($17+44)|0);
      var $18=HEAP32[(($next)>>2)];
      var $tobool14=(($18)|0)!=0;
      var $19 = $tobool14;label = 15; break;
    case 15: 
      var $19;
      if ($19) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $20=$facet;
      var $21=$20;
      var $bf_field_offs=(($21+76)|0);
      var $22=$bf_field_offs;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & -16385;
      HEAP32[(($22)>>2)]=$24;
      label = 17; break;
    case 17: 
      var $25=$facet;
      var $next15=(($25+44)|0);
      var $26=HEAP32[(($next15)>>2)];
      $facet=$26;
      label = 13; break;
    case 18: 
      var $27=HEAP32[((((5247000)|0))>>2)];
      var $tobool16=(($27)|0)!=0;
      if ($tobool16) { label = 19; break; } else { label = 28; break; }
    case 19: 
      var $28=HEAP32[((((5248944)|0))>>2)];
      $facet=$28;
      label = 20; break;
    case 20: 
      var $29=$facet;
      var $tobool19=(($29)|0)!=0;
      if ($tobool19) { label = 21; break; } else { var $32 = 0;label = 22; break; }
    case 21: 
      var $30=$facet;
      var $next21=(($30+44)|0);
      var $31=HEAP32[(($next21)>>2)];
      var $tobool22=(($31)|0)!=0;
      var $32 = $tobool22;label = 22; break;
    case 22: 
      var $32;
      if ($32) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $33=$facet;
      var $34=$33;
      var $bf_field_offs25=(($34+76)|0);
      var $35=$bf_field_offs25;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 >>> 17;
      var $bf_clear=$37 & 1;
      var $38=HEAP32[((((5247460)|0))>>2)];
      var $cmp26=(($bf_clear)|0)!=(($38)|0);
      if ($cmp26) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $39=$facet;
      var $40=$39;
      var $bf_field_offs28=(($40+76)|0);
      var $41=$bf_field_offs28;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & -16385;
      var $44=$43 | 16384;
      HEAP32[(($41)>>2)]=$44;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $45=$facet;
      var $next31=(($45+44)|0);
      var $46=HEAP32[(($next31)>>2)];
      $facet=$46;
      label = 20; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $47=HEAP32[((((5248944)|0))>>2)];
      $facet=$47;
      label = 29; break;
    case 29: 
      var $48=$facet;
      var $tobool35=(($48)|0)!=0;
      if ($tobool35) { label = 30; break; } else { var $51 = 0;label = 31; break; }
    case 30: 
      var $49=$facet;
      var $next37=(($49+44)|0);
      var $50=HEAP32[(($next37)>>2)];
      var $tobool38=(($50)|0)!=0;
      var $51 = $tobool38;label = 31; break;
    case 31: 
      var $51;
      if ($51) { label = 32; break; } else { label = 86; break; }
    case 32: 
      var $52=$facet;
      var $53=$52;
      var $bf_field_offs41=(($53+76)|0);
      var $54=$bf_field_offs41;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 >>> 11;
      var $bf_clear42=$56 & 1;
      var $tobool43=(($bf_clear42)|0)!=0;
      if ($tobool43) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $57=HEAP32[((((5249092)|0))>>2)];
      var $tobool44=(($57)|0)!=0;
      if ($tobool44) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 85; break;
    case 35: 
      var $58=$facet;
      var $vertices=(($58+48)|0);
      var $59=HEAP32[(($vertices)>>2)];
      var $call47=_qh_setsize($59);
      $sizvertices=$call47;
      var $60=$facet;
      var $neighbors=(($60+56)|0);
      var $61=HEAP32[(($neighbors)>>2)];
      var $call48=_qh_setsize($61);
      $sizneighbors=$call48;
      var $62=$facet;
      var $ridges=(($62+52)|0);
      var $63=HEAP32[(($ridges)>>2)];
      var $call49=_qh_setsize($63);
      $sizridges=$call49;
      var $64=HEAP32[(((((5244204)|0)))>>2)];
      var $inc=((($64)+(1))|0);
      HEAP32[(((((5244204)|0)))>>2)]=$inc;
      var $65=$sizvertices;
      var $66=HEAP32[(((((5244244)|0)))>>2)];
      var $add50=((($66)+($65))|0);
      HEAP32[(((((5244244)|0)))>>2)]=$add50;
      var $67=HEAP32[(((((5243908)|0)))>>2)];
      var $68=$sizvertices;
      var $cmp51=(($67)|0) < (($68)|0);
      if ($cmp51) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $69=$sizvertices;
      HEAP32[(((((5243908)|0)))>>2)]=$69;
      label = 37; break;
    case 37: 
      var $70=$sizneighbors;
      var $71=HEAP32[(((((5244228)|0)))>>2)];
      var $add54=((($71)+($70))|0);
      HEAP32[(((((5244228)|0)))>>2)]=$add54;
      var $72=HEAP32[(((((5243868)|0)))>>2)];
      var $73=$sizneighbors;
      var $cmp55=(($72)|0) < (($73)|0);
      if ($cmp55) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $74=$sizneighbors;
      HEAP32[(((((5243868)|0)))>>2)]=$74;
      label = 39; break;
    case 39: 
      var $75=$facet;
      var $76=$75;
      var $bf_field_offs58=(($76+76)|0);
      var $77=$bf_field_offs58;
      var $78=HEAP32[(($77)>>2)];
      var $bf_clear59=$78 & 511;
      var $79=HEAP32[(((((5244220)|0)))>>2)];
      var $add60=((($79)+($bf_clear59))|0);
      HEAP32[(((((5244220)|0)))>>2)]=$add60;
      var $80=$facet;
      var $81=$80;
      var $bf_field_offs61=(($81+76)|0);
      var $82=$bf_field_offs61;
      var $83=HEAP32[(($82)>>2)];
      var $bf_clear62=$83 & 511;
      $i=$bf_clear62;
      var $84=HEAP32[(((((5244212)|0)))>>2)];
      var $85=$i;
      var $cmp63=(($84)|0) < (($85)|0);
      if ($cmp63) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $86=$i;
      HEAP32[(((((5244212)|0)))>>2)]=$86;
      label = 41; break;
    case 41: 
      var $87=$facet;
      var $88=$87;
      var $bf_field_offs66=(($88+76)|0);
      var $89=$bf_field_offs66;
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 >>> 13;
      var $bf_clear67=$91 & 1;
      var $tobool68=(($bf_clear67)|0)!=0;
      if ($tobool68) { label = 46; break; } else { label = 42; break; }
    case 42: 
      var $92=$sizvertices;
      var $93=HEAP32[((((5247508)|0))>>2)];
      var $cmp70=(($92)|0)==(($93)|0);
      if ($cmp70) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $94=HEAP32[(((((5244172)|0)))>>2)];
      var $inc72=((($94)+(1))|0);
      HEAP32[(((((5244172)|0)))>>2)]=$inc72;
      label = 45; break;
    case 44: 
      var $95=HEAP32[(((((5244164)|0)))>>2)];
      var $inc73=((($95)+(1))|0);
      HEAP32[(((((5244164)|0)))>>2)]=$inc73;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $96=$sizridges;
      var $tobool76=(($96)|0)!=0;
      if ($tobool76) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $97=$sizridges;
      var $98=HEAP32[(((((5244236)|0)))>>2)];
      var $add78=((($98)+($97))|0);
      HEAP32[(((((5244236)|0)))>>2)]=$add78;
      var $99=HEAP32[(((((5243892)|0)))>>2)];
      var $100=$sizridges;
      var $cmp79=(($99)|0) < (($100)|0);
      if ($cmp79) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $101=$sizridges;
      HEAP32[(((((5243892)|0)))>>2)]=$101;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $102=HEAP32[((((5248932)|0))>>2)];
      var $add83=((($102)+(80))|0);
      var $add84=((($add83)+(16))|0);
      var $103=$sizneighbors;
      var $104=$sizvertices;
      var $add85=((($103)+($104))|0);
      var $mul86=((($add85<<2))&-1);
      var $add87=((($add84)+($mul86))|0);
      var $105=HEAP32[(((((5243924)|0)))>>2)];
      var $add88=((($105)+($add87))|0);
      HEAP32[(((((5243924)|0)))>>2)]=$add88;
      var $106=$facet;
      var $ridges89=(($106+52)|0);
      var $107=HEAP32[(($ridges89)>>2)];
      var $tobool90=(($107)|0)!=0;
      if ($tobool90) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $108=$sizridges;
      var $mul92=((($108<<2))&-1);
      var $add93=((($mul92)+(8))|0);
      var $109=$sizridges;
      var $110=HEAP32[((((5247508)|0))>>2)];
      var $sub94=((($110)-(1))|0);
      var $mul95=((($sub94<<2))&-1);
      var $add96=((($mul95)+(24))|0);
      var $mul97=((($109)*($add96))&-1);
      var $div=Math.floor(((($mul97)>>>0))/(2));
      var $add98=((($add93)+($div))|0);
      var $111=HEAP32[(((((5243940)|0)))>>2)];
      var $add99=((($111)+($add98))|0);
      HEAP32[(((((5243940)|0)))>>2)]=$add99;
      label = 52; break;
    case 52: 
      var $112=$facet;
      var $outsideset=(($112+60)|0);
      var $113=HEAP32[(($outsideset)>>2)];
      var $tobool101=(($113)|0)!=0;
      if ($tobool101) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $114=$facet;
      var $outsideset103=(($114+60)|0);
      var $115=HEAP32[(($outsideset103)>>2)];
      var $call104=_qh_setsize($115);
      var $mul105=((($call104<<2))&-1);
      var $add106=((($mul105)+(8))|0);
      var $116=HEAP32[(((((5243932)|0)))>>2)];
      var $add107=((($116)+($add106))|0);
      HEAP32[(((((5243932)|0)))>>2)]=$add107;
      label = 54; break;
    case 54: 
      var $117=$facet;
      var $coplanarset=(($117+64)|0);
      var $118=HEAP32[(($coplanarset)>>2)];
      var $tobool109=(($118)|0)!=0;
      if ($tobool109) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $119=$facet;
      var $coplanarset111=(($119+64)|0);
      var $120=HEAP32[(($coplanarset111)>>2)];
      var $call112=_qh_setsize($120);
      var $mul113=((($call112<<2))&-1);
      var $add114=((($mul113)+(8))|0);
      var $121=HEAP32[(((((5243932)|0)))>>2)];
      var $add115=((($121)+($add114))|0);
      HEAP32[(((((5243932)|0)))>>2)]=$add115;
      label = 56; break;
    case 56: 
      var $122=$facet;
      var $123=$122;
      var $bf_field_offs117=(($123+76)|0);
      var $124=$bf_field_offs117;
      var $125=HEAP32[(($124)>>2)];
      var $126=$125 >>> 14;
      var $bf_clear118=$126 & 1;
      var $tobool119=(($bf_clear118)|0)!=0;
      if ($tobool119) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 85; break;
    case 58: 
      var $127=$facet;
      var $128=$127;
      var $bf_field_offs122=(($128+76)|0);
      var $129=$bf_field_offs122;
      var $130=HEAP32[(($129)>>2)];
      var $131=$130 & -16385;
      var $132=$131 | 16384;
      HEAP32[(($129)>>2)]=$132;
      $neighbor=0;
      var $133=$facet;
      var $neighbors123=(($133+56)|0);
      var $134=HEAP32[(($neighbors123)>>2)];
      var $tobool124=(($134)|0)!=0;
      if ($tobool124) { label = 59; break; } else { label = 73; break; }
    case 59: 
      var $135=$facet;
      var $neighbors126=(($135+56)|0);
      var $136=HEAP32[(($neighbors126)>>2)];
      var $e=(($136+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $137=$p;
      $neighborp=$137;
      label = 60; break;
    case 60: 
      var $138=$neighborp;
      var $incdec_ptr=(($138+4)|0);
      $neighborp=$incdec_ptr;
      var $139=HEAP32[(($138)>>2)];
      $neighbor=$139;
      var $tobool128=(($139)|0)!=0;
      if ($tobool128) { label = 61; break; } else { label = 72; break; }
    case 61: 
      var $140=$neighbor;
      var $cmp130=(($140)|0)==1;
      if ($cmp130) { label = 66; break; } else { label = 62; break; }
    case 62: 
      var $141=$neighbor;
      var $cmp132=(($141)|0)==2;
      if ($cmp132) { label = 66; break; } else { label = 63; break; }
    case 63: 
      var $142=$neighbor;
      var $143=$142;
      var $bf_field_offs134=(($143+76)|0);
      var $144=$bf_field_offs134;
      var $145=HEAP32[(($144)>>2)];
      var $146=$145 >>> 14;
      var $bf_clear135=$146 & 1;
      var $tobool136=(($bf_clear135)|0)!=0;
      if ($tobool136) { label = 66; break; } else { label = 64; break; }
    case 64: 
      var $147=$facet;
      var $normal=(($147+24)|0);
      var $148=HEAP32[(($normal)>>2)];
      var $tobool138=(($148)|0)!=0;
      if ($tobool138) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $149=$neighbor;
      var $normal140=(($149+24)|0);
      var $150=HEAP32[(($normal140)>>2)];
      var $tobool141=(($150)|0)!=0;
      if ($tobool141) { label = 67; break; } else { label = 66; break; }
    case 66: 
      label = 60; break;
    case 67: 
      var $151=$facet;
      var $normal144=(($151+24)|0);
      var $152=HEAP32[(($normal144)>>2)];
      var $153=$neighbor;
      var $normal145=(($153+24)|0);
      var $154=HEAP32[(($normal145)>>2)];
      var $call146=_qh_getangle($152, $154);
      $dotproduct=$call146;
      var $155=HEAP32[(((((5243028)|0)))>>2)];
      var $inc147=((($155)+(1))|0);
      HEAP32[(((((5243028)|0)))>>2)]=$inc147;
      var $156=$dotproduct;
      var $157=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243036)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243036)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add148=($157)+($156);
      (HEAPF64[(tempDoublePtr)>>3]=$add148,HEAP32[((((5243036)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243036)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $158=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243044)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243044)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $159=$dotproduct;
      var $cmp149=$158 < $159;
      if ($cmp149) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $160=$dotproduct;
      (HEAPF64[(tempDoublePtr)>>3]=$160,HEAP32[((((5243044)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243044)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 69; break;
    case 69: 
      var $161=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5243052)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5243052)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $162=$dotproduct;
      var $cmp152=$161 > $162;
      if ($cmp152) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $163=$dotproduct;
      (HEAPF64[(tempDoublePtr)>>3]=$163,HEAP32[((((5243052)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5243052)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 71; break;
    case 71: 
      label = 60; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $164=$facet;
      var $normal157=(($164+24)|0);
      var $165=HEAP32[(($normal157)>>2)];
      var $tobool158=(($165)|0)!=0;
      if ($tobool158) { label = 74; break; } else { label = 84; break; }
    case 74: 
      $vertex=0;
      var $166=$facet;
      var $vertices160=(($166+48)|0);
      var $167=HEAP32[(($vertices160)>>2)];
      var $tobool161=(($167)|0)!=0;
      if ($tobool161) { label = 75; break; } else { label = 83; break; }
    case 75: 
      var $168=$facet;
      var $vertices163=(($168+48)|0);
      var $169=HEAP32[(($vertices163)>>2)];
      var $e164=(($169+4)|0);
      var $arrayidx165=(($e164)|0);
      var $p166=$arrayidx165;
      var $170=$p166;
      $vertexp=$170;
      label = 76; break;
    case 76: 
      var $171=$vertexp;
      var $incdec_ptr168=(($171+4)|0);
      $vertexp=$incdec_ptr168;
      var $172=HEAP32[(($171)>>2)];
      $vertex=$172;
      var $tobool169=(($172)|0)!=0;
      if ($tobool169) { label = 77; break; } else { label = 82; break; }
    case 77: 
      var $173=HEAP32[(((((5243444)|0)))>>2)];
      var $inc171=((($173)+(1))|0);
      HEAP32[(((((5243444)|0)))>>2)]=$inc171;
      var $174=$vertex;
      var $point=(($174+8)|0);
      var $175=HEAP32[(($point)>>2)];
      var $176=$facet;
      _qh_distplane($175, $176, $dist);
      var $177=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244676)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244676)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $178=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp172=$177 < $178;
      if ($cmp172) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $179=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$179,HEAP32[((((5244676)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244676)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 79; break;
    case 79: 
      var $180=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244684)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244684)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $181=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp175=$180 > $181;
      if ($cmp175) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $182=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      (HEAPF64[(tempDoublePtr)>>3]=$182,HEAP32[((((5244684)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244684)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 81; break;
    case 81: 
      label = 76; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $183=$facet;
      var $next182=(($183+44)|0);
      var $184=HEAP32[(($next182)>>2)];
      $facet=$184;
      label = 29; break;
    case 86: 
      var $185=HEAP32[((((5248984)|0))>>2)];
      $vertex=$185;
      label = 87; break;
    case 87: 
      var $186=$vertex;
      var $tobool185=(($186)|0)!=0;
      if ($tobool185) { label = 88; break; } else { var $189 = 0;label = 89; break; }
    case 88: 
      var $187=$vertex;
      var $next187=(($187)|0);
      var $188=HEAP32[(($next187)>>2)];
      var $tobool188=(($188)|0)!=0;
      var $189 = $tobool188;label = 89; break;
    case 89: 
      var $189;
      if ($189) { label = 90; break; } else { label = 98; break; }
    case 90: 
      var $190=$vertex;
      var $191=$190;
      var $bf_field_offs191=(($191+20)|0);
      var $192=$bf_field_offs191;
      var $193=HEAP32[(($192)>>2)];
      var $194=$193 >>> 30;
      var $bf_clear192=$194 & 1;
      var $tobool193=(($bf_clear192)|0)!=0;
      if ($tobool193) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 97; break;
    case 92: 
      var $195=HEAP32[(((((5243948)|0)))>>2)];
      var $add196=((($195)+(24))|0);
      HEAP32[(((((5243948)|0)))>>2)]=$add196;
      var $196=$vertex;
      var $neighbors197=(($196+12)|0);
      var $197=HEAP32[(($neighbors197)>>2)];
      var $tobool198=(($197)|0)!=0;
      if ($tobool198) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $198=$vertex;
      var $neighbors200=(($198+12)|0);
      var $199=HEAP32[(($neighbors200)>>2)];
      var $call201=_qh_setsize($199);
      $sizneighbors=$call201;
      var $200=$sizneighbors;
      var $201=HEAP32[(((((5244260)|0)))>>2)];
      var $add202=((($201)+($200))|0);
      HEAP32[(((((5244260)|0)))>>2)]=$add202;
      var $202=HEAP32[(((((5243916)|0)))>>2)];
      var $203=$sizneighbors;
      var $cmp203=(($202)|0) < (($203)|0);
      if ($cmp203) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $204=$sizneighbors;
      HEAP32[(((((5243916)|0)))>>2)]=$204;
      label = 95; break;
    case 95: 
      var $205=$sizneighbors;
      var $mul206=((($205<<2))&-1);
      var $add207=((($mul206)+(24))|0);
      var $206=HEAP32[(((((5243948)|0)))>>2)];
      var $add208=((($206)+($add207))|0);
      HEAP32[(((((5243948)|0)))>>2)]=$add208;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $207=$vertex;
      var $next211=(($207)|0);
      var $208=HEAP32[(($next211)>>2)];
      $vertex=$208;
      label = 87; break;
    case 98: 
      var $209=HEAP32[((((5249224)|0))>>2)];
      HEAP32[((((5247340)|0))>>2)]=$209;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_collectstatistics["X"]=1;

function _qh_initstatistics() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $realx;
      var $intx;
      HEAP32[((((5246912)|0))>>2)]=0;
      _qh_allstatA();
      _qh_allstatB();
      _qh_allstatC();
      _qh_allstatD();
      _qh_allstatE();
      _qh_allstatE2();
      _qh_allstatF();
      _qh_allstatG();
      _qh_allstatH();
      _qh_allstatI();
      var $0=HEAP32[((((5246912)|0))>>2)];
      var $cmp=(($0)|0) > 235;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5242932)|0))>>2)];
      var $2=HEAP32[((((5246912)|0))>>2)];
      _qh_fprintf($1, 6184, ((5284436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=235,tempInt));
      _qh_exit(5);
      label = 4; break;
    case 4: 
      HEAP32[(((((5246848)|0)))>>2)]=0;
      HEAP32[(((((5246856)|0)))>>2)]=0;
      HEAP32[(((((5246872)|0)))>>2)]=2147483647;
      HEAP32[(((((5246864)|0)))>>2)]=-2147483648;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5246888)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246888)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=1.7976931348623157e+308,HEAP32[((((5246904)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246904)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=-1.7976931348623157e+308,HEAP32[((((5246896)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5246896)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp1=(($3)|0) < 225;
      if ($cmp1) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $4=$i;
      var $arrayidx=((((5246390)|0)+$4)|0);
      var $5=HEAP8[($arrayidx)];
      var $conv=(($5 << 24) >> 24);
      var $cmp2=(($conv)|0) > 5;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $6=$i;
      var $arrayidx5=((((5246390)|0)+$6)|0);
      var $7=HEAP8[($arrayidx5)];
      var $idxprom=(($7)&255);
      var $arrayidx6=((((5246840)|0)+($idxprom<<3))|0);
      var $r=$arrayidx6;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $realx=$8;
      var $9=$realx;
      var $10=$i;
      var $arrayidx7=((((5243004)|0)+($10<<3))|0);
      var $r8=$arrayidx7;
      (HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(($r8)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($r8)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 11; break;
    case 8: 
      var $11=$i;
      var $arrayidx9=((((5246390)|0)+$11)|0);
      var $12=HEAP8[($arrayidx9)];
      var $conv10=(($12 << 24) >> 24);
      var $cmp11=(($conv10)|0)!=0;
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$i;
      var $arrayidx14=((((5246390)|0)+$13)|0);
      var $14=HEAP8[($arrayidx14)];
      var $idxprom15=(($14)&255);
      var $arrayidx16=((((5246840)|0)+($idxprom15<<3))|0);
      var $i17=$arrayidx16;
      var $15=HEAP32[(($i17)>>2)];
      $intx=$15;
      var $16=$intx;
      var $17=$i;
      var $arrayidx18=((((5243004)|0)+($17<<3))|0);
      var $i19=$arrayidx18;
      HEAP32[(($i19)>>2)]=$16;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_initstatistics["X"]=1;

function _qh_newstats($idx, $nextindex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $idx_addr;
      var $nextindex_addr;
      var $isnew;
      var $start;
      var $i;
      $idx_addr=$idx;
      $nextindex_addr=$nextindex;
      $isnew=0;
      var $0=$idx_addr;
      var $arrayidx=((((5244804)|0)+$0)|0);
      var $1=HEAP8[($arrayidx)];
      var $idxprom=(($1)&255);
      var $arrayidx1=((((5246390)|0)+$idxprom)|0);
      var $2=HEAP8[($arrayidx1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$idx_addr;
      var $add=((($3)+(1))|0);
      $start=$add;
      label = 5; break;
    case 4: 
      var $4=$idx_addr;
      $start=$4;
      label = 5; break;
    case 5: 
      var $5=$start;
      $i=$5;
      label = 6; break;
    case 6: 
      var $6=$i;
      var $7=HEAP32[((((5246912)|0))>>2)];
      var $cmp3=(($6)|0) < (($7)|0);
      if ($cmp3) { label = 7; break; } else { var $11 = 0;label = 8; break; }
    case 7: 
      var $8=$i;
      var $arrayidx5=((((5244804)|0)+$8)|0);
      var $9=HEAP8[($arrayidx5)];
      var $idxprom6=(($9)&255);
      var $arrayidx7=((((5246390)|0)+$idxprom6)|0);
      var $10=HEAP8[($arrayidx7)];
      var $conv8=(($10 << 24) >> 24);
      var $cmp9=(($conv8)|0)!=0;
      var $11 = $cmp9;label = 8; break;
    case 8: 
      var $11;
      if ($11) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $12=$i;
      var $arrayidx11=((((5244804)|0)+$12)|0);
      var $13=HEAP8[($arrayidx11)];
      var $conv12=(($13)&255);
      var $call=_qh_nostatistic($conv12);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $14=$i;
      var $arrayidx13=((((5244804)|0)+$14)|0);
      var $15=HEAP8[($arrayidx13)];
      var $idxprom14=(($15)&255);
      var $arrayidx15=((((5246615)|0)+$idxprom14)|0);
      var $16=HEAP8[($arrayidx15)];
      var $tobool16=(($16 << 24) >> 24)!=0;
      if ($tobool16) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $isnew=1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 14: 
      var $18=$i;
      var $19=$nextindex_addr;
      HEAP32[(($19)>>2)]=$18;
      var $20=$isnew;

      return $20;
    default: assert(0, "bad label: " + label);
  }

}
_qh_newstats["X"]=1;

function _qh_nostatistic($i) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $i_addr;
      $i_addr=$i;
      var $0=$i_addr;
      var $arrayidx=((((5246390)|0)+$0)|0);
      var $1=HEAP8[($arrayidx)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0) > 5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$i_addr;
      var $arrayidx2=((((5243004)|0)+($2<<3))|0);
      var $r=$arrayidx2;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=$i_addr;
      var $arrayidx3=((((5246390)|0)+$4)|0);
      var $5=HEAP8[($arrayidx3)];
      var $idxprom=(($5)&255);
      var $arrayidx4=((((5246840)|0)+($idxprom<<3))|0);
      var $r5=$arrayidx4;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp6=$3 == $6;
      if ($cmp6) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $7=$i_addr;
      var $arrayidx8=((((5246390)|0)+$7)|0);
      var $8=HEAP8[($arrayidx8)];
      var $conv9=(($8 << 24) >> 24);
      var $cmp10=(($conv9)|0) < 5;
      if ($cmp10) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $9=$i_addr;
      var $arrayidx13=((((5243004)|0)+($9<<3))|0);
      var $i14=$arrayidx13;
      var $10=HEAP32[(($i14)>>2)];
      var $11=$i_addr;
      var $arrayidx15=((((5246390)|0)+$11)|0);
      var $12=HEAP8[($arrayidx15)];
      var $idxprom16=(($12)&255);
      var $arrayidx17=((((5246840)|0)+($idxprom16<<3))|0);
      var $i18=$arrayidx17;
      var $13=HEAP32[(($i18)>>2)];
      var $cmp19=(($10)|0)==(($13)|0);
      if ($cmp19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=1;
      label = 8; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $14=$retval;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printallstatistics($fp, $string) {
  var label = 0;


  var $fp_addr;
  var $string_addr;
  $fp_addr=$fp;
  $string_addr=$string;
  _qh_allstatistics();
  _qh_collectstatistics();
  var $0=$fp_addr;
  var $1=$string_addr;
  _qh_printstatistics($0, $1);
  var $2=$fp_addr;
  _qh_memstatistics($2);

  return;
}


function _qh_printstatistics($fp, $string) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $string_addr;
      var $i=__stackBase__;
      var $k;
      var $ave=(__stackBase__)+(4);
      $fp_addr=$fp;
      $string_addr=$string;
      var $0=HEAP32[((((5247516)|0))>>2)];
      var $1=HEAP32[((((5249000)|0))>>2)];
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5244348)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244348)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[((((5244356)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244356)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 5; break;
    case 4: 
      var $2=HEAP32[(((((5244340)|0)))>>2)];
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244348)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244348)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244356)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244356)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_qh_stddev($2, $3, $4, $ave);
      (HEAPF64[(tempDoublePtr)>>3]=$call,HEAP32[((((5244356)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244356)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 5; break;
    case 5: 
      var $5=HEAP32[(((((5244380)|0)))>>2)];
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244100)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244100)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5244108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5244108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call1=_qh_stddev($5, $6, $7, $ave);
      (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[((((5244108)|0))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((((5244108)|0))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=$fp_addr;
      var $9=$string_addr;
      var $10=HEAP32[((5242996)>>2)];
      _qh_fprintf($8, 9350, ((5284108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=((5247796)|0),HEAP32[(((tempInt)+(8))>>2)]=((5247536)|0),HEAP32[(((tempInt)+(12))>>2)]=$10,HEAP32[(((tempInt)+(16))>>2)]=((5248052)|0),tempInt));
      var $11=$fp_addr;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248604)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248604)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246948)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246948)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247108)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247108)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247068)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247068)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248740)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248740)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($11, 9351, ((5283652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 56)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$14,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$15,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(((tempInt)+(32))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(32))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$17,HEAP32[(((tempInt)+(40))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(40))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$18,HEAP32[(((tempInt)+(48))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(48))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $19=HEAP32[((((5247504)|0))>>2)];
      var $tobool=(($19)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$fp_addr;
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248716)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248716)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($20, 9352, ((5283532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$21,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 7; break;
    case 7: 
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp4=$22 < 8.988465674311579e+307;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $23=$fp_addr;
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246984)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246984)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($23, 9353, ((5283244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$24,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 9; break;
    case 9: 
      var $25=HEAP32[((((5247144)|0))>>2)];
      var $tobool7=(($25)|0)!=0;
      if ($tobool7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$fp_addr;
      var $27=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247088)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247088)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($26, 9354, ((5283044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 11; break;
    case 11: 
      var $28=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp10=$28 < 8.988465674311579e+307;
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $29=$fp_addr;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5246992)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5246992)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($29, 9355, ((5282916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 13; break;
    case 13: 
      var $31=HEAP32[((((5247140)|0))>>2)];
      var $tobool13=(($31)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $32=$fp_addr;
      var $33=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5247096)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5247096)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($32, 9356, ((5282752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$33,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 15; break;
    case 15: 
      var $34=$fp_addr;
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248724)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248724)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248676)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248676)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($34, 9357, ((5282568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=2.220446049250313e-16,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$36,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $k=0;
      label = 16; break;
    case 16: 
      var $37=$k;
      var $38=HEAP32[((((5247508)|0))>>2)];
      var $cmp16=(($37)|0) < (($38)|0);
      if ($cmp16) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $39=$fp_addr;
      var $40=$k;
      var $41=HEAP32[((((5248712)|0))>>2)];
      var $arrayidx=(($41+($40<<3))|0);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($39, 9358, ((5282440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$42,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 18; break;
    case 18: 
      var $43=$k;
      var $inc=((($43)+(1))|0);
      $k=$inc;
      label = 16; break;
    case 19: 
      var $44=$fp_addr;
      _qh_fprintf($44, 9359, ((5282284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      HEAP32[(($i)>>2)]=0;
      label = 20; break;
    case 20: 
      var $45=HEAP32[(($i)>>2)];
      var $46=HEAP32[((((5246912)|0))>>2)];
      var $cmp18=(($45)|0) < (($46)|0);
      if ($cmp18) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $47=$fp_addr;
      var $48=HEAP32[(($i)>>2)];
      _qh_printstats($47, $48, $i);
      label = 20; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printstatistics["X"]=1;

function _qh_stddev($num, $tot, $tot2, $ave) {
  var label = 0;


  var $num_addr;
  var $tot_addr;
  var $tot2_addr;
  var $ave_addr;
  var $stddev;
  $num_addr=$num;
  $tot_addr=$tot;
  $tot2_addr=$tot2;
  $ave_addr=$ave;
  var $0=$tot_addr;
  var $1=$num_addr;
  var $conv=(($1)|0);
  var $div=($0)/($conv);
  var $2=$ave_addr;
  (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $3=$tot2_addr;
  var $4=$num_addr;
  var $conv1=(($4)|0);
  var $div2=($3)/($conv1);
  var $5=$ave_addr;
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $7=$ave_addr;
  var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $mul=($6)*($8);
  var $sub=($div2)-($mul);
  var $call=Math.sqrt($sub);
  $stddev=$call;
  var $9=$stddev;

  return $9;
}


function _qh_printstats($fp, $idx, $nextindex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $idx_addr;
      var $nextindex_addr;
      var $j;
      var $nexti=__stackBase__;
      $fp_addr=$fp;
      $idx_addr=$idx;
      $nextindex_addr=$nextindex;
      var $0=$idx_addr;
      var $call=_qh_newstats($0, $nexti);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$fp_addr;
      _qh_fprintf($1, 9367, ((5280752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=$idx_addr;
      $j=$2;
      label = 4; break;
    case 4: 
      var $3=$j;
      var $4=HEAP32[(($nexti)>>2)];
      var $cmp=(($3)|0) < (($4)|0);
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$fp_addr;
      var $6=$j;
      var $arrayidx=((((5244804)|0)+$6)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&255);
      _qh_printstatlevel($5, $conv, 0);
      label = 6; break;
    case 6: 
      var $8=$j;
      var $inc=((($8)+(1))|0);
      $j=$inc;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $9=$nextindex_addr;
      var $tobool1=(($9)|0)!=0;
      if ($tobool1) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=HEAP32[(($nexti)>>2)];
      var $11=$nextindex_addr;
      HEAP32[(($11)>>2)]=$10;
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printstatlevel($fp, $id, $start) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $id_addr;
      var $start_addr;
      $fp_addr=$fp;
      $id_addr=$id;
      $start_addr=$start;
      var $0=$id_addr;
      var $cmp=(($0)|0) >= 225;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$id_addr;
      var $arrayidx=((((5246615)|0)+$1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2 << 24) >> 24);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 30; break;
    case 5: 
      var $3=$id_addr;
      var $arrayidx1=((((5246390)|0)+$3)|0);
      var $4=HEAP8[($arrayidx1)];
      var $conv2=(($4 << 24) >> 24);
      var $cmp3=(($conv2)|0)==0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$fp_addr;
      var $6=$id_addr;
      var $arrayidx6=((((5245040)|0)+($6<<2))|0);
      var $7=HEAP32[(($arrayidx6)>>2)];
      _qh_fprintf($5, 9360, ((5281348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
      label = 30; break;
    case 7: 
      $start_addr=0;
      var $8=$id_addr;
      var $call=_qh_nostatistic($8);
      var $tobool8=(($call)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $9=$id_addr;
      var $arrayidx10=((((5245040)|0)+($9<<2))|0);
      var $10=HEAP32[(($arrayidx10)>>2)];
      var $tobool11=(($10)|0)!=0;
      if ($tobool11) { label = 10; break; } else { label = 9; break; }
    case 9: 
      label = 30; break;
    case 10: 
      var $11=$id_addr;
      var $arrayidx14=((((5246615)|0)+$11)|0);
      HEAP8[($arrayidx14)]=1;
      var $12=$id_addr;
      var $arrayidx15=((((5245940)|0)+($12<<1))|0);
      var $13=HEAP16[(($arrayidx15)>>1)];
      var $conv16=(($13 << 16) >> 16);
      var $cmp17=(($conv16)|0)!=-1;
      if ($cmp17) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $14=$id_addr;
      var $arrayidx19=((((5245940)|0)+($14<<1))|0);
      var $15=HEAP16[(($arrayidx19)>>1)];
      var $conv20=(($15) & 255);
      var $idxprom=(($conv20)&255);
      var $arrayidx21=((((5243004)|0)+($idxprom<<3))|0);
      var $i=$arrayidx21;
      var $16=HEAP32[(($i)>>2)];
      var $cmp22=(($16)|0)==0;
      if ($cmp22) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $17=$fp_addr;
      _qh_fprintf($17, 9361, ((5281256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 29; break;
    case 13: 
      var $18=$id_addr;
      var $arrayidx25=((((5246390)|0)+$18)|0);
      var $19=HEAP8[($arrayidx25)];
      var $conv26=(($19 << 24) >> 24);
      var $cmp27=(($conv26)|0) >= 5;
      if ($cmp27) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $20=$id_addr;
      var $arrayidx30=((((5245940)|0)+($20<<1))|0);
      var $21=HEAP16[(($arrayidx30)>>1)];
      var $conv31=(($21 << 16) >> 16);
      var $cmp32=(($conv31)|0)==-1;
      if ($cmp32) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $22=$fp_addr;
      var $23=$id_addr;
      var $arrayidx35=((((5243004)|0)+($23<<3))|0);
      var $r=$arrayidx35;
      var $24=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($22, 9362, ((5281180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$24,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 28; break;
    case 16: 
      var $25=$id_addr;
      var $arrayidx37=((((5246390)|0)+$25)|0);
      var $26=HEAP8[($arrayidx37)];
      var $conv38=(($26 << 24) >> 24);
      var $cmp39=(($conv38)|0) >= 5;
      if ($cmp39) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $27=$id_addr;
      var $arrayidx42=((((5245940)|0)+($27<<1))|0);
      var $28=HEAP16[(($arrayidx42)>>1)];
      var $conv43=(($28 << 16) >> 16);
      var $cmp44=(($conv43)|0)!=-1;
      if ($cmp44) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $29=$fp_addr;
      var $30=$id_addr;
      var $arrayidx47=((((5243004)|0)+($30<<3))|0);
      var $r48=$arrayidx47;
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $32=$id_addr;
      var $arrayidx49=((((5245940)|0)+($32<<1))|0);
      var $33=HEAP16[(($arrayidx49)>>1)];
      var $conv50=(($33) & 255);
      var $idxprom51=(($conv50)&255);
      var $arrayidx52=((((5243004)|0)+($idxprom51<<3))|0);
      var $i53=$arrayidx52;
      var $34=HEAP32[(($i53)>>2)];
      var $conv54=(($34)|0);
      var $div=($31)/($conv54);
      _qh_fprintf($29, 9363, ((5281180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 27; break;
    case 19: 
      var $35=$id_addr;
      var $arrayidx56=((((5246390)|0)+$35)|0);
      var $36=HEAP8[($arrayidx56)];
      var $conv57=(($36 << 24) >> 24);
      var $cmp58=(($conv57)|0) < 5;
      if ($cmp58) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $37=$id_addr;
      var $arrayidx61=((((5245940)|0)+($37<<1))|0);
      var $38=HEAP16[(($arrayidx61)>>1)];
      var $conv62=(($38 << 16) >> 16);
      var $cmp63=(($conv62)|0)==-1;
      if ($cmp63) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $39=$fp_addr;
      var $40=$id_addr;
      var $arrayidx66=((((5243004)|0)+($40<<3))|0);
      var $i67=$arrayidx66;
      var $41=HEAP32[(($i67)>>2)];
      _qh_fprintf($39, 9364, ((5281052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,tempInt));
      label = 26; break;
    case 22: 
      var $42=$id_addr;
      var $arrayidx69=((((5246390)|0)+$42)|0);
      var $43=HEAP8[($arrayidx69)];
      var $conv70=(($43 << 24) >> 24);
      var $cmp71=(($conv70)|0) < 5;
      if ($cmp71) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $44=$id_addr;
      var $arrayidx74=((((5245940)|0)+($44<<1))|0);
      var $45=HEAP16[(($arrayidx74)>>1)];
      var $conv75=(($45 << 16) >> 16);
      var $cmp76=(($conv75)|0)!=-1;
      if ($cmp76) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $46=$fp_addr;
      var $47=$id_addr;
      var $arrayidx79=((((5243004)|0)+($47<<3))|0);
      var $i80=$arrayidx79;
      var $48=HEAP32[(($i80)>>2)];
      var $conv81=(($48)|0);
      var $49=$id_addr;
      var $arrayidx82=((((5245940)|0)+($49<<1))|0);
      var $50=HEAP16[(($arrayidx82)>>1)];
      var $conv83=(($50) & 255);
      var $idxprom84=(($conv83)&255);
      var $arrayidx85=((((5243004)|0)+($idxprom84<<3))|0);
      var $i86=$arrayidx85;
      var $51=HEAP32[(($i86)>>2)];
      var $conv87=(($51)|0);
      var $div88=($conv81)/($conv87);
      _qh_fprintf($46, 9365, ((5280956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$div88,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $52=$fp_addr;
      var $53=$id_addr;
      var $arrayidx94=((((5245040)|0)+($53<<2))|0);
      var $54=HEAP32[(($arrayidx94)>>2)];
      _qh_fprintf($52, 9366, ((5280876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,tempInt));
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printstatlevel["X"]=1;

function _qh_errexit($exitcode, $facet, $ridge) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $exitcode_addr;
      var $facet_addr;
      var $ridge_addr;
      $exitcode_addr=$exitcode;
      $facet_addr=$facet;
      $ridge_addr=$ridge;
      var $0=HEAP32[((((5249216)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($1, 8126, ((5274272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_exit(5);
      label = 4; break;
    case 4: 
      HEAP32[((((5249216)|0))>>2)]=1;
      var $2=HEAP32[((((5249136)|0))>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $call=_clock();
      var $3=HEAP32[((((5249024)|0))>>2)];
      var $sub=((($call)-($3))|0);
      HEAP32[((((5249024)|0))>>2)]=$sub;
      label = 6; break;
    case 6: 
      var $4=$facet_addr;
      var $5=$ridge_addr;
      _qh_errprint(((5268332)|0), $4, 0, $5, 0);
      var $6=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($6, 8127, ((5264808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5247796)|0),HEAP32[(((tempInt)+(4))>>2)]=((5247536)|0),tempInt));
      var $7=HEAP32[((((5248924)|0))>>2)];
      var $8=HEAP32[((5242996)>>2)];
      _qh_fprintf($7, 8128, ((5260376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=((5248052)|0),tempInt));
      var $9=HEAP32[((((5249040)|0))>>2)];
      var $cmp=(($9)|0) >= 0;
      if ($cmp) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=HEAP32[((((5249040)|0))>>2)];
      _qh_fprintf($10, 8129, ((5257424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $12=HEAP32[(((((5244580)|0)))>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=HEAP32[((((5248924)|0))>>2)];
      var $14=HEAP32[(((((5244580)|0)))>>2)];
      _qh_fprintf($13, 8130, ((5254516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
      label = 9; break;
    case 9: 
      var $15=HEAP32[((((5249136)|0))>>2)];
      var $tobool8=(($15)|0)!=0;
      if ($tobool8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($16, 8131, ((5251764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 11: 
      var $17=HEAP32[((((5249124)|0))>>2)];
      var $tobool10=(($17)|0)!=0;
      if ($tobool10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $18=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($18, 8132, ((5303908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $19=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($19, 8133, ((5301400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $20=HEAP32[((((5247012)|0))>>2)];
      var $tobool15=(($20)|0)!=0;
      if ($tobool15) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $21=HEAP32[((((5249136)|0))>>2)];
      var $tobool16=(($21)|0)!=0;
      if ($tobool16) { label = 19; break; } else { label = 17; break; }
    case 17: 
      var $22=$facet_addr;
      var $tobool17=(($22)|0)!=0;
      if ($tobool17) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $23=$ridge_addr;
      var $tobool19=(($23)|0)!=0;
      if ($tobool19) { label = 20; break; } else { label = 19; break; }
    case 19: 
      _qh_produce_output();
      label = 30; break;
    case 20: 
      var $24=$exitcode_addr;
      var $cmp22=(($24)|0)!=1;
      if ($cmp22) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $25=$exitcode_addr;
      var $cmp24=(($25)|0)!=2;
      if ($cmp24) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $26=HEAP32[(((((5244548)|0)))>>2)];
      var $27=HEAP32[((((5247508)|0))>>2)];
      var $add=((($27)+(1))|0);
      var $cmp26=(($26)|0) > (($add)|0);
      if ($cmp26) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $28=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($28, 8134, ((5298644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $29=HEAP32[((((5248924)|0))>>2)];
      _qh_printsummary($29);
      var $30=HEAP32[((((5247316)|0))>>2)];
      var $tobool28=(($30)|0)!=0;
      if ($tobool28) { label = 24; break; } else { label = 25; break; }
    case 24: 
      _qh_collectstatistics();
      var $31=HEAP32[((((5248924)|0))>>2)];
      _qh_printstatistics($31, ((5296672)|0));
      var $32=HEAP32[((((5248924)|0))>>2)];
      _qh_memstatistics($32);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $33=HEAP32[((((5247188)|0))>>2)];
      var $tobool32=(($33)|0)!=0;
      if ($tobool32) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=HEAP32[((((5246916)|0))>>2)];
      _qh_printstats($34, $35, 0);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $36=$exitcode_addr;
      var $tobool37=(($36)|0)!=0;
      if ($tobool37) { label = 32; break; } else { label = 31; break; }
    case 31: 
      $exitcode_addr=5;
      label = 39; break;
    case 32: 
      var $37=$exitcode_addr;
      var $cmp40=(($37)|0)==2;
      if ($cmp40) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $38=HEAP32[((((5248924)|0))>>2)];
      _qh_printhelp_singular($38);
      label = 38; break;
    case 34: 
      var $39=$exitcode_addr;
      var $cmp43=(($39)|0)==3;
      if ($cmp43) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $40=HEAP32[((((5247144)|0))>>2)];
      var $tobool45=(($40)|0)!=0;
      if ($tobool45) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $41=HEAP32[((((5248924)|0))>>2)];
      _qh_printhelp_degenerate($41);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $42=HEAP32[((((5249104)|0))>>2)];
      var $tobool50=(($42)|0)!=0;
      if ($tobool50) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $43=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($43, 6187, ((5295020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _qh_exit(5);
      label = 41; break;
    case 41: 
      HEAP32[((((5249216)|0))>>2)]=0;
      HEAP32[((((5249104)|0))>>2)]=1;
      var $44=$exitcode_addr;
      _longjmp(((5248754)|0), $44);
      throw "Reached an unreachable!"
    case 42: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_errexit["X"]=1;

function _qh_user_memsizes() {
  var label = 0;



  return;
}


function _qh_errprint($string, $atfacet, $otherfacet, $atridge, $atvertex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $string_addr;
      var $atfacet_addr;
      var $otherfacet_addr;
      var $atridge_addr;
      var $atvertex_addr;
      var $i;
      $string_addr=$string;
      $atfacet_addr=$atfacet;
      $otherfacet_addr=$otherfacet;
      $atridge_addr=$atridge;
      $atvertex_addr=$atvertex;
      var $0=$atfacet_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((((5248924)|0))>>2)];
      var $2=$string_addr;
      _qh_fprintf($1, 8135, ((5293124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=HEAP32[((((5248924)|0))>>2)];
      var $4=$atfacet_addr;
      _qh_printfacet($3, $4);
      label = 4; break;
    case 4: 
      var $5=$otherfacet_addr;
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=HEAP32[((((5248924)|0))>>2)];
      var $7=$string_addr;
      _qh_fprintf($6, 8136, ((5291796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
      var $8=HEAP32[((((5248924)|0))>>2)];
      var $9=$otherfacet_addr;
      _qh_printfacet($8, $9);
      label = 6; break;
    case 6: 
      var $10=$atridge_addr;
      var $tobool4=(($10)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 23; break; }
    case 7: 
      var $11=HEAP32[((((5248924)|0))>>2)];
      var $12=$string_addr;
      _qh_fprintf($11, 8137, ((5290000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$12,tempInt));
      var $13=HEAP32[((((5248924)|0))>>2)];
      var $14=$atridge_addr;
      _qh_printridge($13, $14);
      var $15=$atridge_addr;
      var $top=(($15+4)|0);
      var $16=HEAP32[(($top)>>2)];
      var $tobool6=(($16)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $17=$atridge_addr;
      var $top7=(($17+4)|0);
      var $18=HEAP32[(($top7)>>2)];
      var $19=$atfacet_addr;
      var $cmp=(($18)|0)!=(($19)|0);
      if ($cmp) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $20=$atridge_addr;
      var $top9=(($20+4)|0);
      var $21=HEAP32[(($top9)>>2)];
      var $22=$otherfacet_addr;
      var $cmp10=(($21)|0)!=(($22)|0);
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      var $24=$atridge_addr;
      var $top12=(($24+4)|0);
      var $25=HEAP32[(($top12)>>2)];
      _qh_printfacet($23, $25);
      label = 11; break;
    case 11: 
      var $26=$atridge_addr;
      var $bottom=(($26+8)|0);
      var $27=HEAP32[(($bottom)>>2)];
      var $tobool14=(($27)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $28=$atridge_addr;
      var $bottom16=(($28+8)|0);
      var $29=HEAP32[(($bottom16)>>2)];
      var $30=$atfacet_addr;
      var $cmp17=(($29)|0)!=(($30)|0);
      if ($cmp17) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $31=$atridge_addr;
      var $bottom19=(($31+8)|0);
      var $32=HEAP32[(($bottom19)>>2)];
      var $33=$otherfacet_addr;
      var $cmp20=(($32)|0)!=(($33)|0);
      if ($cmp20) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $34=HEAP32[((((5248924)|0))>>2)];
      var $35=$atridge_addr;
      var $bottom22=(($35+8)|0);
      var $36=HEAP32[(($bottom22)>>2)];
      _qh_printfacet($34, $36);
      label = 15; break;
    case 15: 
      var $37=$atfacet_addr;
      var $tobool24=(($37)|0)!=0;
      if ($tobool24) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $38=$atridge_addr;
      var $top26=(($38+4)|0);
      var $39=HEAP32[(($top26)>>2)];
      $atfacet_addr=$39;
      label = 17; break;
    case 17: 
      var $40=$otherfacet_addr;
      var $tobool28=(($40)|0)!=0;
      if ($tobool28) { label = 22; break; } else { label = 18; break; }
    case 18: 
      var $41=$atridge_addr;
      var $top30=(($41+4)|0);
      var $42=HEAP32[(($top30)>>2)];
      var $43=$atfacet_addr;
      var $cmp31=(($42)|0)==(($43)|0);
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $44=$atridge_addr;
      var $bottom32=(($44+8)|0);
      var $45=HEAP32[(($bottom32)>>2)];
      var $cond = $45;label = 21; break;
    case 20: 
      var $46=$atridge_addr;
      var $top33=(($46+4)|0);
      var $47=HEAP32[(($top33)>>2)];
      var $cond = $47;label = 21; break;
    case 21: 
      var $cond;
      $otherfacet_addr=$cond;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $48=$atvertex_addr;
      var $tobool36=(($48)|0)!=0;
      if ($tobool36) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $49=HEAP32[((((5248924)|0))>>2)];
      var $50=$string_addr;
      _qh_fprintf($49, 8138, ((5288388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$50,tempInt));
      var $51=HEAP32[((((5248924)|0))>>2)];
      var $52=$atvertex_addr;
      _qh_printvertex($51, $52);
      label = 25; break;
    case 25: 
      var $53=HEAP32[((((5248920)|0))>>2)];
      var $tobool39=(($53)|0)!=0;
      if ($tobool39) { label = 26; break; } else { label = 35; break; }
    case 26: 
      var $54=HEAP32[((((5247012)|0))>>2)];
      var $tobool41=(($54)|0)!=0;
      if ($tobool41) { label = 27; break; } else { label = 35; break; }
    case 27: 
      var $55=$atfacet_addr;
      var $tobool43=(($55)|0)!=0;
      if ($tobool43) { label = 28; break; } else { label = 35; break; }
    case 28: 
      var $56=HEAP32[((((5249136)|0))>>2)];
      var $tobool45=(($56)|0)!=0;
      if ($tobool45) { label = 35; break; } else { label = 29; break; }
    case 29: 
      var $57=HEAP32[((((5247040)|0))>>2)];
      var $tobool47=(($57)|0)!=0;
      if ($tobool47) { label = 35; break; } else { label = 30; break; }
    case 30: 
      var $58=HEAP32[((((5248924)|0))>>2)];
      _qh_fprintf($58, 8139, ((5286100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 31; break;
    case 31: 
      var $59=$i;
      var $cmp49=(($59)|0) < 29;
      if ($cmp49) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $60=HEAP32[((((5248920)|0))>>2)];
      var $61=$i;
      var $arrayidx=((((5247192)|0)+($61<<2))|0);
      var $62=HEAP32[(($arrayidx)>>2)];
      var $63=$atfacet_addr;
      var $64=$otherfacet_addr;
      _qh_printneighborhood($60, $62, $63, $64, 0);
      label = 33; break;
    case 33: 
      var $65=$i;
      var $inc=((($65)+(1))|0);
      $i=$inc;
      label = 31; break;
    case 34: 
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_errprint["X"]=1;

function _qh_printhelp_singular($fp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      var $facet;
      var $vertex;
      var $vertexp;
      var $min;
      var $max;
      var $coord;
      var $dist=__stackBase__;
      var $i;
      var $k;
      $fp_addr=$fp;
      var $0=$fp_addr;
      var $1=HEAP32[((((5247508)|0))>>2)];
      _qh_fprintf($0, 9376, ((5276708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
      var $2=$fp_addr;
      var $3=HEAP32[((((5248944)|0))>>2)];
      _qh_printvertexlist($2, ((5276364)|0), $3, 0, 1);
      var $4=$fp_addr;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($4, 9377, ((5275788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $6=$fp_addr;
      var $7=HEAP32[((((5247508)|0))>>2)];
      var $8=HEAP32[((((5248928)|0))>>2)];
      _qh_printpointid($6, ((5274976)|0), $7, $8, -1);
      var $9=$fp_addr;
      _qh_fprintf($9, 9378, ((5301400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((((5248944)|0))>>2)];
      $facet=$10;
      label = 3; break;
    case 3: 
      var $11=$facet;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $14 = 0;label = 5; break; }
    case 4: 
      var $12=$facet;
      var $next=(($12+44)|0);
      var $13=HEAP32[(($next)>>2)];
      var $tobool1=(($13)|0)!=0;
      var $14 = $tobool1;label = 5; break;
    case 5: 
      var $14;
      if ($14) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $15=$fp_addr;
      _qh_fprintf($15, 9379, ((5274436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $vertex=0;
      var $16=$facet;
      var $vertices=(($16+48)|0);
      var $17=HEAP32[(($vertices)>>2)];
      var $tobool2=(($17)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $18=$facet;
      var $vertices3=(($18+48)|0);
      var $19=HEAP32[(($vertices3)>>2)];
      var $e=(($19+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $20=$p;
      $vertexp=$20;
      label = 8; break;
    case 8: 
      var $21=$vertexp;
      var $incdec_ptr=(($21+4)|0);
      $vertexp=$incdec_ptr;
      var $22=HEAP32[(($21)>>2)];
      $vertex=$22;
      var $tobool5=(($22)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $23=$fp_addr;
      var $24=$vertex;
      var $point=(($24+8)|0);
      var $25=HEAP32[(($point)>>2)];
      var $call=_qh_pointid($25);
      _qh_fprintf($23, 9380, ((5273916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,tempInt));
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $26=HEAP32[(((((5243428)|0)))>>2)];
      var $inc=((($26)+(1))|0);
      HEAP32[(((((5243428)|0)))>>2)]=$inc;
      var $27=HEAP32[((((5248928)|0))>>2)];
      var $28=$facet;
      _qh_distplane($27, $28, $dist);
      var $29=$fp_addr;
      var $30=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($dist)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($dist)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($29, 9381, ((5273300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$30,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 12; break;
    case 12: 
      var $31=$facet;
      var $next7=(($31+44)|0);
      var $32=HEAP32[(($next7)>>2)];
      $facet=$32;
      label = 3; break;
    case 13: 
      var $33=HEAP32[((((5247036)|0))>>2)];
      var $tobool9=(($33)|0)!=0;
      if ($tobool9) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $34=$fp_addr;
      _qh_fprintf($34, 9382, ((5272732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $35=$fp_addr;
      _qh_fprintf($35, 9383, ((5272120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $36=HEAP32[((((5247508)|0))>>2)];
      var $cmp=(($36)|0) >= 8;
      if ($cmp) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $37=$fp_addr;
      _qh_fprintf($37, 9384, ((5271264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 17; break;
    case 17: 
      var $38=$fp_addr;
      _qh_fprintf($38, 9385, ((5270856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $k=0;
      label = 18; break;
    case 18: 
      var $39=$k;
      var $40=HEAP32[((((5247508)|0))>>2)];
      var $cmp15=(($39)|0) < (($40)|0);
      if ($cmp15) { label = 19; break; } else { label = 29; break; }
    case 19: 
      $min=1.7976931348623157e+308;
      $max=-2.2250738585072014e-308;
      var $41=HEAP32[((((5247516)|0))>>2)];
      $i=$41;
      var $42=HEAP32[((((5247520)|0))>>2)];
      var $43=$k;
      var $add_ptr=(($42+($43<<3))|0);
      $coord=$add_ptr;
      label = 20; break;
    case 20: 
      var $44=$i;
      var $dec=((($44)-(1))|0);
      $i=$dec;
      var $tobool18=(($44)|0)!=0;
      if ($tobool18) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $45=$max;
      var $46=$coord;
      var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($46)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($46)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp20=$45 < $47;
      if ($cmp20) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $48=$coord;
      var $49=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($48)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($48)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $max=$49;
      label = 23; break;
    case 23: 
      var $50=$min;
      var $51=$coord;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp23=$50 > $52;
      if ($cmp23) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $53=$coord;
      var $54=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $min=$54;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $55=HEAP32[((((5247508)|0))>>2)];
      var $56=$coord;
      var $add_ptr27=(($56+($55<<3))|0);
      $coord=$add_ptr27;
      label = 20; break;
    case 27: 
      var $57=$fp_addr;
      var $58=$k;
      var $59=$min;
      var $60=$max;
      var $61=$max;
      var $62=$min;
      var $sub=($61)-($62);
      _qh_fprintf($57, 9386, ((5270236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$58,(HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(((tempInt)+(20))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(20))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 28; break;
    case 28: 
      var $63=$k;
      var $inc30=((($63)+(1))|0);
      $k=$inc30;
      label = 18; break;
    case 29: 
      var $64=$fp_addr;
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($64, 9387, ((5269392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$65,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $66=$fp_addr;
      _qh_fprintf($66, 9389, ((5268548)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printhelp_singular["X"]=1;

function _qh_printhelp_degenerate($fp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fp_addr;
      $fp_addr=$fp;
      var $0=HEAP32[((((5247076)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $1=HEAP32[((((5247144)|0))>>2)];
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5249056)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5249056)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$2 < 8.988465674311579e+307;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$fp_addr;
      _qh_fprintf($3, 9368, ((5284236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 6: 
      var $4=$fp_addr;
      _qh_fprintf($4, 9369, ((5281468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((((5247000)|0))>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $6=HEAP32[((((5247392)|0))>>2)];
      var $tobool4=(($6)|0)!=0;
      if ($tobool4) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248636)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248636)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp6=$7 > 10000;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $8=$fp_addr;
      _qh_fprintf($8, 9371, ((5280404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 10; break;
    case 10: 
      var $9=HEAP32[((((5247000)|0))>>2)];
      var $tobool8=(($9)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $10=HEAP32[((((5246960)|0))>>2)];
      var $tobool10=(($10)|0)!=0;
      if ($tobool10) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $11=$fp_addr;
      _qh_fprintf($11, 9372, ((5279772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      var $12=$fp_addr;
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((((5248628)|0))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((((5248628)|0))+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _qh_fprintf($12, 9373, ((5278588)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$13,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $14=$fp_addr;
      _qh_fprintf($14, 9374, ((5277968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _qh_printfacetlist($facetlist, $facets, $printall) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $facetlist_addr;
      var $facets_addr;
      var $printall_addr;
      var $facet;
      var $facetp;
      $facetlist_addr=$facetlist;
      $facets_addr=$facets;
      $printall_addr=$printall;
      var $0=HEAP32[((((5248924)|0))>>2)];
      var $1=$facetlist_addr;
      var $2=$facets_addr;
      var $3=$printall_addr;
      _qh_printbegin($0, 5, $1, $2, $3);
      var $4=$facetlist_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $5=$facetlist_addr;
      $facet=$5;
      label = 4; break;
    case 4: 
      var $6=$facet;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 5; break; } else { var $9 = 0;label = 6; break; }
    case 5: 
      var $7=$facet;
      var $next=(($7+44)|0);
      var $8=HEAP32[(($next)>>2)];
      var $tobool2=(($8)|0)!=0;
      var $9 = $tobool2;label = 6; break;
    case 6: 
      var $9;
      if ($9) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $10=HEAP32[((((5248924)|0))>>2)];
      var $11=$facet;
      var $12=$printall_addr;
      _qh_printafacet($10, 5, $11, $12);
      label = 8; break;
    case 8: 
      var $13=$facet;
      var $next3=(($13+44)|0);
      var $14=HEAP32[(($next3)>>2)];
      $facet=$14;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 
      $facet=0;
      var $15=$facets_addr;
      var $tobool4=(($15)|0)!=0;
      if ($tobool4) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $16=$facets_addr;
      var $e=(($16+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $17=$p;
      $facetp=$17;
      label = 12; break;
    case 12: 
      var $18=$facetp;
      var $incdec_ptr=(($18+4)|0);
      $facetp=$incdec_ptr;
      var $19=HEAP32[(($18)>>2)];
      $facet=$19;
      var $tobool7=(($19)|0)!=0;
      if ($tobool7) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=HEAP32[((((5248924)|0))>>2)];
      var $21=$facet;
      var $22=$printall_addr;
      _qh_printafacet($20, 5, $21, $22);
      label = 12; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $23=HEAP32[((((5248924)|0))>>2)];
      var $24=$facetlist_addr;
      var $25=$facets_addr;
      var $26=$printall_addr;
      _qh_printend($23, 5, $24, $25, $26);

      return;
    default: assert(0, "bad label: " + label);
  }

}
_qh_printfacetlist["X"]=1;

function _qh_printhelp_narrowhull($fp, $minangle) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $fp_addr;
  var $minangle_addr;
  $fp_addr=$fp;
  $minangle_addr=$minangle;
  var $0=$fp_addr;
  var $1=$minangle_addr;
  var $sub=(-$1);
  _qh_fprintf($0, 9375, ((5277128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _qh_free($mem) {
  var label = 0;


  var $mem_addr;
  $mem_addr=$mem;
  var $0=$mem_addr;
  _free($0);

  return;
}


function _qh_malloc($size) {
  var label = 0;


  var $size_addr;
  $size_addr=$size;
  var $0=$size_addr;
  var $call=_malloc($0);

  return $call;
}


function _qh_fprintf($fp, $msgcode, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $fp_addr;
  var $msgcode_addr;
  var $fmt_addr;
  var $args=__stackBase__;
  $fp_addr=$fp;
  $msgcode_addr=$msgcode;
  $fmt_addr=$fmt;
  var $0=HEAP32[((_stdout)>>2)];
  var $1=$fmt_addr;
  var $2=HEAP32[(($args)>>2)];
  var $call=_fprintf($0, $1, $2);
  var $args1=$args;

  STACKTOP = __stackBase__;
  return;
}


function _appendIndex($i) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      $i_addr=$i;
      var $0=$i_addr;
      var $1=HEAP32[((5304988)>>2)];
      var $cmp=(($0)|0) >= (($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((5304988)>>2)];
      var $mul=((($2<<1))&-1);
      HEAP32[((5304988)>>2)]=$mul;
      var $3=HEAP32[((5304996)>>2)];
      var $4=$3;
      var $5=HEAP32[((5304988)>>2)];
      var $mul1=((($5<<2))&-1);
      var $call=_realloc($4, $mul1);
      var $6=$call;
      HEAP32[((5304996)>>2)]=$6;
      label = 4; break;
    case 4: 
      var $7=$i_addr;
      var $8=HEAP32[((5304992)>>2)];
      var $inc=((($8)+(1))|0);
      HEAP32[((5304992)>>2)]=$inc;
      var $9=HEAP32[((5304996)>>2)];
      var $arrayidx=(($9+($8<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$7;

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _run_qhull($points, $count, $dimension, $facet_count) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $points_addr;
      var $count_addr;
      var $dimension_addr;
      var $facet_count_addr;
      var $curlong=__stackBase__;
      var $totlong=(__stackBase__)+(4);
      var $r_facet_count;
      var $facet;
      var $vertex;
      var $vertexp;
      $points_addr=$points;
      $count_addr=$count;
      $dimension_addr=$dimension;
      $facet_count_addr=$facet_count;
      var $0=HEAP32[((_stdin)>>2)];
      var $1=HEAP32[((_stdout)>>2)];
      var $2=HEAP32[((_stderr)>>2)];
      _qh_init_A($0, $1, $2, 0, 0);
      HEAP32[((((5249104)|0))>>2)]=1;
      var $3=$points_addr;
      var $4=$count_addr;
      var $5=$dimension_addr;
      _qh_init_B($3, $4, $5, 0);
      _qh_qhull();
      HEAP32[((5304992)>>2)]=0;
      $r_facet_count=0;
      var $6=HEAP32[((((5248944)|0))>>2)];
      $facet=$6;
      label = 3; break;
    case 3: 
      var $7=$facet;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { var $10 = 0;label = 5; break; }
    case 4: 
      var $8=$facet;
      var $next=(($8+44)|0);
      var $9=HEAP32[(($next)>>2)];
      var $tobool1=(($9)|0)!=0;
      var $10 = $tobool1;label = 5; break;
    case 5: 
      var $10;
      if ($10) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $11=$r_facet_count;
      var $inc=((($11)+(1))|0);
      $r_facet_count=$inc;
      $vertex=0;
      var $12=$facet;
      var $vertices=(($12+48)|0);
      var $13=HEAP32[(($vertices)>>2)];
      var $tobool2=(($13)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $14=$facet;
      var $vertices3=(($14+48)|0);
      var $15=HEAP32[(($vertices3)>>2)];
      var $e=(($15+4)|0);
      var $arrayidx=(($e)|0);
      var $p=$arrayidx;
      var $16=$p;
      $vertexp=$16;
      label = 8; break;
    case 8: 
      var $17=$vertexp;
      var $incdec_ptr=(($17+4)|0);
      $vertexp=$incdec_ptr;
      var $18=HEAP32[(($17)>>2)];
      $vertex=$18;
      var $tobool5=(($18)|0)!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$vertex;
      var $point=(($19+8)|0);
      var $20=HEAP32[(($point)>>2)];
      var $21=$points_addr;
      var $sub_ptr_lhs_cast=$20;
      var $sub_ptr_rhs_cast=$21;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(8))&-1);
      var $22=$dimension_addr;
      var $div=((((($sub_ptr_div)|0))/((($22)|0)))&-1);
      _appendIndex($div);
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      _appendIndex(-1);
      label = 12; break;
    case 12: 
      var $23=$facet;
      var $next7=(($23+44)|0);
      var $24=HEAP32[(($next7)>>2)];
      $facet=$24;
      label = 3; break;
    case 13: 
      _qh_freeqhull(1);
      _qh_memfreeshort($curlong, $totlong);
      var $25=$r_facet_count;
      var $26=$facet_count_addr;
      HEAP32[(($26)>>2)]=$25;
      var $27=HEAP32[((5304996)>>2)];
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }

}
Module["_run_qhull"] = _run_qhull;_run_qhull["X"]=1;

function _qh_exit($exitcode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $exitcode_addr;
      $exitcode_addr=$exitcode;
      var $0=$exitcode_addr;
      _exit($0);
      throw "Reached an unreachable!"
    case 3: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) <= 244;
      if ($cmp) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $1=$bytes_addr;
      var $cmp1=(($1)>>>0) < 11;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 16;label = 6; break;
    case 5: 
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;label = 6; break;
    case 6: 
      var $cond;
      $nb=$cond;
      var $3=$nb;
      var $shr=$3 >>> 3;
      $idx=$shr;
      var $4=HEAP32[((((5304520)|0))>>2)];
      var $5=$idx;
      var $shr3=$4 >>> (($5)>>>0);
      $smallbits=$shr3;
      var $6=$smallbits;
      var $and4=$6 & 3;
      var $cmp5=(($and4)|0)!=0;
      if ($cmp5) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((5304560)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|0)==(($17)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$idx;
      var $shl12=1 << $18;
      var $neg13=$shl12 ^ -1;
      var $19=HEAP32[((((5304520)|0))>>2)];
      var $and14=$19 & $neg13;
      HEAP32[((((5304520)|0))>>2)]=$and14;
      label = 13; break;
    case 9: 
      var $20=$F;
      var $21=$20;
      var $22=HEAP32[((((5304536)|0))>>2)];
      var $cmp15=(($21)>>>0) >= (($22)>>>0);
      var $conv=(($cmp15)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=$F;
      var $24=$b;
      var $fd17=(($24+8)|0);
      HEAP32[(($fd17)>>2)]=$23;
      var $25=$b;
      var $26=$F;
      var $bk=(($26+12)|0);
      HEAP32[(($bk)>>2)]=$25;
      label = 12; break;
    case 11: 
      _abort();
      throw "Reached an unreachable!"
    case 12: 
      label = 13; break;
    case 13: 
      var $27=$idx;
      var $shl20=$27 << 3;
      var $or=$shl20 | 1;
      var $or21=$or | 2;
      var $28=$p;
      var $head=(($28+4)|0);
      HEAP32[(($head)>>2)]=$or21;
      var $29=$p;
      var $30=$29;
      var $31=$idx;
      var $shl22=$31 << 3;
      var $add_ptr=(($30+$shl22)|0);
      var $32=$add_ptr;
      var $head23=(($32+4)|0);
      var $33=HEAP32[(($head23)>>2)];
      var $or24=$33 | 1;
      HEAP32[(($head23)>>2)]=$or24;
      var $34=$p;
      var $35=$34;
      var $add_ptr25=(($35+8)|0);
      $mem=$add_ptr25;
      label = 54; break;
    case 14: 
      var $36=$nb;
      var $37=HEAP32[((((5304528)|0))>>2)];
      var $cmp27=(($36)>>>0) > (($37)>>>0);
      if ($cmp27) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $38=$smallbits;
      var $cmp30=(($38)|0)!=0;
      if ($cmp30) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $39=$smallbits;
      var $40=$idx;
      var $shl35=$39 << $40;
      var $41=$idx;
      var $shl36=1 << $41;
      var $shl37=$shl36 << 1;
      var $42=$idx;
      var $shl38=1 << $42;
      var $shl39=$shl38 << 1;
      var $sub=(((-$shl39))|0);
      var $or40=$shl37 | $sub;
      var $and41=$shl35 & $or40;
      $leftbits=$and41;
      var $43=$leftbits;
      var $44=$leftbits;
      var $sub42=(((-$44))|0);
      var $and43=$43 & $sub42;
      $leastbit=$and43;
      var $45=$leastbit;
      var $sub44=((($45)-(1))|0);
      $Y=$sub44;
      var $46=$Y;
      var $shr45=$46 >>> 12;
      var $and46=$shr45 & 16;
      $K=$and46;
      var $47=$K;
      $N=$47;
      var $48=$K;
      var $49=$Y;
      var $shr47=$49 >>> (($48)>>>0);
      $Y=$shr47;
      var $50=$Y;
      var $shr48=$50 >>> 5;
      var $and49=$shr48 & 8;
      $K=$and49;
      var $51=$N;
      var $add50=((($51)+($and49))|0);
      $N=$add50;
      var $52=$K;
      var $53=$Y;
      var $shr51=$53 >>> (($52)>>>0);
      $Y=$shr51;
      var $54=$Y;
      var $shr52=$54 >>> 2;
      var $and53=$shr52 & 4;
      $K=$and53;
      var $55=$N;
      var $add54=((($55)+($and53))|0);
      $N=$add54;
      var $56=$K;
      var $57=$Y;
      var $shr55=$57 >>> (($56)>>>0);
      $Y=$shr55;
      var $58=$Y;
      var $shr56=$58 >>> 1;
      var $and57=$shr56 & 2;
      $K=$and57;
      var $59=$N;
      var $add58=((($59)+($and57))|0);
      $N=$add58;
      var $60=$K;
      var $61=$Y;
      var $shr59=$61 >>> (($60)>>>0);
      $Y=$shr59;
      var $62=$Y;
      var $shr60=$62 >>> 1;
      var $and61=$shr60 & 1;
      $K=$and61;
      var $63=$N;
      var $add62=((($63)+($and61))|0);
      $N=$add62;
      var $64=$K;
      var $65=$Y;
      var $shr63=$65 >>> (($64)>>>0);
      $Y=$shr63;
      var $66=$N;
      var $67=$Y;
      var $add64=((($66)+($67))|0);
      $i=$add64;
      var $68=$i;
      var $shl65=$68 << 1;
      var $arrayidx66=((((5304560)|0)+($shl65<<2))|0);
      var $69=$arrayidx66;
      var $70=$69;
      $b33=$70;
      var $71=$b33;
      var $fd67=(($71+8)|0);
      var $72=HEAP32[(($fd67)>>2)];
      $p34=$72;
      var $73=$p34;
      var $fd69=(($73+8)|0);
      var $74=HEAP32[(($fd69)>>2)];
      $F68=$74;
      var $75=$b33;
      var $76=$F68;
      var $cmp70=(($75)|0)==(($76)|0);
      if ($cmp70) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $77=$i;
      var $shl73=1 << $77;
      var $neg74=$shl73 ^ -1;
      var $78=HEAP32[((((5304520)|0))>>2)];
      var $and75=$78 & $neg74;
      HEAP32[((((5304520)|0))>>2)]=$and75;
      label = 22; break;
    case 18: 
      var $79=$F68;
      var $80=$79;
      var $81=HEAP32[((((5304536)|0))>>2)];
      var $cmp77=(($80)>>>0) >= (($81)>>>0);
      var $conv78=(($cmp77)&1);
      var $expval79=($conv78);
      var $tobool80=(($expval79)|0)!=0;
      if ($tobool80) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $82=$F68;
      var $83=$b33;
      var $fd82=(($83+8)|0);
      HEAP32[(($fd82)>>2)]=$82;
      var $84=$b33;
      var $85=$F68;
      var $bk83=(($85+12)|0);
      HEAP32[(($bk83)>>2)]=$84;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!"
    case 21: 
      label = 22; break;
    case 22: 
      var $86=$i;
      var $shl87=$86 << 3;
      var $87=$nb;
      var $sub88=((($shl87)-($87))|0);
      $rsize=$sub88;
      var $88=$nb;
      var $or89=$88 | 1;
      var $or90=$or89 | 2;
      var $89=$p34;
      var $head91=(($89+4)|0);
      HEAP32[(($head91)>>2)]=$or90;
      var $90=$p34;
      var $91=$90;
      var $92=$nb;
      var $add_ptr92=(($91+$92)|0);
      var $93=$add_ptr92;
      $r=$93;
      var $94=$rsize;
      var $or93=$94 | 1;
      var $95=$r;
      var $head94=(($95+4)|0);
      HEAP32[(($head94)>>2)]=$or93;
      var $96=$rsize;
      var $97=$r;
      var $98=$97;
      var $99=$rsize;
      var $add_ptr95=(($98+$99)|0);
      var $100=$add_ptr95;
      var $prev_foot=(($100)|0);
      HEAP32[(($prev_foot)>>2)]=$96;
      var $101=HEAP32[((((5304528)|0))>>2)];
      $DVS=$101;
      var $102=$DVS;
      var $cmp96=(($102)|0)!=0;
      if ($cmp96) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $103=HEAP32[((((5304540)|0))>>2)];
      $DV=$103;
      var $104=$DVS;
      var $shr99=$104 >>> 3;
      $I=$shr99;
      var $105=$I;
      var $shl100=$105 << 1;
      var $arrayidx101=((((5304560)|0)+($shl100<<2))|0);
      var $106=$arrayidx101;
      var $107=$106;
      $B=$107;
      var $108=$B;
      $F102=$108;
      var $109=HEAP32[((((5304520)|0))>>2)];
      var $110=$I;
      var $shl103=1 << $110;
      var $and104=$109 & $shl103;
      var $tobool105=(($and104)|0)!=0;
      if ($tobool105) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $111=$I;
      var $shl107=1 << $111;
      var $112=HEAP32[((((5304520)|0))>>2)];
      var $or108=$112 | $shl107;
      HEAP32[((((5304520)|0))>>2)]=$or108;
      label = 29; break;
    case 25: 
      var $113=$B;
      var $fd110=(($113+8)|0);
      var $114=HEAP32[(($fd110)>>2)];
      var $115=$114;
      var $116=HEAP32[((((5304536)|0))>>2)];
      var $cmp111=(($115)>>>0) >= (($116)>>>0);
      var $conv112=(($cmp111)&1);
      var $expval113=($conv112);
      var $tobool114=(($expval113)|0)!=0;
      if ($tobool114) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $117=$B;
      var $fd116=(($117+8)|0);
      var $118=HEAP32[(($fd116)>>2)];
      $F102=$118;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $119=$DV;
      var $120=$B;
      var $fd120=(($120+8)|0);
      HEAP32[(($fd120)>>2)]=$119;
      var $121=$DV;
      var $122=$F102;
      var $bk121=(($122+12)|0);
      HEAP32[(($bk121)>>2)]=$121;
      var $123=$F102;
      var $124=$DV;
      var $fd122=(($124+8)|0);
      HEAP32[(($fd122)>>2)]=$123;
      var $125=$B;
      var $126=$DV;
      var $bk123=(($126+12)|0);
      HEAP32[(($bk123)>>2)]=$125;
      label = 30; break;
    case 30: 
      var $127=$rsize;
      HEAP32[((((5304528)|0))>>2)]=$127;
      var $128=$r;
      HEAP32[((((5304540)|0))>>2)]=$128;
      var $129=$p34;
      var $130=$129;
      var $add_ptr125=(($130+8)|0);
      $mem=$add_ptr125;
      label = 54; break;
    case 31: 
      var $131=HEAP32[((((5304524)|0))>>2)];
      var $cmp127=(($131)|0)!=0;
      if ($cmp127) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $132=$nb;
      var $call=_tmalloc_small(5304520, $132);
      $mem=$call;
      var $cmp129=(($call)|0)!=0;
      if ($cmp129) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $133=$bytes_addr;
      var $cmp137=(($133)>>>0) >= 4294967232;
      if ($cmp137) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $134=$bytes_addr;
      var $add141=((($134)+(4))|0);
      var $add142=((($add141)+(7))|0);
      var $and143=$add142 & -8;
      $nb=$and143;
      var $135=HEAP32[((((5304524)|0))>>2)];
      var $cmp144=(($135)|0)!=0;
      if ($cmp144) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $136=$nb;
      var $call147=_tmalloc_large(5304520, $136);
      $mem=$call147;
      var $cmp148=(($call147)|0)!=0;
      if ($cmp148) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $137=$nb;
      var $138=HEAP32[((((5304528)|0))>>2)];
      var $cmp154=(($137)>>>0) <= (($138)>>>0);
      if ($cmp154) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $139=HEAP32[((((5304528)|0))>>2)];
      var $140=$nb;
      var $sub158=((($139)-($140))|0);
      $rsize157=$sub158;
      var $141=HEAP32[((((5304540)|0))>>2)];
      $p159=$141;
      var $142=$rsize157;
      var $cmp160=(($142)>>>0) >= 16;
      if ($cmp160) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $143=$p159;
      var $144=$143;
      var $145=$nb;
      var $add_ptr164=(($144+$145)|0);
      var $146=$add_ptr164;
      HEAP32[((((5304540)|0))>>2)]=$146;
      $r163=$146;
      var $147=$rsize157;
      HEAP32[((((5304528)|0))>>2)]=$147;
      var $148=$rsize157;
      var $or165=$148 | 1;
      var $149=$r163;
      var $head166=(($149+4)|0);
      HEAP32[(($head166)>>2)]=$or165;
      var $150=$rsize157;
      var $151=$r163;
      var $152=$151;
      var $153=$rsize157;
      var $add_ptr167=(($152+$153)|0);
      var $154=$add_ptr167;
      var $prev_foot168=(($154)|0);
      HEAP32[(($prev_foot168)>>2)]=$150;
      var $155=$nb;
      var $or169=$155 | 1;
      var $or170=$or169 | 2;
      var $156=$p159;
      var $head171=(($156+4)|0);
      HEAP32[(($head171)>>2)]=$or170;
      label = 49; break;
    case 48: 
      var $157=HEAP32[((((5304528)|0))>>2)];
      $dvs=$157;
      HEAP32[((((5304528)|0))>>2)]=0;
      HEAP32[((((5304540)|0))>>2)]=0;
      var $158=$dvs;
      var $or173=$158 | 1;
      var $or174=$or173 | 2;
      var $159=$p159;
      var $head175=(($159+4)|0);
      HEAP32[(($head175)>>2)]=$or174;
      var $160=$p159;
      var $161=$160;
      var $162=$dvs;
      var $add_ptr176=(($161+$162)|0);
      var $163=$add_ptr176;
      var $head177=(($163+4)|0);
      var $164=HEAP32[(($head177)>>2)];
      var $or178=$164 | 1;
      HEAP32[(($head177)>>2)]=$or178;
      label = 49; break;
    case 49: 
      var $165=$p159;
      var $166=$165;
      var $add_ptr180=(($166+8)|0);
      $mem=$add_ptr180;
      label = 54; break;
    case 50: 
      var $167=$nb;
      var $168=HEAP32[((((5304532)|0))>>2)];
      var $cmp182=(($167)>>>0) < (($168)>>>0);
      if ($cmp182) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $169=$nb;
      var $170=HEAP32[((((5304532)|0))>>2)];
      var $sub186=((($170)-($169))|0);
      HEAP32[((((5304532)|0))>>2)]=$sub186;
      $rsize185=$sub186;
      var $171=HEAP32[((((5304544)|0))>>2)];
      $p187=$171;
      var $172=$p187;
      var $173=$172;
      var $174=$nb;
      var $add_ptr189=(($173+$174)|0);
      var $175=$add_ptr189;
      HEAP32[((((5304544)|0))>>2)]=$175;
      $r188=$175;
      var $176=$rsize185;
      var $or190=$176 | 1;
      var $177=$r188;
      var $head191=(($177+4)|0);
      HEAP32[(($head191)>>2)]=$or190;
      var $178=$nb;
      var $or192=$178 | 1;
      var $or193=$or192 | 2;
      var $179=$p187;
      var $head194=(($179+4)|0);
      HEAP32[(($head194)>>2)]=$or193;
      var $180=$p187;
      var $181=$180;
      var $add_ptr195=(($181+8)|0);
      $mem=$add_ptr195;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $182=$nb;
      var $call198=_sys_alloc(5304520, $182);
      $mem=$call198;
      label = 54; break;
    case 54: 
      var $183=$mem;

      return $183;
    default: assert(0, "bad label: " + label);
  }

}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr;
      var $treemap=(($0+4)|0);
      var $1=HEAP32[(($treemap)>>2)];
      var $2=$m_addr;
      var $treemap1=(($2+4)|0);
      var $3=HEAP32[(($treemap1)>>2)];
      var $sub=(((-$3))|0);
      var $and=$1 & $sub;
      $leastbit=$and;
      var $4=$leastbit;
      var $sub2=((($4)-(1))|0);
      $Y=$sub2;
      var $5=$Y;
      var $shr=$5 >>> 12;
      var $and3=$shr & 16;
      $K=$and3;
      var $6=$K;
      $N=$6;
      var $7=$K;
      var $8=$Y;
      var $shr4=$8 >>> (($7)>>>0);
      $Y=$shr4;
      var $9=$Y;
      var $shr5=$9 >>> 5;
      var $and6=$shr5 & 8;
      $K=$and6;
      var $10=$N;
      var $add=((($10)+($and6))|0);
      $N=$add;
      var $11=$K;
      var $12=$Y;
      var $shr7=$12 >>> (($11)>>>0);
      $Y=$shr7;
      var $13=$Y;
      var $shr8=$13 >>> 2;
      var $and9=$shr8 & 4;
      $K=$and9;
      var $14=$N;
      var $add10=((($14)+($and9))|0);
      $N=$add10;
      var $15=$K;
      var $16=$Y;
      var $shr11=$16 >>> (($15)>>>0);
      $Y=$shr11;
      var $17=$Y;
      var $shr12=$17 >>> 1;
      var $and13=$shr12 & 2;
      $K=$and13;
      var $18=$N;
      var $add14=((($18)+($and13))|0);
      $N=$add14;
      var $19=$K;
      var $20=$Y;
      var $shr15=$20 >>> (($19)>>>0);
      $Y=$shr15;
      var $21=$Y;
      var $shr16=$21 >>> 1;
      var $and17=$shr16 & 1;
      $K=$and17;
      var $22=$N;
      var $add18=((($22)+($and17))|0);
      $N=$add18;
      var $23=$K;
      var $24=$Y;
      var $shr19=$24 >>> (($23)>>>0);
      $Y=$shr19;
      var $25=$N;
      var $26=$Y;
      var $add20=((($25)+($26))|0);
      $i=$add20;
      var $27=$i;
      var $28=$m_addr;
      var $treebins=(($28+304)|0);
      var $arrayidx=(($treebins+($27<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      $t=$29;
      $v=$29;
      var $30=$t;
      var $head=(($30+4)|0);
      var $31=HEAP32[(($head)>>2)];
      var $and21=$31 & -8;
      var $32=$nb_addr;
      var $sub22=((($and21)-($32))|0);
      $rsize=$sub22;
      label = 3; break;
    case 3: 
      var $33=$t;
      var $child=(($33+16)|0);
      var $arrayidx23=(($child)|0);
      var $34=HEAP32[(($arrayidx23)>>2)];
      var $cmp=(($34)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;label = 6; break;
    case 5: 
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;label = 6; break;
    case 6: 
      var $cond;
      $t=$cond;
      var $cmp28=(($cond)|0)!=0;
      if ($cmp28) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $39=$t;
      var $head29=(($39+4)|0);
      var $40=HEAP32[(($head29)>>2)];
      var $and30=$40 & -8;
      var $41=$nb_addr;
      var $sub31=((($and30)-($41))|0);
      $trem=$sub31;
      var $42=$trem;
      var $43=$rsize;
      var $cmp32=(($42)>>>0) < (($43)>>>0);
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $46=$v;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp33=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp33)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $50=$v;
      var $51=$50;
      var $52=$nb_addr;
      var $add_ptr=(($51+$52)|0);
      var $53=$add_ptr;
      $r=$53;
      var $54=$v;
      var $55=$54;
      var $56=$r;
      var $57=$56;
      var $cmp35=(($55)>>>0) < (($57)>>>0);
      var $conv36=(($cmp35)&1);
      var $expval37=($conv36);
      var $tobool38=(($expval37)|0)!=0;
      if ($tobool38) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $58=$v;
      var $parent=(($58+24)|0);
      var $59=HEAP32[(($parent)>>2)];
      $XP=$59;
      var $60=$v;
      var $bk=(($60+12)|0);
      var $61=HEAP32[(($bk)>>2)];
      var $62=$v;
      var $cmp40=(($61)|0)!=(($62)|0);
      if ($cmp40) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $63=$v;
      var $fd=(($63+8)|0);
      var $64=HEAP32[(($fd)>>2)];
      $F=$64;
      var $65=$v;
      var $bk43=(($65+12)|0);
      var $66=HEAP32[(($bk43)>>2)];
      $R=$66;
      var $67=$F;
      var $68=$67;
      var $69=$m_addr;
      var $least_addr44=(($69+16)|0);
      var $70=HEAP32[(($least_addr44)>>2)];
      var $cmp45=(($68)>>>0) >= (($70)>>>0);
      var $conv46=(($cmp45)&1);
      var $expval47=($conv46);
      var $tobool48=(($expval47)|0)!=0;
      if ($tobool48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=$R;
      var $72=$F;
      var $bk50=(($72+12)|0);
      HEAP32[(($bk50)>>2)]=$71;
      var $73=$F;
      var $74=$R;
      var $fd51=(($74+8)|0);
      HEAP32[(($fd51)>>2)]=$73;
      label = 16; break;
    case 15: 
      _abort();
      throw "Reached an unreachable!"
    case 16: 
      label = 29; break;
    case 17: 
      var $75=$v;
      var $child54=(($75+16)|0);
      var $arrayidx55=(($child54+4)|0);
      $RP=$arrayidx55;
      var $76=HEAP32[(($arrayidx55)>>2)];
      $R=$76;
      var $cmp56=(($76)|0)!=0;
      if ($cmp56) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $77=$v;
      var $child58=(($77+16)|0);
      var $arrayidx59=(($child58)|0);
      $RP=$arrayidx59;
      var $78=HEAP32[(($arrayidx59)>>2)];
      $R=$78;
      var $cmp60=(($78)|0)!=0;
      if ($cmp60) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $79=$R;
      var $child64=(($79+16)|0);
      var $arrayidx65=(($child64+4)|0);
      $CP=$arrayidx65;
      var $80=HEAP32[(($arrayidx65)>>2)];
      var $cmp66=(($80)|0)!=0;
      if ($cmp66) { var $83 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $81=$R;
      var $child68=(($81+16)|0);
      var $arrayidx69=(($child68)|0);
      $CP=$arrayidx69;
      var $82=HEAP32[(($arrayidx69)>>2)];
      var $cmp70=(($82)|0)!=0;
      var $83 = $cmp70;label = 22; break;
    case 22: 
      var $83;
      if ($83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $84=$CP;
      $RP=$84;
      var $85=HEAP32[(($84)>>2)];
      $R=$85;
      label = 20; break;
    case 24: 
      var $86=$RP;
      var $87=$86;
      var $88=$m_addr;
      var $least_addr74=(($88+16)|0);
      var $89=HEAP32[(($least_addr74)>>2)];
      var $cmp75=(($87)>>>0) >= (($89)>>>0);
      var $conv76=(($cmp75)&1);
      var $expval77=($conv76);
      var $tobool78=(($expval77)|0)!=0;
      if ($tobool78) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $90=$RP;
      HEAP32[(($90)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$XP;
      var $cmp84=(($91)|0)!=0;
      if ($cmp84) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $92=$v;
      var $index=(($92+28)|0);
      var $93=HEAP32[(($index)>>2)];
      var $94=$m_addr;
      var $treebins87=(($94+304)|0);
      var $arrayidx88=(($treebins87+($93<<2))|0);
      $H=$arrayidx88;
      var $95=$v;
      var $96=$H;
      var $97=HEAP32[(($96)>>2)];
      var $cmp89=(($95)|0)==(($97)|0);
      if ($cmp89) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $98=$R;
      var $99=$H;
      HEAP32[(($99)>>2)]=$98;
      var $cmp92=(($98)|0)==0;
      if ($cmp92) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $100=$v;
      var $index95=(($100+28)|0);
      var $101=HEAP32[(($index95)>>2)];
      var $shl=1 << $101;
      var $neg=$shl ^ -1;
      var $102=$m_addr;
      var $treemap96=(($102+4)|0);
      var $103=HEAP32[(($treemap96)>>2)];
      var $and97=$103 & $neg;
      HEAP32[(($treemap96)>>2)]=$and97;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $104=$XP;
      var $105=$104;
      var $106=$m_addr;
      var $least_addr100=(($106+16)|0);
      var $107=HEAP32[(($least_addr100)>>2)];
      var $cmp101=(($105)>>>0) >= (($107)>>>0);
      var $conv102=(($cmp101)&1);
      var $expval103=($conv102);
      var $tobool104=(($expval103)|0)!=0;
      if ($tobool104) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $108=$XP;
      var $child106=(($108+16)|0);
      var $arrayidx107=(($child106)|0);
      var $109=HEAP32[(($arrayidx107)>>2)];
      var $110=$v;
      var $cmp108=(($109)|0)==(($110)|0);
      if ($cmp108) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $111=$R;
      var $112=$XP;
      var $child111=(($112+16)|0);
      var $arrayidx112=(($child111)|0);
      HEAP32[(($arrayidx112)>>2)]=$111;
      label = 38; break;
    case 37: 
      var $113=$R;
      var $114=$XP;
      var $child114=(($114+16)|0);
      var $arrayidx115=(($child114+4)|0);
      HEAP32[(($arrayidx115)>>2)]=$113;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      var $115=$R;
      var $cmp120=(($115)|0)!=0;
      if ($cmp120) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $116=$R;
      var $117=$116;
      var $118=$m_addr;
      var $least_addr123=(($118+16)|0);
      var $119=HEAP32[(($least_addr123)>>2)];
      var $cmp124=(($117)>>>0) >= (($119)>>>0);
      var $conv125=(($cmp124)&1);
      var $expval126=($conv125);
      var $tobool127=(($expval126)|0)!=0;
      if ($tobool127) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $120=$XP;
      var $121=$R;
      var $parent129=(($121+24)|0);
      HEAP32[(($parent129)>>2)]=$120;
      var $122=$v;
      var $child130=(($122+16)|0);
      var $arrayidx131=(($child130)|0);
      var $123=HEAP32[(($arrayidx131)>>2)];
      $C0=$123;
      var $cmp132=(($123)|0)!=0;
      if ($cmp132) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $124=$C0;
      var $125=$124;
      var $126=$m_addr;
      var $least_addr135=(($126+16)|0);
      var $127=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($125)>>>0) >= (($127)>>>0);
      var $conv137=(($cmp136)&1);
      var $expval138=($conv137);
      var $tobool139=(($expval138)|0)!=0;
      if ($tobool139) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $128=$C0;
      var $129=$R;
      var $child141=(($129+16)|0);
      var $arrayidx142=(($child141)|0);
      HEAP32[(($arrayidx142)>>2)]=$128;
      var $130=$R;
      var $131=$C0;
      var $parent143=(($131+24)|0);
      HEAP32[(($parent143)>>2)]=$130;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      var $132=$v;
      var $child147=(($132+16)|0);
      var $arrayidx148=(($child147+4)|0);
      var $133=HEAP32[(($arrayidx148)>>2)];
      $C1=$133;
      var $cmp149=(($133)|0)!=0;
      if ($cmp149) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $134=$C1;
      var $135=$134;
      var $136=$m_addr;
      var $least_addr152=(($136+16)|0);
      var $137=HEAP32[(($least_addr152)>>2)];
      var $cmp153=(($135)>>>0) >= (($137)>>>0);
      var $conv154=(($cmp153)&1);
      var $expval155=($conv154);
      var $tobool156=(($expval155)|0)!=0;
      if ($tobool156) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $138=$C1;
      var $139=$R;
      var $child158=(($139+16)|0);
      var $arrayidx159=(($child158+4)|0);
      HEAP32[(($arrayidx159)>>2)]=$138;
      var $140=$R;
      var $141=$C1;
      var $parent160=(($141+24)|0);
      HEAP32[(($parent160)>>2)]=$140;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $142=$rsize;
      var $cmp168=(($142)>>>0) < 16;
      if ($cmp168) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $143=$rsize;
      var $144=$nb_addr;
      var $add171=((($143)+($144))|0);
      var $or=$add171 | 1;
      var $or172=$or | 2;
      var $145=$v;
      var $head173=(($145+4)|0);
      HEAP32[(($head173)>>2)]=$or172;
      var $146=$v;
      var $147=$146;
      var $148=$rsize;
      var $149=$nb_addr;
      var $add174=((($148)+($149))|0);
      var $add_ptr175=(($147+$add174)|0);
      var $150=$add_ptr175;
      var $head176=(($150+4)|0);
      var $151=HEAP32[(($head176)>>2)];
      var $or177=$151 | 1;
      HEAP32[(($head176)>>2)]=$or177;
      label = 68; break;
    case 59: 
      var $152=$nb_addr;
      var $or179=$152 | 1;
      var $or180=$or179 | 2;
      var $153=$v;
      var $head181=(($153+4)|0);
      HEAP32[(($head181)>>2)]=$or180;
      var $154=$rsize;
      var $or182=$154 | 1;
      var $155=$r;
      var $head183=(($155+4)|0);
      HEAP32[(($head183)>>2)]=$or182;
      var $156=$rsize;
      var $157=$r;
      var $158=$157;
      var $159=$rsize;
      var $add_ptr184=(($158+$159)|0);
      var $160=$add_ptr184;
      var $prev_foot=(($160)|0);
      HEAP32[(($prev_foot)>>2)]=$156;
      var $161=$m_addr;
      var $dvsize=(($161+8)|0);
      var $162=HEAP32[(($dvsize)>>2)];
      $DVS=$162;
      var $163=$DVS;
      var $cmp185=(($163)|0)!=0;
      if ($cmp185) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $164=$m_addr;
      var $dv=(($164+20)|0);
      var $165=HEAP32[(($dv)>>2)];
      $DV=$165;
      var $166=$DVS;
      var $shr188=$166 >>> 3;
      $I=$shr188;
      var $167=$I;
      var $shl189=$167 << 1;
      var $168=$m_addr;
      var $smallbins=(($168+40)|0);
      var $arrayidx190=(($smallbins+($shl189<<2))|0);
      var $169=$arrayidx190;
      var $170=$169;
      $B=$170;
      var $171=$B;
      $F191=$171;
      var $172=$m_addr;
      var $smallmap=(($172)|0);
      var $173=HEAP32[(($smallmap)>>2)];
      var $174=$I;
      var $shl192=1 << $174;
      var $and193=$173 & $shl192;
      var $tobool194=(($and193)|0)!=0;
      if ($tobool194) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $175=$I;
      var $shl196=1 << $175;
      var $176=$m_addr;
      var $smallmap197=(($176)|0);
      var $177=HEAP32[(($smallmap197)>>2)];
      var $or198=$177 | $shl196;
      HEAP32[(($smallmap197)>>2)]=$or198;
      label = 66; break;
    case 62: 
      var $178=$B;
      var $fd200=(($178+8)|0);
      var $179=HEAP32[(($fd200)>>2)];
      var $180=$179;
      var $181=$m_addr;
      var $least_addr201=(($181+16)|0);
      var $182=HEAP32[(($least_addr201)>>2)];
      var $cmp202=(($180)>>>0) >= (($182)>>>0);
      var $conv203=(($cmp202)&1);
      var $expval204=($conv203);
      var $tobool205=(($expval204)|0)!=0;
      if ($tobool205) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $183=$B;
      var $fd207=(($183+8)|0);
      var $184=HEAP32[(($fd207)>>2)];
      $F191=$184;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      label = 66; break;
    case 66: 
      var $185=$DV;
      var $186=$B;
      var $fd211=(($186+8)|0);
      HEAP32[(($fd211)>>2)]=$185;
      var $187=$DV;
      var $188=$F191;
      var $bk212=(($188+12)|0);
      HEAP32[(($bk212)>>2)]=$187;
      var $189=$F191;
      var $190=$DV;
      var $fd213=(($190+8)|0);
      HEAP32[(($fd213)>>2)]=$189;
      var $191=$B;
      var $192=$DV;
      var $bk214=(($192+12)|0);
      HEAP32[(($bk214)>>2)]=$191;
      label = 67; break;
    case 67: 
      var $193=$rsize;
      var $194=$m_addr;
      var $dvsize216=(($194+8)|0);
      HEAP32[(($dvsize216)>>2)]=$193;
      var $195=$r;
      var $196=$m_addr;
      var $dv217=(($196+20)|0);
      HEAP32[(($dv217)>>2)]=$195;
      label = 68; break;
    case 68: 
      var $197=$v;
      var $198=$197;
      var $add_ptr219=(($198+8)|0);

      return $add_ptr219;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0;
      var $0=$nb_addr;
      var $sub=(((-$0))|0);
      $rsize=$sub;
      var $1=$nb_addr;
      var $shr=$1 >>> 8;
      $X=$shr;
      var $2=$X;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $3=$X;
      var $cmp1=(($3)>>>0) > 65535;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>0);
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$idx;
      var $20=$m_addr;
      var $treebins=(($20+304)|0);
      var $arrayidx=(($treebins+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $t=$21;
      var $cmp24=(($21)|0)!=0;
      if ($cmp24) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$nb_addr;
      var $23=$idx;
      var $cmp26=(($23)|0)==31;
      if ($cmp26) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;label = 12; break;
    case 12: 
      var $cond;
      var $shl31=$22 << $cond;
      $sizebits=$shl31;
      $rst=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>0) < (($29)>>>0);
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $30=$t;
      $v=$30;
      var $31=$trem;
      $rsize=$31;
      var $cmp36=(($31)|0)==0;
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|0)!=0;
      if ($cmp45) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $38=$rt;
      var $39=$t;
      var $cmp46=(($38)|0)!=(($39)|0);
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$rt;
      $rst=$40;
      label = 20; break;
    case 20: 
      var $41=$t;
      var $cmp49=(($41)|0)==0;
      if ($cmp49) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $42=$rst;
      $t=$42;
      label = 23; break;
    case 22: 
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$t;
      var $cmp54=(($44)|0)==0;
      if ($cmp54) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $45=$v;
      var $cmp56=(($45)|0)==0;
      if ($cmp56) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|0)!=0;
      if ($cmp64) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$leftbits;
      var $52=$leftbits;
      var $sub66=(((-$52))|0);
      var $and67=$51 & $sub66;
      $leastbit=$and67;
      var $53=$leastbit;
      var $sub69=((($53)-(1))|0);
      $Y68=$sub69;
      var $54=$Y68;
      var $shr71=$54 >>> 12;
      var $and72=$shr71 & 16;
      $K70=$and72;
      var $55=$K70;
      $N73=$55;
      var $56=$K70;
      var $57=$Y68;
      var $shr74=$57 >>> (($56)>>>0);
      $Y68=$shr74;
      var $58=$Y68;
      var $shr75=$58 >>> 5;
      var $and76=$shr75 & 8;
      $K70=$and76;
      var $59=$N73;
      var $add77=((($59)+($and76))|0);
      $N73=$add77;
      var $60=$K70;
      var $61=$Y68;
      var $shr78=$61 >>> (($60)>>>0);
      $Y68=$shr78;
      var $62=$Y68;
      var $shr79=$62 >>> 2;
      var $and80=$shr79 & 4;
      $K70=$and80;
      var $63=$N73;
      var $add81=((($63)+($and80))|0);
      $N73=$add81;
      var $64=$K70;
      var $65=$Y68;
      var $shr82=$65 >>> (($64)>>>0);
      $Y68=$shr82;
      var $66=$Y68;
      var $shr83=$66 >>> 1;
      var $and84=$shr83 & 2;
      $K70=$and84;
      var $67=$N73;
      var $add85=((($67)+($and84))|0);
      $N73=$add85;
      var $68=$K70;
      var $69=$Y68;
      var $shr86=$69 >>> (($68)>>>0);
      $Y68=$shr86;
      var $70=$Y68;
      var $shr87=$70 >>> 1;
      var $and88=$shr87 & 1;
      $K70=$and88;
      var $71=$N73;
      var $add89=((($71)+($and88))|0);
      $N73=$add89;
      var $72=$K70;
      var $73=$Y68;
      var $shr90=$73 >>> (($72)>>>0);
      $Y68=$shr90;
      var $74=$N73;
      var $75=$Y68;
      var $add91=((($74)+($75))|0);
      $i=$add91;
      var $76=$i;
      var $77=$m_addr;
      var $treebins92=(($77+304)|0);
      var $arrayidx93=(($treebins92+($76<<2))|0);
      var $78=HEAP32[(($arrayidx93)>>2)];
      $t=$78;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $79=$t;
      var $cmp96=(($79)|0)!=0;
      if ($cmp96) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $80=$t;
      var $head98=(($80+4)|0);
      var $81=HEAP32[(($head98)>>2)];
      var $and99=$81 & -8;
      var $82=$nb_addr;
      var $sub100=((($and99)-($82))|0);
      $trem97=$sub100;
      var $83=$trem97;
      var $84=$rsize;
      var $cmp101=(($83)>>>0) < (($84)>>>0);
      if ($cmp101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
      label = 33; break;
    case 33: 
      var $87=$t;
      var $child104=(($87+16)|0);
      var $arrayidx105=(($child104)|0);
      var $88=HEAP32[(($arrayidx105)>>2)];
      var $cmp106=(($88)|0)!=0;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;label = 36; break;
    case 35: 
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;label = 36; break;
    case 36: 
      var $cond114;
      $t=$cond114;
      label = 30; break;
    case 37: 
      var $93=$v;
      var $cmp115=(($93)|0)!=0;
      if ($cmp115) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>0) < (($sub117)>>>0);
      if ($cmp118) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>0) >= (($101)>>>0);
      var $conv=(($cmp120)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>0) < (($109)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|0)!=(($114)|0);
      if ($cmp127) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $115=$v;
      var $fd=(($115+8)|0);
      var $116=HEAP32[(($fd)>>2)];
      $F=$116;
      var $117=$v;
      var $bk130=(($117+12)|0);
      var $118=HEAP32[(($bk130)>>2)];
      $R=$118;
      var $119=$F;
      var $120=$119;
      var $121=$m_addr;
      var $least_addr131=(($121+16)|0);
      var $122=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($120)>>>0) >= (($122)>>>0);
      var $conv133=(($cmp132)&1);
      var $expval134=($conv133);
      var $tobool135=(($expval134)|0)!=0;
      if ($tobool135) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $123=$R;
      var $124=$F;
      var $bk137=(($124+12)|0);
      HEAP32[(($bk137)>>2)]=$123;
      var $125=$F;
      var $126=$R;
      var $fd138=(($126+8)|0);
      HEAP32[(($fd138)>>2)]=$125;
      label = 45; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 58; break;
    case 46: 
      var $127=$v;
      var $child142=(($127+16)|0);
      var $arrayidx143=(($child142+4)|0);
      $RP=$arrayidx143;
      var $128=HEAP32[(($arrayidx143)>>2)];
      $R=$128;
      var $cmp144=(($128)|0)!=0;
      if ($cmp144) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $129=$v;
      var $child146=(($129+16)|0);
      var $arrayidx147=(($child146)|0);
      $RP=$arrayidx147;
      var $130=HEAP32[(($arrayidx147)>>2)];
      $R=$130;
      var $cmp148=(($130)|0)!=0;
      if ($cmp148) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $131=$R;
      var $child152=(($131+16)|0);
      var $arrayidx153=(($child152+4)|0);
      $CP=$arrayidx153;
      var $132=HEAP32[(($arrayidx153)>>2)];
      var $cmp154=(($132)|0)!=0;
      if ($cmp154) { var $135 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $133=$R;
      var $child156=(($133+16)|0);
      var $arrayidx157=(($child156)|0);
      $CP=$arrayidx157;
      var $134=HEAP32[(($arrayidx157)>>2)];
      var $cmp158=(($134)|0)!=0;
      var $135 = $cmp158;label = 51; break;
    case 51: 
      var $135;
      if ($135) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $136=$CP;
      $RP=$136;
      var $137=HEAP32[(($136)>>2)];
      $R=$137;
      label = 49; break;
    case 53: 
      var $138=$RP;
      var $139=$138;
      var $140=$m_addr;
      var $least_addr162=(($140+16)|0);
      var $141=HEAP32[(($least_addr162)>>2)];
      var $cmp163=(($139)>>>0) >= (($141)>>>0);
      var $conv164=(($cmp163)&1);
      var $expval165=($conv164);
      var $tobool166=(($expval165)|0)!=0;
      if ($tobool166) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $142=$RP;
      HEAP32[(($142)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $143=$XP;
      var $cmp172=(($143)|0)!=0;
      if ($cmp172) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $144=$v;
      var $index=(($144+28)|0);
      var $145=HEAP32[(($index)>>2)];
      var $146=$m_addr;
      var $treebins175=(($146+304)|0);
      var $arrayidx176=(($treebins175+($145<<2))|0);
      $H=$arrayidx176;
      var $147=$v;
      var $148=$H;
      var $149=HEAP32[(($148)>>2)];
      var $cmp177=(($147)|0)==(($149)|0);
      if ($cmp177) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $150=$R;
      var $151=$H;
      HEAP32[(($151)>>2)]=$150;
      var $cmp180=(($150)|0)==0;
      if ($cmp180) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $152=$v;
      var $index183=(($152+28)|0);
      var $153=HEAP32[(($index183)>>2)];
      var $shl184=1 << $153;
      var $neg=$shl184 ^ -1;
      var $154=$m_addr;
      var $treemap185=(($154+4)|0);
      var $155=HEAP32[(($treemap185)>>2)];
      var $and186=$155 & $neg;
      HEAP32[(($treemap185)>>2)]=$and186;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $156=$XP;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr189=(($158+16)|0);
      var $159=HEAP32[(($least_addr189)>>2)];
      var $cmp190=(($157)>>>0) >= (($159)>>>0);
      var $conv191=(($cmp190)&1);
      var $expval192=($conv191);
      var $tobool193=(($expval192)|0)!=0;
      if ($tobool193) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $160=$XP;
      var $child195=(($160+16)|0);
      var $arrayidx196=(($child195)|0);
      var $161=HEAP32[(($arrayidx196)>>2)];
      var $162=$v;
      var $cmp197=(($161)|0)==(($162)|0);
      if ($cmp197) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $163=$R;
      var $164=$XP;
      var $child200=(($164+16)|0);
      var $arrayidx201=(($child200)|0);
      HEAP32[(($arrayidx201)>>2)]=$163;
      label = 67; break;
    case 66: 
      var $165=$R;
      var $166=$XP;
      var $child203=(($166+16)|0);
      var $arrayidx204=(($child203+4)|0);
      HEAP32[(($arrayidx204)>>2)]=$165;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $167=$R;
      var $cmp209=(($167)|0)!=0;
      if ($cmp209) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $168=$R;
      var $169=$168;
      var $170=$m_addr;
      var $least_addr212=(($170+16)|0);
      var $171=HEAP32[(($least_addr212)>>2)];
      var $cmp213=(($169)>>>0) >= (($171)>>>0);
      var $conv214=(($cmp213)&1);
      var $expval215=($conv214);
      var $tobool216=(($expval215)|0)!=0;
      if ($tobool216) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $172=$XP;
      var $173=$R;
      var $parent218=(($173+24)|0);
      HEAP32[(($parent218)>>2)]=$172;
      var $174=$v;
      var $child219=(($174+16)|0);
      var $arrayidx220=(($child219)|0);
      var $175=HEAP32[(($arrayidx220)>>2)];
      $C0=$175;
      var $cmp221=(($175)|0)!=0;
      if ($cmp221) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $176=$C0;
      var $177=$176;
      var $178=$m_addr;
      var $least_addr224=(($178+16)|0);
      var $179=HEAP32[(($least_addr224)>>2)];
      var $cmp225=(($177)>>>0) >= (($179)>>>0);
      var $conv226=(($cmp225)&1);
      var $expval227=($conv226);
      var $tobool228=(($expval227)|0)!=0;
      if ($tobool228) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $180=$C0;
      var $181=$R;
      var $child230=(($181+16)|0);
      var $arrayidx231=(($child230)|0);
      HEAP32[(($arrayidx231)>>2)]=$180;
      var $182=$R;
      var $183=$C0;
      var $parent232=(($183+24)|0);
      HEAP32[(($parent232)>>2)]=$182;
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!"
    case 76: 
      label = 77; break;
    case 77: 
      var $184=$v;
      var $child236=(($184+16)|0);
      var $arrayidx237=(($child236+4)|0);
      var $185=HEAP32[(($arrayidx237)>>2)];
      $C1=$185;
      var $cmp238=(($185)|0)!=0;
      if ($cmp238) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $186=$C1;
      var $187=$186;
      var $188=$m_addr;
      var $least_addr241=(($188+16)|0);
      var $189=HEAP32[(($least_addr241)>>2)];
      var $cmp242=(($187)>>>0) >= (($189)>>>0);
      var $conv243=(($cmp242)&1);
      var $expval244=($conv243);
      var $tobool245=(($expval244)|0)!=0;
      if ($tobool245) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $190=$C1;
      var $191=$R;
      var $child247=(($191+16)|0);
      var $arrayidx248=(($child247+4)|0);
      HEAP32[(($arrayidx248)>>2)]=$190;
      var $192=$R;
      var $193=$C1;
      var $parent249=(($193+24)|0);
      HEAP32[(($parent249)>>2)]=$192;
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!"
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!"
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $194=$rsize;
      var $cmp257=(($194)>>>0) < 16;
      if ($cmp257) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $195=$rsize;
      var $196=$nb_addr;
      var $add260=((($195)+($196))|0);
      var $or261=$add260 | 1;
      var $or262=$or261 | 2;
      var $197=$v;
      var $head263=(($197+4)|0);
      HEAP32[(($head263)>>2)]=$or262;
      var $198=$v;
      var $199=$198;
      var $200=$rsize;
      var $201=$nb_addr;
      var $add264=((($200)+($201))|0);
      var $add_ptr265=(($199+$add264)|0);
      var $202=$add_ptr265;
      var $head266=(($202+4)|0);
      var $203=HEAP32[(($head266)>>2)];
      var $or267=$203 | 1;
      HEAP32[(($head266)>>2)]=$or267;
      label = 124; break;
    case 88: 
      var $204=$nb_addr;
      var $or269=$204 | 1;
      var $or270=$or269 | 2;
      var $205=$v;
      var $head271=(($205+4)|0);
      HEAP32[(($head271)>>2)]=$or270;
      var $206=$rsize;
      var $or272=$206 | 1;
      var $207=$r;
      var $head273=(($207+4)|0);
      HEAP32[(($head273)>>2)]=$or272;
      var $208=$rsize;
      var $209=$r;
      var $210=$209;
      var $211=$rsize;
      var $add_ptr274=(($210+$211)|0);
      var $212=$add_ptr274;
      var $prev_foot=(($212)|0);
      HEAP32[(($prev_foot)>>2)]=$208;
      var $213=$rsize;
      var $shr275=$213 >>> 3;
      var $cmp276=(($shr275)>>>0) < 32;
      if ($cmp276) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $214=$rsize;
      var $shr279=$214 >>> 3;
      $I=$shr279;
      var $215=$I;
      var $shl280=$215 << 1;
      var $216=$m_addr;
      var $smallbins=(($216+40)|0);
      var $arrayidx281=(($smallbins+($shl280<<2))|0);
      var $217=$arrayidx281;
      var $218=$217;
      $B=$218;
      var $219=$B;
      $F282=$219;
      var $220=$m_addr;
      var $smallmap=(($220)|0);
      var $221=HEAP32[(($smallmap)>>2)];
      var $222=$I;
      var $shl283=1 << $222;
      var $and284=$221 & $shl283;
      var $tobool285=(($and284)|0)!=0;
      if ($tobool285) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $223=$I;
      var $shl287=1 << $223;
      var $224=$m_addr;
      var $smallmap288=(($224)|0);
      var $225=HEAP32[(($smallmap288)>>2)];
      var $or289=$225 | $shl287;
      HEAP32[(($smallmap288)>>2)]=$or289;
      label = 95; break;
    case 91: 
      var $226=$B;
      var $fd291=(($226+8)|0);
      var $227=HEAP32[(($fd291)>>2)];
      var $228=$227;
      var $229=$m_addr;
      var $least_addr292=(($229+16)|0);
      var $230=HEAP32[(($least_addr292)>>2)];
      var $cmp293=(($228)>>>0) >= (($230)>>>0);
      var $conv294=(($cmp293)&1);
      var $expval295=($conv294);
      var $tobool296=(($expval295)|0)!=0;
      if ($tobool296) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $231=$B;
      var $fd298=(($231+8)|0);
      var $232=HEAP32[(($fd298)>>2)];
      $F282=$232;
      label = 94; break;
    case 93: 
      _abort();
      throw "Reached an unreachable!"
    case 94: 
      label = 95; break;
    case 95: 
      var $233=$r;
      var $234=$B;
      var $fd302=(($234+8)|0);
      HEAP32[(($fd302)>>2)]=$233;
      var $235=$r;
      var $236=$F282;
      var $bk303=(($236+12)|0);
      HEAP32[(($bk303)>>2)]=$235;
      var $237=$F282;
      var $238=$r;
      var $fd304=(($238+8)|0);
      HEAP32[(($fd304)>>2)]=$237;
      var $239=$B;
      var $240=$r;
      var $bk305=(($240+12)|0);
      HEAP32[(($bk305)>>2)]=$239;
      label = 123; break;
    case 96: 
      var $241=$r;
      var $242=$241;
      $TP=$242;
      var $243=$rsize;
      var $shr310=$243 >>> 8;
      $X309=$shr310;
      var $244=$X309;
      var $cmp311=(($244)|0)==0;
      if ($cmp311) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I308=0;
      label = 102; break;
    case 98: 
      var $245=$X309;
      var $cmp315=(($245)>>>0) > 65535;
      if ($cmp315) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I308=31;
      label = 101; break;
    case 100: 
      var $246=$X309;
      $Y319=$246;
      var $247=$Y319;
      var $sub321=((($247)-(256))|0);
      var $shr322=$sub321 >>> 16;
      var $and323=$shr322 & 8;
      $N320=$and323;
      var $248=$N320;
      var $249=$Y319;
      var $shl325=$249 << $248;
      $Y319=$shl325;
      var $sub326=((($shl325)-(4096))|0);
      var $shr327=$sub326 >>> 16;
      var $and328=$shr327 & 4;
      $K324=$and328;
      var $250=$K324;
      var $251=$N320;
      var $add329=((($251)+($250))|0);
      $N320=$add329;
      var $252=$K324;
      var $253=$Y319;
      var $shl330=$253 << $252;
      $Y319=$shl330;
      var $sub331=((($shl330)-(16384))|0);
      var $shr332=$sub331 >>> 16;
      var $and333=$shr332 & 2;
      $K324=$and333;
      var $254=$N320;
      var $add334=((($254)+($and333))|0);
      $N320=$add334;
      var $255=$N320;
      var $sub335=(((14)-($255))|0);
      var $256=$K324;
      var $257=$Y319;
      var $shl336=$257 << $256;
      $Y319=$shl336;
      var $shr337=$shl336 >>> 15;
      var $add338=((($sub335)+($shr337))|0);
      $K324=$add338;
      var $258=$K324;
      var $shl339=$258 << 1;
      var $259=$rsize;
      var $260=$K324;
      var $add340=((($260)+(7))|0);
      var $shr341=$259 >>> (($add340)>>>0);
      var $and342=$shr341 & 1;
      var $add343=((($shl339)+($and342))|0);
      $I308=$add343;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $261=$I308;
      var $262=$m_addr;
      var $treebins346=(($262+304)|0);
      var $arrayidx347=(($treebins346+($261<<2))|0);
      $H307=$arrayidx347;
      var $263=$I308;
      var $264=$TP;
      var $index348=(($264+28)|0);
      HEAP32[(($index348)>>2)]=$263;
      var $265=$TP;
      var $child349=(($265+16)|0);
      var $arrayidx350=(($child349+4)|0);
      HEAP32[(($arrayidx350)>>2)]=0;
      var $266=$TP;
      var $child351=(($266+16)|0);
      var $arrayidx352=(($child351)|0);
      HEAP32[(($arrayidx352)>>2)]=0;
      var $267=$m_addr;
      var $treemap353=(($267+4)|0);
      var $268=HEAP32[(($treemap353)>>2)];
      var $269=$I308;
      var $shl354=1 << $269;
      var $and355=$268 & $shl354;
      var $tobool356=(($and355)|0)!=0;
      if ($tobool356) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $270=$I308;
      var $shl358=1 << $270;
      var $271=$m_addr;
      var $treemap359=(($271+4)|0);
      var $272=HEAP32[(($treemap359)>>2)];
      var $or360=$272 | $shl358;
      HEAP32[(($treemap359)>>2)]=$or360;
      var $273=$TP;
      var $274=$H307;
      HEAP32[(($274)>>2)]=$273;
      var $275=$H307;
      var $276=$275;
      var $277=$TP;
      var $parent361=(($277+24)|0);
      HEAP32[(($parent361)>>2)]=$276;
      var $278=$TP;
      var $279=$TP;
      var $bk362=(($279+12)|0);
      HEAP32[(($bk362)>>2)]=$278;
      var $280=$TP;
      var $fd363=(($280+8)|0);
      HEAP32[(($fd363)>>2)]=$278;
      label = 122; break;
    case 104: 
      var $281=$H307;
      var $282=HEAP32[(($281)>>2)];
      $T=$282;
      var $283=$rsize;
      var $284=$I308;
      var $cmp366=(($284)|0)==31;
      if ($cmp366) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $cond375 = 0;label = 107; break;
    case 106: 
      var $285=$I308;
      var $shr370=$285 >>> 1;
      var $add371=((($shr370)+(8))|0);
      var $sub372=((($add371)-(2))|0);
      var $sub373=(((31)-($sub372))|0);
      var $cond375 = $sub373;label = 107; break;
    case 107: 
      var $cond375;
      var $shl376=$283 << $cond375;
      $K365=$shl376;
      label = 108; break;
    case 108: 
      var $286=$T;
      var $head378=(($286+4)|0);
      var $287=HEAP32[(($head378)>>2)];
      var $and379=$287 & -8;
      var $288=$rsize;
      var $cmp380=(($and379)|0)!=(($288)|0);
      if ($cmp380) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $289=$K365;
      var $shr383=$289 >>> 31;
      var $and384=$shr383 & 1;
      var $290=$T;
      var $child385=(($290+16)|0);
      var $arrayidx386=(($child385+($and384<<2))|0);
      $C=$arrayidx386;
      var $291=$K365;
      var $shl387=$291 << 1;
      $K365=$shl387;
      var $292=$C;
      var $293=HEAP32[(($292)>>2)];
      var $cmp388=(($293)|0)!=0;
      if ($cmp388) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $294=$C;
      var $295=HEAP32[(($294)>>2)];
      $T=$295;
      label = 114; break;
    case 111: 
      var $296=$C;
      var $297=$296;
      var $298=$m_addr;
      var $least_addr392=(($298+16)|0);
      var $299=HEAP32[(($least_addr392)>>2)];
      var $cmp393=(($297)>>>0) >= (($299)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $300=$TP;
      var $301=$C;
      HEAP32[(($301)>>2)]=$300;
      var $302=$T;
      var $303=$TP;
      var $parent398=(($303+24)|0);
      HEAP32[(($parent398)>>2)]=$302;
      var $304=$TP;
      var $305=$TP;
      var $bk399=(($305+12)|0);
      HEAP32[(($bk399)>>2)]=$304;
      var $306=$TP;
      var $fd400=(($306+8)|0);
      HEAP32[(($fd400)>>2)]=$304;
      label = 121; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!"
    case 114: 
      label = 120; break;
    case 115: 
      var $307=$T;
      var $fd405=(($307+8)|0);
      var $308=HEAP32[(($fd405)>>2)];
      $F404=$308;
      var $309=$T;
      var $310=$309;
      var $311=$m_addr;
      var $least_addr406=(($311+16)|0);
      var $312=HEAP32[(($least_addr406)>>2)];
      var $cmp407=(($310)>>>0) >= (($312)>>>0);
      if ($cmp407) { label = 116; break; } else { var $317 = 0;label = 117; break; }
    case 116: 
      var $313=$F404;
      var $314=$313;
      var $315=$m_addr;
      var $least_addr409=(($315+16)|0);
      var $316=HEAP32[(($least_addr409)>>2)];
      var $cmp410=(($314)>>>0) >= (($316)>>>0);
      var $317 = $cmp410;label = 117; break;
    case 117: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=($land_ext);
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $318=$TP;
      var $319=$F404;
      var $bk415=(($319+12)|0);
      HEAP32[(($bk415)>>2)]=$318;
      var $320=$T;
      var $fd416=(($320+8)|0);
      HEAP32[(($fd416)>>2)]=$318;
      var $321=$F404;
      var $322=$TP;
      var $fd417=(($322+8)|0);
      HEAP32[(($fd417)>>2)]=$321;
      var $323=$T;
      var $324=$TP;
      var $bk418=(($324+12)|0);
      HEAP32[(($bk418)>>2)]=$323;
      var $325=$TP;
      var $parent419=(($325+24)|0);
      HEAP32[(($parent419)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();
      throw "Reached an unreachable!"
    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $326=$v;
      var $327=$326;
      var $add_ptr426=(($327+8)|0);
      $retval=$add_ptr426;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!"
    case 127: 
      $retval=0;
      label = 128; break;
    case 128: 
      var $328=$retval;

      return $328;
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $0=HEAP32[((((5249396)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$m_addr;
      var $mflags=(($2+440)|0);
      var $3=HEAP32[(($mflags)>>2)];
      var $and=$3 & 0;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$nb_addr;
      var $5=HEAP32[((((5249408)|0))>>2)];
      var $cmp2=(($4)>>>0) >= (($5)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|0)!=0;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|0)!=0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$mem;
      $retval=$11;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$m_addr;
      var $mflags9=(($12+440)|0);
      var $13=HEAP32[(($mflags9)>>2)];
      var $and10=$13 & 4;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $14=$m_addr;
      var $top=(($14+24)|0);
      var $15=HEAP32[(($top)>>2)];
      var $cmp13=(($15)|0)==0;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $cond = 0;label = 14; break;
    case 13: 
      var $16=$m_addr;
      var $17=$m_addr;
      var $top14=(($17+24)|0);
      var $18=HEAP32[(($top14)>>2)];
      var $19=$18;
      var $call15=_segment_holding($16, $19);
      var $cond = $call15;label = 14; break;
    case 14: 
      var $cond;
      $ss=$cond;
      $asize=0;
      var $20=$ss;
      var $cmp16=(($20)|0)==0;
      if ($cmp16) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $call18=_sbrk(0);
      $base=$call18;
      var $21=$base;
      var $cmp19=(($21)|0)!=-1;
      if ($cmp19) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $22=$nb_addr;
      var $add=((($22)+(48))|0);
      var $23=HEAP32[((((5249404)|0))>>2)];
      var $sub=((($23)-(1))|0);
      var $add21=((($add)+($sub))|0);
      var $24=HEAP32[((((5249404)|0))>>2)];
      var $sub22=((($24)-(1))|0);
      var $neg=$sub22 ^ -1;
      var $and23=$add21 & $neg;
      $asize=$and23;
      var $25=$base;
      var $26=$25;
      var $27=HEAP32[((((5249400)|0))>>2)];
      var $sub24=((($27)-(1))|0);
      var $and25=$26 & $sub24;
      var $cmp26=(($and25)|0)==0;
      if ($cmp26) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $28=$base;
      var $29=$28;
      var $30=HEAP32[((((5249400)|0))>>2)];
      var $sub28=((($30)-(1))|0);
      var $add29=((($29)+($sub28))|0);
      var $31=HEAP32[((((5249400)|0))>>2)];
      var $sub30=((($31)-(1))|0);
      var $neg31=$sub30 ^ -1;
      var $and32=$add29 & $neg31;
      var $32=$base;
      var $33=$32;
      var $sub33=((($and32)-($33))|0);
      var $34=$asize;
      var $add34=((($34)+($sub33))|0);
      $asize=$add34;
      label = 18; break;
    case 18: 
      var $35=$asize;
      var $cmp36=(($35)>>>0) < 2147483647;
      if ($cmp36) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $36=$asize;
      var $call38=_sbrk($36);
      $br=$call38;
      var $37=$base;
      var $cmp39=(($call38)|0)==(($37)|0);
      if ($cmp39) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$base;
      $tbase=$38;
      var $39=$asize;
      $tsize=$39;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $40=$nb_addr;
      var $41=$m_addr;
      var $topsize43=(($41+12)|0);
      var $42=HEAP32[(($topsize43)>>2)];
      var $sub44=((($40)-($42))|0);
      var $add45=((($sub44)+(48))|0);
      var $43=HEAP32[((((5249404)|0))>>2)];
      var $sub46=((($43)-(1))|0);
      var $add47=((($add45)+($sub46))|0);
      var $44=HEAP32[((((5249404)|0))>>2)];
      var $sub48=((($44)-(1))|0);
      var $neg49=$sub48 ^ -1;
      var $and50=$add47 & $neg49;
      $asize=$and50;
      var $45=$asize;
      var $cmp51=(($45)>>>0) < 2147483647;
      if ($cmp51) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $46=$asize;
      var $call53=_sbrk($46);
      $br=$call53;
      var $47=$ss;
      var $base54=(($47)|0);
      var $48=HEAP32[(($base54)>>2)];
      var $49=$ss;
      var $size=(($49+4)|0);
      var $50=HEAP32[(($size)>>2)];
      var $add_ptr=(($48+$50)|0);
      var $cmp55=(($call53)|0)==(($add_ptr)|0);
      if ($cmp55) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $51=$br;
      $tbase=$51;
      var $52=$asize;
      $tsize=$52;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $53=$tbase;
      var $cmp59=(($53)|0)==-1;
      if ($cmp59) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $54=$br;
      var $cmp61=(($54)|0)!=-1;
      if ($cmp61) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $55=$asize;
      var $cmp63=(($55)>>>0) < 2147483647;
      if ($cmp63) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $56=$asize;
      var $57=$nb_addr;
      var $add65=((($57)+(48))|0);
      var $cmp66=(($56)>>>0) < (($add65)>>>0);
      if ($cmp66) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $58=$nb_addr;
      var $add68=((($58)+(48))|0);
      var $59=$asize;
      var $sub69=((($add68)-($59))|0);
      var $60=HEAP32[((((5249404)|0))>>2)];
      var $sub70=((($60)-(1))|0);
      var $add71=((($sub69)+($sub70))|0);
      var $61=HEAP32[((((5249404)|0))>>2)];
      var $sub72=((($61)-(1))|0);
      var $neg73=$sub72 ^ -1;
      var $and74=$add71 & $neg73;
      $esize=$and74;
      var $62=$esize;
      var $cmp75=(($62)>>>0) < 2147483647;
      if ($cmp75) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $63=$esize;
      var $call77=_sbrk($63);
      $end=$call77;
      var $64=$end;
      var $cmp78=(($64)|0)!=-1;
      if ($cmp78) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $65=$esize;
      var $66=$asize;
      var $add80=((($66)+($65))|0);
      $asize=$add80;
      label = 35; break;
    case 34: 
      var $67=$asize;
      var $sub82=(((-$67))|0);
      var $call83=_sbrk($sub82);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $68=$br;
      var $cmp88=(($68)|0)!=-1;
      if ($cmp88) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $69=$br;
      $tbase=$69;
      var $70=$asize;
      $tsize=$70;
      label = 41; break;
    case 40: 
      var $71=$m_addr;
      var $mflags91=(($71+440)|0);
      var $72=HEAP32[(($mflags91)>>2)];
      var $or=$72 | 4;
      HEAP32[(($mflags91)>>2)]=$or;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $73=$tbase;
      var $cmp95=(($73)|0)==-1;
      if ($cmp95) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $74=$nb_addr;
      var $add98=((($74)+(48))|0);
      var $75=HEAP32[((((5249404)|0))>>2)];
      var $sub99=((($75)-(1))|0);
      var $add100=((($add98)+($sub99))|0);
      var $76=HEAP32[((((5249404)|0))>>2)];
      var $sub101=((($76)-(1))|0);
      var $neg102=$sub101 ^ -1;
      var $and103=$add100 & $neg102;
      $asize97=$and103;
      var $77=$asize97;
      var $cmp104=(($77)>>>0) < 2147483647;
      if ($cmp104) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br106=-1;
      $end107=-1;
      var $78=$asize97;
      var $call108=_sbrk($78);
      $br106=$call108;
      var $call109=_sbrk(0);
      $end107=$call109;
      var $79=$br106;
      var $cmp110=(($79)|0)!=-1;
      if ($cmp110) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $80=$end107;
      var $cmp112=(($80)|0)!=-1;
      if ($cmp112) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $81=$br106;
      var $82=$end107;
      var $cmp114=(($81)>>>0) < (($82)>>>0);
      if ($cmp114) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $83=$end107;
      var $84=$br106;
      var $sub_ptr_lhs_cast=$83;
      var $sub_ptr_rhs_cast=$84;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $ssize=$sub_ptr_sub;
      var $85=$ssize;
      var $86=$nb_addr;
      var $add116=((($86)+(40))|0);
      var $cmp117=(($85)>>>0) > (($add116)>>>0);
      if ($cmp117) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $87=$br106;
      $tbase=$87;
      var $88=$ssize;
      $tsize=$88;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $89=$tbase;
      var $cmp123=(($89)|0)!=-1;
      if ($cmp123) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $90=$tsize;
      var $91=$m_addr;
      var $footprint=(($91+432)|0);
      var $92=HEAP32[(($footprint)>>2)];
      var $add125=((($92)+($90))|0);
      HEAP32[(($footprint)>>2)]=$add125;
      var $93=$m_addr;
      var $max_footprint=(($93+436)|0);
      var $94=HEAP32[(($max_footprint)>>2)];
      var $cmp126=(($add125)>>>0) > (($94)>>>0);
      if ($cmp126) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $95=$m_addr;
      var $footprint128=(($95+432)|0);
      var $96=HEAP32[(($footprint128)>>2)];
      var $97=$m_addr;
      var $max_footprint129=(($97+436)|0);
      HEAP32[(($max_footprint129)>>2)]=$96;
      label = 56; break;
    case 56: 
      var $98=$m_addr;
      var $top131=(($98+24)|0);
      var $99=HEAP32[(($top131)>>2)];
      var $cmp132=(($99)|0)!=0;
      if ($cmp132) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp134=(($101)|0)==0;
      if ($cmp134) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $102=$tbase;
      var $103=$m_addr;
      var $least_addr135=(($103+16)|0);
      var $104=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($102)>>>0) < (($104)>>>0);
      if ($cmp136) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $105=$tbase;
      var $106=$m_addr;
      var $least_addr138=(($106+16)|0);
      HEAP32[(($least_addr138)>>2)]=$105;
      label = 60; break;
    case 60: 
      var $107=$tbase;
      var $108=$m_addr;
      var $seg=(($108+444)|0);
      var $base140=(($seg)|0);
      HEAP32[(($base140)>>2)]=$107;
      var $109=$tsize;
      var $110=$m_addr;
      var $seg141=(($110+444)|0);
      var $size142=(($seg141+4)|0);
      HEAP32[(($size142)>>2)]=$109;
      var $111=$mmap_flag;
      var $112=$m_addr;
      var $seg143=(($112+444)|0);
      var $sflags=(($seg143+12)|0);
      HEAP32[(($sflags)>>2)]=$111;
      var $113=HEAP32[((((5249396)|0))>>2)];
      var $114=$m_addr;
      var $magic=(($114+36)|0);
      HEAP32[(($magic)>>2)]=$113;
      var $115=$m_addr;
      var $release_checks=(($115+32)|0);
      HEAP32[(($release_checks)>>2)]=-1;
      var $116=$m_addr;
      _init_bins($116);
      var $117=$m_addr;
      var $cmp144=(($117)|0)==5304520;
      if ($cmp144) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $118=$m_addr;
      var $119=$tbase;
      var $120=$119;
      var $121=$tsize;
      var $sub146=((($121)-(40))|0);
      _init_top($118, $120, $sub146);
      label = 63; break;
    case 62: 
      var $122=$m_addr;
      var $123=$122;
      var $add_ptr148=((($123)-(8))|0);
      var $124=$add_ptr148;
      var $125=$124;
      var $126=$m_addr;
      var $127=$126;
      var $add_ptr149=((($127)-(8))|0);
      var $128=$add_ptr149;
      var $head=(($128+4)|0);
      var $129=HEAP32[(($head)>>2)];
      var $and150=$129 & -8;
      var $add_ptr151=(($125+$and150)|0);
      var $130=$add_ptr151;
      $mn=$130;
      var $131=$m_addr;
      var $132=$mn;
      var $133=$tbase;
      var $134=$tsize;
      var $add_ptr152=(($133+$134)|0);
      var $135=$mn;
      var $136=$135;
      var $sub_ptr_lhs_cast153=$add_ptr152;
      var $sub_ptr_rhs_cast154=$136;
      var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0);
      var $sub156=((($sub_ptr_sub155)-(40))|0);
      _init_top($131, $132, $sub156);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $137=$m_addr;
      var $seg159=(($137+444)|0);
      $sp=$seg159;
      label = 65; break;
    case 65: 
      var $138=$sp;
      var $cmp160=(($138)|0)!=0;
      if ($cmp160) { label = 66; break; } else { var $144 = 0;label = 67; break; }
    case 66: 
      var $139=$tbase;
      var $140=$sp;
      var $base161=(($140)|0);
      var $141=HEAP32[(($base161)>>2)];
      var $142=$sp;
      var $size162=(($142+4)|0);
      var $143=HEAP32[(($size162)>>2)];
      var $add_ptr163=(($141+$143)|0);
      var $cmp164=(($139)|0)!=(($add_ptr163)|0);
      var $144 = $cmp164;label = 67; break;
    case 67: 
      var $144;
      if ($144) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $145=$sp;
      var $next=(($145+8)|0);
      var $146=HEAP32[(($next)>>2)];
      $sp=$146;
      label = 65; break;
    case 69: 
      var $147=$sp;
      var $cmp165=(($147)|0)!=0;
      if ($cmp165) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $148=$sp;
      var $sflags167=(($148+12)|0);
      var $149=HEAP32[(($sflags167)>>2)];
      var $and168=$149 & 8;
      var $tobool169=(($and168)|0)!=0;
      if ($tobool169) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $150=$sp;
      var $sflags171=(($150+12)|0);
      var $151=HEAP32[(($sflags171)>>2)];
      var $and172=$151 & 0;
      var $152=$mmap_flag;
      var $cmp173=(($and172)|0)==(($152)|0);
      if ($cmp173) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $153=$m_addr;
      var $top175=(($153+24)|0);
      var $154=HEAP32[(($top175)>>2)];
      var $155=$154;
      var $156=$sp;
      var $base176=(($156)|0);
      var $157=HEAP32[(($base176)>>2)];
      var $cmp177=(($155)>>>0) >= (($157)>>>0);
      if ($cmp177) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $158=$m_addr;
      var $top179=(($158+24)|0);
      var $159=HEAP32[(($top179)>>2)];
      var $160=$159;
      var $161=$sp;
      var $base180=(($161)|0);
      var $162=HEAP32[(($base180)>>2)];
      var $163=$sp;
      var $size181=(($163+4)|0);
      var $164=HEAP32[(($size181)>>2)];
      var $add_ptr182=(($162+$164)|0);
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0);
      if ($cmp183) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $165=$tsize;
      var $166=$sp;
      var $size185=(($166+4)|0);
      var $167=HEAP32[(($size185)>>2)];
      var $add186=((($167)+($165))|0);
      HEAP32[(($size185)>>2)]=$add186;
      var $168=$m_addr;
      var $169=$m_addr;
      var $top187=(($169+24)|0);
      var $170=HEAP32[(($top187)>>2)];
      var $171=$m_addr;
      var $topsize188=(($171+12)|0);
      var $172=HEAP32[(($topsize188)>>2)];
      var $173=$tsize;
      var $add189=((($172)+($173))|0);
      _init_top($168, $170, $add189);
      label = 88; break;
    case 75: 
      var $174=$tbase;
      var $175=$m_addr;
      var $least_addr191=(($175+16)|0);
      var $176=HEAP32[(($least_addr191)>>2)];
      var $cmp192=(($174)>>>0) < (($176)>>>0);
      if ($cmp192) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $177=$tbase;
      var $178=$m_addr;
      var $least_addr194=(($178+16)|0);
      HEAP32[(($least_addr194)>>2)]=$177;
      label = 77; break;
    case 77: 
      var $179=$m_addr;
      var $seg196=(($179+444)|0);
      $sp=$seg196;
      label = 78; break;
    case 78: 
      var $180=$sp;
      var $cmp198=(($180)|0)!=0;
      if ($cmp198) { label = 79; break; } else { var $185 = 0;label = 80; break; }
    case 79: 
      var $181=$sp;
      var $base200=(($181)|0);
      var $182=HEAP32[(($base200)>>2)];
      var $183=$tbase;
      var $184=$tsize;
      var $add_ptr201=(($183+$184)|0);
      var $cmp202=(($182)|0)!=(($add_ptr201)|0);
      var $185 = $cmp202;label = 80; break;
    case 80: 
      var $185;
      if ($185) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $186=$sp;
      var $next205=(($186+8)|0);
      var $187=HEAP32[(($next205)>>2)];
      $sp=$187;
      label = 78; break;
    case 82: 
      var $188=$sp;
      var $cmp207=(($188)|0)!=0;
      if ($cmp207) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $189=$sp;
      var $sflags209=(($189+12)|0);
      var $190=HEAP32[(($sflags209)>>2)];
      var $and210=$190 & 8;
      var $tobool211=(($and210)|0)!=0;
      if ($tobool211) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $191=$sp;
      var $sflags213=(($191+12)|0);
      var $192=HEAP32[(($sflags213)>>2)];
      var $and214=$192 & 0;
      var $193=$mmap_flag;
      var $cmp215=(($and214)|0)==(($193)|0);
      if ($cmp215) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $194=$sp;
      var $base217=(($194)|0);
      var $195=HEAP32[(($base217)>>2)];
      $oldbase=$195;
      var $196=$tbase;
      var $197=$sp;
      var $base218=(($197)|0);
      HEAP32[(($base218)>>2)]=$196;
      var $198=$tsize;
      var $199=$sp;
      var $size219=(($199+4)|0);
      var $200=HEAP32[(($size219)>>2)];
      var $add220=((($200)+($198))|0);
      HEAP32[(($size219)>>2)]=$add220;
      var $201=$m_addr;
      var $202=$tbase;
      var $203=$oldbase;
      var $204=$nb_addr;
      var $call221=_prepend_alloc($201, $202, $203, $204);
      $retval=$call221;
      label = 93; break;
    case 86: 
      var $205=$m_addr;
      var $206=$tbase;
      var $207=$tsize;
      var $208=$mmap_flag;
      _add_segment($205, $206, $207, $208);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $209=$nb_addr;
      var $210=$m_addr;
      var $topsize226=(($210+12)|0);
      var $211=HEAP32[(($topsize226)>>2)];
      var $cmp227=(($209)>>>0) < (($211)>>>0);
      if ($cmp227) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $212=$nb_addr;
      var $213=$m_addr;
      var $topsize229=(($213+12)|0);
      var $214=HEAP32[(($topsize229)>>2)];
      var $sub230=((($214)-($212))|0);
      HEAP32[(($topsize229)>>2)]=$sub230;
      $rsize=$sub230;
      var $215=$m_addr;
      var $top231=(($215+24)|0);
      var $216=HEAP32[(($top231)>>2)];
      $p=$216;
      var $217=$p;
      var $218=$217;
      var $219=$nb_addr;
      var $add_ptr232=(($218+$219)|0);
      var $220=$add_ptr232;
      var $221=$m_addr;
      var $top233=(($221+24)|0);
      HEAP32[(($top233)>>2)]=$220;
      $r=$220;
      var $222=$rsize;
      var $or234=$222 | 1;
      var $223=$r;
      var $head235=(($223+4)|0);
      HEAP32[(($head235)>>2)]=$or234;
      var $224=$nb_addr;
      var $or236=$224 | 1;
      var $or237=$or236 | 2;
      var $225=$p;
      var $head238=(($225+4)|0);
      HEAP32[(($head238)>>2)]=$or237;
      var $226=$p;
      var $227=$226;
      var $add_ptr239=(($227+8)|0);
      $retval=$add_ptr239;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $call242=___errno_location();
      HEAP32[(($call242)>>2)]=12;
      $retval=0;
      label = 93; break;
    case 93: 
      var $228=$retval;

      return $228;
    default: assert(0, "bad label: " + label);
  }

}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((5304536)|0))>>2)];
      var $cmp1=(($4)>>>0) >= (($5)>>>0);
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|0)!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|0)==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 196; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((5304536)|0))>>2)];
      var $cmp18=(($31)>>>0) >= (($32)>>>0);
      var $conv=(($cmp18)&1);
      var $expval19=($conv);
      var $tobool20=(($expval19)|0)!=0;
      if ($tobool20) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((5304540)|0))>>2)];
      var $cmp22=(($33)|0)!=(($34)|0);
      if ($cmp22) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>0) < 32;
      if ($cmp25) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$B;
      var $cmp29=(($41)|0)==(($42)|0);
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$I;
      var $shl=1 << $43;
      var $neg=$shl ^ -1;
      var $44=HEAP32[((((5304520)|0))>>2)];
      var $and32=$44 & $neg;
      HEAP32[((((5304520)|0))>>2)]=$and32;
      label = 23; break;
    case 14: 
      var $45=$F;
      var $46=$I;
      var $shl34=$46 << 1;
      var $arrayidx=((((5304560)|0)+($shl34<<2))|0);
      var $47=$arrayidx;
      var $48=$47;
      var $cmp35=(($45)|0)==(($48)|0);
      if ($cmp35) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $49=$F;
      var $50=$49;
      var $51=HEAP32[((((5304536)|0))>>2)];
      var $cmp37=(($50)>>>0) >= (($51)>>>0);
      if ($cmp37) { label = 16; break; } else { var $60 = 0;label = 19; break; }
    case 16: 
      var $52=$B;
      var $53=$I;
      var $shl40=$53 << 1;
      var $arrayidx41=((((5304560)|0)+($shl40<<2))|0);
      var $54=$arrayidx41;
      var $55=$54;
      var $cmp42=(($52)|0)==(($55)|0);
      if ($cmp42) { var $59 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $56=$B;
      var $57=$56;
      var $58=HEAP32[((((5304536)|0))>>2)];
      var $cmp44=(($57)>>>0) >= (($58)>>>0);
      var $59 = $cmp44;label = 18; break;
    case 18: 
      var $59;
      var $60 = $59;label = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=($land_ext47);
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $61=$B;
      var $62=$F;
      var $bk51=(($62+12)|0);
      HEAP32[(($bk51)>>2)]=$61;
      var $63=$F;
      var $64=$B;
      var $fd52=(($64+8)|0);
      HEAP32[(($fd52)>>2)]=$63;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $65=$p;
      var $66=$65;
      $TP=$66;
      var $67=$TP;
      var $parent=(($67+24)|0);
      var $68=HEAP32[(($parent)>>2)];
      $XP=$68;
      var $69=$TP;
      var $bk56=(($69+12)|0);
      var $70=HEAP32[(($bk56)>>2)];
      var $71=$TP;
      var $cmp57=(($70)|0)!=(($71)|0);
      if ($cmp57) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $72=$TP;
      var $fd61=(($72+8)|0);
      var $73=HEAP32[(($fd61)>>2)];
      $F60=$73;
      var $74=$TP;
      var $bk62=(($74+12)|0);
      var $75=HEAP32[(($bk62)>>2)];
      $R=$75;
      var $76=$F60;
      var $77=$76;
      var $78=HEAP32[((((5304536)|0))>>2)];
      var $cmp63=(($77)>>>0) >= (($78)>>>0);
      var $conv64=(($cmp63)&1);
      var $expval65=($conv64);
      var $tobool66=(($expval65)|0)!=0;
      if ($tobool66) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $79=$R;
      var $80=$F60;
      var $bk68=(($80+12)|0);
      HEAP32[(($bk68)>>2)]=$79;
      var $81=$F60;
      var $82=$R;
      var $fd69=(($82+8)|0);
      HEAP32[(($fd69)>>2)]=$81;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $83=$TP;
      var $child=(($83+16)|0);
      var $arrayidx73=(($child+4)|0);
      $RP=$arrayidx73;
      var $84=HEAP32[(($arrayidx73)>>2)];
      $R=$84;
      var $cmp74=(($84)|0)!=0;
      if ($cmp74) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $85=$TP;
      var $child77=(($85+16)|0);
      var $arrayidx78=(($child77)|0);
      $RP=$arrayidx78;
      var $86=HEAP32[(($arrayidx78)>>2)];
      $R=$86;
      var $cmp79=(($86)|0)!=0;
      if ($cmp79) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $87=$R;
      var $child82=(($87+16)|0);
      var $arrayidx83=(($child82+4)|0);
      $CP=$arrayidx83;
      var $88=HEAP32[(($arrayidx83)>>2)];
      var $cmp84=(($88)|0)!=0;
      if ($cmp84) { var $91 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $89=$R;
      var $child87=(($89+16)|0);
      var $arrayidx88=(($child87)|0);
      $CP=$arrayidx88;
      var $90=HEAP32[(($arrayidx88)>>2)];
      var $cmp89=(($90)|0)!=0;
      var $91 = $cmp89;label = 34; break;
    case 34: 
      var $91;
      if ($91) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $92=$CP;
      $RP=$92;
      var $93=HEAP32[(($92)>>2)];
      $R=$93;
      label = 32; break;
    case 36: 
      var $94=$RP;
      var $95=$94;
      var $96=HEAP32[((((5304536)|0))>>2)];
      var $cmp92=(($95)>>>0) >= (($96)>>>0);
      var $conv93=(($cmp92)&1);
      var $expval94=($conv93);
      var $tobool95=(($expval94)|0)!=0;
      if ($tobool95) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $98=$XP;
      var $cmp101=(($98)|0)!=0;
      if ($cmp101) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $99=$TP;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $arrayidx104=((((5304824)|0)+($100<<2))|0);
      $H=$arrayidx104;
      var $101=$TP;
      var $102=$H;
      var $103=HEAP32[(($102)>>2)];
      var $cmp105=(($101)|0)==(($103)|0);
      if ($cmp105) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $104=$R;
      var $105=$H;
      HEAP32[(($105)>>2)]=$104;
      var $cmp108=(($104)|0)==0;
      if ($cmp108) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $106=$TP;
      var $index111=(($106+28)|0);
      var $107=HEAP32[(($index111)>>2)];
      var $shl112=1 << $107;
      var $neg113=$shl112 ^ -1;
      var $108=HEAP32[((((5304524)|0))>>2)];
      var $and114=$108 & $neg113;
      HEAP32[((((5304524)|0))>>2)]=$and114;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $109=$XP;
      var $110=$109;
      var $111=HEAP32[((((5304536)|0))>>2)];
      var $cmp117=(($110)>>>0) >= (($111)>>>0);
      var $conv118=(($cmp117)&1);
      var $expval119=($conv118);
      var $tobool120=(($expval119)|0)!=0;
      if ($tobool120) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $112=$XP;
      var $child122=(($112+16)|0);
      var $arrayidx123=(($child122)|0);
      var $113=HEAP32[(($arrayidx123)>>2)];
      var $114=$TP;
      var $cmp124=(($113)|0)==(($114)|0);
      if ($cmp124) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $115=$R;
      var $116=$XP;
      var $child127=(($116+16)|0);
      var $arrayidx128=(($child127)|0);
      HEAP32[(($arrayidx128)>>2)]=$115;
      label = 50; break;
    case 49: 
      var $117=$R;
      var $118=$XP;
      var $child130=(($118+16)|0);
      var $arrayidx131=(($child130+4)|0);
      HEAP32[(($arrayidx131)>>2)]=$117;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $119=$R;
      var $cmp136=(($119)|0)!=0;
      if ($cmp136) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $120=$R;
      var $121=$120;
      var $122=HEAP32[((((5304536)|0))>>2)];
      var $cmp139=(($121)>>>0) >= (($122)>>>0);
      var $conv140=(($cmp139)&1);
      var $expval141=($conv140);
      var $tobool142=(($expval141)|0)!=0;
      if ($tobool142) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $123=$XP;
      var $124=$R;
      var $parent144=(($124+24)|0);
      HEAP32[(($parent144)>>2)]=$123;
      var $125=$TP;
      var $child145=(($125+16)|0);
      var $arrayidx146=(($child145)|0);
      var $126=HEAP32[(($arrayidx146)>>2)];
      $C0=$126;
      var $cmp147=(($126)|0)!=0;
      if ($cmp147) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$C0;
      var $128=$127;
      var $129=HEAP32[((((5304536)|0))>>2)];
      var $cmp150=(($128)>>>0) >= (($129)>>>0);
      var $conv151=(($cmp150)&1);
      var $expval152=($conv151);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$C0;
      var $131=$R;
      var $child155=(($131+16)|0);
      var $arrayidx156=(($child155)|0);
      HEAP32[(($arrayidx156)>>2)]=$130;
      var $132=$R;
      var $133=$C0;
      var $parent157=(($133+24)|0);
      HEAP32[(($parent157)>>2)]=$132;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $134=$TP;
      var $child161=(($134+16)|0);
      var $arrayidx162=(($child161+4)|0);
      var $135=HEAP32[(($arrayidx162)>>2)];
      $C1=$135;
      var $cmp163=(($135)|0)!=0;
      if ($cmp163) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $136=$C1;
      var $137=$136;
      var $138=HEAP32[((((5304536)|0))>>2)];
      var $cmp166=(($137)>>>0) >= (($138)>>>0);
      var $conv167=(($cmp166)&1);
      var $expval168=($conv167);
      var $tobool169=(($expval168)|0)!=0;
      if ($tobool169) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $139=$C1;
      var $140=$R;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171+4)|0);
      HEAP32[(($arrayidx172)>>2)]=$139;
      var $141=$R;
      var $142=$C1;
      var $parent173=(($142+24)|0);
      HEAP32[(($parent173)>>2)]=$141;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $143=$next;
      var $head183=(($143+4)|0);
      var $144=HEAP32[(($head183)>>2)];
      var $and184=$144 & 3;
      var $cmp185=(($and184)|0)==3;
      if ($cmp185) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $145=$psize;
      HEAP32[((((5304528)|0))>>2)]=$145;
      var $146=$next;
      var $head188=(($146+4)|0);
      var $147=HEAP32[(($head188)>>2)];
      var $and189=$147 & -2;
      HEAP32[(($head188)>>2)]=$and189;
      var $148=$psize;
      var $or=$148 | 1;
      var $149=$p;
      var $head190=(($149+4)|0);
      HEAP32[(($head190)>>2)]=$or;
      var $150=$psize;
      var $151=$p;
      var $152=$151;
      var $153=$psize;
      var $add_ptr191=(($152+$153)|0);
      var $154=$add_ptr191;
      var $prev_foot192=(($154)|0);
      HEAP32[(($prev_foot192)>>2)]=$150;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $155=$p;
      var $156=$155;
      var $157=$next;
      var $158=$157;
      var $cmp199=(($156)>>>0) < (($158)>>>0);
      if ($cmp199) { label = 79; break; } else { var $161 = 0;label = 80; break; }
    case 79: 
      var $159=$next;
      var $head202=(($159+4)|0);
      var $160=HEAP32[(($head202)>>2)];
      var $and203=$160 & 1;
      var $tobool204=(($and203)|0)!=0;
      var $161 = $tobool204;label = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=($land_ext206);
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $162=$next;
      var $head210=(($162+4)|0);
      var $163=HEAP32[(($head210)>>2)];
      var $and211=$163 & 2;
      var $tobool212=(($and211)|0)!=0;
      if ($tobool212) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $164=$next;
      var $165=HEAP32[((((5304544)|0))>>2)];
      var $cmp214=(($164)|0)==(($165)|0);
      if ($cmp214) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $166=$psize;
      var $167=HEAP32[((((5304532)|0))>>2)];
      var $add217=((($167)+($166))|0);
      HEAP32[((((5304532)|0))>>2)]=$add217;
      $tsize=$add217;
      var $168=$p;
      HEAP32[((((5304544)|0))>>2)]=$168;
      var $169=$tsize;
      var $or218=$169 | 1;
      var $170=$p;
      var $head219=(($170+4)|0);
      HEAP32[(($head219)>>2)]=$or218;
      var $171=$p;
      var $172=HEAP32[((((5304540)|0))>>2)];
      var $cmp220=(($171)|0)==(($172)|0);
      if ($cmp220) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5304540)|0))>>2)]=0;
      HEAP32[((((5304528)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $173=$tsize;
      var $174=HEAP32[((((5304548)|0))>>2)];
      var $cmp224=(($173)>>>0) > (($174)>>>0);
      if ($cmp224) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $call=_sys_trim(5304520, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $175=$next;
      var $176=HEAP32[((((5304540)|0))>>2)];
      var $cmp229=(($175)|0)==(($176)|0);
      if ($cmp229) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $177=$psize;
      var $178=HEAP32[((((5304528)|0))>>2)];
      var $add232=((($178)+($177))|0);
      HEAP32[((((5304528)|0))>>2)]=$add232;
      $dsize=$add232;
      var $179=$p;
      HEAP32[((((5304540)|0))>>2)]=$179;
      var $180=$dsize;
      var $or233=$180 | 1;
      var $181=$p;
      var $head234=(($181+4)|0);
      HEAP32[(($head234)>>2)]=$or233;
      var $182=$dsize;
      var $183=$p;
      var $184=$183;
      var $185=$dsize;
      var $add_ptr235=(($184+$185)|0);
      var $186=$add_ptr235;
      var $prev_foot236=(($186)|0);
      HEAP32[(($prev_foot236)>>2)]=$182;
      label = 196; break;
    case 90: 
      var $187=$next;
      var $head238=(($187+4)|0);
      var $188=HEAP32[(($head238)>>2)];
      var $and239=$188 & -8;
      $nsize=$and239;
      var $189=$nsize;
      var $190=$psize;
      var $add240=((($190)+($189))|0);
      $psize=$add240;
      var $191=$nsize;
      var $shr241=$191 >>> 3;
      var $cmp242=(($shr241)>>>0) < 32;
      if ($cmp242) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $192=$next;
      var $fd246=(($192+8)|0);
      var $193=HEAP32[(($fd246)>>2)];
      $F245=$193;
      var $194=$next;
      var $bk248=(($194+12)|0);
      var $195=HEAP32[(($bk248)>>2)];
      $B247=$195;
      var $196=$nsize;
      var $shr250=$196 >>> 3;
      $I249=$shr250;
      var $197=$F245;
      var $198=$B247;
      var $cmp251=(($197)|0)==(($198)|0);
      if ($cmp251) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $199=$I249;
      var $shl254=1 << $199;
      var $neg255=$shl254 ^ -1;
      var $200=HEAP32[((((5304520)|0))>>2)];
      var $and256=$200 & $neg255;
      HEAP32[((((5304520)|0))>>2)]=$and256;
      label = 102; break;
    case 93: 
      var $201=$F245;
      var $202=$I249;
      var $shl258=$202 << 1;
      var $arrayidx259=((((5304560)|0)+($shl258<<2))|0);
      var $203=$arrayidx259;
      var $204=$203;
      var $cmp260=(($201)|0)==(($204)|0);
      if ($cmp260) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $205=$F245;
      var $206=$205;
      var $207=HEAP32[((((5304536)|0))>>2)];
      var $cmp263=(($206)>>>0) >= (($207)>>>0);
      if ($cmp263) { label = 95; break; } else { var $216 = 0;label = 98; break; }
    case 95: 
      var $208=$B247;
      var $209=$I249;
      var $shl266=$209 << 1;
      var $arrayidx267=((((5304560)|0)+($shl266<<2))|0);
      var $210=$arrayidx267;
      var $211=$210;
      var $cmp268=(($208)|0)==(($211)|0);
      if ($cmp268) { var $215 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $212=$B247;
      var $213=$212;
      var $214=HEAP32[((((5304536)|0))>>2)];
      var $cmp271=(($213)>>>0) >= (($214)>>>0);
      var $215 = $cmp271;label = 97; break;
    case 97: 
      var $215;
      var $216 = $215;label = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=($land_ext275);
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $217=$B247;
      var $218=$F245;
      var $bk279=(($218+12)|0);
      HEAP32[(($bk279)>>2)]=$217;
      var $219=$F245;
      var $220=$B247;
      var $fd280=(($220+8)|0);
      HEAP32[(($fd280)>>2)]=$219;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $221=$next;
      var $222=$221;
      $TP285=$222;
      var $223=$TP285;
      var $parent287=(($223+24)|0);
      var $224=HEAP32[(($parent287)>>2)];
      $XP286=$224;
      var $225=$TP285;
      var $bk289=(($225+12)|0);
      var $226=HEAP32[(($bk289)>>2)];
      var $227=$TP285;
      var $cmp290=(($226)|0)!=(($227)|0);
      if ($cmp290) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $228=$TP285;
      var $fd294=(($228+8)|0);
      var $229=HEAP32[(($fd294)>>2)];
      $F293=$229;
      var $230=$TP285;
      var $bk295=(($230+12)|0);
      var $231=HEAP32[(($bk295)>>2)];
      $R288=$231;
      var $232=$F293;
      var $233=$232;
      var $234=HEAP32[((((5304536)|0))>>2)];
      var $cmp296=(($233)>>>0) >= (($234)>>>0);
      var $conv297=(($cmp296)&1);
      var $expval298=($conv297);
      var $tobool299=(($expval298)|0)!=0;
      if ($tobool299) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $235=$R288;
      var $236=$F293;
      var $bk301=(($236+12)|0);
      HEAP32[(($bk301)>>2)]=$235;
      var $237=$F293;
      var $238=$R288;
      var $fd302=(($238+8)|0);
      HEAP32[(($fd302)>>2)]=$237;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $239=$TP285;
      var $child307=(($239+16)|0);
      var $arrayidx308=(($child307+4)|0);
      $RP306=$arrayidx308;
      var $240=HEAP32[(($arrayidx308)>>2)];
      $R288=$240;
      var $cmp309=(($240)|0)!=0;
      if ($cmp309) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $241=$TP285;
      var $child312=(($241+16)|0);
      var $arrayidx313=(($child312)|0);
      $RP306=$arrayidx313;
      var $242=HEAP32[(($arrayidx313)>>2)];
      $R288=$242;
      var $cmp314=(($242)|0)!=0;
      if ($cmp314) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $243=$R288;
      var $child319=(($243+16)|0);
      var $arrayidx320=(($child319+4)|0);
      $CP317=$arrayidx320;
      var $244=HEAP32[(($arrayidx320)>>2)];
      var $cmp321=(($244)|0)!=0;
      if ($cmp321) { var $247 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $245=$R288;
      var $child324=(($245+16)|0);
      var $arrayidx325=(($child324)|0);
      $CP317=$arrayidx325;
      var $246=HEAP32[(($arrayidx325)>>2)];
      var $cmp326=(($246)|0)!=0;
      var $247 = $cmp326;label = 113; break;
    case 113: 
      var $247;
      if ($247) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $248=$CP317;
      $RP306=$248;
      var $249=HEAP32[(($248)>>2)];
      $R288=$249;
      label = 111; break;
    case 115: 
      var $250=$RP306;
      var $251=$250;
      var $252=HEAP32[((((5304536)|0))>>2)];
      var $cmp331=(($251)>>>0) >= (($252)>>>0);
      var $conv332=(($cmp331)&1);
      var $expval333=($conv332);
      var $tobool334=(($expval333)|0)!=0;
      if ($tobool334) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $253=$RP306;
      HEAP32[(($253)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $254=$XP286;
      var $cmp340=(($254)|0)!=0;
      if ($cmp340) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $255=$TP285;
      var $index344=(($255+28)|0);
      var $256=HEAP32[(($index344)>>2)];
      var $arrayidx345=((((5304824)|0)+($256<<2))|0);
      $H343=$arrayidx345;
      var $257=$TP285;
      var $258=$H343;
      var $259=HEAP32[(($258)>>2)];
      var $cmp346=(($257)|0)==(($259)|0);
      if ($cmp346) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $260=$R288;
      var $261=$H343;
      HEAP32[(($261)>>2)]=$260;
      var $cmp349=(($260)|0)==0;
      if ($cmp349) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $262=$TP285;
      var $index352=(($262+28)|0);
      var $263=HEAP32[(($index352)>>2)];
      var $shl353=1 << $263;
      var $neg354=$shl353 ^ -1;
      var $264=HEAP32[((((5304524)|0))>>2)];
      var $and355=$264 & $neg354;
      HEAP32[((((5304524)|0))>>2)]=$and355;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $265=$XP286;
      var $266=$265;
      var $267=HEAP32[((((5304536)|0))>>2)];
      var $cmp358=(($266)>>>0) >= (($267)>>>0);
      var $conv359=(($cmp358)&1);
      var $expval360=($conv359);
      var $tobool361=(($expval360)|0)!=0;
      if ($tobool361) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $268=$XP286;
      var $child363=(($268+16)|0);
      var $arrayidx364=(($child363)|0);
      var $269=HEAP32[(($arrayidx364)>>2)];
      var $270=$TP285;
      var $cmp365=(($269)|0)==(($270)|0);
      if ($cmp365) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $271=$R288;
      var $272=$XP286;
      var $child368=(($272+16)|0);
      var $arrayidx369=(($child368)|0);
      HEAP32[(($arrayidx369)>>2)]=$271;
      label = 129; break;
    case 128: 
      var $273=$R288;
      var $274=$XP286;
      var $child371=(($274+16)|0);
      var $arrayidx372=(($child371+4)|0);
      HEAP32[(($arrayidx372)>>2)]=$273;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $275=$R288;
      var $cmp377=(($275)|0)!=0;
      if ($cmp377) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $276=$R288;
      var $277=$276;
      var $278=HEAP32[((((5304536)|0))>>2)];
      var $cmp380=(($277)>>>0) >= (($278)>>>0);
      var $conv381=(($cmp380)&1);
      var $expval382=($conv381);
      var $tobool383=(($expval382)|0)!=0;
      if ($tobool383) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $279=$XP286;
      var $280=$R288;
      var $parent387=(($280+24)|0);
      HEAP32[(($parent387)>>2)]=$279;
      var $281=$TP285;
      var $child388=(($281+16)|0);
      var $arrayidx389=(($child388)|0);
      var $282=HEAP32[(($arrayidx389)>>2)];
      $C0385=$282;
      var $cmp390=(($282)|0)!=0;
      if ($cmp390) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $283=$C0385;
      var $284=$283;
      var $285=HEAP32[((((5304536)|0))>>2)];
      var $cmp393=(($284)>>>0) >= (($285)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $286=$C0385;
      var $287=$R288;
      var $child398=(($287+16)|0);
      var $arrayidx399=(($child398)|0);
      HEAP32[(($arrayidx399)>>2)]=$286;
      var $288=$R288;
      var $289=$C0385;
      var $parent400=(($289+24)|0);
      HEAP32[(($parent400)>>2)]=$288;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $290=$TP285;
      var $child404=(($290+16)|0);
      var $arrayidx405=(($child404+4)|0);
      var $291=HEAP32[(($arrayidx405)>>2)];
      $C1386=$291;
      var $cmp406=(($291)|0)!=0;
      if ($cmp406) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $292=$C1386;
      var $293=$292;
      var $294=HEAP32[((((5304536)|0))>>2)];
      var $cmp409=(($293)>>>0) >= (($294)>>>0);
      var $conv410=(($cmp409)&1);
      var $expval411=($conv410);
      var $tobool412=(($expval411)|0)!=0;
      if ($tobool412) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $295=$C1386;
      var $296=$R288;
      var $child414=(($296+16)|0);
      var $arrayidx415=(($child414+4)|0);
      HEAP32[(($arrayidx415)>>2)]=$295;
      var $297=$R288;
      var $298=$C1386;
      var $parent416=(($298+24)|0);
      HEAP32[(($parent416)>>2)]=$297;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $299=$psize;
      var $or425=$299 | 1;
      var $300=$p;
      var $head426=(($300+4)|0);
      HEAP32[(($head426)>>2)]=$or425;
      var $301=$psize;
      var $302=$p;
      var $303=$302;
      var $304=$psize;
      var $add_ptr427=(($303+$304)|0);
      var $305=$add_ptr427;
      var $prev_foot428=(($305)|0);
      HEAP32[(($prev_foot428)>>2)]=$301;
      var $306=$p;
      var $307=HEAP32[((((5304540)|0))>>2)];
      var $cmp429=(($306)|0)==(($307)|0);
      if ($cmp429) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $308=$psize;
      HEAP32[((((5304528)|0))>>2)]=$308;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $309=$next;
      var $head436=(($309+4)|0);
      var $310=HEAP32[(($head436)>>2)];
      var $and437=$310 & -2;
      HEAP32[(($head436)>>2)]=$and437;
      var $311=$psize;
      var $or438=$311 | 1;
      var $312=$p;
      var $head439=(($312+4)|0);
      HEAP32[(($head439)>>2)]=$or438;
      var $313=$psize;
      var $314=$p;
      var $315=$314;
      var $316=$psize;
      var $add_ptr440=(($315+$316)|0);
      var $317=$add_ptr440;
      var $prev_foot441=(($317)|0);
      HEAP32[(($prev_foot441)>>2)]=$313;
      label = 155; break;
    case 155: 
      var $318=$psize;
      var $shr443=$318 >>> 3;
      var $cmp444=(($shr443)>>>0) < 32;
      if ($cmp444) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $319=$psize;
      var $shr448=$319 >>> 3;
      $I447=$shr448;
      var $320=$I447;
      var $shl450=$320 << 1;
      var $arrayidx451=((((5304560)|0)+($shl450<<2))|0);
      var $321=$arrayidx451;
      var $322=$321;
      $B449=$322;
      var $323=$B449;
      $F452=$323;
      var $324=HEAP32[((((5304520)|0))>>2)];
      var $325=$I447;
      var $shl453=1 << $325;
      var $and454=$324 & $shl453;
      var $tobool455=(($and454)|0)!=0;
      if ($tobool455) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $326=$I447;
      var $shl457=1 << $326;
      var $327=HEAP32[((((5304520)|0))>>2)];
      var $or458=$327 | $shl457;
      HEAP32[((((5304520)|0))>>2)]=$or458;
      label = 162; break;
    case 158: 
      var $328=$B449;
      var $fd460=(($328+8)|0);
      var $329=HEAP32[(($fd460)>>2)];
      var $330=$329;
      var $331=HEAP32[((((5304536)|0))>>2)];
      var $cmp461=(($330)>>>0) >= (($331)>>>0);
      var $conv462=(($cmp461)&1);
      var $expval463=($conv462);
      var $tobool464=(($expval463)|0)!=0;
      if ($tobool464) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $332=$B449;
      var $fd466=(($332+8)|0);
      var $333=HEAP32[(($fd466)>>2)];
      $F452=$333;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $334=$p;
      var $335=$B449;
      var $fd470=(($335+8)|0);
      HEAP32[(($fd470)>>2)]=$334;
      var $336=$p;
      var $337=$F452;
      var $bk471=(($337+12)|0);
      HEAP32[(($bk471)>>2)]=$336;
      var $338=$F452;
      var $339=$p;
      var $fd472=(($339+8)|0);
      HEAP32[(($fd472)>>2)]=$338;
      var $340=$B449;
      var $341=$p;
      var $bk473=(($341+12)|0);
      HEAP32[(($bk473)>>2)]=$340;
      label = 192; break;
    case 163: 
      var $342=$p;
      var $343=$342;
      $tp=$343;
      var $344=$psize;
      var $shr477=$344 >>> 8;
      $X=$shr477;
      var $345=$X;
      var $cmp478=(($345)|0)==0;
      if ($cmp478) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I476=0;
      label = 169; break;
    case 165: 
      var $346=$X;
      var $cmp482=(($346)>>>0) > 65535;
      if ($cmp482) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I476=31;
      label = 168; break;
    case 167: 
      var $347=$X;
      $Y=$347;
      var $348=$Y;
      var $sub=((($348)-(256))|0);
      var $shr486=$sub >>> 16;
      var $and487=$shr486 & 8;
      $N=$and487;
      var $349=$N;
      var $350=$Y;
      var $shl488=$350 << $349;
      $Y=$shl488;
      var $sub489=((($shl488)-(4096))|0);
      var $shr490=$sub489 >>> 16;
      var $and491=$shr490 & 4;
      $K=$and491;
      var $351=$K;
      var $352=$N;
      var $add492=((($352)+($351))|0);
      $N=$add492;
      var $353=$K;
      var $354=$Y;
      var $shl493=$354 << $353;
      $Y=$shl493;
      var $sub494=((($shl493)-(16384))|0);
      var $shr495=$sub494 >>> 16;
      var $and496=$shr495 & 2;
      $K=$and496;
      var $355=$N;
      var $add497=((($355)+($and496))|0);
      $N=$add497;
      var $356=$N;
      var $sub498=(((14)-($356))|0);
      var $357=$K;
      var $358=$Y;
      var $shl499=$358 << $357;
      $Y=$shl499;
      var $shr500=$shl499 >>> 15;
      var $add501=((($sub498)+($shr500))|0);
      $K=$add501;
      var $359=$K;
      var $shl502=$359 << 1;
      var $360=$psize;
      var $361=$K;
      var $add503=((($361)+(7))|0);
      var $shr504=$360 >>> (($add503)>>>0);
      var $and505=$shr504 & 1;
      var $add506=((($shl502)+($and505))|0);
      $I476=$add506;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $362=$I476;
      var $arrayidx509=((((5304824)|0)+($362<<2))|0);
      $H475=$arrayidx509;
      var $363=$I476;
      var $364=$tp;
      var $index510=(($364+28)|0);
      HEAP32[(($index510)>>2)]=$363;
      var $365=$tp;
      var $child511=(($365+16)|0);
      var $arrayidx512=(($child511+4)|0);
      HEAP32[(($arrayidx512)>>2)]=0;
      var $366=$tp;
      var $child513=(($366+16)|0);
      var $arrayidx514=(($child513)|0);
      HEAP32[(($arrayidx514)>>2)]=0;
      var $367=HEAP32[((((5304524)|0))>>2)];
      var $368=$I476;
      var $shl515=1 << $368;
      var $and516=$367 & $shl515;
      var $tobool517=(($and516)|0)!=0;
      if ($tobool517) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $369=$I476;
      var $shl519=1 << $369;
      var $370=HEAP32[((((5304524)|0))>>2)];
      var $or520=$370 | $shl519;
      HEAP32[((((5304524)|0))>>2)]=$or520;
      var $371=$tp;
      var $372=$H475;
      HEAP32[(($372)>>2)]=$371;
      var $373=$H475;
      var $374=$373;
      var $375=$tp;
      var $parent521=(($375+24)|0);
      HEAP32[(($parent521)>>2)]=$374;
      var $376=$tp;
      var $377=$tp;
      var $bk522=(($377+12)|0);
      HEAP32[(($bk522)>>2)]=$376;
      var $378=$tp;
      var $fd523=(($378+8)|0);
      HEAP32[(($fd523)>>2)]=$376;
      label = 189; break;
    case 171: 
      var $379=$H475;
      var $380=HEAP32[(($379)>>2)];
      $T=$380;
      var $381=$psize;
      var $382=$I476;
      var $cmp526=(($382)|0)==31;
      if ($cmp526) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $cond = 0;label = 174; break;
    case 173: 
      var $383=$I476;
      var $shr528=$383 >>> 1;
      var $add529=((($shr528)+(8))|0);
      var $sub530=((($add529)-(2))|0);
      var $sub531=(((31)-($sub530))|0);
      var $cond = $sub531;label = 174; break;
    case 174: 
      var $cond;
      var $shl532=$381 << $cond;
      $K525=$shl532;
      label = 175; break;
    case 175: 
      var $384=$T;
      var $head533=(($384+4)|0);
      var $385=HEAP32[(($head533)>>2)];
      var $and534=$385 & -8;
      var $386=$psize;
      var $cmp535=(($and534)|0)!=(($386)|0);
      if ($cmp535) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $387=$K525;
      var $shr538=$387 >>> 31;
      var $and539=$shr538 & 1;
      var $388=$T;
      var $child540=(($388+16)|0);
      var $arrayidx541=(($child540+($and539<<2))|0);
      $C=$arrayidx541;
      var $389=$K525;
      var $shl542=$389 << 1;
      $K525=$shl542;
      var $390=$C;
      var $391=HEAP32[(($390)>>2)];
      var $cmp543=(($391)|0)!=0;
      if ($cmp543) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $392=$C;
      var $393=HEAP32[(($392)>>2)];
      $T=$393;
      label = 181; break;
    case 178: 
      var $394=$C;
      var $395=$394;
      var $396=HEAP32[((((5304536)|0))>>2)];
      var $cmp547=(($395)>>>0) >= (($396)>>>0);
      var $conv548=(($cmp547)&1);
      var $expval549=($conv548);
      var $tobool550=(($expval549)|0)!=0;
      if ($tobool550) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $397=$tp;
      var $398=$C;
      HEAP32[(($398)>>2)]=$397;
      var $399=$T;
      var $400=$tp;
      var $parent552=(($400+24)|0);
      HEAP32[(($parent552)>>2)]=$399;
      var $401=$tp;
      var $402=$tp;
      var $bk553=(($402+12)|0);
      HEAP32[(($bk553)>>2)]=$401;
      var $403=$tp;
      var $fd554=(($403+8)|0);
      HEAP32[(($fd554)>>2)]=$401;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $404=$T;
      var $fd559=(($404+8)|0);
      var $405=HEAP32[(($fd559)>>2)];
      $F558=$405;
      var $406=$T;
      var $407=$406;
      var $408=HEAP32[((((5304536)|0))>>2)];
      var $cmp560=(($407)>>>0) >= (($408)>>>0);
      if ($cmp560) { label = 183; break; } else { var $412 = 0;label = 184; break; }
    case 183: 
      var $409=$F558;
      var $410=$409;
      var $411=HEAP32[((((5304536)|0))>>2)];
      var $cmp563=(($410)>>>0) >= (($411)>>>0);
      var $412 = $cmp563;label = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=($land_ext566);
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $413=$tp;
      var $414=$F558;
      var $bk570=(($414+12)|0);
      HEAP32[(($bk570)>>2)]=$413;
      var $415=$T;
      var $fd571=(($415+8)|0);
      HEAP32[(($fd571)>>2)]=$413;
      var $416=$F558;
      var $417=$tp;
      var $fd572=(($417+8)|0);
      HEAP32[(($fd572)>>2)]=$416;
      var $418=$T;
      var $419=$tp;
      var $bk573=(($419+12)|0);
      HEAP32[(($bk573)>>2)]=$418;
      var $420=$tp;
      var $parent574=(($420+24)|0);
      HEAP32[(($parent574)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $421=HEAP32[((((5304552)|0))>>2)];
      var $dec=((($421)-(1))|0);
      HEAP32[((((5304552)|0))>>2)]=$dec;
      var $cmp578=(($dec)|0)==0;
      if ($cmp578) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $call581=_release_unused_segments(5304520);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((5249396)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$pad_addr;
      var $cmp1=(($2)>>>0) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>0) > (($8)>>>0);
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((5249404)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0)));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=((($sub8)*($15))&-1);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|0)!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>0) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|0)==(($add_ptr)|0);
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|0)!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>0) < (($34)>>>0);
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|0)!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|0)==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>0) > (($54)>>>0);
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|0)!=0;
      var $cond=$cmp52 ? 1 : 0;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}
_sys_trim["X"]=1;

function _calloc($n_elements, $elem_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_elements_addr;
      var $elem_size_addr;
      var $mem;
      var $req;
      $n_elements_addr=$n_elements;
      $elem_size_addr=$elem_size;
      $req=0;
      var $0=$n_elements_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$n_elements_addr;
      var $2=$elem_size_addr;
      var $mul=((($1)*($2))&-1);
      $req=$mul;
      var $3=$n_elements_addr;
      var $4=$elem_size_addr;
      var $or=$3 | $4;
      var $and=$or & -65536;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$req;
      var $6=$n_elements_addr;
      var $div=Math.floor(((($5)>>>0))/((($6)>>>0)));
      var $7=$elem_size_addr;
      var $cmp1=(($div)|0)!=(($7)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $req=-1;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$req;
      var $call=_malloc($8);
      $mem=$call;
      var $9=$mem;
      var $cmp4=(($9)|0)!=0;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$mem;
      var $add_ptr=((($10)-(8))|0);
      var $11=$add_ptr;
      var $head=(($11+4)|0);
      var $12=HEAP32[(($head)>>2)];
      var $and6=$12 & 3;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $13=$mem;
      var $14=$req;
      _memset($13, 0, $14);
      label = 10; break;
    case 10: 
      var $15=$mem;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}
Module["_calloc"] = _calloc;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $oldmem_addr;
      var $bytes_addr;
      var $m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$oldmem_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$bytes_addr;
      var $call=_malloc($1);
      $retval=$call;
      label = 5; break;
    case 4: 
      $m=5304520;
      var $2=$m;
      var $3=$oldmem_addr;
      var $4=$bytes_addr;
      var $call1=_internal_realloc($2, $3, $4);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}
Module["_realloc"] = _realloc;

function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|0)==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|0)!=1;
      if ($cmp17) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0);
      if ($cmp22) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|0)==(($34)|0);
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 59; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|0)!=(($41)|0);
      if ($cmp27) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp30)&1);
      var $expval=($conv);
      var $tobool31=(($expval)|0)!=0;
      if ($tobool31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $50=$R;
      var $51=$F;
      var $bk33=(($51+12)|0);
      HEAP32[(($bk33)>>2)]=$50;
      var $52=$F;
      var $53=$R;
      var $fd34=(($53+8)|0);
      HEAP32[(($fd34)>>2)]=$52;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $54=$tp;
      var $child=(($54+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $55=HEAP32[(($arrayidx)>>2)];
      $R=$55;
      var $cmp37=(($55)|0)!=0;
      if ($cmp37) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $56=$tp;
      var $child39=(($56+16)|0);
      var $arrayidx40=(($child39)|0);
      $RP=$arrayidx40;
      var $57=HEAP32[(($arrayidx40)>>2)];
      $R=$57;
      var $cmp41=(($57)|0)!=0;
      if ($cmp41) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$R;
      var $child45=(($58+16)|0);
      var $arrayidx46=(($child45+4)|0);
      $CP=$arrayidx46;
      var $59=HEAP32[(($arrayidx46)>>2)];
      var $cmp47=(($59)|0)!=0;
      if ($cmp47) { var $62 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $60=$R;
      var $child49=(($60+16)|0);
      var $arrayidx50=(($child49)|0);
      $CP=$arrayidx50;
      var $61=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($61)|0)!=0;
      var $62 = $cmp51;label = 23; break;
    case 23: 
      var $62;
      if ($62) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $63=$CP;
      $RP=$63;
      var $64=HEAP32[(($63)>>2)];
      $R=$64;
      label = 21; break;
    case 25: 
      var $65=$RP;
      var $66=$65;
      var $67=$m_addr;
      var $least_addr54=(($67+16)|0);
      var $68=HEAP32[(($least_addr54)>>2)];
      var $cmp55=(($66)>>>0) >= (($68)>>>0);
      var $conv56=(($cmp55)&1);
      var $expval57=($conv56);
      var $tobool58=(($expval57)|0)!=0;
      if ($tobool58) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$RP;
      HEAP32[(($69)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $70=$XP;
      var $cmp64=(($70)|0)!=0;
      if ($cmp64) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $71=$tp;
      var $index=(($71+28)|0);
      var $72=HEAP32[(($index)>>2)];
      var $73=$m_addr;
      var $treebins=(($73+304)|0);
      var $arrayidx67=(($treebins+($72<<2))|0);
      $H=$arrayidx67;
      var $74=$tp;
      var $75=$H;
      var $76=HEAP32[(($75)>>2)];
      var $cmp68=(($74)|0)==(($76)|0);
      if ($cmp68) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $77=$R;
      var $78=$H;
      HEAP32[(($78)>>2)]=$77;
      var $cmp71=(($77)|0)==0;
      if ($cmp71) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $79=$tp;
      var $index74=(($79+28)|0);
      var $80=HEAP32[(($index74)>>2)];
      var $shl=1 << $80;
      var $neg=$shl ^ -1;
      var $81=$m_addr;
      var $treemap=(($81+4)|0);
      var $82=HEAP32[(($treemap)>>2)];
      var $and75=$82 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $83=$XP;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr78=(($85+16)|0);
      var $86=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($84)>>>0) >= (($86)>>>0);
      var $conv80=(($cmp79)&1);
      var $expval81=($conv80);
      var $tobool82=(($expval81)|0)!=0;
      if ($tobool82) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $87=$XP;
      var $child84=(($87+16)|0);
      var $arrayidx85=(($child84)|0);
      var $88=HEAP32[(($arrayidx85)>>2)];
      var $89=$tp;
      var $cmp86=(($88)|0)==(($89)|0);
      if ($cmp86) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $90=$R;
      var $91=$XP;
      var $child89=(($91+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$90;
      label = 39; break;
    case 38: 
      var $92=$R;
      var $93=$XP;
      var $child92=(($93+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$92;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $94=$R;
      var $cmp98=(($94)|0)!=0;
      if ($cmp98) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $95=$R;
      var $96=$95;
      var $97=$m_addr;
      var $least_addr101=(($97+16)|0);
      var $98=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($96)>>>0) >= (($98)>>>0);
      var $conv103=(($cmp102)&1);
      var $expval104=($conv103);
      var $tobool105=(($expval104)|0)!=0;
      if ($tobool105) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $99=$XP;
      var $100=$R;
      var $parent107=(($100+24)|0);
      HEAP32[(($parent107)>>2)]=$99;
      var $101=$tp;
      var $child108=(($101+16)|0);
      var $arrayidx109=(($child108)|0);
      var $102=HEAP32[(($arrayidx109)>>2)];
      $C0=$102;
      var $cmp110=(($102)|0)!=0;
      if ($cmp110) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $103=$C0;
      var $104=$103;
      var $105=$m_addr;
      var $least_addr113=(($105+16)|0);
      var $106=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($104)>>>0) >= (($106)>>>0);
      var $conv115=(($cmp114)&1);
      var $expval116=($conv115);
      var $tobool117=(($expval116)|0)!=0;
      if ($tobool117) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $107=$C0;
      var $108=$R;
      var $child119=(($108+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$107;
      var $109=$R;
      var $110=$C0;
      var $parent121=(($110+24)|0);
      HEAP32[(($parent121)>>2)]=$109;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $111=$tp;
      var $child125=(($111+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $112=HEAP32[(($arrayidx126)>>2)];
      $C1=$112;
      var $cmp127=(($112)|0)!=0;
      if ($cmp127) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $113=$C1;
      var $114=$113;
      var $115=$m_addr;
      var $least_addr130=(($115+16)|0);
      var $116=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($114)>>>0) >= (($116)>>>0);
      var $conv132=(($cmp131)&1);
      var $expval133=($conv132);
      var $tobool134=(($expval133)|0)!=0;
      if ($tobool134) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $117=$C1;
      var $118=$R;
      var $child136=(($118+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$117;
      var $119=$R;
      var $120=$C1;
      var $parent138=(($120+24)|0);
      HEAP32[(($parent138)>>2)]=$119;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $121=$psize;
      var $shr=$121 >>> 8;
      $X=$shr;
      var $122=$X;
      var $cmp148=(($122)|0)==0;
      if ($cmp148) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $123=$X;
      var $cmp152=(($123)>>>0) > 65535;
      if ($cmp152) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $124=$X;
      $Y=$124;
      var $125=$Y;
      var $sub156=((($125)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $126=$N;
      var $127=$Y;
      var $shl159=$127 << $126;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $128=$K;
      var $129=$N;
      var $add=((($129)+($128))|0);
      $N=$add;
      var $130=$K;
      var $131=$Y;
      var $shl163=$131 << $130;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $132=$N;
      var $add167=((($132)+($and166))|0);
      $N=$add167;
      var $133=$N;
      var $sub168=(((14)-($133))|0);
      var $134=$K;
      var $135=$Y;
      var $shl169=$135 << $134;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $136=$K;
      var $shl172=$136 << 1;
      var $137=$psize;
      var $138=$K;
      var $add173=((($138)+(7))|0);
      var $shr174=$137 >>> (($add173)>>>0);
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $139=$I;
      var $140=$m_addr;
      var $treebins179=(($140+304)|0);
      var $arrayidx180=(($treebins179+($139<<2))|0);
      $H147=$arrayidx180;
      var $141=$I;
      var $142=$tp;
      var $index181=(($142+28)|0);
      HEAP32[(($index181)>>2)]=$141;
      var $143=$tp;
      var $child182=(($143+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $144=$tp;
      var $child184=(($144+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $145=$m_addr;
      var $treemap186=(($145+4)|0);
      var $146=HEAP32[(($treemap186)>>2)];
      var $147=$I;
      var $shl187=1 << $147;
      var $and188=$146 & $shl187;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $148=$I;
      var $shl191=1 << $148;
      var $149=$m_addr;
      var $treemap192=(($149+4)|0);
      var $150=HEAP32[(($treemap192)>>2)];
      var $or=$150 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $151=$tp;
      var $152=$H147;
      HEAP32[(($152)>>2)]=$151;
      var $153=$H147;
      var $154=$153;
      var $155=$tp;
      var $parent193=(($155+24)|0);
      HEAP32[(($parent193)>>2)]=$154;
      var $156=$tp;
      var $157=$tp;
      var $bk194=(($157+12)|0);
      HEAP32[(($bk194)>>2)]=$156;
      var $158=$tp;
      var $fd195=(($158+8)|0);
      HEAP32[(($fd195)>>2)]=$156;
      label = 85; break;
    case 67: 
      var $159=$H147;
      var $160=HEAP32[(($159)>>2)];
      $T=$160;
      var $161=$psize;
      var $162=$I;
      var $cmp198=(($162)|0)==31;
      if ($cmp198) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $cond207 = 0;label = 70; break;
    case 69: 
      var $163=$I;
      var $shr202=$163 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 70; break;
    case 70: 
      var $cond207;
      var $shl208=$161 << $cond207;
      $K197=$shl208;
      label = 71; break;
    case 71: 
      var $164=$T;
      var $head209=(($164+4)|0);
      var $165=HEAP32[(($head209)>>2)];
      var $and210=$165 & -8;
      var $166=$psize;
      var $cmp211=(($and210)|0)!=(($166)|0);
      if ($cmp211) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $167=$K197;
      var $shr214=$167 >>> 31;
      var $and215=$shr214 & 1;
      var $168=$T;
      var $child216=(($168+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $169=$K197;
      var $shl218=$169 << 1;
      $K197=$shl218;
      var $170=$C;
      var $171=HEAP32[(($170)>>2)];
      var $cmp219=(($171)|0)!=0;
      if ($cmp219) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $172=$C;
      var $173=HEAP32[(($172)>>2)];
      $T=$173;
      label = 77; break;
    case 74: 
      var $174=$C;
      var $175=$174;
      var $176=$m_addr;
      var $least_addr223=(($176+16)|0);
      var $177=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($175)>>>0) >= (($177)>>>0);
      var $conv225=(($cmp224)&1);
      var $expval226=($conv225);
      var $tobool227=(($expval226)|0)!=0;
      if ($tobool227) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $178=$tp;
      var $179=$C;
      HEAP32[(($179)>>2)]=$178;
      var $180=$T;
      var $181=$tp;
      var $parent229=(($181+24)|0);
      HEAP32[(($parent229)>>2)]=$180;
      var $182=$tp;
      var $183=$tp;
      var $bk230=(($183+12)|0);
      HEAP32[(($bk230)>>2)]=$182;
      var $184=$tp;
      var $fd231=(($184+8)|0);
      HEAP32[(($fd231)>>2)]=$182;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $185=$T;
      var $fd236=(($185+8)|0);
      var $186=HEAP32[(($fd236)>>2)];
      $F235=$186;
      var $187=$T;
      var $188=$187;
      var $189=$m_addr;
      var $least_addr237=(($189+16)|0);
      var $190=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($188)>>>0) >= (($190)>>>0);
      if ($cmp238) { label = 79; break; } else { var $195 = 0;label = 80; break; }
    case 79: 
      var $191=$F235;
      var $192=$191;
      var $193=$m_addr;
      var $least_addr240=(($193+16)|0);
      var $194=HEAP32[(($least_addr240)>>2)];
      var $cmp241=(($192)>>>0) >= (($194)>>>0);
      var $195 = $cmp241;label = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=($land_ext);
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $196=$tp;
      var $197=$F235;
      var $bk246=(($197+12)|0);
      HEAP32[(($bk246)>>2)]=$196;
      var $198=$T;
      var $fd247=(($198+8)|0);
      HEAP32[(($fd247)>>2)]=$196;
      var $199=$F235;
      var $200=$tp;
      var $fd248=(($200+8)|0);
      HEAP32[(($fd248)>>2)]=$199;
      var $201=$T;
      var $202=$tp;
      var $bk249=(($202+12)|0);
      HEAP32[(($bk249)>>2)]=$201;
      var $203=$tp;
      var $parent250=(($203+24)|0);
      HEAP32[(($parent250)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $204=$sp;
      $pred=$204;
      var $205=$next3;
      $sp=$205;
      label = 3; break;
    case 88: 
      var $206=$nsegs;
      var $cmp257=(($206)>>>0) > 4294967295;
      if ($cmp257) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $207=$nsegs;
      var $cond262 = $207;label = 91; break;
    case 90: 
      var $cond262 = -1;label = 91; break;
    case 91: 
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
    default: assert(0, "bad label: " + label);
  }

}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      var $0=$oldp_addr;
      var $head=(($0+4)|0);
      var $1=HEAP32[(($head)>>2)];
      var $and=$1 & -8;
      $oldsize=$and;
      var $2=$nb_addr;
      var $shr=$2 >>> 3;
      var $cmp=(($shr)>>>0) < 32;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $3=$oldsize;
      var $4=$nb_addr;
      var $add=((($4)+(4))|0);
      var $cmp1=(($3)>>>0) >= (($add)>>>0);
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$oldsize;
      var $6=$nb_addr;
      var $sub=((($5)-($6))|0);
      var $7=HEAP32[((((5249404)|0))>>2)];
      var $shl=$7 << 1;
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$oldp_addr;
      $retval=$8;
      label = 15; break;
    case 7: 
      var $9=$oldp_addr;
      var $prev_foot=(($9)|0);
      var $10=HEAP32[(($prev_foot)>>2)];
      $offset=$10;
      var $11=$oldsize;
      var $12=$offset;
      var $add4=((($11)+($12))|0);
      var $add5=((($add4)+(16))|0);
      $oldmmsize=$add5;
      var $13=$nb_addr;
      var $add6=((($13)+(24))|0);
      var $add7=((($add6)+(7))|0);
      var $14=HEAP32[((((5249400)|0))>>2)];
      var $sub8=((($14)-(1))|0);
      var $add9=((($add7)+($sub8))|0);
      var $15=HEAP32[((((5249400)|0))>>2)];
      var $sub10=((($15)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $newmmsize=$and11;
      $cp=-1;
      var $16=$cp;
      var $cmp12=(($16)|0)!=-1;
      if ($cmp12) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $17=$cp;
      var $18=$offset;
      var $add_ptr=(($17+$18)|0);
      var $19=$add_ptr;
      $newp=$19;
      var $20=$newmmsize;
      var $21=$offset;
      var $sub14=((($20)-($21))|0);
      var $sub15=((($sub14)-(16))|0);
      $psize=$sub15;
      var $22=$psize;
      var $23=$newp;
      var $head16=(($23+4)|0);
      HEAP32[(($head16)>>2)]=$22;
      var $24=$newp;
      var $25=$24;
      var $26=$psize;
      var $add_ptr17=(($25+$26)|0);
      var $27=$add_ptr17;
      var $head18=(($27+4)|0);
      HEAP32[(($head18)>>2)]=7;
      var $28=$newp;
      var $29=$28;
      var $30=$psize;
      var $add19=((($30)+(4))|0);
      var $add_ptr20=(($29+$add19)|0);
      var $31=$add_ptr20;
      var $head21=(($31+4)|0);
      HEAP32[(($head21)>>2)]=0;
      var $32=$cp;
      var $33=$m_addr;
      var $least_addr=(($33+16)|0);
      var $34=HEAP32[(($least_addr)>>2)];
      var $cmp22=(($32)>>>0) < (($34)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$cp;
      var $36=$m_addr;
      var $least_addr24=(($36+16)|0);
      HEAP32[(($least_addr24)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=$newmmsize;
      var $38=$oldmmsize;
      var $sub26=((($37)-($38))|0);
      var $39=$m_addr;
      var $footprint=(($39+432)|0);
      var $40=HEAP32[(($footprint)>>2)];
      var $add27=((($40)+($sub26))|0);
      HEAP32[(($footprint)>>2)]=$add27;
      var $41=$m_addr;
      var $max_footprint=(($41+436)|0);
      var $42=HEAP32[(($max_footprint)>>2)];
      var $cmp28=(($add27)>>>0) > (($42)>>>0);
      if ($cmp28) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$m_addr;
      var $footprint30=(($43+432)|0);
      var $44=HEAP32[(($footprint30)>>2)];
      var $45=$m_addr;
      var $max_footprint31=(($45+436)|0);
      HEAP32[(($max_footprint31)>>2)]=$44;
      label = 12; break;
    case 12: 
      var $46=$newp;
      $retval=$46;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $47=$retval;

      return $47;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>0) >= (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|0)==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((5249412)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr;
      var $add=((($0)+(24))|0);
      var $add1=((($add)+(7))|0);
      var $1=HEAP32[((((5249400)|0))>>2)];
      var $sub=((($1)-(1))|0);
      var $add2=((($add1)+($sub))|0);
      var $2=HEAP32[((((5249400)|0))>>2)];
      var $sub3=((($2)-(1))|0);
      var $neg=$sub3 ^ -1;
      var $and=$add2 & $neg;
      $mmsize=$and;
      var $3=$mmsize;
      var $4=$nb_addr;
      var $cmp=(($3)>>>0) > (($4)>>>0);
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $5=$mm;
      var $cmp4=(($5)|0)!=-1;
      if ($cmp4) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $6=$mm;
      var $add_ptr=(($6+8)|0);
      var $7=$add_ptr;
      var $and6=$7 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = 0;label = 7; break;
    case 6: 
      var $8=$mm;
      var $add_ptr8=(($8+8)|0);
      var $9=$add_ptr8;
      var $and9=$9 & 7;
      var $sub10=(((8)-($and9))|0);
      var $and11=$sub10 & 7;
      var $cond = $and11;label = 7; break;
    case 7: 
      var $cond;
      $offset=$cond;
      var $10=$mmsize;
      var $11=$offset;
      var $sub12=((($10)-($11))|0);
      var $sub13=((($sub12)-(16))|0);
      $psize=$sub13;
      var $12=$mm;
      var $13=$offset;
      var $add_ptr14=(($12+$13)|0);
      var $14=$add_ptr14;
      $p=$14;
      var $15=$offset;
      var $16=$p;
      var $prev_foot=(($16)|0);
      HEAP32[(($prev_foot)>>2)]=$15;
      var $17=$psize;
      var $18=$p;
      var $head=(($18+4)|0);
      HEAP32[(($head)>>2)]=$17;
      var $19=$p;
      var $20=$19;
      var $21=$psize;
      var $add_ptr15=(($20+$21)|0);
      var $22=$add_ptr15;
      var $head16=(($22+4)|0);
      HEAP32[(($head16)>>2)]=7;
      var $23=$p;
      var $24=$23;
      var $25=$psize;
      var $add17=((($25)+(4))|0);
      var $add_ptr18=(($24+$add17)|0);
      var $26=$add_ptr18;
      var $head19=(($26+4)|0);
      HEAP32[(($head19)>>2)]=0;
      var $27=$m_addr;
      var $least_addr=(($27+16)|0);
      var $28=HEAP32[(($least_addr)>>2)];
      var $cmp20=(($28)|0)==0;
      if ($cmp20) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $29=$mm;
      var $30=$m_addr;
      var $least_addr21=(($30+16)|0);
      var $31=HEAP32[(($least_addr21)>>2)];
      var $cmp22=(($29)>>>0) < (($31)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$mm;
      var $33=$m_addr;
      var $least_addr24=(($33+16)|0);
      HEAP32[(($least_addr24)>>2)]=$32;
      label = 10; break;
    case 10: 
      var $34=$mmsize;
      var $35=$m_addr;
      var $footprint=(($35+432)|0);
      var $36=HEAP32[(($footprint)>>2)];
      var $add25=((($36)+($34))|0);
      HEAP32[(($footprint)>>2)]=$add25;
      var $37=$m_addr;
      var $max_footprint=(($37+436)|0);
      var $38=HEAP32[(($max_footprint)>>2)];
      var $cmp26=(($add25)>>>0) > (($38)>>>0);
      if ($cmp26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$m_addr;
      var $footprint28=(($39+432)|0);
      var $40=HEAP32[(($footprint28)>>2)];
      var $41=$m_addr;
      var $max_footprint29=(($41+436)|0);
      HEAP32[(($max_footprint29)>>2)]=$40;
      label = 12; break;
    case 12: 
      var $42=$p;
      var $43=$42;
      var $add_ptr31=(($43+8)|0);
      $retval=$add_ptr31;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $44=$retval;

      return $44;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>0) < 32;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $shl=$1 << 1;
      var $2=$m_addr;
      var $smallbins=(($2+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $3=$arrayidx;
      var $4=$3;
      $bin=$4;
      var $5=$bin;
      var $6=$bin;
      var $bk=(($6+12)|0);
      HEAP32[(($bk)>>2)]=$5;
      var $7=$bin;
      var $fd=(($7+8)|0);
      HEAP32[(($fd)>>2)]=$5;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldmem_addr;
      var $bytes_addr;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $m_addr=$m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) >= 4294967232;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=___errno_location();
      HEAP32[(($call)>>2)]=12;
      $retval=0;
      label = 35; break;
    case 4: 
      var $1=$oldmem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $oldp=$2;
      var $3=$oldp;
      var $head=(($3+4)|0);
      var $4=HEAP32[(($head)>>2)];
      var $and=$4 & -8;
      $oldsize=$and;
      var $5=$oldp;
      var $6=$5;
      var $7=$oldsize;
      var $add_ptr1=(($6+$7)|0);
      var $8=$add_ptr1;
      $next=$8;
      $newp=0;
      $extra=0;
      var $9=$oldp;
      var $10=$9;
      var $11=$m_addr;
      var $least_addr=(($11+16)|0);
      var $12=HEAP32[(($least_addr)>>2)];
      var $cmp2=(($10)>>>0) >= (($12)>>>0);
      if ($cmp2) { label = 5; break; } else { var $21 = 0;label = 8; break; }
    case 5: 
      var $13=$oldp;
      var $head3=(($13+4)|0);
      var $14=HEAP32[(($head3)>>2)];
      var $and4=$14 & 3;
      var $cmp5=(($and4)|0)!=1;
      if ($cmp5) { label = 6; break; } else { var $21 = 0;label = 8; break; }
    case 6: 
      var $15=$oldp;
      var $16=$15;
      var $17=$next;
      var $18=$17;
      var $cmp7=(($16)>>>0) < (($18)>>>0);
      if ($cmp7) { label = 7; break; } else { var $21 = 0;label = 8; break; }
    case 7: 
      var $19=$next;
      var $head8=(($19+4)|0);
      var $20=HEAP32[(($head8)>>2)];
      var $and9=$20 & 1;
      var $tobool=(($and9)|0)!=0;
      var $21 = $tobool;label = 8; break;
    case 8: 
      var $21;
      var $land_ext=(($21)&1);
      var $expval=($land_ext);
      var $tobool10=(($expval)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$bytes_addr;
      var $cmp12=(($22)>>>0) < 11;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 16;label = 12; break;
    case 11: 
      var $23=$bytes_addr;
      var $add=((($23)+(4))|0);
      var $add13=((($add)+(7))|0);
      var $and14=$add13 & -8;
      var $cond = $and14;label = 12; break;
    case 12: 
      var $cond;
      $nb=$cond;
      var $24=$oldp;
      var $head15=(($24+4)|0);
      var $25=HEAP32[(($head15)>>2)];
      var $and16=$25 & 3;
      var $cmp17=(($and16)|0)==0;
      if ($cmp17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$m_addr;
      var $27=$oldp;
      var $28=$nb;
      var $call19=_mmap_resize($26, $27, $28);
      $newp=$call19;
      label = 23; break;
    case 14: 
      var $29=$oldsize;
      var $30=$nb;
      var $cmp20=(($29)>>>0) >= (($30)>>>0);
      if ($cmp20) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $31=$oldsize;
      var $32=$nb;
      var $sub=((($31)-($32))|0);
      $rsize=$sub;
      var $33=$oldp;
      $newp=$33;
      var $34=$rsize;
      var $cmp22=(($34)>>>0) >= 16;
      if ($cmp22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=$newp;
      var $36=$35;
      var $37=$nb;
      var $add_ptr24=(($36+$37)|0);
      var $38=$add_ptr24;
      $remainder=$38;
      var $39=$newp;
      var $head25=(($39+4)|0);
      var $40=HEAP32[(($head25)>>2)];
      var $and26=$40 & 1;
      var $41=$nb;
      var $or=$and26 | $41;
      var $or27=$or | 2;
      var $42=$newp;
      var $head28=(($42+4)|0);
      HEAP32[(($head28)>>2)]=$or27;
      var $43=$newp;
      var $44=$43;
      var $45=$nb;
      var $add_ptr29=(($44+$45)|0);
      var $46=$add_ptr29;
      var $head30=(($46+4)|0);
      var $47=HEAP32[(($head30)>>2)];
      var $or31=$47 | 1;
      HEAP32[(($head30)>>2)]=$or31;
      var $48=$rsize;
      var $or32=$48 | 1;
      var $or33=$or32 | 2;
      var $49=$remainder;
      var $head34=(($49+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $50=$remainder;
      var $51=$50;
      var $52=$rsize;
      var $add_ptr35=(($51+$52)|0);
      var $53=$add_ptr35;
      var $head36=(($53+4)|0);
      var $54=HEAP32[(($head36)>>2)];
      var $or37=$54 | 1;
      HEAP32[(($head36)>>2)]=$or37;
      var $55=$remainder;
      var $56=$55;
      var $add_ptr38=(($56+8)|0);
      $extra=$add_ptr38;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $57=$next;
      var $58=$m_addr;
      var $top=(($58+24)|0);
      var $59=HEAP32[(($top)>>2)];
      var $cmp41=(($57)|0)==(($59)|0);
      if ($cmp41) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $60=$oldsize;
      var $61=$m_addr;
      var $topsize=(($61+12)|0);
      var $62=HEAP32[(($topsize)>>2)];
      var $add43=((($60)+($62))|0);
      var $63=$nb;
      var $cmp44=(($add43)>>>0) > (($63)>>>0);
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $64=$oldsize;
      var $65=$m_addr;
      var $topsize46=(($65+12)|0);
      var $66=HEAP32[(($topsize46)>>2)];
      var $add47=((($64)+($66))|0);
      $newsize=$add47;
      var $67=$newsize;
      var $68=$nb;
      var $sub48=((($67)-($68))|0);
      $newtopsize=$sub48;
      var $69=$oldp;
      var $70=$69;
      var $71=$nb;
      var $add_ptr49=(($70+$71)|0);
      var $72=$add_ptr49;
      $newtop=$72;
      var $73=$oldp;
      var $head50=(($73+4)|0);
      var $74=HEAP32[(($head50)>>2)];
      var $and51=$74 & 1;
      var $75=$nb;
      var $or52=$and51 | $75;
      var $or53=$or52 | 2;
      var $76=$oldp;
      var $head54=(($76+4)|0);
      HEAP32[(($head54)>>2)]=$or53;
      var $77=$oldp;
      var $78=$77;
      var $79=$nb;
      var $add_ptr55=(($78+$79)|0);
      var $80=$add_ptr55;
      var $head56=(($80+4)|0);
      var $81=HEAP32[(($head56)>>2)];
      var $or57=$81 | 1;
      HEAP32[(($head56)>>2)]=$or57;
      var $82=$newtopsize;
      var $or58=$82 | 1;
      var $83=$newtop;
      var $head59=(($83+4)|0);
      HEAP32[(($head59)>>2)]=$or58;
      var $84=$newtop;
      var $85=$m_addr;
      var $top60=(($85+24)|0);
      HEAP32[(($top60)>>2)]=$84;
      var $86=$newtopsize;
      var $87=$m_addr;
      var $topsize61=(($87+12)|0);
      HEAP32[(($topsize61)>>2)]=$86;
      var $88=$oldp;
      $newp=$88;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $89=$newp;
      var $cmp67=(($89)|0)!=0;
      if ($cmp67) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $90=$extra;
      var $cmp69=(($90)|0)!=0;
      if ($cmp69) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $91=$extra;
      _free($91);
      label = 28; break;
    case 28: 
      var $92=$newp;
      var $93=$92;
      var $add_ptr72=(($93+8)|0);
      $retval=$add_ptr72;
      label = 35; break;
    case 29: 
      var $94=$bytes_addr;
      var $call74=_malloc($94);
      $newmem=$call74;
      var $95=$newmem;
      var $cmp75=(($95)|0)!=0;
      if ($cmp75) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $96=$oldsize;
      var $97=$oldp;
      var $head77=(($97+4)|0);
      var $98=HEAP32[(($head77)>>2)];
      var $and78=$98 & 3;
      var $cmp79=(($and78)|0)==0;
      var $cond80=$cmp79 ? 8 : 4;
      var $sub81=((($96)-($cond80))|0);
      $oc=$sub81;
      var $99=$newmem;
      var $100=$oldmem_addr;
      var $101=$oc;
      var $102=$bytes_addr;
      var $cmp82=(($101)>>>0) < (($102)>>>0);
      if ($cmp82) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $103=$oc;
      var $cond86 = $103;label = 33; break;
    case 32: 
      var $104=$bytes_addr;
      var $cond86 = $104;label = 33; break;
    case 33: 
      var $cond86;
      assert($cond86 % 1 === 0);_memcpy($99, $100, $cond86);
      var $105=$oldmem_addr;
      _free($105);
      label = 34; break;
    case 34: 
      var $106=$newmem;
      $retval=$106;
      label = 35; break;
    case 35: 
      var $107=$retval;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((5249396)|0))>>2)];
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|0)!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $6=$gsize;
      HEAP32[((((5249404)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((5249400)|0))>>2)]=$7;
      HEAP32[((((5249408)|0))>>2)]=-1;
      HEAP32[((((5249412)|0))>>2)]=2097152;
      HEAP32[((((5249416)|0))>>2)]=0;
      var $8=HEAP32[((((5249416)|0))>>2)];
      HEAP32[((((5304960)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((5249396)|0))>>2)]=$11;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }

}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr;
      var $1=$newbase_addr;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$newbase_addr;
      var $add_ptr1=(($3+8)|0);
      var $4=$add_ptr1;
      var $and2=$4 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      var $add_ptr4=(($0+$cond)|0);
      var $5=$add_ptr4;
      $p=$5;
      var $6=$oldbase_addr;
      var $7=$oldbase_addr;
      var $add_ptr5=(($7+8)|0);
      var $8=$add_ptr5;
      var $and6=$8 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond15 = 0;label = 8; break;
    case 7: 
      var $9=$oldbase_addr;
      var $add_ptr10=(($9+8)|0);
      var $10=$add_ptr10;
      var $and11=$10 & 7;
      var $sub12=(((8)-($and11))|0);
      var $and13=$sub12 & 7;
      var $cond15 = $and13;label = 8; break;
    case 8: 
      var $cond15;
      var $add_ptr16=(($6+$cond15)|0);
      var $11=$add_ptr16;
      $oldfirst=$11;
      var $12=$oldfirst;
      var $13=$12;
      var $14=$p;
      var $15=$14;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $16=$p;
      var $17=$16;
      var $18=$nb_addr;
      var $add_ptr17=(($17+$18)|0);
      var $19=$add_ptr17;
      $q=$19;
      var $20=$psize;
      var $21=$nb_addr;
      var $sub18=((($20)-($21))|0);
      $qsize=$sub18;
      var $22=$nb_addr;
      var $or=$22 | 1;
      var $or19=$or | 2;
      var $23=$p;
      var $head=(($23+4)|0);
      HEAP32[(($head)>>2)]=$or19;
      var $24=$oldfirst;
      var $25=$m_addr;
      var $top=(($25+24)|0);
      var $26=HEAP32[(($top)>>2)];
      var $cmp20=(($24)|0)==(($26)|0);
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$qsize;
      var $28=$m_addr;
      var $topsize=(($28+12)|0);
      var $29=HEAP32[(($topsize)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($topsize)>>2)]=$add;
      $tsize=$add;
      var $30=$q;
      var $31=$m_addr;
      var $top21=(($31+24)|0);
      HEAP32[(($top21)>>2)]=$30;
      var $32=$tsize;
      var $or22=$32 | 1;
      var $33=$q;
      var $head23=(($33+4)|0);
      HEAP32[(($head23)>>2)]=$or22;
      label = 110; break;
    case 10: 
      var $34=$oldfirst;
      var $35=$m_addr;
      var $dv=(($35+20)|0);
      var $36=HEAP32[(($dv)>>2)];
      var $cmp24=(($34)|0)==(($36)|0);
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$qsize;
      var $38=$m_addr;
      var $dvsize=(($38+8)|0);
      var $39=HEAP32[(($dvsize)>>2)];
      var $add26=((($39)+($37))|0);
      HEAP32[(($dvsize)>>2)]=$add26;
      $dsize=$add26;
      var $40=$q;
      var $41=$m_addr;
      var $dv27=(($41+20)|0);
      HEAP32[(($dv27)>>2)]=$40;
      var $42=$dsize;
      var $or28=$42 | 1;
      var $43=$q;
      var $head29=(($43+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $44=$dsize;
      var $45=$q;
      var $46=$45;
      var $47=$dsize;
      var $add_ptr30=(($46+$47)|0);
      var $48=$add_ptr30;
      var $prev_foot=(($48)|0);
      HEAP32[(($prev_foot)>>2)]=$44;
      label = 109; break;
    case 12: 
      var $49=$oldfirst;
      var $head32=(($49+4)|0);
      var $50=HEAP32[(($head32)>>2)];
      var $and33=$50 & 3;
      var $cmp34=(($and33)|0)!=1;
      if ($cmp34) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>0) < 32;
      if ($cmp38) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $54=$oldfirst;
      var $fd=(($54+8)|0);
      var $55=HEAP32[(($fd)>>2)];
      $F=$55;
      var $56=$oldfirst;
      var $bk=(($56+12)|0);
      var $57=HEAP32[(($bk)>>2)];
      $B=$57;
      var $58=$nsize;
      var $shr40=$58 >>> 3;
      $I=$shr40;
      var $59=$F;
      var $60=$B;
      var $cmp41=(($59)|0)==(($60)|0);
      if ($cmp41) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $61=$I;
      var $shl=1 << $61;
      var $neg=$shl ^ -1;
      var $62=$m_addr;
      var $smallmap=(($62)|0);
      var $63=HEAP32[(($smallmap)>>2)];
      var $and43=$63 & $neg;
      HEAP32[(($smallmap)>>2)]=$and43;
      label = 25; break;
    case 16: 
      var $64=$F;
      var $65=$I;
      var $shl45=$65 << 1;
      var $66=$m_addr;
      var $smallbins=(($66+40)|0);
      var $arrayidx=(($smallbins+($shl45<<2))|0);
      var $67=$arrayidx;
      var $68=$67;
      var $cmp46=(($64)|0)==(($68)|0);
      if ($cmp46) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $69=$F;
      var $70=$69;
      var $71=$m_addr;
      var $least_addr=(($71+16)|0);
      var $72=HEAP32[(($least_addr)>>2)];
      var $cmp47=(($70)>>>0) >= (($72)>>>0);
      if ($cmp47) { label = 18; break; } else { var $83 = 0;label = 21; break; }
    case 18: 
      var $73=$B;
      var $74=$I;
      var $shl48=$74 << 1;
      var $75=$m_addr;
      var $smallbins49=(($75+40)|0);
      var $arrayidx50=(($smallbins49+($shl48<<2))|0);
      var $76=$arrayidx50;
      var $77=$76;
      var $cmp51=(($73)|0)==(($77)|0);
      if ($cmp51) { var $82 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $78=$B;
      var $79=$78;
      var $80=$m_addr;
      var $least_addr52=(($80+16)|0);
      var $81=HEAP32[(($least_addr52)>>2)];
      var $cmp53=(($79)>>>0) >= (($81)>>>0);
      var $82 = $cmp53;label = 20; break;
    case 20: 
      var $82;
      var $83 = $82;label = 21; break;
    case 21: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $84=$B;
      var $85=$F;
      var $bk55=(($85+12)|0);
      HEAP32[(($bk55)>>2)]=$84;
      var $86=$F;
      var $87=$B;
      var $fd56=(($87+8)|0);
      HEAP32[(($fd56)>>2)]=$86;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $88=$oldfirst;
      var $89=$88;
      $TP=$89;
      var $90=$TP;
      var $parent=(($90+24)|0);
      var $91=HEAP32[(($parent)>>2)];
      $XP=$91;
      var $92=$TP;
      var $bk60=(($92+12)|0);
      var $93=HEAP32[(($bk60)>>2)];
      var $94=$TP;
      var $cmp61=(($93)|0)!=(($94)|0);
      if ($cmp61) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $95=$TP;
      var $fd64=(($95+8)|0);
      var $96=HEAP32[(($fd64)>>2)];
      $F63=$96;
      var $97=$TP;
      var $bk65=(($97+12)|0);
      var $98=HEAP32[(($bk65)>>2)];
      $R=$98;
      var $99=$F63;
      var $100=$99;
      var $101=$m_addr;
      var $least_addr66=(($101+16)|0);
      var $102=HEAP32[(($least_addr66)>>2)];
      var $cmp67=(($100)>>>0) >= (($102)>>>0);
      var $conv=(($cmp67)&1);
      var $expval68=($conv);
      var $tobool69=(($expval68)|0)!=0;
      if ($tobool69) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $103=$R;
      var $104=$F63;
      var $bk71=(($104+12)|0);
      HEAP32[(($bk71)>>2)]=$103;
      var $105=$F63;
      var $106=$R;
      var $fd72=(($106+8)|0);
      HEAP32[(($fd72)>>2)]=$105;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 43; break;
    case 31: 
      var $107=$TP;
      var $child=(($107+16)|0);
      var $arrayidx76=(($child+4)|0);
      $RP=$arrayidx76;
      var $108=HEAP32[(($arrayidx76)>>2)];
      $R=$108;
      var $cmp77=(($108)|0)!=0;
      if ($cmp77) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $109=$TP;
      var $child80=(($109+16)|0);
      var $arrayidx81=(($child80)|0);
      $RP=$arrayidx81;
      var $110=HEAP32[(($arrayidx81)>>2)];
      $R=$110;
      var $cmp82=(($110)|0)!=0;
      if ($cmp82) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $111=$R;
      var $child85=(($111+16)|0);
      var $arrayidx86=(($child85+4)|0);
      $CP=$arrayidx86;
      var $112=HEAP32[(($arrayidx86)>>2)];
      var $cmp87=(($112)|0)!=0;
      if ($cmp87) { var $115 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $113=$R;
      var $child90=(($113+16)|0);
      var $arrayidx91=(($child90)|0);
      $CP=$arrayidx91;
      var $114=HEAP32[(($arrayidx91)>>2)];
      var $cmp92=(($114)|0)!=0;
      var $115 = $cmp92;label = 36; break;
    case 36: 
      var $115;
      if ($115) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $116=$CP;
      $RP=$116;
      var $117=HEAP32[(($116)>>2)];
      $R=$117;
      label = 34; break;
    case 38: 
      var $118=$RP;
      var $119=$118;
      var $120=$m_addr;
      var $least_addr95=(($120+16)|0);
      var $121=HEAP32[(($least_addr95)>>2)];
      var $cmp96=(($119)>>>0) >= (($121)>>>0);
      var $conv97=(($cmp96)&1);
      var $expval98=($conv97);
      var $tobool99=(($expval98)|0)!=0;
      if ($tobool99) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $122=$RP;
      HEAP32[(($122)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $123=$XP;
      var $cmp105=(($123)|0)!=0;
      if ($cmp105) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $124=$TP;
      var $index=(($124+28)|0);
      var $125=HEAP32[(($index)>>2)];
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx108=(($treebins+($125<<2))|0);
      $H=$arrayidx108;
      var $127=$TP;
      var $128=$H;
      var $129=HEAP32[(($128)>>2)];
      var $cmp109=(($127)|0)==(($129)|0);
      if ($cmp109) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $130=$R;
      var $131=$H;
      HEAP32[(($131)>>2)]=$130;
      var $cmp112=(($130)|0)==0;
      if ($cmp112) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $132=$TP;
      var $index115=(($132+28)|0);
      var $133=HEAP32[(($index115)>>2)];
      var $shl116=1 << $133;
      var $neg117=$shl116 ^ -1;
      var $134=$m_addr;
      var $treemap=(($134+4)|0);
      var $135=HEAP32[(($treemap)>>2)];
      var $and118=$135 & $neg117;
      HEAP32[(($treemap)>>2)]=$and118;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $136=$XP;
      var $137=$136;
      var $138=$m_addr;
      var $least_addr121=(($138+16)|0);
      var $139=HEAP32[(($least_addr121)>>2)];
      var $cmp122=(($137)>>>0) >= (($139)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $140=$XP;
      var $child127=(($140+16)|0);
      var $arrayidx128=(($child127)|0);
      var $141=HEAP32[(($arrayidx128)>>2)];
      var $142=$TP;
      var $cmp129=(($141)|0)==(($142)|0);
      if ($cmp129) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $143=$R;
      var $144=$XP;
      var $child132=(($144+16)|0);
      var $arrayidx133=(($child132)|0);
      HEAP32[(($arrayidx133)>>2)]=$143;
      label = 52; break;
    case 51: 
      var $145=$R;
      var $146=$XP;
      var $child135=(($146+16)|0);
      var $arrayidx136=(($child135+4)|0);
      HEAP32[(($arrayidx136)>>2)]=$145;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      var $147=$R;
      var $cmp141=(($147)|0)!=0;
      if ($cmp141) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $148=$R;
      var $149=$148;
      var $150=$m_addr;
      var $least_addr144=(($150+16)|0);
      var $151=HEAP32[(($least_addr144)>>2)];
      var $cmp145=(($149)>>>0) >= (($151)>>>0);
      var $conv146=(($cmp145)&1);
      var $expval147=($conv146);
      var $tobool148=(($expval147)|0)!=0;
      if ($tobool148) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $152=$XP;
      var $153=$R;
      var $parent150=(($153+24)|0);
      HEAP32[(($parent150)>>2)]=$152;
      var $154=$TP;
      var $child151=(($154+16)|0);
      var $arrayidx152=(($child151)|0);
      var $155=HEAP32[(($arrayidx152)>>2)];
      $C0=$155;
      var $cmp153=(($155)|0)!=0;
      if ($cmp153) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $156=$C0;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr156=(($158+16)|0);
      var $159=HEAP32[(($least_addr156)>>2)];
      var $cmp157=(($157)>>>0) >= (($159)>>>0);
      var $conv158=(($cmp157)&1);
      var $expval159=($conv158);
      var $tobool160=(($expval159)|0)!=0;
      if ($tobool160) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $160=$C0;
      var $161=$R;
      var $child162=(($161+16)|0);
      var $arrayidx163=(($child162)|0);
      HEAP32[(($arrayidx163)>>2)]=$160;
      var $162=$R;
      var $163=$C0;
      var $parent164=(($163+24)|0);
      HEAP32[(($parent164)>>2)]=$162;
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!"
    case 61: 
      label = 62; break;
    case 62: 
      var $164=$TP;
      var $child168=(($164+16)|0);
      var $arrayidx169=(($child168+4)|0);
      var $165=HEAP32[(($arrayidx169)>>2)];
      $C1=$165;
      var $cmp170=(($165)|0)!=0;
      if ($cmp170) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $166=$C1;
      var $167=$166;
      var $168=$m_addr;
      var $least_addr173=(($168+16)|0);
      var $169=HEAP32[(($least_addr173)>>2)];
      var $cmp174=(($167)>>>0) >= (($169)>>>0);
      var $conv175=(($cmp174)&1);
      var $expval176=($conv175);
      var $tobool177=(($expval176)|0)!=0;
      if ($tobool177) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $170=$C1;
      var $171=$R;
      var $child179=(($171+16)|0);
      var $arrayidx180=(($child179+4)|0);
      HEAP32[(($arrayidx180)>>2)]=$170;
      var $172=$R;
      var $173=$C1;
      var $parent181=(($173+24)|0);
      HEAP32[(($parent181)>>2)]=$172;
      label = 66; break;
    case 65: 
      _abort();
      throw "Reached an unreachable!"
    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $174=$oldfirst;
      var $175=$174;
      var $176=$nsize;
      var $add_ptr190=(($175+$176)|0);
      var $177=$add_ptr190;
      $oldfirst=$177;
      var $178=$nsize;
      var $179=$qsize;
      var $add191=((($179)+($178))|0);
      $qsize=$add191;
      label = 73; break;
    case 73: 
      var $180=$oldfirst;
      var $head193=(($180+4)|0);
      var $181=HEAP32[(($head193)>>2)];
      var $and194=$181 & -2;
      HEAP32[(($head193)>>2)]=$and194;
      var $182=$qsize;
      var $or195=$182 | 1;
      var $183=$q;
      var $head196=(($183+4)|0);
      HEAP32[(($head196)>>2)]=$or195;
      var $184=$qsize;
      var $185=$q;
      var $186=$185;
      var $187=$qsize;
      var $add_ptr197=(($186+$187)|0);
      var $188=$add_ptr197;
      var $prev_foot198=(($188)|0);
      HEAP32[(($prev_foot198)>>2)]=$184;
      var $189=$qsize;
      var $shr199=$189 >>> 3;
      var $cmp200=(($shr199)>>>0) < 32;
      if ($cmp200) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $190=$qsize;
      var $shr204=$190 >>> 3;
      $I203=$shr204;
      var $191=$I203;
      var $shl206=$191 << 1;
      var $192=$m_addr;
      var $smallbins207=(($192+40)|0);
      var $arrayidx208=(($smallbins207+($shl206<<2))|0);
      var $193=$arrayidx208;
      var $194=$193;
      $B205=$194;
      var $195=$B205;
      $F209=$195;
      var $196=$m_addr;
      var $smallmap210=(($196)|0);
      var $197=HEAP32[(($smallmap210)>>2)];
      var $198=$I203;
      var $shl211=1 << $198;
      var $and212=$197 & $shl211;
      var $tobool213=(($and212)|0)!=0;
      if ($tobool213) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $199=$I203;
      var $shl215=1 << $199;
      var $200=$m_addr;
      var $smallmap216=(($200)|0);
      var $201=HEAP32[(($smallmap216)>>2)];
      var $or217=$201 | $shl215;
      HEAP32[(($smallmap216)>>2)]=$or217;
      label = 80; break;
    case 76: 
      var $202=$B205;
      var $fd219=(($202+8)|0);
      var $203=HEAP32[(($fd219)>>2)];
      var $204=$203;
      var $205=$m_addr;
      var $least_addr220=(($205+16)|0);
      var $206=HEAP32[(($least_addr220)>>2)];
      var $cmp221=(($204)>>>0) >= (($206)>>>0);
      var $conv222=(($cmp221)&1);
      var $expval223=($conv222);
      var $tobool224=(($expval223)|0)!=0;
      if ($tobool224) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $207=$B205;
      var $fd226=(($207+8)|0);
      var $208=HEAP32[(($fd226)>>2)];
      $F209=$208;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 80; break;
    case 80: 
      var $209=$q;
      var $210=$B205;
      var $fd230=(($210+8)|0);
      HEAP32[(($fd230)>>2)]=$209;
      var $211=$q;
      var $212=$F209;
      var $bk231=(($212+12)|0);
      HEAP32[(($bk231)>>2)]=$211;
      var $213=$F209;
      var $214=$q;
      var $fd232=(($214+8)|0);
      HEAP32[(($fd232)>>2)]=$213;
      var $215=$B205;
      var $216=$q;
      var $bk233=(($216+12)|0);
      HEAP32[(($bk233)>>2)]=$215;
      label = 108; break;
    case 81: 
      var $217=$q;
      var $218=$217;
      $TP235=$218;
      var $219=$qsize;
      var $shr238=$219 >>> 8;
      $X=$shr238;
      var $220=$X;
      var $cmp239=(($220)|0)==0;
      if ($cmp239) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I237=0;
      label = 87; break;
    case 83: 
      var $221=$X;
      var $cmp243=(($221)>>>0) > 65535;
      if ($cmp243) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I237=31;
      label = 86; break;
    case 85: 
      var $222=$X;
      $Y=$222;
      var $223=$Y;
      var $sub247=((($223)-(256))|0);
      var $shr248=$sub247 >>> 16;
      var $and249=$shr248 & 8;
      $N=$and249;
      var $224=$N;
      var $225=$Y;
      var $shl250=$225 << $224;
      $Y=$shl250;
      var $sub251=((($shl250)-(4096))|0);
      var $shr252=$sub251 >>> 16;
      var $and253=$shr252 & 4;
      $K=$and253;
      var $226=$K;
      var $227=$N;
      var $add254=((($227)+($226))|0);
      $N=$add254;
      var $228=$K;
      var $229=$Y;
      var $shl255=$229 << $228;
      $Y=$shl255;
      var $sub256=((($shl255)-(16384))|0);
      var $shr257=$sub256 >>> 16;
      var $and258=$shr257 & 2;
      $K=$and258;
      var $230=$N;
      var $add259=((($230)+($and258))|0);
      $N=$add259;
      var $231=$N;
      var $sub260=(((14)-($231))|0);
      var $232=$K;
      var $233=$Y;
      var $shl261=$233 << $232;
      $Y=$shl261;
      var $shr262=$shl261 >>> 15;
      var $add263=((($sub260)+($shr262))|0);
      $K=$add263;
      var $234=$K;
      var $shl264=$234 << 1;
      var $235=$qsize;
      var $236=$K;
      var $add265=((($236)+(7))|0);
      var $shr266=$235 >>> (($add265)>>>0);
      var $and267=$shr266 & 1;
      var $add268=((($shl264)+($and267))|0);
      $I237=$add268;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $237=$I237;
      var $238=$m_addr;
      var $treebins271=(($238+304)|0);
      var $arrayidx272=(($treebins271+($237<<2))|0);
      $H236=$arrayidx272;
      var $239=$I237;
      var $240=$TP235;
      var $index273=(($240+28)|0);
      HEAP32[(($index273)>>2)]=$239;
      var $241=$TP235;
      var $child274=(($241+16)|0);
      var $arrayidx275=(($child274+4)|0);
      HEAP32[(($arrayidx275)>>2)]=0;
      var $242=$TP235;
      var $child276=(($242+16)|0);
      var $arrayidx277=(($child276)|0);
      HEAP32[(($arrayidx277)>>2)]=0;
      var $243=$m_addr;
      var $treemap278=(($243+4)|0);
      var $244=HEAP32[(($treemap278)>>2)];
      var $245=$I237;
      var $shl279=1 << $245;
      var $and280=$244 & $shl279;
      var $tobool281=(($and280)|0)!=0;
      if ($tobool281) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $246=$I237;
      var $shl283=1 << $246;
      var $247=$m_addr;
      var $treemap284=(($247+4)|0);
      var $248=HEAP32[(($treemap284)>>2)];
      var $or285=$248 | $shl283;
      HEAP32[(($treemap284)>>2)]=$or285;
      var $249=$TP235;
      var $250=$H236;
      HEAP32[(($250)>>2)]=$249;
      var $251=$H236;
      var $252=$251;
      var $253=$TP235;
      var $parent286=(($253+24)|0);
      HEAP32[(($parent286)>>2)]=$252;
      var $254=$TP235;
      var $255=$TP235;
      var $bk287=(($255+12)|0);
      HEAP32[(($bk287)>>2)]=$254;
      var $256=$TP235;
      var $fd288=(($256+8)|0);
      HEAP32[(($fd288)>>2)]=$254;
      label = 107; break;
    case 89: 
      var $257=$H236;
      var $258=HEAP32[(($257)>>2)];
      $T=$258;
      var $259=$qsize;
      var $260=$I237;
      var $cmp291=(($260)|0)==31;
      if ($cmp291) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $cond300 = 0;label = 92; break;
    case 91: 
      var $261=$I237;
      var $shr295=$261 >>> 1;
      var $add296=((($shr295)+(8))|0);
      var $sub297=((($add296)-(2))|0);
      var $sub298=(((31)-($sub297))|0);
      var $cond300 = $sub298;label = 92; break;
    case 92: 
      var $cond300;
      var $shl301=$259 << $cond300;
      $K290=$shl301;
      label = 93; break;
    case 93: 
      var $262=$T;
      var $head302=(($262+4)|0);
      var $263=HEAP32[(($head302)>>2)];
      var $and303=$263 & -8;
      var $264=$qsize;
      var $cmp304=(($and303)|0)!=(($264)|0);
      if ($cmp304) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $265=$K290;
      var $shr307=$265 >>> 31;
      var $and308=$shr307 & 1;
      var $266=$T;
      var $child309=(($266+16)|0);
      var $arrayidx310=(($child309+($and308<<2))|0);
      $C=$arrayidx310;
      var $267=$K290;
      var $shl311=$267 << 1;
      $K290=$shl311;
      var $268=$C;
      var $269=HEAP32[(($268)>>2)];
      var $cmp312=(($269)|0)!=0;
      if ($cmp312) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $270=$C;
      var $271=HEAP32[(($270)>>2)];
      $T=$271;
      label = 99; break;
    case 96: 
      var $272=$C;
      var $273=$272;
      var $274=$m_addr;
      var $least_addr316=(($274+16)|0);
      var $275=HEAP32[(($least_addr316)>>2)];
      var $cmp317=(($273)>>>0) >= (($275)>>>0);
      var $conv318=(($cmp317)&1);
      var $expval319=($conv318);
      var $tobool320=(($expval319)|0)!=0;
      if ($tobool320) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $276=$TP235;
      var $277=$C;
      HEAP32[(($277)>>2)]=$276;
      var $278=$T;
      var $279=$TP235;
      var $parent322=(($279+24)|0);
      HEAP32[(($parent322)>>2)]=$278;
      var $280=$TP235;
      var $281=$TP235;
      var $bk323=(($281+12)|0);
      HEAP32[(($bk323)>>2)]=$280;
      var $282=$TP235;
      var $fd324=(($282+8)|0);
      HEAP32[(($fd324)>>2)]=$280;
      label = 106; break;
    case 98: 
      _abort();
      throw "Reached an unreachable!"
    case 99: 
      label = 105; break;
    case 100: 
      var $283=$T;
      var $fd329=(($283+8)|0);
      var $284=HEAP32[(($fd329)>>2)];
      $F328=$284;
      var $285=$T;
      var $286=$285;
      var $287=$m_addr;
      var $least_addr330=(($287+16)|0);
      var $288=HEAP32[(($least_addr330)>>2)];
      var $cmp331=(($286)>>>0) >= (($288)>>>0);
      if ($cmp331) { label = 101; break; } else { var $293 = 0;label = 102; break; }
    case 101: 
      var $289=$F328;
      var $290=$289;
      var $291=$m_addr;
      var $least_addr334=(($291+16)|0);
      var $292=HEAP32[(($least_addr334)>>2)];
      var $cmp335=(($290)>>>0) >= (($292)>>>0);
      var $293 = $cmp335;label = 102; break;
    case 102: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=($land_ext338);
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $294=$TP235;
      var $295=$F328;
      var $bk342=(($295+12)|0);
      HEAP32[(($bk342)>>2)]=$294;
      var $296=$T;
      var $fd343=(($296+8)|0);
      HEAP32[(($fd343)>>2)]=$294;
      var $297=$F328;
      var $298=$TP235;
      var $fd344=(($298+8)|0);
      HEAP32[(($fd344)>>2)]=$297;
      var $299=$T;
      var $300=$TP235;
      var $bk345=(($300+12)|0);
      HEAP32[(($bk345)>>2)]=$299;
      var $301=$TP235;
      var $parent346=(($301+24)|0);
      HEAP32[(($parent346)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!"
    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $302=$p;
      var $303=$302;
      var $add_ptr353=(($303+8)|0);

      return $add_ptr353;
    default: assert(0, "bad label: " + label);
  }

}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr;
      var $top=(($0+24)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$1;
      $old_top=$2;
      var $3=$m_addr;
      var $4=$old_top;
      var $call=_segment_holding($3, $4);
      $oldsp=$call;
      var $5=$oldsp;
      var $base=(($5)|0);
      var $6=HEAP32[(($base)>>2)];
      var $7=$oldsp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      $old_end=$add_ptr;
      $ssize=24;
      var $9=$old_end;
      var $10=$ssize;
      var $add=((($10)+(16))|0);
      var $add1=((($add)+(7))|0);
      var $idx_neg=(((-$add1))|0);
      var $add_ptr2=(($9+$idx_neg)|0);
      $rawsp=$add_ptr2;
      var $11=$rawsp;
      var $add_ptr3=(($11+8)|0);
      var $12=$add_ptr3;
      var $and=$12 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $13=$rawsp;
      var $add_ptr4=(($13+8)|0);
      var $14=$add_ptr4;
      var $and5=$14 & 7;
      var $sub=(((8)-($and5))|0);
      var $and6=$sub & 7;
      var $cond = $and6;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $15=$rawsp;
      var $16=$offset;
      var $add_ptr7=(($15+$16)|0);
      $asp=$add_ptr7;
      var $17=$asp;
      var $18=$old_top;
      var $add_ptr8=(($18+16)|0);
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0);
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$old_top;
      var $cond13 = $19;label = 8; break;
    case 7: 
      var $20=$asp;
      var $cond13 = $20;label = 8; break;
    case 8: 
      var $cond13;
      $csp=$cond13;
      var $21=$csp;
      var $22=$21;
      $sp=$22;
      var $23=$sp;
      var $24=$23;
      var $add_ptr14=(($24+8)|0);
      var $25=$add_ptr14;
      $ss=$25;
      var $26=$sp;
      var $27=$26;
      var $28=$ssize;
      var $add_ptr15=(($27+$28)|0);
      var $29=$add_ptr15;
      $tnext=$29;
      var $30=$tnext;
      $p=$30;
      $nfences=0;
      var $31=$m_addr;
      var $32=$tbase_addr;
      var $33=$32;
      var $34=$tsize_addr;
      var $sub16=((($34)-(40))|0);
      _init_top($31, $33, $sub16);
      var $35=$ssize;
      var $or=$35 | 1;
      var $or17=$or | 2;
      var $36=$sp;
      var $head=(($36+4)|0);
      HEAP32[(($head)>>2)]=$or17;
      var $37=$ss;
      var $38=$m_addr;
      var $seg=(($38+444)|0);
      var $39=$37;
      var $40=$seg;
      assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
      var $41=$tbase_addr;
      var $42=$m_addr;
      var $seg18=(($42+444)|0);
      var $base19=(($seg18)|0);
      HEAP32[(($base19)>>2)]=$41;
      var $43=$tsize_addr;
      var $44=$m_addr;
      var $seg20=(($44+444)|0);
      var $size21=(($seg20+4)|0);
      HEAP32[(($size21)>>2)]=$43;
      var $45=$mmapped_addr;
      var $46=$m_addr;
      var $seg22=(($46+444)|0);
      var $sflags=(($seg22+12)|0);
      HEAP32[(($sflags)>>2)]=$45;
      var $47=$ss;
      var $48=$m_addr;
      var $seg23=(($48+444)|0);
      var $next=(($seg23+8)|0);
      HEAP32[(($next)>>2)]=$47;
      label = 9; break;
    case 9: 
      var $49=$p;
      var $50=$49;
      var $add_ptr24=(($50+4)|0);
      var $51=$add_ptr24;
      $nextp=$51;
      var $52=$p;
      var $head25=(($52+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $53=$nfences;
      var $inc=((($53)+(1))|0);
      $nfences=$inc;
      var $54=$nextp;
      var $head26=(($54+4)|0);
      var $55=$head26;
      var $56=$old_end;
      var $cmp27=(($55)>>>0) < (($56)>>>0);
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=$nextp;
      $p=$57;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $58=$csp;
      var $59=$old_top;
      var $cmp28=(($58)|0)!=(($59)|0);
      if ($cmp28) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $60=$old_top;
      var $61=$60;
      $q=$61;
      var $62=$csp;
      var $63=$old_top;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$63;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $64=$q;
      var $65=$64;
      var $66=$psize;
      var $add_ptr30=(($65+$66)|0);
      var $67=$add_ptr30;
      $tn=$67;
      var $68=$tn;
      var $head31=(($68+4)|0);
      var $69=HEAP32[(($head31)>>2)];
      var $and32=$69 & -2;
      HEAP32[(($head31)>>2)]=$and32;
      var $70=$psize;
      var $or33=$70 | 1;
      var $71=$q;
      var $head34=(($71+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $72=$psize;
      var $73=$q;
      var $74=$73;
      var $75=$psize;
      var $add_ptr35=(($74+$75)|0);
      var $76=$add_ptr35;
      var $prev_foot=(($76)|0);
      HEAP32[(($prev_foot)>>2)]=$72;
      var $77=$psize;
      var $shr=$77 >>> 3;
      var $cmp36=(($shr)>>>0) < 32;
      if ($cmp36) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $78=$psize;
      var $shr38=$78 >>> 3;
      $I=$shr38;
      var $79=$I;
      var $shl=$79 << 1;
      var $80=$m_addr;
      var $smallbins=(($80+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $81=$arrayidx;
      var $82=$81;
      $B=$82;
      var $83=$B;
      $F=$83;
      var $84=$m_addr;
      var $smallmap=(($84)|0);
      var $85=HEAP32[(($smallmap)>>2)];
      var $86=$I;
      var $shl39=1 << $86;
      var $and40=$85 & $shl39;
      var $tobool=(($and40)|0)!=0;
      if ($tobool) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
      label = 21; break;
    case 17: 
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>0) >= (($94)>>>0);
      var $conv=(($cmp46)&1);
      var $expval=($conv);
      var $tobool47=(($expval)|0)!=0;
      if ($tobool47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!"
    case 20: 
      label = 21; break;
    case 21: 
      var $97=$q;
      var $98=$B;
      var $fd53=(($98+8)|0);
      HEAP32[(($fd53)>>2)]=$97;
      var $99=$q;
      var $100=$F;
      var $bk=(($100+12)|0);
      HEAP32[(($bk)>>2)]=$99;
      var $101=$F;
      var $102=$q;
      var $fd54=(($102+8)|0);
      HEAP32[(($fd54)>>2)]=$101;
      var $103=$B;
      var $104=$q;
      var $bk55=(($104+12)|0);
      HEAP32[(($bk55)>>2)]=$103;
      label = 49; break;
    case 22: 
      var $105=$q;
      var $106=$105;
      $TP=$106;
      var $107=$psize;
      var $shr58=$107 >>> 8;
      $X=$shr58;
      var $108=$X;
      var $cmp59=(($108)|0)==0;
      if ($cmp59) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I57=0;
      label = 28; break;
    case 24: 
      var $109=$X;
      var $cmp63=(($109)>>>0) > 65535;
      if ($cmp63) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I57=31;
      label = 27; break;
    case 26: 
      var $110=$X;
      $Y=$110;
      var $111=$Y;
      var $sub67=((($111)-(256))|0);
      var $shr68=$sub67 >>> 16;
      var $and69=$shr68 & 8;
      $N=$and69;
      var $112=$N;
      var $113=$Y;
      var $shl70=$113 << $112;
      $Y=$shl70;
      var $sub71=((($shl70)-(4096))|0);
      var $shr72=$sub71 >>> 16;
      var $and73=$shr72 & 4;
      $K=$and73;
      var $114=$K;
      var $115=$N;
      var $add74=((($115)+($114))|0);
      $N=$add74;
      var $116=$K;
      var $117=$Y;
      var $shl75=$117 << $116;
      $Y=$shl75;
      var $sub76=((($shl75)-(16384))|0);
      var $shr77=$sub76 >>> 16;
      var $and78=$shr77 & 2;
      $K=$and78;
      var $118=$N;
      var $add79=((($118)+($and78))|0);
      $N=$add79;
      var $119=$N;
      var $sub80=(((14)-($119))|0);
      var $120=$K;
      var $121=$Y;
      var $shl81=$121 << $120;
      $Y=$shl81;
      var $shr82=$shl81 >>> 15;
      var $add83=((($sub80)+($shr82))|0);
      $K=$add83;
      var $122=$K;
      var $shl84=$122 << 1;
      var $123=$psize;
      var $124=$K;
      var $add85=((($124)+(7))|0);
      var $shr86=$123 >>> (($add85)>>>0);
      var $and87=$shr86 & 1;
      var $add88=((($shl84)+($and87))|0);
      $I57=$add88;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $125=$I57;
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx91=(($treebins+($125<<2))|0);
      $H=$arrayidx91;
      var $127=$I57;
      var $128=$TP;
      var $index=(($128+28)|0);
      HEAP32[(($index)>>2)]=$127;
      var $129=$TP;
      var $child=(($129+16)|0);
      var $arrayidx92=(($child+4)|0);
      HEAP32[(($arrayidx92)>>2)]=0;
      var $130=$TP;
      var $child93=(($130+16)|0);
      var $arrayidx94=(($child93)|0);
      HEAP32[(($arrayidx94)>>2)]=0;
      var $131=$m_addr;
      var $treemap=(($131+4)|0);
      var $132=HEAP32[(($treemap)>>2)];
      var $133=$I57;
      var $shl95=1 << $133;
      var $and96=$132 & $shl95;
      var $tobool97=(($and96)|0)!=0;
      if ($tobool97) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
      label = 48; break;
    case 30: 
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|0)==31;
      if ($cmp106) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond115 = 0;label = 33; break;
    case 32: 
      var $149=$I57;
      var $shr110=$149 >>> 1;
      var $add111=((($shr110)+(8))|0);
      var $sub112=((($add111)-(2))|0);
      var $sub113=(((31)-($sub112))|0);
      var $cond115 = $sub113;label = 33; break;
    case 33: 
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      label = 34; break;
    case 34: 
      var $150=$T;
      var $head118=(($150+4)|0);
      var $151=HEAP32[(($head118)>>2)];
      var $and119=$151 & -8;
      var $152=$psize;
      var $cmp120=(($and119)|0)!=(($152)|0);
      if ($cmp120) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $153=$K105;
      var $shr123=$153 >>> 31;
      var $and124=$shr123 & 1;
      var $154=$T;
      var $child125=(($154+16)|0);
      var $arrayidx126=(($child125+($and124<<2))|0);
      $C=$arrayidx126;
      var $155=$K105;
      var $shl127=$155 << 1;
      $K105=$shl127;
      var $156=$C;
      var $157=HEAP32[(($156)>>2)];
      var $cmp128=(($157)|0)!=0;
      if ($cmp128) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$C;
      var $159=HEAP32[(($158)>>2)];
      $T=$159;
      label = 40; break;
    case 37: 
      var $160=$C;
      var $161=$160;
      var $162=$m_addr;
      var $least_addr132=(($162+16)|0);
      var $163=HEAP32[(($least_addr132)>>2)];
      var $cmp133=(($161)>>>0) >= (($163)>>>0);
      var $conv134=(($cmp133)&1);
      var $expval135=($conv134);
      var $tobool136=(($expval135)|0)!=0;
      if ($tobool136) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$TP;
      var $165=$C;
      HEAP32[(($165)>>2)]=$164;
      var $166=$T;
      var $167=$TP;
      var $parent138=(($167+24)|0);
      HEAP32[(($parent138)>>2)]=$166;
      var $168=$TP;
      var $169=$TP;
      var $bk139=(($169+12)|0);
      HEAP32[(($bk139)>>2)]=$168;
      var $170=$TP;
      var $fd140=(($170+8)|0);
      HEAP32[(($fd140)>>2)]=$168;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 46; break;
    case 41: 
      var $171=$T;
      var $fd145=(($171+8)|0);
      var $172=HEAP32[(($fd145)>>2)];
      $F144=$172;
      var $173=$T;
      var $174=$173;
      var $175=$m_addr;
      var $least_addr146=(($175+16)|0);
      var $176=HEAP32[(($least_addr146)>>2)];
      var $cmp147=(($174)>>>0) >= (($176)>>>0);
      if ($cmp147) { label = 42; break; } else { var $181 = 0;label = 43; break; }
    case 42: 
      var $177=$F144;
      var $178=$177;
      var $179=$m_addr;
      var $least_addr149=(($179+16)|0);
      var $180=HEAP32[(($least_addr149)>>2)];
      var $cmp150=(($178)>>>0) >= (($180)>>>0);
      var $181 = $cmp150;label = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=($land_ext);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $182=$TP;
      var $183=$F144;
      var $bk155=(($183+12)|0);
      HEAP32[(($bk155)>>2)]=$182;
      var $184=$T;
      var $fd156=(($184+8)|0);
      HEAP32[(($fd156)>>2)]=$182;
      var $185=$F144;
      var $186=$TP;
      var $fd157=(($186+8)|0);
      HEAP32[(($fd157)>>2)]=$185;
      var $187=$T;
      var $188=$TP;
      var $bk158=(($188+12)|0);
      HEAP32[(($bk158)>>2)]=$187;
      var $189=$TP;
      var $parent159=(($189+24)|0);
      HEAP32[(($parent159)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!"
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_qh_createsimplex","_qh_scalelast","_qh_orientoutside","_qh_initialhull","_qh_initbuild","_qh_memstatistics","_qh_maxouter","_qh_produce_output2","_qh_flippedmerges","_qh_printfacet3geom_nonsimplicial","_qh_printsummary","_qh_printpoints","_qh_tracemerging","_qh_printspheres","_qh_sharpnewfacets","_qh_renamevertex","_qh_malloc","_sys_alloc","_qh_memalloc","_qh_delfacet","_qh_setcompact","_qh_initqhull_mem","_qh_memfree","_qh_compare_facetvisit","_qh_printfacet4geom_simplicial","_qh_facetarea","_qh_setcheck","_qh_findbestneighbor","_qh_initqhull_start2","_qh_printpointvect","_qh_merge_degenredundant","_qh_pointid","_qh_neighbor_intersections","_qh_partitionpoint","_qh_setappend","_qh_settemppop","_qh_printmatrix","_qh_setzero","_sys_trim","_qh_findhorizon","_qh_nearvertex","_qh_facetcenter","_qh_mergecycle_vneighbors","_qh_printfacetNvertex_nonsimplicial","_qh_delridge","_qh_skipfacet","_qh_eachvoronoi","_qh_printfacet","_qh_pointfacet","_qh_errprint","_qh_pointvertex","_qh_printvnorm","_qh_printfacet4geom_nonsimplicial","_qh_mergecycle_ridges","_qh_addhash","_qh_comparemerge","_qh_meminit","_qh_detjoggle","_qh_printfacetNvertex_simplicial","_malloc","_qh_printfacetlist","_qh_buildhull","_qh_test_vneighbors","_qh_postmerge","_qh_rename_sharedvertex","_qh_qhull","_qh_find_newvertex","_qh_mergevertex_del","_qh_scaleinput","_qh_strtol","_qh_strtod","_qh_vertexneighbors","_qh_mergecycle","_qh_printvertex","_qh_printvertices","_qh_nearcoplanar","_qh_point","_qh_distplane","_qh_settempfree_all","_qh_projectpoint","_qh_facetarea_simplex","_qh_getangle","_qh_initthresholds","_qh_checkflipped_all","_qh_collectstatistics","_qh_markkeep","_qh_free","_qh_triangulate_null","_qh_gausselim","_qh_prependfacet","_qh_printline3geom","_qh_printvertexlist","_qh_mergefacet","_qh_getmergeset_initial","_qh_printfacetridges","_qh_printvridge","_qh_randommatrix","_qh_checkconvex","_qh_printfacet2geom","_prepend_alloc","_qh_printvdiagram2","_qh_printcentrum","_free","_qh_comparevisit","_qh_compare_facetmerge","_qh_meminitbuffers","_qh_printfacet3vertex","_qh_point_add","_tmalloc_small","_qh_option","_qh_detsimplex","_qh_setequal","_qh_printextremes_2d","_qh_prepare_output","_tmalloc_large","_qh_delvertex","_qh_printvneighbors","_qh_srand","_qh_printend","_qh_freebuild","_qh_printstats","_qh_outerinner","_qh_maxmin","_qh_printpoint3","_qh_nostatistic","_qh_printhelp_narrowhull","_qh_initqhull_globals","_qh_willdelete","_qh_setin","_run_qhull","_qh_normalize","_qh_mergecycle_facets","_qh_initstatistics","_qh_vertexridges","_qh_setnew_delnthsorted","_qh_mergefacet2d","_qh_findbesthorizon","_qh_mergeneighbors","_qh_printallstatistics","_qh_redundant_vertex","_qh_furthestnext","_qh_printneighborhood","_qh_premerge","_qh_setindex","_qh_initialvertices","_qh_clearcenters","_qh_rotatepoints","_qh_newfacet","_qh_rand","_qh_checkfacet","_qh_printafacet","_qh_printfacets","_qh_makenew_nonsimplicial","_qh_printpoints_out","_qh_printextremes","_qh_merge_nonconvex","_qh_basevertices","_init_top","_qh_findgooddist","_qh_degen_redundant_neighbors","_internal_realloc","_qh_makenew_simplicial","_qh_printhelp_degenerate","_qh_inthresholds","_qh_newhashtable","_qh_randomfactor","_qh_intcompare","_qh_nextridge3d","_qh_detvridge","_qh_maxsimplex","_qh_divzero","_qh_furthestout","_qh_triangulate","_qh_initqhull_outputflags","_qh_detvridge3","_qh_backnormal","_qh_scalepoints","_qh_setdellast","_qh_newstats","_qh_distround","_qh_getarea","_qh_build_withrestart","_qh_initqhull_start","_qh_setprint","_qh_updatetested","_release_unused_segments","_qh_vertexintersect","_qh_settruncate","_qh_getcentrum","_qh_remove_extravertices","_qh_checkzero","_qh_rotateinput","_qh_mergecycle_neighbors","_qh_setlast","_qh_countfacets","_qh_printfacet2math","_qh_infiniteloop","_qh_order_vertexneighbors","_qh_degen_redundant_facet","_qh_sethyperplane_gauss","_qh_setdelaunay","_qh_setdelsorted","_qh_settempfree","_qh_setfree","_qh_detroundoff","_qh_matchneighbor","_qh_addpoint","_qh_mergesimplex","_qh_printfacet3geom_points","_appendIndex","_qh_newvertices","_qh_findgood","_qh_setdel","_qh_printlists","_qh_printcenter","_qh_getdistance","_qh_projectinput","_qh_findbestnew","_qh_maxabsval","_qh_renameridgevertex","_qh_user_memsizes","_qh_printpointvect2","_qh_findbest","_qh_init_qhull_command","_qh_makenewfacets","_qh_setfacetplane","_qh_nextfurthest","_qh_test_appendmerge","_qh_freeqhull","_qh_makenewfacet","_qh_appendmergeset","_qh_printstatistics","_qh_printhelp_singular","_add_segment","_qh_appendvertex","_qh_setequal_skip","_qh_removevertex","_qh_pointdist","_qh_setnew","_qh_settemp","_qh_copypoints","_qh_fprintf","_qh_freebuffers","_qh_distnorm","_qh_initqhull_buffers","_qh_printfacet2geom_points","_qh_forcedmerges","_qh_triangulate_link","_qh_setunique","_qh_facet3vertex","_qh_argv_to_command","_qh_printfacet3geom_simplicial","_qh_setdelnthsorted","_qh_init_B","_qh_init_A","_qh_errexit2","_qh_gram_schmidt","_qh_checkvertex","_qh_memsize","_qh_produce_output","_mmap_alloc","_qh_triangulate_facet","_qh_printvoronoi","_qh_allstatF","_qh_allstatG","_qh_allstatD","_qh_allstatE","_qh_allstatB","_qh_allstatC","_qh_allstatA","_qh_allstatH","_qh_allstatI","_qh_findbestlower","_qh_removefacet","_qh_stddev","_qh_printstatlevel","_qh_projectdim3","_qh_mark_dupridges","_qh_printvdiagram","_qh_updatevertices","_qh_facetintersect","_qh_checkflipped","_qh_detvnorm","_qh_exit","_qh_printhyperplaneintersection","_qh_settemppush","_qh_findgood_all","_qh_setlarger","_qh_allstatistics","_qh_setsize","_qh_partitionall","_qh_geomplanes","_qh_printfacetheader","_qh_hashridge_find","_qh_isvertex","_qh_matchvertices","_qh_reducevertices","_qh_memsetup","_qh_printend4geom","_qh_setreplace","_qh_maydropneighbor","_qh_copynonconvex","_qh_errexit","_qh_freeqhull2","_qh_voronoi_center","_qh_markvoronoi","_qh_getcenter","_qh_setappend_set","_qh_crossproduct","_qh_appendfacet","_qh_all_merges","_qh_projectpoints","_qh_determinant","_qh_printextremes_d","_qh_makeridges","_qh_freestatistics","_qh_deletevisible","_qh_partitioncoplanar","_qh_memfreeshort","_qh_triangulate_mirror","_qh_compareangle","_qh_facet2point","_qh_buildtracing","_qh_printridge","_qh_precision","_mmap_resize","_qh_newvertex","_qh_findbest_test","_qh_setappend2ndlast","_qh_facetvertices","_qh_resetlists","_qh_gethash","_qh_printpointid","_qh_matchnewfacets","_qh_vertexridges_facet","_qh_tracemerge","_qh_partitionvisible","_qh_matchduplicates","_qh_vertexintersect_new","_qh_printhashtable","_init_bins","_qh_checkpolygon","_qh_normalize2","_qh_setaddnth","_qh_mergevertex_neighbors","_qh_mergeridges","_qh_allstatE2","_qh_sethyperplane_det","_qh_joggleinput","_qh_printbegin","_qh_mergecycle_all","_qh_printpoint","_calloc","_qh_outcoplanar","_init_mparams","_qh_getmergeset","_realloc","_qh_attachnewfacets","_segment_holding","_qh_makenewplanes","_qh_check_maxout","_qh_setdelnth","_qh_setequal_except","_qh_setfreelong","_qh_printfacet3math","_qh_hashridge","_qh_compare_facetarea","_qh_setcopy","_qh_newridge","_qh_mergevertices"]


var bits = require("bit-twiddle");

var run_qhull = cwrap('run_qhull', 'pointer', ['pointer', 'number', 'number', 'pointer']);

var QHULL_POINT_BUFFER = _malloc(4096);
var QHULL_POINT_BUFFER_SIZE = 4096;
var FACET_COUNT_POINTER = _malloc(4);

function executeQHull(points, options) {
  if(points.length === 0) {
    return [];
  }
  if(!options) {
    options = {};
  }
  
  //Reallocate buffers
  var dimension = points[0].length;
  var count = points.length;
  var size = dimension * count;
  if(size * 8 > QHULL_POINT_BUFFER_SIZE) {
    _free(QHULL_POINT_BUFFER);
    QHULL_POINT_BUFFER_SIZE = bits.nextPow(size * 8);
    QHULL_POINT_BUFFER = _malloc(QHULL_POINT_BUFFER_SIZE);
  }
  
  //Copy points into buffer
  var offset = QHULL_POINT_BUFFER >>> 3;
  for(var i=0; i<count; ++i) {
    var p = points[i];
    for(var j=0; j<dimension; ++j) {
      Module.HEAPF64[offset++] = p[j];
    }
  }
  
  //Call the library
  var facets = run_qhull(QHULL_POINT_BUFFER, count, dimension, FACET_COUNT_POINTER);
  
  //Unbox facets back into native JS
  var facet_count = Module.HEAP32[FACET_COUNT_POINTER>>2];
  var result = new Array(facet_count);
  var cur_ptr = facets>>2;
  for(var i=0; i<facet_count; ++i) {
    var c_facet = [];
    while(true) {
      var idx = Module.HEAP32[cur_ptr++];
      if(idx < 0) {
        break;
      }
      c_facet.push(idx);
    }
    result[i] = c_facet;
  }
  
  return result;
}

module.exports = executeQHull;
