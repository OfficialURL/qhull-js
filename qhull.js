
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 60132;

assert(STATICTOP < TOTAL_MEMORY);

var _stdout;
var _stdin;
var _stderr;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate(116, "i8", ALLOC_NONE, 5242880);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5242996);
allocate(3932, "i8", ALLOC_NONE, 5243000);
allocate(2340, "i8", ALLOC_NONE, 5246932);
allocate(24, "i8", ALLOC_NONE, 5249272);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,112,111,105,110,116,32,102,111,114,32,81,86,37,100,32,105,115,32,105,110,115,105,100,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,46,32,32,73,116,32,99,97,110,32,110,111,116,32,98,101,32,109,97,100,101,32,97,32,118,101,114,116,101,120,46,10,0] /* qhull input error: p */, "i8", ALLOC_NONE, 5249296);
allocate([113,104,95,110,101,105,103,104,98,111,114,95,105,110,116,101,114,115,101,99,116,105,111,110,115,58,32,37,100,32,118,101,114,116,105,99,101,115,32,105,110,32,110,101,105,103,104,98,111,114,32,105,110,116,101,114,115,101,99,116,105,111,110,32,111,102,32,118,37,100,10,0] /* qh_neighbor_intersec */, "i8", ALLOC_NONE, 5249388);
allocate([32,116,101,115,116,101,100,0] /*  tested\00 */, "i8", ALLOC_NONE, 5249460);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5249468);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,39,32,40,79,78,76,89,103,111,111,100,41,32,110,101,101,100,115,32,97,32,103,111,111,100,32,116,104,114,101,115,104,111,108,100,40,39,80,100,48,68,48,39,41,44,32,97,10,103,111,111,100,32,112,111,105,110,116,40,81,71,110,32,111,114,32,81,71,45,110,41,44,32,111,114,32,97,32,103,111,111,100,32,118,101,114,116,101,120,32,119,105,116,104,32,39,81,74,39,32,111,114,32,39,81,48,39,32,40,81,86,110,41,46,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5249508);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,118,101,114,116,105,99,101,115,41,58,32,102,97,99,101,116,115,32,100,105,100,32,110,111,116,32,115,104,97,114,101,32,97,32,114,105,100,103,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5249648);
allocate([32,110,101,119,0] /*  new\00 */, "i8", ALLOC_NONE, 5249720);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* distance tests for c */, "i8", ALLOC_NONE, 5249728);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,99,104,101,99,107,32,97,110,100,32,117,112,100,97,116,101,32,109,97,120,111,117,116,115,105,100,101,32,102,111,114,32,101,97,99,104,32,102,97,99,101,116,46,10,0] /* qh_check_maxout: che */, "i8", ALLOC_NONE, 5249772);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,32,81,86,110,39,32,40,111,110,108,121,32,103,111,111,100,32,118,101,114,116,101,120,41,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,105,116,104,32,109,101,114,103,105,110,103,46,10,85,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,111,114,32,39,81,48,39,32,116,111,32,116,117,114,110,32,111,102,102,32,109,101,114,103,105,110,103,46,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5249836);
allocate([32,32,37,115,32,102,97,99,101,116,32,97,114,101,97,58,32,32,32,37,50,46,56,103,10,0] /*   %s facet area:   % */, "i8", ALLOC_NONE, 5249972);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,41,58,32,113,104,32,110,117,109,95,118,105,115,105,98,108,101,32,37,100,32,105,115,32,110,111,116,32,110,117,109,98,101,114,32,111,102,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5250000);
allocate([32,118,105,115,105,98,108,101,0] /*  visible\00 */, "i8", ALLOC_NONE, 5250096);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,112,97,114,116,105,116,105,111,110,105,110,103,0] /* distance tests for p */, "i8", ALLOC_NONE, 5250108);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,32,102,48,61,32,37,112,10,0] /* qh_mergevertex_neigh */, "i8", ALLOC_NONE, 5250140);
allocate([32,32,73,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0] /*   Input joggled by:  */, "i8", ALLOC_NONE, 5250208);
allocate([32,117,112,112,101,114,68,101,108,97,117,110,97,121,0] /*  upperDelaunay\00 */, "i8", ALLOC_NONE, 5250236);
allocate([112,97,114,116,105,116,105,111,110,115,32,111,102,32,97,32,112,111,105,110,116,0] /* partitions of a poin */, "i8", ALLOC_NONE, 5250252);
allocate([10,84,114,97,99,101,32,108,101,118,101,108,32,37,100,32,102,111,114,32,37,115,32,124,32,37,115,10,0] /* \0ATrace level %d fo */, "i8", ALLOC_NONE, 5250276);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergevertex_neigh */, "i8", ALLOC_NONE, 5250308);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d free */, "i8", ALLOC_NONE, 5250376);
allocate([32,32,65,102,116,101,114,32,37,100,32,114,101,116,114,105,101,115,44,32,105,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0] /*   After %d retries,  */, "i8", ALLOC_NONE, 5250432);
allocate([32,116,114,105,99,111,112,108,97,110,97,114,0] /*  tricoplanar\00 */, "i8", ALLOC_NONE, 5250480);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,112,97,114,116,105,116,105,111,110,0] /* distance tests for i */, "i8", ALLOC_NONE, 5250496);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,101,105,116,104,101,114,32,81,71,110,32,111,114,32,81,86,110,32,112,111,105,110,116,32,105,115,32,62,32,112,37,100,10,0] /* qhull input error: e */, "i8", ALLOC_NONE, 5250536);
allocate([95,111,110,101,45,109,101,114,103,101,0] /* _one-merge\00 */, "i8", ALLOC_NONE, 5250592);
allocate([113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,100,101,108,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergevertex_del:  */, "i8", ALLOC_NONE, 5250604);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,37,100,32,97,116,116,101,109,112,116,115,32,116,111,32,99,111,110,115,116,114,117,99,116,32,97,32,99,111,110,118,101,120,32,104,117,108,108,10,32,32,32,32,32,32,32,32,119,105,116,104,32,106,111,103,103,108,101,100,32,105,110,112,117,116,46,32,32,73,110,99,114,101,97,115,101,32,106,111,103,103,108,101,32,97,98,111,118,101,32,39,81,74,37,50,46,50,103,39,10,32,32,32,32,32,32,32,32,111,114,32,109,111,100,105,102,121,32,113,104,95,74,79,71,71,76,69,46,46,46,32,112,97,114,97,109,101,116,101,114,115,32,105,110,32,117,115,101,114,46,104,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5250664);
allocate([32,32,80,101,114,99,101,110,116,97,103,101,32,111,102,32,114,117,110,115,32,119,105,116,104,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,58,32,37,52,46,49,102,10,0] /*   Percentage of runs */, "i8", ALLOC_NONE, 5250840);
allocate([32,115,105,109,112,108,105,99,105,97,108,0] /*  simplicial\00 */, "i8", ALLOC_NONE, 5250892);
allocate([100,105,102,102,101,114,101,110,99,101,32,105,110,32,109,97,120,95,111,117,116,115,105,100,101,32,97,116,32,102,105,110,97,108,32,99,104,101,99,107,0] /* difference in max_ou */, "i8", ALLOC_NONE, 5250904);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,105,110,102,105,110,105,116,101,108,111,111,112,41,58,32,112,111,116,101,110,116,105,97,108,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,100,101,116,101,99,116,101,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5250948);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,100,32,115,105,109,112,108,101,120,32,102,37,100,32,97,112,101,120,32,118,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5251024);
allocate([32,32,67,80,85,32,115,101,99,111,110,100,115,32,116,111,32,99,111,109,112,117,116,101,32,104,117,108,108,32,40,97,102,116,101,114,32,105,110,112,117,116,41,58,32,37,50,46,52,103,10,0] /*   CPU seconds to com */, "i8", ALLOC_NONE, 5251088);
allocate([32,98,111,116,116,111,109,0] /*  bottom\00 */, "i8", ALLOC_NONE, 5251140);
allocate([32,32,119,105,116,104,32,115,101,97,114,99,104,32,111,102,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0] /*   with search of ver */, "i8", ALLOC_NONE, 5251148);
allocate([113,104,95,102,117,114,116,104,101,115,116,111,117,116,58,32,112,37,100,32,105,115,32,102,117,114,116,104,101,115,116,32,111,117,116,115,105,100,101,32,112,111,105,110,116,32,111,102,32,102,37,100,10,0] /* qh_furthestout: p%d  */, "i8", ALLOC_NONE, 5251184);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5251240);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,109,101,114,103,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of merged f */, "i8", ALLOC_NONE, 5251304);
allocate([32,116,111,112,0] /*  top\00 */, "i8", ALLOC_NONE, 5251336);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,86,111,114,111,110,111,105,32,118,101,114,116,101,120,32,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5251344);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,108,111,119,101,114,0] /* calls to findbestlow */, "i8", ALLOC_NONE, 5251400);
allocate([113,104,95,102,117,114,116,104,101,115,116,110,101,120,116,58,32,109,97,100,101,32,102,37,100,32,110,101,120,116,32,102,97,99,101,116,40,100,105,115,116,32,37,46,50,103,41,10,0] /* qh_furthestnext: mad */, "i8", ALLOC_NONE, 5251424);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,10,0] /* qh_mergesimplex: upd */, "i8", ALLOC_NONE, 5251476);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5251528);
allocate([10,81,104,117,108,108,32,104,97,115,32,102,105,110,105,115,104,101,100,32,99,111,110,115,116,114,117,99,116,105,110,103,32,116,104,101,32,104,117,108,108,46,0] /* \0AQhull has finishe */, "i8", ALLOC_NONE, 5251576);
allocate([32,32,32,32,45,32,102,108,97,103,115,58,0] /*     - flags:\00 */, "i8", ALLOC_NONE, 5251620);
allocate([102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* flipped facets\00 */, "i8", ALLOC_NONE, 5251636);
allocate([32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,116,104,97,116,32,119,101,114,101,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,0] /*   inside points that */, "i8", ALLOC_NONE, 5251652);
allocate([37,115,32,115,101,116,61,37,112,32,109,97,120,115,105,122,101,61,37,100,32,115,105,122,101,61,37,100,32,101,108,101,109,115,61,0] /* %s set=%p maxsize=%d */, "i8", ALLOC_NONE, 5251700);
allocate([113,104,95,102,114,101,101,113,104,117,108,108,50,58,32,102,114,101,101,32,103,108,111,98,97,108,32,109,101,109,111,114,121,10,0] /* qh_freeqhull2: free  */, "i8", ALLOC_NONE, 5251736);
allocate([113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,32,111,117,116,32,111,102,32,37,100,32,102,97,99,101,116,115,10,0] /* qh_findgood_all: %d  */, "i8", ALLOC_NONE, 5251772);
allocate([113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,97,112,101,120,32,118,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_mergesimplex: mer */, "i8", ALLOC_NONE, 5251832);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,109,101,114,103,105,110,103,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5251888);
allocate([45,32,102,37,100,10,0] /* - f%d\0A\00 */, "i8", ALLOC_NONE, 5251932);
allocate([32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,107,101,112,116,32,119,105,116,104,32,97,32,102,97,99,101,116,0] /*   inside points kept */, "i8", ALLOC_NONE, 5251940);
allocate([113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,119,98,101,115,116,63,32,37,100,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbesthorizon:  */, "i8", ALLOC_NONE, 5251976);
allocate([113,104,95,102,114,101,101,98,117,105,108,100,58,32,102,114,101,101,32,109,101,109,111,114,121,32,102,114,111,109,32,113,104,95,105,110,105,116,104,117,108,108,32,97,110,100,32,113,104,95,98,117,105,108,100,104,117,108,108,10,0] /* qh_freebuild: free m */, "i8", ALLOC_NONE, 5252040);
allocate([113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0] /* qh_findgood_all: f%d */, "i8", ALLOC_NONE, 5252104);
allocate([113,104,95,109,101,114,103,101,114,105,100,103,101,115,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergeridges: merg */, "i8", ALLOC_NONE, 5252160);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,113,104,117,108,108,58,32,37,100,10,0] /*   Number of distance */, "i8", ALLOC_NONE, 5252208);
allocate([32,78,85,76,76,102,97,99,101,116,10,0] /*  NULLfacet\0A\00 */, "i8", ALLOC_NONE, 5252252);
allocate([105,110,115,105,100,101,32,112,111,105,110,116,115,0] /* inside points\00 */, "i8", ALLOC_NONE, 5252264);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,97,32,118,101,114,116,101,120,32,102,111,114,32,101,118,101,114,121,32,102,97,99,101,116,40,39,81,86,45,37,100,39,41,46,10,0] /* qhull warning: point */, "i8", ALLOC_NONE, 5252280);
allocate([113,104,95,109,101,114,103,101,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_mergeneighbors: m */, "i8", ALLOC_NONE, 5252344);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,104,117,108,108,58,32,37,100,10,0] /*   Number of facets i */, "i8", ALLOC_NONE, 5252396);
allocate([32,68,85,80,76,73,67,65,84,69,114,105,100,103,101,10,0] /*  DUPLICATEridge\0A\0 */, "i8", ALLOC_NONE, 5252428);
allocate([32,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,102,111,114,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,0] /*   repartitioned copl */, "i8", ALLOC_NONE, 5252448);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,110,111,116,32,97,32,118,101,114,116,101,120,40,39,81,86,37,100,39,41,46,10,0] /* qhull warning: point */, "i8", ALLOC_NONE, 5252504);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,50,100,58,32,109,101,114,103,101,100,32,118,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergefacet2d: mer */, "i8", ALLOC_NONE, 5252556);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,104,121,112,101,114,112,108,97,110,101,115,32,99,114,101,97,116,101,100,58,32,37,100,10,0] /*   Number of hyperpla */, "i8", ALLOC_NONE, 5252620);
allocate([113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,58,32,100,101,108,101,116,101,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qh_deletevisible: de */, "i8", ALLOC_NONE, 5252660);
allocate([32,77,69,82,71,69,114,105,100,103,101,10,0] /*  MERGEridge\0A\00 */, "i8", ALLOC_NONE, 5252720);
allocate([97,110,103,108,101,32,116,101,115,116,115,32,102,111,114,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,0] /* angle tests for repa */, "i8", ALLOC_NONE, 5252736);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,103,111,111,100,32,118,101,114,116,101,120,32,112,37,100,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,108,97,115,116,32,103,111,111,100,32,102,97,99,101,116,32,102,37,100,46,32,32,73,103,110,111,114,101,100,46,10,0] /* qhull warning: good  */, "i8", ALLOC_NONE, 5252784);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,101,110,100,32,111,102,32,119,105,100,101,32,116,114,97,99,105,110,103,10,0] /* qh_mergefacet: end o */, "i8", ALLOC_NONE, 5252864);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,58,32,37,100,10,0] /*   Number of points p */, "i8", ALLOC_NONE, 5252900);
allocate([35,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* # ridge between f%d  */, "i8", ALLOC_NONE, 5252936);
allocate([32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,98,101,116,116,101,114,32,116,104,97,110,32,98,101,115,116,102,97,99,101,116,0] /*  horizon facets bett */, "i8", ALLOC_NONE, 5252964);
allocate([113,104,95,98,97,115,101,118,101,114,116,105,99,101,115,58,32,102,111,117,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qh_basevertices: fou */, "i8", ALLOC_NONE, 5253004);
allocate([113,104,95,102,105,110,100,103,111,111,100,58,32,102,111,117,110,100,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,119,105,116,104,32,37,100,32,103,111,111,100,32,104,111,114,105,122,111,110,10,0] /* qh_findgood: found % */, "i8", ALLOC_NONE, 5253040);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d free */, "i8", ALLOC_NONE, 5253096);
allocate([79,70,70,32,51,32,49,32,49,32,35,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* OFF 3 1 1 # ridge be */, "i8", ALLOC_NONE, 5253152);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,104,111,114,105,122,111,110,0] /* calls to findhorizon */, "i8", ALLOC_NONE, 5253188);
allocate([113,104,95,102,105,110,100,103,111,111,100,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0] /* qh_findgood: f%d is  */, "i8", ALLOC_NONE, 5253212);
allocate([67,101,110,116,114,117,109,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Centrum-postmerge-wi */, "i8", ALLOC_NONE, 5253264);
allocate([79,112,116,105,111,110,32,39,81,120,39,32,109,97,121,32,97,118,111,105,100,32,116,104,105,115,32,112,114,111,98,108,101,109,46,10,0] /* Option 'Qx' may avoi */, "i8", ALLOC_NONE, 5253296);
allocate([113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,101,100,32,112,37,100,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,110,101,119,32,98,97,108,97,110,99,101,32,37,50,46,50,103,32,112,111,105,110,116,32,98,97,108,97,110,99,101,32,37,50,46,50,103,10,0] /* qh_addpoint: added p */, "i8", ALLOC_NONE, 5253336);
allocate([32,81,82,37,100,10,10,0] /*  QR%d\0A\0A\00 */, "i8", ALLOC_NONE, 5253412);
allocate([51,32,48,32,49,32,50,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,0] /* 3 0 1 2 %8.4g %8.4g  */, "i8", ALLOC_NONE, 5253420);
allocate([32,99,97,108,108,115,32,100,117,101,32,116,111,32,113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,0] /*  calls due to qh_sha */, "i8", ALLOC_NONE, 5253448);
allocate([10,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,79,110,108,121,32,37,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,46,32,32,67,97,110,32,110,111,116,32,109,101,114,103,101,32,97,110,111,116,104,101,114,10,112,97,105,114,46,32,32,84,104,101,32,105,110,112,117,116,32,105,115,32,116,111,111,32,100,101,103,101,110,101,114,97,116,101,32,111,114,32,116,104,101,32,99,111,110,118,101,120,105,116,121,32,99,111,110,115,116,114,97,105,110,116,115,32,97,114,101,10,116,111,111,32,115,116,114,111,110,103,46,10,0] /* \0Aqhull precision e */, "i8", ALLOC_NONE, 5253480);
allocate([10,83,116,97,116,105,115,116,105,99,115,32,102,111,114,58,32,37,115,32,124,32,37,115,0] /* \0AStatistics for: % */, "i8", ALLOC_NONE, 5253632);
allocate([35,32,114,37,100,32,98,101,116,119,101,101,110,32,102,37,100,32,102,37,100,10,0] /* # r%d between f%d f% */, "i8", ALLOC_NONE, 5253660);
allocate([32,97,118,101,46,32,99,108,101,97,114,108,121,32,98,101,116,116,101,114,0] /*  ave. clearly better */, "i8", ALLOC_NONE, 5253684);
allocate([113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,58,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0] /* qh_findbestlower: f% */, "i8", ALLOC_NONE, 5253708);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,101,105,116,104,101,114,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,116,104,101,32,115,97,109,101,32,111,114,32,111,110,101,32,105,115,32,97,32,118,105,115,105,98,108,101,32,102,97,99,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5253756);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,116,114,105,97,110,103,117,108,97,116,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of triangul */, "i8", ALLOC_NONE, 5253856);
allocate([79,70,70,32,51,32,49,32,49,32,35,32,102,37,100,10,0] /* OFF 3 1 1 # f%d\0A\0 */, "i8", ALLOC_NONE, 5253896);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,97,110,103,108,101,32,37,50,46,50,103,32,110,101,97,114,122,101,114,111,32,37,100,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5253916);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,110,101,119,0] /* calls to findbestnew */, "i8", ALLOC_NONE, 5253968);
allocate([10,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,41,58,32,97,108,108,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,97,99,101,116,32,37,100,32,97,114,101,32,102,108,105,112,112,101,100,32,111,114,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,46,10,80,108,101,97,115,101,32,114,101,112,111,114,116,32,116,104,105,115,32,101,114,114,111,114,32,116,111,32,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,32,119,105,116,104,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,46,10,0] /* \0AQhull internal er */, "i8", ALLOC_NONE, 5253992);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,35,37,100,32,109,101,114,103,101,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,109,105,110,100,105,115,116,61,32,37,50,46,50,103,44,32,109,97,120,100,105,115,116,61,32,37,50,46,50,103,10,0] /* qh_mergefacet: #%d m */, "i8", ALLOC_NONE, 5254180);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5254252);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5254296);
allocate([125,93,0] /* }]\00 */, "i8", ALLOC_NONE, 5254320);
allocate([99,111,110,99,97,118,101,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0] /* concave half ridges  */, "i8", ALLOC_NONE, 5254324);
allocate([32,97,118,101,46,32,99,111,112,108,97,110,97,114,32,115,101,97,114,99,104,0] /*  ave. coplanar searc */, "i8", ALLOC_NONE, 5254356);
allocate([37,115,32,115,101,116,32,105,115,32,110,117,108,108,10,0] /* %s set is null\0A\00 */, "i8", ALLOC_NONE, 5254380);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,35,37,100,32,105,110,118,111,108,118,105,110,103,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0] /* qh_mergefacet: ===== */, "i8", ALLOC_NONE, 5254396);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of 'good' f */, "i8", ALLOC_NONE, 5254472);
allocate([123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,0] /* {%16.8f, %16.8f, %16 */, "i8", ALLOC_NONE, 5254504);
allocate([32,109,97,120,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0] /*  max. facets tested\ */, "i8", ALLOC_NONE, 5254532);
allocate([113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,32,105,115,99,104,101,99,107,109,97,120,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,32,109,105,110,115,101,97,114,99,104,32,37,50,46,50,103,32,115,101,97,114,99,104,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbesthorizon:  */, "i8", ALLOC_NONE, 5254552);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,51,118,101,114,116,101,120,41,58,32,114,105,100,103,101,115,32,102,111,114,32,102,97,99,101,116,32,37,100,32,100,111,110,39,116,32,109,97,116,99,104,32,117,112,46,32,32,103,111,116,32,97,116,32,108,101,97,115,116,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5254672);
allocate([113,104,95,102,114,101,101,98,117,102,102,101,114,115,58,32,102,105,110,105,115,104,101,100,10,0] /* qh_freebuffers: fini */, "i8", ALLOC_NONE, 5254768);
allocate([113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,119,105,100,101,32,109,101,114,103,101,32,35,37,100,40,37,50,46,50,103,41,32,102,111,114,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,108,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* qh_mergefacet: ===== */, "i8", ALLOC_NONE, 5254796);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,58,32,37,100,10,0] /*   Number of facets:  */, "i8", ALLOC_NONE, 5254888);
allocate([80,111,108,121,103,111,110,91,123,0] /* Polygon[{\00 */, "i8", ALLOC_NONE, 5254912);
allocate([32,97,118,101,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0] /*  ave. facets tested\ */, "i8", ALLOC_NONE, 5254924);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,51,118,101,114,116,101,120,41,58,32,111,110,108,121,32,37,100,32,118,101,114,116,105,99,101,115,32,102,111,114,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5254944);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5255028);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of %s point */, "i8", ALLOC_NONE, 5255124);
allocate([93,0] /* ]\00 */, "i8", ALLOC_NONE, 5255152);
allocate([99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,0] /* calls to findbest\00 */, "i8", ALLOC_NONE, 5255156);
allocate([112,37,100,32,100,105,115,116,32,37,46,50,103,44,32,0] /* p%d dist %.2g, \00 */, "i8", ALLOC_NONE, 5255176);
allocate([113,104,95,99,114,101,97,116,101,115,105,109,112,108,101,120,58,32,99,114,101,97,116,101,100,32,115,105,109,112,108,101,120,10,0] /* qh_createsimplex: cr */, "i8", ALLOC_NONE, 5255192);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,100,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255228);
allocate([113,104,95,100,101,108,102,97,99,101,116,58,32,100,101,108,101,116,101,32,102,37,100,10,0] /* qh_delfacet: delete  */, "i8", ALLOC_NONE, 5255296);
allocate([91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,0] /* [%16.8f, %16.8f, %16 */, "i8", ALLOC_NONE, 5255324);
allocate([32,32,32,32,109,97,120,105,109,117,109,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*     maximum vertices */, "i8", ALLOC_NONE, 5255352);
allocate([112,111,105,110,116,115,0] /* points\00 */, "i8", ALLOC_NONE, 5255396);
allocate([113,104,95,99,108,101,97,114,99,101,110,116,101,114,115,58,32,115,119,105,116,99,104,101,100,32,116,111,32,99,101,110,116,101,114,32,116,121,112,101,32,37,100,10,0] /* qh_clearcenters: swi */, "i8", ALLOC_NONE, 5255404);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255452);
allocate([91,0] /* [\00 */, "i8", ALLOC_NONE, 5255524);
allocate([116,111,116,97,108,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,0] /* total vertices delet */, "i8", ALLOC_NONE, 5255528);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0] /* qhull error (qh_appe */, "i8", ALLOC_NONE, 5255552);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,110,101,105,103,104,98,111,114,32,102,37,100,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,118,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5255644);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_vneigh */, "i8", ALLOC_NONE, 5255720);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5255784);
allocate([44,10,0] /* ,\0A\00 */, "i8", ALLOC_NONE, 5255840);
allocate([112,97,114,116,105,116,105,111,110,105,110,103,32,115,116,97,116,105,115,116,105,99,115,40,115,101,101,32,112,114,101,118,105,111,117,115,32,102,111,114,32,111,117,116,101,114,32,112,108,97,110,101,115,41,0] /* partitioning statist */, "i8", ALLOC_NONE, 5255844);
allocate([113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,100,101,116,32,37,50,46,50,103,32,102,97,99,116,111,114,32,37,50,46,50,103,32,0] /* qh_voronoi_center: d */, "i8", ALLOC_NONE, 5255900);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,118,101,114,116,101,120,32,105,100,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5255944);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,111,108,100,32,114,105,100,103,101,115,32,97,110,100,32,37,100,32,110,101,119,32,111,110,101,115,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5256008);
allocate([67,101,110,116,114,117,109,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Centrum-premerge-wit */, "i8", ALLOC_NONE, 5256068);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,100,100,112,111,105,110,116,41,58,32,78,85,76,76,32,102,97,99,101,116,46,32,32,78,101,101,100,32,116,111,32,99,97,108,108,32,113,104,95,102,105,110,100,98,101,115,116,102,97,99,101,116,32,102,105,114,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256100);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of vertices */, "i8", ALLOC_NONE, 5256188);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,32,125,10,0] /* %8.4g %8.4g %8.4g 1. */, "i8", ALLOC_NONE, 5256216);
allocate([32,32,109,97,120,32,118,101,114,116,101,120,95,118,105,115,105,116,47,50,0] /*   max vertex_visit/2 */, "i8", ALLOC_NONE, 5256244);
allocate([113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,97,116,32,105,110,102,105,110,105,116,121,32,102,111,114,32,0] /* qh_voronoi_center: a */, "i8", ALLOC_NONE, 5256268);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,105,100,32,37,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256304);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,41,58,32,98,97,100,32,114,105,100,103,101,32,114,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256364);
allocate([10,67,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AConvex hull of %d */, "i8", ALLOC_NONE, 5256424);
allocate([37,100,32,0] /* %d \00 */, "i8", ALLOC_NONE, 5256464);
allocate([32,32,109,97,120,32,118,105,115,105,116,95,105,100,47,50,0] /*   max visit_id/2\00 */, "i8", ALLOC_NONE, 5256468);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,32,32,110,101,101,100,32,97,116,32,108,101,97,115,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,99,111,110,115,116,114,117,99,116,32,97,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256488);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,102,97,99,101,116,115,32,37,100,32,45,32,35,101,100,103,101,115,32,37,100,32,33,61,32,50,10,32,32,32,32,32,32,32,32,65,32,118,101,114,116,101,120,32,97,112,112,101,97,114,115,32,116,119,105,99,101,32,105,110,32,97,32,101,100,103,101,32,108,105,115,116,46,32,32,77,97,121,32,111,99,99,117,114,32,100,117,114,105,110,103,32,109,101,114,103,105,110,103,46,0] /* qhull warning: #vert */, "i8", ALLOC_NONE, 5256588);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,97,100,100,32,114,105,100,103,101,115,32,116,111,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5256720);
allocate([113,104,95,97,112,112,101,110,100,102,97,99,101,116,58,32,97,112,112,101,110,100,32,102,37,100,32,116,111,32,102,97,99,101,116,95,108,105,115,116,10,0] /* qh_appendfacet: appe */, "i8", ALLOC_NONE, 5256768);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5256812);
allocate([37,56,46,52,103,32,0] /* %8.4g \00 */, "i8", ALLOC_NONE, 5256868);
allocate([113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,109,105,100,112,111,105,110,116,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_detvnorm: points  */, "i8", ALLOC_NONE, 5256876);
allocate([32,32,114,101,115,101,116,115,32,111,102,32,118,101,114,116,101,120,95,118,105,115,105,116,0] /*   resets of vertex_v */, "i8", ALLOC_NONE, 5256924);
allocate([113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,58,32,37,100,10,0] /* qh_sharpnewfacets: % */, "i8", ALLOC_NONE, 5256952);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,33,61,32,35,102,97,99,101,116,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5256976);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,114,105,100,103,101,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_ridges */, "i8", ALLOC_NONE, 5257044);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of 'good' i */, "i8", ALLOC_NONE, 5257104);
allocate([76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0] /* Last point added to  */, "i8", ALLOC_NONE, 5257148);
allocate([123,32,79,70,70,32,37,100,32,49,32,49,32,35,32,102,37,100,10,0] /* { OFF %d 1 1 # f%d\0 */, "i8", ALLOC_NONE, 5257184);
allocate([99,111,112,108,97,110,97,114,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0] /* coplanar half ridges */, "i8", ALLOC_NONE, 5257204);
allocate([114,101,115,101,116,115,32,111,102,32,118,105,115,105,116,95,105,100,0] /* resets of visit_id\0 */, "i8", ALLOC_NONE, 5257236);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,110,101,119,95,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257256);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,118,101,114,116,101,120,32,99,111,117,110,116,32,105,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257340);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,37,100,32,110,101,105,103,104,98,111,114,115,32,97,110,100,32,97,100,100,101,100,32,37,100,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5257444);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of intersec */, "i8", ALLOC_NONE, 5257504);
allocate([76,105,110,101,91,123,123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,44,32,123,37,49,54,46,56,102,44,32,37,49,54,46,56,102,125,125,93,10,0] /* Line[{{%16.8f, %16.8 */, "i8", ALLOC_NONE, 5257544);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,112,101,114,32,99,104,101,99,107,0] /*   ave. distance test */, "i8", ALLOC_NONE, 5257588);
allocate([113,104,95,102,105,110,100,98,101,115,116,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,44,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,10,0] /* qh_findbest: neighbo */, "i8", ALLOC_NONE, 5257620);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,105,110,99,111,110,115,105,115,116,101,110,116,46,32,32,84,111,116,118,110,101,105,103,104,98,111,114,115,32,37,100,44,32,116,111,116,118,101,114,116,105,99,101,115,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5257672);
allocate([113,104,95,102,114,101,101,98,117,102,102,101,114,115,58,32,102,114,101,101,105,110,103,32,117,112,32,103,108,111,98,97,108,32,109,101,109,111,114,121,32,98,117,102,102,101,114,115,10,0] /* qh_freebuffers: free */, "i8", ALLOC_NONE, 5257780);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5257832);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of %s halfs */, "i8", ALLOC_NONE, 5257876);
allocate([91,91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,44,32,91,37,49,54,46,56,102,44,32,37,49,54,46,56,102,93,93,10,0] /* [[%16.8f, %16.8f], [ */, "i8", ALLOC_NONE, 5257908);
allocate([112,111,105,110,116,115,32,99,104,101,99,107,101,100,32,102,111,114,32,102,97,99,101,116,115,39,32,111,117,116,101,114,32,112,108,97,110,101,115,0] /* points checked for f */, "i8", ALLOC_NONE, 5257948);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,110,101,105,103,104,98,111,114,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0] /* qh_mergecycle_neighb */, "i8", ALLOC_NONE, 5257988);
allocate([44,0] /* ,\00 */, "i8", ALLOC_NONE, 5258052);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,116,111,32,114,101,112,111,114,116,32,109,105,110,105,109,117,109,32,118,101,114,116,101,120,0] /* distance tests to re */, "i8", ALLOC_NONE, 5258056);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,102,97,99,101,116,32,99,111,117,110,116,32,105,115,32,37,100,32,45,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258096);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0] /* qh_mergecycle_facets */, "i8", ALLOC_NONE, 5258220);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,10,0] /* %8.4g %8.4g %8.4g 1. */, "i8", ALLOC_NONE, 5258284);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,102,97,99,101,116,32,118,105,115,105,98,105,108,105,116,121,0] /* distance tests for f */, "i8", ALLOC_NONE, 5258308);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,102,111,114,32,118,101,114,116,101,120,32,118,37,100,32,102,105,114,115,116,95,112,111,105,110,116,32,37,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258344);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,97,107,101,32,110,101,119,102,97,99,101,116,32,110,101,119,32,97,110,100,32,115,97,109,101,99,121,99,108,101,32,100,101,108,101,116,101,100,10,0] /* qh_mergecycle_facets */, "i8", ALLOC_NONE, 5258432);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,10,0] /* %8.4g %8.4g %8.4g\0A */, "i8", ALLOC_NONE, 5258496);
allocate([103,111,111,100,32,102,97,99,101,116,115,32,102,111,117,110,100,0] /* good facets found\00 */, "i8", ALLOC_NONE, 5258536);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,111,114,32,102,37,100,32,105,115,32,97,108,114,101,97,100,121,32,97,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,10,0] /* qhull error (qh_appe */, "i8", ALLOC_NONE, 5258556);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,105,115,105,98,108,101,32,108,105,115,116,32,102,37,100,32,110,111,32,108,111,110,103,101,114,32,111,110,32,102,97,99,101,116,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258636);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,109,101,114,103,101,100,32,37,100,32,115,97,109,101,32,99,121,99,108,101,115,32,111,114,32,102,97,99,101,116,115,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,115,10,0] /* qh_mergecycle_all: m */, "i8", ALLOC_NONE, 5258720);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,121,116,101,115,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5258796);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,110,111,110,45,114,101,100,117,110,100,97,110,116,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of non-redu */, "i8", ALLOC_NONE, 5258868);
allocate([86,69,67,84,32,49,32,50,32,49,32,50,32,49,32,35,32,102,37,100,10,0] /* VECT 1 2 1 2 1 # f%d */, "i8", ALLOC_NONE, 5258912);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,100,105,100,110,39,116,32,99,114,101,97,116,101,32,97,32,103,111,111,100,32,110,101,119,32,102,97,99,101,116,41,0] /* points ignored(didn' */, "i8", ALLOC_NONE, 5258936);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,102,37,100,32,104,97,115,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,98,101,102,111,114,101,32,113,104,32,102,97,99,101,116,95,110,101,120,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5258984);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,41,58,32,102,37,100,32,119,105,116,104,111,117,116,32,110,111,114,109,97,108,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5259072);
allocate([81,104,117,108,108,58,32,97,108,103,111,114,105,116,104,109,32,99,111,109,112,108,101,116,101,100,10,0] /* Qhull: algorithm com */, "i8", ALLOC_NONE, 5259136);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0] /*   Number of halfspac */, "i8", ALLOC_NONE, 5259164);
allocate([65,110,103,108,101,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Angle-postmerge-with */, "i8", ALLOC_NONE, 5259192);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,120,116,114,101,109,101,115,95,50,100,41,58,32,108,111,111,112,32,105,110,32,102,97,99,101,116,32,108,105,115,116,46,32,32,102,97,99,101,116,32,37,100,32,110,101,120,116,102,97,99,101,116,32,37,100,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5259220);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,97,32,103,111,111,100,32,102,97,99,101,116,41,0] /* points ignored(!abov */, "i8", ALLOC_NONE, 5259308);
allocate([113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,58,32,99,104,101,99,107,32,97,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0] /* qh_checkpolygon: che */, "i8", ALLOC_NONE, 5259344);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,98,101,103,105,110,10,0] /* qh_mergecycle_all: b */, "i8", ALLOC_NONE, 5259388);
allocate([10,72,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AHalfspace interse */, "i8", ALLOC_NONE, 5259416);
allocate([51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,114,37,100,32,102,37,100,32,102,37,100,10,0] /* 3 %d %d %d %8.4g %8. */, "i8", ALLOC_NONE, 5259484);
allocate([112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,109,97,120,95,111,117,116,115,105,100,101,41,0] /* points ignored(!abov */, "i8", ALLOC_NONE, 5259532);
allocate([10,65,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,111,99,99,117,114,115,32,119,104,101,110,32,105,116,115,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,10,103,114,101,97,116,101,114,32,116,104,97,110,32,37,50,46,50,103,44,32,116,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,46,10,0] /* \0AA flipped facet o */, "i8", ALLOC_NONE, 5259568);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,101,110,100,32,111,102,32,116,114,97,99,101,32,102,97,99,101,116,10,0] /* qh_mergecycle: end o */, "i8", ALLOC_NONE, 5259684);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5259720);
allocate([51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,32,102,37,100,32,102,37,100,10,0] /* 3 %d %d %d %8.4g %8. */, "i8", ALLOC_NONE, 5259772);
allocate([100,101,116,101,114,109,105,110,97,110,116,115,32,110,111,116,32,99,111,109,112,117,116,101,100,32,98,101,99,97,117,115,101,32,118,101,114,116,101,120,32,116,111,111,32,108,111,119,0] /* determinants not com */, "i8", ALLOC_NONE, 5259816);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5259868);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0] /*   Number of%s Delaun */, "i8", ALLOC_NONE, 5259932);
allocate([79,112,116,105,111,110,115,32,115,101,108,101,99,116,101,100,32,102,111,114,32,81,104,117,108,108,32,37,115,58,10,37,115,10,0] /* Options selected for */, "i8", ALLOC_NONE, 5259968);
allocate([41,41,59,10,0] /* ));\0A\00 */, "i8", ALLOC_NONE, 5260004);
allocate([112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,40,99,111,114,114,101,99,116,101,100,32,117,110,108,101,115,115,32,39,81,48,39,32,111,114,32,97,110,32,101,114,114,111,114,41,0] /* precision problems ( */, "i8", ALLOC_NONE, 5260012);
allocate([100,101,116,101,114,109,105,110,97,110,116,115,32,99,111,109,112,117,116,101,100,40,97,114,101,97,32,38,32,105,110,105,116,105,97,108,32,104,117,108,108,41,0] /* determinants compute */, "i8", ALLOC_NONE, 5260068);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5260112);
allocate([113,104,95,115,101,116,100,101,108,97,117,110,97,121,58,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0] /* qh_setdelaunay: proj */, "i8", ALLOC_NONE, 5260192);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,115,32,114,37,100,32,97,110,100,32,114,37,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5260268);
allocate([32,102,37,100,0] /*  f%d\00 */, "i8", ALLOC_NONE, 5260352);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,105,110,112,117,116,32,115,105,116,101,115,37,115,58,32,37,100,10,0] /*   Number of input si */, "i8", ALLOC_NONE, 5260360);
allocate([101,110,100,10,0] /* end\0A\00 */, "i8", ALLOC_NONE, 5260392);
allocate([115,101,97,114,99,104,101,115,32,111,102,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,0] /* searches of all poin */, "i8", ALLOC_NONE, 5260400);
allocate([113,104,95,115,99,97,108,101,112,111,105,110,116,115,58,32,115,99,97,108,101,100,32,37,100,39,116,104,32,99,111,111,114,100,105,110,97,116,101,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,37,46,50,103,44,32,37,46,50,103,93,32,102,111,114,32,37,100,32,112,111,105,110,116,115,32,98,121,32,37,50,46,50,103,32,97,110,100,32,115,104,105,102,116,101,100,32,37,50,46,50,103,10,0] /* qh_scalepoints: scal */, "i8", ALLOC_NONE, 5260444);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,32,32,109,97,120,95,111,117,116,115,105,100,101,32,37,50,46,50,103,10,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5260560);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5260604);
allocate([113,104,95,112,114,101,109,101,114,103,101,58,32,112,114,101,109,101,114,103,101,32,99,101,110,116,114,117,109,32,37,50,46,50,103,32,97,110,103,108,101,32,37,50,46,50,103,32,102,111,114,32,97,112,101,120,32,118,37,100,32,102,97,99,101,116,108,105,115,116,32,102,37,100,10,0] /* qh_premerge: premerg */, "i8", ALLOC_NONE, 5260700);
allocate([32,32,115,97,109,101,32,99,121,99,108,101,58,0] /*   same cycle:\00 */, "i8", ALLOC_NONE, 5260776);
allocate([10,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0ADelaunay triangul */, "i8", ALLOC_NONE, 5260792);
allocate([125,10,0] /* }\0A\00 */, "i8", ALLOC_NONE, 5260860);
allocate([32,32,110,117,109,98,101,114,32,111,102,32,116,114,105,97,108,115,0] /*   number of trials\0 */, "i8", ALLOC_NONE, 5260864);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,37,100,39,116,104,32,100,105,109,101,110,115,105,111,110,39,115,32,110,101,119,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,10,0] /* qhull input error: % */, "i8", ALLOC_NONE, 5260884);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,32,98,117,116,10,32,110,111,116,32,105,110,32,97,32,114,105,100,103,101,46,32,32,84,104,105,115,32,105,115,32,111,107,32,117,110,100,101,114,32,109,101,114,103,105,110,103,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5260992);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,37,100,32,111,102,32,115,97,109,101,99,121,99,108,101,32,37,100,32,105,110,116,111,32,116,114,97,99,101,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0] /* qh_mergecycle: ===== */, "i8", ALLOC_NONE, 5261132);
allocate([10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AFurthest-site Del */, "i8", ALLOC_NONE, 5261224);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,110,100,41,58,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,37,100,32,33,61,32,110,117,109,98,101,114,32,112,114,105,110,116,101,100,32,37,100,32,97,110,100,32,97,116,32,101,110,100,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5261308);
allocate([97,118,101,114,97,103,101,32,112,97,114,116,105,116,105,111,110,32,98,97,108,97,110,99,101,0] /* average partition ba */, "i8", ALLOC_NONE, 5261400);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,98,37,100,39,32,111,114,32,39,81,66,37,100,39,32,105,110,118,101,114,116,115,32,112,97,114,97,98,111,108,111,105,100,32,115,105,110,99,101,32,104,105,103,104,32,98,111,117,110,100,32,37,46,50,103,32,60,32,108,111,119,32,98,111,117,110,100,32,37,46,50,103,10,0] /* qhull input error: ' */, "i8", ALLOC_NONE, 5261428);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,114,37,100,32,110,111,116,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5261524);
allocate([113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,37,100,10,0] /* qh_mergecycle: merge */, "i8", ALLOC_NONE, 5261608);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of%s non-si */, "i8", ALLOC_NONE, 5261688);
allocate([113,104,95,99,104,101,99,107,102,108,105,112,112,101,100,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_checkflipped: fac */, "i8", ALLOC_NONE, 5261740);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,102,97,99,101,116,115,32,112,114,105,110,116,101,100,10,0] /* qhull warning: no fa */, "i8", ALLOC_NONE, 5261808);
allocate([32,32,115,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,0] /*   standard deviation */, "i8", ALLOC_NONE, 5261844);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,78,101,119,32,98,111,117,110,100,115,32,91,48,44,32,37,50,46,50,103,93,32,97,114,101,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,40,119,105,100,116,104,32,37,50,46,50,103,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5261868);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,114,105,100,103,101,32,102,111,114,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262004);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5262092);
allocate([49,32,125,125,125,10,0] /* 1 }}}\0A\00 */, "i8", ALLOC_NONE, 5262188);
allocate([97,118,101,114,97,103,101,32,110,101,119,32,102,97,99,101,116,32,98,97,108,97,110,99,101,0] /* average new facet ba */, "i8", ALLOC_NONE, 5262196);
allocate([113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,37,100,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,100,101,103,101,110,32,111,114,32,114,101,100,117,110,100,97,110,116,32,102,97,99,101,116,115,46,10,0] /* qh_all_merges: merge */, "i8", ALLOC_NONE, 5262224);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,73,110,112,117,116,32,105,115,32,99,111,99,105,114,99,117,108,97,114,10,32,32,32,111,114,32,99,111,115,112,104,101,114,105,99,97,108,46,32,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,32,105,110,102,105,110,105,116,121,46,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5262320);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5262460);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,114,105,100,103,101,32,114,37,100,32,110,111,116,32,105,110,32,102,97,99,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262552);
allocate([113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,97,118,111,105,100,32,109,101,114,103,105,110,103,32,111,108,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,46,32,32,85,115,101,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,105,110,115,116,101,97,100,10,0] /* qh_merge_nonconvex:  */, "i8", ALLOC_NONE, 5262648);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,113,104,109,101,109,32,104,97,115,32,110,111,116,32,98,101,101,110,32,105,110,105,116,105,97,108,105,122,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262740);
allocate([32,32,78,117,109,98,101,114,32,111,102,37,115,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0] /*   Number of%s Vorono */, "i8", ALLOC_NONE, 5262812);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,48,10,0] /* %8.4g %8.4g %8.4g 0\ */, "i8", ALLOC_NONE, 5262848);
allocate([32,32,32,32,109,97,120,105,109,117,109,40,105,110,99,108,117,100,101,115,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,41,0] /*     maximum(includes */, "i8", ALLOC_NONE, 5262872);
allocate([113,104,95,115,99,97,108,101,108,97,115,116,58,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,102,114,111,109,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,48,44,37,50,46,50,103,93,10,0] /* qh_scalelast: scale  */, "i8", ALLOC_NONE, 5262912);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,115,32,37,100,32,118,101,114,116,105,99,101,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5262984);
allocate([113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,32,116,121,112,101,32,37,100,10,0] /* qh_merge_nonconvex:  */, "i8", ALLOC_NONE, 5263068);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,113,104,117,108,108,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263124);
allocate([32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Total number of ne */, "i8", ALLOC_NONE, 5263188);
allocate([65,110,103,108,101,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0] /* Angle-premerge-with- */, "i8", ALLOC_NONE, 5263236);
allocate([123,73,78,83,84,32,103,101,111,109,32,123,32,58,32,99,101,110,116,114,117,109,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,35,32,102,37,100,10,0] /* {INST geom { : centr */, "i8", ALLOC_NONE, 5263264);
allocate([97,118,101,46,32,110,101,119,32,111,114,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. new or merged f */, "i8", ALLOC_NONE, 5263308);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,114,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263348);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,37,100,32,110,101,105,103,104,98,111,114,115,44,32,109,101,114,103,101,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5263424);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0] /*   Number of nearly i */, "i8", ALLOC_NONE, 5263504);
allocate([123,73,78,83,84,32,103,101,111,109,32,123,32,100,101,102,105,110,101,32,99,101,110,116,114,117,109,32,67,81,85,65,68,32,32,35,32,102,37,100,10,45,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,45,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,10,0] /* {INST geom { define  */, "i8", ALLOC_NONE, 5263544);
allocate([97,118,101,46,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. horizon facets  */, "i8", ALLOC_NONE, 5263720);
allocate([113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,58,32,112,114,111,106,101,99,116,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,100,105,109,32,37,100,32,116,111,32,100,105,109,32,37,100,10,0] /* qh_projectpoints: pr */, "i8", ALLOC_NONE, 5263756);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,100,101,108,101,116,101,100,32,118,37,100,32,98,101,99,97,117,115,101,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5263820);
allocate([32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,101,108,101,116,101,100,32,112,111,105,110,116,115,32,100,117,101,32,116,111,32,109,101,114,103,105,110,103,58,32,37,100,10,0] /*   Total number of de */, "i8", ALLOC_NONE, 5263888);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,45,110,111,114,109,97,108,32,45,101,100,103,101,32,110,111,114,109,115,99,97,108,101,32,48,125,32,0] /* {appearance {-normal */, "i8", ALLOC_NONE, 5263944);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,110,111,114,109,41,58,32,116,111,111,32,102,101,119,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,109,112,117,116,101,32,115,101,112,97,114,97,116,105,110,103,32,112,108,97,110,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5263988);
allocate([97,118,101,46,32,118,105,115,105,98,108,101,32,118,101,114,116,105,99,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. visible vertice */, "i8", ALLOC_NONE, 5264072);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,41,58,32,110,101,119,100,105,109,32,37,100,32,115,104,111,117,108,100,32,98,101,32,37,100,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264108);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264192);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,46,32,32,68,101,108,101,116,101,100,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5264272);
allocate([10,87,104,105,108,101,32,101,120,101,99,117,116,105,110,103,58,32,37,115,32,124,32,37,115,10,0] /* \0AWhile executing:  */, "i8", ALLOC_NONE, 5264336);
allocate([32,48,10,0] /*  0\0A\00 */, "i8", ALLOC_NONE, 5264364);
allocate([109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,105,110,32,104,121,112,101,114,112,108,97,110,101,32,99,111,109,112,117,116,97,116,105,111,110,0] /* min. denominator in  */, "i8", ALLOC_NONE, 5264368);
allocate([32,32,32,32,109,97,120,105,109,117,109,0] /*     maximum\00 */, "i8", ALLOC_NONE, 5264412);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264424);
allocate([113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,112,114,111,106,101,99,116,101,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,10,0] /* qh_projectinput: pro */, "i8", ALLOC_NONE, 5264496);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,101,105,103,104,98,111,114,32,102,37,100,44,32,98,117,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264560);
allocate([113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,44,32,119,105,108,108,32,109,101,114,103,101,10,0] /* qh_merge_degenredund */, "i8", ALLOC_NONE, 5264664);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,98,101,103,105,110,41,58,32,99,97,110,32,110,111,116,32,117,115,101,32,116,104,105,115,32,102,111,114,109,97,116,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264732);
allocate([32,32,97,118,101,46,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*   ave. facets delete */, "i8", ALLOC_NONE, 5264812);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,72,65,76,70,115,112,97,99,101,32,100,101,102,105,110,101,100,32,119,105,116,104,111,117,116,32,113,104,46,102,101,97,115,105,98,108,101,95,112,111,105,110,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264848);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,119,97,115,32,112,37,100,46,0] /*   Last point added w */, "i8", ALLOC_NONE, 5264936);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,116,105,108,108,32,104,97,115,32,97,32,77,69,82,71,69,32,111,114,32,68,85,80,32,110,101,105,103,104,98,111,114,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5264964);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,97,110,116,41,58,32,102,37,100,32,114,101,100,117,110,100,97,110,116,32,98,117,116,32,102,37,100,32,104,97,115,32,110,111,32,114,101,112,108,97,99,101,109,101,110,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265048);
allocate([32,32,78,117,109,98,101,114,32,111,102,32,86,111,114,111,110,111,105,32,114,101,103,105,111,110,115,37,115,58,32,37,100,10,0] /*   Number of Voronoi  */, "i8", ALLOC_NONE, 5265140);
allocate([37,115,32,124,32,37,115,10,98,101,103,105,110,10,37,100,32,37,100,32,114,101,97,108,10,0] /* %s | %s\0Abegin\0A%d */, "i8", ALLOC_NONE, 5265176);
allocate([32,32,97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,119,105,116,104,111,117,116,32,97,110,32,104,111,114,105,122,111,110,32,110,101,105,103,104,98,111,114,0] /*   ave. visible facet */, "i8", ALLOC_NONE, 5265204);
allocate([113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,117,112,100,97,116,105,110,103,32,108,111,119,101,114,32,97,110,100,32,117,112,112,101,114,95,98,111,117,110,100,10,0] /* qh_projectinput: upd */, "i8", ALLOC_NONE, 5265256);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,114,105,100,103,101,115,32,37,100,32,60,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,111,114,40,51,45,100,41,32,62,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,40,50,45,100,41,32,110,111,116,32,97,108,108,32,50,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265308);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* qh_maydropneighbors: */, "i8", ALLOC_NONE, 5265432);
allocate([10,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AVoronoi diagram b */, "i8", ALLOC_NONE, 5265476);
allocate([37,100,10,37,100,32,37,100,32,37,100,10,0] /* %d\0A%d %d %d\0A\00 */, "i8", ALLOC_NONE, 5265536);
allocate([97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. visible facets  */, "i8", ALLOC_NONE, 5265552);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5265588);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,60,32,113,104,32,104,117,108,108,95,100,105,109,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265644);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_maydropneighbor:  */, "i8", ALLOC_NONE, 5265744);
allocate([10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0] /* \0AFurthest-site Vor */, "i8", ALLOC_NONE, 5265820);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,41,58,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,102,111,114,32,104,111,114,105,122,111,110,32,102,37,100,32,111,102,32,110,101,119,102,97,99,101,116,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5265896);
allocate([123,10,0] /* {\0A\00 */, "i8", ALLOC_NONE, 5266000);
allocate([109,97,120,46,32,118,101,114,116,105,99,101,115,32,97,116,32,97,110,121,32,111,110,101,32,116,105,109,101,0] /* max. vertices at any */, "i8", ALLOC_NONE, 5266004);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,100,105,109,101,110,115,105,111,110,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,32,37,100,32,33,61,32,104,117,108,108,95,100,105,109,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266036);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,33,61,32,50,42,113,104,32,104,117,108,108,95,100,105,109,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266124);
allocate([113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,110,111,32,114,105,100,103,101,115,32,116,111,32,97,32,110,101,105,103,104,98,111,114,10,0] /* qh_maydropneighbor:  */, "i8", ALLOC_NONE, 5266236);
allocate([10,65,116,32,97,32,112,114,101,109,97,116,117,114,101,32,101,120,105,116,32,100,117,101,32,116,111,32,39,84,86,110,39,44,32,39,84,67,110,39,44,32,39,84,82,110,39,44,32,111,114,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,119,105,116,104,32,39,81,74,110,39,46,0] /* \0AAt a premature ex */, "i8", ALLOC_NONE, 5266296);
allocate([80,76,79,84,51,68,40,80,79,76,89,71,79,78,83,40,10,0] /* PLOT3D(POLYGONS(\0A\ */, "i8", ALLOC_NONE, 5266376);
allocate([32,32,109,97,120,46,32,114,97,110,100,111,109,32,106,111,103,103,108,101,0] /*   max. random joggle */, "i8", ALLOC_NONE, 5266396);
allocate([113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,115,116,97,114,116,105,110,103,32,116,111,32,109,101,114,103,101,32,102,97,99,101,116,115,32,98,101,103,105,110,110,105,110,103,32,102,114,111,109,32,102,37,100,10,0] /* qh_all_merges: start */, "i8", ALLOC_NONE, 5266420);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,105,99,101,115,32,111,102,32,102,37,100,32,97,114,101,32,110,111,116,32,105,110,32,100,101,115,99,101,110,100,105,110,103,32,105,100,32,111,114,100,101,114,32,97,116,32,118,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5266480);
allocate([113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0] /* qh_mark_dupridges: f */, "i8", ALLOC_NONE, 5266576);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5266624);
allocate([113,104,95,112,114,101,99,105,115,105,111,110,58,32,113,104,117,108,108,32,114,101,115,116,97,114,116,32,98,101,99,97,117,115,101,32,111,102,32,37,115,10,0] /* qh_precision: qhull  */, "i8", ALLOC_NONE, 5266680);
allocate([80,76,79,84,40,67,85,82,86,69,83,40,10,0] /* PLOT(CURVES(\0A\00 */, "i8", ALLOC_NONE, 5266724);
allocate([114,101,116,114,105,101,115,32,100,117,101,32,116,111,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,0] /* retries due to preci */, "i8", ALLOC_NONE, 5266740);
allocate([113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,105,100,101,110,116,105,102,121,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,10,0] /* qh_mark_dupridges: i */, "i8", ALLOC_NONE, 5266776);
allocate([113,104,95,113,104,117,108,108,58,32,97,108,108,32,102,97,99,101,116,115,32,97,114,101,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,32,97,110,100,32,110,111,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,46,32,32,80,111,115,116,45,109,101,114,103,105,110,103,32,97,110,100,32,99,104,101,99,107,32,111,102,32,109,97,120,111,117,116,32,110,111,116,32,110,101,101,100,101,100,46,10,0] /* qh_qhull: all facets */, "i8", ALLOC_NONE, 5266824);
allocate([10,84,101,115,116,105,110,103,32,97,108,108,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,46,10,0] /* \0ATesting all copla */, "i8", ALLOC_NONE, 5266936);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,58,32,112,97,114,116,105,116,105,111,110,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,111,117,116,115,105,100,101,115,101,116,115,32,97,110,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,99,111,112,108,97,110,97,114,115,101,116,115,10,0] /* qh_partitionvisible: */, "i8", ALLOC_NONE, 5266968);
allocate([69,114,114,111,114,45,114,111,117,110,100,111,102,102,0] /* Error-roundoff\00 */, "i8", ALLOC_NONE, 5267064);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,105,115,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5267080);
allocate([112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,0] /* points processed\00 */, "i8", ALLOC_NONE, 5267136);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,100,101,108,101,116,101,100,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5267156);
allocate([113,104,95,109,97,107,101,114,105,100,103,101,115,58,32,109,97,107,101,32,114,105,100,103,101,115,32,102,111,114,32,102,37,100,10,0] /* qh_makeridges: make  */, "i8", ALLOC_NONE, 5267224);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,41,58,32,97,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,97,115,10,32,32,32,32,32,32,32,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,46,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5267260);
allocate([37,115,32,124,32,37,115,10,98,101,103,105,110,10,32,32,32,32,37,100,32,37,100,32,114,101,97,108,10,0] /* %s | %s\0Abegin\0A   */, "i8", ALLOC_NONE, 5267380);
allocate([98,117,105,108,100,32,104,117,108,108,32,115,116,97,116,105,115,116,105,99,115,0] /* build hull statistic */, "i8", ALLOC_NONE, 5267412);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,95,105,110,105,116,105,97,108,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0] /* qh_getmergeset_initi */, "i8", ALLOC_NONE, 5267436);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,97,108,108,32,102,97,99,101,116,115,44,32,99,108,111,115,101,115,116,32,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5267480);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,119,114,105,116,105,110,103,32,68,101,108,97,117,110,97,121,46,32,32,85,115,101,32,39,112,39,32,111,114,32,39,111,39,32,102,111,114,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,10,0] /* qhull warning: writi */, "i8", ALLOC_NONE, 5267560);
allocate([32,32,109,105,110,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0] /*   minimum facet area */, "i8", ALLOC_NONE, 5267632);
allocate([37,54,46,51,103,32,0] /* %6.3g \00 */, "i8", ALLOC_NONE, 5267656);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0] /* qh_getmergeset: %d m */, "i8", ALLOC_NONE, 5267664);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,102,97,99,101,116,32,102,37,100,32,40,100,114,111,112,112,101,100,41,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5267700);
allocate([52,79,70,70,32,37,100,32,37,100,32,49,10,0] /* 4OFF %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5267768);
allocate([109,105,110,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* min. distance of an  */, "i8", ALLOC_NONE, 5267784);
allocate([32,32,109,97,120,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0] /*   maximum facet area */, "i8", ALLOC_NONE, 5267832);
allocate([113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,115,116,97,114,116,101,100,46,10,0] /* qh_getmergeset: star */, "i8", ALLOC_NONE, 5267856);
allocate([48,32,49,32,49,32,49,32,32,35,32,99,111,108,111,114,32,111,102,32,112,111,105,110,116,115,10,0] /* 0 1 1 1  # color of  */, "i8", ALLOC_NONE, 5267884);
allocate([10,73,102,32,116,104,101,32,105,110,112,117,116,32,105,115,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,107,58,48,66,107,58,48,39,32,116,111,32,100,101,108,101,116,101,32,99,111,111,114,100,105,110,97,116,101,32,107,32,102,114,111,109,32,116,104,101,32,105,110,112,117,116,46,32,32,89,111,117,32,115,104,111,117,108,100,10,32,32,32,32,112,105,99,107,32,116,104,101,32,99,111,111,114,100,105,110,97,116,101,32,119,105,116,104,32,116,104,101,32,108,101,97,115,116,32,114,97,110,103,101,46,32,32,84,104,101,32,104,117,108,108,32,119,105,108,108,32,104,97,118,101,32,116,104,101,10,32,32,32,32,99,111,114,114,101,99,116,32,116,111,112,111,108,111,103,121,46,10,32,32,45,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,102,108,97,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,112,111,105,110,116,115,44,32,114,111,116,97,116,101,32,116,104,101,32,112,111,105,110,116,115,10,32,32,32,32,105,110,116,111,32,97,32,99,111,111,114,100,105,110,97,116,101,32,112,108,97,110,101,44,32,97,110,100,32,100,101,108,101,116,101,32,116,104,101,32,111,116,104,101,114,32,99,111,111,114,100,105,110,97,116,101,115,46,10,32,32,45,32,97,100,100,32,111,110,101,32,111,114,32,109,111,114,101,32,112,111,105,110,116,115,32,116,111,32,109,97,107,101,32,116,104,101,32,105,110,112,117,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,46,10,0] /* \0AIf the input is l */, "i8", ALLOC_NONE, 5267912);
allocate([116,111,116,97,108,32,97,114,101,97,32,111,102,32,102,97,99,101,116,115,0] /* total area of facets */, "i8", ALLOC_NONE, 5268364);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,108,101,99,116,101,100,32,112,111,105,110,116,32,112,37,100,32,102,111,114,32,37,100,96,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,100,101,116,61,37,50,46,50,103,10,0] /* qh_maxsimplex: selec */, "i8", ALLOC_NONE, 5268388);
allocate([32,32,116,101,115,116,104,111,114,105,122,111,110,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,0] /*   testhorizon? %d no */, "i8", ALLOC_NONE, 5268460);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,41,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,32,97,118,97,105,108,97,98,108,101,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5268492);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,99,114,111,115,115,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0] /* qh_forcedmerges: mer */, "i8", ALLOC_NONE, 5268560);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,110,101,119,63,32,37,100,32,40,111,114,32,110,97,114,114,111,119,104,117,108,108,41,10,0] /* qh_partitionpoint: p */, "i8", ALLOC_NONE, 5268644);
allocate([35,32,49,32,99,111,108,111,114,32,102,111,114,32,97,108,108,10,0] /* # 1 color for all\0A */, "i8", ALLOC_NONE, 5268720);
allocate([10,73,102,32,116,104,101,32,105,110,112,117,116,32,115,104,111,117,108,100,32,98,101,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,44,32,121,111,117,32,104,97,118,101,32,115,101,118,101,114,97,108,32,111,112,116,105,111,110,115,32,116,104,97,116,10,109,97,121,32,100,101,116,101,114,109,105,110,101,32,97,110,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,112,111,105,110,116,115,32,116,111,32,116,104,101,32,117,110,105,116,32,99,117,98,101,10,32,32,45,32,117,115,101,32,39,81,82,48,39,32,116,111,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,101,32,116,104,101,32,105,110,112,117,116,32,102,111,114,32,100,105,102,102,101,114,101,110,116,32,109,97,120,105,109,117,109,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,39,81,115,39,32,32,116,111,32,115,101,97,114,99,104,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,116,104,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,10,32,32,45,32,117,115,101,32,39,69,110,39,32,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,116,114,97,99,101,32,101,120,101,99,117,116,105,111,110,32,119,105,116,104,32,39,84,51,39,32,116,111,32,115,101,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,101,97,99,104,32,112,111,105,110,116,46,10,0] /* \0AIf the input shou */, "i8", ALLOC_NONE, 5268740);
allocate([32,32,109,105,110,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0] /*   minimum angle(cosi */, "i8", ALLOC_NONE, 5269228);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,99,111,112,121,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5269284);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,98,101,116,116,101,114,32,116,104,97,110,32,112,37,100,32,100,101,116,32,37,50,46,50,103,10,0] /* qh_maxsimplex: searc */, "i8", ALLOC_NONE, 5269336);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,44,32,100,105,115,116,32,37,50,46,50,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_forcedmerges: dup */, "i8", ALLOC_NONE, 5269428);
allocate([48,32,0] /* 0 \00 */, "i8", ALLOC_NONE, 5269528);
allocate([32,32,37,100,58,32,32,37,56,46,52,103,32,32,37,56,46,52,103,32,32,100,105,102,102,101,114,101,110,99,101,61,32,37,52,46,52,103,10,0] /*   %d:  %8.4g  %8.4g  */, "i8", ALLOC_NONE, 5269532);
allocate([32,32,109,97,120,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0] /*   maximum angle(cosi */, "i8", ALLOC_NONE, 5269572);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,97,116,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_gau */, "i8", ALLOC_NONE, 5269628);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,32,97,32,110,111,114,109,97,108,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5269720);
allocate([113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,46,10,0] /* qh_maxsimplex: searc */, "i8", ALLOC_NONE, 5269796);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,41,58,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,100,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,117,116,32,97,115,32,102,37,100,32,97,110,100,32,102,37,100,32,116,104,101,121,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5269860);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,102,97,99,101,116,32,102,37,100,40,111,114,32,105,110,115,105,100,101,41,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5269984);
allocate([113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,97,116,116,97,99,104,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,116,111,32,110,101,119,32,102,97,99,101,116,115,10,0] /* qh_attachnewfacets:  */, "i8", ALLOC_NONE, 5270068);
allocate([35,32,49,32,112,111,105,110,116,32,112,101,114,32,108,105,110,101,10,49,32,0] /* # 1 point per line\0 */, "i8", ALLOC_NONE, 5270128);
allocate([10,84,104,101,32,109,105,110,32,97,110,100,32,109,97,120,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,101,97,99,104,32,100,105,109,101,110,115,105,111,110,32,97,114,101,58,10,0] /* \0AThe min and max c */, "i8", ALLOC_NONE, 5270152);
allocate([97,118,101,114,97,103,101,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0] /* average angle(cosine */, "i8", ALLOC_NONE, 5270208);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_gau */, "i8", ALLOC_NONE, 5270264);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,111,110,32,116,104,101,32,118,105,115,105,98,108,101,95,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5270348);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,105,110,112,117,116,32,105,115,32,108,101,115,115,32,116,104,97,110,32,37,100,45,100,105,109,101,110,115,105,111,110,97,108,32,115,105,110,99,101,32,105,116,32,104,97,115,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,10,0] /* qhull input error: i */, "i8", ALLOC_NONE, 5270420);
allocate([113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0] /* qh_forcedmerges: beg */, "i8", ALLOC_NONE, 5270512);
allocate([86,69,67,84,32,37,100,32,37,100,32,49,10,0] /* VECT %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5270536);
allocate([10,66,101,99,97,117,115,101,32,111,102,32,116,104,101,32,104,105,103,104,32,100,105,109,101,110,115,105,111,110,44,32,116,104,101,32,109,105,110,32,120,45,99,111,111,114,100,105,110,97,116,101,32,97,110,100,32,109,97,120,45,99,111,111,114,100,105,110,97,116,101,10,112,111,105,110,116,115,32,97,114,101,32,117,115,101,100,32,105,102,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,105,115,32,110,111,110,45,122,101,114,111,46,32,32,79,112,116,105,111,110,32,39,81,115,39,32,119,105,108,108,10,100,111,32,97,32,98,101,116,116,101,114,44,32,116,104,111,117,103,104,32,109,117,99,104,32,115,108,111,119,101,114,44,32,106,111,98,46,32,32,73,110,115,116,101,97,100,32,111,102,32,39,81,115,39,44,32,121,111,117,32,99,97,110,32,99,104,97,110,103,101,10,116,104,101,32,112,111,105,110,116,115,32,98,121,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,105,110,103,32,116,104,101,32,105,110,112,117,116,32,119,105,116,104,32,39,81,82,48,39,46,10,0] /* \0ABecause of the hi */, "i8", ALLOC_NONE, 5270552);
allocate([32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,115,32,102,111,114,32,97,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0] /*   maximum merges for */, "i8", ALLOC_NONE, 5270816);
allocate([113,104,95,112,111,115,116,109,101,114,103,101,58,32,112,111,115,116,109,101,114,103,101,46,32,32,116,101,115,116,32,118,110,101,105,103,104,98,111,114,115,63,32,37,100,10,0] /* qh_postmerge: postme */, "i8", ALLOC_NONE, 5270860);
allocate([113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,100,101,116,58,32,100,101,103,101,110,101,114,97,116,101,32,110,111,114,109,32,100,117,114,105,110,103,32,112,37,100,46,10,0] /* qh_sethyperplane_det */, "i8", ALLOC_NONE, 5270908);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5270960);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,32,102,111,114,32,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,37,100,32,112,111,105,110,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5271056);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,116,111,32,97,32,103,111,111,100,32,110,101,105,103,104,98,111,114,10,0] /* qh_flippedmerges: me */, "i8", ALLOC_NONE, 5271156);
allocate([113,104,95,109,101,109,97,108,108,111,99,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,115,104,111,114,116,32,116,111,116,98,117,102,102,101,114,32,37,100,32,33,61,32,116,111,116,115,104,111,114,116,43,116,111,116,102,114,101,101,46,46,46,32,37,100,10,0] /* qh_memalloc internal */, "i8", ALLOC_NONE, 5271224);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,61,61,61,61,61,61,32,112,37,100,32,102,114,111,109,32,102,37,100,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,111,102,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5271300);
allocate([52,86,69,67,84,32,37,100,32,37,100,32,49,10,0] /* 4VECT %d %d 1\0A\00 */, "i8", ALLOC_NONE, 5271392);
allocate([10,84,104,101,115,101,32,112,111,105,110,116,115,32,101,105,116,104,101,114,32,104,97,118,101,32,97,32,109,97,120,105,109,117,109,32,111,114,32,109,105,110,105,109,117,109,32,120,45,99,111,111,114,100,105,110,97,116,101,44,32,111,114,10,116,104,101,121,32,109,97,120,105,109,105,122,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,107,32,99,111,111,114,100,105,110,97,116,101,115,46,32,32,84,114,105,97,108,32,112,111,105,110,116,115,10,97,114,101,32,102,105,114,115,116,32,115,101,108,101,99,116,101,100,32,102,114,111,109,32,112,111,105,110,116,115,32,116,104,97,116,32,109,97,120,105,109,105,122,101,32,97,32,99,111,111,114,100,105,110,97,116,101,46,10,0] /* \0AThese points eith */, "i8", ALLOC_NONE, 5271408);
allocate([97,118,101,114,97,103,101,32,109,101,114,103,101,115,32,112,101,114,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0] /* average merges per f */, "i8", ALLOC_NONE, 5271596);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5271636);
allocate([113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,32,102,37,100,10,0] /* qh_updatevertices: d */, "i8", ALLOC_NONE, 5271720);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,32,102,108,105,112,112,101,100,32,102,37,100,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_flippedmerges: me */, "i8", ALLOC_NONE, 5271772);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,114,101,112,97,114,116,105,116,105,111,110,32,112,111,105,110,116,32,112,37,100,32,102,114,111,109,32,102,37,100,46,32,32,73,116,32,105,115,32,97,98,111,118,101,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5271840);
allocate([76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* LIST # %s | %s\0A\00 */, "i8", ALLOC_NONE, 5271940);
allocate([95,109,97,120,45,119,105,100,116,104,0] /* _max-width\00 */, "i8", ALLOC_NONE, 5271956);
allocate([10,84,104,101,115,101,32,112,111,105,110,116,115,32,97,114,101,32,116,104,101,32,100,117,97,108,32,111,102,32,116,104,101,32,103,105,118,101,110,32,104,97,108,102,115,112,97,99,101,115,46,32,32,84,104,101,121,32,105,110,100,105,99,97,116,101,32,116,104,97,116,10,116,104,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* \0AThese points are  */, "i8", ALLOC_NONE, 5271968);
allocate([102,97,99,101,116,115,32,98,101,102,111,114,101,32,112,111,115,116,32,109,101,114,103,101,0] /* facets before post m */, "i8", ALLOC_NONE, 5272076);
allocate([37,50,46,50,103,32,0] /* %2.2g \00 */, "i8", ALLOC_NONE, 5272104);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,32,116,101,115,116,46,32,32,84,104,105,115,32,109,97,121,32,108,101,97,100,32,116,111,32,102,97,108,115,101,44,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,46,10,0] /* qhull warning: recom */, "i8", ALLOC_NONE, 5272112);
allocate([113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,117,112,100,97,116,101,32,118,101,114,116,101,120,45,62,110,101,105,103,104,98,111,114,115,10,0] /* qh_updatevertices: d */, "i8", ALLOC_NONE, 5272212);
allocate([113,104,95,109,97,120,111,117,116,101,114,58,32,109,97,120,32,100,105,115,116,97,110,99,101,32,102,114,111,109,32,102,97,99,101,116,32,116,111,32,111,117,116,101,114,32,112,108,97,110,101,32,105,115,32,37,50,46,50,103,32,109,97,120,95,111,117,116,115,105,100,101,32,105,115,32,37,50,46,50,103,10,0] /* qh_maxouter: max dis */, "i8", ALLOC_NONE, 5272288);
allocate([113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0] /* qh_flippedmerges: be */, "i8", ALLOC_NONE, 5272372);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5272400);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,101,118,101,114,116,32,108,105,110,101,119,105,100,116,104,32,50,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* {appearance {+edge - */, "i8", ALLOC_NONE, 5272480);
allocate([32,100,105,115,116,97,110,99,101,61,32,37,52,46,50,103,10,0] /*  distance= %4.2g\0A\ */, "i8", ALLOC_NONE, 5272536);
allocate([114,105,100,103,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* ridges created altog */, "i8", ALLOC_NONE, 5272556);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,37,100,32,111,102,102,115,101,116,32,37,50,46,50,103,32,110,111,114,109,97,108,58,32,0] /* qh_setfacetplane: f% */, "i8", ALLOC_NONE, 5272584);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,109,97,121,32,98,101,32,99,111,112,108,97,110,97,114,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,119,105,116,104,105,110,32,37,54,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5272628);
allocate([113,104,95,114,101,109,111,118,101,118,101,114,116,101,120,58,32,114,101,109,111,118,101,32,118,37,100,32,102,114,111,109,32,118,101,114,116,101,120,95,108,105,115,116,10,0] /* qh_removevertex: rem */, "i8", ALLOC_NONE, 5272724);
allocate([113,104,95,109,97,120,109,105,110,58,32,102,111,117,110,100,32,116,104,101,32,109,97,120,32,97,110,100,32,109,105,110,32,112,111,105,110,116,115,40,98,121,32,100,105,109,41,58,0] /* qh_maxmin: found the */, "i8", ALLOC_NONE, 5272772);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,58,32,102,37,100,32,105,115,32,98,101,115,116,32,110,101,105,103,104,98,111,114,32,102,111,114,32,102,37,100,32,116,101,115,116,99,101,110,116,114,117,109,63,32,37,100,32,110,111,110,99,111,110,118,101,120,63,32,37,100,32,100,105,115,116,32,37,50,46,50,103,32,109,105,110,32,37,50,46,50,103,32,109,97,120,32,37,50,46,50,103,10,0] /* qh_findbestneighbor: */, "i8", ALLOC_NONE, 5272824);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,109,111,114,101,32,116,104,97,110,32,110,101,97,114,45,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0] /* qh_partitioncoplanar */, "i8", ALLOC_NONE, 5272936);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,108,105,110,101,119,105,100,116,104,32,51,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0] /* {appearance {linewid */, "i8", ALLOC_NONE, 5273032);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,50,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5273076);
allocate([32,112,37,100,0] /*  p%d\00 */, "i8", ALLOC_NONE, 5273152);
allocate([102,97,99,101,116,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* facets created altog */, "i8", ALLOC_NONE, 5273160);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,108,101,97,114,108,121,32,110,111,116,32,99,111,110,118,101,120,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5273188);
allocate([113,104,95,114,101,109,111,118,101,102,97,99,101,116,58,32,114,101,109,111,118,101,32,102,37,100,32,102,114,111,109,32,102,97,99,101,116,95,108,105,115,116,10,0] /* qh_removefacet: remo */, "i8", ALLOC_NONE, 5273276);
allocate([113,104,95,106,111,103,103,108,101,105,110,112,117,116,58,32,106,111,103,103,108,101,32,105,110,112,117,116,32,98,121,32,37,50,46,50,103,32,119,105,116,104,32,115,101,101,100,32,37,100,10,0] /* qh_joggleinput: jogg */, "i8", ALLOC_NONE, 5273320);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,41,58,32,110,111,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5273372);
allocate([113,104,95,112,97,114,116,105,116,105,111,110,97,108,108,58,32,112,97,114,116,105,116,105,111,110,32,97,108,108,32,112,111,105,110,116,115,32,105,110,116,111,32,111,117,116,115,105,100,101,32,115,101,116,115,10,0] /* qh_partitionall: par */, "i8", ALLOC_NONE, 5273440);
allocate([10,113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0] /* \0Aqhull error while */, "i8", ALLOC_NONE, 5273500);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,39,71,110,104,39,32,103,101,110,101,114,97,116,101,115,32,110,111,32,111,117,116,112,117,116,32,105,110,32,52,45,100,10,0] /* qhull warning: 'Gnh' */, "i8", ALLOC_NONE, 5273564);
allocate([109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* max. distance of an  */, "i8", ALLOC_NONE, 5273616);
allocate([102,97,99,101,116,0] /* facet\00 */, "i8", ALLOC_NONE, 5273664);
allocate([118,101,114,116,105,99,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0] /* vertices created alt */, "i8", ALLOC_NONE, 5273672);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,37,115,37,100,40,115,105,122,101,32,37,100,32,109,97,120,32,37,100,41,32,105,115,32,110,111,116,32,110,117,108,108,32,116,101,114,109,105,110,97,116,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5273700);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,61,61,61,61,61,61,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,102,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0] /* qh_setfacetplane: == */, "i8", ALLOC_NONE, 5273784);
allocate([113,104,95,110,101,119,114,105,100,103,101,58,32,99,114,101,97,116,101,100,32,114,105,100,103,101,32,114,37,100,10,0] /* qh_newridge: created */, "i8", ALLOC_NONE, 5273884);
allocate([95,106,111,103,103,108,101,45,115,101,101,100,0] /* _joggle-seed\00 */, "i8", ALLOC_NONE, 5273916);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,110,111,32,118,101,114,116,101,120,32,102,111,114,32,114,101,110,97,109,105,110,103,32,118,37,100,40,97,108,108,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,41,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_find_newvertex: n */, "i8", ALLOC_NONE, 5273932);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,120,116,102,117,114,116,104,101,115,116,41,58,32,110,117,109,95,111,117,116,115,105,100,101,32,37,100,32,105,115,32,116,111,111,32,108,111,119,10,98,121,32,97,116,32,108,101,97,115,116,32,37,100,44,32,111,114,32,97,32,114,97,110,100,111,109,32,114,101,97,108,32,37,103,32,62,61,32,49,46,48,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5274016);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5274128);
allocate([99,101,110,116,101,114,32,112,111,105,110,116,0] /* center point\00 */, "i8", ALLOC_NONE, 5274188);
allocate([99,112,117,32,115,101,99,111,110,100,115,32,102,111,114,32,113,104,117,108,108,32,97,102,116,101,114,32,105,110,112,117,116,0] /* cpu seconds for qhul */, "i8", ALLOC_NONE, 5274204);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,32,97,102,116,101,114,32,116,101,115,116,105,110,103,32,105,110,116,101,114,105,111,114,95,112,111,105,110,116,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_setfacetplane: fl */, "i8", ALLOC_NONE, 5274240);
allocate([113,104,95,102,105,110,100,98,101,115,116,58,32,112,111,105,110,116,32,112,37,100,32,115,116,97,114,116,105,110,103,32,97,116,32,102,37,100,32,105,115,110,101,119,102,97,99,101,116,115,63,32,37,100,44,32,117,110,108,101,115,115,32,37,100,32,101,120,105,116,32,105,102,32,62,32,37,50,46,50,103,10,0] /* qh_findbest: point p */, "i8", ALLOC_NONE, 5274320);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5274404);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,114,105,100,103,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,114,105,100,103,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,79,116,104,101,114,119,105,115,101,32,111,117,116,112,117,116,32,111,107,46,10,0] /* qhull warning: more  */, "i8", ALLOC_NONE, 5274484);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,116,104,101,32,99,117,114,114,101,110,116,32,106,111,103,103,108,101,32,102,111,114,32,39,81,74,110,39,44,32,37,46,50,103,44,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,116,104,101,32,119,105,100,116,104,10,111,102,32,116,104,101,32,105,110,112,117,116,46,32,32,73,102,32,112,111,115,115,105,98,108,101,44,32,114,101,99,111,109,112,105,108,101,32,81,104,117,108,108,32,119,105,116,104,32,104,105,103,104,101,114,45,112,114,101,99,105,115,105,111,110,32,114,101,97,108,115,46,10,0] /* qhull error: the cur */, "i8", ALLOC_NONE, 5274608);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,111,117,110,100,32,118,37,100,32,102,111,114,32,111,108,100,32,118,37,100,32,102,114,111,109,32,37,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,105,100,103,101,115,46,10,0] /* qh_find_newvertex: f */, "i8", ALLOC_NONE, 5274760);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,37,100,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,40,103,111,111,100,32,37,100,41,44,32,37,100,32,118,105,115,105,98,108,101,40,103,111,111,100,32,37,100,41,44,32,37,100,32,99,111,112,108,97,110,97,114,10,0] /* qh_findhorizon: %d h */, "i8", ALLOC_NONE, 5274836);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,111,117,116,101,114,47,105,110,110,101,114,32,112,108,97,110,101,115,32,97,110,100,32,99,101,110,116,114,117,109,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5274916);
allocate([10,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,44,32,111,114,32,97,32,118,101,114,116,101,120,32,105,115,32,99,111,112,108,97,110,97,114,10,119,105,116,104,32,97,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,46,32,32,84,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,32,111,102,102,32,101,114,114,111,114,32,102,111,114,10,99,111,109,112,117,116,105,110,103,32,100,105,115,116,97,110,99,101,115,32,105,115,32,37,50,46,50,103,46,32,32,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,44,32,102,97,99,101,116,115,32,97,110,100,32,100,105,115,116,97,110,99,101,115,10,116,111,32,116,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,97,114,101,32,97,115,32,102,111,108,108,111,119,115,58,10,10,0] /* \0AThe center point  */, "i8", ALLOC_NONE, 5275000);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,118,101,114,116,101,120,0] /* average number of ne */, "i8", ALLOC_NONE, 5275236);
allocate([10,10,67,117,114,114,101,110,116,32,115,117,109,109,97,114,121,32,105,115,58,10,0] /* \0A\0ACurrent summar */, "i8", ALLOC_NONE, 5275276);
allocate([113,104,95,110,101,119,102,97,99,101,116,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_newfacet: created */, "i8", ALLOC_NONE, 5275300);
allocate([81,74,111,103,103,108,101,0] /* QJoggle\00 */, "i8", ALLOC_NONE, 5275332);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,110,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0] /* qh_find_newvertex: v */, "i8", ALLOC_NONE, 5275340);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,101,109,112,116,121,32,104,111,114,105,122,111,110,10,81,104,117,108,108,80,111,105,110,116,32,112,37,100,32,119,97,115,32,97,98,111,118,101,32,97,108,108,32,102,97,99,101,116,115,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5275392);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,50,45,100,10,0] /* qhull warning: outpu */, "i8", ALLOC_NONE, 5275484);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,0] /* maximum number of ve */, "i8", ALLOC_NONE, 5275560);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,105,115,32,110,111,116,32,99,111,110,118,101,120,46,32,68,105,115,116,97,110,99,101,61,37,46,50,103,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5275588);
allocate([113,104,95,109,97,116,99,104,118,101,114,116,105,99,101,115,58,32,109,97,116,99,104,101,100,32,98,121,32,115,107,105,112,32,37,100,40,118,37,100,41,32,97,110,100,32,115,107,105,112,32,37,100,40,118,37,100,41,32,115,97,109,101,63,32,37,100,10,0] /* qh_matchvertices: ma */, "i8", ALLOC_NONE, 5275660);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,106,111,103,103,108,101,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull error: insuffi */, "i8", ALLOC_NONE, 5275732);
allocate([113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,114,105,100,103,101,115,10,0] /* qh_attachnewfacets:  */, "i8", ALLOC_NONE, 5275788);
allocate([10,84,104,101,32,105,110,112,117,116,32,116,111,32,113,104,117,108,108,32,97,112,112,101,97,114,115,32,116,111,32,98,101,32,108,101,115,115,32,116,104,97,110,32,37,100,32,100,105,109,101,110,115,105,111,110,97,108,44,32,111,114,32,97,10,99,111,109,112,117,116,97,116,105,111,110,32,104,97,115,32,111,118,101,114,102,108,111,119,101,100,46,10,10,81,104,117,108,108,32,99,111,117,108,100,32,110,111,116,32,99,111,110,115,116,114,117,99,116,32,97,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,32,115,105,109,112,108,101,120,32,102,114,111,109,32,112,111,105,110,116,115,58,10,0] /* \0AThe input to qhul */, "i8", ALLOC_NONE, 5275832);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ve */, "i8", ALLOC_NONE, 5275992);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0] /*   Last point added t */, "i8", ALLOC_NONE, 5276032);
allocate([113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,37,100,32,110,101,119,32,102,97,99,101,116,115,44,32,37,100,32,117,110,117,115,101,100,32,104,97,115,104,32,101,110,116,114,105,101,115,32,46,32,32,104,97,115,104,115,105,122,101,32,37,100,10,0] /* qh_matchnewfacets: % */, "i8", ALLOC_NONE, 5276068);
allocate([113,104,95,103,101,116,97,114,101,97,58,32,99,111,109,112,117,116,105,110,103,32,118,111,108,117,109,101,32,97,110,100,32,97,114,101,97,32,102,111,114,32,101,97,99,104,32,102,97,99,101,116,10,0] /* qh_getarea: computin */, "i8", ALLOC_NONE, 5276144);
allocate([114,37,100,32,0] /* r%d \00 */, "i8", ALLOC_NONE, 5276200);
allocate([37,100,10,37,100,10,0] /* %d\0A%d\0A\00 */, "i8", ALLOC_NONE, 5276208);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,119,97,114,110,105,110,103,58,32,10,84,104,101,32,105,110,105,116,105,97,108,32,104,117,108,108,32,105,115,32,110,97,114,114,111,119,32,40,99,111,115,105,110,101,32,111,102,32,109,105,110,46,32,97,110,103,108,101,32,105,115,32,37,46,49,54,102,41,46,10,73,115,32,116,104,101,32,105,110,112,117,116,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,32,40,101,46,103,46,44,32,111,110,32,97,32,112,108,97,110,101,32,105,110,32,51,45,100,41,63,32,32,81,104,117,108,108,32,109,97,121,10,112,114,111,100,117,99,101,32,97,32,119,105,100,101,32,102,97,99,101,116,46,32,32,79,112,116,105,111,110,115,32,39,81,98,66,39,32,40,115,99,97,108,101,32,116,111,32,117,110,105,116,32,98,111,120,41,32,111,114,32,39,81,98,98,39,32,40,115,99,97,108,101,10,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,41,32,109,97,121,32,114,101,109,111,118,101,32,116,104,105,115,32,119,97,114,110,105,110,103,46,32,32,85,115,101,32,39,80,112,39,32,116,111,32,115,107,105,112,32,116,104,105,115,32,119,97,114,110,105,110,103,46,10,83,101,101,32,39,76,105,109,105,116,97,116,105,111,110,115,39,32,105,110,32,113,104,45,105,109,112,114,101,46,104,116,109,46,10,0] /* qhull precision warn */, "i8", ALLOC_NONE, 5276216);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,0] /* maximum number of ne */, "i8", ALLOC_NONE, 5276556);
allocate([113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,97,99,101,116,32,102,37,100,32,99,114,101,97,116,101,100,46,10,0] /* qh_setfacetplane: fa */, "i8", ALLOC_NONE, 5276584);
allocate([10,37,115,32,119,105,116,104,32,39,67,37,46,50,103,39,32,97,110,100,32,39,65,37,46,50,103,39,10,0] /* \0A%s with 'C%.2g' a */, "i8", ALLOC_NONE, 5276624);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,40,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,32,111,117,116,115,105,100,101,41,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5276656);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,41,58,32,37,100,32,110,101,105,103,104,98,111,114,115,32,100,105,100,32,110,111,116,32,109,97,116,99,104,32,117,112,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5276724);
allocate([99,111,109,112,117,116,105,110,103,32,97,114,101,97,32,111,102,32,101,97,99,104,32,102,97,99,101,116,32,97,110,100,32,118,111,108,117,109,101,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,10,0] /* computing area of ea */, "i8", ALLOC_NONE, 5276800);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,37,100,32,98,121,116,101,115,41,10,0] /* qhull error (qh_mema */, "i8", ALLOC_NONE, 5276860);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,104,111,114,105,122,111,110,32,102,37,100,44,32,100,105,115,116,61,37,50,46,55,103,32,60,32,113,104,32,77,73,78,118,105,115,105,98,108,101,40,37,50,46,55,103,41,10,0] /* qh_findhorizon: poin */, "i8", ALLOC_NONE, 5276952);
allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_NONE, 5277044);
allocate([10,84,111,32,103,117,97,114,97,110,116,101,101,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,32,98,121,32,97,100,100,105,110,103,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,101,120,97,99,116,32,97,114,105,116,104,109,101,116,105,99,32,40,115,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,32,105,110,32,81,104,117,108,108,34,44,32,113,104,45,105,109,112,114,101,46,104,116,109,41,10,0] /* \0ATo guarantee simp */, "i8", ALLOC_NONE, 5277048);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ne */, "i8", ALLOC_NONE, 5277336);
allocate([113,104,95,110,111,114,109,97,108,105,122,101,58,32,110,111,114,109,61,37,50,46,50,103,32,116,111,111,32,115,109,97,108,108,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_normalize: norm=% */, "i8", ALLOC_NONE, 5277376);
allocate([113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,109,97,116,99,104,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,32,102,97,99,101,116,115,46,10,0] /* qh_matchnewfacets: m */, "i8", ALLOC_NONE, 5277424);
allocate([113,104,95,102,105,110,100,103,111,111,100,100,105,115,116,58,32,110,111,32,103,111,111,100,32,102,97,99,101,116,32,102,111,114,32,112,37,100,32,97,98,111,118,101,32,102,37,100,10,0] /* qh_findgooddist: no  */, "i8", ALLOC_NONE, 5277476);
allocate([113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,105,110,100,32,110,101,119,32,118,101,114,116,101,120,32,102,111,114,32,118,37,100,32,102,114,111,109,32,0] /* qh_find_newvertex: f */, "i8", ALLOC_NONE, 5277528);
allocate([37,100,32,37,100,32,37,100,32,37,54,46,49,54,103,32,10,0] /* %d %d %d %6.16g \0A\ */, "i8", ALLOC_NONE, 5277580);
allocate([10,73,102,32,121,111,117,32,110,101,101,100,32,116,114,105,97,110,103,117,108,97,114,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,46,32,32,73,116,32,116,114,105,97,110,103,117,108,97,116,101,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,119,105,116,104,32,97,100,100,101,100,32,112,111,105,110,116,115,46,10,10,73,102,32,121,111,117,32,109,117,115,116,32,117,115,101,32,39,81,48,39,44,10,116,114,121,32,111,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,111,112,116,105,111,110,115,46,32,32,84,104,101,121,32,99,97,110,32,110,111,116,32,103,117,97,114,97,110,116,101,101,32,97,110,32,111,117,116,112,117,116,46,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,105,110,112,117,116,32,116,111,32,97,32,99,117,98,101,46,10,32,32,45,32,117,115,101,32,39,80,111,39,32,116,111,32,112,114,111,100,117,99,101,32,111,117,116,112,117,116,32,97,110,100,32,112,114,101,118,101,110,116,32,112,97,114,116,105,116,105,111,110,105,110,103,32,102,111,114,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,10,32,32,45,32,117,115,101,32,39,86,48,39,32,116,111,32,115,101,116,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,116,111,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,97,115,32,48,32,105,110,115,116,101,97,100,32,111,102,32,114,111,117,110,100,111,102,102,10,32,32,45,32,117,115,101,32,39,69,110,39,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,111,112,116,105,111,110,115,32,39,81,102,39,44,32,39,81,98,98,39,44,32,97,110,100,32,39,81,82,48,39,32,109,97,121,32,97,108,115,111,32,104,101,108,112,10,0] /* \0AIf you need trian */, "i8", ALLOC_NONE, 5277600);
allocate([109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,0] /* maximum number of ri */, "i8", ALLOC_NONE, 5278244);
allocate([113,104,95,100,101,116,106,111,103,103,108,101,58,32,106,111,103,103,108,101,61,37,50,46,50,103,32,109,97,120,119,105,100,116,104,61,37,50,46,50,103,10,0] /* qh_detjoggle: joggle */, "i8", ALLOC_NONE, 5278272);
allocate([113,104,95,103,101,116,99,101,110,116,114,117,109,58,32,102,111,114,32,102,37,100,44,32,37,100,32,118,101,114,116,105,99,101,115,32,100,105,115,116,61,32,37,50,46,50,103,10,0] /* qh_getcentrum: for f */, "i8", ALLOC_NONE, 5278316);
allocate([113,104,95,99,104,101,99,107,99,111,110,118,101,120,58,32,99,104,101,99,107,32,97,108,108,32,114,105,100,103,101,115,32,97,114,101,32,99,111,110,118,101,120,10,0] /* qh_checkconvex: chec */, "i8", ALLOC_NONE, 5278368);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,111,32,109,97,116,99,104,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qh_matchneighbor: no */, "i8", ALLOC_NONE, 5278416);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,32,32,78,101,105,103,104,98,111,114,32,111,102,32,102,37,100,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5278472);
allocate([113,104,95,102,105,110,100,103,111,111,100,100,105,115,116,58,32,112,37,100,32,105,115,32,37,50,46,50,103,32,97,98,111,118,101,32,103,111,111,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_findgooddist: p%d */, "i8", ALLOC_NONE, 5278560);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5278612);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,97,102,97,99,101,116,41,58,32,111,112,116,105,111,110,32,39,70,112,39,32,110,101,101,100,115,32,113,104,32,102,101,97,115,105,98,108,101,95,112,111,105,110,116,10,0] /* qhull input error (q */, "i8", ALLOC_NONE, 5278708);
allocate([87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,58,10,32,32,45,32,117,115,101,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,45,105,110,102,105,110,105,116,121,46,32,32,84,104,105,115,32,114,101,100,117,99,101,115,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,10,0] /* When computing the D */, "i8", ALLOC_NONE, 5278784);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,102,97,99,101,116,0] /* average number of ri */, "i8", ALLOC_NONE, 5278904);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,103,101,116,99,101,110,116,101,114,41,58,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,100,32,112,111,105,110,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5278940);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,100,117,112,108,105,99,97,116,101,115,32,114,105,100,103,101,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,105,110,103,32,102,37,100,32,105,115,109,97,116,99,104,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qh_matchneighbor: ne */, "i8", ALLOC_NONE, 5279004);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5279108);
allocate([113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,58,32,97,114,101,97,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,116,111,112,111,114,105,101,110,116,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0] /* qh_facetarea_simplex */, "i8", ALLOC_NONE, 5279172);
allocate([110,111,32,110,111,114,109,97,108,32,102,111,114,32,102,97,99,101,116,32,102,37,100,10,0] /* no normal for facet  */, "i8", ALLOC_NONE, 5279248);
allocate([32,32,32,32,115,105,122,101,32,105,110,32,98,121,116,101,115,58,32,109,101,114,103,101,32,37,100,32,114,105,100,103,101,32,37,100,32,118,101,114,116,101,120,32,37,100,32,102,97,99,101,116,32,37,100,10,32,32,32,32,32,32,32,32,32,110,111,114,109,97,108,32,37,100,32,114,105,100,103,101,32,118,101,114,116,105,99,101,115,32,37,100,32,102,97,99,101,116,32,118,101,114,116,105,99,101,115,32,111,114,32,110,101,105,103,104,98,111,114,115,32,37,100,10,0] /*     size in bytes: m */, "i8", ALLOC_NONE, 5279276);
allocate([10,87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,102,32,99,111,111,114,100,105,110,97,116,101,115,32,62,32,49,46,48,44,10,32,32,45,32,117,115,101,32,39,81,98,98,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,116,111,32,91,48,44,109,93,32,40,109,97,120,32,112,114,101,118,105,111,117,115,32,99,111,111,114,100,105,110,97,116,101,41,10,0] /* \0AWhen computing th */, "i8", ALLOC_NONE, 5279404);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,122,101,114,111,41,58,32,105,110,100,101,120,32,37,100,32,111,114,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5279548);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5279628);
allocate([113,104,95,103,101,116,97,110,103,108,101,58,32,37,50,46,50,103,10,0] /* qh_getangle: %2.2g\0 */, "i8", ALLOC_NONE, 5279700);
allocate([32,37,50,46,50,103,0] /*  %2.2g\00 */, "i8", ALLOC_NONE, 5279720);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,115,32,102,37,100,44,32,102,37,100,32,97,110,100,32,102,37,100,32,109,101,101,116,32,97,116,32,97,32,114,105,100,103,101,32,119,105,116,104,32,109,111,114,101,32,116,104,97,110,32,50,32,110,101,105,103,104,98,111,114,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5279728);
allocate([32,37,115,10,0] /*  %s\0A\00 */, "i8", ALLOC_NONE, 5279840);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5279848);
allocate([37,55,46,51,103,0] /* %7.3g\00 */, "i8", ALLOC_NONE, 5279916);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,33,61,32,100,105,109,32,37,100,32,45,49,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5279924);
allocate([32,32,37,115,0] /*   %s\00 */, "i8", ALLOC_NONE, 5279996);
allocate([32,37,100,45,62,37,100,0] /*  %d-_%d\00 */, "i8", ALLOC_NONE, 5280004);
allocate([37,55,100,0] /* %7d\00 */, "i8", ALLOC_NONE, 5280012);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: dimen */, "i8", ALLOC_NONE, 5280016);
allocate([113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,102,105,110,100,32,104,111,114,105,122,111,110,32,102,111,114,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_findhorizon: find */, "i8", ALLOC_NONE, 5280084);
allocate([37,55,46,50,103,0] /* %7.2g\00 */, "i8", ALLOC_NONE, 5280140);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: no di */, "i8", ALLOC_NONE, 5280148);
allocate([32,42,48,32,99,110,116,42,0] /*  _0 cnt_\00 */, "i8", ALLOC_NONE, 5280216);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,118,97,108,117,101,32,37,50,46,52,103,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,32,43,49,32,111,114,32,60,32,45,49,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: value */, "i8", ALLOC_NONE, 5280228);
allocate([37,100,10,0] /* %d\0A\00 */, "i8", ALLOC_NONE, 5280304);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5280308);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: dimen */, "i8", ALLOC_NONE, 5280312);
allocate([109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0] /* max. distance of a n */, "i8", ALLOC_NONE, 5280384);
allocate([10,80,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,119,101,114,101,32,100,101,116,101,99,116,101,100,32,100,117,114,105,110,103,32,99,111,110,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,46,10,84,104,105,115,32,111,99,99,117,114,115,32,98,101,99,97,117,115,101,32,99,111,110,118,101,120,32,104,117,108,108,32,97,108,103,111,114,105,116,104,109,115,32,97,115,115,117,109,101,32,116,104,97,116,32,99,97,108,99,117,108,97,116,105,111,110,115,32,97,114,101,10,101,120,97,99,116,44,32,98,117,116,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,97,114,105,116,104,109,101,116,105,99,32,104,97,115,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,115,46,10,10,84,111,32,99,111,114,114,101,99,116,32,102,111,114,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,44,32,100,111,32,110,111,116,32,117,115,101,32,39,81,48,39,46,32,32,66,121,32,100,101,102,97,117,108,116,44,32,81,104,117,108,108,10,115,101,108,101,99,116,115,32,39,67,45,48,39,32,111,114,32,39,81,120,39,32,97,110,100,32,109,101,114,103,101,115,32,110,111,110,45,99,111,110,118,101,120,32,102,97,99,101,116,115,46,32,32,87,105,116,104,32,111,112,116,105,111,110,32,39,81,74,39,44,10,81,104,117,108,108,32,106,111,103,103,108,101,115,32,116,104,101,32,105,110,112,117,116,32,116,111,32,112,114,101,118,101,110,116,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,32,32,83,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,10,105,110,32,81,104,117,108,108,34,32,40,113,104,45,105,109,112,114,101,46,104,116,109,41,46,10,10,73,102,32,121,111,117,32,117,115,101,32,39,81,48,39,44,32,116,104,101,32,111,117,116,112,117,116,32,109,97,121,32,105,110,99,108,117,100,101,10,99,111,112,108,97,110,97,114,32,114,105,100,103,101,115,44,32,99,111,110,99,97,118,101,32,114,105,100,103,101,115,44,32,97,110,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,46,32,32,73,110,32,52,45,100,32,97,110,100,32,104,105,103,104,101,114,44,10,81,104,117,108,108,32,109,97,121,32,112,114,111,100,117,99,101,32,97,32,114,105,100,103,101,32,119,105,116,104,32,102,111,117,114,32,110,101,105,103,104,98,111,114,115,32,111,114,32,116,119,111,32,102,97,99,101,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,10,118,101,114,116,105,99,101,115,46,32,32,81,104,117,108,108,32,114,101,112,111,114,116,115,32,116,104,101,115,101,32,101,118,101,110,116,115,32,119,104,101,110,32,116,104,101,121,32,111,99,99,117,114,46,32,32,73,116,32,115,116,111,112,115,32,119,104,101,110,32,97,10,99,111,110,99,97,118,101,32,114,105,100,103,101,44,32,102,108,105,112,112,101,100,32,102,97,99,101,116,44,32,111,114,32,100,117,112,108,105,99,97,116,101,32,102,97,99,101,116,32,111,99,99,117,114,115,46,10,0] /* \0APrecision problem */, "i8", ALLOC_NONE, 5280428);
allocate([110,117,109,98,101,114,32,111,102,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,104,97,116,32,119,101,114,101,32,109,101,114,103,101,100,0] /* number of simplicial */, "i8", ALLOC_NONE, 5281196);
allocate([10,10,0] /* \0A\0A\00 */, "i8", ALLOC_NONE, 5281244);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,114,117,110,99,97,116,101,41,58,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5281248);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,97,116,58,32,37,115,46,32,32,73,103,110,111,114,101,100,10,0] /* qhull warning: no di */, "i8", ALLOC_NONE, 5281320);
allocate([37,54,46,50,101,32,0] /* %6.2e \00 */, "i8", ALLOC_NONE, 5281396);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,97,99,116,117,97,108,32,115,105,122,101,32,37,100,32,111,102,32,37,115,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,32,115,105,122,101,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5281404);
allocate([113,104,117,108,108,0] /* qhull\00 */, "i8", ALLOC_NONE, 5281492);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,109,101,114,103,105,110,103,32,116,119,111,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,114,105,116,104,109,101,116,105,99,32,111,112,101,114,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,102,111,114,32,100,105,118,105,115,105,111,110,115,10,32,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,102,111,114,32,71,97,117,115,115,58,32,0] /*  %6.2g max. distance */, "i8", ALLOC_NONE, 5281500);
allocate([114,117,110,45,105,100,0] /* run-id\00 */, "i8", ALLOC_NONE, 5281676);
allocate([32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,111,115,116,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0] /*  %6.2g radius of pos */, "i8", ALLOC_NONE, 5281684);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,100,114,111,112,32,100,105,109,101,110,115,105,111,110,32,39,71,68,37,100,39,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,51,45,100,47,52,45,100,32,71,101,111,109,118,105,101,119,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5281724);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,111,115,116,45,109,101,114,103,101,32,97,110,103,108,101,10,0] /*  %6.2g max. cosine f */, "i8", ALLOC_NONE, 5281808);
allocate([81,99,111,112,108,97,110,97,114,0] /* Qcoplanar\00 */, "i8", ALLOC_NONE, 5281852);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,119,105,116,104,32,100,101,108,102,97,99,101,116,32,102,37,100,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5281864);
allocate([32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,114,101,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0] /*  %6.2g radius of pre */, "i8", ALLOC_NONE, 5281936);
allocate([113,104,117,108,108,32,111,117,116,112,117,116,32,119,97,114,110,105,110,103,58,32,105,103,110,111,114,105,110,103,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,44,32,111,112,116,105,111,110,32,39,81,99,39,32,119,97,115,32,110,111,116,32,115,101,116,32,102,111,114,32,116,104,101,32,102,105,114,115,116,32,114,117,110,32,111,102,32,113,104,117,108,108,46,10,0] /* qhull output warning */, "i8", ALLOC_NONE, 5281972);
allocate([113,104,95,102,97,99,101,116,97,114,101,97,58,32,102,37,100,32,97,114,101,97,32,37,50,46,50,103,10,0] /* qh_facetarea: f%d ar */, "i8", ALLOC_NONE, 5282076);
allocate([32,32,102,114,101,101,108,105,115,116,115,40,98,121,116,101,115,45,62,99,111,117,110,116,41,58,0] /*   freelists(bytes-_c */, "i8", ALLOC_NONE, 5282108);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,114,101,45,109,101,114,103,101,32,97,110,103,108,101,10,0] /*  %6.2g max. cosine f */, "i8", ALLOC_NONE, 5282136);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,99,111,112,108,97,110,97,114,115,44,32,118,101,114,116,105,99,101,115,44,32,97,110,100,32,99,101,110,116,114,117,109,115,32,111,117,116,112,117,116,32,110,111,116,10,97,118,97,105,108,97,98,108,101,32,102,111,114,32,52,45,100,32,111,117,116,112,117,116,40,105,103,110,111,114,101,100,41,46,32,32,67,111,117,108,100,32,117,115,101,32,39,71,68,110,39,32,105,110,115,116,101,97,100,46,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5282176);
allocate([113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,32,112,37,100,40,118,37,100,41,32,116,111,32,104,117,108,108,32,111,102,32,37,100,32,102,97,99,101,116,115,40,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,41,32,97,110,100,32,37,100,32,111,117,116,115,105,100,101,32,97,116,32,37,52,46,52,103,32,67,80,85,32,115,101,99,115,46,32,32,80,114,101,118,105,111,117,115,32,119,97,115,32,112,37,100,46,10,0] /* qh_addpoint: add p%d */, "i8", ALLOC_NONE, 5282304);
allocate([32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,110,101,97,114,45,105,110,115,105,100,101,32,112,111,105,110,116,115,10,0] /*  %6.2g max. distance */, "i8", ALLOC_NONE, 5282424);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,102,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,115,32,111,110,108,121,32,102,111,114,32,50,45,100,10,0] /* qhull input error: G */, "i8", ALLOC_NONE, 5282472);
allocate([10,112,114,101,99,105,115,105,111,110,32,99,111,110,115,116,97,110,116,115,58,10,32,37,54,46,50,103,32,109,97,120,46,32,97,98,115,46,32,99,111,111,114,100,105,110,97,116,101,32,105,110,32,116,104,101,32,40,116,114,97,110,115,102,111,114,109,101,100,41,32,105,110,112,117,116,40,39,81,98,100,58,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,40,39,69,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,110,103,108,101,32,99,111,109,112,117,116,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,40,39,87,110,39,41,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,40,39,86,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,40,39,85,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,102,97,99,101,116,32,119,105,100,116,104,32,102,111,114,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,32,97,110,100,32,97,114,101,97,10,0] /* \0Aprecision constan */, "i8", ALLOC_NONE, 5282544);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,32,111,117,116,112,117,116,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,71,101,111,109,118,105,101,119,10,0] /* qhull input error: n */, "i8", ALLOC_NONE, 5282940);
allocate([10,37,115,10,32,113,104,117,108,108,32,105,110,118,111,107,101,100,32,98,121,58,32,37,115,32,124,32,37,115,10,37,115,32,119,105,116,104,32,111,112,116,105,111,110,115,58,10,37,115,10,0] /* \0A%s\0A qhull invok */, "i8", ALLOC_NONE, 5282996);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,44,32,51,45,100,32,97,110,100,32,52,45,100,10,0] /* qhull input error: G */, "i8", ALLOC_NONE, 5283048);
allocate([10,65,32,81,104,117,108,108,32,101,114,114,111,114,32,104,97,115,32,111,99,99,117,114,114,101,100,46,32,32,81,104,117,108,108,32,115,104,111,117,108,100,32,104,97,118,101,32,99,111,114,114,101,99,116,101,100,32,116,104,101,32,97,98,111,118,101,10,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,46,32,32,80,108,101,97,115,101,32,115,101,110,100,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,32,116,111,10,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,10,0] /* \0AA Qhull error has */, "i8", ALLOC_NONE, 5283124);
allocate([110,117,109,98,101,114,32,111,102,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0] /* number of non-simpli */, "i8", ALLOC_NONE, 5283280);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,105,110,105,116,115,116,97,116,105,115,116,105,99,115,41,58,32,105,110,99,114,101,97,115,101,32,115,105,122,101,32,111,102,32,113,104,115,116,97,116,46,105,100,91,93,46,10,32,32,32,32,32,32,113,104,115,116,97,116,46,110,101,120,116,32,37,100,32,115,104,111,117,108,100,32,98,101,32,60,61,32,115,105,122,101,111,102,40,113,104,115,116,97,116,32,105,100,41,32,37,100,10,0] /* qhull error (qh_init */, "i8", ALLOC_NONE, 5283324);
allocate([113,104,95,115,101,116,116,101,109,112,112,117,115,104,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0] /* qh_settemppush: dept */, "i8", ALLOC_NONE, 5283444);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,77,97,116,104,101,109,97,116,105,99,97,32,97,110,100,32,77,97,112,108,101,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,32,97,110,100,32,51,45,100,32,99,111,110,118,101,120,32,104,117,108,108,115,32,97,110,100,32,50,45,100,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,115,10,0] /* qhull input error: M */, "i8", ALLOC_NONE, 5283500);
allocate([100,101,103,101,110,101,114,97,116,101,32,110,101,119,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,40,115,97,109,101,32,114,105,100,103,101,41,0] /* degenerate new facet */, "i8", ALLOC_NONE, 5283628);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,39,81,74,39,32,40,106,111,103,103,108,101,41,32,119,105,108,108,32,117,115,117,97,108,108,121,32,112,114,101,118,101,110,116,32,99,111,105,110,99,105,100,101,110,116,32,105,110,112,117,116,32,115,105,116,101,115,32,102,111,114,32,111,112,116,105,111,110,115,32,39,70,99,39,32,97,110,100,32,39,70,80,39,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5283672);
allocate([102,114,111,109,32,112,37,100,32,116,111,32,102,37,100,10,0] /* from p%d to f%d\0A\0 */, "i8", ALLOC_NONE, 5283780);
allocate([109,105,114,114,111,114,101,100,32,112,97,105,114,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,115,97,109,101,32,118,101,114,116,105,99,101,115,41,0] /* mirrored pairs of ne */, "i8", ALLOC_NONE, 5283800);
allocate([70,118,101,114,116,105,99,101,115,0] /* Fvertices\00 */, "i8", ALLOC_NONE, 5283852);
allocate([110,117,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,100,117,112,108,105,99,97,116,101,100,32,118,101,114,116,101,120,41,0] /* null new facets dele */, "i8", ALLOC_NONE, 5283864);
allocate([70,118,111,114,111,110,111,105,0] /* Fvoronoi\00 */, "i8", ALLOC_NONE, 5283908);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,10,0] /* qh_matchneighbor: f% */, "i8", ALLOC_NONE, 5283920);
allocate([32,32,109,97,120,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,0] /*   max. new facets cr */, "i8", ALLOC_NONE, 5283980);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,67,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,40,39,118,39,41,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5284008);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0] /* qh_degen_redundant_n */, "i8", ALLOC_NONE, 5284084);
allocate([32,32,97,118,101,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,40,109,97,121,32,98,101,32,100,101,108,101,116,101,100,41,0] /*   ave. new facets cr */, "i8", ALLOC_NONE, 5284136);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,116,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,111,114,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5284180);
allocate([113,104,95,100,105,115,116,114,111,117,110,100,58,32,37,50,46,50,103,32,109,97,120,97,98,115,32,37,50,46,50,103,32,109,97,120,115,117,109,97,98,115,32,37,50,46,50,103,32,109,97,120,100,105,115,116,115,117,109,32,37,50,46,50,103,10,0] /* qh_distround: %2.2g  */, "i8", ALLOC_NONE, 5284276);
allocate([37,55,100,32,99,97,108,108,115,32,116,111,32,113,104,95,115,101,116,108,97,114,103,101,114,10,37,55,46,50,103,32,32,32,32,32,97,118,101,114,97,103,101,32,99,111,112,121,32,115,105,122,101,10,0] /* %7d calls to qh_setl */, "i8", ALLOC_NONE, 5284344);
allocate([110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,114,105,97,110,103,117,108,97,116,101,100,0] /* non-simplicial facet */, "i8", ALLOC_NONE, 5284400);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,112,39,32,105,115,32,111,110,108,121,32,117,115,101,100,32,102,111,114,32,10,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,110,44,110,44,110,39,41,46,10,0] /* qhull input error: o */, "i8", ALLOC_NONE, 5284436);
allocate([10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,84,104,101,114,101,32,97,114,101,32,37,100,10,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,46,32,32,78,101,120,116,32,105,115,32,112,111,105,110,116,32,112,37,100,40,118,37,100,41,44,32,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,46,10,0] /* \0AAt %02d:%02d:%02d */, "i8", ALLOC_NONE, 5284520);
allocate([84,114,105,97,110,103,117,108,97,116,105,111,110,32,115,116,97,116,105,115,116,105,99,115,40,81,116,41,0] /* Triangulation statis */, "i8", ALLOC_NONE, 5284728);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,114,97,110,115,112,97,114,101,110,116,32,68,101,108,97,117,110,97,121,40,39,71,116,39,41,32,110,101,101,100,115,32,51,45,100,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,119,47,111,32,39,71,68,110,39,10,0] /* qhull input error: t */, "i8", ALLOC_NONE, 5284760);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,110,101,97,114,45,122,101,114,111,32,110,111,114,109,97,108,0] /* bounded ridges with  */, "i8", ALLOC_NONE, 5284844);
allocate([80,103,111,111,100,0] /* Pgood\00 */, "i8", ALLOC_NONE, 5284884);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5284892);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,111,117,116,112,117,116,102,108,97,103,115,58,32,37,115,10,0] /* qh_initqhull_outputf */, "i8", ALLOC_NONE, 5284896);
allocate([32,32,109,97,120,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0] /*   max. angle to ridg */, "i8", ALLOC_NONE, 5284928);
allocate([69,82,82,79,78,69,79,85,83,32,97,110,100,32,78,69,73,71,72,66,79,82,73,78,71,32,70,65,67,69,84,83,32,116,111,32,111,117,116,112,117,116,10,0] /* ERRONEOUS and NEIGHB */, "i8", ALLOC_NONE, 5284952);
allocate([110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0] /* number of facets in  */, "i8", ALLOC_NONE, 5284996);
allocate([32,32,97,118,101,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0] /*   ave. angle to ridg */, "i8", ALLOC_NONE, 5285024);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,117,115,104,41,58,32,99,97,110,32,110,111,116,32,112,117,115,104,32,97,32,78,85,76,76,32,116,101,109,112,10,0] /* qhull error (qh_sett */, "i8", ALLOC_NONE, 5285048);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,110,115,116,114,117,99,116,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,40,110,101,101,100,32,37,100,41,10,0] /* qhull input error: n */, "i8", ALLOC_NONE, 5285104);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,111,107,32,110,111,114,109,97,108,0] /* bounded ridges with  */, "i8", ALLOC_NONE, 5285188);
allocate([113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,97,114,110,105,110,103,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,97,118,101,114,97,103,101,32,111,102,32,49,48,48,48,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,115,32,40,37,46,50,103,41,32,105,115,32,109,117,99,104,32,100,105,102,102,101,114,101,110,116,32,116,104,97,110,32,101,120,112,101,99,116,101,100,32,40,37,46,50,103,41,46,10,32,32,32,73,115,32,113,104,95,82,65,78,68,79,77,109,97,120,32,40,37,46,50,103,41,32,119,114,111,110,103,63,10,0] /* qhull configuration  */, "i8", ALLOC_NONE, 5285220);
allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_NONE, 5285392);
allocate([32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0] /*   max. distance of m */, "i8", ALLOC_NONE, 5285404);
allocate([113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,32,37,100,32,62,32,113,104,95,82,65,78,68,79,77,109,97,120,40,37,46,56,103,41,10,0] /* qhull configuration  */, "i8", ALLOC_NONE, 5285444);
allocate([37,100,32,37,100,32,37,100,32,0] /* %d %d %d \00 */, "i8", ALLOC_NONE, 5285540);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0] /*   ave. distance of m */, "i8", ALLOC_NONE, 5285552);
allocate([81,82,111,116,97,116,101,45,114,97,110,100,111,109,0] /* QRotate-random\00 */, "i8", ALLOC_NONE, 5285592);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,86,101,114,116,101,120,32,115,101,116,115,32,97,114,101,32,116,104,101,32,115,97,109,101,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,46,32,32,67,97,110,32,110,111,116,32,102,111,114,99,101,32,111,117,116,112,117,116,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5285608);
allocate([32,35,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,105,115,111,108,97,116,101,100,10,0] /*  # p%d is coplanar o */, "i8", ALLOC_NONE, 5285700);
allocate([98,111,117,110,100,101,100,32,114,105,100,103,101,115,0] /* bounded ridges\00 */, "i8", ALLOC_NONE, 5285732);
allocate([81,51,45,110,111,45,109,101,114,103,101,45,118,101,114,116,105,99,101,115,45,100,105,109,45,104,105,103,104,0] /* Q3-no-merge-vertices */, "i8", ALLOC_NONE, 5285748);
allocate([32,35,32,112,37,100,40,118,37,100,41,10,0] /*  # p%d(v%d)\0A\00 */, "i8", ALLOC_NONE, 5285780);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0] /* qh_degen_redundant_f */, "i8", ALLOC_NONE, 5285796);
allocate([32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0] /*   max. distance to r */, "i8", ALLOC_NONE, 5285856);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,105,110,105,116,105,97,108,105,122,101,32,103,108,111,98,97,108,115,46,32,32,100,105,109,32,37,100,32,110,117,109,112,111,105,110,116,115,32,37,100,32,109,97,108,108,111,99,63,32,37,100,32,112,114,111,106,101,99,116,101,100,32,37,100,32,116,111,32,104,117,108,108,95,100,105,109,32,37,100,10,0] /* qh_initqhull_globals */, "i8", ALLOC_NONE, 5285884);
allocate([10,109,101,109,111,114,121,32,115,116,97,116,105,115,116,105,99,115,58,10,37,55,100,32,113,117,105,99,107,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,108,111,110,103,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,102,114,101,101,115,10,37,55,100,32,108,111,110,103,32,102,114,101,101,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,117,115,101,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,102,114,101,101,108,105,115,116,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,100,114,111,112,112,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,10,37,55,100,32,98,121,116,101,115,32,111,102,32,117,110,117,115,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,32,40,101,115,116,105,109,97,116,101,100,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,101,100,32,40,109,97,120,44,32,101,120,99,101,112,116,32,102,111,114,32,105,110,112,117,116,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,105,110,32,117,115,101,32,40,105,110,32,37,100,32,112,105,101,99,101,115,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,115,32,40,109,105,110,117,115,32,108,105,110,107,115,41,10,37,55,100,32,98,121,116,101,115,32,112,101,114,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,105,110,105,116,105,97,108,108,121,32,37,100,32,98,121,116,101,115,41,10,0] /* \0Amemory statistics */, "i8", ALLOC_NONE, 5285988);
allocate([113,104,95,100,101,116,115,105,109,112,108,101,120,58,32,100,101,116,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,100,105,109,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0] /* qh_detsimplex: det=% */, "i8", ALLOC_NONE, 5286468);
allocate([35,32,37,100,32,102,37,100,10,0] /* # %d f%d\0A\00 */, "i8", ALLOC_NONE, 5286532);
allocate([32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0] /*   ave. distance to r */, "i8", ALLOC_NONE, 5286544);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,109,117,115,116,32,98,101,32,62,32,49,10,0] /* qhull error: dimensi */, "i8", ALLOC_NONE, 5286572);
allocate([10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0] /* \0AAt %02d:%02d:%02d */, "i8", ALLOC_NONE, 5286612);
allocate([32,48,32,35,32,105,110,102,105,110,105,116,121,32,110,111,116,32,117,115,101,100,10,0] /*  0 # infinity not us */, "i8", ALLOC_NONE, 5286768);
allocate([110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0] /* non-simplicial Voron */, "i8", ALLOC_NONE, 5286792);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,101,115,116,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,40,39,81,118,39,41,32,110,101,101,100,115,32,97,32,109,101,114,103,101,32,111,112,116,105,111,110,10,0] /* qhull input error: t */, "i8", ALLOC_NONE, 5286840);
allocate([37,100,10,37,100,32,37,100,32,49,10,0] /* %d\0A%d %d 1\0A\00 */, "i8", ALLOC_NONE, 5286912);
allocate([86,111,114,111,110,111,105,32,114,105,100,103,101,32,115,116,97,116,105,115,116,105,99,115,0] /* Voronoi ridge statis */, "i8", ALLOC_NONE, 5286924);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,111,112,116,105,111,110,32,39,81,98,98,39,32,40,115,99,97,108,101,45,108,97,115,116,45,99,111,111,114,100,105,110,97,116,101,41,32,105,115,32,110,111,114,109,97,108,108,121,32,117,115,101,100,32,119,105,116,104,32,39,100,39,32,111,114,32,39,118,39,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5286952);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,102,97,99,101,125,32,79,70,70,32,37,100,32,37,100,32,49,32,35,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,32,97,110,100,32,99,101,108,108,115,10,0] /* {appearance {+edge - */, "i8", ALLOC_NONE, 5287044);
allocate([48,10,0] /* 0\0A\00 */, "i8", ALLOC_NONE, 5287112);
allocate([102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,116,104,101,105,114,32,118,101,114,116,101,120,32,115,101,116,115,0] /* for ridges and their */, "i8", ALLOC_NONE, 5287116);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5287152);
allocate([37,115,32,86,69,82,84,69,88,58,10,0] /* %s VERTEX:\0A\00 */, "i8", ALLOC_NONE, 5287232);
allocate([49,32,37,100,10,0] /* 1 %d\0A\00 */, "i8", ALLOC_NONE, 5287244);
allocate([110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,110,32,111,117,116,112,117,116,0] /* number of vertices i */, "i8", ALLOC_NONE, 5287252);
allocate([102,111,114,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,111,117,116,115,105,100,101,32,97,110,100,32,99,111,112,108,97,110,97,114,32,115,101,116,115,0] /* for input points and */, "i8", ALLOC_NONE, 5287284);
allocate([113,104,95,115,101,116,116,101,109,112,112,111,112,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0] /* qh_settemppop: depth */, "i8", ALLOC_NONE, 5287332);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,117,115,101,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,32,111,114,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,10,0] /* qhull input error: u */, "i8", ALLOC_NONE, 5287384);
allocate([32,112,37,100,40,118,37,100,41,0] /*  p%d(v%d)\00 */, "i8", ALLOC_NONE, 5287488);
allocate([102,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,116,104,101,105,114,32,110,101,105,103,104,98,111,114,32,115,101,116,115,0] /* for vertices and the */, "i8", ALLOC_NONE, 5287500);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,32,119,105,116,104,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,39,41,10,0] /* qhull input error: c */, "i8", ALLOC_NONE, 5287540);
allocate([113,104,95,103,97,117,115,115,101,108,105,109,58,32,48,32,112,105,118,111,116,32,97,116,32,99,111,108,117,109,110,32,37,100,46,32,40,37,50,46,50,103,32,60,32,37,50,46,50,103,41,10,0] /* qh_gausselim: 0 pivo */, "i8", ALLOC_NONE, 5287636);
allocate([102,111,114,32,102,97,99,101,116,115,32,97,110,100,32,116,104,101,105,114,32,110,111,114,109,97,108,115,44,32,110,101,105,103,104,98,111,114,32,97,110,100,32,118,101,114,116,101,120,32,115,101,116,115,0] /* for facets and their */, "i8", ALLOC_NONE, 5287692);
allocate([32,32,110,101,105,103,104,98,111,114,115,58,0] /*   neighbors:\00 */, "i8", ALLOC_NONE, 5287748);
allocate([109,101,109,111,114,121,32,117,115,97,103,101,32,115,116,97,116,105,115,116,105,99,115,40,105,110,32,98,121,116,101,115,41,0] /* memory usage statist */, "i8", ALLOC_NONE, 5287764);
allocate([95,122,101,114,111,45,99,101,110,116,114,117,109,0] /* _zero-centrum\00 */, "i8", ALLOC_NONE, 5287800);
allocate([32,114,105,100,103,101,100,101,108,101,116,101,100,0] /*  ridgedeleted\00 */, "i8", ALLOC_NONE, 5287816);
allocate([32,32,109,97,120,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0] /*   max. number of rid */, "i8", ALLOC_NONE, 5287832);
allocate([81,98,98,111,117,110,100,45,108,97,115,116,45,113,106,0] /* Qbbound-last-qj\00 */, "i8", ALLOC_NONE, 5287876);
allocate([32,100,101,108,101,116,101,100,0] /*  deleted\00 */, "i8", ALLOC_NONE, 5287892);
allocate([113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,116,101,115,116,32,102,97,99,101,116,32,102,37,100,32,102,111,114,32,100,101,103,101,110,47,114,101,100,117,110,100,97,110,116,10,0] /* qh_degen_redundant_f */, "i8", ALLOC_NONE, 5287904);
allocate([32,32,97,118,101,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0] /*   ave. number of rid */, "i8", ALLOC_NONE, 5287968);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,106,111,103,103,108,101,40,39,81,74,39,41,32,97,108,119,97,121,115,32,112,114,111,100,117,99,101,115,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,46,32,32,84,114,105,97,110,103,117,108,97,116,101,100,32,111,117,116,112,117,116,40,39,81,116,39,41,32,100,111,101,115,32,110,111,116,104,105,110,103,46,10,0] /* qhull warning: joggl */, "i8", ALLOC_NONE, 5288012);
allocate([113,104,95,109,101,109,115,116,97,116,105,115,116,105,99,115,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,116,111,116,102,114,101,101,32,37,100,32,110,111,116,32,101,113,117,97,108,32,116,111,32,102,114,101,101,108,105,115,116,32,116,111,116,97,108,32,37,100,10,0] /* qh_memstatistics int */, "i8", ALLOC_NONE, 5288120);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,60,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5288196);
allocate([32,37,53,46,50,103,0] /*  %5.2g\00 */, "i8", ALLOC_NONE, 5288264);
allocate([32,32,32,109,97,120,46,32,102,111,117,110,100,32,102,111,114,32,97,32,118,101,114,116,101,120,0] /*    max. found for a  */, "i8", ALLOC_NONE, 5288272);
allocate([81,120,97,99,116,95,109,101,114,103,101,0] /* Qxact_merge\00 */, "i8", ALLOC_NONE, 5288300);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,99,111,109,112,108,101,116,101,100,32,116,104,101,32,104,117,108,108,32,99,111,110,115,116,114,117,99,116,105,111,110,10,0] /* qh_buildhull: comple */, "i8", ALLOC_NONE, 5288312);
allocate([45,32,112,37,100,40,118,37,100,41,58,0] /* - p%d(v%d):\00 */, "i8", ALLOC_NONE, 5288360);
allocate([32,32,32,97,118,101,46,32,110,117,109,98,101,114,32,102,111,117,110,100,32,112,101,114,32,118,101,114,116,101,120,0] /*    ave. number found */, "i8", ALLOC_NONE, 5288372);
allocate([95,112,114,101,45,109,101,114,103,101,0] /* _pre-merge\00 */, "i8", ALLOC_NONE, 5288404);
allocate([32,32,78,85,76,76,118,101,114,116,101,120,10,0] /*   NULLvertex\0A\00 */, "i8", ALLOC_NONE, 5288416);
allocate([105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,117,110,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0] /* intersections found  */, "i8", ALLOC_NONE, 5288432);
allocate([113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,102,111,114,32,37,115,32,124,32,37,115,10,0] /* qh_initqhull_globals */, "i8", ALLOC_NONE, 5288472);
allocate([113,104,95,97,112,112,101,110,100,118,101,114,116,101,120,58,32,97,112,112,101,110,100,32,118,37,100,32,116,111,32,118,101,114,116,101,120,95,108,105,115,116,10,0] /* qh_appendvertex: app */, "i8", ALLOC_NONE, 5288508);
allocate([81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,118,100,105,97,103,114,97,109,41,58,32,117,110,107,110,111,119,110,32,112,114,105,110,116,32,102,111,114,109,97,116,32,37,100,46,10,0] /* Qhull internal error */, "i8", ALLOC_NONE, 5288552);
allocate([105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,97,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,101,120,0] /* intersections failed */, "i8", ALLOC_NONE, 5288620);
allocate([37,115,32,82,73,68,71,69,58,10,0] /* %s RIDGE:\0A\00 */, "i8", ALLOC_NONE, 5288668);
allocate([125,125,125,10,0] /* }}}\0A\00 */, "i8", ALLOC_NONE, 5288680);
allocate([115,117,109,109,97,114,121,32,105,110,102,111,114,109,97,116,105,111,110,0] /* summary information\ */, "i8", ALLOC_NONE, 5288688);
allocate([118,101,114,116,101,120,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,114,32,108,111,99,97,116,105,110,103,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0] /* vertex intersections */, "i8", ALLOC_NONE, 5288708);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,111,112,41,58,32,112,111,112,32,102,114,111,109,32,101,109,112,116,121,32,116,101,109,112,111,114,97,114,121,32,115,116,97,99,107,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5288764);
allocate([49,10,0] /* 1\0A\00 */, "i8", ALLOC_NONE, 5288836);
allocate([32,32,100,101,108,101,116,101,100,0] /*   deleted\00 */, "i8", ALLOC_NONE, 5288840);
allocate([37,56,46,52,103,32,48,32,48,32,48,32,35,32,118,37,100,10,32,48,32,37,56,46,52,103,32,48,32,48,10,48,32,48,32,37,56,46,52,103,32,48,10,0] /* %8.4g 0 0 0 # v%d\0A */, "i8", ALLOC_NONE, 5288852);
allocate([118,101,114,116,105,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,110,111,32,114,105,100,103,101,115,0] /* vertices removed fro */, "i8", ALLOC_NONE, 5288896);
allocate([123,97,112,112,101,97,114,97,110,99,101,32,123,45,101,100,103,101,32,45,110,111,114,109,97,108,32,110,111,114,109,115,99,97,108,101,32,48,125,32,123,10,73,78,83,84,32,103,101,111,109,32,123,100,101,102,105,110,101,32,118,115,112,104,101,114,101,32,79,70,70,10,49,56,32,51,50,32,52,56,10,10,48,32,48,32,49,10,49,32,48,32,48,10,48,32,49,32,48,10,45,49,32,48,32,48,10,48,32,45,49,32,48,10,48,32,48,32,45,49,10,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,45,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,48,32,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,10,51,32,48,32,54,32,49,49,10,51,32,48,32,55,32,54,32,10,51,32,48,32,57,32,55,32,10,51,32,48,32,49,49,32,57,10,51,32,49,32,54,32,56,32,10,51,32,49,32,56,32,49,52,10,51,32,49,32,49,51,32,54,10,51,32,49,32,49,52,32,49,51,10,51,32,50,32,49,49,32,49,51,10,51,32,50,32,49,50,32,49,49,10,51,32,50,32,49,51,32,49,53,10,51,32,50,32,49,53,32,49,50,10,51,32,51,32,57,32,49,50,10,51,32,51,32,49,48,32,57,10,51,32,51,32,49,50,32,49,54,10,51,32,51,32,49,54,32,49,48,10,51,32,52,32,55,32,49,48,10,51,32,52,32,56,32,55,10,51,32,52,32,49,48,32,49,55,10,51,32,52,32,49,55,32,56,10,51,32,53,32,49,52,32,49,55,10,51,32,53,32,49,53,32,49,52,10,51,32,53,32,49,54,32,49,53,10,51,32,53,32,49,55,32,49,54,10,51,32,54,32,49,51,32,49,49,10,51,32,55,32,56,32,54,10,51,32,57,32,49,48,32,55,10,51,32,49,49,32,49,50,32,57,10,51,32,49,52,32,56,32,49,55,10,51,32,49,53,32,49,51,32,49,52,10,51,32,49,54,32,49,50,32,49,53,10,51,32,49,55,32,49,48,32,49,54,10,125,32,116,114,97,110,115,102,111,114,109,115,32,123,32,84,76,73,83,84,10,0] /* {appearance {-edge - */, "i8", ALLOC_NONE, 5288944);
allocate([32,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,111,102,32,110,111,32,110,101,105,103,104,98,111,114,115,0] /*   facets deleted bec */, "i8", ALLOC_NONE, 5289648);
allocate([113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0] /* qh_matchneighbor: ne */, "i8", ALLOC_NONE, 5289692);
allocate([32,32,32,32,32,32,32,32,32,32,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /*            between f */, "i8", ALLOC_NONE, 5289756);
allocate([100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,0] /* degenerate facets du */, "i8", ALLOC_NONE, 5289788);
allocate([100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0] /* dropped neighbors du */, "i8", ALLOC_NONE, 5289832);
allocate([113,104,95,99,111,112,121,110,111,110,99,111,110,118,101,120,58,32,109,111,118,101,100,32,110,111,110,99,111,110,118,101,120,32,102,108,97,103,32,102,114,111,109,32,114,37,100,32,116,111,32,114,37,100,10,0] /* qh_copynonconvex: mo */, "i8", ALLOC_NONE, 5289876);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,32,40,109,101,109,115,105,122,101,41,58,32,102,114,101,101,32,108,105,115,116,32,116,97,98,108,101,32,104,97,115,32,114,111,111,109,32,102,111,114,32,111,110,108,121,32,37,100,32,115,105,122,101,115,10,0] /* qhull warning (memsi */, "i8", ALLOC_NONE, 5289932);
allocate([113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,109,105,110,105,109,117,109,32,118,105,115,105,98,105,108,105,116,121,32,86,37,46,50,103,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,10,109,105,110,105,109,117,109,32,111,117,116,115,105,100,101,32,87,37,46,50,103,46,32,32,70,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,114,101,32,108,105,107,101,108,121,46,10,0] /* qhull input warning: */, "i8", ALLOC_NONE, 5290004);
allocate([32,110,111,110,99,111,110,118,101,120,0] /*  nonconvex\00 */, "i8", ALLOC_NONE, 5290120);
allocate([100,101,108,101,116,101,100,32,114,105,100,103,101,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0] /* deleted ridges due t */, "i8", ALLOC_NONE, 5290132);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,37,100,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,119,101,114,101,32,110,101,118,101,114,32,112,114,111,99,101,115,115,101,100,46,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5290172);
allocate([32,32,32,32,32,45,32,114,37,100,0] /*      - r%d\00 */, "i8", ALLOC_NONE, 5290252);
allocate([32,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,32,100,101,116,101,99,116,101,100,0] /*   duplicate ridges d */, "i8", ALLOC_NONE, 5290264);
allocate([32,37,56,46,52,103,0] /*  %8.4g\00 */, "i8", ALLOC_NONE, 5290292);
allocate([114,101,110,97,109,101,32,102,97,105,108,117,114,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0] /* rename failures due  */, "i8", ALLOC_NONE, 5290300);
allocate([32,112,37,100,58,32,0] /*  p%d: \00 */, "i8", ALLOC_NONE, 5290344);
allocate([37,54,46,49,54,103,32,0] /* %6.16g \00 */, "i8", ALLOC_NONE, 5290352);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,109,117,108,116,105,112,108,101,32,102,97,99,101,116,115,0] /* renamed vertices sha */, "i8", ALLOC_NONE, 5290360);
allocate([37,115,32,79,84,72,69,82,32,70,65,67,69,84,58,10,0] /* %s OTHER FACET:\0A\0 */, "i8", ALLOC_NONE, 5290404);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5290424);
allocate([114,105,100,103,101,115,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,110,101,105,103,104,98,111,114,115,0] /* ridges with multiple */, "i8", ALLOC_NONE, 5290428);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,105,110,32,97,32,112,105,110,99,104,101,100,32,102,97,99,101,116,0] /* renamed vertices in  */, "i8", ALLOC_NONE, 5290460);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,102,114,101,101,41,58,32,115,101,116,32,37,112,40,115,105,122,101,32,37,100,41,32,119,97,115,32,110,111,116,32,108,97,115,116,32,116,101,109,112,111,114,97,114,121,32,97,108,108,111,99,97,116,101,100,40,100,101,112,116,104,32,37,100,44,32,115,101,116,32,37,112,44,32,115,105,122,101,32,37,100,41,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5290496);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,10,0] /* %8.4g %8.4g %8.4g 1\ */, "i8", ALLOC_NONE, 5290612);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,116,119,111,32,102,97,99,101,116,115,0] /* renamed vertices sha */, "i8", ALLOC_NONE, 5290636);
allocate([113,104,95,98,97,99,107,110,111,114,109,97,108,58,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,97,116,32,99,111,108,117,109,110,32,37,100,46,10,0] /* qh_backnormal: zero  */, "i8", ALLOC_NONE, 5290676);
allocate([86,69,67,84,32,49,32,49,32,49,32,49,32,49,10,0] /* VECT 1 1 1 1 1\0A\00 */, "i8", ALLOC_NONE, 5290720);
allocate([114,101,110,97,109,101,100,32,118,101,114,116,101,120,32,115,116,97,116,105,115,116,105,99,115,0] /* renamed vertex stati */, "i8", ALLOC_NONE, 5290736);
allocate([32,35,32,112,37,100,10,0] /*  # p%d\0A\00 */, "i8", ALLOC_NONE, 5290764);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0] /* merges due to duplic */, "i8", ALLOC_NONE, 5290772);
allocate([113,104,95,109,97,107,101,110,101,119,95,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,32,102,97,99,101,116,32,102,37,100,32,116,111,112,32,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,104,111,114,105,122,111,110,32,102,37,100,32,115,107,105,112,32,37,100,32,116,111,112,32,37,100,32,97,110,100,32,118,105,115,105,98,108,101,32,102,37,100,32,115,107,105,112,32,37,100,44,32,102,108,105,112,63,32,37,100,10,0] /* qh_makenew_simplicia */, "i8", ALLOC_NONE, 5290804);
allocate([86,69,67,84,32,49,32,50,32,49,32,50,32,49,10,0] /* VECT 1 2 1 2 1\0A\00 */, "i8", ALLOC_NONE, 5290928);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,109,111,118,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* merges due to removi */, "i8", ALLOC_NONE, 5290944);
allocate([51,32,48,32,49,32,50,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,46,48,10,0] /* 3 0 1 2 %8.4g %8.4g  */, "i8", ALLOC_NONE, 5290984);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,0] /* merges due to degene */, "i8", ALLOC_NONE, 5291016);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,116,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,46,32,32,118,37,100,32,100,105,115,116,32,37,46,50,103,10,0] /* qh_checkzero: facet  */, "i8", ALLOC_NONE, 5291048);
allocate([113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,113,117,105,99,107,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0] /* qh_mem %p n %8d allo */, "i8", ALLOC_NONE, 5291120);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,105,122,101,41,58,32,99,97,108,108,101,100,32,97,102,116,101,114,32,113,104,109,101,109,95,115,101,116,117,112,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5291176);
allocate([95,119,105,100,101,45,102,97,99,101,116,0] /* _wide-facet\00 */, "i8", ALLOC_NONE, 5291228);
allocate([112,114,111,106,101,99,116,101,100,32,112,37,100,10,0] /* projected p%d\0A\00 */, "i8", ALLOC_NONE, 5291240);
allocate([99,111,112,108,97,110,97,114,47,99,111,110,99,97,118,101,32,109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,118,111,105,100,105,110,103,32,111,108,100,32,109,101,114,103,101,0] /* coplanar/concave mer */, "i8", ALLOC_NONE, 5291256);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,111,112,32,112,111,105,110,116,32,111,114,32,99,111,110,101,32,80,37,100,32,105,110,32,105,110,105,116,105,97,108,32,104,117,108,108,10,0] /* qh_buildhull: stop p */, "i8", ALLOC_NONE, 5291308);
allocate([112,37,100,40,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,41,10,0] /* p%d(coplanar facets) */, "i8", ALLOC_NONE, 5291364);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,0] /* merges due to concav */, "i8", ALLOC_NONE, 5291388);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,35,32,0] /* %8.4g %8.4g %8.4g %8 */, "i8", ALLOC_NONE, 5291420);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0] /* merges due to coplan */, "i8", ALLOC_NONE, 5291448);
allocate([113,104,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,100,101,116,101,114,109,105,110,103,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,32,102,111,114,32,101,97,99,104,32,118,101,114,116,101,120,10,0] /* qh_vertexneighbors:  */, "i8", ALLOC_NONE, 5291480);
allocate([37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,35,32,0] /* %8.4g %8.4g %8.4g #  */, "i8", ALLOC_NONE, 5291548);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,41,58,32,110,111,32,110,101,105,103,104,98,111,114,32,111,102,32,118,37,100,32,102,111,114,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5291572);
allocate([32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0] /*   maximum merge dist */, "i8", ALLOC_NONE, 5291652);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,110,117,108,108,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate_null: */, "i8", ALLOC_NONE, 5291680);
allocate([37,115,32,70,65,67,69,84,58,10,0] /* %s FACET:\0A\00 */, "i8", ALLOC_NONE, 5291724);
allocate([35,32,105,110,116,101,114,115,101,99,116,32,102,37,100,32,102,37,100,10,0] /* # intersect f%d f%d\ */, "i8", ALLOC_NONE, 5291736);
allocate([122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0] /* zero divisors during */, "i8", ALLOC_NONE, 5291760);
allocate([32,32,97,118,101,114,97,103,101,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0] /*   average merge dist */, "i8", ALLOC_NONE, 5291804);
allocate([113,104,95,115,101,116,116,101,109,112,58,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,44,32,100,101,112,116,104,32,37,100,10,0] /* qh_settemp: temp set */, "i8", ALLOC_NONE, 5291832);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,109,105,114,114,111,114,58,32,100,101,108,101,116,101,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_triangulate_mirro */, "i8", ALLOC_NONE, 5291884);
allocate([79,70,70,32,51,32,49,32,49,32,0] /* OFF 3 1 1 \00 */, "i8", ALLOC_NONE, 5291944);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,110,103,108,101,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0] /* merges due to angle  */, "i8", ALLOC_NONE, 5291956);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0] /* qh_findbestnew: best */, "i8", ALLOC_NONE, 5291992);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,41,58,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,102,111,114,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5292040);
allocate([86,69,67,84,32,49,32,37,100,32,49,32,37,100,32,49,32,0] /* VECT 1 %d 1 %d 1 \00 */, "i8", ALLOC_NONE, 5292144);
allocate([110,111,110,45,99,111,110,118,101,120,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0] /* non-convex vertex ne */, "i8", ALLOC_NONE, 5292164);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,58,32,114,101,108,105,110,107,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,98,101,116,119,101,101,110,32,110,101,105,103,104,98,111,114,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_triangulate_link: */, "i8", ALLOC_NONE, 5292192);
allocate([37,54,46,49,54,103,32,37,54,46,49,54,103,10,0] /* %6.16g %6.16g\0A\00 */, "i8", ALLOC_NONE, 5292276);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,100,117,110,100,97,110,116,32,110,101,105,103,104,98,111,114,115,0] /* merges due to redund */, "i8", ALLOC_NONE, 5292292);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,102,97,99,101,116,58,32,116,114,105,97,110,103,117,108,97,116,101,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate_facet */, "i8", ALLOC_NONE, 5292328);
allocate([113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,114,37,100,32,111,102,32,104,111,114,105,122,111,110,32,102,37,100,10,0] /* qh_makenew_nonsimpli */, "i8", ALLOC_NONE, 5292376);
allocate([49,48,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,10,50,32,0] /* 10 %d %d %d %d %d %d */, "i8", ALLOC_NONE, 5292456);
allocate([109,101,114,103,101,115,32,100,117,101,32,116,111,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,0] /* merges due to flippe */, "i8", ALLOC_NONE, 5292492);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,108,97,115,116,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate: all  */, "i8", ALLOC_NONE, 5292544);
allocate([48,10,50,32,0] /* 0\0A2 \00 */, "i8", ALLOC_NONE, 5292632);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5292640);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,110,101,101,100,115,32,112,114,101,45,109,101,114,103,105,110,103,10,0] /* qh_checkzero: facet  */, "i8", ALLOC_NONE, 5292680);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,32,102,37,100,32,110,111,116,32,111,119,110,101,100,32,98,121,32,105,116,115,32,118,105,115,105,98,108,101,44,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5292724);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5292828);
allocate([37,115,32,124,32,37,115,10,0] /* %s | %s\0A\00 */, "i8", ALLOC_NONE, 5292876);
allocate([87,105,100,116,104,45,111,117,116,115,105,100,101,0] /* Width-outside\00 */, "i8", ALLOC_NONE, 5292888);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5292904);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0] /* qh_triangulate: all  */, "i8", ALLOC_NONE, 5292956);
allocate([118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,0] /* vertices deleted by  */, "i8", ALLOC_NONE, 5293036);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,45,45,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,44,32,110,117,108,108,44,32,97,110,100,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5293064);
allocate([37,100,32,49,10,0] /* %d 1\0A\00 */, "i8", ALLOC_NONE, 5293148);
allocate([104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,110,101,119,32,102,97,99,101,116,115,0] /* horizon facets merge */, "i8", ALLOC_NONE, 5293156);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,110,100,32,114,101,112,108,97,99,101,32,102,97,99,101,116,45,62,102,46,116,114,105,111,119,110,101,114,32,119,105,116,104,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,116,104,97,116,32,111,119,110,32,99,101,110,116,101,114,44,32,110,111,114,109,97,108,44,32,101,116,99,46,10,0] /* qh_triangulate: and  */, "i8", ALLOC_NONE, 5293196);
allocate([113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,67,68,68,32,102,111,114,109,97,116,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,99,101,110,116,114,117,109,115,44,32,104,97,108,102,115,112,97,99,101,10,105,110,116,101,114,115,101,99,116,105,111,110,115,44,32,97,110,100,32,79,70,70,32,102,105,108,101,32,102,111,114,109,97,116,46,10,0] /* qhull warning: CDD f */, "i8", ALLOC_NONE, 5293300);
allocate([113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,111,114,100,101,114,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,37,100,32,102,111,114,32,51,45,100,10,0] /* qh_order_vertexneigh */, "i8", ALLOC_NONE, 5293404);
allocate([110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0] /* new facets merged\00 */, "i8", ALLOC_NONE, 5293464);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,105,100,101,110,116,105,102,121,32,100,101,103,101,110,101,114,97,116,101,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0] /* qh_triangulate: iden */, "i8", ALLOC_NONE, 5293484);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,101,110,100,105,110,103,32,112,114,111,103,114,97,109,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0] /* qhull error while en */, "i8", ALLOC_NONE, 5293552);
allocate([32,32,32,32,32,45,32,97,108,108,32,114,105,100,103,101,115,58,0] /*      - all ridges:\0 */, "i8", ALLOC_NONE, 5293604);
allocate([122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,98,97,99,107,32,115,117,98,115,116,105,116,117,116,101,0] /* zero divisors during */, "i8", ALLOC_NONE, 5293624);
allocate([110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,104,111,114,105,122,111,110,0] /* new facets merged in */, "i8", ALLOC_NONE, 5293664);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,32,108,105,115,116,115,32,102,111,114,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,118,37,100,10,0] /* qh_triangulate: upda */, "i8", ALLOC_NONE, 5293696);
allocate([32,32,32,32,45,32,114,105,100,103,101,115,58,10,0] /*     - ridges:\0A\00 */, "i8", ALLOC_NONE, 5293760);
allocate([32,32,109,97,120,46,32,102,97,99,101,116,115,0] /*   max. facets\00 */, "i8", ALLOC_NONE, 5293776);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,101,114,109,105,110,97,116,101,41,58,32,111,110,108,121,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,62,61,32,50,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5293792);
allocate([32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,10,0] /*   Last merge was #%d */, "i8", ALLOC_NONE, 5293868);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,37,100,32,111,114,32,109,111,114,101,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,45,45,32,115,97,109,101,32,118,101,114,116,105,99,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5293892);
allocate([32,114,37,100,0] /*  r%d\00 */, "i8", ALLOC_NONE, 5293972);
allocate([32,32,97,118,101,46,32,102,97,99,101,116,115,32,112,101,114,32,99,121,99,108,101,0] /*   ave. facets per cy */, "i8", ALLOC_NONE, 5293980);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,114,105,100,103,101,115,32,115,116,105,108,108,32,100,101,102,105,110,101,100,32,102,111,114,32,102,37,100,10,0] /* qhull error (qh_tria */, "i8", ALLOC_NONE, 5294004);
allocate([32,32,32,32,45,32,114,105,100,103,101,115,40,105,100,115,32,109,97,121,32,98,101,32,103,97,114,98,97,103,101,41,58,0] /*     - ridges(ids may */, "i8", ALLOC_NONE, 5294064);
allocate([99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* cycles of facets mer */, "i8", ALLOC_NONE, 5294100);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,109,97,120,111,117,116,115,105,100,101,32,37,50,46,50,103,44,32,109,105,110,95,118,101,114,116,101,120,32,37,50,46,50,103,44,32,111,117,116,115,105,100,101,32,111,102,32,110,111,116,32,103,111,111,100,32,37,100,10,0] /* qh_check_maxout: max */, "i8", ALLOC_NONE, 5294148);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,32,45,45,32,97,112,101,120,32,115,97,109,101,32,97,115,32,115,101,99,111,110,100,32,118,101,114,116,101,120,10,0] /* qh_triangulate: dele */, "i8", ALLOC_NONE, 5294228);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,41,58,32,115,105,109,112,108,105,99,105,97,108,32,102,37,100,32,115,104,97,114,105,110,103,32,116,119,111,32,114,105,100,103,101,115,32,119,105,116,104,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5294304);
allocate([115,105,109,112,108,105,99,101,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0] /* simplices merged int */, "i8", ALLOC_NONE, 5294400);
allocate([113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,116,114,105,97,110,103,117,108,97,116,101,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,0] /* qh_triangulate: tria */, "i8", ALLOC_NONE, 5294440);
allocate([32,68,85,80,0] /*  DUP\00 */, "i8", ALLOC_NONE, 5294492);
allocate([109,101,114,103,101,100,32,97,32,115,105,109,112,108,101,120,0] /* merged a simplex\00 */, "i8", ALLOC_NONE, 5294500);
allocate([10,32,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,32,110,101,120,116,32,102,97,99,101,116,32,102,111,114,32,113,104,95,97,100,100,112,111,105,110,116,32,37,100,10,32,32,118,101,114,116,105,99,101,115,40,110,101,119,32,37,100,41,58,0] /* \0A  new facets %d v */, "i8", ALLOC_NONE, 5294520);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,108,97,114,103,101,115,116,32,109,101,109,32,115,105,122,101,32,37,100,32,105,115,32,62,61,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,32,111,114,32,105,110,105,116,105,97,108,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,10,0] /* qhull error (qh_mems */, "i8", ALLOC_NONE, 5294608);
allocate([32,77,69,82,71,69,0] /*  MERGE\00 */, "i8", ALLOC_NONE, 5294704);
allocate([85,45,99,111,112,108,97,110,97,114,45,100,105,115,116,97,110,99,101,0] /* U-coplanar-distance\ */, "i8", ALLOC_NONE, 5294712);
allocate([116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,111,114,32,99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0] /* total number of face */, "i8", ALLOC_NONE, 5294732);
allocate([10,32,32,32,32,32,0] /* \0A     \00 */, "i8", ALLOC_NONE, 5294784);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,110,101,119,32,118,101,114,116,101,120,32,102,37,100,32,105,110,32,118,101,114,116,101,120,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5294792);
allocate([32,32,32,32,45,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,58,0] /*     - neighboring fa */, "i8", ALLOC_NONE, 5294860);
allocate([99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,0] /* centrums frozen due  */, "i8", ALLOC_NONE, 5294888);
allocate([81,82,97,110,100,111,109,45,115,101,101,100,0] /* QRandom-seed\00 */, "i8", ALLOC_NONE, 5294928);
allocate([113,104,95,112,114,105,110,116,108,105,115,116,115,58,32,102,97,99,101,116,115,58,0] /* qh_printlists: facet */, "i8", ALLOC_NONE, 5294944);
allocate([99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,97,32,119,105,100,101,32,109,101,114,103,101,0] /* centrums frozen due  */, "i8", ALLOC_NONE, 5294968);
allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_NONE, 5295004);
allocate([32,32,32,32,32,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0] /*       furthest dista */, "i8", ALLOC_NONE, 5295008);
allocate([113,104,95,109,97,114,107,118,111,114,111,110,111,105,58,32,105,115,76,111,119,101,114,32,37,100,32,110,117,109,99,101,110,116,101,114,115,32,37,100,10,0] /* qh_markvoronoi: isLo */, "i8", ALLOC_NONE, 5295040);
allocate([109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,109,101,114,103,101,100,32,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,40,111,114,32,114,111,117,110,100,111,102,102,41,0] /* max distance of merg */, "i8", ALLOC_NONE, 5295084);
allocate([10,32,110,101,105,103,104,98,111,114,115,58,0] /* \0A neighbors:\00 */, "i8", ALLOC_NONE, 5295140);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0] /*     - coplanar set:  */, "i8", ALLOC_NONE, 5295156);
allocate([110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,45,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,115,0] /* nearly singular or a */, "i8", ALLOC_NONE, 5295188);
allocate([109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,118,101,114,116,101,120,32,111,114,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,40,119,47,114,111,117,110,100,111,102,102,41,0] /* max distance of vert */, "i8", ALLOC_NONE, 5295236);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,115,105,122,101,41,58,32,99,117,114,114,101,110,116,32,115,101,116,32,115,105,122,101,32,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,32,115,105,122,101,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5295304);
allocate([118,37,100,32,0] /* v%d \00 */, "i8", ALLOC_NONE, 5295392);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,0] /*     - coplanar set:\ */, "i8", ALLOC_NONE, 5295400);
allocate([32,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,0] /*   additional non-con */, "i8", ALLOC_NONE, 5295420);
allocate([32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,112,37,100,32,118,105,115,105,116,105,100,32,37,100,46,0] /*   Last point added p */, "i8", ALLOC_NONE, 5295452);
allocate([104,97,115,104,32,37,100,32,102,37,100,32,0] /* hash %d f%d \00 */, "i8", ALLOC_NONE, 5295488);
allocate([32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0] /*     - coplanar set(f */, "i8", ALLOC_NONE, 5295504);
allocate([105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,102,111,114,32,112,111,115,116,32,109,101,114,103,105,110,103,0] /* initial non-convex r */, "i8", ALLOC_NONE, 5295540);
allocate([113,104,95,112,114,101,112,101,110,100,102,97,99,101,116,58,32,112,114,101,112,101,110,100,32,102,37,100,32,98,101,102,111,114,101,32,102,37,100,10,0] /* qh_prependfacet: pre */, "i8", ALLOC_NONE, 5295584);
allocate([32,32,32,32,45,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0] /*     - furthest dista */, "i8", ALLOC_NONE, 5295628);
allocate([32,32,109,97,120,105,109,117,109,32,97,100,100,105,116,105,111,110,97,108,32,105,110,32,111,110,101,32,112,97,115,115,0] /*   maximum additional */, "i8", ALLOC_NONE, 5295660);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,112,37,100,32,105,115,32,37,46,50,103,32,97,98,111,118,101,32,102,37,100,10,0] /* qh_check_maxout: p%d */, "i8", ALLOC_NONE, 5295696);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,114,111,114,40,112,111,105,110,116,95,97,100,100,41,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,40,37,100,41,10,0] /* qhull internal errro */, "i8", ALLOC_NONE, 5295736);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,110,101,103,97,116,105,118,101,32,104,97,115,104,115,105,122,101,32,37,100,32,112,97,115,115,101,100,32,116,111,32,113,104,95,103,101,116,104,97,115,104,32,91,112,111,108,121,46,99,93,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5295804);
allocate([32,32,70,117,114,116,104,101,115,116,0] /*   Furthest\00 */, "i8", ALLOC_NONE, 5295880);
allocate([32,32,97,118,101,46,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /*   ave. additional no */, "i8", ALLOC_NONE, 5295892);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,119,97,114,110,105,110,103,32,40,112,111,105,110,116,95,97,100,100,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,105,100,32,37,100,10,0] /* qhull internal warni */, "i8", ALLOC_NONE, 5295944);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0] /*     - outside set:   */, "i8", ALLOC_NONE, 5296004);
allocate([32,32,109,97,120,105,109,117,109,0] /*   maximum\00 */, "i8", ALLOC_NONE, 5296036);
allocate([113,104,95,111,117,116,99,111,112,108,97,110,97,114,58,32,109,111,118,101,32,111,117,116,115,105,100,101,115,101,116,32,116,111,32,99,111,112,108,97,110,97,114,115,101,116,32,102,111,114,32,113,104,32,78,65,82,82,79,87,104,117,108,108,10,0] /* qh_outcoplanar: move */, "i8", ALLOC_NONE, 5296048);
allocate([113,104,95,109,101,109,105,110,105,116,98,117,102,102,101,114,115,58,32,109,101,109,111,114,121,32,105,110,105,116,105,97,108,105,122,101,100,32,119,105,116,104,32,97,108,105,103,110,109,101,110,116,32,37,100,10,0] /* qh_meminitbuffers: m */, "i8", ALLOC_NONE, 5296116);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,0] /*     - outside set:\0 */, "i8", ALLOC_NONE, 5296176);
allocate([97,118,101,46,32,105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0] /* ave. initial non-con */, "i8", ALLOC_NONE, 5296196);
allocate([86,105,115,105,98,108,101,45,100,105,115,116,97,110,99,101,0] /* Visible-distance\00 */, "i8", ALLOC_NONE, 5296244);
allocate([113,104,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,99,114,101,97,116,101,100,10,0] /* qh_newvertex: vertex */, "i8", ALLOC_NONE, 5296264);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,118,105,115,105,98,108,101,32,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,105,110,32,102,97,99,101,116,32,108,105,115,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5296304);
allocate([32,32,32,32,32,0] /*      \00 */, "i8", ALLOC_NONE, 5296384);
allocate([109,101,114,103,101,32,105,116,101,114,97,116,105,111,110,115,0] /* merge iterations\00 */, "i8", ALLOC_NONE, 5296392);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,118,101,114,116,105,99,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,86,101,114,116,105,99,101,115,32,119,105,108,108,32,110,111,116,32,98,101,32,115,111,114,116,101,100,32,99,111,114,114,101,99,116,108,121,46,10,0] /* qhull error: more th */, "i8", ALLOC_NONE, 5296412);
allocate([32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0] /*     - outside set(fu */, "i8", ALLOC_NONE, 5296556);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,101,114,103,105,110,103,0] /* statistics for mergi */, "i8", ALLOC_NONE, 5296592);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,110,101,119,104,97,115,104,116,97,98,108,101,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,40,37,100,41,32,111,114,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0] /* qhull error (qh_newh */, "i8", ALLOC_NONE, 5296616);
allocate([113,104,95,118,101,114,116,101,120,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0] /* qh_vertexridges: fou */, "i8", ALLOC_NONE, 5296720);
allocate([32,32,32,32,45,32,109,97,120,111,117,116,115,105,100,101,58,32,37,49,48,46,55,103,10,0] /*     - maxoutside: %1 */, "i8", ALLOC_NONE, 5296764);
allocate([113,104,95,109,97,114,107,107,101,101,112,58,32,111,110,108,121,32,107,101,101,112,32,37,100,32,108,97,114,103,101,115,116,32,97,110,100,47,111,114,32,37,100,32,109,111,115,116,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,97,110,100,47,111,114,32,109,105,110,32,97,114,101,97,32,37,46,50,103,10,0] /* qh_markkeep: only ke */, "i8", ALLOC_NONE, 5296792);
allocate([99,111,110,99,97,118,101,32,114,105,100,103,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* concave ridges in ge */, "i8", ALLOC_NONE, 5296880);
allocate([113,104,95,110,101,97,114,118,101,114,116,101,120,58,32,118,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0] /* qh_nearvertex: v%d d */, "i8", ALLOC_NONE, 5296912);
allocate([10,65,116,32,37,100,58,37,100,58,37,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,46,32,32,84,104,101,32,104,117,108,108,10,32,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,10,0] /* \0AAt %d:%d:%d & %2. */, "i8", ALLOC_NONE, 5296956);
allocate([10,65,116,32,101,114,114,111,114,32,101,120,105,116,58,10,0] /* \0AAt error exit:\0A */, "i8", ALLOC_NONE, 5297064);
allocate([32,32,32,32,45,32,99,101,110,116,101,114,58,32,0] /*     - center: \00 */, "i8", ALLOC_NONE, 5297084);
allocate([100,101,103,101,110,101,114,97,116,101,32,104,121,112,101,114,112,108,97,110,101,115,32,114,101,99,111,109,112,117,116,101,100,32,119,105,116,104,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0] /* degenerate hyperplan */, "i8", ALLOC_NONE, 5297100);
allocate([99,111,112,108,97,110,97,114,32,99,101,110,116,114,117,109,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* coplanar centrums in */, "i8", ALLOC_NONE, 5297160);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,114,101,112,108,97,99,101,41,58,32,101,108,101,109,32,37,112,32,110,111,116,32,102,111,117,110,100,32,105,110,32,115,101,116,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5297196);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,97,114,118,101,114,116,101,120,41,58,32,113,104,46,86,69,82,84,69,88,110,101,105,103,104,98,111,114,115,32,97,110,100,32,102,97,99,101,116,45,62,99,101,110,116,101,114,32,114,101,113,117,105,114,101,100,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5297260);
allocate([113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,118,101,114,116,101,120,32,100,101,108,101,116,101,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0] /* qh_tracemerge: trace */, "i8", ALLOC_NONE, 5297368);
allocate([32,32,32,32,45,32,111,102,102,115,101,116,58,32,37,49,48,46,55,103,10,0] /*     - offset: %10.7g */, "i8", ALLOC_NONE, 5297424);
allocate([99,111,112,108,97,110,97,114,32,97,110,103,108,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0] /* coplanar angles in g */, "i8", ALLOC_NONE, 5297448);
allocate([113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,46,32,83,116,111,112,63,32,37,100,32,105,102,32,100,105,115,116,32,62,32,37,50,46,50,103,10,0] /* qh_findbestnew: poin */, "i8", ALLOC_NONE, 5297480);
allocate([113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,102,97,99,101,116,32,97,110,100,32,118,101,114,116,101,120,32,97,102,116,101,114,32,109,101,114,103,101,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0] /* qh_tracemerge: trace */, "i8", ALLOC_NONE, 5297544);
allocate([32,32,32,32,45,32,110,111,114,109,97,108,58,32,0] /*     - normal: \00 */, "i8", ALLOC_NONE, 5297624);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,115,105,109,112,108,105,99,105,97,108,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5297640);
allocate([32,32,32,32,45,32,109,101,114,103,101,115,58,32,37,100,10,0] /*     - merges: %d\0A\ */, "i8", ALLOC_NONE, 5297692);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,101,110,116,114,117,109,32,99,111,110,118,101,120,105,116,121,0] /* distance tests for c */, "i8", ALLOC_NONE, 5297712);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,112,37,100,40,118,37,100,41,32,105,115,32,37,46,50,103,32,102,114,111,109,32,102,37,100,10,0] /* qh_check_maxout: p%d */, "i8", ALLOC_NONE, 5297752);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,107,101,101,112,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5297796);
allocate([113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,102,111,117,110,100,32,37,100,32,110,111,110,45,99,111,110,118,101,120,44,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,10,0] /* qh_test_vneighbors:  */, "i8", ALLOC_NONE, 5297876);
allocate([113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,115,32,102,37,100,32,115,107,105,112,32,37,100,10,0] /* qh_facetintersect: f */, "i8", ALLOC_NONE, 5297936);
allocate([32,32,32,32,45,32,119,97,115,32,104,111,114,105,122,111,110,32,116,111,32,102,37,100,10,0] /*     - was horizon to */, "i8", ALLOC_NONE, 5297988);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,98,101,115,116,32,109,101,114,103,101,0] /* distance tests for b */, "i8", ALLOC_NONE, 5298016);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,110,111,32,109,97,120,105,109,117,109,32,109,97,116,99,104,32,97,116,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5298048);
allocate([113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,105,110,103,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,10,0] /* qh_test_vneighbors:  */, "i8", ALLOC_NONE, 5298148);
allocate([32,32,32,32,45,32,111,119,110,101,114,32,111,102,32,110,111,114,109,97,108,32,38,32,99,101,110,116,114,117,109,32,105,115,32,102,97,99,101,116,32,102,37,100,10,0] /*     - owner of norma */, "i8", ALLOC_NONE, 5298208);
allocate([98,101,115,116,32,109,101,114,103,101,115,32,117,115,101,100,32,99,101,110,116,114,117,109,32,105,110,115,116,101,97,100,32,111,102,32,118,101,114,116,105,99,101,115,0] /* best merges used cen */, "i8", ALLOC_NONE, 5298256);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,116,101,115,116,97,108,108,32,37,100,44,32,102,97,99,101,116,115,32,97,114,101,32,37,115,10,0] /* qh_checkzero: testal */, "i8", ALLOC_NONE, 5298304);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,44,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5298348);
allocate([113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,105,110,105,116,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0] /* qhull error (qh_memi */, "i8", ALLOC_NONE, 5298436);
allocate([32,32,32,32,45,32,115,104,97,114,101,115,32,115,97,109,101,32,118,105,115,105,98,108,101,47,104,111,114,105,122,111,110,32,97,115,32,102,37,100,10,0] /*     - shares same vi */, "i8", ALLOC_NONE, 5298484);
allocate([97,110,103,108,101,115,32,99,111,109,112,117,116,101,100,32,102,111,114,32,114,105,100,103,101,32,99,111,110,118,101,120,105,116,121,0] /* angles computed for  */, "i8", ALLOC_NONE, 5298528);
allocate([112,114,101,99,105,115,105,111,110,32,115,116,97,116,105,115,116,105,99,115,0] /* precision statistics */, "i8", ALLOC_NONE, 5298564);
allocate([113,104,117,108,108,32,101,114,114,111,114,58,32,116,104,101,32,106,111,103,103,108,101,32,102,111,114,32,39,81,74,110,39,44,32,37,46,50,103,44,32,105,115,32,98,101,108,111,119,32,114,111,117,110,100,111,102,102,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,115,44,32,37,46,50,103,10,0] /* qhull error: the jog */, "i8", ALLOC_NONE, 5298588);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,100,105,115,116,32,37,50,46,50,103,44,32,109,97,120,32,105,115,32,110,111,119,32,102,37,100,32,102,37,100,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5298680);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,110,99,97,118,101,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5298776);
allocate([113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,97,114,116,32,98,117,105,108,100,32,104,117,108,108,10,0] /* qh_buildhull: start  */, "i8", ALLOC_NONE, 5298876);
allocate([32,32,32,32,45,32,114,101,112,108,97,99,101,109,101,110,116,58,32,102,37,100,10,0] /*     - replacement: f */, "i8", ALLOC_NONE, 5298908);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,100,101,116,101,114,109,105,110,105,110,103,32,109,101,114,103,101,115,0] /* statistics for deter */, "i8", ALLOC_NONE, 5298932);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,109,101,114,103,101,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5298968);
allocate([113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,97,110,103,108,101,32,37,52,46,52,103,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_test_appendmerge: */, "i8", ALLOC_NONE, 5299048);
allocate([32,32,32,32,45,32,97,114,101,97,58,32,37,50,46,50,103,10,0] /*     - area: %2.2g\0A */, "i8", ALLOC_NONE, 5299112);
allocate([100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0] /* duplicated ridges wi */, "i8", ALLOC_NONE, 5299132);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,109,105,115,115,105,110,103,32,100,117,112,114,105,100,103,101,32,97,116,32,102,37,100,32,115,107,105,112,32,37,100,32,102,111,114,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5299172);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,112,105,110,99,104,101,100,32,118,37,100,32,116,111,32,118,37,100,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5299276);
allocate([32,114,101,100,117,110,100,97,110,116,0] /*  redundant\00 */, "i8", ALLOC_NONE, 5299344);
allocate([113,104,95,101,97,99,104,118,111,114,111,110,111,105,58,32,86,111,114,111,110,111,105,32,114,105,100,103,101,32,111,102,32,37,100,32,118,101,114,116,105,99,101,115,32,98,101,116,119,101,101,110,32,115,105,116,101,115,32,37,100,32,97,110,100,32,37,100,10,0] /* qh_eachvoronoi: Voro */, "i8", ALLOC_NONE, 5299356);
allocate([100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,105,110,32,115,97,109,101,32,109,101,114,103,101,32,99,121,99,108,101,0] /* duplicated ridges in */, "i8", ALLOC_NONE, 5299428);
allocate([113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,102,105,110,100,32,100,117,112,108,105,99,97,116,101,32,109,97,116,99,104,101,115,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0] /* qh_matchduplicates:  */, "i8", ALLOC_NONE, 5299468);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,111,108,100,102,97,99,101,116,32,102,37,100,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5299552);
allocate([97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,40,33,48,115,41,0] /* ave. distance of a n */, "i8", ALLOC_NONE, 5299608);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5299656);
allocate([32,100,101,103,101,110,101,114,97,116,101,0] /*  degenerate\00 */, "i8", ALLOC_NONE, 5299660);
allocate([99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,100,117,114,105,110,103,32,112,97,114,116,105,116,105,111,110,105,110,103,0] /* coplanar points duri */, "i8", ALLOC_NONE, 5299672);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,112,101,114,32,115,117,98,114,105,100,103,101,0] /* average number of te */, "i8", ALLOC_NONE, 5299708);
allocate([113,104,95,109,97,107,101,110,101,119,102,97,99,101,116,115,58,32,99,114,101,97,116,101,100,32,37,100,32,110,101,119,32,102,97,99,101,116,115,32,102,114,111,109,32,112,111,105,110,116,32,112,37,100,32,116,111,32,104,111,114,105,122,111,110,10,0] /* qh_makenewfacets: cr */, "i8", ALLOC_NONE, 5299748);
allocate([113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,115,101,118,101,114,97,108,32,102,97,99,101,116,115,10,0] /* qh_renamevertex: ren */, "i8", ALLOC_NONE, 5299816);
allocate([32,110,111,116,102,117,114,116,104,101,115,116,0] /*  notfurthest\00 */, "i8", ALLOC_NONE, 5299872);
allocate([116,111,116,97,108,32,108,111,111,107,117,112,115,32,111,102,32,115,117,98,114,105,100,103,101,115,40,100,117,112,108,105,99,97,116,101,115,32,97,110,100,32,98,111,117,110,100,97,114,121,41,0] /* total lookups of sub */, "i8", ALLOC_NONE, 5299888);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,110,111,32,110,101,119,32,102,97,99,101,116,115,32,102,111,114,32,112,111,105,110,116,32,112,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5299940);
allocate([113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,115,119,97,112,112,101,100,32,116,104,101,32,116,111,112,32,97,110,100,32,98,111,116,116,111,109,32,111,102,32,114,105,100,103,101,32,114,37,100,10,0] /* qh_renameridgevertex */, "i8", ALLOC_NONE, 5300008);
allocate([32,102,108,105,112,112,101,100,0] /*  flipped\00 */, "i8", ALLOC_NONE, 5300072);
allocate([97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,116,111,32,109,97,116,99,104,32,97,32,114,105,100,103,101,0] /* average number of te */, "i8", ALLOC_NONE, 5300084);
allocate([32,37,54,46,52,103,0] /*  %6.4g\00 */, "i8", ALLOC_NONE, 5300128);
allocate([113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,114,105,100,103,101,32,114,37,100,32,100,101,108,101,116,101,100,46,32,32,73,116,32,99,111,110,116,97,105,110,101,100,32,98,111,116,104,32,118,37,100,32,97,110,100,32,118,37,100,10,0] /* qh_renameridgevertex */, "i8", ALLOC_NONE, 5300136);
allocate([32,110,101,119,109,101,114,103,101,0] /*  newmerge\00 */, "i8", ALLOC_NONE, 5300212);
allocate([116,111,116,97,108,32,108,111,111,107,117,112,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,0] /* total lookups for ma */, "i8", ALLOC_NONE, 5300224);
allocate([113,104,95,99,104,101,99,107,95,109,97,120,111,117,116,58,32,100,101,116,101,114,109,105,110,101,32,97,99,116,117,97,108,32,109,97,120,111,117,116,115,105,100,101,32,97,110,100,32,109,105,110,118,101,114,116,101,120,10,0] /* qh_check_maxout: det */, "i8", ALLOC_NONE, 5300272);
allocate([113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,115,105,109,112,108,101,120,32,99,111,110,115,116,114,117,99,116,101,100,44,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,58,0] /* qh_initialhull: simp */, "i8", ALLOC_NONE, 5300332);
allocate([113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,58,32,112,37,100,40,118,37,100,41,32,105,115,32,115,104,97,114,101,100,32,98,121,32,102,37,100,40,37,100,32,114,105,100,103,101,115,41,32,97,110,100,32,102,37,100,10,0] /* qh_rename_sharedvert */, "i8", ALLOC_NONE, 5300388);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,41,58,32,102,37,100,32,111,114,32,102,37,100,32,110,111,116,32,105,110,32,111,116,104,101,114,115,32,110,101,105,103,104,98,111,114,115,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5300460);
allocate([32,109,101,114,103,101,114,105,100,103,101,50,0] /*  mergeridge2\00 */, "i8", ALLOC_NONE, 5300540);
allocate([115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,0] /* statistics for match */, "i8", ALLOC_NONE, 5300556);
allocate([95,110,97,114,114,111,119,45,104,117,108,108,0] /* _narrow-hull\00 */, "i8", ALLOC_NONE, 5300588);
allocate([32,109,101,114,103,101,114,105,100,103,101,49,0] /*  mergeridge1\00 */, "i8", ALLOC_NONE, 5300604);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,111,109,112,117,116,105,110,103,32,102,117,114,116,104,101,115,116,0] /* distance tests for c */, "i8", ALLOC_NONE, 5300620);
allocate([113,104,95,99,104,101,99,107,122,101,114,111,58,32,115,107,105,112,32,99,111,110,118,101,120,105,116,121,32,99,104,101,99,107,32,117,110,116,105,108,32,102,105,114,115,116,32,112,114,101,45,109,101,114,103,101,10,0] /* qh_checkzero: skip c */, "i8", ALLOC_NONE, 5300660);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,102,97,99,101,116,32,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5300720);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,41,58,32,118,37,100,39,115,32,110,101,105,103,104,98,111,114,115,32,110,111,116,32,105,110,32,102,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5300800);
allocate([32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,58,32,37,50,46,50,103,0] /*   Maximum distance o */, "i8", ALLOC_NONE, 5300876);
allocate([32,100,117,112,114,105,100,103,101,0] /*  dupridge\00 */, "i8", ALLOC_NONE, 5300928);
allocate([32,32,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,116,104,101,115,101,32,112,97,114,116,105,116,105,111,110,115,0] /*    distance tests fo */, "i8", ALLOC_NONE, 5300940);
allocate([95,110,101,97,114,45,105,110,115,105,100,101,0] /* _near-inside\00 */, "i8", ALLOC_NONE, 5300980);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,37,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5300996);
allocate([95,114,117,110,0] /* _run\00 */, "i8", ALLOC_NONE, 5301072);
allocate([32,107,101,101,112,99,101,110,116,114,117,109,0] /*  keepcentrum\00 */, "i8", ALLOC_NONE, 5301080);
allocate([112,97,114,116,105,116,105,111,110,115,32,111,102,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,111,114,32,100,101,108,101,116,101,100,32,118,101,114,116,105,99,101,115,0] /* partitions of coplan */, "i8", ALLOC_NONE, 5301096);
allocate([81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,102,111,114,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,32,32,79,112,116,105,111,110,32,39,81,122,39,32,97,100,100,115,32,97,32,112,111,105,110,116,32,34,97,116,32,105,110,102,105,110,105,116,121,34,32,40,97,98,111,118,101,32,116,104,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,112,97,114,97,98,111,108,111,105,100,41,46,10,0] /* Qhull input error: U */, "i8", ALLOC_NONE, 5301148);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5301348);
allocate([32,40,37,46,49,102,120,41,10,0] /*  (%.1fx)\0A\00 */, "i8", ALLOC_NONE, 5301416);
allocate([32,109,101,114,103,101,104,111,114,105,122,111,110,0] /*  mergehorizon\00 */, "i8", ALLOC_NONE, 5301428);
allocate([116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,0] /* total number of dist */, "i8", ALLOC_NONE, 5301444);
allocate([81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,67,97,110,32,110,111,116,32,99,111,109,112,117,116,101,32,116,104,101,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,117,112,112,101,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,10,0] /* Qhull input error: C */, "i8", ALLOC_NONE, 5301476);
allocate([113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,10,0] /* qh_remove_extraverti */, "i8", ALLOC_NONE, 5301604);
allocate([32,99,111,112,108,97,110,97,114,0] /*  coplanar\00 */, "i8", ALLOC_NONE, 5301660);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,114,105,100,103,101,51,41,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,101,114,116,101,120,32,112,37,100,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,32,97,116,32,102,97,99,101,116,32,37,100,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5301672);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,115,116,97,116,105,115,116,105,99,115,0] /* distance tests for s */, "i8", ALLOC_NONE, 5301768);
allocate([81,105,110,116,101,114,105,111,114,45,107,101,101,112,0] /* Qinterior-keep\00 */, "i8", ALLOC_NONE, 5301800);
allocate([113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,105,110,105,116,105,97,108,32,111,114,105,101,110,116,97,116,105,111,110,32,105,110,99,111,114,114,101,99,116,46,32,32,67,111,114,114,101,99,116,32,97,108,108,32,102,97,99,101,116,115,10,0] /* qh_initialhull: init */, "i8", ALLOC_NONE, 5301816);
allocate([113,104,95,114,101,100,117,110,100,97,110,116,95,118,101,114,116,101,120,58,32,99,104,101,99,107,32,105,102,32,118,37,100,32,99,97,110,32,98,101,32,114,101,110,97,109,101,100,10,0] /* qh_redundant_vertex: */, "i8", ALLOC_NONE, 5301884);
allocate([32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,58,32,37,50,46,50,103,0] /*   Maximum distance o */, "i8", ALLOC_NONE, 5301936);
allocate([10,81,104,117,108,108,32,104,97,115,32,115,116,97,114,116,101,100,32,112,111,115,116,45,109,101,114,103,105,110,103,46,0] /* \0AQhull has started */, "i8", ALLOC_NONE, 5301988);
allocate([32,115,101,101,110,0] /*  seen\00 */, "i8", ALLOC_NONE, 5302024);
allocate([99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,102,111,114,32,110,101,119,32,118,101,114,116,105,99,101,115,0] /* coplanar horizon fac */, "i8", ALLOC_NONE, 5302032);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,111,117,116,112,117,116,0] /* distance tests for o */, "i8", ALLOC_NONE, 5302076);
allocate([32,37,112,0] /*  %p\00 */, "i8", ALLOC_NONE, 5302104);
allocate([113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,97,100,100,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0] /* qhull internal error */, "i8", ALLOC_NONE, 5302108);
allocate([113,104,95,105,110,105,116,98,117,105,108,100,58,32,105,110,105,116,105,97,108,32,104,117,108,108,32,99,114,101,97,116,101,100,32,97,110,100,32,112,111,105,110,116,115,32,112,97,114,116,105,116,105,111,110,101,100,10,0] /* qh_initbuild: initia */, "i8", ALLOC_NONE, 5302180);
allocate([113,104,95,114,101,100,117,99,101,118,101,114,116,105,99,101,115,58,32,114,101,110,97,109,101,100,32,37,100,32,115,104,97,114,101,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,46,32,68,101,103,101,110,63,32,37,100,10,0] /* qh_reducevertices: r */, "i8", ALLOC_NONE, 5302240);
allocate([32,32,37,115,32,118,111,108,117,109,101,58,32,32,32,32,32,32,32,37,50,46,56,103,10,0] /*   %s volume:       % */, "i8", ALLOC_NONE, 5302324);
allocate([32,110,111,116,71,0] /*  notG\00 */, "i8", ALLOC_NONE, 5302352);
allocate([100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,103,111,111,100,32,112,111,105,110,116,0] /* distance tests for c */, "i8", ALLOC_NONE, 5302360);
allocate([113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,109,101,114,103,105,110,103,32,104,97,115,32,102,111,114,109,101,100,32,97,110,100,32,100,101,108,101,116,101,100,32,97,32,99,111,110,101,32,111,102,32,110,101,119,32,102,97,99,101,116,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0] /* qhull precision erro */, "i8", ALLOC_NONE, 5302400);
allocate([113,104,95,100,105,115,116,112,108,97,110,101,58,32,0] /* qh_distplane: \00 */, "i8", ALLOC_NONE, 5302516);
allocate(468, "i8", ALLOC_NONE, 5302532);
allocate([0,16,0,0], "i8", ALLOC_NONE, 5303000);
allocate(4, "i8", ALLOC_NONE, 5303004);
allocate(4, "i8", ALLOC_NONE, 5303008);

  var _sqrt=Math.sqrt;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        if (HEAP8[((pdest)+(len+i))] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[((pdest)+(len+i))]=0
          break;
        }
      }
      return pdest;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  var _fabs=Math.abs;

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var comparator = function(x, y) {
        return Runtime.dynCall('iii', cmp, [x, y]);
      }
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }
var _setjmp; // stub for _setjmp

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  var _floor=Math.floor;

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        //assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }var _vfprintf;

  function _llvm_va_end() {}

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  var _llvm_memset_p0i8_i64;






  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
___setErrNo(0);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_qh_printvridge,0,_qh_compareangle,0,_qh_compare_facetarea,0,_qh_comparevisit,0,_qh_intcompare,0,_qh_printvnorm,0,_qh_compare_facetvisit,0,_qh_compare_facetmerge,0,_qh_comparemerge,0];

function _qh_distplane($point, $facet, $dist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $normal1 = $facet + 24 | 0;
    var $0 = HEAP32[$normal1 >> 2];
    var $1 = HEAP32[5247504 >> 2];
    if (($1 | 0) == 2) {
      label = 3;
      break;
    } else if (($1 | 0) == 3) {
      label = 4;
      break;
    } else if (($1 | 0) == 4) {
      label = 5;
      break;
    } else if (($1 | 0) == 5) {
      label = 6;
      break;
    } else if (($1 | 0) == 6) {
      label = 7;
      break;
    } else if (($1 | 0) == 7) {
      label = 8;
      break;
    } else if (($1 | 0) == 8) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    var $offset = $facet + 16 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $3 * $4;
    var $add = $2 + $mul;
    var $arrayidx3 = $point + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx4 = $0 + 8 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul5 = $5 * $6;
    var $add6 = $add + $mul5;
    HEAPF64[tempDoublePtr >> 3] = $add6, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 4:
    var $offset8 = $facet + 16 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset8 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset8 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul11 = $8 * $9;
    var $add12 = $7 + $mul11;
    var $arrayidx13 = $point + 8 | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx13 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx13 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx14 = $0 + 8 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx14 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx14 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul15 = $10 * $11;
    var $add16 = $add12 + $mul15;
    var $arrayidx17 = $point + 16 | 0;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx17 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx17 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx18 = $0 + 16 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul19 = $12 * $13;
    var $add20 = $add16 + $mul19;
    HEAPF64[tempDoublePtr >> 3] = $add20, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 5:
    var $offset22 = $facet + 16 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul25 = $15 * $16;
    var $add26 = $14 + $mul25;
    var $arrayidx27 = $point + 8 | 0;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx28 = $0 + 8 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx28 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx28 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul29 = $17 * $18;
    var $add30 = $add26 + $mul29;
    var $arrayidx31 = $point + 16 | 0;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx31 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx31 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx32 = $0 + 16 | 0;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx32 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx32 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul33 = $19 * $20;
    var $add34 = $add30 + $mul33;
    var $arrayidx35 = $point + 24 | 0;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx35 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx35 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx36 = $0 + 24 | 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx36 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx36 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul37 = $21 * $22;
    var $add38 = $add34 + $mul37;
    HEAPF64[tempDoublePtr >> 3] = $add38, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 6:
    var $offset40 = $facet + 16 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset40 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset40 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul43 = $24 * $25;
    var $add44 = $23 + $mul43;
    var $arrayidx45 = $point + 8 | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx45 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx45 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx46 = $0 + 8 | 0;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx46 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx46 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul47 = $26 * $27;
    var $add48 = $add44 + $mul47;
    var $arrayidx49 = $point + 16 | 0;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx49 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx49 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx50 = $0 + 16 | 0;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx50 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx50 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul51 = $28 * $29;
    var $add52 = $add48 + $mul51;
    var $arrayidx53 = $point + 24 | 0;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx53 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx53 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx54 = $0 + 24 | 0;
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx54 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx54 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul55 = $30 * $31;
    var $add56 = $add52 + $mul55;
    var $arrayidx57 = $point + 32 | 0;
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx57 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx57 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx58 = $0 + 32 | 0;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx58 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx58 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul59 = $32 * $33;
    var $add60 = $add56 + $mul59;
    HEAPF64[tempDoublePtr >> 3] = $add60, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 7:
    var $offset62 = $facet + 16 | 0;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset62 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset62 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul65 = $35 * $36;
    var $add66 = $34 + $mul65;
    var $arrayidx67 = $point + 8 | 0;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx68 = $0 + 8 | 0;
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx68 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx68 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul69 = $37 * $38;
    var $add70 = $add66 + $mul69;
    var $arrayidx71 = $point + 16 | 0;
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx71 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx71 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx72 = $0 + 16 | 0;
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx72 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx72 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul73 = $39 * $40;
    var $add74 = $add70 + $mul73;
    var $arrayidx75 = $point + 24 | 0;
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx75 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx75 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx76 = $0 + 24 | 0;
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx76 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx76 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul77 = $41 * $42;
    var $add78 = $add74 + $mul77;
    var $arrayidx79 = $point + 32 | 0;
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx79 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx79 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx80 = $0 + 32 | 0;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx80 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx80 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul81 = $43 * $44;
    var $add82 = $add78 + $mul81;
    var $arrayidx83 = $point + 40 | 0;
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx83 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx83 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx84 = $0 + 40 | 0;
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx84 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx84 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul85 = $45 * $46;
    var $add86 = $add82 + $mul85;
    HEAPF64[tempDoublePtr >> 3] = $add86, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 8:
    var $offset88 = $facet + 16 | 0;
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset88 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset88 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91 = $48 * $49;
    var $add92 = $47 + $mul91;
    var $arrayidx93 = $point + 8 | 0;
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx93 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx93 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx94 = $0 + 8 | 0;
    var $51 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx94 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx94 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul95 = $50 * $51;
    var $add96 = $add92 + $mul95;
    var $arrayidx97 = $point + 16 | 0;
    var $52 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx97 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx97 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx98 = $0 + 16 | 0;
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul99 = $52 * $53;
    var $add100 = $add96 + $mul99;
    var $arrayidx101 = $point + 24 | 0;
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx101 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx101 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx102 = $0 + 24 | 0;
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx102 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx102 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul103 = $54 * $55;
    var $add104 = $add100 + $mul103;
    var $arrayidx105 = $point + 32 | 0;
    var $56 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx105 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx105 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx106 = $0 + 32 | 0;
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx106 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx106 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul107 = $56 * $57;
    var $add108 = $add104 + $mul107;
    var $arrayidx109 = $point + 40 | 0;
    var $58 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx109 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx109 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx110 = $0 + 40 | 0;
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx110 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx110 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul111 = $58 * $59;
    var $add112 = $add108 + $mul111;
    var $arrayidx113 = $point + 48 | 0;
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx113 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx113 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx114 = $0 + 48 | 0;
    var $61 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx114 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx114 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul115 = $60 * $61;
    var $add116 = $add112 + $mul115;
    HEAPF64[tempDoublePtr >> 3] = $add116, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 9:
    var $offset118 = $facet + 16 | 0;
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset118 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset118 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $64 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul121 = $63 * $64;
    var $add122 = $62 + $mul121;
    var $arrayidx123 = $point + 8 | 0;
    var $65 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx123 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx123 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx124 = $0 + 8 | 0;
    var $66 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx124 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx124 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul125 = $65 * $66;
    var $add126 = $add122 + $mul125;
    var $arrayidx127 = $point + 16 | 0;
    var $67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx127 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx127 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx128 = $0 + 16 | 0;
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx128 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx128 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul129 = $67 * $68;
    var $add130 = $add126 + $mul129;
    var $arrayidx131 = $point + 24 | 0;
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx131 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx131 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx132 = $0 + 24 | 0;
    var $70 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx132 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx132 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul133 = $69 * $70;
    var $add134 = $add130 + $mul133;
    var $arrayidx135 = $point + 32 | 0;
    var $71 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx135 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx135 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx136 = $0 + 32 | 0;
    var $72 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx136 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul137 = $71 * $72;
    var $add138 = $add134 + $mul137;
    var $arrayidx139 = $point + 40 | 0;
    var $73 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx139 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx139 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx140 = $0 + 40 | 0;
    var $74 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx140 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx140 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul141 = $73 * $74;
    var $add142 = $add138 + $mul141;
    var $arrayidx143 = $point + 48 | 0;
    var $75 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx143 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx143 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx144 = $0 + 48 | 0;
    var $76 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx144 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx144 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul145 = $75 * $76;
    var $add146 = $add142 + $mul145;
    var $arrayidx147 = $point + 56 | 0;
    var $77 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx147 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx147 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx148 = $0 + 56 | 0;
    var $78 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx148 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx148 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul149 = $77 * $78;
    var $add150 = $add146 + $mul149;
    HEAPF64[tempDoublePtr >> 3] = $add150, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 12;
    break;
   case 10:
    var $offset151 = $facet + 16 | 0;
    var $79 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset151 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset151 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $79, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $80 = HEAP32[5247504 >> 2];
    var $tobool91 = ($80 | 0) == 0;
    if ($tobool91) {
      label = 12;
      break;
    } else {
      var $coordp_092 = $point;
      var $normal_093 = $0;
      var $k_094 = $80;
      var $81 = $79;
      label = 11;
      break;
    }
   case 11:
    var $81;
    var $k_094;
    var $normal_093;
    var $coordp_092;
    var $dec = $k_094 - 1 | 0;
    var $incdec_ptr = $coordp_092 + 8 | 0;
    var $82 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_092 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_092 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr152 = $normal_093 + 8 | 0;
    var $83 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal_093 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal_093 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul153 = $82 * $83;
    var $add154 = $81 + $mul153;
    HEAPF64[tempDoublePtr >> 3] = $add154, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      var $coordp_092 = $incdec_ptr;
      var $normal_093 = $incdec_ptr152;
      var $k_094 = $dec;
      var $81 = $add154;
      label = 11;
      break;
    }
   case 12:
    var $84 = HEAP32[5243432 >> 2];
    var $inc = $84 + 1 | 0;
    HEAP32[5243432 >> 2] = $inc;
    var $85 = HEAP32[5247336 >> 2];
    var $tobool155 = ($85 | 0) == 0;
    var $86 = HEAP32[5247036 >> 2];
    var $cmp = ($86 | 0) < 4;
    var $or_cond = $tobool155 & $cmp;
    if ($or_cond) {
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    if ($tobool155) {
      var $90 = $86;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $call = _qh_rand();
    var $conv = $call | 0;
    var $mul158 = $conv * 2;
    var $div = $mul158 / 2147483646;
    var $sub = $div - 1;
    var $87 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247340 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247344 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul159 = $sub * $87;
    var $88 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul160 = $mul159 * $88;
    var $89 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add161 = $89 + $mul160;
    HEAPF64[tempDoublePtr >> 3] = $add161, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $_pre = HEAP32[5247036 >> 2];
    var $90 = $_pre;
    label = 15;
    break;
   case 15:
    var $90;
    var $cmp163 = ($90 | 0) > 3;
    if ($cmp163) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5302516);
    _qh_fprintf(5290352);
    _qh_fprintf(5283780);
    label = 17;
    break;
   case 17:
    return;
  }
}
_qh_distplane["X"] = 1;
function _qh_findbest($point, $startfacet, $bestoutside, $isnewfacets, $noupper, $dist, $isoutside, $numpart) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestdist = __stackBase__;
    var $numpartnew = __stackBase__ + 8;
    HEAPF64[tempDoublePtr >> 3] = -8.988465674311579e+307, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = HEAP32[5247036 >> 2];
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    HEAP32[$numpartnew >> 2] = 0;
    var $2 = HEAP32[5243656 >> 2];
    var $inc1 = $2 + 1 | 0;
    HEAP32[5243656 >> 2] = $inc1;
    var $cmp = ($0 | 0) > 2;
    var $_pre = HEAP32[5247424 >> 2];
    if ($cmp) {
      var $4 = $_pre;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool = ($_pre | 0) != 0;
    var $3 = HEAP32[5247432 >> 2];
    var $cmp2 = ($3 | 0) > -1;
    var $or_cond = $tobool & $cmp2;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    var $call = _qh_pointid($point);
    var $cmp4 = ($3 | 0) == ($call | 0);
    if ($cmp4) {
      var $4 = $_pre;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    var $4;
    var $cmp5 = ($4 | 0) > ($0 | 0);
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[5247036 >> 2] = $4;
    label = 7;
    break;
   case 7:
    _qh_fprintf(5274320);
    _qh_fprintf(5268460);
    _qh_fprintf(5264936);
    _qh_fprintf(5260560);
    label = 8;
    break;
   case 8:
    var $tobool9 = ($isoutside | 0) != 0;
    if ($tobool9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[$isoutside >> 2] = 1;
    label = 10;
    break;
   case 10:
    var $5 = $startfacet + 76 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $bf_clear = $7 & 65536;
    var $tobool12 = ($bf_clear | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 11:
    HEAP32[$numpart >> 2] = 1;
    _qh_distplane($point, $startfacet, $dist);
    var $tobool14 = ($bestoutside | 0) != 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp16 = $8 < $9;
    var $or_cond4 = $tobool14 | $cmp16;
    if ($or_cond4) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $10 = HEAP32[$6 >> 2];
    var $bf_clear19 = $10 & 131072;
    var $tobool20 = ($bf_clear19 | 0) == 0;
    var $tobool22 = ($noupper | 0) == 0;
    var $or_cond68 = $tobool20 | $tobool22;
    if ($or_cond68) {
      var $bestfacet_6 = $startfacet;
      label = 45;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAPF64[tempDoublePtr >> 3] = $8, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $11 = HEAP32[$6 >> 2];
    var $bf_clear26 = $11 & 131072;
    var $tobool27 = ($bf_clear26 | 0) == 0;
    var $startfacet_ = $tobool27 ? $startfacet : 0;
    var $bestfacet_0 = $startfacet_;
    var $12 = $8;
    label = 15;
    break;
   case 14:
    HEAP32[$numpart >> 2] = 0;
    var $bestfacet_0 = 0;
    var $12 = -8.988465674311579e+307;
    label = 15;
    break;
   case 15:
    var $12;
    var $bestfacet_0;
    var $visitid31 = $startfacet + 68 | 0;
    HEAP32[$visitid31 >> 2] = $inc;
    var $tobool328895 = ($startfacet | 0) == 0;
    if ($tobool328895) {
      var $lastfacet_0_lcssa = 0;
      var $bestfacet_1_ph92 = $bestfacet_0;
      var $28 = $12;
      label = 31;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $tobool47 = ($isnewfacets | 0) == 0;
    var $tobool62 = ($bestoutside | 0) != 0;
    var $tobool70 = ($noupper | 0) == 0;
    var $bestfacet_1_ph96 = $bestfacet_0;
    var $facet_0_ph97 = $startfacet;
    var $13 = $12;
    label = 17;
    break;
   case 17:
    var $13;
    var $facet_0_ph97;
    var $bestfacet_1_ph96;
    var $tobool78 = ($bestfacet_1_ph96 | 0) == 0;
    var $14 = HEAP32[5247036 >> 2];
    var $cmp33 = ($14 | 0) > 3;
    if ($cmp33) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    _qh_fprintf(5257620);
    label = 19;
    break;
   case 19:
    var $neighbors = $facet_0_ph97 + 56 | 0;
    var $15 = HEAP32[$neighbors >> 2];
    var $tobool39 = ($15 | 0) == 0;
    if ($tobool39) {
      var $lastfacet_0_lcssa = $facet_0_ph97;
      var $bestfacet_1_ph92 = $bestfacet_1_ph96;
      var $28 = $13;
      label = 31;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $p = $15 + 4 | 0;
    var $16 = HEAP32[$p >> 2];
    var $tobool4280 = ($16 | 0) == 0;
    if ($tobool4280) {
      var $lastfacet_0_lcssa = $facet_0_ph97;
      var $bestfacet_1_ph92 = $bestfacet_1_ph96;
      var $28 = $13;
      label = 31;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $17 = $16;
    var $incdec_ptr79100 = $p + 4 | 0;
    var $incdec_ptr79 = $incdec_ptr79100;
    var $incdec_ptr81 = $incdec_ptr79;
    var $18 = $17;
    label = 22;
    break;
   case 22:
    var $18;
    var $incdec_ptr81;
    var $19 = $18 + 76 | 0;
    var $20 = $19;
    var $21 = HEAP32[$20 >> 2];
    var $bf_clear44 = $21 & 1024;
    var $tobool45 = ($bf_clear44 | 0) != 0;
    var $or_cond69 = $tobool45 | $tobool47;
    if ($or_cond69) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $visitid50 = $18 + 68 | 0;
    var $22 = HEAP32[$visitid50 >> 2];
    var $cmp51 = ($22 | 0) == ($inc | 0);
    if ($cmp51) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $incdec_ptr = $incdec_ptr81 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr81 >> 2];
    var $tobool42 = ($23 | 0) == 0;
    if ($tobool42) {
      var $lastfacet_0_lcssa = $facet_0_ph97;
      var $bestfacet_1_ph92 = $bestfacet_1_ph96;
      var $28 = $13;
      label = 31;
      break;
    } else {
      var $incdec_ptr81 = $incdec_ptr;
      var $18 = $23;
      label = 22;
      break;
    }
   case 25:
    HEAP32[$visitid50 >> 2] = $inc;
    var $bf_clear56 = $21 & 65536;
    var $tobool57 = ($bf_clear56 | 0) == 0;
    if ($tobool57) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 26:
    var $24 = HEAP32[$numpart >> 2];
    var $inc59 = $24 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc59;
    _qh_distplane($point, $18, $dist);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp60 = $25 > $13;
    if ($cmp60) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 27:
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp64 = $25 < $26;
    var $or_cond70 = $tobool62 | $cmp64;
    var $_pre3 = HEAP32[$20 >> 2];
    if ($or_cond70) {
      var $27 = $_pre3;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $bf_clear67 = $_pre3 & 131072;
    var $tobool68 = ($bf_clear67 | 0) == 0;
    var $or_cond71 = $tobool68 | $tobool70;
    if ($or_cond71) {
      var $bestfacet_6 = $18;
      label = 45;
      break;
    } else {
      var $27 = $_pre3;
      label = 29;
      break;
    }
   case 29:
    var $27;
    var $bf_clear74 = $27 & 131072;
    var $tobool75 = ($bf_clear74 | 0) == 0;
    var $brmerge = $tobool75 | $tobool78;
    if ($brmerge) {
      label = 30;
      break;
    } else {
      label = 24;
      break;
    }
   case 30:
    var $_mux = $tobool75 ? $18 : 0;
    HEAPF64[tempDoublePtr >> 3] = $25, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool3288 = ($18 | 0) == 0;
    if ($tobool3288) {
      var $lastfacet_0_lcssa = $facet_0_ph97;
      var $bestfacet_1_ph92 = $_mux;
      var $28 = $25;
      label = 31;
      break;
    } else {
      var $bestfacet_1_ph96 = $_mux;
      var $facet_0_ph97 = $18;
      var $13 = $25;
      label = 17;
      break;
    }
   case 31:
    var $28;
    var $bestfacet_1_ph92;
    var $lastfacet_0_lcssa;
    var $tobool85 = ($isnewfacets | 0) == 0;
    if ($tobool85) {
      var $testhorizon_0 = 1;
      var $bestfacet_3 = $bestfacet_1_ph92;
      label = 39;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $tobool87 = ($bestfacet_1_ph92 | 0) == 0;
    if ($tobool87) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAPF64[tempDoublePtr >> 3] = -8.988465674311579e+307, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $next = $startfacet + 44 | 0;
    var $29 = HEAP32[$next >> 2];
    var $call89 = _qh_findbestnew($point, $29, $bestdist, $bestoutside, $isoutside, $numpartnew);
    var $testhorizon_0 = 0;
    var $bestfacet_3 = $call89;
    label = 39;
    break;
   case 34:
    var $30 = HEAP32[5249096 >> 2];
    var $tobool91 = ($30 | 0) == 0;
    if ($tobool91) {
      label = 35;
      break;
    } else {
      var $bestfacet_475 = $bestfacet_1_ph92;
      label = 42;
      break;
    }
   case 35:
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$31;
    var $cmp93 = $28 < $sub;
    if ($cmp93) {
      label = 36;
      break;
    } else {
      var $bestfacet_475 = $bestfacet_1_ph92;
      label = 42;
      break;
    }
   case 36:
    var $call95 = _qh_sharpnewfacets();
    var $tobool96 = ($call95 | 0) == 0;
    if ($tobool96) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $32 = HEAP32[5243760 >> 2];
    var $inc98 = $32 + 1 | 0;
    HEAP32[5243760 >> 2] = $inc98;
    var $call99 = _qh_findbestnew($point, $bestfacet_1_ph92, $bestdist, $bestoutside, $isoutside, $numpartnew);
    HEAP32[5249092 >> 2] = 1;
    var $testhorizon_0 = 0;
    var $bestfacet_3 = $call99;
    label = 39;
    break;
   case 38:
    HEAP32[5249096 >> 2] = 1;
    var $testhorizon_0 = 1;
    var $bestfacet_3 = $bestfacet_1_ph92;
    label = 39;
    break;
   case 39:
    var $bestfacet_3;
    var $testhorizon_0;
    var $tobool105 = ($bestfacet_3 | 0) == 0;
    if ($tobool105) {
      label = 40;
      break;
    } else {
      var $bestfacet_4 = $bestfacet_3;
      label = 41;
      break;
    }
   case 40:
    var $call107 = _qh_findbestlower($lastfacet_0_lcssa, $point, $bestdist, $numpart);
    var $bestfacet_4 = $call107;
    label = 41;
    break;
   case 41:
    var $bestfacet_4;
    var $tobool109 = ($testhorizon_0 | 0) == 0;
    if ($tobool109) {
      var $bestfacet_5 = $bestfacet_4;
      label = 43;
      break;
    } else {
      var $bestfacet_475 = $bestfacet_4;
      label = 42;
      break;
    }
   case 42:
    var $bestfacet_475;
    var $call111 = _qh_findbesthorizon(0, $point, $bestfacet_475, $noupper, $bestdist, $numpartnew);
    var $bestfacet_5 = $call111;
    label = 43;
    break;
   case 43:
    var $bestfacet_5;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $33, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp115 = $33 < $34;
    var $or_cond5 = $tobool9 & $cmp115;
    if ($or_cond5) {
      label = 44;
      break;
    } else {
      var $bestfacet_6 = $bestfacet_5;
      label = 45;
      break;
    }
   case 44:
    HEAP32[$isoutside >> 2] = 0;
    var $bestfacet_6 = $bestfacet_5;
    label = 45;
    break;
   case 45:
    var $bestfacet_6;
    var $35 = HEAP32[$numpart >> 2];
    var $36 = HEAP32[5243672 >> 2];
    var $add = $36 + $35 | 0;
    HEAP32[5243672 >> 2] = $add;
    var $37 = HEAP32[5243664 >> 2];
    var $cmp118 = ($37 | 0) < ($35 | 0);
    if ($cmp118) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    HEAP32[5243664 >> 2] = $35;
    label = 47;
    break;
   case 47:
    var $38 = HEAP32[$numpartnew >> 2];
    var $add121 = $35 + $38 | 0;
    HEAP32[$numpart >> 2] = $add121;
    HEAP32[5247036 >> 2] = $0;
    STACKTOP = __stackBase__;
    return $bestfacet_6;
  }
}
_qh_findbest["X"] = 1;
function _qh_findbestnew($point, $startfacet, $dist, $bestoutside, $isoutside, $numpart) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestdist = __stackBase__;
    HEAPF64[tempDoublePtr >> 3] = -8.988465674311579e+307, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = HEAP32[5247036 >> 2];
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $tobool = ($startfacet | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $2 = HEAP32[5247080 >> 2];
    var $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5302400);
    label = 6;
    break;
   case 5:
    _qh_fprintf(5299940);
    label = 6;
    break;
   case 6:
    _qh_errexit(5, 0, 0);
    label = 7;
    break;
   case 7:
    var $3 = HEAP32[5243728 >> 2];
    var $inc4 = $3 + 1 | 0;
    HEAP32[5243728 >> 2] = $inc4;
    var $4 = HEAP32[5246964 >> 2];
    var $5 = $4 | $bestoutside;
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 8;
      break;
    } else {
      var $isdistoutside_0 = 0;
      var $distoutside_0 = 0;
      label = 9;
      break;
    }
   case 8:
    var $7 = HEAP32[5244576 >> 2];
    var $cmp = ($7 | 0) > 50;
    var $conv = $cmp ? 2 : 1;
    var $8 = HEAP32[5247080 >> 2];
    var $tobool9 = ($8 | 0) != 0;
    var $conv11 = $tobool9 ? 2 : 1;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $9 * $conv11;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp12 = $mul < $10;
    var $_mul = $cmp12 ? $10 : $mul;
    var $mul19 = $conv * $_mul;
    var $isdistoutside_0 = 1;
    var $distoutside_0 = $mul19;
    label = 9;
    break;
   case 9:
    var $distoutside_0;
    var $isdistoutside_0;
    var $tobool21 = ($isoutside | 0) != 0;
    if ($tobool21) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[$isoutside >> 2] = 1;
    label = 11;
    break;
   case 11:
    HEAP32[$numpart >> 2] = 0;
    var $11 = HEAP32[5247036 >> 2];
    var $cmp24 = ($11 | 0) > 2;
    var $_pre = HEAP32[5247424 >> 2];
    if ($cmp24) {
      var $13 = $_pre;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $tobool27 = ($_pre | 0) != 0;
    var $12 = HEAP32[5247432 >> 2];
    var $cmp28 = ($12 | 0) > -1;
    var $or_cond = $tobool27 & $cmp28;
    if ($or_cond) {
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 13:
    var $call = _qh_pointid($point);
    var $cmp31 = ($12 | 0) == ($call | 0);
    if ($cmp31) {
      var $13 = $_pre;
      label = 14;
      break;
    } else {
      label = 17;
      break;
    }
   case 14:
    var $13;
    var $cmp34 = ($13 | 0) > ($11 | 0);
    if ($cmp34) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    HEAP32[5247036 >> 2] = $13;
    label = 16;
    break;
   case 16:
    _qh_fprintf(5297480);
    _qh_fprintf(5295452);
    _qh_fprintf(5293868);
    label = 17;
    break;
   case 17:
    var $tobool68 = ($isdistoutside_0 | 0) == 0;
    if ($tobool) {
      var $bestfacet_3 = 0;
      var $25 = -8.988465674311579e+307;
      label = 25;
      break;
    } else {
      var $facet_151 = $startfacet;
      var $bestfacet_152 = 0;
      var $14 = -8.988465674311579e+307;
      label = 18;
      break;
    }
   case 18:
    var $14;
    var $bestfacet_152;
    var $facet_151;
    var $next = $facet_151 + 44 | 0;
    var $15 = HEAP32[$next >> 2];
    var $tobool46 = ($15 | 0) == 0;
    if ($tobool46) {
      var $bestfacet_3 = $bestfacet_152;
      var $25 = $14;
      label = 25;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $visitid54 = $facet_151 + 68 | 0;
    HEAP32[$visitid54 >> 2] = $inc;
    var $16 = $facet_151 + 76 | 0;
    var $17 = $16;
    var $18 = HEAP32[$17 >> 2];
    var $bf_clear = $18 & 65536;
    var $tobool55 = ($bf_clear | 0) == 0;
    if ($tobool55) {
      label = 20;
      break;
    } else {
      var $bestfacet_2 = $bestfacet_152;
      var $23 = $14;
      label = 24;
      break;
    }
   case 20:
    _qh_distplane($point, $facet_151, $dist);
    var $19 = HEAP32[$numpart >> 2];
    var $inc57 = $19 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc57;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp58 = $20 > $14;
    if ($cmp58) {
      label = 21;
      break;
    } else {
      var $bestfacet_2 = $bestfacet_152;
      var $23 = $14;
      label = 24;
      break;
    }
   case 21:
    var $21 = HEAP32[$17 >> 2];
    var $bf_clear62 = $21 & 131072;
    var $tobool63 = ($bf_clear62 | 0) != 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp65 = $20 < $22;
    var $or_cond45 = $tobool63 & $cmp65;
    if ($or_cond45) {
      var $bestfacet_2 = $bestfacet_152;
      var $23 = $14;
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $cmp70 = $20 < $distoutside_0;
    var $or_cond47 = $tobool68 | $cmp70;
    if ($or_cond47) {
      label = 23;
      break;
    } else {
      var $bestfacet_5 = $facet_151;
      label = 27;
      break;
    }
   case 23:
    HEAPF64[tempDoublePtr >> 3] = $20, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $bestfacet_2 = $facet_151;
    var $23 = $20;
    label = 24;
    break;
   case 24:
    var $23;
    var $bestfacet_2;
    var $24 = HEAP32[$next >> 2];
    var $tobool45 = ($24 | 0) == 0;
    if ($tobool45) {
      var $bestfacet_3 = $bestfacet_2;
      var $25 = $23;
      label = 25;
      break;
    } else {
      var $facet_151 = $24;
      var $bestfacet_152 = $bestfacet_2;
      var $14 = $23;
      label = 18;
      break;
    }
   case 25:
    var $25;
    var $bestfacet_3;
    var $26 = HEAP32[5248952 >> 2];
    var $tobool42_1 = ($26 | 0) == 0;
    if ($tobool42_1) {
      var $bestfacet_3_1 = $bestfacet_3;
      label = 39;
      break;
    } else {
      var $facet_151_1 = $26;
      var $bestfacet_152_1 = $bestfacet_3;
      var $31 = $25;
      label = 32;
      break;
    }
   case 26:
    HEAP32[$isoutside >> 2] = 0;
    var $bestfacet_5 = $call91;
    label = 27;
    break;
   case 27:
    var $bestfacet_5;
    var $27 = HEAP32[$numpart >> 2];
    var $28 = HEAP32[5243744 >> 2];
    var $add = $28 + $27 | 0;
    HEAP32[5243744 >> 2] = $add;
    var $29 = HEAP32[5243736 >> 2];
    var $cmp99 = ($29 | 0) < ($27 | 0);
    if ($cmp99) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[5243736 >> 2] = $27;
    label = 29;
    break;
   case 29:
    var $30 = HEAP32[5247036 >> 2];
    var $cmp103 = ($30 | 0) > 3;
    if ($cmp103) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _qh_fprintf(5291992);
    label = 31;
    break;
   case 31:
    HEAP32[5247036 >> 2] = $0;
    STACKTOP = __stackBase__;
    return $bestfacet_5;
   case 32:
    var $31;
    var $bestfacet_152_1;
    var $facet_151_1;
    var $next_1 = $facet_151_1 + 44 | 0;
    var $32 = HEAP32[$next_1 >> 2];
    var $tobool46_1 = ($32 | 0) == 0;
    var $cmp48_1 = ($facet_151_1 | 0) == ($startfacet | 0);
    var $or_cond61 = $tobool46_1 | $cmp48_1;
    if ($or_cond61) {
      var $bestfacet_3_1 = $bestfacet_152_1;
      label = 39;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $visitid54_1 = $facet_151_1 + 68 | 0;
    HEAP32[$visitid54_1 >> 2] = $inc;
    var $33 = $facet_151_1 + 76 | 0;
    var $34 = $33;
    var $35 = HEAP32[$34 >> 2];
    var $bf_clear_1 = $35 & 65536;
    var $tobool55_1 = ($bf_clear_1 | 0) == 0;
    if ($tobool55_1) {
      label = 34;
      break;
    } else {
      var $bestfacet_2_1 = $bestfacet_152_1;
      var $40 = $31;
      label = 38;
      break;
    }
   case 34:
    _qh_distplane($point, $facet_151_1, $dist);
    var $36 = HEAP32[$numpart >> 2];
    var $inc57_1 = $36 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc57_1;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp58_1 = $37 > $31;
    if ($cmp58_1) {
      label = 35;
      break;
    } else {
      var $bestfacet_2_1 = $bestfacet_152_1;
      var $40 = $31;
      label = 38;
      break;
    }
   case 35:
    var $38 = HEAP32[$34 >> 2];
    var $bf_clear62_1 = $38 & 131072;
    var $tobool63_1 = ($bf_clear62_1 | 0) != 0;
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp65_1 = $37 < $39;
    var $or_cond45_1 = $tobool63_1 & $cmp65_1;
    if ($or_cond45_1) {
      var $bestfacet_2_1 = $bestfacet_152_1;
      var $40 = $31;
      label = 38;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $cmp70_1 = $37 < $distoutside_0;
    var $or_cond47_1 = $tobool68 | $cmp70_1;
    if ($or_cond47_1) {
      label = 37;
      break;
    } else {
      var $bestfacet_5 = $facet_151_1;
      label = 27;
      break;
    }
   case 37:
    HEAPF64[tempDoublePtr >> 3] = $37, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $bestfacet_2_1 = $facet_151_1;
    var $40 = $37;
    label = 38;
    break;
   case 38:
    var $40;
    var $bestfacet_2_1;
    var $41 = HEAP32[$next_1 >> 2];
    var $tobool45_1 = ($41 | 0) == 0;
    if ($tobool45_1) {
      var $bestfacet_3_1 = $bestfacet_2_1;
      label = 39;
      break;
    } else {
      var $facet_151_1 = $41;
      var $bestfacet_152_1 = $bestfacet_2_1;
      var $31 = $40;
      label = 32;
      break;
    }
   case 39:
    var $bestfacet_3_1;
    var $tobool86 = ($bestfacet_3_1 | 0) != 0;
    var $cond90 = $tobool86 ? $bestfacet_3_1 : $startfacet;
    var $call91 = _qh_findbesthorizon(0, $point, $cond90, 0, $bestdist, $numpart);
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp95 = $42 < $43;
    var $or_cond46 = $tobool21 & $cmp95;
    if ($or_cond46) {
      label = 26;
      break;
    } else {
      var $bestfacet_5 = $call91;
      label = 27;
      break;
    }
  }
}
_qh_findbestnew["X"] = 1;
function _qh_findbesthorizon($ischeckmax, $point, $startfacet, $noupper, $bestdist, $numpart) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[$numpart >> 2];
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $tobool = ($ischeckmax | 0) != 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = HEAP32[5243696 >> 2];
    var $inc1 = $2 + 1 | 0;
    HEAP32[5243696 >> 2] = $inc1;
    label = 8;
    break;
   case 4:
    var $3 = HEAP32[5247124 >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $4 = $startfacet + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 524288;
    var $tobool3 = ($bf_clear | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $maxoutside = $startfacet + 8 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $7 > $8;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAPF64[tempDoublePtr >> 3] = $7, HEAP32[$maxoutside >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxoutside + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $9 = HEAP32[5244576 >> 2];
    var $cmp7 = ($9 | 0) > 50;
    var $conv = $cmp7 ? 2 : 1;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $11 * 2;
    var $add = $10 + $mul;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp8 = $12 < $13;
    var $cond10 = $cmp8 ? $13 : $12;
    var $add11 = $add + $cond10;
    var $mul12 = $conv * $add11;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $14 - $mul12;
    if ($tobool) {
      label = 9;
      break;
    } else {
      var $minsearch_1_ph = $sub;
      label = 11;
      break;
    }
   case 9:
    var $sub15 = -$mul12;
    var $cmp16 = $sub > $sub15;
    if ($cmp16) {
      label = 10;
      break;
    } else {
      var $minsearch_1_ph = $sub;
      label = 11;
      break;
    }
   case 10:
    var $minsearch_1_ph = $sub15;
    label = 11;
    break;
   case 11:
    var $minsearch_1_ph;
    var $tobool56 = ($noupper | 0) != 0;
    var $bestfacet_0 = $startfacet;
    var $minsearch_1 = $minsearch_1_ph;
    var $newbest_0 = 0;
    var $coplanarfacetset_size_0 = 0;
    var $facet_0 = $startfacet;
    label = 12;
    break;
   case 12:
    var $facet_0;
    var $coplanarfacetset_size_0;
    var $newbest_0;
    var $minsearch_1;
    var $bestfacet_0;
    var $15 = HEAP32[5247036 >> 2];
    var $cmp22 = ($15 | 0) > 3;
    if ($cmp22) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5254552);
    label = 14;
    break;
   case 14:
    var $neighbors = $facet_0 + 56 | 0;
    var $16 = HEAP32[$neighbors >> 2];
    var $tobool32 = ($16 | 0) == 0;
    if ($tobool32) {
      var $coplanarfacetset_size_53 = $coplanarfacetset_size_0;
      var $newbest_44 = $newbest_0;
      var $minsearch_57 = $minsearch_1;
      var $bestfacet_48 = $bestfacet_0;
      label = 37;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $p = $16 + 4 | 0;
    var $17 = HEAP32[$p >> 2];
    var $tobool357184 = ($17 | 0) == 0;
    if ($tobool357184) {
      var $coplanarfacetset_size_53 = $coplanarfacetset_size_0;
      var $newbest_44 = $newbest_0;
      var $minsearch_57 = $minsearch_1;
      var $bestfacet_48 = $bestfacet_0;
      label = 37;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $18 = $17;
    var $incdec_ptr708396 = $p + 4 | 0;
    var $incdec_ptr7083 = $incdec_ptr708396;
    var $nextfacet_1_ph85 = 0;
    var $coplanarfacetset_size_1_ph86 = $coplanarfacetset_size_0;
    var $newbest_1_ph87 = $newbest_0;
    var $minsearch_2_ph88 = $minsearch_1;
    var $bestfacet_1_ph89 = $bestfacet_0;
    var $incdec_ptr7090 = $incdec_ptr7083;
    var $19 = $18;
    label = 17;
    break;
   case 17:
    var $19;
    var $incdec_ptr7090;
    var $bestfacet_1_ph89;
    var $minsearch_2_ph88;
    var $newbest_1_ph87;
    var $coplanarfacetset_size_1_ph86;
    var $nextfacet_1_ph85;
    var $incdec_ptr72 = $incdec_ptr7090;
    var $20 = $19;
    label = 18;
    break;
   case 18:
    var $20;
    var $incdec_ptr72;
    var $visitid36 = $20 + 68 | 0;
    var $21 = HEAP32[$visitid36 >> 2];
    var $cmp37 = ($21 | 0) == ($inc | 0);
    if ($cmp37) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $incdec_ptr = $incdec_ptr72 + 4 | 0;
    var $22 = HEAP32[$incdec_ptr72 >> 2];
    var $tobool35 = ($22 | 0) == 0;
    if ($tobool35) {
      var $bestfacet_4 = $bestfacet_1_ph89;
      var $minsearch_5 = $minsearch_2_ph88;
      var $newbest_4 = $newbest_1_ph87;
      var $coplanarfacetset_size_5 = $coplanarfacetset_size_1_ph86;
      var $nextfacet_2 = $nextfacet_1_ph85;
      label = 36;
      break;
    } else {
      var $incdec_ptr72 = $incdec_ptr;
      var $20 = $22;
      label = 18;
      break;
    }
   case 20:
    HEAP32[$visitid36 >> 2] = $inc;
    var $23 = $20 + 76 | 0;
    var $24 = $23;
    var $25 = HEAP32[$24 >> 2];
    var $bf_clear43 = $25 & 65536;
    var $tobool44 = ($bf_clear43 | 0) == 0;
    if ($tobool44) {
      label = 21;
      break;
    } else {
      var $bestfacet_3 = $bestfacet_1_ph89;
      var $minsearch_4 = $minsearch_2_ph88;
      var $newbest_3 = $newbest_1_ph87;
      var $coplanarfacetset_size_3 = $coplanarfacetset_size_1_ph86;
      label = 31;
      break;
    }
   case 21:
    _qh_distplane($point, $20, $dist);
    var $26 = HEAP32[$numpart >> 2];
    var $inc46 = $26 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc46;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp47 = $27 > $28;
    if ($cmp47) {
      label = 22;
      break;
    } else {
      label = 27;
      break;
    }
   case 22:
    var $29 = HEAP32[$24 >> 2];
    var $bf_clear51 = $29 & 131072;
    var $tobool52 = ($bf_clear51 | 0) == 0;
    var $brmerge = $tobool52 | $tobool;
    if ($brmerge) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp58 = $27 < $30;
    var $or_cond = $tobool56 | $cmp58;
    if ($or_cond) {
      label = 28;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAPF64[tempDoublePtr >> 3] = $27, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($tobool) {
      var $newbest_255 = 1;
      var $bestfacet_257 = $20;
      label = 29;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $sub63 = $27 - $mul12;
    var $add64 = $mul12 + $27;
    var $cmp65 = $27 > $add64;
    if ($cmp65) {
      label = 26;
      break;
    } else {
      var $bestfacet_3 = $20;
      var $minsearch_4 = $sub63;
      var $newbest_3 = 1;
      var $coplanarfacetset_size_3 = $coplanarfacetset_size_1_ph86;
      label = 31;
      break;
    }
   case 26:
    var $31 = HEAP32[5243720 >> 2];
    var $inc68 = $31 + 1 | 0;
    HEAP32[5243720 >> 2] = $inc68;
    var $bestfacet_3 = $20;
    var $minsearch_4 = $sub63;
    var $newbest_3 = 1;
    var $coplanarfacetset_size_3 = 0;
    label = 31;
    break;
   case 27:
    var $cmp73 = $27 < $minsearch_2_ph88;
    if ($cmp73) {
      label = 19;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    if ($tobool) {
      var $newbest_255 = $newbest_1_ph87;
      var $bestfacet_257 = $bestfacet_1_ph89;
      label = 29;
      break;
    } else {
      var $bestfacet_3 = $bestfacet_1_ph89;
      var $minsearch_4 = $minsearch_2_ph88;
      var $newbest_3 = $newbest_1_ph87;
      var $coplanarfacetset_size_3 = $coplanarfacetset_size_1_ph86;
      label = 31;
      break;
    }
   case 29:
    var $bestfacet_257;
    var $newbest_255;
    var $maxoutside80 = $20 + 8 | 0;
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside80 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside80 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp81 = $27 > $32;
    if ($cmp81) {
      label = 30;
      break;
    } else {
      var $bestfacet_3 = $bestfacet_257;
      var $minsearch_4 = $minsearch_2_ph88;
      var $newbest_3 = $newbest_255;
      var $coplanarfacetset_size_3 = $coplanarfacetset_size_1_ph86;
      label = 31;
      break;
    }
   case 30:
    HEAPF64[tempDoublePtr >> 3] = $27, HEAP32[$maxoutside80 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxoutside80 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $bestfacet_3 = $bestfacet_257;
    var $minsearch_4 = $minsearch_2_ph88;
    var $newbest_3 = $newbest_255;
    var $coplanarfacetset_size_3 = $coplanarfacetset_size_1_ph86;
    label = 31;
    break;
   case 31:
    var $coplanarfacetset_size_3;
    var $newbest_3;
    var $minsearch_4;
    var $bestfacet_3;
    var $tobool87 = ($nextfacet_1_ph85 | 0) == 0;
    if ($tobool87) {
      var $coplanarfacetset_size_1_ph_be = $coplanarfacetset_size_3;
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $coplanarfacetset_size_1_ph_be;
    var $incdec_ptr70 = $incdec_ptr72 + 4 | 0;
    var $33 = HEAP32[$incdec_ptr72 >> 2];
    var $tobool3571 = ($33 | 0) == 0;
    if ($tobool3571) {
      var $bestfacet_4 = $bestfacet_3;
      var $minsearch_5 = $minsearch_4;
      var $newbest_4 = $newbest_3;
      var $coplanarfacetset_size_5 = $coplanarfacetset_size_1_ph_be;
      var $nextfacet_2 = $20;
      label = 36;
      break;
    } else {
      var $nextfacet_1_ph85 = $20;
      var $coplanarfacetset_size_1_ph86 = $coplanarfacetset_size_1_ph_be;
      var $newbest_1_ph87 = $newbest_3;
      var $minsearch_2_ph88 = $minsearch_4;
      var $bestfacet_1_ph89 = $bestfacet_3;
      var $incdec_ptr7090 = $incdec_ptr70;
      var $19 = $33;
      label = 17;
      break;
    }
   case 33:
    var $inc89 = $coplanarfacetset_size_3 + 1 | 0;
    var $tobool90 = ($coplanarfacetset_size_3 | 0) == 0;
    var $34 = $nextfacet_1_ph85;
    if ($tobool90) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $35 = HEAP32[5249224 >> 2];
    var $p94 = $35 + 4 | 0;
    HEAP32[$p94 >> 2] = $34;
    var $36 = HEAP32[5249224 >> 2];
    var $maxsize = $36 | 0;
    var $37 = HEAP32[$maxsize >> 2];
    var $38 = $36 + 4 + ($37 << 2) | 0;
    HEAP32[$38 >> 2] = 2;
    var $39 = HEAP32[5249224 >> 2];
    var $p99 = $39 + 8 | 0;
    HEAP32[$p99 >> 2] = 0;
    var $coplanarfacetset_size_1_ph_be = $inc89;
    label = 32;
    break;
   case 35:
    _qh_setappend(5249224, $34);
    var $coplanarfacetset_size_1_ph_be = $inc89;
    label = 32;
    break;
   case 36:
    var $nextfacet_2;
    var $coplanarfacetset_size_5;
    var $newbest_4;
    var $minsearch_5;
    var $bestfacet_4;
    var $tobool104 = ($nextfacet_2 | 0) == 0;
    if ($tobool104) {
      var $coplanarfacetset_size_53 = $coplanarfacetset_size_5;
      var $newbest_44 = $newbest_4;
      var $minsearch_57 = $minsearch_5;
      var $bestfacet_48 = $bestfacet_4;
      label = 37;
      break;
    } else {
      var $bestfacet_0 = $bestfacet_4;
      var $minsearch_1 = $minsearch_5;
      var $newbest_0 = $newbest_4;
      var $coplanarfacetset_size_0 = $coplanarfacetset_size_5;
      var $facet_0 = $nextfacet_2;
      label = 12;
      break;
    }
   case 37:
    var $bestfacet_48;
    var $minsearch_57;
    var $newbest_44;
    var $coplanarfacetset_size_53;
    var $tobool107 = ($coplanarfacetset_size_53 | 0) == 0;
    if ($tobool107) {
      label = 41;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $dec = $coplanarfacetset_size_53 - 1 | 0;
    var $tobool110 = ($dec | 0) == 0;
    var $40 = HEAP32[5249224 >> 2];
    if ($tobool110) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    var $p114 = $40 + 4 | 0;
    var $41 = HEAP32[$p114 >> 2];
    var $42 = $41;
    var $maxsize115 = $40 | 0;
    var $43 = HEAP32[$maxsize115 >> 2];
    var $44 = $40 + 4 + ($43 << 2) | 0;
    HEAP32[$44 >> 2] = 1;
    var $45 = HEAP32[5249224 >> 2];
    var $p121 = $45 + 4 | 0;
    HEAP32[$p121 >> 2] = 0;
    var $bestfacet_0 = $bestfacet_48;
    var $minsearch_1 = $minsearch_57;
    var $newbest_0 = $newbest_44;
    var $coplanarfacetset_size_0 = 0;
    var $facet_0 = $42;
    label = 12;
    break;
   case 40:
    var $call = _qh_setdellast($40);
    var $46 = $call;
    var $bestfacet_0 = $bestfacet_48;
    var $minsearch_1 = $minsearch_57;
    var $newbest_0 = $newbest_44;
    var $coplanarfacetset_size_0 = $dec;
    var $facet_0 = $46;
    label = 12;
    break;
   case 41:
    if ($tobool) {
      label = 46;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $47 = HEAP32[$numpart >> 2];
    var $sub128 = $47 - $0 | 0;
    var $48 = HEAP32[5243712 >> 2];
    var $add129 = $sub128 + $48 | 0;
    HEAP32[5243712 >> 2] = $add129;
    var $49 = HEAP32[5243704 >> 2];
    var $cmp131 = ($49 | 0) < ($sub128 | 0);
    if ($cmp131) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    HEAP32[5243704 >> 2] = $sub128;
    label = 44;
    break;
   case 44:
    var $tobool136 = ($newbest_44 | 0) == 0;
    if ($tobool136) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $50 = HEAP32[5244296 >> 2];
    var $inc138 = $50 + 1 | 0;
    HEAP32[5244296 >> 2] = $inc138;
    label = 46;
    break;
   case 46:
    var $51 = HEAP32[5247036 >> 2];
    var $cmp141 = ($51 | 0) > 3;
    if ($cmp141) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    _qh_fprintf(5251976);
    label = 48;
    break;
   case 48:
    STACKTOP = __stackBase__;
    return $bestfacet_48;
  }
}
_qh_findbesthorizon["X"] = 1;
function _qh_backnormal($rows, $numrow, $numcol, $sign, $normal, $nearzero) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $waszero = __stackBase__;
    var $add_ptr = $normal + ($numcol << 3) | 0;
    var $add_ptr_sum = $numcol - 1 | 0;
    var $add_ptr1 = $normal + ($add_ptr_sum << 3) | 0;
    var $tobool = ($sign | 0) != 0;
    var $cond = $tobool ? -1 : 1;
    HEAPF64[tempDoublePtr >> 3] = $cond, HEAP32[$add_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool24048 = ($numrow | 0) == 0;
    if ($tobool24048) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $add_ptr1_sum = $numcol - 2 | 0;
    var $incdec_ptr = $normal + ($add_ptr1_sum << 3) | 0;
    var $normalp_0_ph49 = $incdec_ptr;
    var $zerocol_0_ph51 = -1;
    var $dec3952_in = $numrow;
    label = 5;
    break;
   case 4:
    var $tobool240 = ($dec43 | 0) == 0;
    if ($tobool240) {
      label = 18;
      break;
    } else {
      var $normalp_0_ph49 = $incdec_ptr31;
      var $zerocol_0_ph51 = $dec43;
      var $dec3952_in = $dec43;
      label = 5;
      break;
    }
   case 5:
    var $dec3952_in;
    var $zerocol_0_ph51;
    var $normalp_0_ph49;
    var $normalp_041 = $normalp_0_ph49;
    var $dec43_in = $dec3952_in;
    label = 6;
    break;
   case 6:
    var $dec43_in;
    var $normalp_041;
    var $dec43 = $dec43_in - 1 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$normalp_041 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_041 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx = $rows + ($dec43 << 2) | 0;
    var $cmp30 = ($dec43_in | 0) < ($numcol | 0);
    if ($cmp30) {
      label = 7;
      break;
    } else {
      var $4 = 0;
      label = 9;
      break;
    }
   case 7:
    var $0 = HEAP32[$arrayidx >> 2];
    var $add_ptr4 = $0 + ($dec43_in << 3) | 0;
    var $j_031 = $dec43_in;
    var $ai_032 = $add_ptr4;
    var $normalp_041_pn = $normalp_041;
    var $1 = 0;
    label = 8;
    break;
   case 8:
    var $1;
    var $normalp_041_pn;
    var $ai_032;
    var $j_031;
    var $ak_033 = $normalp_041_pn + 8 | 0;
    var $incdec_ptr8 = $ai_032 + 8 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$ai_032 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$ai_032 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$ak_033 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$ak_033 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $2 * $3;
    var $sub = $1 - $mul;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$normalp_041 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_041 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $j_031 + 1 | 0;
    var $exitcond = ($inc | 0) == ($numcol | 0);
    if ($exitcond) {
      var $4 = $sub;
      label = 9;
      break;
    } else {
      var $j_031 = $inc;
      var $ai_032 = $incdec_ptr8;
      var $normalp_041_pn = $ak_033;
      var $1 = $sub;
      label = 8;
      break;
    }
   case 9:
    var $4;
    var $5 = HEAP32[$arrayidx >> 2];
    var $arrayidx11 = $5 + ($dec43 << 3) | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx11 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx11 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp12 = $6 < 0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      var $cond14 = $6;
      label = 11;
      break;
    }
   case 10:
    var $sub13 = -$6;
    var $cond14 = $sub13;
    label = 11;
    break;
   case 11:
    var $cond14;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248688 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248692 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp15 = $cond14 > $7;
    if ($cmp15) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $incdec_ptr16 = $normalp_041 - 8 | 0;
    var $div = $4 / $6;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$normalp_041 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_041 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $normalp_0_be = $incdec_ptr16;
    label = 13;
    break;
   case 13:
    var $normalp_0_be;
    var $tobool2 = ($dec43 | 0) == 0;
    if ($tobool2) {
      label = 17;
      break;
    } else {
      var $normalp_041 = $normalp_0_be;
      var $dec43_in = $dec43;
      label = 6;
      break;
    }
   case 14:
    HEAP32[$waszero >> 2] = 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248680 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248684 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_divzero($4, $6, $8, $waszero);
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[$normalp_041 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_041 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $9 = HEAP32[$waszero >> 2];
    var $tobool17 = ($9 | 0) == 0;
    var $incdec_ptr31 = $normalp_041 - 8 | 0;
    if ($tobool17) {
      var $normalp_0_be = $incdec_ptr31;
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    HEAPF64[tempDoublePtr >> 3] = $cond, HEAP32[$normalp_041 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_041 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $normal_tail_034 = $normalp_041 + 8 | 0;
    var $cmp2535 = $normal_tail_034 >>> 0 < $add_ptr >>> 0;
    if ($cmp2535) {
      var $normal_tail_036 = $normal_tail_034;
      label = 16;
      break;
    } else {
      label = 4;
      break;
    }
   case 16:
    var $normal_tail_036;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$normal_tail_036 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normal_tail_036 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $normal_tail_0 = $normal_tail_036 + 8 | 0;
    var $cmp25 = $normal_tail_0 >>> 0 < $add_ptr >>> 0;
    if ($cmp25) {
      var $normal_tail_036 = $normal_tail_0;
      label = 16;
      break;
    } else {
      label = 4;
      break;
    }
   case 17:
    var $cmp34 = ($zerocol_0_ph51 | 0) == -1;
    if ($cmp34) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $10 = HEAP32[5243112 >> 2];
    var $inc36 = $10 + 1 | 0;
    HEAP32[5243112 >> 2] = $inc36;
    HEAP32[$nearzero >> 2] = 1;
    var $11 = HEAP32[5247036 >> 2];
    var $cmp37 = ($11 | 0) > 3;
    if ($cmp37) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5290676);
    label = 20;
    break;
   case 20:
    _qh_precision();
    label = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_backnormal["X"] = 1;
function _qh_gausselim($rows, $numrow, $numcol, $sign, $nearzero) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[$nearzero >> 2] = 0;
    var $cmp65 = ($numrow | 0) > 0;
    if ($cmp65) {
      var $k_066 = 0;
      label = 3;
      break;
    } else {
      var $pivot_abs_0_lcssa = 0;
      label = 23;
      break;
    }
   case 3:
    var $k_066;
    var $arrayidx = $rows + ($k_066 << 2) | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $arrayidx1 = $0 + ($k_066 << 3) | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp2 = $1 < 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      var $cond = $1;
      label = 5;
      break;
    }
   case 4:
    var $sub = -$1;
    var $cond = $sub;
    label = 5;
    break;
   case 5:
    var $cond;
    var $add = $k_066 + 1 | 0;
    var $cmp854 = ($add | 0) < ($numrow | 0);
    if ($cmp854) {
      var $pivot_abs_155 = $cond;
      var $i_056 = $add;
      var $pivoti_057 = $k_066;
      label = 6;
      break;
    } else {
      var $pivot_abs_1_lcssa72 = $cond;
      label = 11;
      break;
    }
   case 6:
    var $pivoti_057;
    var $i_056;
    var $pivot_abs_155;
    var $arrayidx10 = $rows + ($i_056 << 2) | 0;
    var $2 = HEAP32[$arrayidx10 >> 2];
    var $arrayidx11 = $2 + ($k_066 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx11 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx11 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp12 = $3 < 0;
    if ($cmp12) {
      label = 7;
      break;
    } else {
      var $cond21 = $3;
      label = 8;
      break;
    }
   case 7:
    var $sub16 = -$3;
    var $cond21 = $sub16;
    label = 8;
    break;
   case 8:
    var $cond21;
    var $cmp22 = $cond21 > $pivot_abs_155;
    var $pivot_abs_2 = $cmp22 ? $cond21 : $pivot_abs_155;
    var $pivoti_1 = $cmp22 ? $i_056 : $pivoti_057;
    var $inc = $i_056 + 1 | 0;
    var $exitcond = ($inc | 0) == ($numrow | 0);
    if ($exitcond) {
      label = 9;
      break;
    } else {
      var $pivot_abs_155 = $pivot_abs_2;
      var $i_056 = $inc;
      var $pivoti_057 = $pivoti_1;
      label = 6;
      break;
    }
   case 9:
    var $cmp23 = ($pivoti_1 | 0) == ($k_066 | 0);
    if ($cmp23) {
      var $pivot_abs_1_lcssa72 = $pivot_abs_2;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $arrayidx25 = $rows + ($pivoti_1 << 2) | 0;
    var $4 = HEAP32[$arrayidx25 >> 2];
    HEAP32[$arrayidx25 >> 2] = $0;
    HEAP32[$arrayidx >> 2] = $4;
    var $5 = HEAP32[$sign >> 2];
    var $xor = $5 ^ 1;
    HEAP32[$sign >> 2] = $xor;
    var $pivot_abs_1_lcssa72 = $pivot_abs_2;
    label = 11;
    break;
   case 11:
    var $pivot_abs_1_lcssa72;
    var $6 = HEAP32[5248708 >> 2];
    var $arrayidx31 = $6 + ($k_066 << 3) | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx31 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx31 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp32 = $pivot_abs_1_lcssa72 > $7;
    if ($cmp32) {
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$nearzero >> 2] = 1;
    var $cmp34 = $pivot_abs_1_lcssa72 == 0;
    if ($cmp34) {
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 13:
    var $8 = HEAP32[5247036 >> 2];
    var $cmp36 = ($8 | 0) > 3;
    if ($cmp36) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5287636);
    _qh_printmatrix($numrow, $numcol);
    label = 15;
    break;
   case 15:
    var $9 = HEAP32[5243768 >> 2];
    var $inc39 = $9 + 1 | 0;
    HEAP32[5243768 >> 2] = $inc39;
    _qh_precision();
    label = 16;
    break;
   case 16:
    var $exitcond70 = ($add | 0) == ($numrow | 0);
    if ($exitcond70) {
      var $pivot_abs_0_lcssa = $pivot_abs_1_lcssa72;
      label = 23;
      break;
    } else {
      var $k_066 = $add;
      label = 3;
      break;
    }
   case 17:
    var $10 = HEAP32[$arrayidx >> 2];
    var $add_ptr = $10 + ($k_066 << 3) | 0;
    var $incdec_ptr = $10 + ($add << 3) | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($cmp854) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 18:
    var $sub51 = $numcol - $add | 0;
    var $tobool59 = ($add | 0) == ($numcol | 0);
    var $i_164 = $add;
    label = 19;
    break;
   case 19:
    var $i_164;
    var $arrayidx47 = $rows + ($i_164 << 2) | 0;
    var $12 = HEAP32[$arrayidx47 >> 2];
    var $add_ptr48 = $12 + ($k_066 << 3) | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr48 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr48 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $13 / $11;
    if ($tobool59) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $incdec_ptr49 = $12 + ($add << 3) | 0;
    var $ak_060 = $incdec_ptr;
    var $ai_061 = $incdec_ptr49;
    var $j_062 = $sub51;
    label = 21;
    break;
   case 21:
    var $j_062;
    var $ai_061;
    var $ak_060;
    var $dec = $j_062 - 1 | 0;
    var $incdec_ptr54 = $ak_060 + 8 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$ak_060 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$ak_060 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $div * $14;
    var $incdec_ptr55 = $ai_061 + 8 | 0;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$ai_061 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$ai_061 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub56 = $15 - $mul;
    HEAPF64[tempDoublePtr >> 3] = $sub56, HEAP32[$ai_061 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$ai_061 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 22;
      break;
    } else {
      var $ak_060 = $incdec_ptr54;
      var $ai_061 = $incdec_ptr55;
      var $j_062 = $dec;
      label = 21;
      break;
    }
   case 22:
    var $inc59 = $i_164 + 1 | 0;
    var $exitcond69 = ($inc59 | 0) == ($numrow | 0);
    if ($exitcond69) {
      label = 16;
      break;
    } else {
      var $i_164 = $inc59;
      label = 19;
      break;
    }
   case 23:
    var $pivot_abs_0_lcssa;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244048 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244052 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp64 = $16 > $pivot_abs_0_lcssa;
    if ($cmp64) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    HEAPF64[tempDoublePtr >> 3] = $pivot_abs_0_lcssa, HEAP32[5244048 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244052 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 25;
    break;
   case 25:
    var $17 = HEAP32[5247036 >> 2];
    var $cmp67 = ($17 | 0) > 4;
    if ($cmp67) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_printmatrix($numrow, $numcol);
    label = 27;
    break;
   case 27:
    return;
  }
}
_qh_gausselim["X"] = 1;
function _qh_getangle($vect1, $vect2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247504 >> 2];
    var $tobool4 = ($0 | 0) == 0;
    if ($tobool4) {
      var $angle_0_lcssa = 0;
      label = 4;
      break;
    } else {
      var $vect2_addr_05 = $vect2;
      var $angle_06 = 0;
      var $vect1_addr_07 = $vect1;
      var $k_08 = $0;
      label = 3;
      break;
    }
   case 3:
    var $k_08;
    var $vect1_addr_07;
    var $angle_06;
    var $vect2_addr_05;
    var $dec = $k_08 - 1 | 0;
    var $incdec_ptr = $vect1_addr_07 + 8 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$vect1_addr_07 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vect1_addr_07 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr1 = $vect2_addr_05 + 8 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$vect2_addr_05 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vect2_addr_05 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $1 * $2;
    var $add = $angle_06 + $mul;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $angle_0_lcssa = $add;
      label = 4;
      break;
    } else {
      var $vect2_addr_05 = $incdec_ptr1;
      var $angle_06 = $add;
      var $vect1_addr_07 = $incdec_ptr;
      var $k_08 = $dec;
      label = 3;
      break;
    }
   case 4:
    var $angle_0_lcssa;
    var $3 = HEAP32[5247336 >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      var $angle_1 = $angle_0_lcssa;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call = _qh_rand();
    var $conv = $call | 0;
    var $mul3 = $conv * 2;
    var $div = $mul3 / 2147483646;
    var $sub = $div - 1;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247340 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247344 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul4 = $sub * $4;
    var $add5 = $angle_0_lcssa + $mul4;
    var $angle_1 = $add5;
    label = 6;
    break;
   case 6:
    var $angle_1;
    var $5 = HEAP32[5247036 >> 2];
    var $cmp = ($5 | 0) > 3;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_fprintf(5279700);
    label = 8;
    break;
   case 8:
    return $angle_1;
  }
}
function _qh_getcenter($vertices) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _qh_setsize($vertices);
    var $cmp = ($call | 0) < 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5278940);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    var $0 = HEAP32[5248928 >> 2];
    var $call1 = _qh_memalloc($0);
    var $1 = $call1;
    var $2 = HEAP32[5247504 >> 2];
    var $cmp212 = ($2 | 0) > 0;
    if ($cmp212) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $tobool = ($vertices | 0) == 0;
    var $conv = $call | 0;
    var $p = $vertices + 4 | 0;
    var $3 = $p;
    var $k_013 = 0;
    label = 6;
    break;
   case 6:
    var $k_013;
    var $add_ptr = $1 + ($k_013 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$add_ptr >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($tobool) {
      var $11 = 0;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $4 = HEAP32[$p >> 2];
    var $tobool510 = ($4 | 0) == 0;
    if ($tobool510) {
      var $11 = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $5 = $4;
    var $vertexp_011 = $3;
    var $7 = $5;
    var $6 = 0;
    label = 9;
    break;
   case 9:
    var $6;
    var $7;
    var $vertexp_011;
    var $incdec_ptr = $vertexp_011 + 4 | 0;
    var $point = $7 + 8 | 0;
    var $8 = HEAP32[$point >> 2];
    var $arrayidx7 = $8 + ($k_013 << 3) | 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx7 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx7 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $9 + $6;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$add_ptr >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $10 = HEAP32[$incdec_ptr >> 2];
    var $tobool5 = ($10 | 0) == 0;
    if ($tobool5) {
      var $11 = $add;
      label = 10;
      break;
    } else {
      var $vertexp_011 = $incdec_ptr;
      var $7 = $10;
      var $6 = $add;
      label = 9;
      break;
    }
   case 10:
    var $11;
    var $div = $11 / $conv;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$add_ptr >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $k_013 + 1 | 0;
    var $12 = HEAP32[5247504 >> 2];
    var $cmp2 = ($inc | 0) < ($12 | 0);
    if ($cmp2) {
      var $k_013 = $inc;
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    return $1;
  }
}
function _qh_getcentrum($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $vertices = $facet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $call = _qh_getcenter($0);
    var $1 = HEAP32[5243152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5243152 >> 2] = $inc;
    _qh_distplane($call, $facet, $dist);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call1 = _qh_projectpoint($call, $facet, $2);
    var $3 = $call;
    var $4 = HEAP32[5248928 >> 2];
    _qh_memfree($3, $4);
    var $5 = HEAP32[5247036 >> 2];
    var $cmp = ($5 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $6 = HEAP32[$vertices >> 2];
    var $call3 = _qh_setsize($6);
    _qh_fprintf(5278316);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $call1;
  }
}
function _qh_projectpoint($point, $facet, $dist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248928 >> 2];
    var $call = _qh_memalloc($0);
    var $1 = $call;
    var $2 = HEAP32[5247504 >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $normal1 = $facet + 24 | 0;
    var $3 = HEAP32[$normal1 >> 2];
    var $normal_03 = $3;
    var $np_04 = $1;
    var $k_05 = $2;
    var $point_addr_06 = $point;
    label = 4;
    break;
   case 4:
    var $point_addr_06;
    var $k_05;
    var $np_04;
    var $normal_03;
    var $dec = $k_05 - 1 | 0;
    var $incdec_ptr = $point_addr_06 + 8 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point_addr_06 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point_addr_06 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr2 = $normal_03 + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal_03 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal_03 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $5 * $dist;
    var $sub = $4 - $mul;
    var $incdec_ptr3 = $np_04 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$np_04 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$np_04 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $normal_03 = $incdec_ptr2;
      var $np_04 = $incdec_ptr3;
      var $k_05 = $dec;
      var $point_addr_06 = $incdec_ptr;
      label = 4;
      break;
    }
   case 5:
    return $1;
  }
}
function _qh_getdistance($facet, $neighbor, $mindist, $maxdist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $vertices = $facet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool229 = ($1 | 0) == 0;
    if ($tobool229) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = $1;
    var $3 = $p;
    var $vertexp_030 = $3;
    var $4 = $2;
    label = 5;
    break;
   case 5:
    var $4;
    var $vertexp_030;
    var $incdec_ptr = $vertexp_030 + 4 | 0;
    var $5 = $4 + 20 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 & -268435457;
    HEAP32[$6 >> 2] = $8;
    var $9 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($9 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      var $vertexp_030 = $incdec_ptr;
      var $4 = $9;
      label = 5;
      break;
    }
   case 6:
    var $vertices3 = $neighbor + 48 | 0;
    var $10 = HEAP32[$vertices3 >> 2];
    var $tobool4 = ($10 | 0) == 0;
    if ($tobool4) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p9 = $10 + 4 | 0;
    var $11 = HEAP32[$p9 >> 2];
    var $tobool1227 = ($11 | 0) == 0;
    if ($tobool1227) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $12 = $11;
    var $13 = $p9;
    var $vertexp_128 = $13;
    var $14 = $12;
    label = 9;
    break;
   case 9:
    var $14;
    var $vertexp_128;
    var $incdec_ptr11 = $vertexp_128 + 4 | 0;
    var $15 = $14 + 20 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 | 268435456;
    HEAP32[$16 >> 2] = $18;
    var $19 = HEAP32[$incdec_ptr11 >> 2];
    var $tobool12 = ($19 | 0) == 0;
    if ($tobool12) {
      label = 10;
      break;
    } else {
      var $vertexp_128 = $incdec_ptr11;
      var $14 = $19;
      label = 9;
      break;
    }
   case 10:
    var $20 = HEAP32[$vertices >> 2];
    var $tobool18 = ($20 | 0) == 0;
    if ($tobool18) {
      var $mind_1 = 0;
      var $maxd_1 = 0;
      label = 21;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p23 = $20 + 4 | 0;
    var $21 = HEAP32[$p23 >> 2];
    var $tobool26253545 = ($21 | 0) == 0;
    if ($tobool26253545) {
      var $mind_1 = 0;
      var $maxd_1 = 0;
      label = 21;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $22 = $21;
    var $incdec_ptr2524344451 = $p23 + 4 | 0;
    var $incdec_ptr25243444 = $incdec_ptr2524344451;
    var $maxd_0_ph46 = 0;
    var $mind_0_ph47 = 0;
    var $incdec_ptr25243448 = $incdec_ptr25243444;
    var $23 = $22;
    label = 13;
    break;
   case 13:
    var $23;
    var $incdec_ptr25243448;
    var $mind_0_ph47;
    var $maxd_0_ph46;
    var $mind_0_ph2036 = $mind_0_ph47;
    var $incdec_ptr252437 = $incdec_ptr25243448;
    var $25 = $23;
    label = 15;
    break;
   case 14:
    var $incdec_ptr2524 = $incdec_ptr2526 + 4 | 0;
    var $24 = HEAP32[$incdec_ptr2526 >> 2];
    var $tobool2625 = ($24 | 0) == 0;
    if ($tobool2625) {
      var $mind_1 = $32;
      var $maxd_1 = $maxd_0_ph46;
      label = 21;
      break;
    } else {
      var $mind_0_ph2036 = $32;
      var $incdec_ptr252437 = $incdec_ptr2524;
      var $25 = $24;
      label = 15;
      break;
    }
   case 15:
    var $25;
    var $incdec_ptr252437;
    var $mind_0_ph2036;
    var $incdec_ptr2526 = $incdec_ptr252437;
    var $26 = $25;
    label = 16;
    break;
   case 16:
    var $26;
    var $incdec_ptr2526;
    var $27 = $26 + 20 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $bf_clear = $29 & 268435456;
    var $tobool29 = ($bf_clear | 0) == 0;
    if ($tobool29) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $30 = HEAP32[5243128 >> 2];
    var $inc = $30 + 1 | 0;
    HEAP32[5243128 >> 2] = $inc;
    var $point = $26 + 8 | 0;
    var $31 = HEAP32[$point >> 2];
    _qh_distplane($31, $neighbor, $dist);
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $32 < $mind_0_ph2036;
    if ($cmp) {
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $cmp32 = $32 > $maxd_0_ph46;
    if ($cmp32) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $incdec_ptr25 = $incdec_ptr2526 + 4 | 0;
    var $33 = HEAP32[$incdec_ptr2526 >> 2];
    var $tobool26 = ($33 | 0) == 0;
    if ($tobool26) {
      var $mind_1 = $mind_0_ph2036;
      var $maxd_1 = $maxd_0_ph46;
      label = 21;
      break;
    } else {
      var $incdec_ptr2526 = $incdec_ptr25;
      var $26 = $33;
      label = 16;
      break;
    }
   case 20:
    var $incdec_ptr252434 = $incdec_ptr2526 + 4 | 0;
    var $34 = HEAP32[$incdec_ptr2526 >> 2];
    var $tobool262535 = ($34 | 0) == 0;
    if ($tobool262535) {
      var $mind_1 = $mind_0_ph2036;
      var $maxd_1 = $32;
      label = 21;
      break;
    } else {
      var $maxd_0_ph46 = $32;
      var $mind_0_ph47 = $mind_0_ph2036;
      var $incdec_ptr25243448 = $incdec_ptr252434;
      var $23 = $34;
      label = 13;
      break;
    }
   case 21:
    var $maxd_1;
    var $mind_1;
    HEAPF64[tempDoublePtr >> 3] = $mind_1, HEAP32[$mindist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $maxd_1, HEAP32[$maxdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub = -$mind_1;
    var $cmp39 = $maxd_1 > $sub;
    var $maxd_1_sub = $cmp39 ? $maxd_1 : $sub;
    STACKTOP = __stackBase__;
    return $maxd_1_sub;
  }
}
_qh_getdistance["X"] = 1;
function _qh_normalize($normal, $dim) {
  _qh_normalize2($normal, $dim, 0);
  return;
}
function _qh_normalize2($normal, $dim, $toporient) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $normal109 = $normal;
    var $zerodiv = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    var $add_ptr = $normal + 8 | 0;
    var $add_ptr1 = $normal + 16 | 0;
    var $add_ptr2 = $normal + 24 | 0;
    var $cmp = ($dim | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $0 * $0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul3 = $1 * $1;
    var $add = $mul + $mul3;
    var $call = Math.sqrt($add);
    var $norm_1 = $call;
    label = 12;
    break;
   case 4:
    if (($dim | 0) == 3) {
      label = 5;
      break;
    } else if (($dim | 0) == 4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul6 = $2 * $2;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul7 = $3 * $3;
    var $add8 = $mul6 + $mul7;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul9 = $4 * $4;
    var $add10 = $add8 + $mul9;
    var $call11 = Math.sqrt($add10);
    var $norm_1 = $call11;
    label = 12;
    break;
   case 6:
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul15 = $5 * $5;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul16 = $6 * $6;
    var $add17 = $mul15 + $mul16;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul18 = $7 * $7;
    var $add19 = $add17 + $mul18;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul20 = $8 * $8;
    var $add21 = $add19 + $mul20;
    var $call22 = Math.sqrt($add21);
    var $norm_1 = $call22;
    label = 12;
    break;
   case 7:
    var $cmp24 = ($dim | 0) > 4;
    if ($cmp24) {
      label = 8;
      break;
    } else {
      var $norm_1 = 0;
      label = 12;
      break;
    }
   case 8:
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul26 = $9 * $9;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul27 = $10 * $10;
    var $add28 = $mul26 + $mul27;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul29 = $11 * $11;
    var $add30 = $add28 + $mul29;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul31 = $12 * $12;
    var $add32 = $add30 + $mul31;
    var $sub = $dim - 4 | 0;
    var $tobool105 = ($sub | 0) == 0;
    if ($tobool105) {
      var $norm_0_lcssa = $add32;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $add_ptr33 = $normal + 32 | 0;
    var $norm_0106 = $add32;
    var $colp_0107 = $add_ptr33;
    var $k_0108 = $sub;
    label = 10;
    break;
   case 10:
    var $k_0108;
    var $colp_0107;
    var $norm_0106;
    var $dec = $k_0108 - 1 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$colp_0107 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$colp_0107 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul34 = $13 * $13;
    var $add35 = $norm_0106 + $mul34;
    var $incdec_ptr = $colp_0107 + 8 | 0;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $norm_0_lcssa = $add35;
      label = 11;
      break;
    } else {
      var $norm_0106 = $add35;
      var $colp_0107 = $incdec_ptr;
      var $k_0108 = $dec;
      label = 10;
      break;
    }
   case 11:
    var $norm_0_lcssa;
    var $call36 = Math.sqrt($norm_0_lcssa);
    var $norm_1 = $call36;
    label = 12;
    break;
   case 12:
    var $norm_1;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244048 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244052 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp47 = $14 > $norm_1;
    if ($cmp47) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    HEAPF64[tempDoublePtr >> 3] = $norm_1, HEAP32[5244048 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244052 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 14;
    break;
   case 14:
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248672 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248676 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp50 = $norm_1 > $15;
    if ($cmp50) {
      label = 15;
      break;
    } else {
      label = 25;
      break;
    }
   case 15:
    var $tobool52 = ($toporient | 0) == 0;
    if ($tobool52) {
      label = 16;
      break;
    } else {
      var $norm_2 = $norm_1;
      label = 17;
      break;
    }
   case 16:
    var $sub54 = -$norm_1;
    var $norm_2 = $sub54;
    label = 17;
    break;
   case 17:
    var $norm_2;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $16 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$normal >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normal + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div56 = $17 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div56, HEAP32[$add_ptr >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($cmp) {
      label = 36;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    if (($dim | 0) == 3) {
      label = 19;
      break;
    } else if (($dim | 0) == 4) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div62 = $18 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div62, HEAP32[$add_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 36;
    break;
   case 20:
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div66 = $19 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div66, HEAP32[$add_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div67 = $20 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div67, HEAP32[$add_ptr2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 36;
    break;
   case 21:
    var $cmp69 = ($dim | 0) > 4;
    if ($cmp69) {
      label = 22;
      break;
    } else {
      label = 36;
      break;
    }
   case 22:
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div71 = $21 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div71, HEAP32[$add_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div72 = $22 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div72, HEAP32[$add_ptr2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$add_ptr2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub73 = $dim - 4 | 0;
    var $tobool7790 = ($sub73 | 0) == 0;
    if ($tobool7790) {
      label = 36;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $add_ptr74 = $normal + 32 | 0;
    var $colp_191 = $add_ptr74;
    var $k_192 = $sub73;
    label = 24;
    break;
   case 24:
    var $k_192;
    var $colp_191;
    var $dec76 = $k_192 - 1 | 0;
    var $incdec_ptr79 = $colp_191 + 8 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$colp_191 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$colp_191 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div80 = $23 / $norm_2;
    HEAPF64[tempDoublePtr >> 3] = $div80, HEAP32[$colp_191 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$colp_191 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool77 = ($dec76 | 0) == 0;
    if ($tobool77) {
      label = 36;
      break;
    } else {
      var $colp_191 = $incdec_ptr79;
      var $k_192 = $dec76;
      label = 24;
      break;
    }
   case 25:
    var $cmp87 = $norm_1 == 0;
    if ($cmp87) {
      label = 26;
      break;
    } else {
      label = 28;
      break;
    }
   case 26:
    var $conv = $dim | 0;
    var $div89 = 1 / $conv;
    var $call90 = Math.sqrt($div89);
    var $tobool9394 = ($dim | 0) == 0;
    if ($tobool9394) {
      label = 36;
      break;
    } else {
      var $colp_295 = $normal;
      var $k_296 = $dim;
      label = 27;
      break;
    }
   case 27:
    var $k_296;
    var $colp_295;
    var $dec92 = $k_296 - 1 | 0;
    var $incdec_ptr95 = $colp_295 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $call90, HEAP32[$colp_295 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$colp_295 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool93 = ($dec92 | 0) == 0;
    if ($tobool93) {
      label = 36;
      break;
    } else {
      var $colp_295 = $incdec_ptr95;
      var $k_296 = $dec92;
      label = 27;
      break;
    }
   case 28:
    var $tobool98 = ($toporient | 0) == 0;
    if ($tobool98) {
      label = 29;
      break;
    } else {
      var $norm_3 = $norm_1;
      label = 30;
      break;
    }
   case 29:
    var $sub100 = -$norm_1;
    var $norm_3 = $sub100;
    label = 30;
    break;
   case 30:
    var $norm_3;
    var $tobool104102 = ($dim | 0) == 0;
    if ($tobool104102) {
      label = 36;
      break;
    } else {
      var $colp_3103 = $normal;
      var $dec103104_in = $dim;
      label = 31;
      break;
    }
   case 31:
    var $dec103104_in;
    var $colp_3103;
    var $dec103104 = $dec103104_in - 1 | 0;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$colp_3103 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$colp_3103 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248664 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248668 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call106 = _qh_divzero($24, $norm_3, $25, $zerodiv);
    var $26 = HEAP32[$zerodiv >> 2];
    var $tobool107 = ($26 | 0) == 0;
    if ($tobool107) {
      label = 32;
      break;
    } else {
      label = 34;
      break;
    }
   case 32:
    HEAPF64[tempDoublePtr >> 3] = $call106, HEAP32[$colp_3103 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$colp_3103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool104 = ($dec103104 | 0) == 0;
    if ($tobool104) {
      label = 36;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $incdec_ptr126 = $colp_3103 + 8 | 0;
    var $colp_3103 = $incdec_ptr126;
    var $dec103104_in = $dec103104;
    label = 31;
    break;
   case 34:
    var $call110 = _qh_maxabsval($normal, $dim);
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$call110 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$call110 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul111 = $norm_3 * $27;
    var $cmp112 = $mul111 >= 0;
    var $cond = $cmp112 ? 1 : -1;
    var $28 = $dim << 3;
    _memset($normal109, 0, $28);
    HEAPF64[tempDoublePtr >> 3] = $cond, HEAP32[$call110 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$call110 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $29 = HEAP32[5244080 >> 2];
    var $inc = $29 + 1 | 0;
    HEAP32[5244080 >> 2] = $inc;
    var $30 = HEAP32[5247036 >> 2];
    var $tobool121 = ($30 | 0) == 0;
    if ($tobool121) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    _qh_fprintf(5277376);
    label = 36;
    break;
   case 36:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_normalize2["X"] = 1;
function _qh_setfacetplane($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $nearzero = __stackBase__ + 8;
    var $0 = HEAP32[5248928 >> 2];
    var $vertices = $facet + 48 | 0;
    var $1 = HEAP32[$vertices >> 2];
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $point1 = $2 + 8 | 0;
    var $3 = $point1;
    var $4 = HEAP32[$3 >> 2];
    HEAP32[$nearzero >> 2] = 0;
    var $5 = HEAP32[5244544 >> 2];
    var $inc = $5 + 1 | 0;
    HEAP32[5244544 >> 2] = $inc;
    var $normal = $facet + 24 | 0;
    var $6 = HEAP32[$normal >> 2];
    var $tobool = ($6 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _qh_memalloc($0);
    var $7 = $call;
    HEAP32[$normal >> 2] = $7;
    label = 4;
    break;
   case 4:
    var $8 = HEAP32[5248968 >> 2];
    var $cmp = ($8 | 0) == ($facet | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      var $oldtrace_0 = 0;
      label = 8;
      break;
    }
   case 5:
    var $9 = HEAP32[5247036 >> 2];
    HEAP32[5247036 >> 2] = 5;
    _qh_fprintf(5276584);
    _qh_fprintf(5276032);
    var $10 = HEAP32[5244576 >> 2];
    var $tobool4 = ($10 | 0) == 0;
    if ($tobool4) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_fprintf(5254296);
    label = 7;
    break;
   case 7:
    _qh_fprintf(5275276);
    _qh_printsummary();
    var $oldtrace_0 = $9;
    label = 8;
    break;
   case 8:
    var $oldtrace_0;
    var $11 = HEAP32[5247504 >> 2];
    var $cmp8 = ($11 | 0) < 5;
    if ($cmp8) {
      label = 9;
      break;
    } else {
      label = 24;
      break;
    }
   case 9:
    var $12 = HEAP32[5247336 >> 2];
    var $tobool10 = ($12 | 0) == 0;
    var $13 = HEAP32[$vertices >> 2];
    var $tobool32 = ($13 | 0) == 0;
    if ($tobool10) {
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    if ($tobool32) {
      label = 22;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p18 = $13 + 4 | 0;
    var $14 = HEAP32[$p18 >> 2];
    var $tobool1996 = ($14 | 0) == 0;
    if ($tobool1996) {
      label = 22;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $15 = $14;
    var $incdec_ptr95101 = $p18 + 4 | 0;
    var $incdec_ptr95 = $incdec_ptr95101;
    var $16 = HEAP32[5249188 >> 2];
    var $i_097 = 0;
    var $gmcoord_098 = $16;
    var $incdec_ptr99 = $incdec_ptr95;
    var $18 = $15;
    label = 15;
    break;
   case 13:
    var $scevgep104 = $gmcoord_098 + ($20 << 3) | 0;
    var $gmcoord_1_lcssa = $scevgep104;
    label = 14;
    break;
   case 14:
    var $gmcoord_1_lcssa;
    var $incdec_ptr = $incdec_ptr99 + 4 | 0;
    var $17 = HEAP32[$incdec_ptr99 >> 2];
    var $tobool19 = ($17 | 0) == 0;
    if ($tobool19) {
      label = 22;
      break;
    } else {
      var $i_097 = $inc20;
      var $gmcoord_098 = $gmcoord_1_lcssa;
      var $incdec_ptr99 = $incdec_ptr;
      var $18 = $17;
      label = 15;
      break;
    }
   case 15:
    var $18;
    var $incdec_ptr99;
    var $gmcoord_098;
    var $i_097;
    var $inc20 = $i_097 + 1 | 0;
    var $19 = HEAP32[5249192 >> 2];
    var $arrayidx21 = $19 + ($i_097 << 2) | 0;
    HEAP32[$arrayidx21 >> 2] = $gmcoord_098;
    var $20 = HEAP32[5247504 >> 2];
    var $tobool2488 = ($20 | 0) == 0;
    if ($tobool2488) {
      var $gmcoord_1_lcssa = $gmcoord_098;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $point22 = $18 + 8 | 0;
    var $21 = HEAP32[$point22 >> 2];
    var $k_089 = $20;
    var $coord_090 = $21;
    var $gmcoord_191 = $gmcoord_098;
    label = 17;
    break;
   case 17:
    var $gmcoord_191;
    var $coord_090;
    var $k_089;
    var $dec = $k_089 - 1 | 0;
    var $incdec_ptr26 = $coord_090 + 8 | 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_090 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_090 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247348 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247352 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247356 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247360 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call27 = _qh_randomfactor($23, $24);
    var $mul = $22 * $call27;
    var $incdec_ptr28 = $gmcoord_191 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$gmcoord_191 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_191 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool24 = ($dec | 0) == 0;
    if ($tobool24) {
      label = 13;
      break;
    } else {
      var $k_089 = $dec;
      var $coord_090 = $incdec_ptr26;
      var $gmcoord_191 = $incdec_ptr28;
      label = 17;
      break;
    }
   case 18:
    if ($tobool32) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $p37 = $13 + 4 | 0;
    var $25 = HEAP32[$p37 >> 2];
    var $tobool4085 = ($25 | 0) == 0;
    if ($tobool4085) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $26 = $25;
    var $27 = $p37;
    var $vertexp_186 = $27;
    var $i_187 = 0;
    var $28 = $26;
    label = 21;
    break;
   case 21:
    var $28;
    var $i_187;
    var $vertexp_186;
    var $incdec_ptr39 = $vertexp_186 + 4 | 0;
    var $point42 = $28 + 8 | 0;
    var $29 = HEAP32[$point42 >> 2];
    var $inc43 = $i_187 + 1 | 0;
    var $30 = HEAP32[5249192 >> 2];
    var $arrayidx44 = $30 + ($i_187 << 2) | 0;
    HEAP32[$arrayidx44 >> 2] = $29;
    var $31 = HEAP32[$incdec_ptr39 >> 2];
    var $tobool40 = ($31 | 0) == 0;
    if ($tobool40) {
      label = 22;
      break;
    } else {
      var $vertexp_186 = $incdec_ptr39;
      var $i_187 = $inc43;
      var $28 = $31;
      label = 21;
      break;
    }
   case 22:
    var $32 = HEAP32[5247504 >> 2];
    var $33 = HEAP32[5249192 >> 2];
    var $34 = $facet + 76 | 0;
    var $35 = $34;
    var $36 = HEAP32[$35 >> 2];
    var $37 = $36 >>> 12;
    var $bf_clear = $37 & 1;
    var $38 = HEAP32[$normal >> 2];
    var $offset = $facet + 16 | 0;
    _qh_sethyperplane_det($32, $33, $4, $bf_clear, $38, $offset, $nearzero);
    var $_pr = HEAP32[5247504 >> 2];
    var $cmp50 = ($_pr | 0) > 4;
    if ($cmp50) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $39 = HEAP32[$nearzero >> 2];
    var $tobool51 = ($39 | 0) == 0;
    if ($tobool51) {
      label = 45;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $40 = HEAP32[5249188 >> 2];
    var $41 = HEAP32[$vertices >> 2];
    var $tobool54 = ($41 | 0) == 0;
    if ($tobool54) {
      var $gmcoord_4 = $40;
      var $i_3 = 0;
      label = 34;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $p59 = $41 + 4 | 0;
    var $42 = $p59;
    var $gmcoord_2_ph_ph = $40;
    var $i_2_ph_ph = 0;
    var $vertexp_2_ph_ph = $42;
    label = 27;
    break;
   case 26:
    var $scevgep103 = $gmcoord_2_ph_ph + ($46 << 3) | 0;
    var $gmcoord_2_ph_ph = $scevgep103;
    var $i_2_ph_ph = $inc67;
    var $vertexp_2_ph_ph = $incdec_ptr61;
    label = 27;
    break;
   case 27:
    var $vertexp_2_ph_ph;
    var $i_2_ph_ph;
    var $gmcoord_2_ph_ph;
    var $i_2_ph = $i_2_ph_ph;
    var $vertexp_2_ph = $vertexp_2_ph_ph;
    label = 28;
    break;
   case 28:
    var $vertexp_2_ph;
    var $i_2_ph;
    var $vertexp_2 = $vertexp_2_ph;
    label = 29;
    break;
   case 29:
    var $vertexp_2;
    var $incdec_ptr61 = $vertexp_2 + 4 | 0;
    var $43 = HEAP32[$vertexp_2 >> 2];
    var $tobool62 = ($43 | 0) == 0;
    if ($tobool62) {
      var $gmcoord_4 = $gmcoord_2_ph_ph;
      var $i_3 = $i_2_ph;
      label = 34;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $point64 = $43 + 8 | 0;
    var $44 = HEAP32[$point64 >> 2];
    var $cmp65 = ($44 | 0) == ($4 | 0);
    if ($cmp65) {
      var $vertexp_2 = $incdec_ptr61;
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $inc67 = $i_2_ph + 1 | 0;
    var $45 = HEAP32[5249192 >> 2];
    var $arrayidx68 = $45 + ($i_2_ph << 2) | 0;
    HEAP32[$arrayidx68 >> 2] = $gmcoord_2_ph_ph;
    var $46 = HEAP32[5247504 >> 2];
    var $tobool7278 = ($46 | 0) == 0;
    if ($tobool7278) {
      var $i_2_ph = $inc67;
      var $vertexp_2_ph = $incdec_ptr61;
      label = 28;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $47 = HEAP32[$point64 >> 2];
    var $k_179 = $46;
    var $coord_180 = $47;
    var $gmcoord_381 = $gmcoord_2_ph_ph;
    var $point_082 = $4;
    label = 33;
    break;
   case 33:
    var $point_082;
    var $gmcoord_381;
    var $coord_180;
    var $k_179;
    var $dec71 = $k_179 - 1 | 0;
    var $incdec_ptr74 = $coord_180 + 8 | 0;
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_180 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_180 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr75 = $point_082 + 8 | 0;
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point_082 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point_082 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $48 - $49;
    var $incdec_ptr76 = $gmcoord_381 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$gmcoord_381 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_381 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool72 = ($dec71 | 0) == 0;
    if ($tobool72) {
      label = 26;
      break;
    } else {
      var $k_179 = $dec71;
      var $coord_180 = $incdec_ptr74;
      var $gmcoord_381 = $incdec_ptr76;
      var $point_082 = $incdec_ptr75;
      label = 33;
      break;
    }
   case 34:
    var $i_3;
    var $gmcoord_4;
    var $50 = HEAP32[5249192 >> 2];
    var $arrayidx81 = $50 + ($i_3 << 2) | 0;
    HEAP32[$arrayidx81 >> 2] = $gmcoord_4;
    var $51 = HEAP32[5247336 >> 2];
    var $tobool82 = ($51 | 0) == 0;
    if ($tobool82) {
      label = 42;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $52 = HEAP32[5247504 >> 2];
    var $i_474 = $52 - 1 | 0;
    var $tobool8775 = ($i_474 | 0) == 0;
    if ($tobool8775) {
      label = 42;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $53 = HEAP32[5249188 >> 2];
    var $gmcoord_576 = $53;
    var $i_477 = $i_474;
    var $54 = $52;
    label = 40;
    break;
   case 37:
    var $scevgep = $gmcoord_576 + ($54 << 3) | 0;
    var $gmcoord_6_lcssa = $scevgep;
    label = 38;
    break;
   case 38:
    var $gmcoord_6_lcssa;
    var $i_4 = $i_477 - 1 | 0;
    var $tobool87 = ($i_4 | 0) == 0;
    if ($tobool87) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $_pre3 = HEAP32[5247504 >> 2];
    var $gmcoord_576 = $gmcoord_6_lcssa;
    var $i_477 = $i_4;
    var $54 = $_pre3;
    label = 40;
    break;
   case 40:
    var $54;
    var $i_477;
    var $gmcoord_576;
    var $tobool9171 = ($54 | 0) == 0;
    if ($tobool9171) {
      var $gmcoord_6_lcssa = $gmcoord_576;
      label = 38;
      break;
    } else {
      var $k_272 = $54;
      var $gmcoord_673 = $gmcoord_576;
      label = 41;
      break;
    }
   case 41:
    var $gmcoord_673;
    var $k_272;
    var $dec90 = $k_272 - 1 | 0;
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247348 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247352 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $56 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247356 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247360 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call93 = _qh_randomfactor($55, $56);
    var $incdec_ptr94 = $gmcoord_673 + 8 | 0;
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$gmcoord_673 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$gmcoord_673 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul95 = $call93 * $57;
    HEAPF64[tempDoublePtr >> 3] = $mul95, HEAP32[$gmcoord_673 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_673 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool91 = ($dec90 | 0) == 0;
    if ($tobool91) {
      label = 37;
      break;
    } else {
      var $k_272 = $dec90;
      var $gmcoord_673 = $incdec_ptr94;
      label = 41;
      break;
    }
   case 42:
    var $58 = HEAP32[5247504 >> 2];
    var $59 = HEAP32[5249192 >> 2];
    var $60 = $facet + 76 | 0;
    var $61 = $60;
    var $62 = HEAP32[$61 >> 2];
    var $63 = $62 >>> 12;
    var $bf_clear100 = $63 & 1;
    var $64 = HEAP32[$normal >> 2];
    var $offset102 = $facet + 16 | 0;
    _qh_sethyperplane_gauss($58, $59, $4, $bf_clear100, $64, $offset102, $nearzero);
    var $65 = HEAP32[$nearzero >> 2];
    var $tobool103 = ($65 | 0) == 0;
    if ($tobool103) {
      label = 45;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $call105 = _qh_orientoutside($facet);
    var $tobool106 = ($call105 | 0) != 0;
    var $66 = HEAP32[5247036 >> 2];
    var $tobool108 = ($66 | 0) != 0;
    var $or_cond3 = $tobool106 & $tobool108;
    if ($or_cond3) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    _qh_fprintf(5274240);
    label = 45;
    break;
   case 45:
    var $67 = $facet + 76 | 0;
    var $68 = $67;
    var $69 = HEAP32[$68 >> 2];
    var $70 = $69 & -131073;
    HEAP32[$68 >> 2] = $70;
    var $71 = HEAP32[5246996 >> 2];
    var $tobool115 = ($71 | 0) == 0;
    if ($tobool115) {
      label = 51;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $72 = HEAP32[5247456 >> 2];
    var $tobool117 = ($72 | 0) == 0;
    var $73 = HEAP32[5247504 >> 2];
    var $sub119 = $73 - 1 | 0;
    var $74 = HEAP32[$normal >> 2];
    var $arrayidx121 = $74 + ($sub119 << 3) | 0;
    var $75 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx121 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx121 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $76 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248600 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248604 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool117) {
      label = 49;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $mul122 = $76 * 2;
    var $cmp123 = $75 < $mul122;
    if ($cmp123) {
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $77 = $69 | 131072;
    HEAP32[$68 >> 2] = $77;
    label = 51;
    break;
   case 49:
    var $mul132 = $76 * -2;
    var $cmp133 = $75 > $mul132;
    if ($cmp133) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    var $78 = $69 | 131072;
    HEAP32[$68 >> 2] = $78;
    label = 51;
    break;
   case 51:
    var $79 = HEAP32[5247312 >> 2];
    var $80 = HEAP32[5247036 >> 2];
    var $81 = $80 | $79;
    var $82 = HEAP32[5247424 >> 2];
    var $83 = $81 | $82;
    var $84 = ($83 | 0) != 0;
    var $85 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp145 = $85 < 1.7976931348623157e+308;
    var $or_cond2 = $84 | $cmp145;
    if ($or_cond2) {
      label = 52;
      break;
    } else {
      var $103 = $80;
      label = 66;
      break;
    }
   case 52:
    var $86 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $86;
    HEAP32[5247336 >> 2] = 0;
    var $87 = HEAP32[$vertices >> 2];
    var $tobool148 = ($87 | 0) == 0;
    if ($tobool148) {
      var $102 = $86;
      var $_pre2 = $80;
      label = 65;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $p153 = $87 + 4 | 0;
    var $88 = HEAP32[$p153 >> 2];
    var $tobool15669 = ($88 | 0) == 0;
    if ($tobool15669) {
      var $102 = $86;
      var $_pre2 = $80;
      label = 65;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $89 = $88;
    var $incdec_ptr15568100 = $p153 + 4 | 0;
    var $incdec_ptr15568 = $incdec_ptr15568100;
    var $incdec_ptr15570 = $incdec_ptr15568;
    var $90 = $89;
    label = 55;
    break;
   case 55:
    var $90;
    var $incdec_ptr15570;
    var $point158 = $90 + 8 | 0;
    var $91 = HEAP32[$point158 >> 2];
    var $cmp159 = ($91 | 0) == ($4 | 0);
    if ($cmp159) {
      label = 63;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $92 = HEAP32[5243440 >> 2];
    var $inc161 = $92 + 1 | 0;
    HEAP32[5243440 >> 2] = $inc161;
    _qh_distplane($91, $facet, $dist);
    var $93 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp163 = $93 < 0;
    if ($cmp163) {
      label = 57;
      break;
    } else {
      var $94 = $93;
      label = 58;
      break;
    }
   case 57:
    var $sub164 = -$93;
    var $94 = $sub164;
    label = 58;
    break;
   case 58:
    var $94;
    HEAPF64[tempDoublePtr >> 3] = $94, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $95 = HEAP32[5244128 >> 2];
    var $inc165 = $95 + 1 | 0;
    HEAP32[5244128 >> 2] = $inc165;
    var $96 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244136 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244140 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $94 + $96;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5244136 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244140 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $97 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244144 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244148 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp166 = $94 > $97;
    if ($cmp166) {
      label = 59;
      break;
    } else {
      label = 61;
      break;
    }
   case 59:
    HEAPF64[tempDoublePtr >> 3] = $94, HEAP32[5244144 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244148 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $98 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp168 = $94 > $98;
    if ($cmp168) {
      label = 60;
      break;
    } else {
      label = 63;
      break;
    }
   case 60:
    HEAPF64[tempDoublePtr >> 3] = $94, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $99 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp170 = $94 > $99;
    if ($cmp170) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 61:
    var $sub175 = -$94;
    var $100 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp176 = $100 < $sub175;
    if ($cmp176) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    _qh_fprintf(5273784);
    _qh_errprint($facet, 0, 0, 0);
    label = 63;
    break;
   case 63:
    var $incdec_ptr155 = $incdec_ptr15570 + 4 | 0;
    var $101 = HEAP32[$incdec_ptr15570 >> 2];
    var $tobool156 = ($101 | 0) == 0;
    if ($tobool156) {
      label = 64;
      break;
    } else {
      var $incdec_ptr15570 = $incdec_ptr155;
      var $90 = $101;
      label = 55;
      break;
    }
   case 64:
    var $_pre = HEAP32[5249220 >> 2];
    var $_pre2_pre = HEAP32[5247036 >> 2];
    var $102 = $_pre;
    var $_pre2 = $_pre2_pre;
    label = 65;
    break;
   case 65:
    var $_pre2;
    var $102;
    HEAP32[5247336 >> 2] = $102;
    var $103 = $_pre2;
    label = 66;
    break;
   case 66:
    var $103;
    var $cmp192 = ($103 | 0) > 2;
    if ($cmp192) {
      label = 67;
      break;
    } else {
      label = 70;
      break;
    }
   case 67:
    _qh_fprintf(5272584);
    var $104 = HEAP32[5247504 >> 2];
    var $cmp19766 = ($104 | 0) > 0;
    if ($cmp19766) {
      var $k_367 = 0;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    var $k_367;
    _qh_fprintf(5272104);
    var $inc201 = $k_367 + 1 | 0;
    var $105 = HEAP32[5247504 >> 2];
    var $cmp197 = ($inc201 | 0) < ($105 | 0);
    if ($cmp197) {
      var $k_367 = $inc201;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    _qh_fprintf(5299656);
    label = 70;
    break;
   case 70:
    var $106 = HEAP32[5248968 >> 2];
    var $cmp204 = ($106 | 0) == ($facet | 0);
    if ($cmp204) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    HEAP32[5247036 >> 2] = $oldtrace_0;
    label = 72;
    break;
   case 72:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_setfacetplane["X"] = 1;
function _qh_crossproduct($vecA, $vecB, $vecC) {
  var $arrayidx = $vecA + 8 | 0;
  var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $arrayidx1 = $vecB + 16 | 0;
  var $mul = $0 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $arrayidx2 = $vecA + 16 | 0;
  var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $arrayidx3 = $vecB + 8 | 0;
  var $sub = $mul - $2 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$vecC >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$vecC + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$vecA >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vecA + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $mul8 = $4 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $sub13 = -($mul8 - $6 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$vecB >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vecB + 4 >> 2], HEAPF64[tempDoublePtr >> 3]));
  var $arrayidx14 = $vecC + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $sub13, HEAP32[$arrayidx14 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx14 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$vecA >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vecA + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $mul17 = $8 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $sub21 = $mul17 - $10 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$vecB >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$vecB + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $arrayidx22 = $vecC + 16 | 0;
  HEAPF64[tempDoublePtr >> 3] = $sub21, HEAP32[$arrayidx22 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  return;
}
function _qh_sethyperplane_det($dim, $rows, $point0, $toporient, $normal, $offset, $nearzero) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    if (($dim | 0) == 2) {
      label = 3;
      break;
    } else if (($dim | 0) == 3) {
      label = 4;
      break;
    } else if (($dim | 0) == 4) {
      label = 8;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    var $arrayidx = $rows + 4 | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $add_ptr = $0 + 8 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = HEAP32[$rows >> 2];
    var $add_ptr2 = $2 + 8 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $1 - $3;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$normal >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normal + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $4 = HEAP32[$rows >> 2];
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $6 = HEAP32[$arrayidx >> 2];
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$6 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$6 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub6 = $5 - $7;
    var $arrayidx7 = $normal + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub6, HEAP32[$arrayidx7 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_normalize2($normal, 2, $toporient);
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $8 * $9;
    var $arrayidx10 = $point0 + 8 | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx10 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx10 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx7 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx7 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul12 = $10 * $11;
    var $add = $mul + $mul12;
    var $sub13 = -$add;
    HEAPF64[tempDoublePtr >> 3] = $sub13, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[$nearzero >> 2] = 0;
    label = 16;
    break;
   case 4:
    var $arrayidx16 = $rows + 8 | 0;
    var $12 = HEAP32[$arrayidx16 >> 2];
    var $add_ptr17 = $12 + 8 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr17 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr17 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = HEAP32[$rows >> 2];
    var $add_ptr19 = $14 + 8 | 0;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr19 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr19 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub20 = $13 - $15;
    var $arrayidx21 = $rows + 4 | 0;
    var $16 = HEAP32[$arrayidx21 >> 2];
    var $add_ptr22 = $16 + 16 | 0;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr24 = $14 + 16 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr24 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr24 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub25 = $17 - $18;
    var $mul26 = $sub20 * $sub25;
    var $add_ptr28 = $12 + 16 | 0;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr28 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr28 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub31 = $19 - $18;
    var $add_ptr33 = $16 + 8 | 0;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr33 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr33 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub36 = $20 - $15;
    var $mul37 = $sub31 * $sub36;
    var $sub38 = $mul26 - $mul37;
    HEAPF64[tempDoublePtr >> 3] = $sub38, HEAP32[$normal >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normal + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $21 = HEAP32[$arrayidx21 >> 2];
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$21 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$21 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $23 = HEAP32[$rows >> 2];
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$23 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$23 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub42 = $22 - $24;
    var $25 = HEAP32[$arrayidx16 >> 2];
    var $add_ptr44 = $25 + 16 | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr44 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr44 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr46 = $23 + 16 | 0;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr46 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr46 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub47 = $26 - $27;
    var $mul48 = $sub42 * $sub47;
    var $add_ptr50 = $21 + 16 | 0;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr50 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr50 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub53 = $28 - $27;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$25 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$25 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub56 = $29 - $24;
    var $mul57 = $sub53 * $sub56;
    var $sub58 = $mul48 - $mul57;
    var $arrayidx59 = $normal + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub58, HEAP32[$arrayidx59 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx59 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $30 = HEAP32[$arrayidx16 >> 2];
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$30 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$30 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $32 = HEAP32[$rows >> 2];
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$32 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$32 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub62 = $31 - $33;
    var $34 = HEAP32[$arrayidx21 >> 2];
    var $add_ptr64 = $34 + 8 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr64 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr64 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr66 = $32 + 8 | 0;
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr66 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr66 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub67 = $35 - $36;
    var $mul68 = $sub62 * $sub67;
    var $add_ptr70 = $30 + 8 | 0;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr70 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr70 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub73 = $37 - $36;
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$34 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$34 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub76 = $38 - $33;
    var $mul77 = $sub73 * $sub76;
    var $sub78 = $mul68 - $mul77;
    var $arrayidx79 = $normal + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub78, HEAP32[$arrayidx79 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx79 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_normalize2($normal, 3, $toporient);
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul82 = $39 * $40;
    var $arrayidx83 = $point0 + 8 | 0;
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx83 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx83 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul85 = $41 * $42;
    var $add86 = $mul82 + $mul85;
    var $arrayidx87 = $point0 + 16 | 0;
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx87 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx87 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx79 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx79 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul89 = $43 * $44;
    var $add90 = $add86 + $mul89;
    var $sub91 = -$add90;
    HEAPF64[tempDoublePtr >> 3] = $sub91, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub108 = -$45;
    var $46 = HEAP32[$arrayidx16 >> 2];
    var $cmp93 = ($46 | 0) == ($point0 | 0);
    if ($cmp93) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $47 = HEAP32[$arrayidx21 >> 2];
    var $cmp93_1 = ($47 | 0) == ($point0 | 0);
    if ($cmp93_1) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$46 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$46 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul97 = $48 * $49;
    var $arrayidx98 = $46 + 8 | 0;
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $51 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul100 = $50 * $51;
    var $add101 = $mul97 + $mul100;
    var $arrayidx102 = $46 + 16 | 0;
    var $52 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx102 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx102 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx79 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx79 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul104 = $52 * $53;
    var $add105 = $add101 + $mul104;
    var $add106 = $add105 - $add90;
    var $cmp107 = $add106 > $45;
    var $cmp109 = $add106 < $sub108;
    var $or_cond = $cmp107 | $cmp109;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 7:
    HEAP32[$nearzero >> 2] = 1;
    label = 13;
    break;
   case 8:
    var $arrayidx115 = $rows + 8 | 0;
    var $54 = HEAP32[$arrayidx115 >> 2];
    var $add_ptr116 = $54 + 8 | 0;
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr116 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr116 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $56 = HEAP32[$rows >> 2];
    var $add_ptr118 = $56 + 8 | 0;
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr118 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr118 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub119 = $55 - $57;
    var $arrayidx120 = $rows + 4 | 0;
    var $58 = HEAP32[$arrayidx120 >> 2];
    var $add_ptr121 = $58 + 16 | 0;
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr121 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr121 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr123 = $56 + 16 | 0;
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr123 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr123 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub124 = $59 - $60;
    var $arrayidx125 = $rows + 12 | 0;
    var $61 = HEAP32[$arrayidx125 >> 2];
    var $add_ptr126 = $61 + 24 | 0;
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr126 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr126 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr128 = $56 + 24 | 0;
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr128 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr128 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub129 = $62 - $63;
    var $mul130 = $sub124 * $sub129;
    var $add_ptr132 = $58 + 24 | 0;
    var $64 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr132 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr132 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub135 = $64 - $63;
    var $add_ptr137 = $61 + 16 | 0;
    var $65 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr137 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr137 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub140 = $65 - $60;
    var $mul141 = $sub135 * $sub140;
    var $sub142 = $mul130 - $mul141;
    var $mul143 = $sub119 * $sub142;
    var $add_ptr145 = $58 + 8 | 0;
    var $66 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr145 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr145 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub148 = $66 - $57;
    var $add_ptr150 = $54 + 16 | 0;
    var $67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr150 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr150 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub153 = $67 - $60;
    var $mul159 = $sub129 * $sub153;
    var $add_ptr161 = $54 + 24 | 0;
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub164 = $68 - $63;
    var $mul170 = $sub140 * $sub164;
    var $sub171 = $mul159 - $mul170;
    var $mul172 = $sub148 * $sub171;
    var $sub173 = $mul143 - $mul172;
    var $add_ptr175 = $61 + 8 | 0;
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr175 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr175 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub178 = $69 - $57;
    var $mul189 = $sub135 * $sub153;
    var $mul200 = $sub124 * $sub164;
    var $sub201 = $mul189 - $mul200;
    var $mul202 = $sub178 * $sub201;
    var $add203 = $mul202 + $sub173;
    var $sub204 = -$add203;
    HEAPF64[tempDoublePtr >> 3] = $sub204, HEAP32[$normal >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normal + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $70 = HEAP32[$arrayidx115 >> 2];
    var $71 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$70 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$70 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $72 = HEAP32[$rows >> 2];
    var $73 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$72 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$72 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub208 = $71 - $73;
    var $74 = HEAP32[$arrayidx120 >> 2];
    var $add_ptr210 = $74 + 16 | 0;
    var $75 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr210 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr210 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr212 = $72 + 16 | 0;
    var $76 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr212 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr212 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub213 = $75 - $76;
    var $77 = HEAP32[$arrayidx125 >> 2];
    var $add_ptr215 = $77 + 24 | 0;
    var $78 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr215 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr215 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr217 = $72 + 24 | 0;
    var $79 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr217 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr217 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub218 = $78 - $79;
    var $mul219 = $sub213 * $sub218;
    var $add_ptr221 = $74 + 24 | 0;
    var $80 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr221 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr221 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub224 = $80 - $79;
    var $add_ptr226 = $77 + 16 | 0;
    var $81 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr226 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr226 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub229 = $81 - $76;
    var $mul230 = $sub224 * $sub229;
    var $sub231 = $mul219 - $mul230;
    var $mul232 = $sub208 * $sub231;
    var $82 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$74 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$74 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub235 = $82 - $73;
    var $add_ptr237 = $70 + 16 | 0;
    var $83 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr237 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr237 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub240 = $83 - $76;
    var $mul246 = $sub218 * $sub240;
    var $add_ptr248 = $70 + 24 | 0;
    var $84 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr248 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr248 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub251 = $84 - $79;
    var $mul257 = $sub229 * $sub251;
    var $sub258 = $mul246 - $mul257;
    var $mul259 = $sub235 * $sub258;
    var $sub260 = $mul232 - $mul259;
    var $85 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$77 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$77 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub263 = $85 - $73;
    var $mul274 = $sub224 * $sub240;
    var $mul285 = $sub213 * $sub251;
    var $sub286 = $mul274 - $mul285;
    var $mul287 = $sub263 * $sub286;
    var $add288 = $mul287 + $sub260;
    var $arrayidx289 = $normal + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add288, HEAP32[$arrayidx289 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx289 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $86 = HEAP32[$arrayidx115 >> 2];
    var $87 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$86 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$86 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $88 = HEAP32[$rows >> 2];
    var $89 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$88 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$88 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub292 = $87 - $89;
    var $90 = HEAP32[$arrayidx120 >> 2];
    var $add_ptr294 = $90 + 8 | 0;
    var $91 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr294 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr294 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr296 = $88 + 8 | 0;
    var $92 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr296 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr296 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub297 = $91 - $92;
    var $93 = HEAP32[$arrayidx125 >> 2];
    var $add_ptr299 = $93 + 24 | 0;
    var $94 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr299 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr299 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr301 = $88 + 24 | 0;
    var $95 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr301 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr301 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub302 = $94 - $95;
    var $mul303 = $sub297 * $sub302;
    var $add_ptr305 = $90 + 24 | 0;
    var $96 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr305 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr305 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub308 = $96 - $95;
    var $add_ptr310 = $93 + 8 | 0;
    var $97 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr310 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr310 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub313 = $97 - $92;
    var $mul314 = $sub308 * $sub313;
    var $sub315 = $mul303 - $mul314;
    var $mul316 = $sub292 * $sub315;
    var $98 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$90 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$90 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub319 = $98 - $89;
    var $add_ptr321 = $86 + 8 | 0;
    var $99 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr321 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr321 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub324 = $99 - $92;
    var $mul330 = $sub302 * $sub324;
    var $add_ptr332 = $86 + 24 | 0;
    var $100 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr332 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr332 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub335 = $100 - $95;
    var $mul341 = $sub313 * $sub335;
    var $sub342 = $mul330 - $mul341;
    var $mul343 = $sub319 * $sub342;
    var $sub344 = $mul316 - $mul343;
    var $101 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$93 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$93 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub347 = $101 - $89;
    var $mul358 = $sub308 * $sub324;
    var $mul369 = $sub297 * $sub335;
    var $sub370 = $mul358 - $mul369;
    var $mul371 = $sub347 * $sub370;
    var $add372 = $mul371 + $sub344;
    var $sub373 = -$add372;
    var $arrayidx374 = $normal + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub373, HEAP32[$arrayidx374 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx374 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $102 = HEAP32[$arrayidx115 >> 2];
    var $103 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$102 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$102 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $104 = HEAP32[$rows >> 2];
    var $105 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$104 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub377 = $103 - $105;
    var $106 = HEAP32[$arrayidx120 >> 2];
    var $add_ptr379 = $106 + 8 | 0;
    var $107 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr379 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr379 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr381 = $104 + 8 | 0;
    var $108 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr381 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr381 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub382 = $107 - $108;
    var $109 = HEAP32[$arrayidx125 >> 2];
    var $add_ptr384 = $109 + 16 | 0;
    var $110 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr384 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr384 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add_ptr386 = $104 + 16 | 0;
    var $111 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr386 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr386 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub387 = $110 - $111;
    var $mul388 = $sub382 * $sub387;
    var $add_ptr390 = $106 + 16 | 0;
    var $112 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr390 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr390 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub393 = $112 - $111;
    var $add_ptr395 = $109 + 8 | 0;
    var $113 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr395 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr395 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub398 = $113 - $108;
    var $mul399 = $sub393 * $sub398;
    var $sub400 = $mul388 - $mul399;
    var $mul401 = $sub377 * $sub400;
    var $114 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$106 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$106 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub404 = $114 - $105;
    var $add_ptr406 = $102 + 8 | 0;
    var $115 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr406 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr406 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub409 = $115 - $108;
    var $mul415 = $sub387 * $sub409;
    var $add_ptr417 = $102 + 16 | 0;
    var $116 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr417 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr417 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub420 = $116 - $111;
    var $mul426 = $sub398 * $sub420;
    var $sub427 = $mul415 - $mul426;
    var $mul428 = $sub404 * $sub427;
    var $sub429 = $mul401 - $mul428;
    var $117 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$109 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$109 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub432 = $117 - $105;
    var $mul443 = $sub393 * $sub409;
    var $mul454 = $sub382 * $sub420;
    var $sub455 = $mul443 - $mul454;
    var $mul456 = $sub432 * $sub455;
    var $add457 = $mul456 + $sub429;
    var $arrayidx458 = $normal + 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add457, HEAP32[$arrayidx458 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx458 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_normalize2($normal, 4, $toporient);
    var $118 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $119 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul461 = $118 * $119;
    var $arrayidx462 = $point0 + 8 | 0;
    var $120 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx462 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx462 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $121 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx289 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx289 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul464 = $120 * $121;
    var $add465 = $mul461 + $mul464;
    var $arrayidx466 = $point0 + 16 | 0;
    var $122 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx466 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx466 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $123 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx374 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx374 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul468 = $122 * $123;
    var $add469 = $add465 + $mul468;
    var $arrayidx470 = $point0 + 24 | 0;
    var $124 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx470 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx470 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $125 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx458 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx458 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul472 = $124 * $125;
    var $add473 = $add469 + $mul472;
    var $sub474 = -$add473;
    HEAPF64[tempDoublePtr >> 3] = $sub474, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $126 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub500 = -$126;
    var $127 = HEAP32[$arrayidx125 >> 2];
    var $cmp480 = ($127 | 0) == ($point0 | 0);
    if ($cmp480) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $128 = HEAP32[$arrayidx115 >> 2];
    var $cmp480_1 = ($128 | 0) == ($point0 | 0);
    if ($cmp480_1) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 10:
    var $129 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$127 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$127 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $130 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul484 = $129 * $130;
    var $arrayidx485 = $127 + 8 | 0;
    var $131 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx485 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx485 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $132 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx289 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx289 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul487 = $131 * $132;
    var $add488 = $mul484 + $mul487;
    var $arrayidx489 = $127 + 16 | 0;
    var $133 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx489 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx489 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $134 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx374 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx374 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul491 = $133 * $134;
    var $add492 = $add488 + $mul491;
    var $arrayidx493 = $127 + 24 | 0;
    var $135 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx493 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx493 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $136 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx458 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx458 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul495 = $135 * $136;
    var $add496 = $add492 + $mul495;
    var $add497 = $add496 - $add473;
    var $cmp498 = $add497 > $126;
    var $cmp501 = $add497 < $sub500;
    var $or_cond220 = $cmp498 | $cmp501;
    if ($or_cond220) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 11:
    HEAP32[$nearzero >> 2] = 1;
    label = 13;
    break;
   case 12:
    var $_pr = HEAP32[$nearzero >> 2];
    var $tobool509 = ($_pr | 0) == 0;
    if ($tobool509) {
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $137 = HEAP32[5244064 >> 2];
    var $inc = $137 + 1 | 0;
    HEAP32[5244064 >> 2] = $inc;
    var $138 = HEAP32[5247036 >> 2];
    var $tobool511 = ($138 | 0) == 0;
    if ($tobool511) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5270908);
    label = 15;
    break;
   case 15:
    var $139 = HEAP32[5244080 >> 2];
    var $inc514 = $139 + 1 | 0;
    HEAP32[5244080 >> 2] = $inc514;
    label = 16;
    break;
   case 16:
    return;
   case 17:
    var $140 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$47 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$47 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $141 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul97_1 = $140 * $141;
    var $arrayidx98_1 = $47 + 8 | 0;
    var $142 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $143 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul100_1 = $142 * $143;
    var $add101_1 = $mul97_1 + $mul100_1;
    var $arrayidx102_1 = $47 + 16 | 0;
    var $144 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx102_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx102_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $145 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx79 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx79 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul104_1 = $144 * $145;
    var $add105_1 = $add101_1 + $mul104_1;
    var $add106_1 = $add105_1 - $add90;
    var $cmp107_1 = $add106_1 > $45;
    var $cmp109_1 = $add106_1 < $sub108;
    var $or_cond_1 = $cmp107_1 | $cmp109_1;
    if ($or_cond_1) {
      label = 7;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $146 = HEAP32[$rows >> 2];
    var $cmp93_2 = ($146 | 0) == ($point0 | 0);
    if ($cmp93_2) {
      label = 12;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $147 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$146 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$146 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $148 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul97_2 = $147 * $148;
    var $arrayidx98_2 = $146 + 8 | 0;
    var $149 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $150 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul100_2 = $149 * $150;
    var $add101_2 = $mul97_2 + $mul100_2;
    var $arrayidx102_2 = $146 + 16 | 0;
    var $151 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx102_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx102_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $152 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx79 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx79 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul104_2 = $151 * $152;
    var $add105_2 = $add101_2 + $mul104_2;
    var $add106_2 = $add105_2 - $add90;
    var $cmp107_2 = $add106_2 > $45;
    var $cmp109_2 = $add106_2 < $sub108;
    var $or_cond_2 = $cmp107_2 | $cmp109_2;
    if ($or_cond_2) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 20:
    var $153 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$128 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$128 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $154 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul484_1 = $153 * $154;
    var $arrayidx485_1 = $128 + 8 | 0;
    var $155 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx485_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx485_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $156 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx289 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx289 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul487_1 = $155 * $156;
    var $add488_1 = $mul484_1 + $mul487_1;
    var $arrayidx489_1 = $128 + 16 | 0;
    var $157 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx489_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx489_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $158 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx374 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx374 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul491_1 = $157 * $158;
    var $add492_1 = $add488_1 + $mul491_1;
    var $arrayidx493_1 = $128 + 24 | 0;
    var $159 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx493_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx493_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $160 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx458 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx458 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul495_1 = $159 * $160;
    var $add496_1 = $add492_1 + $mul495_1;
    var $add497_1 = $add496_1 - $add473;
    var $cmp498_1 = $add497_1 > $126;
    var $cmp501_1 = $add497_1 < $sub500;
    var $or_cond220_1 = $cmp498_1 | $cmp501_1;
    if ($or_cond220_1) {
      label = 11;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $161 = HEAP32[$arrayidx120 >> 2];
    var $cmp480_2 = ($161 | 0) == ($point0 | 0);
    if ($cmp480_2) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $162 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $163 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul484_2 = $162 * $163;
    var $arrayidx485_2 = $161 + 8 | 0;
    var $164 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx485_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx485_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $165 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx289 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx289 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul487_2 = $164 * $165;
    var $add488_2 = $mul484_2 + $mul487_2;
    var $arrayidx489_2 = $161 + 16 | 0;
    var $166 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx489_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx489_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $167 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx374 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx374 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul491_2 = $166 * $167;
    var $add492_2 = $add488_2 + $mul491_2;
    var $arrayidx493_2 = $161 + 24 | 0;
    var $168 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx493_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx493_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $169 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx458 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx458 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul495_2 = $168 * $169;
    var $add496_2 = $add492_2 + $mul495_2;
    var $add497_2 = $add496_2 - $add473;
    var $cmp498_2 = $add497_2 > $126;
    var $cmp501_2 = $add497_2 < $sub500;
    var $or_cond220_2 = $cmp498_2 | $cmp501_2;
    if ($or_cond220_2) {
      label = 11;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $170 = HEAP32[$rows >> 2];
    var $cmp480_3 = ($170 | 0) == ($point0 | 0);
    if ($cmp480_3) {
      label = 12;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $171 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$170 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$170 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $172 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul484_3 = $171 * $172;
    var $arrayidx485_3 = $170 + 8 | 0;
    var $173 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx485_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx485_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $174 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx289 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx289 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul487_3 = $173 * $174;
    var $add488_3 = $mul484_3 + $mul487_3;
    var $arrayidx489_3 = $170 + 16 | 0;
    var $175 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx489_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx489_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $176 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx374 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx374 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul491_3 = $175 * $176;
    var $add492_3 = $add488_3 + $mul491_3;
    var $arrayidx493_3 = $170 + 24 | 0;
    var $177 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx493_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx493_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $178 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx458 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx458 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul495_3 = $177 * $178;
    var $add496_3 = $add492_3 + $mul495_3;
    var $add497_3 = $add496_3 - $add473;
    var $cmp498_3 = $add497_3 > $126;
    var $cmp501_3 = $add497_3 < $sub500;
    var $or_cond220_3 = $cmp498_3 | $cmp501_3;
    if ($or_cond220_3) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
  }
}
_qh_sethyperplane_det["X"] = 1;
function _qh_sethyperplane_gauss($dim, $rows, $point0, $toporient, $normal, $offset, $nearzero) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sign = __stackBase__;
    var $nearzero2 = __stackBase__ + 4;
    HEAP32[$sign >> 2] = $toporient;
    HEAP32[$nearzero2 >> 2] = 0;
    var $sub = $dim - 1 | 0;
    _qh_gausselim($rows, $sub, $dim, $sign, $nearzero);
    var $tobool32 = ($sub | 0) == 0;
    if ($tobool32) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $dec31 = $dim - 2 | 0;
    var $dec33 = $dec31;
    label = 4;
    break;
   case 4:
    var $dec33;
    var $arrayidx = $rows + ($dec33 << 2) | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $arrayidx2 = $0 + ($dec33 << 3) | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $1 < 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $2 = HEAP32[$sign >> 2];
    var $xor = $2 ^ 1;
    HEAP32[$sign >> 2] = $xor;
    label = 6;
    break;
   case 6:
    var $dec = $dec33 - 1 | 0;
    var $tobool = ($dec33 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      var $dec33 = $dec;
      label = 4;
      break;
    }
   case 7:
    var $3 = HEAP32[$nearzero >> 2];
    var $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $4 = HEAP32[5244080 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5244080 >> 2] = $inc;
    var $5 = HEAP32[5247036 >> 2];
    var $tobool5 = ($5 | 0) == 0;
    if ($tobool5) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _qh_fprintf(5270264);
    label = 10;
    break;
   case 10:
    var $6 = HEAP32[$sign >> 2];
    _qh_backnormal($rows, $sub, $dim, $6, $normal, $nearzero2);
    var $_pr_pre = HEAP32[$nearzero2 >> 2];
    var $_pr = $_pr_pre;
    label = 14;
    break;
   case 11:
    var $7 = HEAP32[$sign >> 2];
    _qh_backnormal($rows, $sub, $dim, $7, $normal, $nearzero2);
    var $8 = HEAP32[$nearzero2 >> 2];
    var $tobool10 = ($8 | 0) == 0;
    if ($tobool10) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $9 = HEAP32[5244080 >> 2];
    var $inc12 = $9 + 1 | 0;
    HEAP32[5244080 >> 2] = $inc12;
    var $10 = HEAP32[5247036 >> 2];
    var $tobool13 = ($10 | 0) == 0;
    if ($tobool13) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_fprintf(5269628);
    var $_pr = $8;
    label = 14;
    break;
   case 14:
    var $_pr;
    var $tobool18 = ($_pr | 0) == 0;
    if ($tobool18) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    HEAP32[$nearzero >> 2] = 1;
    label = 16;
    break;
   case 16:
    _qh_normalize2($normal, $dim, 1);
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normal >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normal + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $11 * $12;
    var $sub22 = -$mul;
    HEAPF64[tempDoublePtr >> 3] = $sub22, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($tobool32) {
      label = 18;
      break;
    } else {
      var $storemerge27 = $sub22;
      var $k_128 = $sub;
      var $normal_pn = $normal;
      var $point0_pn = $point0;
      label = 17;
      break;
    }
   case 17:
    var $point0_pn;
    var $normal_pn;
    var $k_128;
    var $storemerge27;
    var $normalcoef_029 = $normal_pn + 8 | 0;
    var $pointcoord_030 = $point0_pn + 8 | 0;
    var $dec25 = $k_128 - 1 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$pointcoord_030 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$pointcoord_030 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalcoef_029 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalcoef_029 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul30 = $13 * $14;
    var $sub31 = $storemerge27 - $mul30;
    HEAPF64[tempDoublePtr >> 3] = $sub31, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool26 = ($dec25 | 0) == 0;
    if ($tobool26) {
      label = 18;
      break;
    } else {
      var $storemerge27 = $sub31;
      var $k_128 = $dec25;
      var $normal_pn = $normalcoef_029;
      var $point0_pn = $pointcoord_030;
      label = 17;
      break;
    }
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_sethyperplane_gauss["X"] = 1;
function _qh_copypoints($points, $numpoints, $dimension) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mul = $numpoints << 3;
    var $mul1 = $mul * $dimension & -1;
    var $call = _qh_malloc($mul1);
    var $0 = $call;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5269284);
    _qh_errexit(4, 0, 0);
    label = 4;
    break;
   case 4:
    var $1 = $points;
    _memcpy($call, $1, $mul1);
    return $0;
  }
}
function _qh_determinant($rows, $dim, $nearzero) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sign = __stackBase__;
    HEAP32[$sign >> 2] = 0;
    HEAP32[$nearzero >> 2] = 0;
    var $cmp = ($dim | 0) < 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5293792);
    _qh_errexit(5, 0, 0);
    var $det_1 = 0;
    label = 17;
    break;
   case 4:
    if (($dim | 0) == 2) {
      label = 5;
      break;
    } else if (($dim | 0) == 3) {
      label = 9;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    var $0 = HEAP32[$rows >> 2];
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$0 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$0 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx4 = $rows + 4 | 0;
    var $2 = HEAP32[$arrayidx4 >> 2];
    var $arrayidx5 = $2 + 8 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $1 * $3;
    var $arrayidx7 = $0 + 8 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx7 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx7 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul10 = $4 * $5;
    var $sub = $mul - $mul10;
    var $cmp11 = $sub < 0;
    if ($cmp11) {
      label = 6;
      break;
    } else {
      var $cond = $sub;
      label = 7;
      break;
    }
   case 6:
    var $sub12 = -$sub;
    var $cond = $sub12;
    label = 7;
    break;
   case 7:
    var $cond;
    var $6 = HEAP32[5248708 >> 2];
    var $arrayidx13 = $6 + 8 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx13 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx13 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp14 = $cond < $7;
    if ($cmp14) {
      label = 8;
      break;
    } else {
      var $det_1 = $sub;
      label = 17;
      break;
    }
   case 8:
    HEAP32[$nearzero >> 2] = 1;
    var $det_1 = $sub;
    label = 17;
    break;
   case 9:
    var $8 = HEAP32[$rows >> 2];
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$8 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$8 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx21 = $rows + 4 | 0;
    var $10 = HEAP32[$arrayidx21 >> 2];
    var $arrayidx22 = $10 + 8 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx23 = $rows + 8 | 0;
    var $12 = HEAP32[$arrayidx23 >> 2];
    var $arrayidx24 = $12 + 16 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx24 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx24 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul25 = $11 * $13;
    var $arrayidx27 = $10 + 16 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx29 = $12 + 8 | 0;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx29 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx29 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul30 = $14 * $15;
    var $sub31 = $mul25 - $mul30;
    var $mul32 = $9 * $sub31;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$10 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$10 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx36 = $8 + 8 | 0;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx36 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx36 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul39 = $13 * $17;
    var $arrayidx41 = $8 + 16 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx41 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx41 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul44 = $15 * $18;
    var $sub45 = $mul39 - $mul44;
    var $mul46 = $16 * $sub45;
    var $sub47 = $mul32 - $mul46;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$12 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$12 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul54 = $14 * $17;
    var $mul59 = $11 * $18;
    var $sub60 = $mul54 - $mul59;
    var $mul61 = $19 * $sub60;
    var $add = $mul61 + $sub47;
    var $cmp62 = $add < 0;
    if ($cmp62) {
      label = 10;
      break;
    } else {
      var $cond67 = $add;
      label = 11;
      break;
    }
   case 10:
    var $sub64 = -$add;
    var $cond67 = $sub64;
    label = 11;
    break;
   case 11:
    var $cond67;
    var $20 = HEAP32[5248708 >> 2];
    var $arrayidx68 = $20 + 16 | 0;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx68 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx68 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp69 = $cond67 < $21;
    if ($cmp69) {
      label = 12;
      break;
    } else {
      var $det_1 = $add;
      label = 17;
      break;
    }
   case 12:
    HEAP32[$nearzero >> 2] = 1;
    var $det_1 = $add;
    label = 17;
    break;
   case 13:
    _qh_gausselim($rows, $dim, $dim, $sign, $nearzero);
    var $det_038 = 1;
    var $dec39_in = $dim;
    label = 14;
    break;
   case 14:
    var $dec39_in;
    var $det_038;
    var $dec39 = $dec39_in - 1 | 0;
    var $arrayidx73 = $rows + ($dec39 << 2) | 0;
    var $22 = HEAP32[$arrayidx73 >> 2];
    var $arrayidx74 = $22 + ($dec39 << 3) | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx74 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx74 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul75 = $det_038 * $23;
    var $tobool = ($dec39 | 0) == 0;
    if ($tobool) {
      label = 15;
      break;
    } else {
      var $det_038 = $mul75;
      var $dec39_in = $dec39;
      label = 14;
      break;
    }
   case 15:
    var $24 = HEAP32[$sign >> 2];
    var $tobool76 = ($24 | 0) == 0;
    if ($tobool76) {
      var $det_1 = $mul75;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $sub78 = -$mul75;
    var $det_1 = $sub78;
    label = 17;
    break;
   case 17:
    var $det_1;
    STACKTOP = __stackBase__;
    return $det_1;
  }
}
_qh_determinant["X"] = 1;
function _qh_detjoggle($points, $numpoints, $dimension) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp39 = ($dimension | 0) > 0;
    if ($cmp39) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[5247504 >> 2];
    var $maxabs_0_lcssa = -1.7976931348623157e+308;
    var $sumabs_0_lcssa = 0;
    var $4 = $_pre;
    label = 12;
    break;
   case 4:
    var $0 = HEAP32[5247388 >> 2];
    var $tobool = ($0 | 0) != 0;
    var $1 = HEAP32[5246996 >> 2];
    var $tobool2 = ($1 | 0) != 0;
    var $2 = HEAP32[5247504 >> 2];
    var $mul9 = $2 * $numpoints & -1;
    var $add_ptr = $points + ($mul9 << 3) | 0;
    var $cmp1134 = ($mul9 | 0) > 0;
    var $sub4 = $dimension - 1 | 0;
    var $maxabs_040 = -1.7976931348623157e+308;
    var $sumabs_042 = 0;
    var $maxwidth_043 = 0;
    var $k_044 = 0;
    label = 5;
    break;
   case 5:
    var $k_044;
    var $maxwidth_043;
    var $sumabs_042;
    var $maxabs_040;
    var $cmp1 = ($k_044 | 0) == ($sub4 | 0);
    var $or_cond = $tobool & $cmp1;
    if ($or_cond) {
      var $maxwidth_2 = $maxwidth_043;
      var $abscoord_0 = $maxwidth_043;
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $or_cond50 = $tobool2 & $cmp1;
    if ($or_cond50) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $mul = $maxabs_040 * 2;
    var $mul7 = $maxabs_040 * $mul;
    var $maxwidth_2 = $maxwidth_043;
    var $abscoord_0 = $mul7;
    label = 11;
    break;
   case 8:
    if ($cmp1134) {
      var $maxcoord_035 = -1.7976931348623157e+308;
      var $mincoord_036 = 1.7976931348623157e+308;
      var $point_037 = $points;
      label = 9;
      break;
    } else {
      var $maxcoord_0_lcssa = -1.7976931348623157e+308;
      var $mincoord_0_lcssa = 1.7976931348623157e+308;
      label = 10;
      break;
    }
   case 9:
    var $point_037;
    var $mincoord_036;
    var $maxcoord_035;
    var $arrayidx = $point_037 + ($k_044 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp13 = $maxcoord_035 < $3;
    var $maxcoord_1 = $cmp13 ? $3 : $maxcoord_035;
    var $cmp17 = $mincoord_036 > $3;
    var $mincoord_1 = $cmp17 ? $3 : $mincoord_036;
    var $add_ptr21 = $point_037 + ($2 << 3) | 0;
    var $cmp11 = $add_ptr21 >>> 0 < $add_ptr >>> 0;
    if ($cmp11) {
      var $maxcoord_035 = $maxcoord_1;
      var $mincoord_036 = $mincoord_1;
      var $point_037 = $add_ptr21;
      label = 9;
      break;
    } else {
      var $maxcoord_0_lcssa = $maxcoord_1;
      var $mincoord_0_lcssa = $mincoord_1;
      label = 10;
      break;
    }
   case 10:
    var $mincoord_0_lcssa;
    var $maxcoord_0_lcssa;
    var $sub22 = $maxcoord_0_lcssa - $mincoord_0_lcssa;
    var $cmp23 = $maxwidth_043 < $sub22;
    var $maxwidth_1 = $cmp23 ? $sub22 : $maxwidth_043;
    var $sub27 = -$mincoord_0_lcssa;
    var $cmp28 = $maxcoord_0_lcssa < $sub27;
    var $sub27_maxcoord_0 = $cmp28 ? $sub27 : $maxcoord_0_lcssa;
    var $maxwidth_2 = $maxwidth_1;
    var $abscoord_0 = $sub27_maxcoord_0;
    label = 11;
    break;
   case 11:
    var $abscoord_0;
    var $maxwidth_2;
    var $add = $sumabs_042 + $abscoord_0;
    var $cmp32 = $maxabs_040 < $abscoord_0;
    var $maxabs_1 = $cmp32 ? $abscoord_0 : $maxabs_040;
    var $inc = $k_044 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dimension | 0);
    if ($exitcond) {
      var $maxabs_0_lcssa = $maxabs_1;
      var $sumabs_0_lcssa = $add;
      var $4 = $2;
      label = 12;
      break;
    } else {
      var $maxabs_040 = $maxabs_1;
      var $sumabs_042 = $add;
      var $maxwidth_043 = $maxwidth_2;
      var $k_044 = $inc;
      label = 5;
      break;
    }
   case 12:
    var $4;
    var $sumabs_0_lcssa;
    var $maxabs_0_lcssa;
    var $call = _qh_distround($4, $maxabs_0_lcssa, $sumabs_0_lcssa);
    var $mul37 = $call * 3e4;
    var $cmp38 = $mul37 < 6.661338147750939e-12;
    var $joggle_0 = $cmp38 ? 6.661338147750939e-12 : $mul37;
    var $5 = HEAP32[5247036 >> 2];
    var $cmp41 = ($5 | 0) > 1;
    if ($cmp41) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5278272);
    label = 14;
    break;
   case 14:
    return $joggle_0;
  }
}
_qh_detjoggle["X"] = 1;
function _qh_distround($dimension, $maxabs, $maxsumabs) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $conv = $dimension | 0;
    var $call = Math.sqrt($conv);
    var $mul = $call * $maxabs;
    var $cmp = $mul > $maxsumabs;
    var $maxdistsum_0 = $cmp ? $maxsumabs : $mul;
    var $mul3 = $conv * $maxdistsum_0;
    var $mul4 = $mul3 * 1.01;
    var $add = $mul4 + $maxabs;
    var $mul5 = $add * 2.220446049250313e-16;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp6 = ($0 | 0) > 3;
    if ($cmp6) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5284276);
    label = 4;
    break;
   case 4:
    return $mul5;
  }
}
function _qh_divzero($numer, $denom, $mindenom1, $zerodiv) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = $numer < $mindenom1;
    var $sub = -$mindenom1;
    var $cmp1 = $numer > $sub;
    var $or_cond = $cmp & $cmp1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    var $cmp2 = $numer < 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      var $cond = $numer;
      label = 5;
      break;
    }
   case 4:
    var $sub3 = -$numer;
    var $cond = $sub3;
    label = 5;
    break;
   case 5:
    var $cond;
    var $cmp4 = $denom < 0;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      var $cond9 = $denom;
      label = 7;
      break;
    }
   case 6:
    var $sub6 = -$denom;
    var $cond9 = $sub6;
    label = 7;
    break;
   case 7:
    var $cond9;
    var $cmp10 = $cond < $cond9;
    if ($cmp10) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[$zerodiv >> 2] = 0;
    var $div = $numer / $denom;
    var $retval_0 = $div;
    label = 13;
    break;
   case 9:
    HEAP32[$zerodiv >> 2] = 1;
    var $retval_0 = 0;
    label = 13;
    break;
   case 10:
    var $div12 = $denom / $numer;
    var $cmp13 = $div12 > $mindenom1;
    var $cmp15 = $div12 < $sub;
    var $or_cond17 = $cmp13 | $cmp15;
    if ($or_cond17) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$zerodiv >> 2] = 0;
    var $div17 = $numer / $denom;
    var $retval_0 = $div17;
    label = 13;
    break;
   case 12:
    HEAP32[$zerodiv >> 2] = 1;
    var $retval_0 = 0;
    label = 13;
    break;
   case 13:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_distnorm($dim, $point, $normal, $offsetp_val) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool2 = ($dim | 0) == 0;
    if ($tobool2) {
      var $dist_0_lcssa = $offsetp_val;
      label = 4;
      break;
    } else {
      var $normalp_03 = $normal;
      var $coordp_04 = $point;
      var $dist_05 = $offsetp_val;
      var $k_06 = $dim;
      label = 3;
      break;
    }
   case 3:
    var $k_06;
    var $dist_05;
    var $coordp_04;
    var $normalp_03;
    var $dec = $k_06 - 1 | 0;
    var $incdec_ptr = $coordp_04 + 8 | 0;
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_04 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_04 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr1 = $normalp_03 + 8 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalp_03 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalp_03 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $0 * $1;
    var $add = $dist_05 + $mul;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $dist_0_lcssa = $add;
      label = 4;
      break;
    } else {
      var $normalp_03 = $incdec_ptr1;
      var $coordp_04 = $incdec_ptr;
      var $dist_05 = $add;
      var $k_06 = $dec;
      label = 3;
      break;
    }
   case 4:
    var $dist_0_lcssa;
    return $dist_0_lcssa;
  }
}
function _qh_detroundoff() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_option(5271956, 0, 5248656);
    var $0 = HEAP32[5247392 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $1 = HEAP32[5247504 >> 2];
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248648 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248652 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_distround($1, $2, $3);
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[5248624 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248628 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $4 = HEAP32[5247336 >> 2];
    var $tobool1 = ($4 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247340 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247344 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $5 * $6;
    var $add = $call + $mul;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5248624 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248628 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 5;
    break;
   case 5:
    _qh_option(5267064, 0, 5248624);
    label = 6;
    break;
   case 6:
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248664 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248668 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul4 = $7 * $8;
    HEAPF64[tempDoublePtr >> 3] = $mul4, HEAP32[5248672 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248676 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $9 = HEAP32[5247504 >> 2];
    var $conv = $9 | 0;
    var $mul5 = $7 * $conv;
    var $call6 = Math.sqrt($mul5);
    HEAPF64[tempDoublePtr >> 3] = $call6, HEAP32[5248680 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248684 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $mul7 = $call6 * $8;
    HEAPF64[tempDoublePtr >> 3] = $mul7, HEAP32[5248688 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248692 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $mul9 = $conv * 1.01;
    var $mul10 = $mul9 * 2.220446049250313e-16;
    HEAPF64[tempDoublePtr >> 3] = $mul10, HEAP32[5248600 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248604 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $10 = HEAP32[5247336 >> 2];
    var $tobool11 = ($10 | 0) == 0;
    if ($tobool11) {
      var $12 = $mul10;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247340 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247344 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add13 = $mul10 + $11;
    HEAPF64[tempDoublePtr >> 3] = $add13, HEAP32[5248600 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248604 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $12 = $add13;
    label = 8;
    break;
   case 8:
    var $12;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $13 < 8.988465674311579e+307;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $sub = $13 - $12;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[5246980 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246984 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($tobool11) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_option(5263236, 0, 5246980);
    label = 11;
    break;
   case 11:
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246988 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246992 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp21 = $14 < 8.988465674311579e+307;
    if ($cmp21) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248600 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248604 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub24 = $14 - $15;
    HEAPF64[tempDoublePtr >> 3] = $sub24, HEAP32[5246988 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246992 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $16 = HEAP32[5247336 >> 2];
    var $tobool25 = ($16 | 0) == 0;
    if ($tobool25) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_option(5259192, 0, 5246988);
    label = 14;
    break;
   case 14:
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul29 = $17 * 2;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add30 = $18 + $mul29;
    HEAPF64[tempDoublePtr >> 3] = $add30, HEAP32[5247084 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247088 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247092 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247096 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add32 = $19 + $mul29;
    HEAPF64[tempDoublePtr >> 3] = $add32, HEAP32[5247092 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247096 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $20 = HEAP32[5247336 >> 2];
    var $tobool33 = ($20 | 0) == 0;
    if ($tobool33) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $21 = HEAP32[5247072 >> 2];
    var $22 = HEAP32[5247140 >> 2];
    var $23 = $22 | $21;
    var $24 = ($23 | 0) == 0;
    if ($24) {
      var $25 = $20;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _qh_option(5256068, 0, 5247084);
    var $_pre = HEAP32[5247336 >> 2];
    var $25 = $_pre;
    label = 17;
    break;
   case 17:
    var $25;
    var $tobool38 = ($25 | 0) != 0;
    var $26 = HEAP32[5247136 >> 2];
    var $tobool40 = ($26 | 0) != 0;
    var $or_cond1 = $tobool38 & $tobool40;
    if ($or_cond1) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    _qh_option(5253264, 0, 5247092);
    label = 19;
    break;
   case 19:
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp43 = $27 < 1;
    var $maxangle_0 = $cmp43 ? $27 : 1;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246988 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246992 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp47 = $maxangle_0 > $28;
    var $maxangle_1 = $cmp47 ? $28 : $maxangle_0;
    var $29 = HEAP32[5247504 >> 2];
    var $conv51 = $29 | 0;
    var $call52 = Math.sqrt($conv51);
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul53 = $call52 * $30;
    var $mul54 = $maxangle_1 * $maxangle_1;
    var $sub55 = 1 - $mul54;
    var $call56 = Math.sqrt($sub55);
    var $mul57 = $mul53 * $call56;
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add58 = $mul57 + $31;
    HEAPF64[tempDoublePtr >> 3] = $add58, HEAP32[5248720 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248724 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60 = $conv51 * $32;
    var $add61 = $mul60 + $31;
    var $cmp62 = $add58 < $add61;
    if ($cmp62) {
      label = 20;
      break;
    } else {
      var $33 = $add58;
      label = 21;
      break;
    }
   case 20:
    HEAPF64[tempDoublePtr >> 3] = $add61, HEAP32[5248720 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248724 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $33 = $add61;
    label = 21;
    break;
   case 21:
    var $33;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247092 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247096 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul67 = $conv51 * $34;
    var $add68 = $mul67 + $31;
    var $cmp69 = $33 < $add68;
    if ($cmp69) {
      label = 22;
      break;
    } else {
      var $35 = $33;
      label = 23;
      break;
    }
   case 22:
    HEAPF64[tempDoublePtr >> 3] = $add68, HEAP32[5248720 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248724 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $35 = $add68;
    label = 23;
    break;
   case 23:
    var $35;
    var $36 = HEAP32[5247080 >> 2];
    var $tobool73 = ($36 | 0) == 0;
    if ($tobool73) {
      var $37 = $35;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_option(5250592, 0, 5248720);
    var $_pre1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248720 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248724 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $37 = $_pre1;
    label = 25;
    break;
   case 25:
    var $37;
    var $mul76 = $37 * 5;
    HEAPF64[tempDoublePtr >> 3] = $mul76, HEAP32[5248712 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248716 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp77 = $38 < 8.988465674311579e+307;
    if ($cmp77) {
      label = 26;
      break;
    } else {
      label = 29;
      break;
    }
   case 26:
    var $39 = HEAP32[5247044 >> 2];
    var $40 = HEAP32[5247048 >> 2];
    var $41 = $40 | $39;
    var $42 = ($41 | 0) == 0;
    if ($42) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    HEAP32[5247500 >> 2] = 1;
    var $43 = HEAP32[5247504 >> 2];
    var $conv84 = $43 | 0;
    var $call85 = Math.sqrt($conv84);
    var $mul86 = $call85 * $38;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add87 = $mul86 + $44;
    var $mul88 = $add87 * 2;
    var $cmp89 = $mul76 < $mul88;
    if ($cmp89) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAPF64[tempDoublePtr >> 3] = $mul88, HEAP32[5248712 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248716 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 29;
    break;
   case 29:
    var $45 = HEAP32[5247500 >> 2];
    var $tobool94 = ($45 | 0) == 0;
    if ($tobool94) {
      var $46 = $38;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    _qh_option(5300980, 0, 5248712);
    var $_pre2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $46 = $_pre2;
    label = 31;
    break;
   case 31:
    var $46;
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp97 = $46 < $47;
    if ($cmp97) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5298588);
    _qh_errexit(1, 0, 0);
    label = 33;
    break;
   case 33:
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp101 = $48 > 8.988465674311579e+307;
    if ($cmp101) {
      label = 34;
      break;
    } else {
      label = 43;
      break;
    }
   case 34:
    var $49 = HEAP32[5247080 >> 2];
    var $tobool104 = ($49 | 0) == 0;
    if ($tobool104) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $50, HEAP32[5247104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $53 = $50;
    label = 39;
    break;
   case 36:
    var $51 = HEAP32[5247504 >> 2];
    var $cmp106 = ($51 | 0) < 4;
    var $52 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($cmp106) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAPF64[tempDoublePtr >> 3] = $52, HEAP32[5247104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $53 = $52;
    label = 39;
    break;
   case 38:
    var $mul110 = $52 * 3;
    HEAPF64[tempDoublePtr >> 3] = $mul110, HEAP32[5247104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $53 = $mul110;
    label = 39;
    break;
   case 39:
    var $53;
    var $54 = HEAP32[5246940 >> 2];
    var $tobool113 = ($54 | 0) == 0;
    if ($tobool113) {
      label = 42;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp115 = $53 > $55;
    if ($cmp115) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAPF64[tempDoublePtr >> 3] = $55, HEAP32[5247104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 42;
    break;
   case 42:
    _qh_option(5296244, 0, 5247104);
    label = 43;
    break;
   case 43:
    var $56 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp120 = $56 > 8.988465674311579e+307;
    if ($cmp120) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $57, HEAP32[5247064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_option(5294712, 0, 5247064);
    label = 45;
    break;
   case 45:
    var $58 = HEAP32[5246940 >> 2];
    var $tobool124 = ($58 | 0) == 0;
    if ($tobool124) {
      label = 46;
      break;
    } else {
      label = 50;
      break;
    }
   case 46:
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul126 = $59 * 2;
    HEAPF64[tempDoublePtr >> 3] = $mul126, HEAP32[5246944 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246948 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp127 = $60 < 8.988465674311579e+307;
    if ($cmp127) {
      label = 47;
      break;
    } else {
      label = 49;
      break;
    }
   case 47:
    var $sub130 = 1 - $60;
    var $61 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul131 = $sub130 * $61;
    var $cmp132 = $mul126 < $mul131;
    if ($cmp132) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    HEAPF64[tempDoublePtr >> 3] = $mul131, HEAP32[5246944 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246948 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 49;
    break;
   case 49:
    _qh_option(5292888, 0, 5246944);
    label = 50;
    break;
   case 50:
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $62, HEAP32[5248736 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248740 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul140 = $63 * 6;
    var $cmp141 = $62 < $mul140;
    if ($cmp141) {
      label = 51;
      break;
    } else {
      var $64 = $62;
      label = 52;
      break;
    }
   case 51:
    HEAPF64[tempDoublePtr >> 3] = $mul140, HEAP32[5248736 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248740 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $64 = $mul140;
    label = 52;
    break;
   case 52:
    var $64;
    var $65 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul146 = $65 * 6;
    var $cmp147 = $64 < $mul146;
    if ($cmp147) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    HEAPF64[tempDoublePtr >> 3] = $mul146, HEAP32[5248736 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248740 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 54;
    break;
   case 54:
    _qh_option(5291228, 0, 5248736);
    var $66 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add152 = $67 + 6.661338147750939e-16;
    var $cmp153 = $66 <= $add152;
    var $68 = HEAP32[5246964 >> 2];
    var $tobool156 = ($68 | 0) != 0;
    var $or_cond3 = $cmp153 | $tobool156;
    var $69 = HEAP32[5247008 >> 2];
    var $tobool158 = ($69 | 0) != 0;
    var $or_cond4 = $or_cond3 | $tobool158;
    if ($or_cond4) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    _qh_fprintf(5290004);
    label = 56;
    break;
   case 56:
    var $70 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $70, HEAP32[5249072 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249076 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub161 = -$70;
    HEAPF64[tempDoublePtr >> 3] = $sub161, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    return;
  }
}
_qh_detroundoff["X"] = 1;
function _qh_detsimplex($apex, $points, $dim, $nearzero) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5243392 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5243392 >> 2] = $inc;
    var $1 = HEAP32[5249192 >> 2];
    var $tobool = ($points | 0) == 0;
    if ($tobool) {
      var $i_1 = 0;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $points + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool121 = ($2 | 0) == 0;
    var $cmp22 = ($dim | 0) == 0;
    var $or_cond23 = $tobool121 | $cmp22;
    if ($or_cond23) {
      var $i_1 = 0;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $2;
    var $incdec_ptr2028 = $p + 4 | 0;
    var $incdec_ptr20 = $incdec_ptr2028;
    var $4 = HEAP32[5249188 >> 2];
    var $gmcoord_024 = $4;
    var $i_025 = 0;
    var $incdec_ptr26 = $incdec_ptr20;
    var $6 = $3;
    label = 6;
    break;
   case 5:
    var $scevgep = $gmcoord_024 + ($dim << 3) | 0;
    var $incdec_ptr = $incdec_ptr26 + 4 | 0;
    var $5 = HEAP32[$incdec_ptr26 >> 2];
    var $tobool1 = ($5 | 0) == 0;
    var $cmp = ($inc3 | 0) == ($dim | 0);
    var $or_cond = $tobool1 | $cmp;
    if ($or_cond) {
      var $i_1 = $inc3;
      label = 8;
      break;
    } else {
      var $gmcoord_024 = $scevgep;
      var $i_025 = $inc3;
      var $incdec_ptr26 = $incdec_ptr;
      var $6 = $5;
      label = 6;
      break;
    }
   case 6:
    var $6;
    var $incdec_ptr26;
    var $i_025;
    var $gmcoord_024;
    var $inc3 = $i_025 + 1 | 0;
    var $arrayidx4 = $1 + ($i_025 << 2) | 0;
    HEAP32[$arrayidx4 >> 2] = $gmcoord_024;
    var $gmcoord_116 = $gmcoord_024;
    var $coordp_017 = $6;
    var $k_018 = $dim;
    var $coorda_019 = $apex;
    label = 7;
    break;
   case 7:
    var $coorda_019;
    var $k_018;
    var $coordp_017;
    var $gmcoord_116;
    var $dec = $k_018 - 1 | 0;
    var $incdec_ptr8 = $coordp_017 + 8 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_017 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_017 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr9 = $coorda_019 + 8 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coorda_019 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coorda_019 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $7 - $8;
    var $incdec_ptr10 = $gmcoord_116 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$gmcoord_116 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_116 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool6 = ($dec | 0) == 0;
    if ($tobool6) {
      label = 5;
      break;
    } else {
      var $gmcoord_116 = $incdec_ptr10;
      var $coordp_017 = $incdec_ptr8;
      var $k_018 = $dec;
      var $coorda_019 = $incdec_ptr9;
      label = 7;
      break;
    }
   case 8:
    var $i_1;
    var $cmp13 = ($i_1 | 0) < ($dim | 0);
    if ($cmp13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5288196);
    _qh_errexit(5, 0, 0);
    label = 10;
    break;
   case 10:
    var $call = _qh_determinant($1, $dim, $nearzero);
    var $9 = HEAP32[5247036 >> 2];
    var $cmp16 = ($9 | 0) > 1;
    if ($cmp16) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _qh_fprintf(5286468);
    label = 12;
    break;
   case 12:
    return $call;
  }
}
_qh_detsimplex["X"] = 1;
function _qh_facetarea($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 8192;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $vertices = $facet + 48 | 0;
    var $3 = HEAP32[$vertices >> 2];
    var $p = $3 + 4 | 0;
    var $4 = HEAP32[$p >> 2];
    var $5 = $4;
    var $6 = HEAP32[5247504 >> 2];
    var $point = $4 + 8 | 0;
    var $7 = $point;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $2 >>> 12;
    var $bf_clear3 = $9 & 1;
    var $normal = $facet + 24 | 0;
    var $10 = HEAP32[$normal >> 2];
    var $offset = $facet + 16 | 0;
    var $call = _qh_facetarea_simplex($6, $8, $3, $5, $bf_clear3, $10, $offset);
    var $area_2 = $call;
    label = 13;
    break;
   case 4:
    var $11 = HEAP32[5249032 >> 2];
    var $cmp = ($11 | 0) == 2;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $center = $facet + 36 | 0;
    var $12 = HEAP32[$center >> 2];
    var $centrum_0 = $12;
    label = 7;
    break;
   case 6:
    var $call6 = _qh_getcentrum($facet);
    var $centrum_0 = $call6;
    label = 7;
    break;
   case 7:
    var $centrum_0;
    var $ridges = $facet + 52 | 0;
    var $13 = HEAP32[$ridges >> 2];
    var $tobool7 = ($13 | 0) == 0;
    if ($tobool7) {
      var $area_1 = 0;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p12 = $13 + 4 | 0;
    var $14 = HEAP32[$p12 >> 2];
    var $tobool1320 = ($14 | 0) == 0;
    if ($tobool1320) {
      var $area_1 = 0;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $15 = $14;
    var $16 = $p12;
    var $normal16 = $facet + 24 | 0;
    var $offset17 = $facet + 16 | 0;
    var $area_021 = 0;
    var $ridgep_022 = $16;
    var $17 = $15;
    label = 10;
    break;
   case 10:
    var $17;
    var $ridgep_022;
    var $area_021;
    var $incdec_ptr = $ridgep_022 + 4 | 0;
    var $18 = HEAP32[5247504 >> 2];
    var $vertices14 = $17 | 0;
    var $19 = HEAP32[$vertices14 >> 2];
    var $top = $17 + 4 | 0;
    var $20 = HEAP32[$top >> 2];
    var $cmp15 = ($20 | 0) == ($facet | 0);
    var $conv = $cmp15 & 1;
    var $21 = HEAP32[$normal16 >> 2];
    var $call18 = _qh_facetarea_simplex($18, $centrum_0, $19, 0, $conv, $21, $offset17);
    var $add = $area_021 + $call18;
    var $22 = HEAP32[$incdec_ptr >> 2];
    var $tobool13 = ($22 | 0) == 0;
    if ($tobool13) {
      var $area_1 = $add;
      label = 11;
      break;
    } else {
      var $area_021 = $add;
      var $ridgep_022 = $incdec_ptr;
      var $17 = $22;
      label = 10;
      break;
    }
   case 11:
    var $area_1;
    var $23 = HEAP32[5249032 >> 2];
    var $cmp20 = ($23 | 0) == 2;
    if ($cmp20) {
      var $area_2 = $area_1;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $24 = $centrum_0;
    var $25 = HEAP32[5248928 >> 2];
    _qh_memfree($24, $25);
    var $area_2 = $area_1;
    label = 13;
    break;
   case 13:
    var $area_2;
    var $26 = HEAP32[$1 >> 2];
    var $bf_clear26 = $26 & 131072;
    var $tobool27 = ($bf_clear26 | 0) != 0;
    var $27 = HEAP32[5246996 >> 2];
    var $tobool28 = ($27 | 0) != 0;
    var $or_cond = $tobool27 & $tobool28;
    if ($or_cond) {
      label = 14;
      break;
    } else {
      var $area_3 = $area_2;
      label = 15;
      break;
    }
   case 14:
    var $sub = -$area_2;
    var $area_3 = $sub;
    label = 15;
    break;
   case 15:
    var $area_3;
    var $28 = HEAP32[5247036 >> 2];
    var $cmp31 = ($28 | 0) > 3;
    if ($cmp31) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5282076);
    label = 17;
    break;
   case 17:
    return $area_3;
  }
}
_qh_facetarea["X"] = 1;
function _qh_facetarea_simplex($dim, $apex, $vertices, $notvertex, $toporient, $normal, $offset) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $nearzero = __stackBase__;
    var $0 = HEAP32[5249188 >> 2];
    var $1 = HEAP32[5249192 >> 2];
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      var $i_1 = 0;
      var $gmcoord_3 = $0;
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $2 = $p;
    var $tobool4 = ($notvertex | 0) == 0;
    var $tobool1462 = ($dim | 0) == 0;
    var $vertexp_0_ph_ph = $2;
    var $i_0_ph_ph = 0;
    var $gmcoord_0_ph_ph = $0;
    label = 5;
    break;
   case 4:
    var $gmcoord_0_ph_ph_be = $gmcoord_0_ph_ph + ($dim << 3) | 0;
    var $vertexp_0_ph_ph = $incdec_ptr;
    var $i_0_ph_ph = $inc;
    var $gmcoord_0_ph_ph = $gmcoord_0_ph_ph_be;
    label = 5;
    break;
   case 5:
    var $gmcoord_0_ph_ph;
    var $i_0_ph_ph;
    var $vertexp_0_ph_ph;
    var $vertexp_0_ph = $vertexp_0_ph_ph;
    var $i_0_ph = $i_0_ph_ph;
    label = 6;
    break;
   case 6:
    var $i_0_ph;
    var $vertexp_0_ph;
    var $vertexp_0 = $vertexp_0_ph;
    label = 7;
    break;
   case 7:
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $3 = HEAP32[$vertexp_0 >> 2];
    var $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      var $i_1 = $i_0_ph;
      var $gmcoord_3 = $gmcoord_0_ph_ph;
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $cmp = ($3 | 0) == ($notvertex | 0);
    if ($cmp) {
      var $vertexp_0 = $incdec_ptr;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $inc = $i_0_ph + 1 | 0;
    var $arrayidx3 = $1 + ($i_0_ph << 2) | 0;
    HEAP32[$arrayidx3 >> 2] = $gmcoord_0_ph_ph;
    var $point = $3 + 8 | 0;
    var $4 = HEAP32[$point >> 2];
    if ($tobool4) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    if ($tobool1462) {
      var $vertexp_0_ph = $incdec_ptr;
      var $i_0_ph = $inc;
      label = 6;
      break;
    } else {
      var $coorda_058 = $apex;
      var $coordp_059 = $4;
      var $gmcoord_160 = $gmcoord_0_ph_ph;
      var $k_061 = $dim;
      label = 11;
      break;
    }
   case 11:
    var $k_061;
    var $gmcoord_160;
    var $coordp_059;
    var $coorda_058;
    var $dec = $k_061 - 1 | 0;
    var $incdec_ptr9 = $coordp_059 + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_059 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_059 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr10 = $coorda_058 + 8 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coorda_058 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coorda_058 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $5 - $6;
    var $incdec_ptr11 = $gmcoord_160 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$gmcoord_160 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_160 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool7 = ($dec | 0) == 0;
    if ($tobool7) {
      label = 4;
      break;
    } else {
      var $coorda_058 = $incdec_ptr10;
      var $coordp_059 = $incdec_ptr9;
      var $gmcoord_160 = $incdec_ptr11;
      var $k_061 = $dec;
      label = 11;
      break;
    }
   case 12:
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool1462) {
      var $dist_0_lcssa = $7;
      label = 14;
      break;
    } else {
      var $coordp_163 = $4;
      var $normalp_064 = $normal;
      var $k_165 = $dim;
      var $dist_066 = $7;
      label = 13;
      break;
    }
   case 13:
    var $dist_066;
    var $k_165;
    var $normalp_064;
    var $coordp_163;
    var $dec13 = $k_165 - 1 | 0;
    var $incdec_ptr16 = $coordp_163 + 8 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_163 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_163 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr17 = $normalp_064 + 8 | 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalp_064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalp_064 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $8 * $9;
    var $add = $dist_066 + $mul;
    var $tobool14 = ($dec13 | 0) == 0;
    if ($tobool14) {
      var $dist_0_lcssa = $add;
      label = 14;
      break;
    } else {
      var $coordp_163 = $incdec_ptr16;
      var $normalp_064 = $incdec_ptr17;
      var $k_165 = $dec13;
      var $dist_066 = $add;
      label = 13;
      break;
    }
   case 14:
    var $dist_0_lcssa;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248736 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248740 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub19 = -$10;
    var $cmp20 = $dist_0_lcssa < $sub19;
    if ($cmp20) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $11 = HEAP32[5244152 >> 2];
    var $inc22 = $11 + 1 | 0;
    HEAP32[5244152 >> 2] = $inc22;
    var $retval_0 = 0;
    label = 32;
    break;
   case 16:
    if ($tobool1462) {
      var $vertexp_0_ph = $incdec_ptr;
      var $i_0_ph = $inc;
      label = 6;
      break;
    } else {
      var $coorda_170 = $apex;
      var $coordp_271 = $4;
      var $gmcoord_272 = $gmcoord_0_ph_ph;
      var $normalp_173 = $normal;
      var $k_274 = $dim;
      label = 17;
      break;
    }
   case 17:
    var $k_274;
    var $normalp_173;
    var $gmcoord_272;
    var $coordp_271;
    var $coorda_170;
    var $dec26 = $k_274 - 1 | 0;
    var $incdec_ptr29 = $coordp_271 + 8 | 0;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_271 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_271 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr30 = $normalp_173 + 8 | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalp_173 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalp_173 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul31 = $dist_0_lcssa * $13;
    var $sub32 = $12 - $mul31;
    var $incdec_ptr33 = $coorda_170 + 8 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coorda_170 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coorda_170 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub34 = $sub32 - $14;
    var $incdec_ptr35 = $gmcoord_272 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub34, HEAP32[$gmcoord_272 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_272 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool27 = ($dec26 | 0) == 0;
    if ($tobool27) {
      label = 4;
      break;
    } else {
      var $coorda_170 = $incdec_ptr33;
      var $coordp_271 = $incdec_ptr29;
      var $gmcoord_272 = $incdec_ptr35;
      var $normalp_173 = $incdec_ptr30;
      var $k_274 = $dec26;
      label = 17;
      break;
    }
   case 18:
    var $gmcoord_3;
    var $i_1;
    var $gmcoord_381 = $gmcoord_3;
    var $sub40 = $dim - 1 | 0;
    var $cmp41 = ($i_1 | 0) == ($sub40 | 0);
    if ($cmp41) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _qh_fprintf(5279924);
    _qh_errexit(5, 0, 0);
    label = 20;
    break;
   case 20:
    var $arrayidx44 = $1 + ($i_1 << 2) | 0;
    HEAP32[$arrayidx44 >> 2] = $gmcoord_3;
    var $15 = HEAP32[5246996 >> 2];
    var $tobool45 = ($15 | 0) == 0;
    if ($tobool45) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $cmp4955 = ($sub40 | 0) > 0;
    if ($cmp4955) {
      var $i_256 = 0;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $tobool6948 = ($dim | 0) == 0;
    if ($tobool6948) {
      label = 28;
      break;
    } else {
      var $gmcoord_549 = $gmcoord_3;
      var $normalp_250 = $normal;
      var $k_451 = $dim;
      label = 27;
      break;
    }
   case 23:
    var $tobool5852 = ($dim | 0) == 0;
    if ($tobool5852) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $i_256;
    var $arrayidx52 = $1 + ($i_256 << 2) | 0;
    var $16 = HEAP32[$arrayidx52 >> 2];
    var $arrayidx53 = $16 + ($sub40 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx53 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx53 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc54 = $i_256 + 1 | 0;
    var $exitcond = ($inc54 | 0) == ($sub40 | 0);
    if ($exitcond) {
      label = 23;
      break;
    } else {
      var $i_256 = $inc54;
      label = 24;
      break;
    }
   case 25:
    var $17 = $dim << 3;
    _memset($gmcoord_381, 0, $17);
    label = 26;
    break;
   case 26:
    var $arrayidx64 = $1 + ($sub40 << 2) | 0;
    var $18 = HEAP32[$arrayidx64 >> 2];
    var $arrayidx65 = $18 + ($sub40 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = -1, HEAP32[$arrayidx65 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx65 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 28;
    break;
   case 27:
    var $k_451;
    var $normalp_250;
    var $gmcoord_549;
    var $dec68 = $k_451 - 1 | 0;
    var $incdec_ptr71 = $normalp_250 + 8 | 0;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalp_250 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalp_250 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr72 = $gmcoord_549 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $19, HEAP32[$gmcoord_549 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_549 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool69 = ($dec68 | 0) == 0;
    if ($tobool69) {
      label = 28;
      break;
    } else {
      var $gmcoord_549 = $incdec_ptr72;
      var $normalp_250 = $incdec_ptr71;
      var $k_451 = $dec68;
      label = 27;
      break;
    }
   case 28:
    var $20 = HEAP32[5243392 >> 2];
    var $inc75 = $20 + 1 | 0;
    HEAP32[5243392 >> 2] = $inc75;
    var $call = _qh_determinant($1, $dim, $nearzero);
    var $tobool76 = ($toporient | 0) == 0;
    if ($tobool76) {
      var $area_0 = $call;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $sub78 = -$call;
    var $area_0 = $sub78;
    label = 30;
    break;
   case 30:
    var $area_0;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247476 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247480 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul80 = $area_0 * $21;
    var $22 = HEAP32[5247036 >> 2];
    var $cmp81 = ($22 | 0) > 3;
    if ($cmp81) {
      label = 31;
      break;
    } else {
      var $retval_0 = $mul80;
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5279172);
    var $retval_0 = $mul80;
    label = 32;
    break;
   case 32:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_facetarea_simplex["X"] = 1;
function _qh_facetcenter($vertices) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $points = __stackBase__;
    var $call = _qh_setsize($vertices);
    var $call1 = _qh_settemp($call);
    HEAP32[$points >> 2] = $call1;
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      var $7 = $call1;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool23 = ($0 | 0) == 0;
    if ($tobool23) {
      var $7 = $call1;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $0;
    var $2 = $p;
    var $vertexp_04 = $2;
    var $3 = $1;
    label = 5;
    break;
   case 5:
    var $3;
    var $vertexp_04;
    var $incdec_ptr = $vertexp_04 + 4 | 0;
    var $point = $3 + 8 | 0;
    var $4 = HEAP32[$point >> 2];
    var $5 = $4;
    _qh_setappend($points, $5);
    var $6 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($6 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      var $vertexp_04 = $incdec_ptr;
      var $3 = $6;
      label = 5;
      break;
    }
   case 6:
    var $_pre = HEAP32[$points >> 2];
    var $7 = $_pre;
    label = 7;
    break;
   case 7:
    var $7;
    var $8 = HEAP32[5247504 >> 2];
    var $sub = $8 - 1 | 0;
    var $call3 = _qh_voronoi_center($sub, $7);
    _qh_settempfree($points);
    STACKTOP = __stackBase__;
    return $call3;
  }
}
function _qh_inthresholds($normal, $angle) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($angle | 0) != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 4;
    break;
   case 4:
    var $0 = HEAP32[5247504 >> 2];
    var $cmp25 = ($0 | 0) > 0;
    if ($cmp25) {
      var $within_026 = 1;
      var $k_027 = 0;
      label = 5;
      break;
    } else {
      var $within_0_lcssa = 1;
      label = 16;
      break;
    }
   case 5:
    var $k_027;
    var $within_026;
    var $1 = HEAP32[5248588 >> 2];
    var $arrayidx = $1 + ($k_027 << 3) | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp1 = $2 > -8.988465674311579e+307;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      var $within_2 = $within_026;
      label = 10;
      break;
    }
   case 6:
    var $arrayidx3 = $normal + ($k_027 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp4 = $3 < $2;
    var $within_1 = $cmp4 ? 0 : $within_026;
    if ($tobool) {
      label = 7;
      break;
    } else {
      var $within_2 = $within_1;
      label = 10;
      break;
    }
   case 7:
    var $sub = $2 - $3;
    var $cmp10 = $sub < 0;
    if ($cmp10) {
      label = 8;
      break;
    } else {
      var $cond = $sub;
      label = 9;
      break;
    }
   case 8:
    var $sub11 = -$sub;
    var $cond = $sub11;
    label = 9;
    break;
   case 9:
    var $cond;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $cond + $4;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $within_2 = $within_1;
    label = 10;
    break;
   case 10:
    var $within_2;
    var $5 = HEAP32[5248584 >> 2];
    var $arrayidx14 = $5 + ($k_027 << 3) | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx14 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx14 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp15 = $6 < 8.988465674311579e+307;
    if ($cmp15) {
      label = 11;
      break;
    } else {
      var $within_4 = $within_2;
      label = 15;
      break;
    }
   case 11:
    var $arrayidx18 = $normal + ($k_027 << 3) | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp19 = $7 > $6;
    var $within_3 = $cmp19 ? 0 : $within_2;
    if ($tobool) {
      label = 12;
      break;
    } else {
      var $within_4 = $within_3;
      label = 15;
      break;
    }
   case 12:
    var $sub25 = $6 - $7;
    var $cmp26 = $sub25 < 0;
    if ($cmp26) {
      label = 13;
      break;
    } else {
      var $cond31 = $sub25;
      label = 14;
      break;
    }
   case 13:
    var $sub28 = -$sub25;
    var $cond31 = $sub28;
    label = 14;
    break;
   case 14:
    var $cond31;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add32 = $cond31 + $8;
    HEAPF64[tempDoublePtr >> 3] = $add32, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $within_4 = $within_3;
    label = 15;
    break;
   case 15:
    var $within_4;
    var $inc = $k_027 + 1 | 0;
    var $9 = HEAP32[5247504 >> 2];
    var $cmp = ($inc | 0) < ($9 | 0);
    if ($cmp) {
      var $within_026 = $within_4;
      var $k_027 = $inc;
      label = 5;
      break;
    } else {
      var $within_0_lcssa = $within_4;
      label = 16;
      break;
    }
   case 16:
    var $within_0_lcssa;
    return $within_0_lcssa;
  }
}
_qh_inthresholds["X"] = 1;
function _qh_voronoi_center($dim, $points) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $simplex = __stackBase__;
    var $nearzero = __stackBase__ + 4;
    var $infinite = __stackBase__ + 8;
    var $0 = HEAP32[5248932 >> 2];
    var $call = _qh_memalloc($0);
    var $1 = $call;
    var $call1 = _qh_setsize($points);
    var $add = $dim + 1 | 0;
    var $cmp = ($call1 | 0) == ($add | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[$simplex >> 2] = $points;
    var $2 = $points;
    label = 7;
    break;
   case 4:
    var $cmp3 = ($call1 | 0) < ($add | 0);
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5256488);
    _qh_errexit(5, 0, 0);
    HEAP32[$simplex >> 2] = $points;
    var $2 = $points;
    label = 7;
    break;
   case 6:
    var $call8 = _qh_settemp($add);
    HEAP32[$simplex >> 2] = $call8;
    _qh_maxsimplex($dim, $points, 0, 0, $simplex);
    var $_pre = HEAP32[$simplex >> 2];
    var $2 = $_pre;
    label = 7;
    break;
   case 7:
    var $2;
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $4 = $3;
    var $5 = HEAP32[5249188 >> 2];
    var $cmp1094 = ($dim | 0) > 0;
    if ($cmp1094) {
      var $k_095 = 0;
      var $gmcoord_096 = $5;
      label = 8;
      break;
    } else {
      var $gmcoord_0_lcssa112 = $5;
      label = 18;
      break;
    }
   case 8:
    var $gmcoord_096;
    var $k_095;
    var $6 = HEAP32[5249192 >> 2];
    var $arrayidx11 = $6 + ($k_095 << 2) | 0;
    HEAP32[$arrayidx11 >> 2] = $gmcoord_096;
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      var $gmcoord_2 = $gmcoord_096;
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $7 = $p;
    var $arrayidx22 = $4 + ($k_095 << 3) | 0;
    var $pointp_0_ph = $7;
    var $gmcoord_1_ph = $gmcoord_096;
    label = 10;
    break;
   case 10:
    var $gmcoord_1_ph;
    var $pointp_0_ph;
    var $pointp_0 = $pointp_0_ph;
    label = 11;
    break;
   case 11:
    var $pointp_0;
    var $incdec_ptr = $pointp_0 + 4 | 0;
    var $8 = HEAP32[$pointp_0 >> 2];
    var $tobool17 = ($8 | 0) == 0;
    if ($tobool17) {
      var $gmcoord_2 = $gmcoord_1_ph;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $cmp19 = ($8 | 0) == ($4 | 0);
    if ($cmp19) {
      var $pointp_0 = $incdec_ptr;
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $arrayidx21 = $8 + ($k_095 << 3) | 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx21 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx21 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $9 - $10;
    var $incdec_ptr23 = $gmcoord_1_ph + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$gmcoord_1_ph >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_1_ph + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $pointp_0_ph = $incdec_ptr;
    var $gmcoord_1_ph = $incdec_ptr23;
    label = 10;
    break;
   case 14:
    var $gmcoord_2;
    var $inc = $k_095 + 1 | 0;
    var $exitcond110 = ($inc | 0) == ($dim | 0);
    if ($exitcond110) {
      var $gmcoord_389 = $gmcoord_2;
      var $i_090 = 0;
      label = 15;
      break;
    } else {
      var $k_095 = $inc;
      var $gmcoord_096 = $gmcoord_2;
      label = 8;
      break;
    }
   case 15:
    var $i_090;
    var $gmcoord_389;
    var $11 = HEAP32[5249192 >> 2];
    var $k_185 = 0;
    var $sum2_086 = 0;
    label = 16;
    break;
   case 16:
    var $sum2_086;
    var $k_185;
    var $arrayidx33 = $11 + ($k_185 << 2) | 0;
    var $12 = HEAP32[$arrayidx33 >> 2];
    var $add_ptr = $12 + ($i_090 << 3) | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$add_ptr >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$add_ptr + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $13 * $13;
    var $add34 = $sum2_086 + $mul;
    var $inc36 = $k_185 + 1 | 0;
    var $exitcond105 = ($inc36 | 0) == ($dim | 0);
    if ($exitcond105) {
      label = 17;
      break;
    } else {
      var $k_185 = $inc36;
      var $sum2_086 = $add34;
      label = 16;
      break;
    }
   case 17:
    var $incdec_ptr38 = $gmcoord_389 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add34, HEAP32[$gmcoord_389 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_389 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc40 = $i_090 + 1 | 0;
    var $exitcond106 = ($inc40 | 0) == ($dim | 0);
    if ($exitcond106) {
      var $gmcoord_0_lcssa112 = $gmcoord_2;
      label = 18;
      break;
    } else {
      var $gmcoord_389 = $incdec_ptr38;
      var $i_090 = $inc40;
      label = 15;
      break;
    }
   case 18:
    var $gmcoord_0_lcssa112;
    var $14 = HEAP32[5249192 >> 2];
    var $call42 = _qh_determinant($14, $dim, $nearzero);
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248672 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248676 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call43 = _qh_divzero(.5, $call42, $15, $infinite);
    var $16 = HEAP32[$infinite >> 2];
    var $tobool44 = ($16 | 0) == 0;
    if ($tobool44) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $tobool4782 = ($dim | 0) == 0;
    if ($tobool4782) {
      label = 22;
      break;
    } else {
      var $dec83_in = $dim;
      label = 21;
      break;
    }
   case 20:
    if ($cmp1094) {
      var $i_180 = 0;
      var $18 = $2;
      label = 24;
      break;
    } else {
      var $31 = $2;
      label = 37;
      break;
    }
   case 21:
    var $dec83_in;
    var $dec83 = $dec83_in - 1 | 0;
    var $arrayidx49 = $1 + ($dec83 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = -10.101, HEAP32[$arrayidx49 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx49 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool47 = ($dec83 | 0) == 0;
    if ($tobool47) {
      label = 22;
      break;
    } else {
      var $dec83_in = $dec83;
      label = 21;
      break;
    }
   case 22:
    var $17 = HEAP32[5247036 >> 2];
    var $tobool51 = ($17 | 0) == 0;
    if ($tobool51) {
      label = 44;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    _qh_printpoints(5256268, $2);
    label = 44;
    break;
   case 24:
    var $18;
    var $i_180;
    var $19 = HEAP32[5249192 >> 2];
    var $20 = HEAP32[5249188 >> 2];
    var $k_374 = 0;
    var $gmcoord_476 = $20;
    var $sum2p_077 = $gmcoord_0_lcssa112;
    var $22 = $19;
    var $21 = $18;
    label = 25;
    break;
   case 25:
    var $21;
    var $22;
    var $sum2p_077;
    var $gmcoord_476;
    var $k_374;
    var $arrayidx61 = $22 + ($k_374 << 2) | 0;
    HEAP32[$arrayidx61 >> 2] = $gmcoord_476;
    var $cmp62 = ($k_374 | 0) == ($i_180 | 0);
    if ($cmp62) {
      label = 26;
      break;
    } else {
      label = 28;
      break;
    }
   case 26:
    var $scevgep = $gmcoord_476 + ($dim << 3) | 0;
    var $gmcoord_569 = $gmcoord_476;
    var $j_070 = $dim;
    var $sum2p_171 = $sum2p_077;
    label = 27;
    break;
   case 27:
    var $sum2p_171;
    var $j_070;
    var $gmcoord_569;
    var $dec65 = $j_070 - 1 | 0;
    var $incdec_ptr68 = $sum2p_171 + 8 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$sum2p_171 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$sum2p_171 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr69 = $gmcoord_569 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $23, HEAP32[$gmcoord_569 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_569 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool66 = ($dec65 | 0) == 0;
    if ($tobool66) {
      label = 34;
      break;
    } else {
      var $gmcoord_569 = $incdec_ptr69;
      var $j_070 = $dec65;
      var $sum2p_171 = $incdec_ptr68;
      label = 27;
      break;
    }
   case 28:
    var $tobool72 = ($21 | 0) == 0;
    if ($tobool72) {
      var $sum2p_2 = $sum2p_077;
      var $gmcoord_7 = $gmcoord_476;
      var $28 = 0;
      label = 35;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $p76 = $21 + 4 | 0;
    var $24 = $p76;
    var $arrayidx84 = $4 + ($k_374 << 3) | 0;
    var $pointp_1_ph = $24;
    var $gmcoord_6_ph = $gmcoord_476;
    label = 30;
    break;
   case 30:
    var $gmcoord_6_ph;
    var $pointp_1_ph;
    var $pointp_1 = $pointp_1_ph;
    label = 31;
    break;
   case 31:
    var $pointp_1;
    var $incdec_ptr78 = $pointp_1 + 4 | 0;
    var $25 = HEAP32[$pointp_1 >> 2];
    var $tobool79 = ($25 | 0) == 0;
    if ($tobool79) {
      var $sum2p_2 = $sum2p_077;
      var $gmcoord_7 = $gmcoord_6_ph;
      var $28 = $21;
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $cmp81 = ($25 | 0) == ($4 | 0);
    if ($cmp81) {
      var $pointp_1 = $incdec_ptr78;
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $arrayidx83 = $25 + ($k_374 << 3) | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx83 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx83 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx84 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx84 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub85 = $26 - $27;
    var $incdec_ptr86 = $gmcoord_6_ph + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub85, HEAP32[$gmcoord_6_ph >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_6_ph + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $pointp_1_ph = $incdec_ptr78;
    var $gmcoord_6_ph = $incdec_ptr86;
    label = 30;
    break;
   case 34:
    var $scevgep101 = $sum2p_077 + ($dim << 3) | 0;
    var $sum2p_2 = $scevgep101;
    var $gmcoord_7 = $scevgep;
    var $28 = $21;
    label = 35;
    break;
   case 35:
    var $28;
    var $gmcoord_7;
    var $sum2p_2;
    var $inc92 = $k_374 + 1 | 0;
    var $29 = HEAP32[5249192 >> 2];
    var $exitcond = ($inc92 | 0) == ($dim | 0);
    if ($exitcond) {
      label = 36;
      break;
    } else {
      var $k_374 = $inc92;
      var $gmcoord_476 = $gmcoord_7;
      var $sum2p_077 = $sum2p_2;
      var $22 = $29;
      var $21 = $28;
      label = 25;
      break;
    }
   case 36:
    var $call94 = _qh_determinant($29, $dim, $nearzero);
    var $mul95 = $call43 * $call94;
    var $arrayidx96 = $4 + ($i_180 << 3) | 0;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx96 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx96 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add97 = $mul95 + $30;
    var $arrayidx98 = $1 + ($i_180 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $add97, HEAP32[$arrayidx98 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx98 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc100 = $i_180 + 1 | 0;
    var $exitcond104 = ($inc100 | 0) == ($dim | 0);
    if ($exitcond104) {
      var $31 = $28;
      label = 37;
      break;
    } else {
      var $i_180 = $inc100;
      var $18 = $28;
      label = 24;
      break;
    }
   case 37:
    var $31;
    var $32 = HEAP32[5247036 >> 2];
    var $cmp102 = ($32 | 0) > 2;
    if ($cmp102) {
      label = 38;
      break;
    } else {
      label = 44;
      break;
    }
   case 38:
    _qh_fprintf(5255900);
    _qh_printmatrix(1, $dim);
    var $33 = HEAP32[5247036 >> 2];
    var $cmp104 = ($33 | 0) > 4;
    if ($cmp104) {
      label = 39;
      break;
    } else {
      label = 44;
      break;
    }
   case 39:
    _qh_printpoints(5255396, $31);
    var $tobool106 = ($31 | 0) == 0;
    if ($tobool106) {
      label = 43;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $p110 = $31 + 4 | 0;
    var $34 = HEAP32[$p110 >> 2];
    var $tobool11363 = ($34 | 0) == 0;
    if ($tobool11363) {
      label = 43;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $35 = $p110;
    var $pointp_264 = $35;
    label = 42;
    break;
   case 42:
    var $pointp_264;
    var $incdec_ptr112 = $pointp_264 + 4 | 0;
    _qh_fprintf(5255176);
    var $36 = HEAP32[$incdec_ptr112 >> 2];
    var $tobool113 = ($36 | 0) == 0;
    if ($tobool113) {
      label = 43;
      break;
    } else {
      var $pointp_264 = $incdec_ptr112;
      label = 42;
      break;
    }
   case 43:
    _qh_fprintf(5299656);
    label = 44;
    break;
   case 44:
    var $cmp122 = ($2 | 0) == ($points | 0);
    if ($cmp122) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    _qh_settempfree($simplex);
    label = 46;
    break;
   case 46:
    STACKTOP = __stackBase__;
    return $1;
  }
}
_qh_voronoi_center["X"] = 1;
function _qh_findgooddist($point, $facetA, $distp, $facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestdist = __stackBase__;
    var $dist = __stackBase__ + 8;
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = $facetA + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 524288;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      var $goodseen_0 = 0;
      var $bestfacet_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5243160 >> 2];
    var $inc = $3 + 1 | 0;
    HEAP32[5243160 >> 2] = $inc;
    _qh_distplane($point, $facetA, $bestdist);
    var $goodseen_0 = 1;
    var $bestfacet_0 = $facetA;
    label = 4;
    break;
   case 4:
    var $bestfacet_0;
    var $goodseen_0;
    _qh_removefacet($facetA);
    _qh_appendfacet($facetA);
    HEAP32[$facetlist >> 2] = $facetA;
    var $4 = HEAP32[5249152 >> 2];
    var $inc1 = $4 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc1;
    var $visitid = $facetA + 68 | 0;
    HEAP32[$visitid >> 2] = $inc1;
    var $5 = HEAP32[$facetlist >> 2];
    var $tobool2 = ($5 | 0) == 0;
    if ($tobool2) {
      var $bestfacet_4 = $bestfacet_0;
      label = 20;
      break;
    } else {
      var $bestfacet_140 = $bestfacet_0;
      var $facet_041 = $5;
      var $goodseen_142 = $goodseen_0;
      label = 5;
      break;
    }
   case 5:
    var $goodseen_142;
    var $facet_041;
    var $bestfacet_140;
    var $next = $facet_041 + 44 | 0;
    var $6 = HEAP32[$next >> 2];
    var $tobool5 = ($6 | 0) == 0;
    if ($tobool5) {
      var $bestfacet_4 = $bestfacet_140;
      label = 20;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $neighbors = $facet_041 + 56 | 0;
    var $7 = HEAP32[$neighbors >> 2];
    var $tobool6 = ($7 | 0) == 0;
    if ($tobool6) {
      var $goodseen_3 = $goodseen_142;
      var $bestfacet_3 = $bestfacet_140;
      label = 19;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $7 + 4 | 0;
    var $8 = $p;
    var $goodseen_2_ph = $goodseen_142;
    var $bestfacet_2_ph = $bestfacet_140;
    var $neighborp_0_ph = $8;
    label = 8;
    break;
   case 8:
    var $neighborp_0_ph;
    var $bestfacet_2_ph;
    var $goodseen_2_ph;
    var $goodseen_2_ph28 = $goodseen_2_ph;
    var $neighborp_0_ph27 = $neighborp_0_ph;
    label = 9;
    break;
   case 9:
    var $neighborp_0_ph27;
    var $goodseen_2_ph28;
    var $9 = HEAP32[$neighborp_0_ph27 >> 2];
    var $tobool1032 = ($9 | 0) == 0;
    if ($tobool1032) {
      var $goodseen_3 = $goodseen_2_ph28;
      var $bestfacet_3 = $bestfacet_2_ph;
      label = 19;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $tobool16 = ($goodseen_2_ph28 | 0) == 0;
    var $neighborp_0_ph27_pn = $neighborp_0_ph27;
    var $10 = $9;
    label = 11;
    break;
   case 11:
    var $10;
    var $neighborp_0_ph27_pn;
    var $incdec_ptr33 = $neighborp_0_ph27_pn + 4 | 0;
    var $visitid12 = $10 + 68 | 0;
    var $11 = HEAP32[$visitid12 >> 2];
    var $12 = HEAP32[5249152 >> 2];
    var $cmp = ($11 | 0) == ($12 | 0);
    if ($cmp) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $13 = HEAP32[$incdec_ptr33 >> 2];
    var $tobool10 = ($13 | 0) == 0;
    if ($tobool10) {
      var $goodseen_3 = $goodseen_2_ph28;
      var $bestfacet_3 = $bestfacet_2_ph;
      label = 19;
      break;
    } else {
      var $neighborp_0_ph27_pn = $incdec_ptr33;
      var $10 = $13;
      label = 11;
      break;
    }
   case 13:
    HEAP32[$visitid12 >> 2] = $12;
    if ($tobool16) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $14 = $10 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear18 = $16 & 524288;
    var $tobool19 = ($bf_clear18 | 0) == 0;
    if ($tobool19) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $17 = HEAP32[5243160 >> 2];
    var $inc22 = $17 + 1 | 0;
    HEAP32[5243160 >> 2] = $inc22;
    _qh_distplane($point, $10, $dist);
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp23 = $18 > 0;
    if ($cmp23) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 16:
    _qh_removefacet($10);
    _qh_appendfacet($10);
    var $19 = $10 + 76 | 0;
    var $20 = $19;
    var $21 = HEAP32[$20 >> 2];
    var $bf_clear26 = $21 & 524288;
    var $tobool27 = ($bf_clear26 | 0) == 0;
    if ($tobool27) {
      label = 12;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp29 = $18 > $22;
    if ($cmp29) {
      label = 18;
      break;
    } else {
      var $goodseen_2_ph28 = 1;
      var $neighborp_0_ph27 = $incdec_ptr33;
      label = 9;
      break;
    }
   case 18:
    HEAPF64[tempDoublePtr >> 3] = $18, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $goodseen_2_ph = 1;
    var $bestfacet_2_ph = $10;
    var $neighborp_0_ph = $incdec_ptr33;
    label = 8;
    break;
   case 19:
    var $bestfacet_3;
    var $goodseen_3;
    var $23 = HEAP32[$next >> 2];
    var $tobool4 = ($23 | 0) == 0;
    if ($tobool4) {
      var $bestfacet_4 = $bestfacet_3;
      label = 20;
      break;
    } else {
      var $bestfacet_140 = $bestfacet_3;
      var $facet_041 = $23;
      var $goodseen_142 = $goodseen_3;
      label = 5;
      break;
    }
   case 20:
    var $bestfacet_4;
    var $tobool38 = ($bestfacet_4 | 0) == 0;
    if ($tobool38) {
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $24, HEAP32[$distp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$distp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $25 = HEAP32[5247036 >> 2];
    var $cmp40 = ($25 | 0) > 1;
    if ($cmp40) {
      label = 22;
      break;
    } else {
      var $retval_0 = $bestfacet_4;
      label = 25;
      break;
    }
   case 22:
    _qh_fprintf(5278560);
    var $retval_0 = $bestfacet_4;
    label = 25;
    break;
   case 23:
    var $26 = HEAP32[5247036 >> 2];
    var $cmp44 = ($26 | 0) > 3;
    if ($cmp44) {
      label = 24;
      break;
    } else {
      var $retval_0 = 0;
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5277476);
    var $retval_0 = 0;
    label = 25;
    break;
   case 25:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_findgooddist["X"] = 1;
function _qh_getarea($facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5249044 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 25;
      break;
    }
   case 3:
    var $1 = HEAP32[5247368 >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5276800);
    label = 7;
    break;
   case 5:
    var $2 = HEAP32[5247036 >> 2];
    var $cmp = ($2 | 0) > 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_fprintf(5276144);
    label = 7;
    break;
   case 7:
    var $tobool6 = ($facetlist | 0) == 0;
    HEAP32[5249136 >> 2] = 0;
    HEAP32[5249140 >> 2] = 0;
    HEAP32[5249144 >> 2] = 0;
    HEAP32[5249148 >> 2] = 0;
    if ($tobool6) {
      label = 24;
      break;
    } else {
      var $facet_021 = $facetlist;
      label = 8;
      break;
    }
   case 8:
    var $facet_021;
    var $next = $facet_021 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool9 = ($3 | 0) == 0;
    if ($tobool9) {
      label = 24;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $normal = $facet_021 + 24 | 0;
    var $4 = HEAP32[$normal >> 2];
    var $tobool10 = ($4 | 0) == 0;
    if ($tobool10) {
      label = 23;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $5 = $facet_021 + 76 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $bf_clear = $7 & 131072;
    var $tobool13 = ($bf_clear | 0) != 0;
    var $8 = HEAP32[5246956 >> 2];
    var $tobool14 = ($8 | 0) != 0;
    var $or_cond = $tobool13 & $tobool14;
    if ($or_cond) {
      label = 23;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $bf_clear18 = $7 & 1048576;
    var $tobool19 = ($bf_clear18 | 0) == 0;
    if ($tobool19) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $area25_phi_trans_insert = $facet_021 + 28 | 0;
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$area25_phi_trans_insert >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$area25_phi_trans_insert + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $12 = $7;
    var $11 = $_pre;
    label = 14;
    break;
   case 13:
    var $call = _qh_facetarea($facet_021);
    var $area21 = $facet_021 + 28 | 0;
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[$area21 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$area21 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $9 = HEAP32[$6 >> 2];
    var $10 = $9 | 1048576;
    HEAP32[$6 >> 2] = $10;
    var $12 = $10;
    var $11 = $call;
    label = 14;
    break;
   case 14:
    var $11;
    var $12;
    var $13 = HEAP32[5246996 >> 2];
    var $tobool26 = ($13 | 0) == 0;
    if ($tobool26) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $14 = $12 >>> 17;
    var $bf_clear29 = $14 & 1;
    var $15 = HEAP32[5247456 >> 2];
    var $cmp30 = ($bf_clear29 | 0) == ($15 | 0);
    if ($cmp30) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249136 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249140 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $11 + $16;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5249136 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249140 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 18;
    break;
   case 17:
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249136 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249140 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add34 = $11 + $17;
    HEAPF64[tempDoublePtr >> 3] = $add34, HEAP32[5249136 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249140 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $18 = HEAP32[5248924 >> 2];
    _qh_distplane($18, $facet_021, $dist);
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$19;
    var $mul = $11 * $sub;
    var $20 = HEAP32[5247504 >> 2];
    var $conv = $20 | 0;
    var $div = $mul / $conv;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249144 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249148 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add35 = $div + $21;
    HEAPF64[tempDoublePtr >> 3] = $add35, HEAP32[5249144 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249148 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 18;
    break;
   case 18:
    var $22 = HEAP32[5247312 >> 2];
    var $tobool37 = ($22 | 0) == 0;
    if ($tobool37) {
      label = 23;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add39 = $11 + $23;
    HEAPF64[tempDoublePtr >> 3] = $add39, HEAP32[5243064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243072 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243076 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp40 = $24 < $11;
    if ($cmp40) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAPF64[tempDoublePtr >> 3] = $11, HEAP32[5243072 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243076 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 21;
    break;
   case 21:
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp44 = $25 > $11;
    if ($cmp44) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAPF64[tempDoublePtr >> 3] = $11, HEAP32[5243080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 23;
    break;
   case 23:
    var $26 = HEAP32[$next >> 2];
    var $tobool8 = ($26 | 0) == 0;
    if ($tobool8) {
      label = 24;
      break;
    } else {
      var $facet_021 = $26;
      label = 8;
      break;
    }
   case 24:
    HEAP32[5249044 >> 2] = 1;
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_getarea["X"] = 1;
function _qh_gram_schmidt($dim, $row) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp53 = ($dim | 0) > 0;
    if ($cmp53) {
      var $i_054 = 0;
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 3:
    if ($cmp1550) {
      var $i_054 = $add13;
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 4:
    var $i_054;
    var $arrayidx = $row + ($i_054 << 2) | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $rowi_029 = $0;
    var $norm_030 = 0;
    var $k_031 = $dim;
    label = 5;
    break;
   case 5:
    var $k_031;
    var $norm_030;
    var $rowi_029;
    var $dec = $k_031 - 1 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$rowi_029 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$rowi_029 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $1 * $1;
    var $add = $norm_030 + $mul;
    var $incdec_ptr = $rowi_029 + 8 | 0;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      var $rowi_029 = $incdec_ptr;
      var $norm_030 = $add;
      var $k_031 = $dec;
      label = 5;
      break;
    }
   case 6:
    var $scevgep = $0 + ($dim << 3) | 0;
    var $call = Math.sqrt($add);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244048 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244052 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp3 = $2 > $call;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[5244048 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244052 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $cmp4 = $call == 0;
    if ($cmp4) {
      label = 15;
      break;
    } else {
      var $rowi_134 = $scevgep;
      var $k_135 = $dim;
      label = 9;
      break;
    }
   case 9:
    var $k_135;
    var $rowi_134;
    var $dec8 = $k_135 - 1 | 0;
    var $incdec_ptr11 = $rowi_134 - 8 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$incdec_ptr11 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$incdec_ptr11 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $3 / $call;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$incdec_ptr11 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$incdec_ptr11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool9 = ($dec8 | 0) == 0;
    if ($tobool9) {
      label = 10;
      break;
    } else {
      var $rowi_134 = $incdec_ptr11;
      var $k_135 = $dec8;
      label = 9;
      break;
    }
   case 10:
    var $add13 = $i_054 + 1 | 0;
    var $cmp1550 = ($add13 | 0) < ($dim | 0);
    if ($cmp1550) {
      var $j_052 = $add13;
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    var $j_052;
    var $arrayidx17 = $row + ($j_052 << 2) | 0;
    var $4 = HEAP32[$arrayidx17 >> 2];
    var $scevgep57 = $4 + ($dim << 3) | 0;
    var $rowi_338 = $0;
    var $rowj_039 = $4;
    var $norm_140 = 0;
    var $k_241 = $dim;
    label = 12;
    break;
   case 12:
    var $k_241;
    var $norm_140;
    var $rowj_039;
    var $rowi_338;
    var $dec19 = $k_241 - 1 | 0;
    var $incdec_ptr22 = $rowi_338 + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$rowi_338 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$rowi_338 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr23 = $rowj_039 + 8 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$rowj_039 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$rowj_039 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul24 = $5 * $6;
    var $add25 = $norm_140 + $mul24;
    var $tobool20 = ($dec19 | 0) == 0;
    if ($tobool20) {
      var $rowi_446 = $scevgep;
      var $rowj_147 = $scevgep57;
      var $k_348 = $dim;
      label = 13;
      break;
    } else {
      var $rowi_338 = $incdec_ptr22;
      var $rowj_039 = $incdec_ptr23;
      var $norm_140 = $add25;
      var $k_241 = $dec19;
      label = 12;
      break;
    }
   case 13:
    var $k_348;
    var $rowj_147;
    var $rowi_446;
    var $dec28 = $k_348 - 1 | 0;
    var $incdec_ptr31 = $rowi_446 - 8 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$incdec_ptr31 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$incdec_ptr31 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul32 = $add25 * $7;
    var $incdec_ptr33 = $rowj_147 - 8 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$incdec_ptr33 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$incdec_ptr33 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $8 - $mul32;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$incdec_ptr33 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$incdec_ptr33 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool29 = ($dec28 | 0) == 0;
    if ($tobool29) {
      label = 14;
      break;
    } else {
      var $rowi_446 = $incdec_ptr31;
      var $rowj_147 = $incdec_ptr33;
      var $k_348 = $dec28;
      label = 13;
      break;
    }
   case 14:
    var $inc = $j_052 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dim | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      var $j_052 = $inc;
      label = 11;
      break;
    }
   case 15:
    return;
  }
}
_qh_gram_schmidt["X"] = 1;
function _qh_joggleinput() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $seed = __stackBase__;
    var $0 = HEAP32[5247524 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $1 = HEAP32[5247516 >> 2];
    HEAP32[5247524 >> 2] = $1;
    var $2 = HEAP32[5247520 >> 2];
    HEAP32[5247528 >> 2] = $2;
    var $3 = HEAP32[5247512 >> 2];
    var $4 = HEAP32[5247504 >> 2];
    var $mul = $3 << 3;
    var $mul1 = $mul * $4 & -1;
    var $call = _qh_malloc($mul1);
    var $5 = $call;
    HEAP32[5247516 >> 2] = $5;
    var $tobool2 = ($call | 0) == 0;
    if ($tobool2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5275732);
    _qh_errexit(4, 0, 0);
    label = 5;
    break;
   case 5:
    HEAP32[5247520 >> 2] = 1;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $6 == 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    var $7 = HEAP32[5247524 >> 2];
    var $8 = HEAP32[5247512 >> 2];
    var $9 = HEAP32[5247504 >> 2];
    var $call5 = _qh_detjoggle($7, $8, $9);
    HEAPF64[tempDoublePtr >> 3] = $call5, HEAP32[5249052 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249056 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_option(5275332, 0, 5249052);
    label = 12;
    break;
   case 7:
    var $10 = HEAP32[5247376 >> 2];
    var $tobool7 = ($10 | 0) == 0;
    var $11 = HEAP32[5249028 >> 2];
    var $cmp8 = ($11 | 0) > 2;
    var $or_cond = $tobool7 & $cmp8;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul13 = $12 * .01;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp14 = $13 < $mul13;
    if ($cmp14) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $mul16 = $13 * 10;
    HEAPF64[tempDoublePtr >> 3] = $mul16, HEAP32[5249052 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249056 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp17 = $mul16 > $mul13;
    if ($cmp17) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAPF64[tempDoublePtr >> 3] = $mul13, HEAP32[5249052 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249056 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 11;
    break;
   case 11:
    _qh_option(5275332, 0, 5249052);
    label = 12;
    break;
   case 12:
    var $14 = HEAP32[5249028 >> 2];
    var $cmp24 = ($14 | 0) > 1;
    if ($cmp24) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $16 * .25;
    var $cmp26 = $div < .1;
    var $cond = $cmp26 ? .1 : $div;
    var $cmp28 = $15 > $cond;
    if ($cmp28) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5274608);
    _qh_errexit(5, 0, 0);
    label = 15;
    break;
   case 15:
    var $call31 = _qh_rand();
    HEAP32[$seed >> 2] = $call31;
    _qh_option(5273916, $seed, 0);
    var $17 = HEAP32[5247036 >> 2];
    var $tobool32 = ($17 | 0) == 0;
    if ($tobool32) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _qh_fprintf(5273320);
    label = 17;
    break;
   case 17:
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul35 = $18 * 2;
    var $div36 = $mul35 / 2147483646;
    var $19 = HEAP32[5247512 >> 2];
    var $20 = HEAP32[5247504 >> 2];
    var $mul38 = $20 * $19 & -1;
    var $tobool394 = ($mul38 | 0) == 0;
    if ($tobool394) {
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $21 = HEAP32[5247516 >> 2];
    var $22 = HEAP32[5247524 >> 2];
    var $inputp_05 = $22;
    var $coordp_06 = $21;
    var $i_07 = $mul38;
    label = 19;
    break;
   case 19:
    var $i_07;
    var $coordp_06;
    var $inputp_05;
    var $dec = $i_07 - 1 | 0;
    var $call40 = _qh_rand();
    var $conv = $call40 | 0;
    var $incdec_ptr = $inputp_05 + 8 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$inputp_05 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$inputp_05 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul41 = $div36 * $conv;
    var $add = $mul41 - $18;
    var $add42 = $23 + $add;
    var $incdec_ptr43 = $coordp_06 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add42, HEAP32[$coordp_06 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coordp_06 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool39 = ($dec | 0) == 0;
    if ($tobool39) {
      label = 20;
      break;
    } else {
      var $inputp_05 = $incdec_ptr;
      var $coordp_06 = $incdec_ptr43;
      var $i_07 = $dec;
      label = 19;
      break;
    }
   case 20:
    var $24 = HEAP32[5246996 >> 2];
    var $tobool44 = ($24 | 0) == 0;
    if ($tobool44) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249244 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249248 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249236 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249240 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249228 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249232 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $25 = HEAP32[5247504 >> 2];
    var $26 = HEAP32[5247512 >> 2];
    var $27 = HEAP32[5247516 >> 2];
    _qh_setdelaunay($25, $26, $27);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_joggleinput["X"] = 1;
function _qh_maxabsval($normal, $dim) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool6 = ($dim | 0) == 0;
    if ($tobool6) {
      var $maxp_0_lcssa = 0;
      label = 6;
      break;
    } else {
      var $maxp_07 = 0;
      var $colp_08 = $normal;
      var $maxval_09 = -1.7976931348623157e+308;
      var $dec10_in = $dim;
      label = 3;
      break;
    }
   case 3:
    var $dec10_in;
    var $maxval_09;
    var $colp_08;
    var $maxp_07;
    var $dec10 = $dec10_in - 1 | 0;
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$colp_08 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$colp_08 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $0 < 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $cond = $0;
      label = 5;
      break;
    }
   case 4:
    var $sub = -$0;
    var $cond = $sub;
    label = 5;
    break;
   case 5:
    var $cond;
    var $cmp1 = $cond > $maxval_09;
    var $maxp_1 = $cmp1 ? $colp_08 : $maxp_07;
    var $maxval_1 = $cmp1 ? $cond : $maxval_09;
    var $incdec_ptr = $colp_08 + 8 | 0;
    var $tobool = ($dec10 | 0) == 0;
    if ($tobool) {
      var $maxp_0_lcssa = $maxp_1;
      label = 6;
      break;
    } else {
      var $maxp_07 = $maxp_1;
      var $colp_08 = $incdec_ptr;
      var $maxval_09 = $maxval_1;
      var $dec10_in = $dec10;
      label = 3;
      break;
    }
   case 6:
    var $maxp_0_lcssa;
    return $maxp_0_lcssa;
  }
}
function _qh_setdelaunay($dim, $count, $points) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5260192);
    label = 4;
    break;
   case 4:
    var $cmp19 = ($count | 0) > 0;
    if ($cmp19) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $sub = $dim - 2 | 0;
    var $tobool213 = ($sub | 0) == 0;
    var $1 = $dim - 1 | 0;
    var $i_020 = 0;
    var $coordp_021 = $points;
    label = 6;
    break;
   case 6:
    var $coordp_021;
    var $i_020;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_021 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_021 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $2 * $2;
    var $coordp_112 = $coordp_021 + 8 | 0;
    if ($tobool213) {
      var $coordp_0_pn_lcssa = $coordp_021;
      var $paraboloid_0_lcssa = $mul;
      var $coordp_1_lcssa = $coordp_112;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $scevgep = $coordp_021 + ($1 << 3) | 0;
    var $k_014 = $sub;
    var $paraboloid_015 = $mul;
    var $coordp_116 = $coordp_112;
    label = 8;
    break;
   case 8:
    var $coordp_116;
    var $paraboloid_015;
    var $k_014;
    var $dec = $k_014 - 1 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coordp_116 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coordp_116 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul5 = $3 * $3;
    var $add = $paraboloid_015 + $mul5;
    var $coordp_1 = $coordp_116 + 8 | 0;
    var $tobool2 = ($dec | 0) == 0;
    if ($tobool2) {
      label = 9;
      break;
    } else {
      var $k_014 = $dec;
      var $paraboloid_015 = $add;
      var $coordp_116 = $coordp_1;
      label = 8;
      break;
    }
   case 9:
    var $scevgep23 = $coordp_021 + ($sub << 3) | 0;
    var $coordp_0_pn_lcssa = $scevgep23;
    var $paraboloid_0_lcssa = $add;
    var $coordp_1_lcssa = $scevgep;
    label = 10;
    break;
   case 10:
    var $coordp_1_lcssa;
    var $paraboloid_0_lcssa;
    var $coordp_0_pn_lcssa;
    var $incdec_ptr6 = $coordp_0_pn_lcssa + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $paraboloid_0_lcssa, HEAP32[$coordp_1_lcssa >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coordp_1_lcssa + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $i_020 + 1 | 0;
    var $exitcond = ($inc | 0) == ($count | 0);
    if ($exitcond) {
      label = 11;
      break;
    } else {
      var $i_020 = $inc;
      var $coordp_021 = $incdec_ptr6;
      label = 6;
      break;
    }
   case 11:
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249228 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249232 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp8 = $4 < 8.988465674311579e+307;
    if ($cmp8) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249236 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249240 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249244 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249248 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_scalelast($points, $count, $dim, $4, $5, $6);
    label = 13;
    break;
   case 13:
    return;
  }
}
function _qh_maxmin($points, $numpoints, $dimension) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $set = __stackBase__;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5248632 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248636 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[5248656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5248648 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248652 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5249164 >> 2] = 0;
    var $0 = HEAP32[5248580 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP32[5249160 >> 2] = 1;
    label = 4;
    break;
   case 4:
    var $mul = $dimension << 1;
    var $call = _qh_settemp($mul);
    HEAP32[$set >> 2] = $call;
    var $cmp58 = ($dimension | 0) > 0;
    if ($cmp58) {
      label = 5;
      break;
    } else {
      label = 23;
      break;
    }
   case 5:
    var $add_ptr = $points + ($dimension << 3) | 0;
    var $sub = $dimension - 1 | 0;
    var $k_059 = 0;
    label = 6;
    break;
   case 6:
    var $k_059;
    var $1 = HEAP32[5247016 >> 2];
    var $cmp1 = ($1 | 0) == ($points | 0);
    var $add_ptr_points = $cmp1 ? $add_ptr : $points;
    var $2 = HEAP32[5247504 >> 2];
    var $mul4 = $2 * $numpoints & -1;
    var $add_ptr5 = $points + ($mul4 << 3) | 0;
    var $cmp753 = ($mul4 | 0) > 0;
    if ($cmp753) {
      var $minimum_154 = $add_ptr_points;
      var $maximum_155 = $add_ptr_points;
      var $point_056 = $points;
      label = 7;
      break;
    } else {
      var $minimum_1_lcssa = $add_ptr_points;
      var $maximum_1_lcssa = $add_ptr_points;
      label = 12;
      break;
    }
   case 7:
    var $point_056;
    var $maximum_155;
    var $minimum_154;
    var $cmp9 = ($point_056 | 0) == ($1 | 0);
    if ($cmp9) {
      var $maximum_2 = $maximum_155;
      var $minimum_2 = $minimum_154;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $arrayidx = $maximum_155 + ($k_059 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx12 = $point_056 + ($k_059 << 3) | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx12 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx12 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp13 = $3 < $4;
    if ($cmp13) {
      var $maximum_2 = $point_056;
      var $minimum_2 = $minimum_154;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $arrayidx16 = $minimum_154 + ($k_059 << 3) | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp18 = $5 > $4;
    if ($cmp18) {
      label = 10;
      break;
    } else {
      var $maximum_2 = $maximum_155;
      var $minimum_2 = $minimum_154;
      label = 11;
      break;
    }
   case 10:
    var $maximum_2 = $maximum_155;
    var $minimum_2 = $point_056;
    label = 11;
    break;
   case 11:
    var $minimum_2;
    var $maximum_2;
    var $add_ptr22 = $point_056 + ($2 << 3) | 0;
    var $cmp7 = $add_ptr22 >>> 0 < $add_ptr5 >>> 0;
    if ($cmp7) {
      var $minimum_154 = $minimum_2;
      var $maximum_155 = $maximum_2;
      var $point_056 = $add_ptr22;
      label = 7;
      break;
    } else {
      var $minimum_1_lcssa = $minimum_2;
      var $maximum_1_lcssa = $maximum_2;
      label = 12;
      break;
    }
   case 12:
    var $maximum_1_lcssa;
    var $minimum_1_lcssa;
    var $cmp23 = ($k_059 | 0) == ($sub | 0);
    if ($cmp23) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    var $arrayidx25 = $minimum_1_lcssa + ($sub << 3) | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx25 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx25 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $6, HEAP32[5248696 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248700 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx26 = $maximum_1_lcssa + ($sub << 3) | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx26 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx26 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $7, HEAP32[5248640 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248644 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $8 = HEAP32[5247388 >> 2];
    var $tobool28 = ($8 | 0) == 0;
    if ($tobool28) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $maxcoord_1 = $9;
    label = 20;
    break;
   case 15:
    var $arrayidx33 = $maximum_1_lcssa + ($k_059 << 3) | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx33 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx33 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx34 = $minimum_1_lcssa + ($k_059 << 3) | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx34 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx34 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub35 = -$11;
    var $cmp36 = $10 < $sub35;
    var $sub35_ = $cmp36 ? $sub35 : $10;
    var $tobool40 = ($1 | 0) == 0;
    if ($tobool40) {
      var $maxcoord_0 = $sub35_;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $arrayidx42 = $1 + ($k_059 << 3) | 0;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub44 = -$12;
    var $cmp45 = $12 < $sub44;
    var $cond52 = $cmp45 ? $sub44 : $12;
    var $cmp53 = $sub35_ < $cond52;
    if ($cmp53) {
      label = 17;
      break;
    } else {
      var $maxcoord_0 = $sub35_;
      label = 18;
      break;
    }
   case 17:
    var $maxcoord_0 = $cond52;
    label = 18;
    break;
   case 18:
    var $maxcoord_0;
    var $sub59 = $10 - $11;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp60 = $13 < $sub59;
    if ($cmp60) {
      label = 19;
      break;
    } else {
      var $maxcoord_1 = $maxcoord_0;
      label = 20;
      break;
    }
   case 19:
    HEAPF64[tempDoublePtr >> 3] = $sub59, HEAP32[5248656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $maxcoord_1 = $maxcoord_0;
    label = 20;
    break;
   case 20:
    var $maxcoord_1;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp64 = $14 < $maxcoord_1;
    if ($cmp64) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAPF64[tempDoublePtr >> 3] = $maxcoord_1, HEAP32[5248632 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248636 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 22;
    break;
   case 22:
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248648 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248652 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $maxcoord_1 + $15;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5248648 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248652 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $16 = $maximum_1_lcssa;
    _qh_setappend($set, $16);
    var $17 = $minimum_1_lcssa;
    _qh_setappend($set, $17);
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248648 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248652 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul67 = $18 * 80;
    var $mul68 = $mul67 * 2.220446049250313e-16;
    var $19 = HEAP32[5248708 >> 2];
    var $arrayidx69 = $19 + ($k_059 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $mul68, HEAP32[$arrayidx69 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx69 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $k_059 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dimension | 0);
    if ($exitcond) {
      label = 23;
      break;
    } else {
      var $k_059 = $inc;
      label = 6;
      break;
    }
   case 23:
    var $20 = HEAP32[5247036 >> 2];
    var $cmp72 = ($20 | 0) > 0;
    var $21 = HEAP32[$set >> 2];
    if ($cmp72) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_printpoints(5272772, $21);
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return $21;
  }
}
_qh_maxmin["X"] = 1;
function _qh_printpoints($string, $points) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($string | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5290424);
    var $tobool1 = ($points | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p = $points + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool313 = ($0 | 0) == 0;
    if ($tobool313) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $1 = $p;
    var $pointp_014 = $1;
    label = 6;
    break;
   case 6:
    var $pointp_014;
    var $incdec_ptr = $pointp_014 + 4 | 0;
    _qh_fprintf(5273152);
    var $2 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      var $pointp_014 = $incdec_ptr;
      label = 6;
      break;
    }
   case 7:
    _qh_fprintf(5299656);
    label = 13;
    break;
   case 8:
    var $tobool4 = ($points | 0) == 0;
    if ($tobool4) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p8 = $points + 4 | 0;
    var $3 = HEAP32[$p8 >> 2];
    var $tobool1111 = ($3 | 0) == 0;
    if ($tobool1111) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $4 = $p8;
    var $pointp_112 = $4;
    label = 11;
    break;
   case 11:
    var $pointp_112;
    var $incdec_ptr10 = $pointp_112 + 4 | 0;
    _qh_fprintf(5295004);
    var $5 = HEAP32[$incdec_ptr10 >> 2];
    var $tobool11 = ($5 | 0) == 0;
    if ($tobool11) {
      label = 12;
      break;
    } else {
      var $pointp_112 = $incdec_ptr10;
      label = 11;
      break;
    }
   case 12:
    _qh_fprintf(5299656);
    label = 13;
    break;
   case 13:
    return;
  }
}
function _qh_maxouter() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $0 < $1;
    var $cond = $cmp ? $1 : $0;
    var $add = $1 + $cond;
    var $2 = HEAP32[5247036 >> 2];
    var $cmp1 = ($2 | 0) > 3;
    if ($cmp1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5272288);
    label = 4;
    break;
   case 4:
    return $add;
  }
}
function _qh_maxsimplex($dim, $maxpoints, $points, $numpoints, $simplex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $nearzero = __stackBase__;
    var $0 = HEAP32[$simplex >> 2];
    var $call = _qh_setsize($0);
    var $cmp = ($call | 0) < 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $k_0_ph = $call;
      label = 21;
      break;
    }
   case 3:
    var $call1 = _qh_setsize($maxpoints);
    var $cmp2 = ($call1 | 0) > 1;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    var $tobool = ($maxpoints | 0) == 0;
    if ($tobool) {
      var $maxx_5 = 0;
      var $minx_3 = 0;
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $maxpoints + 4 | 0;
    var $1 = $p;
    var $maxcoord_0_ph = -1.7976931348623157e+308;
    var $mincoord_0_ph = 1.7976931348623157e+308;
    var $maxx_0_ph = 0;
    var $minx_0_ph = 0;
    var $pointp_0_ph = $1;
    label = 6;
    break;
   case 6:
    var $pointp_0_ph;
    var $minx_0_ph;
    var $maxx_0_ph;
    var $mincoord_0_ph;
    var $maxcoord_0_ph;
    var $maxcoord_0 = $maxcoord_0_ph;
    var $maxx_0 = $maxx_0_ph;
    var $pointp_0 = $pointp_0_ph;
    label = 7;
    break;
   case 7:
    var $pointp_0;
    var $maxx_0;
    var $maxcoord_0;
    var $incdec_ptr = $pointp_0 + 4 | 0;
    var $2 = HEAP32[$pointp_0 >> 2];
    var $tobool5 = ($2 | 0) == 0;
    if ($tobool5) {
      var $maxx_5 = $maxx_0;
      var $minx_3 = $minx_0_ph;
      label = 15;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp7 = $maxcoord_0 < $3;
    var $maxx_1 = $cmp7 ? $2 : $maxx_0;
    var $maxcoord_1 = $cmp7 ? $3 : $maxcoord_0;
    var $cmp11 = $mincoord_0_ph > $3;
    if ($cmp11) {
      var $maxcoord_0_ph = $maxcoord_1;
      var $mincoord_0_ph = $3;
      var $maxx_0_ph = $maxx_1;
      var $minx_0_ph = $2;
      var $pointp_0_ph = $incdec_ptr;
      label = 6;
      break;
    } else {
      var $maxcoord_0 = $maxcoord_1;
      var $maxx_0 = $maxx_1;
      var $pointp_0 = $incdec_ptr;
      label = 7;
      break;
    }
   case 9:
    var $4 = HEAP32[5247504 >> 2];
    var $mul = $4 * $numpoints & -1;
    var $add_ptr = $points + ($mul << 3) | 0;
    var $cmp17124 = ($mul | 0) > 0;
    if ($cmp17124) {
      label = 10;
      break;
    } else {
      var $maxx_5 = 0;
      var $minx_3 = 0;
      label = 15;
      break;
    }
   case 10:
    var $5 = HEAP32[5247016 >> 2];
    var $point_0125 = $points;
    var $minx_1126 = 0;
    var $maxx_2127 = 0;
    var $mincoord_1128 = 1.7976931348623157e+308;
    var $maxcoord_2129 = -1.7976931348623157e+308;
    label = 11;
    break;
   case 11:
    var $maxcoord_2129;
    var $mincoord_1128;
    var $maxx_2127;
    var $minx_1126;
    var $point_0125;
    var $cmp19 = ($point_0125 | 0) == ($5 | 0);
    if ($cmp19) {
      var $maxcoord_4 = $maxcoord_2129;
      var $mincoord_2 = $mincoord_1128;
      var $maxx_4 = $maxx_2127;
      var $minx_2 = $minx_1126;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point_0125 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point_0125 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp23 = $maxcoord_2129 < $6;
    var $maxx_3 = $cmp23 ? $point_0125 : $maxx_2127;
    var $maxcoord_3 = $cmp23 ? $6 : $maxcoord_2129;
    var $cmp28 = $mincoord_1128 > $6;
    if ($cmp28) {
      label = 13;
      break;
    } else {
      var $maxcoord_4 = $maxcoord_3;
      var $mincoord_2 = $mincoord_1128;
      var $maxx_4 = $maxx_3;
      var $minx_2 = $minx_1126;
      label = 14;
      break;
    }
   case 13:
    var $maxcoord_4 = $maxcoord_3;
    var $mincoord_2 = $6;
    var $maxx_4 = $maxx_3;
    var $minx_2 = $point_0125;
    label = 14;
    break;
   case 14:
    var $minx_2;
    var $maxx_4;
    var $mincoord_2;
    var $maxcoord_4;
    var $add_ptr32 = $point_0125 + ($4 << 3) | 0;
    var $cmp17 = $add_ptr32 >>> 0 < $add_ptr >>> 0;
    if ($cmp17) {
      var $point_0125 = $add_ptr32;
      var $minx_1126 = $minx_2;
      var $maxx_2127 = $maxx_4;
      var $mincoord_1128 = $mincoord_2;
      var $maxcoord_2129 = $maxcoord_4;
      label = 11;
      break;
    } else {
      var $maxx_5 = $maxx_4;
      var $minx_3 = $minx_2;
      label = 15;
      break;
    }
   case 15:
    var $minx_3;
    var $maxx_5;
    var $7 = $minx_3;
    var $call35 = _qh_setunique($simplex, $7);
    var $8 = HEAP32[$simplex >> 2];
    var $call36 = _qh_setsize($8);
    var $cmp37 = ($call36 | 0) < 2;
    if ($cmp37) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $9 = $maxx_5;
    var $call39 = _qh_setunique($simplex, $9);
    label = 17;
    break;
   case 17:
    var $10 = HEAP32[$simplex >> 2];
    var $call41 = _qh_setsize($10);
    var $cmp42 = ($call41 | 0) < 2;
    if ($cmp42) {
      label = 18;
      break;
    } else {
      var $k_0_ph = $call41;
      label = 21;
      break;
    }
   case 18:
    _qh_precision();
    var $11 = HEAP32[5244544 >> 2];
    var $12 = HEAP32[5247504 >> 2];
    var $add = $12 + 1 | 0;
    var $cmp44 = ($11 | 0) > ($add | 0);
    if ($cmp44) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $call46 = _qh_setsize($maxpoints);
    _qh_fprintf(5271056);
    _qh_errexit(3, 0, 0);
    var $k_0_ph = $call41;
    label = 21;
    break;
   case 20:
    _qh_fprintf(5270420);
    _qh_errexit(1, 0, 0);
    var $k_0_ph = $call41;
    label = 21;
    break;
   case 21:
    var $k_0_ph;
    var $add53 = $dim + 1 | 0;
    var $cmp54115 = ($k_0_ph | 0) < ($add53 | 0);
    if ($cmp54115) {
      label = 22;
      break;
    } else {
      label = 55;
      break;
    }
   case 22:
    var $tobool56 = ($maxpoints | 0) == 0;
    var $p60 = $maxpoints + 4 | 0;
    var $incdec_ptr6289106132 = $p60 + 4 | 0;
    var $incdec_ptr6289106 = $incdec_ptr6289106132;
    var $maxnearzero_0116 = 0;
    var $k_0117 = $k_0_ph;
    label = 23;
    break;
   case 23:
    var $k_0117;
    var $maxnearzero_0116;
    if ($tobool56) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $13 = HEAP32[5244536 >> 2];
    var $inc75 = $13 + 1 | 0;
    HEAP32[5244536 >> 2] = $inc75;
    var $14 = HEAP32[5247036 >> 2];
    var $tobool8676 = ($14 | 0) == 0;
    if ($tobool8676) {
      var $maxdet_17377 = -1.7976931348623157e+308;
      var $maxnearzero_27279 = $maxnearzero_0116;
      var $maxpoint_17181 = 0;
      label = 42;
      break;
    } else {
      var $maxnearzero_2728085 = $maxnearzero_0116;
      var $maxdet_1737886 = -1.7976931348623157e+308;
      label = 39;
      break;
    }
   case 25:
    var $15 = HEAP32[$p60 >> 2];
    var $tobool6390107 = ($15 | 0) == 0;
    if ($tobool6390107) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $16 = HEAP32[5244536 >> 2];
    var $inc152 = $16 + 1 | 0;
    HEAP32[5244536 >> 2] = $inc152;
    var $17 = HEAP32[5247036 >> 2];
    var $tobool86153 = ($17 | 0) == 0;
    if ($tobool86153) {
      var $maxdet_17377 = -1.7976931348623157e+308;
      var $maxnearzero_27279 = $maxnearzero_0116;
      var $maxpoint_17181 = 0;
      label = 42;
      break;
    } else {
      var $maxnearzero_2728085 = $maxnearzero_0116;
      var $maxdet_1737886 = -1.7976931348623157e+308;
      label = 39;
      break;
    }
   case 27:
    var $18 = $15;
    var $maxpoint_0_ph108 = 0;
    var $maxnearzero_1_ph109 = $maxnearzero_0116;
    var $maxdet_0_ph110 = -1.7976931348623157e+308;
    var $incdec_ptr6289111 = $incdec_ptr6289106;
    var $19 = $18;
    label = 28;
    break;
   case 28:
    var $19;
    var $incdec_ptr6289111;
    var $maxdet_0_ph110;
    var $maxnearzero_1_ph109;
    var $maxpoint_0_ph108;
    var $incdec_ptr6291 = $incdec_ptr6289111;
    var $20 = $19;
    label = 29;
    break;
   case 29:
    var $20;
    var $incdec_ptr6291;
    var $21 = HEAP32[$simplex >> 2];
    var $22 = $20;
    var $call65 = _qh_setin($21, $22);
    var $tobool66 = ($call65 | 0) == 0;
    if ($tobool66) {
      label = 30;
      break;
    } else {
      label = 33;
      break;
    }
   case 30:
    var $call68 = _qh_detsimplex($20, $21, $k_0117, $nearzero);
    var $cmp69 = $call68 < 0;
    if ($cmp69) {
      label = 31;
      break;
    } else {
      var $cond = $call68;
      label = 32;
      break;
    }
   case 31:
    var $sub = -$call68;
    var $cond = $sub;
    label = 32;
    break;
   case 32:
    var $cond;
    var $cmp70 = $cond > $maxdet_0_ph110;
    if ($cmp70) {
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $23 = HEAP32[$incdec_ptr6291 >> 2];
    var $tobool63 = ($23 | 0) == 0;
    if ($tobool63) {
      var $maxpoint_0_ph101 = $maxpoint_0_ph108;
      var $maxnearzero_1_ph103 = $maxnearzero_1_ph109;
      var $maxdet_0_ph105 = $maxdet_0_ph110;
      label = 36;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $incdec_ptr62 = $incdec_ptr6291 + 4 | 0;
    var $incdec_ptr6291 = $incdec_ptr62;
    var $20 = $23;
    label = 29;
    break;
   case 35:
    var $24 = HEAP32[$nearzero >> 2];
    var $incdec_ptr6289 = $incdec_ptr6291 + 4 | 0;
    var $25 = HEAP32[$incdec_ptr6291 >> 2];
    var $tobool6390 = ($25 | 0) == 0;
    if ($tobool6390) {
      var $maxpoint_0_ph101 = $20;
      var $maxnearzero_1_ph103 = $24;
      var $maxdet_0_ph105 = $cond;
      label = 36;
      break;
    } else {
      var $maxpoint_0_ph108 = $20;
      var $maxnearzero_1_ph109 = $24;
      var $maxdet_0_ph110 = $cond;
      var $incdec_ptr6289111 = $incdec_ptr6289;
      var $19 = $25;
      label = 28;
      break;
    }
   case 36:
    var $maxdet_0_ph105;
    var $maxnearzero_1_ph103;
    var $maxpoint_0_ph101;
    var $tobool76 = ($maxpoint_0_ph101 | 0) != 0;
    var $tobool77 = ($maxnearzero_1_ph103 | 0) == 0;
    var $or_cond = $tobool76 & $tobool77;
    if ($or_cond) {
      var $maxnearzero_5 = 0;
      var $maxpoint_4 = $maxpoint_0_ph101;
      label = 50;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $26 = HEAP32[5244536 >> 2];
    var $inc = $26 + 1 | 0;
    HEAP32[5244536 >> 2] = $inc;
    var $27 = HEAP32[5247036 >> 2];
    var $tobool86 = ($27 | 0) != 0;
    if ($tobool76) {
      label = 40;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    if ($tobool86) {
      var $maxnearzero_2728085 = $maxnearzero_1_ph103;
      var $maxdet_1737886 = $maxdet_0_ph105;
      label = 39;
      break;
    } else {
      var $maxdet_17377 = $maxdet_0_ph105;
      var $maxnearzero_27279 = $maxnearzero_1_ph103;
      var $maxpoint_17181 = 0;
      label = 42;
      break;
    }
   case 39:
    var $maxdet_1737886;
    var $maxnearzero_2728085;
    _qh_fprintf(5269796);
    var $maxdet_17377 = $maxdet_1737886;
    var $maxnearzero_27279 = $maxnearzero_2728085;
    var $maxpoint_17181 = 0;
    label = 42;
    break;
   case 40:
    if ($tobool86) {
      label = 41;
      break;
    } else {
      var $maxdet_17377 = $maxdet_0_ph105;
      var $maxnearzero_27279 = $maxnearzero_1_ph103;
      var $maxpoint_17181 = $maxpoint_0_ph101;
      label = 42;
      break;
    }
   case 41:
    _qh_fprintf(5269336);
    var $maxdet_17377 = $maxdet_0_ph105;
    var $maxnearzero_27279 = $maxnearzero_1_ph103;
    var $maxpoint_17181 = $maxpoint_0_ph101;
    label = 42;
    break;
   case 42:
    var $maxpoint_17181;
    var $maxnearzero_27279;
    var $maxdet_17377;
    var $28 = HEAP32[5247504 >> 2];
    var $mul92 = $28 * $numpoints & -1;
    var $add_ptr93 = $points + ($mul92 << 3) | 0;
    var $cmp9592 = ($mul92 | 0) > 0;
    if ($cmp9592) {
      var $point_193 = $points;
      var $maxpoint_295 = $maxpoint_17181;
      var $maxnearzero_396 = $maxnearzero_27279;
      var $maxdet_297 = $maxdet_17377;
      label = 43;
      break;
    } else {
      var $maxnearzero_5 = $maxnearzero_27279;
      var $maxpoint_4 = $maxpoint_17181;
      label = 50;
      break;
    }
   case 43:
    var $maxdet_297;
    var $maxnearzero_396;
    var $maxpoint_295;
    var $point_193;
    var $29 = HEAP32[5247016 >> 2];
    var $cmp97 = ($point_193 | 0) == ($29 | 0);
    if ($cmp97) {
      var $maxdet_3 = $maxdet_297;
      var $maxnearzero_4 = $maxnearzero_396;
      var $maxpoint_3 = $maxpoint_295;
      label = 49;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $30 = HEAP32[$simplex >> 2];
    var $31 = $point_193;
    var $call100 = _qh_setin($30, $31);
    var $tobool101 = ($call100 | 0) == 0;
    if ($tobool101) {
      label = 45;
      break;
    } else {
      var $maxdet_3 = $maxdet_297;
      var $maxnearzero_4 = $maxnearzero_396;
      var $maxpoint_3 = $maxpoint_295;
      label = 49;
      break;
    }
   case 45:
    var $call103 = _qh_detsimplex($point_193, $30, $k_0117, $nearzero);
    var $cmp104 = $call103 < 0;
    if ($cmp104) {
      label = 46;
      break;
    } else {
      var $cond109 = $call103;
      label = 47;
      break;
    }
   case 46:
    var $sub106 = -$call103;
    var $cond109 = $sub106;
    label = 47;
    break;
   case 47:
    var $cond109;
    var $cmp110 = $cond109 > $maxdet_297;
    if ($cmp110) {
      label = 48;
      break;
    } else {
      var $maxdet_3 = $maxdet_297;
      var $maxnearzero_4 = $maxnearzero_396;
      var $maxpoint_3 = $maxpoint_295;
      label = 49;
      break;
    }
   case 48:
    var $32 = HEAP32[$nearzero >> 2];
    var $maxdet_3 = $cond109;
    var $maxnearzero_4 = $32;
    var $maxpoint_3 = $point_193;
    label = 49;
    break;
   case 49:
    var $maxpoint_3;
    var $maxnearzero_4;
    var $maxdet_3;
    var $33 = HEAP32[5247504 >> 2];
    var $add_ptr115 = $point_193 + ($33 << 3) | 0;
    var $cmp95 = $add_ptr115 >>> 0 < $add_ptr93 >>> 0;
    if ($cmp95) {
      var $point_193 = $add_ptr115;
      var $maxpoint_295 = $maxpoint_3;
      var $maxnearzero_396 = $maxnearzero_4;
      var $maxdet_297 = $maxdet_3;
      label = 43;
      break;
    } else {
      var $maxnearzero_5 = $maxnearzero_4;
      var $maxpoint_4 = $maxpoint_3;
      label = 50;
      break;
    }
   case 50:
    var $maxpoint_4;
    var $maxnearzero_5;
    var $tobool118 = ($maxpoint_4 | 0) == 0;
    if ($tobool118) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    _qh_fprintf(5268492);
    _qh_errexit(5, 0, 0);
    label = 52;
    break;
   case 52:
    var $34 = $maxpoint_4;
    _qh_setappend($simplex, $34);
    var $35 = HEAP32[5247036 >> 2];
    var $cmp121 = ($35 | 0) > 0;
    if ($cmp121) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    _qh_fprintf(5268388);
    label = 54;
    break;
   case 54:
    var $inc127 = $k_0117 + 1 | 0;
    var $exitcond = ($inc127 | 0) == ($add53 | 0);
    if ($exitcond) {
      label = 55;
      break;
    } else {
      var $maxnearzero_0116 = $maxnearzero_5;
      var $k_0117 = $inc127;
      label = 23;
      break;
    }
   case 55:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_maxsimplex["X"] = 1;
function _qh_orientoutside($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5248924 >> 2];
    _qh_distplane($0, $facet, $dist);
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $1 > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 7;
      break;
    }
   case 3:
    var $2 = HEAP32[5247504 >> 2];
    var $tobool8 = ($2 | 0) == 0;
    if ($tobool8) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $normal = $facet + 24 | 0;
    var $dec9_in = $2;
    label = 5;
    break;
   case 5:
    var $dec9_in;
    var $dec9 = $dec9_in - 1 | 0;
    var $3 = HEAP32[$normal >> 2];
    var $arrayidx = $3 + ($dec9 << 3) | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$4;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$arrayidx >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool = ($dec9 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      var $dec9_in = $dec9;
      label = 5;
      break;
    }
   case 6:
    var $offset = $facet + 16 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub3 = -$5;
    HEAPF64[tempDoublePtr >> 3] = $sub3, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $retval_0 = 1;
    label = 7;
    break;
   case 7:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _qh_outerinner($facet, $outerplane, $innerplane) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $tobool = ($outerplane | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool1 = ($facet | 0) != 0;
    var $0 = HEAP32[5249060 >> 2];
    var $tobool2 = ($0 | 0) != 0;
    var $or_cond = $tobool1 & $tobool2;
    if ($or_cond) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _qh_maxouter();
    var $storemerge13 = $call;
    label = 6;
    break;
   case 5:
    var $maxoutside = $facet + 8 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $1 + $2;
    var $storemerge13 = $add;
    label = 6;
    break;
   case 6:
    var $storemerge13;
    HEAPF64[tempDoublePtr >> 3] = $storemerge13, HEAP32[$outerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$outerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $3 < 8.988465674311579e+307;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $4 = HEAP32[5247504 >> 2];
    var $conv = $4 | 0;
    var $call5 = Math.sqrt($conv);
    var $mul = $3 * $call5;
    var $add6 = $storemerge13 + $mul;
    HEAPF64[tempDoublePtr >> 3] = $add6, HEAP32[$outerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$outerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $tobool9 = ($innerplane | 0) == 0;
    if ($tobool9) {
      label = 19;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $tobool11 = ($facet | 0) == 0;
    if ($tobool11) {
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $vertices = $facet + 48 | 0;
    var $5 = HEAP32[$vertices >> 2];
    var $tobool13 = ($5 | 0) == 0;
    if ($tobool13) {
      var $mindist_1 = 1.7976931348623157e+308;
      label = 15;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p = $5 + 4 | 0;
    var $6 = $p;
    var $vertexp_0_ph = $6;
    var $mindist_0_ph = 1.7976931348623157e+308;
    label = 12;
    break;
   case 12:
    var $mindist_0_ph;
    var $vertexp_0_ph;
    var $vertexp_0 = $vertexp_0_ph;
    label = 13;
    break;
   case 13:
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $7 = HEAP32[$vertexp_0 >> 2];
    var $tobool16 = ($7 | 0) == 0;
    if ($tobool16) {
      var $mindist_1 = $mindist_0_ph;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $8 = HEAP32[5243424 >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    var $point = $7 + 8 | 0;
    var $9 = HEAP32[$point >> 2];
    _qh_distplane($9, $facet, $dist);
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp17 = $mindist_0_ph > $10;
    if ($cmp17) {
      var $vertexp_0_ph = $incdec_ptr;
      var $mindist_0_ph = $10;
      label = 12;
      break;
    } else {
      var $vertexp_0 = $incdec_ptr;
      label = 13;
      break;
    }
   case 15:
    var $mindist_1;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $mindist_1 - $11;
    var $storemerge = $sub;
    label = 17;
    break;
   case 16:
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub23 = $12 - $13;
    var $storemerge = $sub23;
    label = 17;
    break;
   case 17:
    var $storemerge;
    HEAPF64[tempDoublePtr >> 3] = $storemerge, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp25 = $14 < 8.988465674311579e+307;
    if ($cmp25) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $15 = HEAP32[5247504 >> 2];
    var $conv28 = $15 | 0;
    var $call29 = Math.sqrt($conv28);
    var $mul30 = $14 * $call29;
    var $sub31 = $storemerge - $mul30;
    HEAPF64[tempDoublePtr >> 3] = $sub31, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_outerinner["X"] = 1;
function _qh_pointdist($point1, $point2, $dim) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($dim | 0) > 0;
    var $sub = -$dim | 0;
    var $cond = $cmp ? $dim : $sub;
    var $tobool5 = ($cond | 0) == 0;
    if ($tobool5) {
      var $dist_0_lcssa = 0;
      label = 4;
      break;
    } else {
      var $point2_addr_06 = $point2;
      var $point1_addr_07 = $point1;
      var $dist_08 = 0;
      var $k_09 = $cond;
      label = 3;
      break;
    }
   case 3:
    var $k_09;
    var $dist_08;
    var $point1_addr_07;
    var $point2_addr_06;
    var $dec = $k_09 - 1 | 0;
    var $incdec_ptr = $point1_addr_07 + 8 | 0;
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point1_addr_07 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point1_addr_07 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr1 = $point2_addr_06 + 8 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$point2_addr_06 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$point2_addr_06 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub2 = $0 - $1;
    var $mul = $sub2 * $sub2;
    var $add = $dist_08 + $mul;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $dist_0_lcssa = $add;
      label = 4;
      break;
    } else {
      var $point2_addr_06 = $incdec_ptr1;
      var $point1_addr_07 = $incdec_ptr;
      var $dist_08 = $add;
      var $k_09 = $dec;
      label = 3;
      break;
    }
   case 4:
    var $dist_0_lcssa;
    if ($cmp) {
      label = 5;
      break;
    } else {
      var $retval_0 = $dist_0_lcssa;
      label = 6;
      break;
    }
   case 5:
    var $call = Math.sqrt($dist_0_lcssa);
    var $retval_0 = $call;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_printmatrix($numrow, $numcol) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_fprintf(5280308);
    var $cmp9 = ($numrow | 0) > 0;
    if ($cmp9) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $cmp26 = ($numcol | 0) > 0;
    var $i_010 = 0;
    label = 4;
    break;
   case 4:
    var $i_010;
    if ($cmp26) {
      var $k_08 = 0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $k_08;
    _qh_fprintf(5267656);
    var $inc = $k_08 + 1 | 0;
    var $exitcond = ($inc | 0) == ($numcol | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $k_08 = $inc;
      label = 5;
      break;
    }
   case 6:
    _qh_fprintf(5299656);
    var $inc5 = $i_010 + 1 | 0;
    var $exitcond11 = ($inc5 | 0) == ($numrow | 0);
    if ($exitcond11) {
      label = 7;
      break;
    } else {
      var $i_010 = $inc5;
      label = 4;
      break;
    }
   case 7:
    return;
  }
}
function _qh_projectinput() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247508 >> 2];
    var $1 = HEAP32[5247512 >> 2];
    var $add = $0 + 1 | 0;
    var $call = _qh_memalloc($add);
    _memset($call, 0, $add);
    var $2 = HEAP32[5247508 >> 2];
    var $cmp58 = ($2 | 0) > 0;
    if ($cmp58) {
      var $newdim_059 = $0;
      var $k_060 = 0;
      var $3 = $2;
      label = 3;
      break;
    } else {
      var $newdim_0_lcssa = $0;
      var $k_0_lcssa = 0;
      label = 7;
      break;
    }
   case 3:
    var $3;
    var $k_060;
    var $newdim_059;
    var $4 = HEAP32[5248596 >> 2];
    var $arrayidx = $4 + ($k_060 << 3) | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp1 = $5 == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      var $newdim_1 = $newdim_059;
      var $8 = $3;
      label = 6;
      break;
    }
   case 4:
    var $6 = HEAP32[5248592 >> 2];
    var $arrayidx2 = $6 + ($k_060 << 3) | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp3 = $7 == 0;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      var $newdim_1 = $newdim_059;
      var $8 = $3;
      label = 6;
      break;
    }
   case 5:
    var $arrayidx4 = $call + $k_060 | 0;
    HEAP8[$arrayidx4] = -1;
    var $dec = $newdim_059 - 1 | 0;
    var $_pre2 = HEAP32[5247508 >> 2];
    var $newdim_1 = $dec;
    var $8 = $_pre2;
    label = 6;
    break;
   case 6:
    var $8;
    var $newdim_1;
    var $inc = $k_060 + 1 | 0;
    var $cmp = ($inc | 0) < ($8 | 0);
    if ($cmp) {
      var $newdim_059 = $newdim_1;
      var $k_060 = $inc;
      var $3 = $8;
      label = 3;
      break;
    } else {
      var $newdim_0_lcssa = $newdim_1;
      var $k_0_lcssa = $inc;
      label = 7;
      break;
    }
   case 7:
    var $k_0_lcssa;
    var $newdim_0_lcssa;
    var $9 = HEAP32[5246996 >> 2];
    var $tobool = ($9 | 0) == 0;
    if ($tobool) {
      var $newdim_2 = $newdim_0_lcssa;
      var $newnum_0 = $1;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $arrayidx6 = $call + $k_0_lcssa | 0;
    HEAP8[$arrayidx6] = 1;
    var $inc7 = $newdim_0_lcssa + 1 | 0;
    var $10 = HEAP32[5246956 >> 2];
    var $not_tobool8 = ($10 | 0) != 0;
    var $inc10 = $not_tobool8 & 1;
    var $_inc10 = $inc10 + $1 | 0;
    var $newdim_2 = $inc7;
    var $newnum_0 = $_inc10;
    label = 9;
    break;
   case 9:
    var $newnum_0;
    var $newdim_2;
    var $11 = HEAP32[5247504 >> 2];
    var $cmp13 = ($newdim_2 | 0) == ($11 | 0);
    if ($cmp13) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5266036);
    _qh_errexit(5, 0, 0);
    label = 11;
    break;
   case 11:
    var $mul16 = $newnum_0 << 3;
    var $mul17 = $mul16 * $newdim_2 & -1;
    var $call18 = _qh_malloc($mul17);
    var $12 = $call18;
    var $tobool19 = ($call18 | 0) == 0;
    if ($tobool19) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5265588);
    _qh_errexit(4, 0, 0);
    label = 13;
    break;
   case 13:
    var $13 = HEAP32[5247508 >> 2];
    var $add22 = $13 + 1 | 0;
    var $14 = HEAP32[5247516 >> 2];
    var $15 = HEAP32[5247512 >> 2];
    _qh_projectpoints($call, $add22, $14, $15, $13, $12, $newdim_2);
    var $16 = HEAP32[5247036 >> 2];
    var $cmp23 = ($16 | 0) > 0;
    if ($cmp23) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5265256);
    label = 15;
    break;
   case 15:
    var $17 = HEAP32[5247508 >> 2];
    var $add26 = $17 + 1 | 0;
    var $18 = HEAP32[5248596 >> 2];
    var $add28 = $newdim_2 + 1 | 0;
    _qh_projectpoints($call, $add26, $18, 1, $add26, $18, $add28);
    var $19 = HEAP32[5247508 >> 2];
    var $add29 = $19 + 1 | 0;
    var $20 = HEAP32[5248592 >> 2];
    _qh_projectpoints($call, $add29, $20, 1, $add29, $20, $add28);
    var $21 = HEAP32[5247032 >> 2];
    var $tobool32 = ($21 | 0) == 0;
    if ($tobool32) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $22 = HEAP32[5247492 >> 2];
    var $tobool34 = ($22 | 0) == 0;
    if ($tobool34) {
      label = 17;
      break;
    } else {
      var $23 = $22;
      label = 18;
      break;
    }
   case 17:
    _qh_fprintf(5264848);
    _qh_errexit(5, 0, 0);
    var $_pre1 = HEAP32[5247492 >> 2];
    var $23 = $_pre1;
    label = 18;
    break;
   case 18:
    var $23;
    var $24 = HEAP32[5247508 >> 2];
    _qh_projectpoints($call, $24, $23, 1, $24, $23, $newdim_2);
    label = 19;
    break;
   case 19:
    var $25 = HEAP32[5247508 >> 2];
    var $add38 = $25 + 1 | 0;
    _qh_memfree($call, $add38);
    var $26 = HEAP32[5247520 >> 2];
    var $tobool40 = ($26 | 0) == 0;
    if ($tobool40) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $27 = HEAP32[5247516 >> 2];
    var $28 = $27;
    _qh_free($28);
    label = 21;
    break;
   case 21:
    HEAP32[5247516 >> 2] = $12;
    HEAP32[5247520 >> 2] = 1;
    var $29 = HEAP32[5246996 >> 2];
    var $tobool43 = ($29 | 0) != 0;
    var $30 = HEAP32[5246956 >> 2];
    var $tobool45 = ($30 | 0) != 0;
    var $or_cond = $tobool43 & $tobool45;
    if ($or_cond) {
      label = 22;
      break;
    } else {
      label = 37;
      break;
    }
   case 22:
    var $31 = HEAP32[5247504 >> 2];
    var $32 = HEAP32[5247512 >> 2];
    var $mul47 = $32 * $31 & -1;
    var $tobool5056 = ($31 | 0) == 1;
    if ($tobool5056) {
      var $maxboloid_0_ph = 0;
      var $coord_0_ph = $12;
      var $i_0_ph = $32;
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $dec4955 = $31 - 2 | 0;
    var $dec4957 = $dec4955;
    label = 24;
    break;
   case 24:
    var $dec4957;
    var $add_ptr_sum41 = $dec4957 + $mul47 | 0;
    var $arrayidx52 = $12 + ($add_ptr_sum41 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx52 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $dec49 = $dec4957 - 1 | 0;
    var $tobool50 = ($dec4957 | 0) == 0;
    if ($tobool50) {
      label = 25;
      break;
    } else {
      var $dec4957 = $dec49;
      label = 24;
      break;
    }
   case 25:
    var $_pre = HEAP32[5247512 >> 2];
    var $maxboloid_0_ph = 0;
    var $coord_0_ph = $12;
    var $i_0_ph = $_pre;
    label = 26;
    break;
   case 26:
    var $i_0_ph;
    var $coord_0_ph;
    var $maxboloid_0_ph;
    var $coord_0 = $coord_0_ph;
    var $i_0 = $i_0_ph;
    label = 27;
    break;
   case 27:
    var $i_0;
    var $coord_0;
    var $dec55 = $i_0 - 1 | 0;
    var $tobool56 = ($i_0 | 0) == 0;
    var $33 = HEAP32[5247504 >> 2];
    var $k_342 = $33 - 1 | 0;
    if ($tobool56) {
      label = 31;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $cmp6047 = ($k_342 | 0) > 0;
    if ($cmp6047) {
      var $coord_148 = $coord_0;
      var $k_249 = 0;
      var $paraboloid_050 = 0;
      label = 29;
      break;
    } else {
      var $coord_1_lcssa = $coord_0;
      var $paraboloid_0_lcssa = 0;
      label = 30;
      break;
    }
   case 29:
    var $paraboloid_050;
    var $k_249;
    var $coord_148;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_148 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_148 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul62 = $34 * $34;
    var $add63 = $paraboloid_050 + $mul62;
    var $add_ptr_sum = $k_249 + $mul47 | 0;
    var $arrayidx64 = $12 + ($add_ptr_sum << 3) | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx64 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx64 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add65 = $34 + $35;
    HEAPF64[tempDoublePtr >> 3] = $add65, HEAP32[$arrayidx64 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx64 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $incdec_ptr = $coord_148 + 8 | 0;
    var $inc67 = $k_249 + 1 | 0;
    var $36 = HEAP32[5247504 >> 2];
    var $sub59 = $36 - 1 | 0;
    var $cmp60 = ($inc67 | 0) < ($sub59 | 0);
    if ($cmp60) {
      var $coord_148 = $incdec_ptr;
      var $k_249 = $inc67;
      var $paraboloid_050 = $add63;
      label = 29;
      break;
    } else {
      var $coord_1_lcssa = $incdec_ptr;
      var $paraboloid_0_lcssa = $add63;
      label = 30;
      break;
    }
   case 30:
    var $paraboloid_0_lcssa;
    var $coord_1_lcssa;
    var $incdec_ptr69 = $coord_1_lcssa + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $paraboloid_0_lcssa, HEAP32[$coord_1_lcssa >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_1_lcssa + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp70 = $maxboloid_0_ph < $paraboloid_0_lcssa;
    if ($cmp70) {
      var $maxboloid_0_ph = $paraboloid_0_lcssa;
      var $coord_0_ph = $incdec_ptr69;
      var $i_0_ph = $dec55;
      label = 26;
      break;
    } else {
      var $coord_0 = $incdec_ptr69;
      var $i_0 = $dec55;
      label = 27;
      break;
    }
   case 31:
    var $tobool7743 = ($k_342 | 0) == 0;
    if ($tobool7743) {
      var $coord_2_lcssa = $coord_0;
      label = 35;
      break;
    } else {
      var $coord_244 = $coord_0;
      var $k_345 = $k_342;
      label = 32;
      break;
    }
   case 32:
    var $k_345;
    var $coord_244;
    var $37 = HEAP32[5247512 >> 2];
    var $conv = $37 | 0;
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_244 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_244 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $38 / $conv;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$coord_244 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_244 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_3 = $k_345 - 1 | 0;
    var $tobool77 = ($k_3 | 0) == 0;
    if ($tobool77) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $incdec_ptr79 = $coord_244 + 8 | 0;
    var $coord_244 = $incdec_ptr79;
    var $k_345 = $k_3;
    label = 32;
    break;
   case 34:
    var $scevgep = $coord_0 + ($k_342 << 3) | 0;
    var $coord_2_lcssa = $scevgep;
    label = 35;
    break;
   case 35:
    var $coord_2_lcssa;
    var $mul81 = $maxboloid_0_ph * 1.1;
    HEAPF64[tempDoublePtr >> 3] = $mul81, HEAP32[$coord_2_lcssa >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_2_lcssa + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $39 = HEAP32[5247512 >> 2];
    var $inc83 = $39 + 1 | 0;
    HEAP32[5247512 >> 2] = $inc83;
    var $40 = HEAP32[5247036 >> 2];
    var $tobool84 = ($40 | 0) == 0;
    if ($tobool84) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    _qh_fprintf(5264496);
    label = 39;
    break;
   case 37:
    if ($tobool43) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $41 = HEAP32[5247504 >> 2];
    var $42 = HEAP32[5247512 >> 2];
    _qh_setdelaunay($41, $42, $12);
    label = 39;
    break;
   case 39:
    return;
  }
}
_qh_projectinput["X"] = 1;
function _qh_projectpoints($project, $n, $points, $numpoints, $dim, $newpoints, $newdim) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp35 = ($n | 0) > 0;
    if ($cmp35) {
      var $testdim_036 = $dim;
      var $k_037 = 0;
      label = 3;
      break;
    } else {
      var $testdim_0_lcssa = $dim;
      label = 4;
      break;
    }
   case 3:
    var $k_037;
    var $testdim_036;
    var $arrayidx = $project + $k_037 | 0;
    var $0 = HEAP8[$arrayidx];
    var $conv = $0 << 24 >> 24;
    var $add = $conv + $testdim_036 | 0;
    var $inc = $k_037 + 1 | 0;
    var $exitcond = ($inc | 0) == ($n | 0);
    if ($exitcond) {
      var $testdim_0_lcssa = $add;
      label = 4;
      break;
    } else {
      var $testdim_036 = $add;
      var $k_037 = $inc;
      label = 3;
      break;
    }
   case 4:
    var $testdim_0_lcssa;
    var $cmp1 = ($testdim_0_lcssa | 0) == ($newdim | 0);
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5264108);
    _qh_errexit(5, 0, 0);
    label = 6;
    break;
   case 6:
    if ($cmp35) {
      label = 7;
      break;
    } else {
      label = 18;
      break;
    }
   case 7:
    var $tobool26 = ($numpoints | 0) == 0;
    var $oldk_031 = 0;
    var $newk_032 = 0;
    var $j_033 = 0;
    label = 8;
    break;
   case 8:
    var $j_033;
    var $newk_032;
    var $oldk_031;
    var $arrayidx7 = $project + $j_033 | 0;
    var $1 = HEAP8[$arrayidx7];
    var $cmp9 = $1 << 24 >> 24 == -1;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $inc12 = $oldk_031 + 1 | 0;
    var $newk_1 = $newk_032;
    var $oldk_2 = $inc12;
    label = 16;
    break;
   case 10:
    var $inc13 = $newk_032 + 1 | 0;
    var $add_ptr = $newpoints + ($newk_032 << 3) | 0;
    var $cmp16 = $1 << 24 >> 24 == 1;
    if ($cmp16) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $cmp19 = ($oldk_031 | 0) < ($dim | 0);
    if ($cmp19) {
      var $oldk_1 = $oldk_031;
      label = 13;
      break;
    } else {
      var $newk_2 = $inc13;
      var $oldk_3 = $oldk_031;
      label = 17;
      break;
    }
   case 12:
    var $inc25 = $oldk_031 + 1 | 0;
    var $oldk_1 = $inc25;
    label = 13;
    break;
   case 13:
    var $oldk_1;
    if ($tobool26) {
      var $newk_1 = $inc13;
      var $oldk_2 = $oldk_1;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $oldp_0 = $points + ($oldk_031 << 3) | 0;
    var $i_027 = $numpoints;
    var $newp_028 = $add_ptr;
    var $oldp_129 = $oldp_0;
    label = 15;
    break;
   case 15:
    var $oldp_129;
    var $newp_028;
    var $i_027;
    var $dec = $i_027 - 1 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$oldp_129 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$oldp_129 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $2, HEAP32[$newp_028 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$newp_028 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $add_ptr30 = $newp_028 + ($newdim << 3) | 0;
    var $add_ptr31 = $oldp_129 + ($dim << 3) | 0;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $newk_1 = $inc13;
      var $oldk_2 = $oldk_1;
      label = 16;
      break;
    } else {
      var $i_027 = $dec;
      var $newp_028 = $add_ptr30;
      var $oldp_129 = $add_ptr31;
      label = 15;
      break;
    }
   case 16:
    var $oldk_2;
    var $newk_1;
    var $cmp34 = ($oldk_2 | 0) < ($dim | 0);
    if ($cmp34) {
      var $newk_2 = $newk_1;
      var $oldk_3 = $oldk_2;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $oldk_3;
    var $newk_2;
    var $inc39 = $j_033 + 1 | 0;
    var $cmp4 = ($inc39 | 0) < ($n | 0);
    if ($cmp4) {
      var $oldk_031 = $oldk_3;
      var $newk_032 = $newk_2;
      var $j_033 = $inc39;
      label = 8;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $3 = HEAP32[5247036 >> 2];
    var $cmp41 = ($3 | 0) > 0;
    if ($cmp41) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5263756);
    label = 20;
    break;
   case 20:
    return;
  }
}
_qh_projectpoints["X"] = 1;
function _qh_rotateinput($rows) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247520 >> 2];
    var $tobool = ($0 | 0) == 0;
    var $1 = HEAP32[5247516 >> 2];
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $4 = $1;
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[5247512 >> 2];
    var $3 = HEAP32[5247504 >> 2];
    var $call = _qh_copypoints($1, $2, $3);
    HEAP32[5247516 >> 2] = $call;
    HEAP32[5247520 >> 2] = 1;
    var $4 = $call;
    label = 4;
    break;
   case 4:
    var $4;
    var $5 = HEAP32[5247512 >> 2];
    var $6 = HEAP32[5247504 >> 2];
    _qh_rotatepoints($4, $5, $6, $rows);
    return;
  }
}
function _qh_rotatepoints($points, $numpoints, $dim, $row) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_printmatrix($dim, $dim);
    label = 4;
    break;
   case 4:
    var $tobool33 = ($numpoints | 0) == 0;
    if ($tobool33) {
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $arrayidx = $row + ($dim << 2) | 0;
    var $cmp222 = ($dim | 0) > 0;
    var $tobool1427 = ($dim | 0) == 0;
    var $1 = -$dim | 0;
    var $point_034 = $points;
    var $coord_036 = 0;
    var $dec37_in = $numpoints;
    var $points_pn = $points;
    label = 6;
    break;
   case 6:
    var $points_pn;
    var $dec37_in;
    var $coord_036;
    var $point_034;
    var $indvars_iv = $points_pn + ($dim << 3) | 0;
    var $dec37 = $dec37_in - 1 | 0;
    var $2 = HEAP32[$arrayidx >> 2];
    if ($cmp222) {
      var $newval_023 = $2;
      var $i_024 = 0;
      label = 7;
      break;
    } else {
      var $coord_1_lcssa = $coord_036;
      var $newval_0_lcssa = $2;
      label = 12;
      break;
    }
   case 7:
    var $i_024;
    var $newval_023;
    if ($tobool1427) {
      var $coord_2_lcssa = $point_034;
      var $sum_0_lcssa = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $arrayidx4 = $row + ($i_024 << 2) | 0;
    var $3 = HEAP32[$arrayidx4 >> 2];
    var $rowi_017 = $3;
    var $coord_218 = $point_034;
    var $sum_019 = 0;
    var $k_020 = $dim;
    label = 9;
    break;
   case 9:
    var $k_020;
    var $sum_019;
    var $coord_218;
    var $rowi_017;
    var $dec6 = $k_020 - 1 | 0;
    var $incdec_ptr = $rowi_017 + 8 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$rowi_017 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$rowi_017 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr9 = $coord_218 + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_218 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_218 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $4 * $5;
    var $add = $sum_019 + $mul;
    var $tobool7 = ($dec6 | 0) == 0;
    if ($tobool7) {
      var $coord_2_lcssa = $indvars_iv;
      var $sum_0_lcssa = $add;
      label = 10;
      break;
    } else {
      var $rowi_017 = $incdec_ptr;
      var $coord_218 = $incdec_ptr9;
      var $sum_019 = $add;
      var $k_020 = $dec6;
      label = 9;
      break;
    }
   case 10:
    var $sum_0_lcssa;
    var $coord_2_lcssa;
    var $incdec_ptr10 = $newval_023 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sum_0_lcssa, HEAP32[$newval_023 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$newval_023 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $i_024 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dim | 0);
    if ($exitcond) {
      label = 11;
      break;
    } else {
      var $newval_023 = $incdec_ptr10;
      var $i_024 = $inc;
      label = 7;
      break;
    }
   case 11:
    var $scevgep40 = $2 + ($dim << 3) | 0;
    var $coord_1_lcssa = $coord_2_lcssa;
    var $newval_0_lcssa = $scevgep40;
    label = 12;
    break;
   case 12:
    var $newval_0_lcssa;
    var $coord_1_lcssa;
    if ($tobool1427) {
      var $coord_3_lcssa = $coord_1_lcssa;
      label = 15;
      break;
    } else {
      var $coord_328 = $coord_1_lcssa;
      var $newval_129 = $newval_0_lcssa;
      var $k_130 = $dim;
      label = 13;
      break;
    }
   case 13:
    var $k_130;
    var $newval_129;
    var $coord_328;
    var $dec13 = $k_130 - 1 | 0;
    var $incdec_ptr16 = $newval_129 - 8 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$incdec_ptr16 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$incdec_ptr16 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr17 = $coord_328 - 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $6, HEAP32[$incdec_ptr17 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$incdec_ptr17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool14 = ($dec13 | 0) == 0;
    if ($tobool14) {
      label = 14;
      break;
    } else {
      var $coord_328 = $incdec_ptr17;
      var $newval_129 = $incdec_ptr16;
      var $k_130 = $dec13;
      label = 13;
      break;
    }
   case 14:
    var $scevgep41 = $coord_1_lcssa + ($1 << 3) | 0;
    var $coord_3_lcssa = $scevgep41;
    label = 15;
    break;
   case 15:
    var $coord_3_lcssa;
    var $tobool = ($dec37 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $add_ptr = $point_034 + ($dim << 3) | 0;
    var $point_034 = $add_ptr;
    var $coord_036 = $coord_3_lcssa;
    var $dec37_in = $dec37;
    var $points_pn = $indvars_iv;
    label = 6;
    break;
   case 17:
    return;
  }
}
_qh_rotatepoints["X"] = 1;
function _qh_scaleinput() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247520 >> 2];
    var $tobool = ($0 | 0) == 0;
    var $1 = HEAP32[5247516 >> 2];
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $4 = $1;
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[5247512 >> 2];
    var $3 = HEAP32[5247504 >> 2];
    var $call = _qh_copypoints($1, $2, $3);
    HEAP32[5247516 >> 2] = $call;
    HEAP32[5247520 >> 2] = 1;
    var $4 = $call;
    label = 4;
    break;
   case 4:
    var $4;
    var $5 = HEAP32[5247512 >> 2];
    var $6 = HEAP32[5247504 >> 2];
    var $7 = HEAP32[5248596 >> 2];
    var $8 = HEAP32[5248592 >> 2];
    _qh_scalepoints($4, $5, $6, $7, $8);
    return;
  }
}
function _qh_scalepoints($points, $numpoints, $dim, $newlows, $newhighs) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $nearzero = __stackBase__;
    HEAP32[$nearzero >> 2] = 0;
    var $cmp85 = ($dim | 0) > 0;
    if ($cmp85) {
      label = 3;
      break;
    } else {
      label = 23;
      break;
    }
   case 3:
    var $tobool72 = ($numpoints | 0) == 0;
    var $sub = $dim - 1 | 0;
    var $k_086 = 0;
    label = 4;
    break;
   case 4:
    var $k_086;
    var $arrayidx = $newhighs + ($k_086 << 3) | 0;
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx1 = $newlows + ($k_086 << 3) | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp2 = $0 > 8.988465674311579e+307;
    var $cmp3 = $1 < -8.988465674311579e+307;
    var $or_cond = $cmp2 & $cmp3;
    if ($or_cond) {
      label = 22;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $add_ptr = $points + ($k_086 << 3) | 0;
    if ($tobool72) {
      var $low_0_lcssa = 1.7976931348623157e+308;
      var $high_0_lcssa = -1.7976931348623157e+308;
      label = 7;
      break;
    } else {
      var $i_073 = $numpoints;
      var $coord_074 = $add_ptr;
      var $low_075 = 1.7976931348623157e+308;
      var $high_076 = -1.7976931348623157e+308;
      label = 6;
      break;
    }
   case 6:
    var $high_076;
    var $low_075;
    var $coord_074;
    var $i_073;
    var $dec = $i_073 - 1 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_074 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_074 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp6 = $low_075 > $2;
    var $low_1 = $cmp6 ? $2 : $low_075;
    var $cmp9 = $high_076 < $2;
    var $high_1 = $cmp9 ? $2 : $high_076;
    var $add_ptr12 = $coord_074 + ($dim << 3) | 0;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      var $low_0_lcssa = $low_1;
      var $high_0_lcssa = $high_1;
      label = 7;
      break;
    } else {
      var $i_073 = $dec;
      var $coord_074 = $add_ptr12;
      var $low_075 = $low_1;
      var $high_076 = $high_1;
      label = 6;
      break;
    }
   case 7:
    var $high_0_lcssa;
    var $low_0_lcssa;
    var $newhigh_0 = $cmp2 ? $high_0_lcssa : $0;
    var $newlow_0 = $cmp3 ? $low_0_lcssa : $1;
    var $3 = HEAP32[5246996 >> 2];
    var $tobool19 = ($3 | 0) == 0;
    if ($tobool19) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $cmp21 = ($k_086 | 0) == ($sub | 0);
    var $cmp23 = $newhigh_0 < $newlow_0;
    var $or_cond71 = $cmp21 & $cmp23;
    if ($or_cond71) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5261428);
    _qh_errexit(1, 0, 0);
    label = 10;
    break;
   case 10:
    var $sub26 = $newhigh_0 - $newlow_0;
    var $sub27 = $high_0_lcssa - $low_0_lcssa;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248664 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248668 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_divzero($sub26, $sub27, $4, $nearzero);
    var $5 = HEAP32[$nearzero >> 2];
    var $tobool28 = ($5 | 0) == 0;
    if ($tobool28) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _qh_fprintf(5260884);
    _qh_errexit(1, 0, 0);
    label = 12;
    break;
   case 12:
    var $mul = $newlow_0 * $high_0_lcssa;
    var $mul31 = $low_0_lcssa * $newhigh_0;
    var $sub32 = $mul - $mul31;
    var $div = $sub32 / $sub27;
    if ($tobool72) {
      label = 20;
      break;
    } else {
      var $i_179 = $numpoints;
      var $coord_180 = $add_ptr;
      label = 13;
      break;
    }
   case 13:
    var $coord_180;
    var $i_179;
    var $dec36 = $i_179 - 1 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_180 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_180 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul39 = $call * $6;
    var $add = $div + $mul39;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$coord_180 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_180 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $add_ptr41 = $coord_180 + ($dim << 3) | 0;
    var $tobool37 = ($dec36 | 0) == 0;
    if ($tobool37) {
      label = 14;
      break;
    } else {
      var $i_179 = $dec36;
      var $coord_180 = $add_ptr41;
      label = 13;
      break;
    }
   case 14:
    var $cmp44 = $newlow_0 < $newhigh_0;
    var $newlow_0_newhigh_0 = $cmp44 ? $newlow_0 : $newhigh_0;
    var $newhigh_0_newlow_0 = $cmp44 ? $newhigh_0 : $newlow_0;
    if ($tobool72) {
      label = 20;
      break;
    } else {
      var $coord_283 = $add_ptr;
      var $dec4884_in = $numpoints;
      label = 15;
      break;
    }
   case 15:
    var $dec4884_in;
    var $coord_283;
    var $dec4884 = $dec4884_in - 1 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_283 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_283 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp51 = $7 > $newhigh_0_newlow_0;
    if ($cmp51) {
      label = 16;
      break;
    } else {
      var $8 = $7;
      label = 17;
      break;
    }
   case 16:
    HEAPF64[tempDoublePtr >> 3] = $newhigh_0_newlow_0, HEAP32[$coord_283 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_283 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $8 = $newhigh_0_newlow_0;
    label = 17;
    break;
   case 17:
    var $8;
    var $cmp54 = $8 < $newlow_0_newhigh_0;
    if ($cmp54) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAPF64[tempDoublePtr >> 3] = $newlow_0_newhigh_0, HEAP32[$coord_283 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_283 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 19;
    break;
   case 19:
    var $add_ptr58 = $coord_283 + ($dim << 3) | 0;
    var $tobool49 = ($dec4884 | 0) == 0;
    if ($tobool49) {
      label = 20;
      break;
    } else {
      var $coord_283 = $add_ptr58;
      var $dec4884_in = $dec4884;
      label = 15;
      break;
    }
   case 20:
    var $9 = HEAP32[5247036 >> 2];
    var $tobool60 = ($9 | 0) == 0;
    if ($tobool60) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_fprintf(5260444);
    label = 22;
    break;
   case 22:
    var $inc = $k_086 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dim | 0);
    if ($exitcond) {
      label = 23;
      break;
    } else {
      var $k_086 = $inc;
      label = 4;
      break;
    }
   case 23:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_scalepoints["X"] = 1;
function _qh_scalelast($points, $numpoints, $dim, $low, $high, $newhigh) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $nearzero = __stackBase__;
    HEAP32[$nearzero >> 2] = 0;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5262912);
    label = 4;
    break;
   case 4:
    HEAPF64[tempDoublePtr >> 3] = $low, HEAP32[5249228 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249232 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $high, HEAP32[5249236 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249240 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $newhigh, HEAP32[5249244 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249248 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub = $high - $low;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248664 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248668 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_divzero($newhigh, $sub, $1, $nearzero);
    var $2 = HEAP32[$nearzero >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $3 = HEAP32[5246996 >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_fprintf(5262320);
    label = 8;
    break;
   case 7:
    _qh_fprintf(5261868);
    label = 8;
    break;
   case 8:
    _qh_errexit(1, 0, 0);
    label = 9;
    break;
   case 9:
    var $sub7 = -$low;
    var $mul = $sub7 * $newhigh;
    var $div = $mul / $sub;
    var $tobool1019 = ($numpoints | 0) == 0;
    if ($tobool1019) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $add_ptr_sum = $dim - 1 | 0;
    var $add_ptr9 = $points + ($add_ptr_sum << 3) | 0;
    var $coord_020 = $add_ptr9;
    var $i_021 = $numpoints;
    label = 11;
    break;
   case 11:
    var $i_021;
    var $coord_020;
    var $dec = $i_021 - 1 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_020 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_020 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul11 = $call * $4;
    var $add = $div + $mul11;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$coord_020 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_020 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $add_ptr12 = $coord_020 + ($dim << 3) | 0;
    var $tobool10 = ($dec | 0) == 0;
    if ($tobool10) {
      label = 12;
      break;
    } else {
      var $coord_020 = $add_ptr12;
      var $i_021 = $dec;
      label = 11;
      break;
    }
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_sharpnewfacets() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247504 >> 2];
    var $mul = $0 << 2;
    var $call = _qh_memalloc($mul);
    var $1 = $call;
    var $2 = HEAP32[5248952 >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      var $issharp_2 = 0;
      label = 13;
      break;
    } else {
      var $facet_022 = $2;
      label = 3;
      break;
    }
   case 3:
    var $facet_022;
    var $next = $facet_022 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      var $issharp_2 = 0;
      label = 13;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = HEAP32[5248952 >> 2];
    var $cmp = ($facet_022 | 0) == ($4 | 0);
    var $5 = HEAP32[5247504 >> 2];
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    var $tobool518 = ($5 | 0) == 0;
    if ($tobool518) {
      var $11 = $3;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $normal = $facet_022 + 24 | 0;
    var $dec19_in = $5;
    label = 8;
    break;
   case 7:
    var $normal14 = $facet_022 + 24 | 0;
    var $k_1 = $5;
    label = 9;
    break;
   case 8:
    var $dec19_in;
    var $dec19 = $dec19_in - 1 | 0;
    var $6 = HEAP32[$normal >> 2];
    var $arrayidx = $6 + ($dec19 << 3) | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp7 = $7 > 0;
    var $conv = $cmp7 & 1;
    var $arrayidx8 = $1 + ($dec19 << 2) | 0;
    HEAP32[$arrayidx8 >> 2] = $conv;
    var $tobool5 = ($dec19 | 0) == 0;
    if ($tobool5) {
      label = 11;
      break;
    } else {
      var $dec19_in = $dec19;
      label = 8;
      break;
    }
   case 9:
    var $k_1;
    var $dec10 = $k_1 - 1 | 0;
    var $tobool11 = ($k_1 | 0) == 0;
    if ($tobool11) {
      var $11 = $3;
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $arrayidx13 = $1 + ($dec10 << 2) | 0;
    var $8 = HEAP32[$arrayidx13 >> 2];
    var $9 = HEAP32[$normal14 >> 2];
    var $arrayidx15 = $9 + ($dec10 << 3) | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx15 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx15 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp16 = $10 > 0;
    var $conv17 = $cmp16 & 1;
    var $cmp18 = ($8 | 0) == ($conv17 | 0);
    if ($cmp18) {
      var $k_1 = $dec10;
      label = 9;
      break;
    } else {
      var $issharp_2 = 1;
      label = 13;
      break;
    }
   case 11:
    var $_pre = HEAP32[$next >> 2];
    var $11 = $_pre;
    label = 12;
    break;
   case 12:
    var $11;
    var $tobool1 = ($11 | 0) == 0;
    if ($tobool1) {
      var $issharp_2 = 0;
      label = 13;
      break;
    } else {
      var $facet_022 = $11;
      label = 3;
      break;
    }
   case 13:
    var $issharp_2;
    var $12 = HEAP32[5247504 >> 2];
    var $mul29 = $12 << 2;
    _qh_memfree($call, $mul29);
    var $13 = HEAP32[5247036 >> 2];
    var $cmp30 = ($13 | 0) > 2;
    if ($cmp30) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5256952);
    label = 15;
    break;
   case 15:
    return $issharp_2;
  }
}
_qh_sharpnewfacets["X"] = 1;
function _qh_freebuffers() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 4;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5257780);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248708 >> 2];
    var $2 = $1;
    var $3 = HEAP32[5247504 >> 2];
    var $mul = $3 << 3;
    _qh_memfree($2, $mul);
    var $4 = HEAP32[5248588 >> 2];
    var $5 = $4;
    var $6 = HEAP32[5247508 >> 2];
    var $add = $6 << 3;
    var $mul1 = $add + 8 | 0;
    _qh_memfree($5, $mul1);
    var $7 = HEAP32[5248584 >> 2];
    var $8 = $7;
    var $9 = HEAP32[5247508 >> 2];
    var $add2 = $9 << 3;
    var $mul3 = $add2 + 8 | 0;
    _qh_memfree($8, $mul3);
    var $10 = HEAP32[5248596 >> 2];
    var $11 = $10;
    var $12 = HEAP32[5247508 >> 2];
    var $add4 = $12 << 3;
    var $mul5 = $add4 + 8 | 0;
    _qh_memfree($11, $mul5);
    var $13 = HEAP32[5248592 >> 2];
    var $14 = $13;
    var $15 = HEAP32[5247508 >> 2];
    var $add6 = $15 << 3;
    var $mul7 = $add6 + 8 | 0;
    _qh_memfree($14, $mul7);
    var $16 = HEAP32[5249188 >> 2];
    var $17 = $16;
    var $18 = HEAP32[5247504 >> 2];
    var $add8 = $18 + 1 | 0;
    var $mul9 = $18 << 3;
    var $mul10 = $mul9 * $add8 & -1;
    _qh_memfree($17, $mul10);
    var $19 = HEAP32[5249192 >> 2];
    var $20 = $19;
    var $21 = HEAP32[5247504 >> 2];
    var $add11 = $21 << 2;
    var $mul12 = $add11 + 4 | 0;
    _qh_memfree($20, $mul12);
    HEAP32[5248708 >> 2] = 0;
    HEAP32[5249188 >> 2] = 0;
    HEAP32[5249192 >> 2] = 0;
    HEAP32[5248584 >> 2] = 0;
    HEAP32[5248588 >> 2] = 0;
    HEAP32[5248592 >> 2] = 0;
    HEAP32[5248596 >> 2] = 0;
    _qh_setfree(5249180);
    _qh_setfree(5249184);
    _qh_setfree(5249224);
    var $22 = HEAP32[5249196 >> 2];
    var $tobool = ($22 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_free($22);
    label = 6;
    break;
   case 6:
    var $23 = HEAP32[5249204 >> 2];
    var $tobool15 = ($23 | 0) == 0;
    if ($tobool15) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $24 = $23;
    _qh_free($24);
    label = 8;
    break;
   case 8:
    var $25 = HEAP32[5249208 >> 2];
    var $tobool18 = ($25 | 0) == 0;
    if ($tobool18) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $26 = $25;
    _qh_free($26);
    label = 10;
    break;
   case 10:
    var $27 = HEAP32[5247492 >> 2];
    var $tobool21 = ($27 | 0) == 0;
    if ($tobool21) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $28 = $27;
    _qh_free($28);
    label = 12;
    break;
   case 12:
    var $29 = HEAP32[5247488 >> 2];
    var $tobool24 = ($29 | 0) == 0;
    if ($tobool24) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_free($29);
    label = 14;
    break;
   case 14:
    HEAP32[5247488 >> 2] = 0;
    HEAP32[5249196 >> 2] = 0;
    HEAP32[5249208 >> 2] = 0;
    HEAP32[5247492 >> 2] = 0;
    HEAP32[5249204 >> 2] = 0;
    var $30 = HEAP32[5247516 >> 2];
    var $tobool27 = ($30 | 0) != 0;
    var $31 = HEAP32[5247520 >> 2];
    var $tobool28 = ($31 | 0) != 0;
    var $or_cond = $tobool27 & $tobool28;
    if ($or_cond) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $32 = $30;
    _qh_free($32);
    HEAP32[5247516 >> 2] = 0;
    label = 16;
    break;
   case 16:
    var $33 = HEAP32[5247524 >> 2];
    var $tobool31 = ($33 | 0) != 0;
    var $34 = HEAP32[5247528 >> 2];
    var $tobool33 = ($34 | 0) != 0;
    var $or_cond1 = $tobool31 & $tobool33;
    if ($or_cond1) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $35 = $33;
    _qh_free($35);
    HEAP32[5247524 >> 2] = 0;
    label = 18;
    break;
   case 18:
    var $36 = HEAP32[5247036 >> 2];
    var $cmp36 = ($36 | 0) > 4;
    if ($cmp36) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5254768);
    label = 20;
    break;
   case 20:
    return;
  }
}
_qh_freebuffers["X"] = 1;
function _qh_freebuild() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5252040);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5249184 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_settruncate($1, 0);
    label = 6;
    break;
   case 6:
    var $2 = HEAP32[5248980 >> 2];
    var $tobool563 = ($2 | 0) == 0;
    if ($tobool563) {
      label = 10;
      break;
    } else {
      var $3 = $2;
      label = 7;
      break;
    }
   case 7:
    var $3;
    var $next = $3 | 0;
    var $4 = HEAP32[$next >> 2];
    var $tobool6 = ($4 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $5 = $3;
    _qh_memfree($5, 24);
    HEAP32[5248980 >> 2] = 0;
    HEAP32[5248988 >> 2] = 0;
    label = 10;
    break;
   case 9:
    _qh_delvertex($3);
    var $_pre4 = HEAP32[5248980 >> 2];
    var $tobool5 = ($_pre4 | 0) == 0;
    if ($tobool5) {
      label = 10;
      break;
    } else {
      var $3 = $_pre4;
      label = 7;
      break;
    }
   case 10:
    HEAP32[5248576 >> 2] = 0;
    HEAP32[5249040 >> 2] = 0;
    var $6 = HEAP32[5248940 >> 2];
    var $tobool2158 = ($6 | 0) == 0;
    if ($tobool2158) {
      label = 42;
      break;
    } else {
      var $facet_059 = $6;
      label = 12;
      break;
    }
   case 11:
    var $facet_153_pr = HEAP32[5248940 >> 2];
    var $tobool3954 = ($facet_153_pr | 0) == 0;
    if ($tobool3954) {
      label = 42;
      break;
    } else {
      var $facet_155 = $facet_153_pr;
      label = 19;
      break;
    }
   case 12:
    var $facet_059;
    var $next23 = $facet_059 + 44 | 0;
    var $7 = HEAP32[$next23 >> 2];
    var $tobool24 = ($7 | 0) == 0;
    if ($tobool24) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $ridges = $facet_059 + 52 | 0;
    var $8 = HEAP32[$ridges >> 2];
    var $tobool27 = ($8 | 0) == 0;
    if ($tobool27) {
      var $facet_059 = $7;
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p = $8 + 4 | 0;
    var $9 = HEAP32[$p >> 2];
    var $tobool3156 = ($9 | 0) == 0;
    if ($tobool3156) {
      var $18 = $7;
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $10 = $9;
    var $11 = $p;
    var $ridgep_057 = $11;
    var $12 = $10;
    label = 16;
    break;
   case 16:
    var $12;
    var $ridgep_057;
    var $incdec_ptr = $ridgep_057 + 4 | 0;
    var $13 = $12 + 12 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & -16777217;
    HEAP32[$14 >> 2] = $16;
    var $17 = HEAP32[$incdec_ptr >> 2];
    var $tobool31 = ($17 | 0) == 0;
    if ($tobool31) {
      label = 17;
      break;
    } else {
      var $ridgep_057 = $incdec_ptr;
      var $12 = $17;
      label = 16;
      break;
    }
   case 17:
    var $_pre3 = HEAP32[$next23 >> 2];
    var $18 = $_pre3;
    label = 18;
    break;
   case 18:
    var $18;
    var $tobool21 = ($18 | 0) == 0;
    if ($tobool21) {
      label = 11;
      break;
    } else {
      var $facet_059 = $18;
      label = 12;
      break;
    }
   case 19:
    var $facet_155;
    var $next41 = $facet_155 + 44 | 0;
    var $19 = HEAP32[$next41 >> 2];
    var $tobool42 = ($19 | 0) == 0;
    if ($tobool42) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $_pr = HEAP32[5248940 >> 2];
    var $tobool7449 = ($_pr | 0) == 0;
    if ($tobool7449) {
      label = 42;
      break;
    } else {
      var $37 = $_pr;
      label = 32;
      break;
    }
   case 21:
    var $20 = $facet_155 + 76 | 0;
    var $21 = $20;
    var $22 = HEAP32[$21 >> 2];
    var $bf_clear = $22 & 2048;
    var $tobool46 = ($bf_clear | 0) == 0;
    if ($tobool46) {
      var $facet_155 = $19;
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $ridges48 = $facet_155 + 52 | 0;
    var $23 = HEAP32[$ridges48 >> 2];
    var $tobool49 = ($23 | 0) == 0;
    if ($tobool49) {
      var $facet_1 = $19;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $facet_1_pre = HEAP32[$next41 >> 2];
    var $facet_1 = $facet_1_pre;
    label = 24;
    break;
   case 24:
    var $facet_1;
    var $tobool39 = ($facet_1 | 0) == 0;
    if ($tobool39) {
      label = 20;
      break;
    } else {
      var $facet_155 = $facet_1;
      label = 19;
      break;
    }
   case 25:
    var $p54 = $23 + 4 | 0;
    var $24 = HEAP32[$p54 >> 2];
    var $tobool5751 = ($24 | 0) == 0;
    if ($tobool5751) {
      var $facet_1 = $19;
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $25 = $24;
    var $incdec_ptr565068 = $p54 + 4 | 0;
    var $incdec_ptr5650 = $incdec_ptr565068;
    var $incdec_ptr5652 = $incdec_ptr5650;
    var $26 = $25;
    label = 27;
    break;
   case 27:
    var $26;
    var $incdec_ptr5652;
    var $top = $26 + 4 | 0;
    var $27 = HEAP32[$top >> 2];
    var $cmp59 = ($27 | 0) == ($facet_155 | 0);
    if ($cmp59) {
      label = 28;
      break;
    } else {
      var $cond = $27;
      label = 29;
      break;
    }
   case 28:
    var $bottom = $26 + 8 | 0;
    var $28 = HEAP32[$bottom >> 2];
    var $cond = $28;
    label = 29;
    break;
   case 29:
    var $cond;
    var $29 = $cond + 76 | 0;
    var $30 = $29;
    var $31 = HEAP32[$30 >> 2];
    var $bf_clear62 = $31 & 2048;
    var $tobool63 = ($bf_clear62 | 0) == 0;
    if ($tobool63) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $32 = $26 + 12 | 0;
    var $33 = $32;
    var $34 = HEAP32[$33 >> 2];
    var $35 = $34 | 16777216;
    HEAP32[$33 >> 2] = $35;
    label = 31;
    break;
   case 31:
    var $incdec_ptr56 = $incdec_ptr5652 + 4 | 0;
    var $36 = HEAP32[$incdec_ptr5652 >> 2];
    var $tobool57 = ($36 | 0) == 0;
    if ($tobool57) {
      label = 23;
      break;
    } else {
      var $incdec_ptr5652 = $incdec_ptr56;
      var $26 = $36;
      label = 27;
      break;
    }
   case 32:
    var $37;
    var $ridges76 = $37 + 52 | 0;
    var $38 = HEAP32[$ridges76 >> 2];
    var $tobool77 = ($38 | 0) == 0;
    if ($tobool77) {
      label = 39;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $p82 = $38 + 4 | 0;
    var $39 = HEAP32[$p82 >> 2];
    var $tobool8547 = ($39 | 0) == 0;
    if ($tobool8547) {
      label = 39;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $40 = $39;
    var $incdec_ptr844669 = $p82 + 4 | 0;
    var $incdec_ptr8446 = $incdec_ptr844669;
    var $incdec_ptr8448 = $incdec_ptr8446;
    var $41 = $40;
    label = 35;
    break;
   case 35:
    var $41;
    var $incdec_ptr8448;
    var $42 = $41 + 12 | 0;
    var $43 = $42;
    var $44 = HEAP32[$43 >> 2];
    var $bf_clear88 = $44 & 16777216;
    var $tobool89 = ($bf_clear88 | 0) == 0;
    if ($tobool89) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $45 = $41;
    var $vertices = $41 | 0;
    _qh_setfree($vertices);
    _qh_memfree($45, 16);
    label = 38;
    break;
   case 37:
    var $46 = $44 | 16777216;
    HEAP32[$43 >> 2] = $46;
    label = 38;
    break;
   case 38:
    var $incdec_ptr84 = $incdec_ptr8448 + 4 | 0;
    var $47 = HEAP32[$incdec_ptr8448 >> 2];
    var $tobool85 = ($47 | 0) == 0;
    if ($tobool85) {
      label = 39;
      break;
    } else {
      var $incdec_ptr8448 = $incdec_ptr84;
      var $41 = $47;
      label = 35;
      break;
    }
   case 39:
    var $outsideset = $37 + 60 | 0;
    _qh_setfree($outsideset);
    var $coplanarset = $37 + 64 | 0;
    _qh_setfree($coplanarset);
    var $neighbors96 = $37 + 56 | 0;
    _qh_setfree($neighbors96);
    _qh_setfree($ridges76);
    var $vertices98 = $37 + 48 | 0;
    _qh_setfree($vertices98);
    var $next99 = $37 + 44 | 0;
    var $48 = HEAP32[$next99 >> 2];
    var $tobool100 = ($48 | 0) == 0;
    if ($tobool100) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $49 = $37;
    _qh_memfree($49, 80);
    HEAP32[5248940 >> 2] = 0;
    HEAP32[5248952 >> 2] = 0;
    HEAP32[5248956 >> 2] = 0;
    label = 42;
    break;
   case 41:
    _qh_delfacet($37);
    var $_pre = HEAP32[5248940 >> 2];
    var $tobool74 = ($_pre | 0) == 0;
    if ($tobool74) {
      label = 42;
      break;
    } else {
      var $37 = $_pre;
      label = 32;
      break;
    }
   case 42:
    _qh_setfree(5249176);
    var $50 = HEAP32[5248924 >> 2];
    var $51 = $50;
    var $52 = HEAP32[5248928 >> 2];
    _qh_memfree($51, $52);
    HEAP32[5248924 >> 2] = 0;
    var $53 = HEAP32[5249168 >> 2];
    var $tobool127 = ($53 | 0) == 0;
    if ($tobool127) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $p131 = $53 + 4 | 0;
    var $54 = HEAP32[$p131 >> 2];
    var $tobool13444 = ($54 | 0) == 0;
    if ($tobool13444) {
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $55 = $54;
    var $56 = $p131;
    var $mergep_045 = $56;
    var $57 = $55;
    label = 45;
    break;
   case 45:
    var $57;
    var $mergep_045;
    var $incdec_ptr133 = $mergep_045 + 4 | 0;
    var $58 = $57;
    _qh_memfree($58, 20);
    var $59 = HEAP32[$incdec_ptr133 >> 2];
    var $tobool134 = ($59 | 0) == 0;
    if ($tobool134) {
      label = 46;
      break;
    } else {
      var $mergep_045 = $incdec_ptr133;
      var $57 = $59;
      label = 45;
      break;
    }
   case 46:
    HEAP32[5249168 >> 2] = 0;
    HEAP32[5249172 >> 2] = 0;
    _qh_settempfree_all();
    return;
  }
}
_qh_freebuild["X"] = 1;
function _qh_freeqhull() {
  _qh_freeqhull2();
  return;
}
function _qh_freeqhull2() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5251736);
    label = 4;
    break;
   case 4:
    HEAP32[5249100 >> 2] = 1;
    _qh_freebuild();
    _qh_freebuffers();
    for (var $$dest = 5246932 >> 2, $$stop = $$dest + 585; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5249100 >> 2] = 1;
    return;
  }
}
function _qh_init_A($infile, $outfile, $errfile) {
  _qh_meminit($errfile);
  _qh_initqhull_start($infile, $outfile, $errfile);
  _qh_init_qhull_command();
  return;
}
function _qh_initqhull_start($infile, $outfile, $errfile) {
  _qh_initstatistics();
  _qh_initqhull_start2($infile, $outfile, $errfile);
  return;
}
function _qh_init_qhull_command() {
  _qh_argv_to_command();
  return;
}
function _qh_init_B($points, $numpoints, $dim) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_initqhull_globals($points, $numpoints, $dim);
    var $0 = HEAP32[5242896 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_initqhull_mem();
    label = 4;
    break;
   case 4:
    _qh_initqhull_buffers();
    _qh_initthresholds();
    var $1 = HEAP32[5247328 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $2 = HEAP32[5246996 >> 2];
    var $tobool1 = ($2 | 0) != 0;
    var $3 = HEAP32[5247324 >> 2];
    var $tobool2 = ($3 | 0) != 0;
    var $or_cond = $tobool1 & $tobool2;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_projectinput();
    label = 7;
    break;
   case 7:
    var $4 = HEAP32[5247384 >> 2];
    var $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_scaleinput();
    label = 9;
    break;
   case 9:
    var $5 = HEAP32[5247380 >> 2];
    var $cmp8 = ($5 | 0) > -1;
    if ($cmp8) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 10:
    var $6 = HEAP32[5249188 >> 2];
    var $7 = HEAP32[5247504 >> 2];
    var $8 = HEAP32[5249192 >> 2];
    _qh_randommatrix($6, $7, $8);
    var $9 = HEAP32[5246996 >> 2];
    var $tobool10 = ($9 | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $10 = HEAP32[5247504 >> 2];
    var $sub = $10 - 1 | 0;
    var $cmp127 = ($sub | 0) > 0;
    var $11 = HEAP32[5249192 >> 2];
    if ($cmp127) {
      var $k_08 = 0;
      var $12 = $11;
      label = 12;
      break;
    } else {
      var $_lcssa = $11;
      label = 13;
      break;
    }
   case 12:
    var $12;
    var $k_08;
    var $arrayidx = $12 + ($k_08 << 2) | 0;
    var $13 = HEAP32[$arrayidx >> 2];
    var $arrayidx13 = $13 + ($sub << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx13 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $14 = HEAP32[5249192 >> 2];
    var $arrayidx14 = $14 + ($sub << 2) | 0;
    var $15 = HEAP32[$arrayidx14 >> 2];
    var $arrayidx15 = $15 + ($k_08 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx15 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx15 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $k_08 + 1 | 0;
    var $16 = HEAP32[5249192 >> 2];
    var $exitcond = ($inc | 0) == ($sub | 0);
    if ($exitcond) {
      var $_lcssa = $16;
      label = 13;
      break;
    } else {
      var $k_08 = $inc;
      var $12 = $16;
      label = 12;
      break;
    }
   case 13:
    var $_lcssa;
    var $arrayidx16 = $_lcssa + ($sub << 2) | 0;
    var $17 = HEAP32[$arrayidx16 >> 2];
    var $arrayidx17 = $17 + ($sub << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx17 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 14;
    break;
   case 14:
    var $18 = HEAP32[5247504 >> 2];
    var $19 = HEAP32[5249192 >> 2];
    _qh_gram_schmidt($18, $19);
    var $20 = HEAP32[5249192 >> 2];
    _qh_rotateinput($20);
    label = 15;
    break;
   case 15:
    return;
  }
}
_qh_init_B["X"] = 1;
function _qh_initqhull_globals($points, $numpoints, $dim) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $seed = __stackBase__;
    var $timedata = __stackBase__ + 4;
    var $0 = HEAP32[5247036 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5288472);
    label = 4;
    break;
   case 4:
    HEAP32[5247520 >> 2] = 0;
    HEAP32[5247516 >> 2] = $points;
    HEAP32[5247512 >> 2] = $numpoints;
    HEAP32[5247508 >> 2] = $dim;
    HEAP32[5247504 >> 2] = $dim;
    var $1 = HEAP32[5247120 >> 2];
    var $2 = HEAP32[5247072 >> 2];
    var $3 = $2 | $1;
    var $4 = HEAP32[5247140 >> 2];
    var $5 = $3 | $4;
    var $or_cond1_not = ($5 | 0) == 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $6 > 8.988465674311579e+307;
    var $or_cond2 = $or_cond1_not & $cmp;
    if ($or_cond2) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    HEAP32[5247080 >> 2] = 1;
    var $cmp7 = ($dim | 0) < 5;
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[5247140 >> 2] = 1;
    _qh_option(5288404, 0, 0);
    label = 10;
    break;
   case 7:
    HEAP32[5247072 >> 2] = 1;
    _qh_option(5288300, 0, 0);
    label = 10;
    break;
   case 8:
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[5247080 >> 2] = 1;
    label = 10;
    break;
   case 10:
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = HEAP32[5247448 >> 2];
    var $tobool20 = ($8 | 0) != 0;
    var $cmp22 = $7 < 8.988465674311579e+307;
    var $or_cond4 = $tobool20 & $cmp22;
    var $9 = HEAP32[5247184 >> 2];
    var $tobool24 = ($9 | 0) != 0;
    var $or_cond5 = $or_cond4 & $tobool24;
    if ($or_cond5) {
      label = 11;
      break;
    } else {
      var $10 = $7;
      label = 12;
      break;
    }
   case 11:
    _qh_fprintf(5288012);
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $10 = $_pre;
    label = 12;
    break;
   case 12:
    var $10;
    var $11 = HEAP32[5246996 >> 2];
    var $notlhs = $10 >= 8.988465674311579e+307;
    var $notrhs = ($11 | 0) == 0;
    var $or_cond6_not = $notrhs | $notlhs;
    var $12 = HEAP32[5247384 >> 2];
    var $tobool31 = ($12 | 0) != 0;
    var $or_cond7 = $or_cond6_not | $tobool31;
    var $13 = HEAP32[5247388 >> 2];
    var $tobool33 = ($13 | 0) != 0;
    var $or_cond8 = $or_cond7 | $tobool33;
    if ($or_cond8) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAP32[5247388 >> 2] = 1;
    _qh_option(5287876, 0, 0);
    label = 14;
    break;
   case 14:
    var $14 = HEAP32[5247080 >> 2];
    var $15 = HEAP32[5247136 >> 2];
    var $notlhs42 = ($14 | 0) != 0;
    var $notrhs43 = ($15 | 0) == 0;
    var $or_cond9_not = $notrhs43 & $notlhs42;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp40 = $16 > 8.988465674311579e+307;
    var $or_cond10 = $or_cond9_not & $cmp40;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp42 = $17 == 0;
    var $or_cond11 = $or_cond10 & $cmp42;
    if ($or_cond11) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    HEAP32[5248580 >> 2] = 1;
    HEAP32[5249160 >> 2] = 1;
    _qh_option(5287800, 0, 0);
    label = 16;
    break;
   case 16:
    var $18 = HEAP32[5246996 >> 2];
    var $19 = HEAP32[5247044 >> 2];
    var $notlhs44 = ($18 | 0) == 0;
    var $notrhs45 = ($19 | 0) == 0;
    var $or_cond12_not = $notrhs45 | $notlhs44;
    var $20 = HEAP32[5247048 >> 2];
    var $tobool55 = ($20 | 0) != 0;
    var $or_cond13 = $or_cond12_not | $tobool55;
    if ($or_cond13) {
      var $21 = $18;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[5247048 >> 2] = 1;
    _qh_option(5301800, 0, 0);
    var $_pre1 = HEAP32[5246996 >> 2];
    var $21 = $_pre1;
    label = 18;
    break;
   case 18:
    var $21;
    var $tobool58 = ($21 | 0) != 0;
    var $22 = HEAP32[5247032 >> 2];
    var $tobool60 = ($22 | 0) != 0;
    var $or_cond14 = $tobool58 & $tobool60;
    if ($or_cond14) {
      label = 19;
      break;
    } else {
      var $23 = $21;
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5287540);
    _qh_errexit(1, 0, 0);
    var $_pr = HEAP32[5246996 >> 2];
    var $23 = $_pr;
    label = 20;
    break;
   case 20:
    var $23;
    var $tobool63 = ($23 | 0) == 0;
    if ($tobool63) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $24 = HEAP32[5247456 >> 2];
    var $25 = HEAP32[5246956 >> 2];
    var $26 = $25 | $24;
    var $27 = ($26 | 0) == 0;
    if ($27) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_fprintf(5287384);
    _qh_errexit(1, 0, 0);
    label = 23;
    break;
   case 23:
    var $28 = HEAP32[5247456 >> 2];
    var $tobool69 = ($28 | 0) != 0;
    var $29 = HEAP32[5246956 >> 2];
    var $tobool71 = ($29 | 0) != 0;
    var $or_cond16 = $tobool69 & $tobool71;
    if ($or_cond16) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5287152);
    _qh_errexit(1, 0, 0);
    label = 25;
    break;
   case 25:
    var $30 = HEAP32[5247388 >> 2];
    var $31 = HEAP32[5246996 >> 2];
    var $notlhs46 = ($30 | 0) != 0;
    var $notrhs47 = ($31 | 0) == 0;
    var $or_cond17_not = $notrhs47 & $notlhs46;
    var $32 = HEAP32[5247184 >> 2];
    var $tobool78 = ($32 | 0) != 0;
    var $or_cond18 = $or_cond17_not & $tobool78;
    if ($or_cond18) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_fprintf(5286952);
    label = 27;
    break;
   case 27:
    var $33 = HEAP32[5247396 >> 2];
    var $tobool81 = ($33 | 0) == 0;
    if ($tobool81) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    HEAP32[5247484 >> 2] = 0;
    var $_pre2 = HEAP32[5247080 >> 2];
    var $39 = 0;
    var $38 = $_pre2;
    label = 34;
    break;
   case 29:
    var $34 = HEAP32[5247080 >> 2];
    var $tobool82 = ($34 | 0) != 0;
    var $land_ext = $tobool82 & 1;
    HEAP32[5247484 >> 2] = $land_ext;
    if ($tobool82) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    HEAP32[5247500 >> 2] = 0;
    var $41 = 0;
    label = 36;
    break;
   case 31:
    var $35 = HEAP32[5247048 >> 2];
    var $tobool85 = ($35 | 0) != 0;
    var $36 = HEAP32[5247044 >> 2];
    var $tobool87 = ($36 | 0) != 0;
    var $or_cond19 = $tobool85 & $tobool87;
    if ($or_cond19) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    HEAP32[5247500 >> 2] = 0;
    var $40 = $34;
    label = 35;
    break;
   case 33:
    var $37 = HEAP32[5247116 >> 2];
    var $lnot = ($37 | 0) == 0;
    var $39 = $lnot;
    var $38 = $34;
    label = 34;
    break;
   case 34:
    var $38;
    var $39;
    var $land_ext91 = $39 & 1;
    HEAP32[5247500 >> 2] = $land_ext91;
    var $tobool92 = ($38 | 0) == 0;
    if ($tobool92) {
      var $41 = $38;
      label = 36;
      break;
    } else {
      var $40 = $38;
      label = 35;
      break;
    }
   case 35:
    var $40;
    HEAP32[5249032 >> 2] = 2;
    var $43 = $40;
    label = 38;
    break;
   case 36:
    var $41;
    var $42 = HEAP32[5247472 >> 2];
    var $tobool95 = ($42 | 0) == 0;
    if ($tobool95) {
      var $43 = $41;
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    HEAP32[5249032 >> 2] = 1;
    var $43 = $41;
    label = 38;
    break;
   case 38:
    var $43;
    var $44 = HEAP32[5247420 >> 2];
    var $tobool99 = ($44 | 0) == 0;
    var $tobool101 = ($43 | 0) != 0;
    var $or_cond20 = $tobool99 | $tobool101;
    if ($or_cond20) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    _qh_fprintf(5286840);
    _qh_errexit(1, 0, 0);
    label = 40;
    break;
   case 40:
    var $45 = HEAP32[5247328 >> 2];
    var $tobool104 = ($45 | 0) == 0;
    var $46 = HEAP32[5246996 >> 2];
    if ($tobool104) {
      label = 41;
      break;
    } else {
      var $48 = $46;
      label = 42;
      break;
    }
   case 41:
    var $tobool106 = ($46 | 0) != 0;
    var $47 = HEAP32[5247324 >> 2];
    var $tobool108 = ($47 | 0) != 0;
    var $or_cond21 = $tobool106 & $tobool108;
    if ($or_cond21) {
      var $48 = $46;
      label = 42;
      break;
    } else {
      label = 44;
      break;
    }
   case 42:
    var $48;
    var $49 = HEAP32[5247504 >> 2];
    var $sub = $49 - $45 | 0;
    HEAP32[5247504 >> 2] = $sub;
    var $tobool110 = ($48 | 0) == 0;
    if ($tobool110) {
      var $extra_0 = 0;
      var $51 = $sub;
      label = 45;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $inc = $sub + 1 | 0;
    HEAP32[5247504 >> 2] = $inc;
    var $50 = HEAP32[5246956 >> 2];
    var $not_tobool112 = ($50 | 0) != 0;
    var $_ = $not_tobool112 & 1;
    var $extra_0 = $_;
    var $51 = $inc;
    label = 45;
    break;
   case 44:
    var $_pr49 = HEAP32[5247504 >> 2];
    var $extra_0 = 0;
    var $51 = $_pr49;
    label = 45;
    break;
   case 45:
    var $51;
    var $extra_0;
    var $cmp117 = ($51 | 0) < 2;
    if ($cmp117) {
      label = 46;
      break;
    } else {
      var $52 = $51;
      label = 47;
      break;
    }
   case 46:
    _qh_fprintf(5286572);
    _qh_errexit(1, 0, 0);
    var $_pre3 = HEAP32[5247504 >> 2];
    var $52 = $_pre3;
    label = 47;
    break;
   case 47:
    var $52;
    var $cmp12052 = ($52 | 0) > 2;
    if ($cmp12052) {
      var $k_053 = 2;
      var $factorial_054 = 1;
      label = 48;
      break;
    } else {
      var $factorial_0_lcssa = 1;
      label = 49;
      break;
    }
   case 48:
    var $factorial_054;
    var $k_053;
    var $conv = $k_053 | 0;
    var $mul = $factorial_054 * $conv;
    var $inc121 = $k_053 + 1 | 0;
    var $cmp120 = ($inc121 | 0) < ($52 | 0);
    if ($cmp120) {
      var $k_053 = $inc121;
      var $factorial_054 = $mul;
      label = 48;
      break;
    } else {
      var $factorial_0_lcssa = $mul;
      label = 49;
      break;
    }
   case 49:
    var $factorial_0_lcssa;
    var $div = 1 / $factorial_0_lcssa;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[5247476 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247480 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $53 = HEAP32[5247036 >> 2];
    var $cmp122 = ($53 | 0) > 1;
    if ($cmp122) {
      label = 50;
      break;
    } else {
      var $54 = $52;
      label = 51;
      break;
    }
   case 50:
    _qh_fprintf(5285884);
    var $_pre4 = HEAP32[5247504 >> 2];
    var $54 = $_pre4;
    label = 51;
    break;
   case 51:
    var $54;
    var $mul126 = $54 << 3;
    HEAP32[5248928 >> 2] = $mul126;
    var $sub127 = $mul126 - 8 | 0;
    HEAP32[5248932 >> 2] = $sub127;
    var $cmp128 = ($54 | 0) > 6;
    if ($cmp128) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    HEAP32[5247100 >> 2] = 0;
    _qh_option(5285748, 0, 0);
    label = 53;
    break;
   case 53:
    var $55 = HEAP32[5247012 >> 2];
    var $tobool132 = ($55 | 0) == 0;
    var $add_inc134_v = $tobool132 ? 1 : 2;
    var $add_inc134 = $add_inc134_v + $54 | 0;
    var $56 = HEAP32[5247376 >> 2];
    var $cmp136 = ($56 | 0) > 1;
    if ($cmp136) {
      label = 54;
      break;
    } else {
      label = 56;
      break;
    }
   case 54:
    var $57 = HEAP32[5247036 >> 2];
    HEAP32[5247428 >> 2] = $57;
    var $cmp139 = ($57 | 0) == -1;
    if ($cmp139) {
      label = 58;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    HEAP32[5247036 >> 2] = 0;
    label = 58;
    break;
   case 56:
    var $58 = HEAP32[5247432 >> 2];
    var $cmp144 = ($58 | 0) != -1;
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp147 = $59 < 8.988465674311579e+307;
    var $or_cond22 = $cmp144 | $cmp147;
    var $60 = HEAP32[5247444 >> 2];
    var $tobool150 = ($60 | 0) != 0;
    var $or_cond23 = $or_cond22 | $tobool150;
    if ($or_cond23) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    var $61 = HEAP32[5247036 >> 2];
    var $tobool152 = ($61 | 0) != 0;
    var $cond = $tobool152 ? $61 : 3;
    HEAP32[5247424 >> 2] = $cond;
    HEAP32[5247036 >> 2] = 0;
    label = 58;
    break;
   case 58:
    var $62 = HEAP32[5247380 >> 2];
    if (($62 | 0) == -1 | ($62 | 0) == 0) {
      label = 59;
      break;
    } else {
      var $65 = $62;
      label = 63;
      break;
    }
   case 59:
    var $call = _time($timedata);
    HEAP32[$seed >> 2] = $call;
    var $63 = HEAP32[5247380 >> 2];
    var $cmp161 = ($63 | 0) == -1;
    if ($cmp161) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $sub164 = -$call | 0;
    HEAP32[$seed >> 2] = $sub164;
    _qh_option(5294928, $seed, 0);
    label = 62;
    break;
   case 61:
    _qh_option(5285592, $seed, 0);
    label = 62;
    break;
   case 62:
    var $64 = HEAP32[$seed >> 2];
    HEAP32[5247380 >> 2] = $64;
    var $65 = $64;
    label = 63;
    break;
   case 63:
    var $65;
    HEAP32[$seed >> 2] = $65;
    var $cmp168 = ($65 | 0) == -2147483648;
    if ($cmp168) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    HEAP32[$seed >> 2] = 1;
    var $66 = 1;
    label = 67;
    break;
   case 65:
    var $cmp172 = ($65 | 0) < 0;
    if ($cmp172) {
      label = 66;
      break;
    } else {
      var $66 = $65;
      label = 67;
      break;
    }
   case 66:
    var $sub175 = -$65 | 0;
    HEAP32[$seed >> 2] = $sub175;
    var $66 = $sub175;
    label = 67;
    break;
   case 67:
    var $66;
    _qh_srand($66);
    var $randr_050 = 0;
    var $dec51 = 999;
    label = 68;
    break;
   case 68:
    var $dec51;
    var $randr_050;
    var $call181 = _qh_rand();
    var $conv182 = $call181 | 0;
    var $add183 = $randr_050 + $conv182;
    var $cmp185 = ($call181 | 0) == 2147483647;
    if ($cmp185) {
      label = 69;
      break;
    } else {
      label = 70;
      break;
    }
   case 69:
    _qh_fprintf(5285444);
    _qh_errexit(1, 0, 0);
    label = 70;
    break;
   case 70:
    var $dec = $dec51 - 1 | 0;
    var $tobool179 = ($dec51 | 0) == 0;
    if ($tobool179) {
      label = 71;
      break;
    } else {
      var $randr_050 = $add183;
      var $dec51 = $dec;
      label = 68;
      break;
    }
   case 71:
    var $67 = HEAP32[$seed >> 2];
    _qh_srand($67);
    var $div190 = $add183 / 1e3;
    var $cmp191 = $div190 < 214748364.60000002;
    var $cmp194 = $div190 > 1932735281.4;
    var $or_cond25 = $cmp191 | $cmp194;
    if ($or_cond25) {
      label = 72;
      break;
    } else {
      label = 73;
      break;
    }
   case 72:
    _qh_fprintf(5285220);
    label = 73;
    break;
   case 73:
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247340 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247344 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul198 = $68 * 2;
    var $div199 = $mul198 / 2147483646;
    HEAPF64[tempDoublePtr >> 3] = $div199, HEAP32[5247348 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247352 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub200 = 1 - $68;
    HEAPF64[tempDoublePtr >> 3] = $sub200, HEAP32[5247356 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247360 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $add201 = $extra_0 + $numpoints | 0;
    var $cmp202 = ($add201 | 0) < ($add_inc134 | 0);
    if ($cmp202) {
      label = 74;
      break;
    } else {
      label = 75;
      break;
    }
   case 74:
    _qh_fprintf(5285104);
    _qh_errexit(1, 0, 0);
    label = 75;
    break;
   case 75:
    _qh_initqhull_outputflags();
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_initqhull_globals["X"] = 1;
function _qh_initqhull_mem() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    _qh_meminitbuffers($0);
    _qh_memsize(24);
    var $1 = HEAP32[5247080 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_memsize(16);
    _qh_memsize(20);
    label = 4;
    break;
   case 4:
    _qh_memsize(80);
    var $2 = HEAP32[5247504 >> 2];
    var $sub = $2 << 2;
    var $add = $sub + 4 | 0;
    _qh_memsize($add);
    var $3 = HEAP32[5248928 >> 2];
    _qh_memsize($3);
    var $add1 = $sub + 8 | 0;
    _qh_memsize($add1);
    _qh_memsetup();
    return;
  }
}
function _qh_initqhull_buffers() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242896 >> 2];
    var $sub = $0 - 8 | 0;
    var $div = $sub >>> 2;
    var $cmp = ($div | 0) == 0;
    var $cmp1 = ($div | 0) > ($0 | 0);
    var $or_cond = $cmp | $cmp1;
    var $_div = $or_cond ? 8 : $div;
    HEAP32[5248936 >> 2] = $_div;
    var $call = _qh_setnew($_div);
    HEAP32[5249180 >> 2] = $call;
    var $1 = HEAP32[5248936 >> 2];
    var $call2 = _qh_setnew($1);
    HEAP32[5249184 >> 2] = $call2;
    var $2 = HEAP32[5248936 >> 2];
    var $call3 = _qh_setnew($2);
    HEAP32[5249224 >> 2] = $call3;
    var $3 = HEAP32[5247504 >> 2];
    var $mul = $3 << 3;
    var $call4 = _qh_memalloc($mul);
    var $4 = $call4;
    HEAP32[5248708 >> 2] = $4;
    var $5 = HEAP32[5247508 >> 2];
    var $add = $5 << 3;
    var $mul5 = $add + 8 | 0;
    var $call6 = _qh_memalloc($mul5);
    var $6 = $call6;
    HEAP32[5248588 >> 2] = $6;
    var $7 = HEAP32[5247508 >> 2];
    var $add7 = $7 << 3;
    var $mul8 = $add7 + 8 | 0;
    var $call9 = _qh_memalloc($mul8);
    var $8 = $call9;
    HEAP32[5248584 >> 2] = $8;
    var $9 = HEAP32[5247508 >> 2];
    var $add10 = $9 << 3;
    var $mul11 = $add10 + 8 | 0;
    var $call12 = _qh_memalloc($mul11);
    var $10 = $call12;
    HEAP32[5248596 >> 2] = $10;
    var $11 = HEAP32[5247508 >> 2];
    var $add13 = $11 << 3;
    var $mul14 = $add13 + 8 | 0;
    var $call15 = _qh_memalloc($mul14);
    var $12 = $call15;
    HEAP32[5248592 >> 2] = $12;
    var $13 = HEAP32[5247508 >> 2];
    var $tobool5 = ($13 | 0) == -1;
    if ($tobool5) {
      label = 4;
      break;
    } else {
      var $dec6 = $13;
      label = 3;
      break;
    }
   case 3:
    var $dec6;
    var $14 = HEAP32[5248588 >> 2];
    var $arrayidx = $14 + ($dec6 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[$arrayidx >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $15 = HEAP32[5248584 >> 2];
    var $arrayidx17 = $15 + ($dec6 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[$arrayidx17 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $16 = HEAP32[5248596 >> 2];
    var $arrayidx18 = $16 + ($dec6 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[$arrayidx18 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx18 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $17 = HEAP32[5248592 >> 2];
    var $arrayidx19 = $17 + ($dec6 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[$arrayidx19 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $dec = $dec6 - 1 | 0;
    var $tobool = ($dec6 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $dec6 = $dec;
      label = 3;
      break;
    }
   case 4:
    var $18 = HEAP32[5247504 >> 2];
    var $add20 = $18 + 1 | 0;
    var $mul21 = $18 << 3;
    var $mul22 = $mul21 * $add20 & -1;
    var $call23 = _qh_memalloc($mul22);
    var $19 = $call23;
    HEAP32[5249188 >> 2] = $19;
    var $20 = HEAP32[5247504 >> 2];
    var $add24 = $20 << 2;
    var $mul25 = $add24 + 4 | 0;
    var $call26 = _qh_memalloc($mul25);
    var $21 = $call26;
    HEAP32[5249192 >> 2] = $21;
    return;
  }
}
_qh_initqhull_buffers["X"] = 1;
function _qh_initthresholds() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $s = __stackBase__;
    HEAP32[$s >> 2] = 5247532;
    var $0 = HEAP32[5247508 >> 2];
    var $1 = HEAP32[5246996 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      var $maxdim_0_ph = $0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = HEAP32[5247324 >> 2];
    var $3 = HEAP32[5247328 >> 2];
    var $4 = $3 | $2;
    var $not_ = ($4 | 0) != 0;
    var $inc = $not_ & 1;
    var $_inc = $inc + $0 | 0;
    var $maxdim_0_ph = $_inc;
    label = 4;
    break;
   case 4:
    var $maxdim_0_ph;
    var $tobool8639 = ($maxdim_0_ph | 0) == 0;
    var $5 = 5247532;
    label = 5;
    break;
   case 5:
    var $5;
    var $6 = HEAP8[$5];
    if ($6 << 24 >> 24 == 45) {
      label = 6;
      break;
    } else if ($6 << 24 >> 24 == 0) {
      label = 47;
      break;
    } else {
      var $8 = $5;
      var $7 = $6;
      label = 7;
      break;
    }
   case 6:
    var $incdec_ptr = $5 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr;
    var $_pre3 = HEAP8[$incdec_ptr];
    var $8 = $incdec_ptr;
    var $7 = $_pre3;
    label = 7;
    break;
   case 7:
    var $7;
    var $8;
    if ($7 << 24 >> 24 == 80) {
      label = 8;
      break;
    } else if ($7 << 24 >> 24 == 81) {
      label = 22;
      break;
    } else if ($7 << 24 >> 24 == 0) {
      label = 44;
      break;
    } else {
      var $36 = $7;
      label = 42;
      break;
    }
   case 8:
    var $incdec_ptr11 = $8 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr11;
    var $9 = HEAP8[$incdec_ptr11];
    var $tobool1443 = $9 << 24 >> 24 == 0;
    if ($tobool1443) {
      label = 44;
      break;
    } else {
      var $10 = $incdec_ptr11;
      label = 9;
      break;
    }
   case 9:
    var $10;
    var $incdec_ptr15 = $10 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr15;
    var $11 = HEAP8[$10];
    var $conv16 = $11 << 24 >> 24;
    var $call = _isspace($conv16);
    var $lnot = ($call | 0) == 0;
    if ($lnot) {
      label = 10;
      break;
    } else {
      label = 44;
      break;
    }
   case 10:
    var $cmp20 = $11 << 24 >> 24 == 100;
    if ($11 << 24 >> 24 == 100 | $11 << 24 >> 24 == 68) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    var $12 = HEAP32[$s >> 2];
    var $13 = HEAP8[$12];
    var $conv27 = $13 << 24 >> 24;
    var $isdigittmp = $conv27 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5281320);
    label = 13;
    break;
   case 13:
    var $14 = HEAP32[$s >> 2];
    var $15 = HEAP8[$14];
    var $tobool14 = $15 << 24 >> 24 == 0;
    if ($tobool14) {
      label = 44;
      break;
    } else {
      var $10 = $14;
      label = 9;
      break;
    }
   case 14:
    var $call33 = _qh_strtol($12, $s);
    var $16 = HEAP32[5247504 >> 2];
    var $cmp34 = ($call33 | 0) < ($16 | 0);
    if ($cmp34) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_fprintf(5280312);
    label = 13;
    break;
   case 16:
    var $17 = HEAP32[$s >> 2];
    var $18 = HEAP8[$17];
    var $cmp40 = $18 << 24 >> 24 == 58;
    if ($cmp40) {
      label = 17;
      break;
    } else {
      var $value_0 = 0;
      label = 19;
      break;
    }
   case 17:
    var $incdec_ptr43 = $17 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr43;
    var $call44 = _qh_strtod($incdec_ptr43, $s);
    var $call45 = Math.abs($call44);
    var $cmp46 = $call45 > 1;
    if ($cmp46) {
      label = 18;
      break;
    } else {
      var $value_0 = $call44;
      label = 19;
      break;
    }
   case 18:
    _qh_fprintf(5280228);
    label = 13;
    break;
   case 19:
    var $value_0;
    if ($cmp20) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $19 = HEAP32[5248588 >> 2];
    var $arrayidx = $19 + ($call33 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $value_0, HEAP32[$arrayidx >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 13;
    break;
   case 21:
    var $20 = HEAP32[5248584 >> 2];
    var $arrayidx57 = $20 + ($call33 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $value_0, HEAP32[$arrayidx57 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx57 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 13;
    break;
   case 22:
    var $incdec_ptr65 = $8 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr65;
    var $21 = HEAP8[$incdec_ptr65];
    var $tobool6841 = $21 << 24 >> 24 == 0;
    if ($tobool6841) {
      label = 44;
      break;
    } else {
      var $22 = $incdec_ptr65;
      label = 23;
      break;
    }
   case 23:
    var $22;
    var $incdec_ptr70 = $22 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr70;
    var $23 = HEAP8[$22];
    var $conv71 = $23 << 24 >> 24;
    var $call72 = _isspace($conv71);
    var $lnot74 = ($call72 | 0) == 0;
    if ($lnot74) {
      label = 24;
      break;
    } else {
      label = 44;
      break;
    }
   case 24:
    var $cmp78 = $23 << 24 >> 24 == 98;
    if ($cmp78) {
      label = 25;
      break;
    } else {
      label = 29;
      break;
    }
   case 25:
    var $24 = HEAP32[$s >> 2];
    var $25 = HEAP8[$24];
    if ($25 << 24 >> 24 == 66) {
      label = 26;
      break;
    } else if ($25 << 24 >> 24 == 98) {
      label = 28;
      break;
    } else {
      var $29 = $24;
      var $28 = $25;
      label = 31;
      break;
    }
   case 26:
    var $incdec_ptr85 = $24 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr85;
    if ($tobool8639) {
      label = 33;
      break;
    } else {
      var $dec40_in = $maxdim_0_ph;
      label = 27;
      break;
    }
   case 27:
    var $dec40_in;
    var $dec40 = $dec40_in - 1 | 0;
    var $26 = HEAP32[5248596 >> 2];
    var $arrayidx87 = $26 + ($dec40 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = -.5, HEAP32[$arrayidx87 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx87 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $27 = HEAP32[5248592 >> 2];
    var $arrayidx88 = $27 + ($dec40 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[$arrayidx88 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx88 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool86 = ($dec40 | 0) == 0;
    if ($tobool86) {
      label = 33;
      break;
    } else {
      var $dec40_in = $dec40;
      label = 27;
      break;
    }
   case 28:
    var $incdec_ptr98 = $24 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr98;
    label = 33;
    break;
   case 29:
    var $cmp105_old = $23 << 24 >> 24 == 66;
    if ($cmp105_old) {
      label = 30;
      break;
    } else {
      label = 33;
      break;
    }
   case 30:
    var $_pre5 = HEAP32[$s >> 2];
    var $_pre6 = HEAP8[$_pre5];
    var $29 = $_pre5;
    var $28 = $_pre6;
    label = 31;
    break;
   case 31:
    var $28;
    var $29;
    var $conv108 = $28 << 24 >> 24;
    var $isdigittmp33 = $conv108 - 48 | 0;
    var $isdigit34 = $isdigittmp33 >>> 0 < 10;
    if ($isdigit34) {
      label = 34;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _qh_fprintf(5280148);
    label = 33;
    break;
   case 33:
    var $30 = HEAP32[$s >> 2];
    var $31 = HEAP8[$30];
    var $tobool68 = $31 << 24 >> 24 == 0;
    if ($tobool68) {
      label = 44;
      break;
    } else {
      var $22 = $30;
      label = 23;
      break;
    }
   case 34:
    var $call114 = _qh_strtol($29, $s);
    var $cmp115 = ($call114 | 0) < ($maxdim_0_ph | 0);
    if ($cmp115) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    _qh_fprintf(5280016);
    label = 33;
    break;
   case 36:
    var $32 = HEAP32[$s >> 2];
    var $33 = HEAP8[$32];
    var $cmp121 = $33 << 24 >> 24 == 58;
    if ($cmp121) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $incdec_ptr124 = $32 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr124;
    var $call125 = _qh_strtod($incdec_ptr124, $s);
    var $value_1 = $call125;
    label = 39;
    break;
   case 38:
    var $_ = $cmp78 ? -.5 : .5;
    var $value_1 = $_;
    label = 39;
    break;
   case 39:
    var $value_1;
    if ($cmp78) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $34 = HEAP32[5248596 >> 2];
    var $arrayidx138 = $34 + ($call114 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $value_1, HEAP32[$arrayidx138 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx138 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 33;
    break;
   case 41:
    var $35 = HEAP32[5248592 >> 2];
    var $arrayidx140 = $35 + ($call114 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $value_1, HEAP32[$arrayidx140 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx140 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 33;
    break;
   case 42:
    var $36;
    var $conv148 = $36 << 24 >> 24;
    var $call152 = _isspace($conv148);
    var $lnot154 = ($call152 | 0) == 0;
    if ($lnot154) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $37 = HEAP32[$s >> 2];
    var $incdec_ptr157 = $37 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr157;
    var $38 = HEAP8[$incdec_ptr157];
    var $tobool149 = $38 << 24 >> 24 == 0;
    if ($tobool149) {
      label = 44;
      break;
    } else {
      var $36 = $38;
      label = 42;
      break;
    }
   case 44:
    var $39 = HEAP32[$s >> 2];
    var $40 = HEAP8[$39];
    var $conv16246 = $40 << 24 >> 24;
    var $call16347 = _isspace($conv16246);
    var $tobool16448 = ($call16347 | 0) == 0;
    if ($tobool16448) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    var $_pre = HEAP32[$s >> 2];
    var $5 = $_pre;
    label = 5;
    break;
   case 46:
    var $41 = HEAP32[$s >> 2];
    var $incdec_ptr166 = $41 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr166;
    var $42 = HEAP8[$incdec_ptr166];
    var $conv162 = $42 << 24 >> 24;
    var $call163 = _isspace($conv162);
    var $tobool164 = ($call163 | 0) == 0;
    if ($tobool164) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 47:
    var $43 = HEAP32[5247504 >> 2];
    var $tobool17136 = ($43 | 0) == 0;
    if ($tobool17136) {
      label = 55;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $_pre4 = HEAP32[5248588 >> 2];
    var $dec17037_in = $43;
    label = 49;
    break;
   case 49:
    var $dec17037_in;
    var $dec17037 = $dec17037_in - 1 | 0;
    var $arrayidx173 = $_pre4 + ($dec17037 << 3) | 0;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx173 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx173 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp174 = $44 > -8.988465674311579e+307;
    if ($cmp174) {
      label = 50;
      break;
    } else {
      label = 52;
      break;
    }
   case 50:
    HEAP32[5247020 >> 2] = 1;
    var $45 = HEAP32[5248584 >> 2];
    var $arrayidx177 = $45 + ($dec17037 << 3) | 0;
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx177 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx177 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp178 = $46 < 8.988465674311579e+307;
    if ($cmp178) {
      label = 51;
      break;
    } else {
      label = 53;
      break;
    }
   case 51:
    HEAP32[5247404 >> 2] = 1;
    HEAP32[5247020 >> 2] = 0;
    label = 55;
    break;
   case 52:
    var $47 = HEAP32[5248584 >> 2];
    var $arrayidx183 = $47 + ($dec17037 << 3) | 0;
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx183 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx183 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp184 = $48 < 8.988465674311579e+307;
    if ($cmp184) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $tobool171 = ($dec17037 | 0) == 0;
    if ($tobool171) {
      label = 55;
      break;
    } else {
      var $dec17037_in = $dec17037;
      label = 49;
      break;
    }
   case 54:
    HEAP32[5247020 >> 2] = 1;
    label = 53;
    break;
   case 55:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_initthresholds["X"] = 1;
function _qh_option($option, $i, $r) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 200 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $arraydecay = $buf | 0;
    var $call = _sprintf($arraydecay, 5279996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $option, tempInt));
    var $tobool = ($i | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call3 = _strlen($arraydecay);
    var $add_ptr = $buf + $call3 | 0;
    var $0 = HEAP32[$i >> 2];
    var $call4 = _sprintf($add_ptr, 5295004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt));
    label = 4;
    break;
   case 4:
    var $tobool5 = ($r | 0) == 0;
    if ($tobool5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call9 = _strlen($arraydecay);
    var $add_ptr10 = $buf + $call9 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$r >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$r + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call11 = _sprintf($add_ptr10, 5279720, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $1, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    label = 6;
    break;
   case 6:
    var $call14 = _strlen($arraydecay);
    var $2 = HEAP32[5248560 >> 2];
    var $add = $2 + $call14 | 0;
    HEAP32[5248560 >> 2] = $add;
    var $sub = 512 - $call14 | 0;
    var $sub15 = $sub - 1 | 0;
    var $cmp = ($sub15 | 0) < 0;
    var $_sub15 = $cmp ? 0 : $sub15;
    var $cmp18 = ($add | 0) > 79;
    var $cmp19 = ($_sub15 | 0) > 0;
    var $or_cond = $cmp18 & $cmp19;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      var $maxlen_1 = $_sub15;
      label = 8;
      break;
    }
   case 7:
    HEAP32[5248560 >> 2] = $call14;
    var $dec = $_sub15 - 1 | 0;
    var $call21 = _strncat(5248048, 5299656, $_sub15);
    var $maxlen_1 = $dec;
    label = 8;
    break;
   case 8:
    var $maxlen_1;
    var $call24 = _strncat(5248048, $arraydecay, $maxlen_1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_initqhull_outputflags() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5284896);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5247160 >> 2];
    var $2 = HEAP32[5247168 >> 2];
    var $3 = $2 | $1;
    var $4 = ($3 | 0) == 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $5 = HEAP32[5247040 >> 2];
    var $tobool3 = ($5 | 0) != 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp5 = $6 < 8.988465674311579e+307;
    var $or_cond1 = $tobool3 | $cmp5;
    var $7 = HEAP32[5247052 >> 2];
    var $tobool7 = ($7 | 0) != 0;
    var $or_cond2 = $or_cond1 | $tobool7;
    var $8 = HEAP32[5246996 >> 2];
    var $tobool9 = ($8 | 0) != 0;
    var $or_cond3 = $or_cond2 | $tobool9;
    if ($or_cond3) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $9 = HEAP32[5247124 >> 2];
    var $tobool11 = ($9 | 0) == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $10 = HEAP32[5247024 >> 2];
    var $11 = HEAP32[5247012 >> 2];
    var $12 = $11 | $10;
    var $13 = ($12 | 0) == 0;
    if ($13) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    HEAP32[5247160 >> 2] = 1;
    _qh_option(5284884, 0, 0);
    label = 9;
    break;
   case 9:
    var $14 = HEAP32[5247320 >> 2];
    var $tobool18 = ($14 | 0) == 0;
    if ($tobool18) {
      var $printgeom_034 = 0;
      var $printmath_035 = 0;
      var $printcoplanar_036 = 0;
      var $dec37 = 28;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $15 = HEAP32[5247504 >> 2];
    var $16 = HEAP32[5246996 >> 2];
    var $notlhs = ($15 | 0) != 4;
    var $notrhs = ($16 | 0) == 0;
    var $or_cond5_not = $notrhs | $notlhs;
    var $17 = HEAP32[5247472 >> 2];
    var $tobool24 = ($17 | 0) != 0;
    var $or_cond6 = $or_cond5_not | $tobool24;
    var $18 = HEAP32[5247004 >> 2];
    var $cmp26 = ($18 | 0) > -1;
    var $or_cond7 = $or_cond6 | $cmp26;
    if ($or_cond7) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _qh_fprintf(5284760);
    _qh_errexit(1, 0, 0);
    label = 12;
    break;
   case 12:
    HEAP32[5247004 >> 2] = 3;
    HEAP32[5247304 >> 2] = 1;
    var $printgeom_034 = 0;
    var $printmath_035 = 0;
    var $printcoplanar_036 = 0;
    var $dec37 = 28;
    label = 13;
    break;
   case 13:
    var $dec37;
    var $printcoplanar_036;
    var $printmath_035;
    var $printgeom_034;
    var $arrayidx = 5247188 + ($dec37 << 2) | 0;
    var $19 = HEAP32[$arrayidx >> 2];
    if (($19 | 0) == 15 | ($19 | 0) == 13) {
      label = 14;
      break;
    } else if (($19 | 0) == 7) {
      var $printcoplanar_0_be = $printcoplanar_036;
      var $printmath_0_be = $printmath_035;
      var $printgeom_0_be = 1;
      label = 15;
      break;
    } else if (($19 | 0) == 3) {
      label = 16;
      break;
    } else if (($19 | 0) == 20) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = 1;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 15:
    var $printgeom_0_be;
    var $printmath_0_be;
    var $printcoplanar_0_be;
    var $dec = $dec37 - 1 | 0;
    var $tobool30 = ($dec37 | 0) == 0;
    if ($tobool30) {
      label = 30;
      break;
    } else {
      var $printgeom_034 = $printgeom_0_be;
      var $printmath_035 = $printmath_0_be;
      var $printcoplanar_036 = $printcoplanar_0_be;
      var $dec37 = $dec;
      label = 13;
      break;
    }
   case 16:
    var $printcoplanar_0_be = 1;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 17:
    var $printcoplanar_0_be = 1;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 18:
    var $cmp49 = ($19 | 0) != 19;
    var $20 = HEAP32[5247032 >> 2];
    var $tobool51 = ($20 | 0) != 0;
    var $or_cond8 = $cmp49 | $tobool51;
    if ($or_cond8) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _qh_fprintf(5284436);
    _qh_errexit(1, 0, 0);
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 20:
    var $cmp55 = ($19 | 0) == 25;
    var $21 = HEAP32[5247472 >> 2];
    if ($cmp55) {
      label = 21;
      break;
    } else {
      label = 24;
      break;
    }
   case 21:
    var $22 = $21 | $20;
    var $23 = ($22 | 0) == 0;
    if ($23) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 23:
    _qh_fprintf(5284180);
    _qh_errexit(1, 0, 0);
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 24:
    var $cmp63 = ($19 | 0) == 4;
    var $tobool65 = ($21 | 0) != 0;
    var $or_cond10 = $cmp63 & $tobool65;
    if ($or_cond10) {
      label = 25;
      break;
    } else {
      var $tobool654 = $tobool65;
      label = 26;
      break;
    }
   case 25:
    _qh_fprintf(5284008);
    _qh_errexit(1, 0, 0);
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 26:
    var $tobool654;
    var $cmp69 = ($19 | 0) == 26;
    if ($cmp69) {
      label = 27;
      break;
    } else {
      var $printcoplanar_0_be = $printcoplanar_036;
      var $printmath_0_be = $printmath_035;
      var $printgeom_0_be = $printgeom_034;
      label = 15;
      break;
    }
   case 27:
    if ($tobool654) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    _qh_option(5283908, 0, 0);
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 29:
    _qh_option(5283852, 0, 0);
    var $printcoplanar_0_be = $printcoplanar_036;
    var $printmath_0_be = $printmath_035;
    var $printgeom_0_be = $printgeom_034;
    label = 15;
    break;
   case 30:
    var $tobool83 = ($printcoplanar_0_be | 0) != 0;
    var $24 = HEAP32[5246996 >> 2];
    var $tobool85 = ($24 | 0) != 0;
    var $or_cond11 = $tobool83 & $tobool85;
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp87 = $25 < 8.988465674311579e+307;
    var $or_cond12 = $or_cond11 & $cmp87;
    var $26 = HEAP32[5247184 >> 2];
    var $tobool89 = ($26 | 0) != 0;
    var $or_cond22 = $or_cond12 & $tobool89;
    if ($or_cond22) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5283672);
    label = 32;
    break;
   case 32:
    var $tobool93 = ($printmath_0_be | 0) == 0;
    if ($tobool93) {
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $27 = HEAP32[5247504 >> 2];
    var $cmp95 = ($27 | 0) > 3;
    var $28 = HEAP32[5247472 >> 2];
    var $tobool97 = ($28 | 0) != 0;
    var $or_cond13 = $cmp95 | $tobool97;
    if ($or_cond13) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    _qh_fprintf(5283500);
    _qh_errexit(1, 0, 0);
    label = 35;
    break;
   case 35:
    var $tobool100 = ($printgeom_0_be | 0) == 0;
    if ($tobool100) {
      label = 47;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $29 = HEAP32[5247504 >> 2];
    var $cmp102 = ($29 | 0) > 4;
    if ($cmp102) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    _qh_fprintf(5283048);
    _qh_errexit(1, 0, 0);
    label = 38;
    break;
   case 38:
    var $30 = HEAP32[5247172 >> 2];
    var $tobool105 = ($30 | 0) == 0;
    if ($tobool105) {
      label = 41;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $31 = HEAP32[5247148 >> 2];
    var $32 = HEAP32[5247144 >> 2];
    var $add = $32 + $31 | 0;
    var $33 = HEAP32[5247156 >> 2];
    var $add107 = $add + $33 | 0;
    var $34 = HEAP32[5247308 >> 2];
    var $add108 = $add107 + $34 | 0;
    var $35 = HEAP32[5247e3 >> 2];
    var $add109 = $add108 + $35 | 0;
    var $36 = HEAP32[5247304 >> 2];
    var $add110 = -$36 | 0;
    var $tobool111 = ($add109 | 0) == ($add110 | 0);
    if ($tobool111) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    _qh_fprintf(5282940);
    _qh_errexit(1, 0, 0);
    label = 41;
    break;
   case 41:
    var $37 = HEAP32[5247472 >> 2];
    var $tobool114 = ($37 | 0) == 0;
    if ($tobool114) {
      label = 44;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $38 = HEAP32[5247504 >> 2];
    var $cmp116 = ($38 | 0) > 3;
    var $39 = HEAP32[5247004 >> 2];
    var $cmp118 = ($39 | 0) > -1;
    var $or_cond14 = $cmp116 | $cmp118;
    if ($or_cond14) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _qh_fprintf(5282472);
    _qh_errexit(1, 0, 0);
    label = 44;
    break;
   case 44:
    var $40 = HEAP32[5247504 >> 2];
    var $cmp121 = ($40 | 0) == 4;
    var $41 = HEAP32[5247004 >> 2];
    var $cmp123 = ($41 | 0) == -1;
    var $or_cond15 = $cmp121 & $cmp123;
    if ($or_cond15) {
      label = 45;
      break;
    } else {
      label = 47;
      break;
    }
   case 45:
    var $42 = HEAP32[5247148 >> 2];
    var $43 = HEAP32[5247308 >> 2];
    var $44 = $43 | $42;
    var $45 = HEAP32[5247144 >> 2];
    var $46 = $44 | $45;
    var $47 = ($46 | 0) == 0;
    if ($47) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    _qh_fprintf(5282176);
    HEAP32[5247144 >> 2] = 0;
    HEAP32[5247308 >> 2] = 0;
    HEAP32[5247148 >> 2] = 0;
    label = 47;
    break;
   case 47:
    var $48 = HEAP32[5247044 >> 2];
    var $49 = HEAP32[5247048 >> 2];
    var $50 = $49 | $48;
    var $51 = HEAP32[5247124 >> 2];
    var $52 = $50 | $51;
    var $53 = ($52 | 0) == 0;
    if ($53) {
      label = 48;
      break;
    } else {
      label = 52;
      break;
    }
   case 48:
    var $54 = HEAP32[5247148 >> 2];
    var $tobool139 = ($54 | 0) != 0;
    var $55 = HEAP32[5247308 >> 2];
    var $tobool141 = ($55 | 0) != 0;
    var $or_cond20 = $tobool139 & $tobool141;
    var $brmerge = $or_cond20 | $tobool83;
    if ($brmerge) {
      label = 49;
      break;
    } else {
      label = 52;
      break;
    }
   case 49:
    var $56 = HEAP32[5249132 >> 2];
    var $tobool145 = ($56 | 0) == 0;
    if ($tobool145) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    _qh_fprintf(5281972);
    label = 52;
    break;
   case 51:
    HEAP32[5247044 >> 2] = 1;
    _qh_option(5281852, 0, 0);
    label = 52;
    break;
   case 52:
    var $57 = HEAP32[5247504 >> 2];
    HEAP32[5247152 >> 2] = $57;
    var $58 = HEAP32[5247004 >> 2];
    var $cmp151 = ($58 | 0) > -1;
    if ($cmp151) {
      label = 53;
      break;
    } else {
      label = 57;
      break;
    }
   case 53:
    var $cmp153 = ($58 | 0) < ($57 | 0);
    if ($cmp153) {
      label = 54;
      break;
    } else {
      label = 56;
      break;
    }
   case 54:
    var $dec155 = $57 - 1 | 0;
    HEAP32[5247152 >> 2] = $dec155;
    var $cmp158 = ($57 | 0) < 3;
    var $or_cond21 = $tobool100 | $cmp158;
    if ($or_cond21) {
      label = 55;
      break;
    } else {
      label = 59;
      break;
    }
   case 55:
    _qh_fprintf(5281724);
    label = 59;
    break;
   case 56:
    HEAP32[5247004 >> 2] = -1;
    label = 59;
    break;
   case 57:
    var $59 = HEAP32[5247472 >> 2];
    var $tobool164 = ($59 | 0) == 0;
    if ($tobool164) {
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    var $sub = $57 - 1 | 0;
    HEAP32[5247004 >> 2] = $sub;
    HEAP32[5247152 >> 2] = $sub;
    label = 59;
    break;
   case 59:
    return;
  }
}
_qh_initqhull_outputflags["X"] = 1;
function _qh_initqhull_start2($infile, $outfile, $errfile) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $timedata = __stackBase__;
  _clock();
  for (var $$dest = 5246932 >> 2, $$stop = $$dest + 585; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  HEAP32[5246936 >> 2] = 1;
  HEAP32[5247004 >> 2] = -1;
  HEAP32[5248920 >> 2] = $errfile;
  HEAP32[5248912 >> 2] = $infile;
  HEAP32[5248916 >> 2] = $outfile;
  HEAP32[5249036 >> 2] = -1;
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249052 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249056 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5247056 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247060 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249228 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249232 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249236 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249240 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5249244 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249248 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5248632 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248636 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5248648 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248652 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[5249064 >> 2] = 0;
  HEAP32[5249068 >> 2] = 0;
  HEAP32[5249072 >> 2] = 0;
  HEAP32[5249076 >> 2] = 0;
  HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[5248656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[5247076 >> 2] = 1;
  HEAPF64[tempDoublePtr >> 3] = 2.2250738585072014e-308, HEAP32[5248664 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248668 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5246944 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246948 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5247104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5247064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5248728 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248732 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5247084 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247088 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5246980 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246984 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[5247184 >> 2] = 1;
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5246988 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246992 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5247092 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247096 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[5247380 >> 2] = -2147483648;
  HEAP32[5247100 >> 2] = 1;
  HEAP32[5249136 >> 2] = 0;
  HEAP32[5249140 >> 2] = 0;
  HEAP32[5249144 >> 2] = 0;
  HEAP32[5249148 >> 2] = 0;
  HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5247436 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5247440 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[5247432 >> 2] = -1;
  HEAP32[5248964 >> 2] = -1;
  HEAP32[5248972 >> 2] = -1;
  _qh_srand(_time($timedata));
  HEAP32[5248572 >> 2] = _qh_rand() + 1 | 0;
  _qh_option(5281676, 5248572, 0);
  var $endptr = 5248744 + _strlen(5248744) | 0;
  HEAP8[$endptr] = HEAP8[5281492];
  HEAP8[$endptr + 1] = HEAP8[5281493];
  HEAP8[$endptr + 2] = HEAP8[5281494];
  HEAP8[$endptr + 3] = HEAP8[5281495];
  HEAP8[$endptr + 4] = HEAP8[5281496];
  HEAP8[$endptr + 5] = HEAP8[5281497];
  STACKTOP = __stackBase__;
  return;
}
function _qh_produce_output() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242928 >> 2];
    var $call = _qh_setsize($0);
    _qh_prepare_output();
    _qh_produce_output2();
    var $1 = HEAP32[5242928 >> 2];
    var $call1 = _qh_setsize($1);
    var $cmp = ($call1 | 0) == ($call | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = HEAP32[5242928 >> 2];
    var $call2 = _qh_setsize($2);
    _qh_fprintf(5279628);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _qh_prepare_output() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247472 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_clearcenters(1);
    _qh_vertexneighbors();
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5247448 >> 2];
    var $tobool1 = ($1 | 0) == 0;
    var $2 = HEAP32[5249048 >> 2];
    var $tobool2 = ($2 | 0) != 0;
    var $or_cond = $tobool1 | $tobool2;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_triangulate();
    var $3 = HEAP32[5247464 >> 2];
    var $tobool4 = ($3 | 0) == 0;
    var $4 = HEAP32[5246976 >> 2];
    var $tobool6 = ($4 | 0) != 0;
    var $or_cond1 = $tobool4 | $tobool6;
    if ($or_cond1) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $5 = HEAP32[5248940 >> 2];
    _qh_checkpolygon($5);
    label = 7;
    break;
   case 7:
    var $6 = HEAP32[5248940 >> 2];
    _qh_findgood_all($6);
    var $7 = HEAP32[5247496 >> 2];
    var $tobool10 = ($7 | 0) == 0;
    if ($tobool10) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $8 = HEAP32[5248940 >> 2];
    _qh_getarea($8);
    label = 9;
    break;
   case 9:
    var $9 = HEAP32[5247040 >> 2];
    var $10 = HEAP32[5247052 >> 2];
    var $11 = $10 | $9;
    var $12 = ($11 | 0) != 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $13 < 8.988465674311579e+307;
    var $or_cond3 = $12 | $cmp;
    if ($or_cond3) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $14 = HEAP32[5248940 >> 2];
    _qh_markkeep($14);
    label = 11;
    break;
   case 11:
    var $15 = HEAP32[5247312 >> 2];
    var $tobool18 = ($15 | 0) == 0;
    if ($tobool18) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_collectstatistics();
    label = 13;
    break;
   case 13:
    return;
  }
}
function _qh_compare_facetarea($p1, $p2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $p1;
    var $1 = HEAP32[$0 >> 2];
    var $2 = $p2;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $1 + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 1048576;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      var $retval_0 = -1;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $7 = $3 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $bf_clear2 = $9 & 1048576;
    var $tobool3 = ($bf_clear2 | 0) == 0;
    if ($tobool3) {
      var $retval_0 = 1;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $area = $1 + 28 | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$area >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$area + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $area7 = $3 + 28 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$area7 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$area7 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $10 > $11;
    if ($cmp) {
      var $retval_0 = 1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $not_cmp13 = $10 != $11;
    var $_ = $not_cmp13 << 31 >> 31;
    var $retval_0 = $_;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_compare_facetmerge($p1, $p2) {
  return (HEAP32[HEAP32[$p1 >> 2] + 76 >> 2] & 511) - (HEAP32[HEAP32[$p2 >> 2] + 76 >> 2] & 511) | 0;
}
function _qh_compare_facetvisit($p1, $p2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $p1;
    var $1 = HEAP32[$0 >> 2];
    var $2 = $p2;
    var $3 = HEAP32[$2 >> 2];
    var $visitid = $1 + 68 | 0;
    var $4 = HEAP32[$visitid >> 2];
    var $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $i_0 = $4;
      label = 4;
      break;
    }
   case 3:
    var $id = $1 + 72 | 0;
    var $5 = HEAP32[$id >> 2];
    var $sub = -$5 | 0;
    var $i_0 = $sub;
    label = 4;
    break;
   case 4:
    var $i_0;
    var $visitid1 = $3 + 68 | 0;
    var $6 = HEAP32[$visitid1 >> 2];
    var $tobool2 = ($6 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      var $j_0 = $6;
      label = 6;
      break;
    }
   case 5:
    var $id4 = $3 + 72 | 0;
    var $7 = HEAP32[$id4 >> 2];
    var $sub5 = -$7 | 0;
    var $j_0 = $sub5;
    label = 6;
    break;
   case 6:
    var $j_0;
    var $sub7 = $i_0 - $j_0 | 0;
    return $sub7;
  }
}
function _qh_produce_output2() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242928 >> 2];
    var $call = _qh_setsize($0);
    var $1 = HEAP32[5247316 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_printsummary();
    var $i_05 = 0;
    label = 6;
    break;
   case 4:
    var $2 = HEAP32[5247188 >> 2];
    var $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      var $i_05 = 0;
      label = 6;
      break;
    }
   case 5:
    _qh_printsummary();
    var $i_05 = 0;
    label = 6;
    break;
   case 6:
    var $i_05;
    var $3 = HEAP32[5248916 >> 2];
    var $arrayidx = 5247188 + ($i_05 << 2) | 0;
    var $4 = HEAP32[$arrayidx >> 2];
    var $5 = HEAP32[5248940 >> 2];
    _qh_printfacets($3, $4, $5, 0);
    var $inc = $i_05 + 1 | 0;
    var $exitcond = ($inc | 0) == 29;
    if ($exitcond) {
      label = 7;
      break;
    } else {
      var $i_05 = $inc;
      label = 6;
      break;
    }
   case 7:
    _qh_allstatistics();
    var $6 = HEAP32[5247184 >> 2];
    var $tobool4 = ($6 | 0) == 0;
    var $7 = HEAP32[5247080 >> 2];
    var $tobool5 = ($7 | 0) != 0;
    var $or_cond = $tobool4 | $tobool5;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp7 = $8 > 8.988465674311579e+307;
    var $9 = HEAP32[5247376 >> 2];
    var $tobool8 = ($9 | 0) != 0;
    var $or_cond1 = $cmp7 | $tobool8;
    if ($or_cond1) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $10 = HEAP32[5246912 >> 2];
    _qh_printstats($10, 0);
    label = 10;
    break;
   case 10:
    var $11 = HEAP32[5247464 >> 2];
    var $tobool11 = ($11 | 0) == 0;
    if ($tobool11) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $12 = HEAP32[5244440 >> 2];
    var $cmp13 = ($12 | 0) > 0;
    if ($cmp13) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $13 = HEAP32[5244488 >> 2];
    var $cmp15 = ($13 | 0) > 0;
    if ($cmp15) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $14 = HEAP32[5246916 >> 2];
    _qh_printstats($14, 0);
    label = 14;
    break;
   case 14:
    var $15 = HEAP32[5247312 >> 2];
    var $tobool18 = ($15 | 0) == 0;
    if ($tobool18) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_printstatistics();
    _qh_memstatistics();
    _qh_fprintf(5279276);
    label = 16;
    break;
   case 16:
    var $16 = HEAP32[5242928 >> 2];
    var $call22 = _qh_setsize($16);
    var $cmp23 = ($call22 | 0) == ($call | 0);
    if ($cmp23) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $17 = HEAP32[5242928 >> 2];
    var $call25 = _qh_setsize($17);
    _qh_fprintf(5273076);
    _qh_errexit(5, 0, 0);
    label = 18;
    break;
   case 18:
    return;
  }
}
_qh_produce_output2["X"] = 1;
function _qh_printfacets($fp, $format, $facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numfacets = __stackBase__;
    var $numsimplicial = __stackBase__ + 4;
    var $numridges = __stackBase__ + 8;
    var $totneighbors = __stackBase__ + 12;
    var $numcoplanars = __stackBase__ + 16;
    var $numtricoplanars = __stackBase__ + 20;
    var $vertices = __stackBase__ + 24;
    var $outerplane = __stackBase__ + 28;
    var $innerplane = __stackBase__ + 36;
    var $0 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $0;
    HEAP32[5247336 >> 2] = 0;
    var $1 = HEAP32[5246972 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    if (($format | 0) == 19 | ($format | 0) == 17 | ($format | 0) == 4) {
      label = 4;
      break;
    } else if (($format | 0) == 2) {
      label = 6;
      break;
    } else if (($format | 0) == 28) {
      label = 7;
      break;
    } else if (($format | 0) == 18) {
      label = 12;
      break;
    } else if (($format | 0) == 0) {
      label = 35;
      break;
    } else {
      label = 13;
      break;
    }
   case 4:
    _qh_fprintf(5293300);
    label = 5;
    break;
   case 5:
    if (($format | 0) == 2) {
      label = 6;
      break;
    } else if (($format | 0) == 28) {
      label = 7;
      break;
    } else if (($format | 0) == 18) {
      label = 12;
      break;
    } else if (($format | 0) == 0) {
      label = 35;
      break;
    } else {
      label = 13;
      break;
    }
   case 6:
    var $call = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call;
    var $call8 = _qh_getcenter($call);
    _qh_fprintf(5293148);
    var $2 = HEAP32[5247504 >> 2];
    _qh_printpointid(0, $2, $call8, -1);
    var $3 = $call8;
    var $4 = HEAP32[5248928 >> 2];
    _qh_memfree($3, $4);
    _qh_settempfree($vertices);
    label = 35;
    break;
   case 7:
    var $5 = HEAP32[5246996 >> 2];
    var $tobool12 = ($5 | 0) == 0;
    if ($tobool12) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_printextremes_d($facetlist, $facets);
    label = 35;
    break;
   case 9:
    var $6 = HEAP32[5247504 >> 2];
    var $cmp15 = ($6 | 0) == 2;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_printextremes_2d($facetlist, $facets);
    label = 35;
    break;
   case 11:
    _qh_printextremes($facetlist, $facets);
    label = 35;
    break;
   case 12:
    _qh_fprintf(5259968);
    label = 35;
    break;
   case 13:
    var $cmp24 = ($format | 0) != 21;
    var $7 = HEAP32[5247472 >> 2];
    var $tobool26 = ($7 | 0) != 0;
    var $or_cond2 = $cmp24 | $tobool26;
    if ($or_cond2) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_printpoints_out($facetlist, $facets);
    label = 35;
    break;
   case 15:
    if (($format | 0) == 22) {
      label = 16;
      break;
    } else if (($format | 0) == 23) {
      label = 17;
      break;
    } else if (($format | 0) == 24) {
      label = 18;
      break;
    } else if (($format | 0) == 27) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 16:
    _qh_fprintf(5292876);
    label = 35;
    break;
   case 17:
    _qh_fprintf(5292632);
    _qh_fprintf(5290352);
    _qh_fprintf(5290352);
    _qh_fprintf(5299656);
    label = 35;
    break;
   case 18:
    _qh_countfacets($facetlist, $facets, 0, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
    var $call37 = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call37;
    var $8 = HEAP32[5249180 >> 2];
    var $call38 = _qh_setsize($8);
    var $call39 = _qh_setsize($call37);
    _qh_fprintf(5292456);
    _qh_settempfree($vertices);
    _qh_outerinner(0, $outerplane, $innerplane);
    _qh_fprintf(5292276);
    label = 35;
    break;
   case 19:
    _qh_printvneighbors($facetlist, $facets);
    label = 35;
    break;
   case 20:
    var $cmp47 = ($format | 0) == 17;
    var $or_cond = $tobool26 & $cmp47;
    if ($or_cond) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_printvoronoi(17, $facetlist, $facets);
    label = 35;
    break;
   case 22:
    var $cmp52 = ($format | 0) == 7;
    var $or_cond102 = $tobool26 & $cmp52;
    if ($or_cond102) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    _qh_printbegin(7, $facetlist, $facets, 0);
    _qh_printvoronoi(7, $facetlist, $facets);
    _qh_printend($fp, 7, $facetlist, $facets, 0);
    label = 35;
    break;
   case 24:
    var $tobool55 = ($7 | 0) == 0;
    if ($tobool55) {
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    if (($format | 0) == 26 | ($format | 0) == 12 | ($format | 0) == 9) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_printvdiagram($fp, $format, $facetlist, $facets);
    label = 35;
    break;
   case 27:
    _qh_printbegin($format, $facetlist, $facets, 0);
    var $tobool64 = ($facetlist | 0) == 0;
    if ($tobool64) {
      label = 30;
      break;
    } else {
      var $facet_0106 = $facetlist;
      label = 28;
      break;
    }
   case 28:
    var $facet_0106;
    var $next = $facet_0106 + 44 | 0;
    var $9 = HEAP32[$next >> 2];
    var $tobool67 = ($9 | 0) == 0;
    if ($tobool67) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    _qh_printafacet($format, $facet_0106, 0);
    var $10 = HEAP32[$next >> 2];
    var $tobool66 = ($10 | 0) == 0;
    if ($tobool66) {
      label = 30;
      break;
    } else {
      var $facet_0106 = $10;
      label = 28;
      break;
    }
   case 30:
    var $tobool70 = ($facets | 0) == 0;
    if ($tobool70) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $p = $facets + 4 | 0;
    var $11 = HEAP32[$p >> 2];
    var $tobool73103 = ($11 | 0) == 0;
    if ($tobool73103) {
      label = 34;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $12 = $11;
    var $13 = $p;
    var $facetp_0104 = $13;
    var $14 = $12;
    label = 33;
    break;
   case 33:
    var $14;
    var $facetp_0104;
    var $incdec_ptr = $facetp_0104 + 4 | 0;
    _qh_printafacet($format, $14, 0);
    var $15 = HEAP32[$incdec_ptr >> 2];
    var $tobool73 = ($15 | 0) == 0;
    if ($tobool73) {
      label = 34;
      break;
    } else {
      var $facetp_0104 = $incdec_ptr;
      var $14 = $15;
      label = 33;
      break;
    }
   case 34:
    _qh_printend($fp, $format, $facetlist, $facets, 0);
    label = 35;
    break;
   case 35:
    var $16 = HEAP32[5249220 >> 2];
    HEAP32[5247336 >> 2] = $16;
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacets["X"] = 1;
function _qh_printfacet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_printfacetheader($facet);
    var $ridges = $facet + 52 | 0;
    var $0 = HEAP32[$ridges >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_printfacetridges($facet);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _qh_printvertex($vertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($vertex | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5288416);
    label = 19;
    break;
   case 4:
    var $point1 = $vertex + 8 | 0;
    var $0 = $vertex + 20 | 0;
    var $1 = $0;
    _qh_fprintf(5288360);
    var $2 = HEAP32[$point1 >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $3 = HEAP32[5247504 >> 2];
    var $tobool522 = ($3 | 0) == 0;
    if ($tobool522) {
      label = 7;
      break;
    } else {
      var $k_023 = $3;
      label = 6;
      break;
    }
   case 6:
    var $k_023;
    var $dec = $k_023 - 1 | 0;
    _qh_fprintf(5288264);
    var $tobool5 = ($dec | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      var $k_023 = $dec;
      label = 6;
      break;
    }
   case 7:
    var $4 = HEAP32[$1 >> 2];
    var $bf_clear8 = $4 & 1073741824;
    var $tobool9 = ($bf_clear8 | 0) == 0;
    if ($tobool9) {
      var $5 = $4;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_fprintf(5287892);
    var $_pre = HEAP32[$1 >> 2];
    var $5 = $_pre;
    label = 9;
    break;
   case 9:
    var $5;
    var $bf_clear13 = $5 & 536870912;
    var $tobool14 = ($bf_clear13 | 0) == 0;
    if ($tobool14) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5287816);
    label = 11;
    break;
   case 11:
    _qh_fprintf(5299656);
    var $neighbors = $vertex + 12 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $tobool17 = ($6 | 0) == 0;
    if ($tobool17) {
      label = 19;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5287748);
    var $7 = HEAP32[$neighbors >> 2];
    var $tobool20 = ($7 | 0) == 0;
    if ($tobool20) {
      label = 18;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $p = $7 + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool2519 = ($8 | 0) == 0;
    if ($tobool2519) {
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $incdec_ptr241825 = $p + 4 | 0;
    var $incdec_ptr2418 = $incdec_ptr241825;
    var $count_020 = 1;
    var $incdec_ptr2421 = $incdec_ptr2418;
    label = 15;
    break;
   case 15:
    var $incdec_ptr2421;
    var $count_020;
    var $rem = ($count_020 | 0) % 100;
    var $cmp = ($rem | 0) == 0;
    if ($cmp) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5294784);
    label = 17;
    break;
   case 17:
    _qh_fprintf(5260352);
    var $phitmp = $count_020 + 1 | 0;
    var $incdec_ptr24 = $incdec_ptr2421 + 4 | 0;
    var $9 = HEAP32[$incdec_ptr2421 >> 2];
    var $tobool25 = ($9 | 0) == 0;
    if ($tobool25) {
      label = 18;
      break;
    } else {
      var $count_020 = $phitmp;
      var $incdec_ptr2421 = $incdec_ptr24;
      label = 15;
      break;
    }
   case 18:
    _qh_fprintf(5299656);
    label = 19;
    break;
   case 19:
    return;
  }
}
_qh_printvertex["X"] = 1;
function _qh_countfacets($facetlist, $facets, $printall, $numfacetsp, $numsimplicialp, $totneighborsp, $numridgesp, $numcoplanarsp, $numtricoplanarsp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      var $numtricoplanars_3 = 0;
      var $numcoplanars_2 = 0;
      var $totneighbors_2 = 0;
      var $numridges_3 = 0;
      var $numsimplicial_3 = 0;
      var $numfacets_2 = 0;
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool5 = ($printall | 0) == 0;
    var $facet_051 = $facetlist;
    var $numfacets_052 = 0;
    var $numsimplicial_053 = 0;
    var $numridges_054 = 0;
    var $totneighbors_055 = 0;
    var $numcoplanars_056 = 0;
    var $numtricoplanars_057 = 0;
    label = 4;
    break;
   case 4:
    var $numtricoplanars_057;
    var $numcoplanars_056;
    var $totneighbors_055;
    var $numridges_054;
    var $numsimplicial_053;
    var $numfacets_052;
    var $facet_051;
    var $next = $facet_051 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      var $numtricoplanars_3 = $numtricoplanars_057;
      var $numcoplanars_2 = $numcoplanars_056;
      var $totneighbors_2 = $totneighbors_055;
      var $numridges_3 = $numridges_054;
      var $numsimplicial_3 = $numsimplicial_053;
      var $numfacets_2 = $numfacets_052;
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $1 = $facet_051 + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 2048;
    var $tobool3 = ($bf_clear | 0) != 0;
    var $4 = HEAP32[5249088 >> 2];
    var $tobool4 = ($4 | 0) != 0;
    var $or_cond = $tobool3 & $tobool4;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $call = _qh_skipfacet($facet_051);
    var $tobool7 = ($call | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $visitid = $facet_051 + 68 | 0;
    HEAP32[$visitid >> 2] = 0;
    var $numtricoplanars_2 = $numtricoplanars_057;
    var $numcoplanars_1 = $numcoplanars_056;
    var $totneighbors_1 = $totneighbors_055;
    var $numridges_2 = $numridges_054;
    var $numsimplicial_2 = $numsimplicial_053;
    var $numfacets_1 = $numfacets_052;
    label = 14;
    break;
   case 9:
    var $inc = $numfacets_052 + 1 | 0;
    var $visitid9 = $facet_051 + 68 | 0;
    HEAP32[$visitid9 >> 2] = $inc;
    var $neighbors = $facet_051 + 56 | 0;
    var $5 = HEAP32[$neighbors >> 2];
    var $call10 = _qh_setsize($5);
    var $add = $call10 + $totneighbors_055 | 0;
    var $6 = HEAP32[$2 >> 2];
    var $bf_clear12 = $6 & 8192;
    var $tobool13 = ($bf_clear12 | 0) == 0;
    if ($tobool13) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $inc15 = $numsimplicial_053 + 1 | 0;
    var $7 = $6 & 268435968;
    var $not_ = ($7 | 0) == 268435968;
    var $inc24 = $not_ & 1;
    var $numtricoplanars_0_inc24 = $inc24 + $numtricoplanars_057 | 0;
    var $numtricoplanars_1 = $numtricoplanars_0_inc24;
    var $numridges_1 = $numridges_054;
    var $numsimplicial_1 = $inc15;
    label = 12;
    break;
   case 11:
    var $ridges = $facet_051 + 52 | 0;
    var $8 = HEAP32[$ridges >> 2];
    var $call26 = _qh_setsize($8);
    var $add27 = $call26 + $numridges_054 | 0;
    var $numtricoplanars_1 = $numtricoplanars_057;
    var $numridges_1 = $add27;
    var $numsimplicial_1 = $numsimplicial_053;
    label = 12;
    break;
   case 12:
    var $numsimplicial_1;
    var $numridges_1;
    var $numtricoplanars_1;
    var $coplanarset = $facet_051 + 64 | 0;
    var $9 = HEAP32[$coplanarset >> 2];
    var $tobool29 = ($9 | 0) == 0;
    if ($tobool29) {
      var $numtricoplanars_2 = $numtricoplanars_1;
      var $numcoplanars_1 = $numcoplanars_056;
      var $totneighbors_1 = $add;
      var $numridges_2 = $numridges_1;
      var $numsimplicial_2 = $numsimplicial_1;
      var $numfacets_1 = $inc;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $call32 = _qh_setsize($9);
    var $add33 = $call32 + $numcoplanars_056 | 0;
    var $numtricoplanars_2 = $numtricoplanars_1;
    var $numcoplanars_1 = $add33;
    var $totneighbors_1 = $add;
    var $numridges_2 = $numridges_1;
    var $numsimplicial_2 = $numsimplicial_1;
    var $numfacets_1 = $inc;
    label = 14;
    break;
   case 14:
    var $numfacets_1;
    var $numsimplicial_2;
    var $numridges_2;
    var $totneighbors_1;
    var $numcoplanars_1;
    var $numtricoplanars_2;
    var $10 = HEAP32[$next >> 2];
    var $tobool1 = ($10 | 0) == 0;
    if ($tobool1) {
      var $numtricoplanars_3 = $numtricoplanars_2;
      var $numcoplanars_2 = $numcoplanars_1;
      var $totneighbors_2 = $totneighbors_1;
      var $numridges_3 = $numridges_2;
      var $numsimplicial_3 = $numsimplicial_2;
      var $numfacets_2 = $numfacets_1;
      label = 15;
      break;
    } else {
      var $facet_051 = $10;
      var $numfacets_052 = $numfacets_1;
      var $numsimplicial_053 = $numsimplicial_2;
      var $numridges_054 = $numridges_2;
      var $totneighbors_055 = $totneighbors_1;
      var $numcoplanars_056 = $numcoplanars_1;
      var $numtricoplanars_057 = $numtricoplanars_2;
      label = 4;
      break;
    }
   case 15:
    var $numfacets_2;
    var $numsimplicial_3;
    var $numridges_3;
    var $totneighbors_2;
    var $numcoplanars_2;
    var $numtricoplanars_3;
    var $tobool38 = ($facets | 0) == 0;
    if ($tobool38) {
      var $numtricoplanars_6 = $numtricoplanars_3;
      var $numcoplanars_4 = $numcoplanars_2;
      var $totneighbors_4 = $totneighbors_2;
      var $numridges_6 = $numridges_3;
      var $numsimplicial_6 = $numsimplicial_3;
      var $numfacets_4 = $numfacets_2;
      label = 28;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p = $facets + 4 | 0;
    var $11 = $p;
    var $tobool49 = ($printall | 0) == 0;
    var $numtricoplanars_4_ph_ph = $numtricoplanars_3;
    var $numcoplanars_3_ph_ph = $numcoplanars_2;
    var $totneighbors_3_ph_ph = $totneighbors_2;
    var $numridges_4_ph_ph = $numridges_3;
    var $numsimplicial_4_ph_ph = $numsimplicial_3;
    var $numfacets_3_ph_ph = $numfacets_2;
    var $facetp_0_ph_ph = $11;
    label = 17;
    break;
   case 17:
    var $facetp_0_ph_ph;
    var $numfacets_3_ph_ph;
    var $numsimplicial_4_ph_ph;
    var $numridges_4_ph_ph;
    var $totneighbors_3_ph_ph;
    var $numcoplanars_3_ph_ph;
    var $numtricoplanars_4_ph_ph;
    var $numtricoplanars_4_ph = $numtricoplanars_4_ph_ph;
    var $totneighbors_3_ph = $totneighbors_3_ph_ph;
    var $numridges_4_ph = $numridges_4_ph_ph;
    var $numsimplicial_4_ph = $numsimplicial_4_ph_ph;
    var $numfacets_3_ph = $numfacets_3_ph_ph;
    var $facetp_0_ph = $facetp_0_ph_ph;
    label = 18;
    break;
   case 18:
    var $facetp_0_ph;
    var $numfacets_3_ph;
    var $numsimplicial_4_ph;
    var $numridges_4_ph;
    var $totneighbors_3_ph;
    var $numtricoplanars_4_ph;
    var $12 = HEAP32[$facetp_0_ph >> 2];
    var $tobool4148 = ($12 | 0) == 0;
    if ($tobool4148) {
      var $numtricoplanars_6 = $numtricoplanars_4_ph;
      var $numcoplanars_4 = $numcoplanars_3_ph_ph;
      var $totneighbors_4 = $totneighbors_3_ph;
      var $numridges_6 = $numridges_4_ph;
      var $numsimplicial_6 = $numsimplicial_4_ph;
      var $numfacets_4 = $numfacets_3_ph;
      label = 28;
      break;
    } else {
      var $facetp_0_ph_pn = $facetp_0_ph;
      var $13 = $12;
      label = 19;
      break;
    }
   case 19:
    var $13;
    var $facetp_0_ph_pn;
    var $incdec_ptr49 = $facetp_0_ph_pn + 4 | 0;
    var $14 = $13 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear44 = $16 & 2048;
    var $tobool45 = ($bf_clear44 | 0) != 0;
    var $17 = HEAP32[5249088 >> 2];
    var $tobool47 = ($17 | 0) != 0;
    var $or_cond1 = $tobool45 & $tobool47;
    if ($or_cond1) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    if ($tobool49) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $call51 = _qh_skipfacet($13);
    var $tobool52 = ($call51 | 0) == 0;
    if ($tobool52) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $visitid54 = $13 + 68 | 0;
    HEAP32[$visitid54 >> 2] = 0;
    var $18 = HEAP32[$incdec_ptr49 >> 2];
    var $tobool41 = ($18 | 0) == 0;
    if ($tobool41) {
      var $numtricoplanars_6 = $numtricoplanars_4_ph;
      var $numcoplanars_4 = $numcoplanars_3_ph_ph;
      var $totneighbors_4 = $totneighbors_3_ph;
      var $numridges_6 = $numridges_4_ph;
      var $numsimplicial_6 = $numsimplicial_4_ph;
      var $numfacets_4 = $numfacets_3_ph;
      label = 28;
      break;
    } else {
      var $facetp_0_ph_pn = $incdec_ptr49;
      var $13 = $18;
      label = 19;
      break;
    }
   case 23:
    var $inc56 = $numfacets_3_ph + 1 | 0;
    var $visitid57 = $13 + 68 | 0;
    HEAP32[$visitid57 >> 2] = $inc56;
    var $neighbors58 = $13 + 56 | 0;
    var $19 = HEAP32[$neighbors58 >> 2];
    var $call59 = _qh_setsize($19);
    var $add60 = $call59 + $totneighbors_3_ph | 0;
    var $20 = HEAP32[$15 >> 2];
    var $bf_clear62 = $20 & 8192;
    var $tobool63 = ($bf_clear62 | 0) == 0;
    if ($tobool63) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $inc65 = $numsimplicial_4_ph + 1 | 0;
    var $21 = $20 & 268435968;
    var $not_44 = ($21 | 0) == 268435968;
    var $inc74 = $not_44 & 1;
    var $numtricoplanars_4_inc74 = $inc74 + $numtricoplanars_4_ph | 0;
    var $numtricoplanars_5 = $numtricoplanars_4_inc74;
    var $numridges_5 = $numridges_4_ph;
    var $numsimplicial_5 = $inc65;
    label = 26;
    break;
   case 25:
    var $ridges77 = $13 + 52 | 0;
    var $22 = HEAP32[$ridges77 >> 2];
    var $call78 = _qh_setsize($22);
    var $add79 = $call78 + $numridges_4_ph | 0;
    var $numtricoplanars_5 = $numtricoplanars_4_ph;
    var $numridges_5 = $add79;
    var $numsimplicial_5 = $numsimplicial_4_ph;
    label = 26;
    break;
   case 26:
    var $numsimplicial_5;
    var $numridges_5;
    var $numtricoplanars_5;
    var $coplanarset81 = $13 + 64 | 0;
    var $23 = HEAP32[$coplanarset81 >> 2];
    var $tobool82 = ($23 | 0) == 0;
    if ($tobool82) {
      var $numtricoplanars_4_ph = $numtricoplanars_5;
      var $totneighbors_3_ph = $add60;
      var $numridges_4_ph = $numridges_5;
      var $numsimplicial_4_ph = $numsimplicial_5;
      var $numfacets_3_ph = $inc56;
      var $facetp_0_ph = $incdec_ptr49;
      label = 18;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call85 = _qh_setsize($23);
    var $add86 = $call85 + $numcoplanars_3_ph_ph | 0;
    var $numtricoplanars_4_ph_ph = $numtricoplanars_5;
    var $numcoplanars_3_ph_ph = $add86;
    var $totneighbors_3_ph_ph = $add60;
    var $numridges_4_ph_ph = $numridges_5;
    var $numsimplicial_4_ph_ph = $numsimplicial_5;
    var $numfacets_3_ph_ph = $inc56;
    var $facetp_0_ph_ph = $incdec_ptr49;
    label = 17;
    break;
   case 28:
    var $numfacets_4;
    var $numsimplicial_6;
    var $numridges_6;
    var $totneighbors_4;
    var $numcoplanars_4;
    var $numtricoplanars_6;
    var $add91 = $numfacets_4 + 1 | 0;
    var $24 = HEAP32[5249152 >> 2];
    var $add92 = $add91 + $24 | 0;
    HEAP32[5249152 >> 2] = $add92;
    HEAP32[$numfacetsp >> 2] = $numfacets_4;
    HEAP32[$numsimplicialp >> 2] = $numsimplicial_6;
    HEAP32[$totneighborsp >> 2] = $totneighbors_4;
    HEAP32[$numridgesp >> 2] = $numridges_6;
    HEAP32[$numcoplanarsp >> 2] = $numcoplanars_4;
    HEAP32[$numtricoplanarsp >> 2] = $numtricoplanars_6;
    return;
  }
}
_qh_countfacets["X"] = 1;
function _qh_skipfacet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247168 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = $facet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 524288;
    var $tobool1 = ($bf_clear | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = HEAP32[5247160 >> 2];
    var $lnot = ($4 | 0) == 0;
    var $lnot_ext = $lnot & 1;
    var $retval_0 = $lnot_ext;
    label = 13;
    break;
   case 5:
    var $neighbors = $facet + 56 | 0;
    var $5 = HEAP32[$neighbors >> 2];
    var $tobool4 = ($5 | 0) == 0;
    if ($tobool4) {
      var $retval_0 = 1;
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $5 + 4 | 0;
    var $6 = $p;
    var $neighborp_0 = $6;
    label = 7;
    break;
   case 7:
    var $neighborp_0;
    var $7 = HEAP32[$neighborp_0 >> 2];
    var $tobool7 = ($7 | 0) == 0;
    if ($tobool7) {
      var $retval_0 = 1;
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $8 = $7 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear9 = $10 & 524288;
    var $tobool10 = ($bf_clear9 | 0) == 0;
    if ($tobool10) {
      var $neighborp_0 = $incdec_ptr;
      label = 7;
      break;
    } else {
      var $retval_0 = 0;
      label = 13;
      break;
    }
   case 9:
    var $11 = HEAP32[5247160 >> 2];
    var $tobool14 = ($11 | 0) == 0;
    if ($tobool14) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $12 = $facet + 76 | 0;
    var $13 = $12;
    var $14 = HEAP32[$13 >> 2];
    var $bf_clear17 = $14 >>> 19;
    var $bf_clear17_lobit = $bf_clear17 & 1;
    var $15 = $bf_clear17_lobit ^ 1;
    var $retval_0 = $15;
    label = 13;
    break;
   case 11:
    var $normal = $facet + 24 | 0;
    var $16 = HEAP32[$normal >> 2];
    var $tobool22 = ($16 | 0) == 0;
    if ($tobool22) {
      var $retval_0 = 1;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $call = _qh_inthresholds($16, 0);
    var $lnot29 = ($call | 0) == 0;
    var $lnot_ext30 = $lnot29 & 1;
    var $retval_0 = $lnot_ext30;
    label = 13;
    break;
   case 13:
    var $retval_0;
    return $retval_0;
  }
}
_qh_skipfacet["X"] = 1;
function _qh_detvnorm($vertex, $vertexA, $centers, $offsetp) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $simplex = __stackBase__;
    var $points = __stackBase__ + 4;
    var $nearzero = __stackBase__ + 8;
    var $offset = __stackBase__ + 12;
    HEAP32[$simplex >> 2] = 0;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$points >> 2] = $call;
    HEAP32[$nearzero >> 2] = 0;
    var $1 = HEAP32[5247504 >> 2];
    var $sub = $1 - 1 | 0;
    var $2 = HEAP32[5249188 >> 2];
    var $mul = $1 * $1 & -1;
    var $add_ptr = $2 + ($mul << 3) | 0;
    var $cmp115 = ($sub | 0) > 0;
    if ($cmp115) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $point1 = $vertex + 8 | 0;
    var $point2 = $vertexA + 8 | 0;
    var $k_0116 = 0;
    label = 4;
    break;
   case 4:
    var $k_0116;
    var $3 = HEAP32[$point1 >> 2];
    var $arrayidx = $3 + ($k_0116 << 3) | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $5 = HEAP32[$point2 >> 2];
    var $arrayidx3 = $5 + ($k_0116 << 3) | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $4 + $6;
    var $div = $add * .5;
    var $add_ptr_sum94 = $k_0116 + $mul | 0;
    var $arrayidx4 = $2 + ($add_ptr_sum94 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $k_0116 + 1 | 0;
    var $exitcond134 = ($inc | 0) == ($sub | 0);
    if ($exitcond134) {
      label = 5;
      break;
    } else {
      var $k_0116 = $inc;
      label = 4;
      break;
    }
   case 5:
    var $tobool = ($centers | 0) == 0;
    if ($tobool) {
      var $numcenters_1 = 0;
      var $unbounded_1 = 0;
      label = 14;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $centers + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool7111121 = ($7 | 0) == 0;
    if ($tobool7111121) {
      var $numcenters_1 = 0;
      var $unbounded_1 = 0;
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $8 = $7;
    var $incdec_ptr110120127 = $p + 4 | 0;
    var $incdec_ptr110120 = $incdec_ptr110120127;
    var $unbounded_0_ph122 = 0;
    var $numcenters_0_ph123 = 0;
    var $incdec_ptr110124 = $incdec_ptr110120;
    var $10 = $8;
    label = 9;
    break;
   case 8:
    var $incdec_ptr110 = $incdec_ptr113 + 4 | 0;
    var $9 = HEAP32[$incdec_ptr113 >> 2];
    var $tobool7111 = ($9 | 0) == 0;
    if ($tobool7111) {
      var $numcenters_1 = $inc9;
      var $unbounded_1 = 1;
      label = 14;
      break;
    } else {
      var $unbounded_0_ph122 = 1;
      var $numcenters_0_ph123 = $inc9;
      var $incdec_ptr110124 = $incdec_ptr110;
      var $10 = $9;
      label = 9;
      break;
    }
   case 9:
    var $10;
    var $incdec_ptr110124;
    var $numcenters_0_ph123;
    var $unbounded_0_ph122;
    var $numcenters_0112 = $numcenters_0_ph123;
    var $incdec_ptr113 = $incdec_ptr110124;
    var $11 = $10;
    label = 10;
    break;
   case 10:
    var $11;
    var $incdec_ptr113;
    var $numcenters_0112;
    var $inc9 = $numcenters_0112 + 1 | 0;
    var $visitid = $11 + 68 | 0;
    var $12 = HEAP32[$visitid >> 2];
    var $tobool10 = ($12 | 0) == 0;
    if ($tobool10) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $center = $11 + 36 | 0;
    var $13 = HEAP32[$center >> 2];
    var $tobool12 = ($13 | 0) == 0;
    if ($tobool12) {
      label = 12;
      break;
    } else {
      var $15 = $13;
      label = 13;
      break;
    }
   case 12:
    var $vertices = $11 + 48 | 0;
    var $14 = HEAP32[$vertices >> 2];
    var $call14 = _qh_facetcenter($14);
    HEAP32[$center >> 2] = $call14;
    var $15 = $call14;
    label = 13;
    break;
   case 13:
    var $15;
    var $16 = $15;
    _qh_setappend($points, $16);
    var $incdec_ptr = $incdec_ptr113 + 4 | 0;
    var $17 = HEAP32[$incdec_ptr113 >> 2];
    var $tobool7 = ($17 | 0) == 0;
    if ($tobool7) {
      var $numcenters_1 = $inc9;
      var $unbounded_1 = $unbounded_0_ph122;
      label = 14;
      break;
    } else {
      var $numcenters_0112 = $inc9;
      var $incdec_ptr113 = $incdec_ptr;
      var $11 = $17;
      label = 10;
      break;
    }
   case 14:
    var $unbounded_1;
    var $numcenters_1;
    var $cmp20 = ($numcenters_1 | 0) > ($sub | 0);
    if ($cmp20) {
      label = 15;
      break;
    } else {
      label = 18;
      break;
    }
   case 15:
    var $18 = HEAP32[5248936 >> 2];
    var $call22 = _qh_settemp($18);
    HEAP32[$simplex >> 2] = $call22;
    var $point23 = $vertex + 8 | 0;
    var $19 = HEAP32[$point23 >> 2];
    var $20 = $19;
    _qh_setappend($simplex, $20);
    var $tobool24 = ($unbounded_1 | 0) == 0;
    if ($tobool24) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $21 = $add_ptr;
    _qh_setappend($simplex, $21);
    label = 17;
    break;
   case 17:
    var $22 = HEAP32[$points >> 2];
    _qh_maxsimplex($sub, $22, 0, 0, $simplex);
    var $23 = HEAP32[$simplex >> 2];
    var $call27 = _qh_setdelnth($23, 0);
    var $26 = $23;
    label = 23;
    break;
   case 18:
    var $cmp29 = ($numcenters_1 | 0) == ($sub | 0);
    if ($cmp29) {
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    var $tobool31 = ($unbounded_1 | 0) == 0;
    if ($tobool31) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $24 = $add_ptr;
    _qh_setappend($points, $24);
    label = 21;
    break;
   case 21:
    var $25 = HEAP32[$points >> 2];
    HEAP32[$simplex >> 2] = $25;
    var $26 = $25;
    label = 23;
    break;
   case 22:
    _qh_fprintf(5263988);
    _qh_errexit(5, 0, 0);
    var $_pr_pre = HEAP32[$simplex >> 2];
    var $26 = $_pr_pre;
    label = 23;
    break;
   case 23:
    var $26;
    var $27 = HEAP32[5249188 >> 2];
    var $p39 = $26 + 4 | 0;
    var $28 = HEAP32[$p39 >> 2];
    var $29 = $28;
    var $tobool40 = ($26 | 0) == 0;
    if ($tobool40) {
      var $gmcoord_2 = $27;
      var $i_1 = 0;
      label = 34;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $30 = $p39;
    var $tobool57102 = ($sub | 0) == 0;
    var $gmcoord_0_ph_ph = $27;
    var $i_0_ph_ph = 0;
    var $pointp_0_ph_ph = $30;
    label = 25;
    break;
   case 25:
    var $pointp_0_ph_ph;
    var $i_0_ph_ph;
    var $gmcoord_0_ph_ph;
    var $i_0_ph = $i_0_ph_ph;
    var $pointp_0_ph = $pointp_0_ph_ph;
    label = 26;
    break;
   case 26:
    var $pointp_0_ph;
    var $i_0_ph;
    var $pointp_0 = $pointp_0_ph;
    label = 27;
    break;
   case 27:
    var $pointp_0;
    var $incdec_ptr46 = $pointp_0 + 4 | 0;
    var $31 = HEAP32[$pointp_0 >> 2];
    var $tobool47 = ($31 | 0) == 0;
    if ($tobool47) {
      var $gmcoord_2 = $gmcoord_0_ph_ph;
      var $i_1 = $i_0_ph;
      label = 34;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $32 = HEAP32[5247036 >> 2];
    var $cmp49 = ($32 | 0) > 3;
    if ($cmp49) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_printmatrix(1, $sub);
    label = 30;
    break;
   case 30:
    var $cmp52 = ($31 | 0) == ($29 | 0);
    if ($cmp52) {
      var $pointp_0 = $incdec_ptr46;
      label = 27;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $inc54 = $i_0_ph + 1 | 0;
    var $33 = HEAP32[5249192 >> 2];
    var $arrayidx55 = $33 + ($i_0_ph << 2) | 0;
    HEAP32[$arrayidx55 >> 2] = $gmcoord_0_ph_ph;
    if ($tobool57102) {
      var $i_0_ph = $inc54;
      var $pointp_0_ph = $incdec_ptr46;
      label = 26;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $scevgep = $gmcoord_0_ph_ph + ($sub << 3) | 0;
    var $k_1103 = $sub;
    var $coord_0104 = $29;
    var $gmcoord_1105 = $gmcoord_0_ph_ph;
    var $incdec_ptr59106 = $31;
    label = 33;
    break;
   case 33:
    var $incdec_ptr59106;
    var $gmcoord_1105;
    var $coord_0104;
    var $k_1103;
    var $dec = $k_1103 - 1 | 0;
    var $incdec_ptr59 = $incdec_ptr59106 + 8 | 0;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$incdec_ptr59106 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$incdec_ptr59106 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $incdec_ptr60 = $coord_0104 + 8 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_0104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_0104 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub61 = $34 - $35;
    var $incdec_ptr62 = $gmcoord_1105 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub61, HEAP32[$gmcoord_1105 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$gmcoord_1105 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool57 = ($dec | 0) == 0;
    if ($tobool57) {
      var $gmcoord_0_ph_ph = $scevgep;
      var $i_0_ph_ph = $inc54;
      var $pointp_0_ph_ph = $incdec_ptr46;
      label = 25;
      break;
    } else {
      var $k_1103 = $dec;
      var $coord_0104 = $incdec_ptr60;
      var $gmcoord_1105 = $incdec_ptr62;
      var $incdec_ptr59106 = $incdec_ptr59;
      label = 33;
      break;
    }
   case 34:
    var $i_1;
    var $gmcoord_2;
    var $36 = HEAP32[5249192 >> 2];
    var $arrayidx67 = $36 + ($i_1 << 2) | 0;
    HEAP32[$arrayidx67 >> 2] = $gmcoord_2;
    var $37 = HEAP32[5249192 >> 2];
    _qh_sethyperplane_gauss($sub, $37, $29, 1, $gmcoord_2, $offset, $nearzero);
    var $38 = HEAP32[5247028 >> 2];
    var $point68 = $vertexA + 8 | 0;
    var $39 = HEAP32[$point68 >> 2];
    var $cmp69 = ($38 | 0) == ($39 | 0);
    if ($cmp69) {
      var $inpoint_0 = $38;
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $point73 = $vertex + 8 | 0;
    var $40 = HEAP32[$point73 >> 2];
    var $inpoint_0 = $40;
    label = 36;
    break;
   case 36:
    var $inpoint_0;
    var $41 = HEAP32[5243424 >> 2];
    var $inc75 = $41 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc75;
    var $offset_val2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call76 = _qh_distnorm($sub, $inpoint_0, $gmcoord_2, $offset_val2);
    var $cmp77 = $call76 > 0;
    if ($cmp77) {
      label = 37;
      break;
    } else {
      label = 39;
      break;
    }
   case 37:
    var $sub79 = -$offset_val2;
    HEAPF64[tempDoublePtr >> 3] = $sub79, HEAP32[$offset >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool8299 = ($sub | 0) == 0;
    if ($tobool8299) {
      label = 39;
      break;
    } else {
      var $k_2100 = $sub;
      var $normalp_0101 = $gmcoord_2;
      label = 38;
      break;
    }
   case 38:
    var $normalp_0101;
    var $k_2100;
    var $dec81 = $k_2100 - 1 | 0;
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normalp_0101 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normalp_0101 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub84 = -$42;
    HEAPF64[tempDoublePtr >> 3] = $sub84, HEAP32[$normalp_0101 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$normalp_0101 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $incdec_ptr85 = $normalp_0101 + 8 | 0;
    var $tobool82 = ($dec81 | 0) == 0;
    if ($tobool82) {
      label = 39;
      break;
    } else {
      var $k_2100 = $dec81;
      var $normalp_0101 = $incdec_ptr85;
      label = 38;
      break;
    }
   case 39:
    var $43 = HEAP32[5247464 >> 2];
    var $44 = HEAP32[5247312 >> 2];
    var $45 = $44 | $43;
    var $46 = ($45 | 0) == 0;
    if ($46) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $_pre = HEAP32[$points >> 2];
    var $72 = $_pre;
    label = 75;
    break;
   case 41:
    var $point91 = $vertex + 8 | 0;
    var $tobool95 = ($unbounded_1 | 0) == 0;
    if ($tobool95) {
      label = 42;
      break;
    } else {
      label = 64;
      break;
    }
   case 42:
    var $47 = HEAP32[5243440 >> 2];
    var $inc97 = $47 + 1 | 0;
    HEAP32[5243440 >> 2] = $inc97;
    var $offset_val1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call98 = _qh_distnorm($sub, $add_ptr, $gmcoord_2, $offset_val1);
    var $cmp99 = $call98 < 0;
    if ($cmp99) {
      label = 43;
      break;
    } else {
      var $dist_0 = $call98;
      label = 44;
      break;
    }
   case 43:
    var $sub101 = -$call98;
    var $dist_0 = $sub101;
    label = 44;
    break;
   case 44:
    var $dist_0;
    var $48 = HEAP32[5244488 >> 2];
    var $inc103 = $48 + 1 | 0;
    HEAP32[5244488 >> 2] = $inc103;
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244504 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244508 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp104 = $49 < $dist_0;
    if ($cmp104) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    HEAPF64[tempDoublePtr >> 3] = $dist_0, HEAP32[5244504 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244508 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 46;
    break;
   case 46:
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244496 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244500 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add107 = $dist_0 + $50;
    HEAPF64[tempDoublePtr >> 3] = $add107, HEAP32[5244496 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244500 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $51 = HEAP32[5247036 >> 2];
    var $cmp108 = ($51 | 0) > 3;
    if ($cmp108) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    _qh_fprintf(5256876);
    label = 48;
    break;
   case 48:
    if ($cmp115) {
      var $k_398 = 0;
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    var $k_398;
    var $52 = HEAP32[$point68 >> 2];
    var $arrayidx115 = $52 + ($k_398 << 3) | 0;
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx115 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx115 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $54 = HEAP32[$point91 >> 2];
    var $arrayidx117 = $54 + ($k_398 << 3) | 0;
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx117 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx117 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub118 = $53 - $55;
    var $add_ptr_sum = $k_398 + $mul | 0;
    var $arrayidx119 = $2 + ($add_ptr_sum << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub118, HEAP32[$arrayidx119 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx119 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc121 = $k_398 + 1 | 0;
    var $exitcond128 = ($inc121 | 0) == ($sub | 0);
    if ($exitcond128) {
      label = 50;
      break;
    } else {
      var $k_398 = $inc121;
      label = 49;
      break;
    }
   case 50:
    _qh_normalize($add_ptr, $sub);
    var $call123 = _qh_distnorm($sub, $add_ptr, $gmcoord_2, 0);
    var $cmp124 = $call123 < 0;
    if ($cmp124) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    var $add126 = $call123 + 1;
    var $angle_0 = $add126;
    label = 53;
    break;
   case 52:
    var $sub128 = $call123 - 1;
    var $angle_0 = $sub128;
    label = 53;
    break;
   case 53:
    var $angle_0;
    var $cmp130 = $angle_0 < 0;
    if ($cmp130) {
      label = 54;
      break;
    } else {
      var $angle_1 = $angle_0;
      label = 55;
      break;
    }
   case 54:
    var $sub132 = $angle_0 - $angle_0;
    var $angle_1 = $sub132;
    label = 55;
    break;
   case 55:
    var $angle_1;
    var $56 = HEAP32[5247036 >> 2];
    var $cmp134 = ($56 | 0) > 3;
    if ($cmp134) {
      label = 56;
      break;
    } else {
      label = 57;
      break;
    }
   case 56:
    _qh_fprintf(5253916);
    label = 57;
    break;
   case 57:
    var $57 = HEAP32[$nearzero >> 2];
    var $tobool137 = ($57 | 0) == 0;
    if ($tobool137) {
      label = 61;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    var $58 = HEAP32[5244464 >> 2];
    var $inc139 = $58 + 1 | 0;
    HEAP32[5244464 >> 2] = $inc139;
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244480 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244484 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp140 = $59 < $angle_1;
    if ($cmp140) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    HEAPF64[tempDoublePtr >> 3] = $angle_1, HEAP32[5244480 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244484 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 60;
    break;
   case 60:
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244472 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244476 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add143 = $angle_1 + $60;
    HEAPF64[tempDoublePtr >> 3] = $add143, HEAP32[5244472 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244476 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 64;
    break;
   case 61:
    var $61 = HEAP32[5244512 >> 2];
    var $inc145 = $61 + 1 | 0;
    HEAP32[5244512 >> 2] = $inc145;
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244528 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244532 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp146 = $62 < $angle_1;
    if ($cmp146) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    HEAPF64[tempDoublePtr >> 3] = $angle_1, HEAP32[5244528 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244532 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 63;
    break;
   case 63:
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244520 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244524 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add149 = $angle_1 + $63;
    HEAPF64[tempDoublePtr >> 3] = $add149, HEAP32[5244520 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244524 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 64;
    break;
   case 64:
    var $64 = HEAP32[$points >> 2];
    var $cmp152 = ($26 | 0) == ($64 | 0);
    if ($cmp152) {
      var $72 = $26;
      label = 75;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $tobool154 = ($64 | 0) == 0;
    if ($tobool154) {
      var $72 = 0;
      label = 75;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $p158 = $64 + 4 | 0;
    var $65 = HEAP32[$p158 >> 2];
    var $call159 = _qh_setsize($64);
    var $cmp16195 = ($call159 | 0) > 0;
    if ($cmp16195) {
      var $point_i_096 = 0;
      var $point_0_in = $65;
      label = 67;
      break;
    } else {
      var $72 = $64;
      label = 75;
      break;
    }
   case 67:
    var $point_0_in;
    var $point_i_096;
    var $call163 = _qh_setin($26, $point_0_in);
    var $tobool164 = ($call163 | 0) == 0;
    if ($tobool164) {
      label = 68;
      break;
    } else {
      label = 74;
      break;
    }
   case 68:
    var $point_0 = $point_0_in;
    var $66 = HEAP32[5243440 >> 2];
    var $inc169 = $66 + 1 | 0;
    HEAP32[5243440 >> 2] = $inc169;
    var $offset_val = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call170 = _qh_distnorm($sub, $point_0, $gmcoord_2, $offset_val);
    var $cmp171 = $call170 < 0;
    if ($cmp171) {
      label = 69;
      break;
    } else {
      var $dist_1 = $call170;
      label = 70;
      break;
    }
   case 69:
    var $sub173 = -$call170;
    var $dist_1 = $sub173;
    label = 70;
    break;
   case 70:
    var $dist_1;
    var $67 = HEAP32[5244440 >> 2];
    var $inc175 = $67 + 1 | 0;
    HEAP32[5244440 >> 2] = $inc175;
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244456 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244460 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp176 = $68 < $dist_1;
    if ($cmp176) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    HEAPF64[tempDoublePtr >> 3] = $dist_1, HEAP32[5244456 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244460 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 72;
    break;
   case 72:
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244448 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244452 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add179 = $dist_1 + $69;
    HEAPF64[tempDoublePtr >> 3] = $add179, HEAP32[5244448 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244452 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $70 = HEAP32[5247036 >> 2];
    var $cmp180 = ($70 | 0) > 3;
    if ($cmp180) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    _qh_fprintf(5251344);
    label = 74;
    break;
   case 74:
    var $inc186 = $point_i_096 + 1 | 0;
    var $p189 = $64 + 4 + ($inc186 << 2) | 0;
    var $71 = HEAP32[$p189 >> 2];
    var $exitcond = ($inc186 | 0) == ($call159 | 0);
    if ($exitcond) {
      var $72 = $64;
      label = 75;
      break;
    } else {
      var $point_i_096 = $inc186;
      var $point_0_in = $71;
      label = 67;
      break;
    }
   case 75:
    var $72;
    var $73 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $73, HEAP32[$offsetp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offsetp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp194 = ($26 | 0) == ($72 | 0);
    if ($cmp194) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    _qh_settempfree($simplex);
    label = 77;
    break;
   case 77:
    _qh_settempfree($points);
    STACKTOP = __stackBase__;
    return $gmcoord_2;
  }
}
_qh_detvnorm["X"] = 1;
function _qh_detvridge($vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $centers = __stackBase__;
    var $tricenters = __stackBase__ + 4;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$centers >> 2] = $call;
    var $1 = HEAP32[5248936 >> 2];
    var $call1 = _qh_settemp($1);
    HEAP32[$tricenters >> 2] = $call1;
    var $neighbors = $vertex + 12 | 0;
    var $2 = HEAP32[$neighbors >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool3912 = ($3 | 0) == 0;
    if ($tobool3912) {
      label = 15;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = $3;
    var $incdec_ptr81115 = $p + 4 | 0;
    var $incdec_ptr811 = $incdec_ptr81115;
    var $firstinf_0_ph13 = 1;
    var $incdec_ptr814 = $incdec_ptr811;
    var $5 = $4;
    label = 5;
    break;
   case 5:
    var $5;
    var $incdec_ptr814;
    var $firstinf_0_ph13;
    var $incdec_ptr10 = $incdec_ptr814;
    var $6 = $5;
    label = 6;
    break;
   case 6:
    var $6;
    var $incdec_ptr10;
    var $7 = $6;
    var $8 = $6 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear = $10 & 16384;
    var $tobool4 = ($bf_clear | 0) == 0;
    if ($tobool4) {
      label = 11;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $visitid = $6 + 68 | 0;
    var $11 = HEAP32[$visitid >> 2];
    var $tobool6 = ($11 | 0) == 0;
    if ($tobool6) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $bf_clear9 = $10 & 512;
    var $tobool10 = ($bf_clear9 | 0) == 0;
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $center = $6 + 36 | 0;
    var $12 = HEAP32[$center >> 2];
    var $13 = $12;
    var $call11 = _qh_setunique($tricenters, $13);
    var $tobool12 = ($call11 | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_setappend($centers, $7);
    label = 11;
    break;
   case 11:
    var $incdec_ptr = $incdec_ptr10 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr10 >> 2];
    var $tobool3 = ($14 | 0) == 0;
    if ($tobool3) {
      label = 15;
      break;
    } else {
      var $incdec_ptr10 = $incdec_ptr;
      var $6 = $14;
      label = 6;
      break;
    }
   case 12:
    var $tobool14 = ($firstinf_0_ph13 | 0) == 0;
    if ($tobool14) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_setappend($centers, $7);
    label = 14;
    break;
   case 14:
    var $incdec_ptr8 = $incdec_ptr10 + 4 | 0;
    var $15 = HEAP32[$incdec_ptr10 >> 2];
    var $tobool39 = ($15 | 0) == 0;
    if ($tobool39) {
      label = 15;
      break;
    } else {
      var $firstinf_0_ph13 = 0;
      var $incdec_ptr814 = $incdec_ptr8;
      var $5 = $15;
      label = 5;
      break;
    }
   case 15:
    var $16 = HEAP32[$centers >> 2];
    var $p22 = $16 + 4 | 0;
    var $17 = $p22;
    var $call23 = _qh_setsize($16);
    _qsort($17, $call23, 4, 14);
    _qh_settempfree($tricenters);
    STACKTOP = __stackBase__;
    return $16;
  }
}
_qh_detvridge["X"] = 1;
function _qh_detvridge3($atvertex, $vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $centers = __stackBase__;
    var $tricenters = __stackBase__ + 4;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$centers >> 2] = $call;
    var $1 = HEAP32[5248936 >> 2];
    var $call1 = _qh_settemp($1);
    HEAP32[$tricenters >> 2] = $call1;
    var $neighbors = $atvertex + 12 | 0;
    var $2 = HEAP32[$neighbors >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool344 = ($3 | 0) == 0;
    if ($tobool344) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = $3;
    var $5 = $p;
    var $neighborp_045 = $5;
    var $6 = $4;
    label = 5;
    break;
   case 5:
    var $6;
    var $neighborp_045;
    var $incdec_ptr = $neighborp_045 + 4 | 0;
    var $7 = $6 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $10 = $9 & -32769;
    HEAP32[$8 >> 2] = $10;
    var $11 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($11 | 0) == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      var $neighborp_045 = $incdec_ptr;
      var $6 = $11;
      label = 5;
      break;
    }
   case 6:
    var $neighbors4 = $vertex + 12 | 0;
    var $12 = HEAP32[$neighbors4 >> 2];
    var $tobool5 = ($12 | 0) == 0;
    if ($tobool5) {
      label = 25;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p10 = $12 + 4 | 0;
    var $13 = $p10;
    var $neighborp_1 = $13;
    label = 8;
    break;
   case 8:
    var $neighborp_1;
    var $14 = HEAP32[$neighborp_1 >> 2];
    var $tobool13 = ($14 | 0) == 0;
    if ($tobool13) {
      label = 25;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $incdec_ptr12 = $neighborp_1 + 4 | 0;
    var $15 = $14 + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $bf_clear = $17 & 32768;
    var $tobool16 = ($bf_clear | 0) == 0;
    if ($tobool16) {
      var $neighbor_042 = $14;
      var $firstinf_043 = 1;
      var $18 = $17;
      label = 10;
      break;
    } else {
      var $neighborp_1 = $incdec_ptr12;
      label = 8;
      break;
    }
   case 10:
    var $18;
    var $firstinf_043;
    var $neighbor_042;
    var $19 = $neighbor_042;
    var $20 = $neighbor_042 + 76 | 0;
    var $21 = $20;
    var $22 = $18 | 32768;
    HEAP32[$21 >> 2] = $22;
    var $bf_clear24 = $18 & 16384;
    var $tobool25 = ($bf_clear24 | 0) == 0;
    if ($tobool25) {
      var $firstinf_1 = $firstinf_043;
      label = 17;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $visitid = $neighbor_042 + 68 | 0;
    var $23 = HEAP32[$visitid >> 2];
    var $tobool27 = ($23 | 0) == 0;
    if ($tobool27) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $bf_clear30 = $18 & 512;
    var $tobool31 = ($bf_clear30 | 0) == 0;
    if ($tobool31) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $center = $neighbor_042 + 36 | 0;
    var $24 = HEAP32[$center >> 2];
    var $25 = $24;
    var $call32 = _qh_setunique($tricenters, $25);
    var $tobool33 = ($call32 | 0) == 0;
    if ($tobool33) {
      var $firstinf_1 = $firstinf_043;
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_setappend($centers, $19);
    var $firstinf_1 = $firstinf_043;
    label = 17;
    break;
   case 15:
    var $tobool36 = ($firstinf_043 | 0) == 0;
    if ($tobool36) {
      var $firstinf_1 = 0;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _qh_setappend($centers, $19);
    var $firstinf_1 = 0;
    label = 17;
    break;
   case 17:
    var $firstinf_1;
    var $neighbors41 = $neighbor_042 + 56 | 0;
    var $26 = HEAP32[$neighbors41 >> 2];
    var $tobool42 = ($26 | 0) == 0;
    if ($tobool42) {
      label = 25;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $tobool21 = ($29 | 0) == 0;
    if ($tobool21) {
      label = 25;
      break;
    } else {
      var $neighbor_042 = $29;
      var $firstinf_043 = $firstinf_1;
      var $18 = $32;
      label = 10;
      break;
    }
   case 19:
    var $p47 = $26 + 4 | 0;
    var $27 = HEAP32[$p47 >> 2];
    var $tobool5038 = ($27 | 0) == 0;
    if ($tobool5038) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $28 = $27;
    var $incdec_ptr493746 = $p47 + 4 | 0;
    var $incdec_ptr4937 = $incdec_ptr493746;
    var $incdec_ptr4939 = $incdec_ptr4937;
    var $29 = $28;
    label = 21;
    break;
   case 21:
    var $29;
    var $incdec_ptr4939;
    var $30 = $29 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear53 = $32 & 32768;
    var $tobool54 = ($bf_clear53 | 0) == 0;
    if ($tobool54) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $33 = $29;
    var $34 = HEAP32[$neighbors4 >> 2];
    var $call57 = _qh_setin($34, $33);
    var $tobool58 = ($call57 | 0) == 0;
    if ($tobool58) {
      label = 23;
      break;
    } else {
      label = 18;
      break;
    }
   case 23:
    var $35 = $32 | 32768;
    HEAP32[$31 >> 2] = $35;
    label = 24;
    break;
   case 24:
    var $incdec_ptr49 = $incdec_ptr4939 + 4 | 0;
    var $36 = HEAP32[$incdec_ptr4939 >> 2];
    var $tobool50 = ($36 | 0) == 0;
    if ($tobool50) {
      label = 25;
      break;
    } else {
      var $incdec_ptr4939 = $incdec_ptr49;
      var $29 = $36;
      label = 21;
      break;
    }
   case 25:
    var $37 = HEAP32[5246976 >> 2];
    var $tobool66 = ($37 | 0) == 0;
    if ($tobool66) {
      label = 32;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $38 = HEAP32[$neighbors4 >> 2];
    var $tobool69 = ($38 | 0) == 0;
    if ($tobool69) {
      label = 32;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $p74 = $38 + 4 | 0;
    var $39 = HEAP32[$p74 >> 2];
    var $tobool7735 = ($39 | 0) == 0;
    if ($tobool7735) {
      label = 32;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $40 = $39;
    var $incdec_ptr763447 = $p74 + 4 | 0;
    var $incdec_ptr7634 = $incdec_ptr763447;
    var $incdec_ptr7636 = $incdec_ptr7634;
    var $41 = $40;
    label = 29;
    break;
   case 29:
    var $41;
    var $incdec_ptr7636;
    var $42 = $41 + 76 | 0;
    var $43 = $42;
    var $44 = HEAP32[$43 >> 2];
    var $bf_clear80 = $44 & 32768;
    var $tobool81 = ($bf_clear80 | 0) == 0;
    if ($tobool81) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _qh_fprintf(5301672);
    _qh_errexit(5, $41, 0);
    label = 31;
    break;
   case 31:
    var $incdec_ptr76 = $incdec_ptr7636 + 4 | 0;
    var $45 = HEAP32[$incdec_ptr7636 >> 2];
    var $tobool77 = ($45 | 0) == 0;
    if ($tobool77) {
      label = 32;
      break;
    } else {
      var $incdec_ptr7636 = $incdec_ptr76;
      var $41 = $45;
      label = 29;
      break;
    }
   case 32:
    var $46 = HEAP32[$neighbors >> 2];
    var $tobool89 = ($46 | 0) == 0;
    if ($tobool89) {
      label = 36;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $p94 = $46 + 4 | 0;
    var $47 = HEAP32[$p94 >> 2];
    var $tobool9732 = ($47 | 0) == 0;
    if ($tobool9732) {
      label = 36;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $48 = $47;
    var $49 = $p94;
    var $neighborp_433 = $49;
    var $50 = $48;
    label = 35;
    break;
   case 35:
    var $50;
    var $neighborp_433;
    var $incdec_ptr96 = $neighborp_433 + 4 | 0;
    var $51 = $50 + 76 | 0;
    var $52 = $51;
    var $53 = HEAP32[$52 >> 2];
    var $54 = $53 | 32768;
    HEAP32[$52 >> 2] = $54;
    var $55 = HEAP32[$incdec_ptr96 >> 2];
    var $tobool97 = ($55 | 0) == 0;
    if ($tobool97) {
      label = 36;
      break;
    } else {
      var $neighborp_433 = $incdec_ptr96;
      var $50 = $55;
      label = 35;
      break;
    }
   case 36:
    _qh_settempfree($tricenters);
    var $56 = HEAP32[$centers >> 2];
    STACKTOP = __stackBase__;
    return $56;
  }
}
_qh_detvridge3["X"] = 1;
function _qh_eachvoronoi($fp, $printvridge, $atvertex, $innerouter, $inorder) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $centers = __stackBase__;
    var $tricenters = __stackBase__ + 4;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$tricenters >> 2] = $call;
    var $1 = HEAP32[5248992 >> 2];
    var $2 = HEAP32[5249156 >> 2];
    var $inc = $2 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $3 = $2 & -2147483648;
    var $4 = $bf_value | $3;
    HEAP32[5249156 >> 2] = $4;
    var $5 = $atvertex + 20 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 | 268435456;
    HEAP32[$6 >> 2] = $8;
    var $neighbors = $atvertex + 12 | 0;
    var $9 = HEAP32[$neighbors >> 2];
    var $tobool5 = ($9 | 0) == 0;
    if ($tobool5) {
      var $totridges_243 = 0;
      label = 51;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $9 + 4 | 0;
    var $10 = HEAP32[$p >> 2];
    var $tobool989 = ($10 | 0) == 0;
    if ($tobool989) {
      var $_pr7 = $9;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $11 = $10;
    var $incdec_ptr88101 = $p + 4 | 0;
    var $incdec_ptr88 = $incdec_ptr88101;
    var $incdec_ptr90 = $incdec_ptr88;
    var $12 = $11;
    label = 5;
    break;
   case 5:
    var $12;
    var $incdec_ptr90;
    var $visitid = $12 + 68 | 0;
    var $13 = HEAP32[$visitid >> 2];
    var $cmp = $13 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $14 = $12 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $17 = $16 | 16384;
    HEAP32[$15 >> 2] = $17;
    label = 7;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr90 + 4 | 0;
    var $18 = HEAP32[$incdec_ptr90 >> 2];
    var $tobool9 = ($18 | 0) == 0;
    if ($tobool9) {
      label = 8;
      break;
    } else {
      var $incdec_ptr90 = $incdec_ptr;
      var $12 = $18;
      label = 5;
      break;
    }
   case 8:
    var $_pr_pre = HEAP32[$neighbors >> 2];
    var $tobool17 = ($_pr_pre | 0) == 0;
    if ($tobool17) {
      var $totridges_243 = 0;
      label = 51;
      break;
    } else {
      var $_pr7 = $_pr_pre;
      label = 9;
      break;
    }
   case 9:
    var $_pr7;
    var $p22 = $_pr7 + 4 | 0;
    var $19 = HEAP32[$p22 >> 2];
    var $tobool258697 = ($19 | 0) == 0;
    if ($tobool258697) {
      var $totridges_0_ph95 = 0;
      label = 47;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $20 = $19;
    var $incdec_ptr248596102 = $p22 + 4 | 0;
    var $incdec_ptr248596 = $incdec_ptr248596102;
    var $cmp94 = ($innerouter | 0) == 1;
    var $cmp90 = ($innerouter | 0) == 2;
    var $tobool105 = ($printvridge | 0) == 0;
    var $tobool107 = ($fp | 0) == 0;
    var $or_cond39 = $tobool105 | $tobool107;
    var $tobool109 = ($inorder | 0) != 0;
    var $totridges_0_ph98 = 0;
    var $incdec_ptr248599 = $incdec_ptr248596;
    var $22 = $20;
    label = 12;
    break;
   case 11:
    var $totridges_1_ph78;
    var $incdec_ptr2485 = $incdec_ptr2487 + 4 | 0;
    var $21 = HEAP32[$incdec_ptr2487 >> 2];
    var $tobool2586 = ($21 | 0) == 0;
    if ($tobool2586) {
      var $totridges_0_ph95 = $totridges_1_ph78;
      label = 47;
      break;
    } else {
      var $totridges_0_ph98 = $totridges_1_ph78;
      var $incdec_ptr248599 = $incdec_ptr2485;
      var $22 = $21;
      label = 12;
      break;
    }
   case 12:
    var $22;
    var $incdec_ptr248599;
    var $totridges_0_ph98;
    var $incdec_ptr2487 = $incdec_ptr248599;
    var $23 = $22;
    label = 13;
    break;
   case 13:
    var $23;
    var $incdec_ptr2487;
    var $24 = $23 + 76 | 0;
    var $25 = $24;
    var $26 = HEAP32[$25 >> 2];
    var $bf_clear28 = $26 & 16384;
    var $tobool29 = ($bf_clear28 | 0) == 0;
    if ($tobool29) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $incdec_ptr24 = $incdec_ptr2487 + 4 | 0;
    var $27 = HEAP32[$incdec_ptr2487 >> 2];
    var $tobool25 = ($27 | 0) == 0;
    if ($tobool25) {
      var $totridges_0_ph95 = $totridges_0_ph98;
      label = 47;
      break;
    } else {
      var $incdec_ptr2487 = $incdec_ptr24;
      var $23 = $27;
      label = 13;
      break;
    }
   case 15:
    var $vertices = $23 + 48 | 0;
    var $28 = HEAP32[$vertices >> 2];
    var $tobool31 = ($28 | 0) == 0;
    if ($tobool31) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p36 = $28 + 4 | 0;
    var $29 = HEAP32[$p36 >> 2];
    var $tobool397580 = ($29 | 0) == 0;
    if ($tobool397580) {
      var $totridges_1_ph78 = $totridges_0_ph98;
      label = 11;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $30 = $29;
    var $incdec_ptr387479103 = $p36 + 4 | 0;
    var $incdec_ptr387479 = $incdec_ptr387479103;
    var $totridges_1_ph81 = $totridges_0_ph98;
    var $incdec_ptr387482 = $incdec_ptr387479;
    var $31 = $30;
    label = 18;
    break;
   case 18:
    var $31;
    var $incdec_ptr387482;
    var $totridges_1_ph81;
    var $incdec_ptr3876 = $incdec_ptr387482;
    var $32 = $31;
    label = 19;
    break;
   case 19:
    var $32;
    var $incdec_ptr3876;
    var $33 = $32 + 16 | 0;
    var $34 = $33;
    var $35 = HEAP32[$34 >> 2];
    var $bf_clear42 = $35 & 2147483647;
    var $36 = HEAP32[5249156 >> 2];
    var $bf_clear43 = $36 & 2147483647;
    var $cmp44 = ($bf_clear42 | 0) == ($bf_clear43 | 0);
    if ($cmp44) {
      label = 36;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $37 = $32 + 20 | 0;
    var $38 = $37;
    var $39 = HEAP32[$38 >> 2];
    var $bf_clear46 = $39 & 268435456;
    var $tobool47 = ($bf_clear46 | 0) == 0;
    if ($tobool47) {
      label = 21;
      break;
    } else {
      label = 36;
      break;
    }
   case 21:
    var $40 = $35 & -2147483648;
    var $41 = $bf_clear43 | $40;
    HEAP32[$34 >> 2] = $41;
    var $42 = HEAP32[$tricenters >> 2];
    _qh_settruncate($42, 0);
    var $neighbors52 = $32 + 12 | 0;
    var $43 = HEAP32[$neighbors52 >> 2];
    var $tobool53 = ($43 | 0) == 0;
    if ($tobool53) {
      var $firstinf_1 = 1;
      var $count_1 = 0;
      label = 33;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $p58 = $43 + 4 | 0;
    var $44 = HEAP32[$p58 >> 2];
    var $tobool61505666 = ($44 | 0) == 0;
    if ($tobool61505666) {
      var $firstinf_1 = 1;
      var $count_1 = 0;
      label = 33;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $45 = $44;
    var $incdec_ptr60495565104 = $p58 + 4 | 0;
    var $incdec_ptr60495565 = $incdec_ptr60495565104;
    var $count_0_ph_ph67 = 0;
    var $firstinf_0_ph_ph68 = 1;
    var $incdec_ptr60495569 = $incdec_ptr60495565;
    var $46 = $45;
    label = 24;
    break;
   case 24:
    var $46;
    var $incdec_ptr60495569;
    var $firstinf_0_ph_ph68;
    var $count_0_ph_ph67;
    var $count_0_ph57 = $count_0_ph_ph67;
    var $incdec_ptr604958 = $incdec_ptr60495569;
    var $47 = $46;
    label = 25;
    break;
   case 25:
    var $47;
    var $incdec_ptr604958;
    var $count_0_ph57;
    var $incdec_ptr6051 = $incdec_ptr604958;
    var $48 = $47;
    label = 26;
    break;
   case 26:
    var $48;
    var $incdec_ptr6051;
    var $49 = $48 + 76 | 0;
    var $50 = $49;
    var $51 = HEAP32[$50 >> 2];
    var $bf_clear64 = $51 & 16384;
    var $tobool65 = ($bf_clear64 | 0) == 0;
    if ($tobool65) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $incdec_ptr60 = $incdec_ptr6051 + 4 | 0;
    var $52 = HEAP32[$incdec_ptr6051 >> 2];
    var $tobool61 = ($52 | 0) == 0;
    if ($tobool61) {
      var $firstinf_1 = $firstinf_0_ph_ph68;
      var $count_1 = $count_0_ph57;
      label = 33;
      break;
    } else {
      var $incdec_ptr6051 = $incdec_ptr60;
      var $48 = $52;
      label = 26;
      break;
    }
   case 28:
    var $visitid67 = $48 + 68 | 0;
    var $53 = HEAP32[$visitid67 >> 2];
    var $tobool68 = ($53 | 0) == 0;
    if ($tobool68) {
      label = 32;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $bf_clear71 = $51 & 512;
    var $tobool72 = ($bf_clear71 | 0) == 0;
    if ($tobool72) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $center = $48 + 36 | 0;
    var $54 = HEAP32[$center >> 2];
    var $55 = $54;
    var $call73 = _qh_setunique($tricenters, $55);
    var $tobool74 = ($call73 | 0) == 0;
    if ($tobool74) {
      label = 27;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $inc76 = $count_0_ph57 + 1 | 0;
    var $incdec_ptr6049 = $incdec_ptr6051 + 4 | 0;
    var $56 = HEAP32[$incdec_ptr6051 >> 2];
    var $tobool6150 = ($56 | 0) == 0;
    if ($tobool6150) {
      var $firstinf_1 = $firstinf_0_ph_ph68;
      var $count_1 = $inc76;
      label = 33;
      break;
    } else {
      var $count_0_ph57 = $inc76;
      var $incdec_ptr604958 = $incdec_ptr6049;
      var $47 = $56;
      label = 25;
      break;
    }
   case 32:
    var $count_0_inc80 = $firstinf_0_ph_ph68 + $count_0_ph57 | 0;
    var $incdec_ptr604955 = $incdec_ptr6051 + 4 | 0;
    var $57 = HEAP32[$incdec_ptr6051 >> 2];
    var $tobool615056 = ($57 | 0) == 0;
    if ($tobool615056) {
      var $firstinf_1 = 0;
      var $count_1 = $count_0_inc80;
      label = 33;
      break;
    } else {
      var $count_0_ph_ph67 = $count_0_inc80;
      var $firstinf_0_ph_ph68 = 0;
      var $incdec_ptr60495569 = $incdec_ptr604955;
      var $46 = $57;
      label = 24;
      break;
    }
   case 33:
    var $count_1;
    var $firstinf_1;
    var $58 = HEAP32[5247504 >> 2];
    var $sub = $58 - 1 | 0;
    var $cmp86 = ($count_1 | 0) < ($sub | 0);
    if ($cmp86) {
      label = 36;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $tobool88 = ($firstinf_1 | 0) == 0;
    if ($tobool88) {
      label = 38;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    if ($cmp90) {
      label = 36;
      break;
    } else {
      var $unbounded_0 = 0;
      label = 39;
      break;
    }
   case 36:
    var $59 = HEAP32[$incdec_ptr3876 >> 2];
    var $tobool39 = ($59 | 0) == 0;
    if ($tobool39) {
      var $totridges_1_ph78 = $totridges_1_ph81;
      label = 11;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $incdec_ptr38 = $incdec_ptr3876 + 4 | 0;
    var $incdec_ptr3876 = $incdec_ptr38;
    var $32 = $59;
    label = 19;
    break;
   case 38:
    if ($cmp94) {
      label = 36;
      break;
    } else {
      var $unbounded_0 = 1;
      label = 39;
      break;
    }
   case 39:
    var $unbounded_0;
    var $inc98 = $totridges_1_ph81 + 1 | 0;
    var $60 = HEAP32[5247036 >> 2];
    var $cmp99 = ($60 | 0) > 3;
    if ($cmp99) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    _qh_fprintf(5299356);
    label = 41;
    break;
   case 41:
    if ($or_cond39) {
      label = 46;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $61 = HEAP32[5247504 >> 2];
    var $cmp111 = ($61 | 0) == 4;
    var $or_cond = $tobool109 & $cmp111;
    if ($or_cond) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $call113 = _qh_detvridge3($atvertex, $32);
    var $storemerge = $call113;
    label = 45;
    break;
   case 44:
    var $call115 = _qh_detvridge($32);
    var $storemerge = $call115;
    label = 45;
    break;
   case 45:
    var $storemerge;
    HEAP32[$centers >> 2] = $storemerge;
    FUNCTION_TABLE[$printvridge]($fp, $atvertex, $32, $storemerge, $unbounded_0);
    _qh_settempfree($centers);
    label = 46;
    break;
   case 46:
    var $incdec_ptr3874 = $incdec_ptr3876 + 4 | 0;
    var $62 = HEAP32[$incdec_ptr3876 >> 2];
    var $tobool3975 = ($62 | 0) == 0;
    if ($tobool3975) {
      var $totridges_1_ph78 = $inc98;
      label = 11;
      break;
    } else {
      var $totridges_1_ph81 = $inc98;
      var $incdec_ptr387482 = $incdec_ptr3874;
      var $31 = $62;
      label = 18;
      break;
    }
   case 47:
    var $totridges_0_ph95;
    var $_pr41_pr = HEAP32[$neighbors >> 2];
    var $tobool126 = ($_pr41_pr | 0) == 0;
    if ($tobool126) {
      var $totridges_243 = $totridges_0_ph95;
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $p131 = $_pr41_pr + 4 | 0;
    var $63 = HEAP32[$p131 >> 2];
    var $tobool13445 = ($63 | 0) == 0;
    if ($tobool13445) {
      var $totridges_243 = $totridges_0_ph95;
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $64 = $63;
    var $65 = $p131;
    var $neighborp_246 = $65;
    var $66 = $64;
    label = 50;
    break;
   case 50:
    var $66;
    var $neighborp_246;
    var $incdec_ptr133 = $neighborp_246 + 4 | 0;
    var $67 = $66 + 76 | 0;
    var $68 = $67;
    var $69 = HEAP32[$68 >> 2];
    var $70 = $69 & -16385;
    HEAP32[$68 >> 2] = $70;
    var $71 = HEAP32[$incdec_ptr133 >> 2];
    var $tobool134 = ($71 | 0) == 0;
    if ($tobool134) {
      var $totridges_243 = $totridges_0_ph95;
      label = 51;
      break;
    } else {
      var $neighborp_246 = $incdec_ptr133;
      var $66 = $71;
      label = 50;
      break;
    }
   case 51:
    var $totridges_243;
    _qh_settempfree($tricenters);
    STACKTOP = __stackBase__;
    return $totridges_243;
  }
}
_qh_eachvoronoi["X"] = 1;
function _qh_facet2point($facet, $point0, $point1, $mindist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 4096;
    var $tobool = ($bf_clear | 0) == 0;
    var $vertices = $facet + 48 | 0;
    var $3 = HEAP32[$vertices >> 2];
    var $p = $3 + 4 | 0;
    var $4 = HEAP32[$p >> 2];
    var $5 = $4;
    var $p12 = $3 + 8 | 0;
    var $6 = HEAP32[$p12 >> 2];
    var $7 = $6;
    var $_ = $tobool ? $7 : $5;
    var $_12 = $tobool ? $5 : $7;
    var $8 = HEAP32[5243424 >> 2];
    var $add = $8 + 2 | 0;
    HEAP32[5243424 >> 2] = $add;
    var $point = $_ + 8 | 0;
    var $9 = HEAP32[$point >> 2];
    _qh_distplane($9, $facet, $dist);
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $10, HEAP32[$mindist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $11 = HEAP32[$point >> 2];
    var $call = _qh_projectpoint($11, $facet, $10);
    HEAP32[$point0 >> 2] = $call;
    var $point14 = $_12 + 8 | 0;
    var $12 = HEAP32[$point14 >> 2];
    _qh_distplane($12, $facet, $dist);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $13 > $14;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAPF64[tempDoublePtr >> 3] = $14, HEAP32[$mindist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 4;
    break;
   case 4:
    var $15 = HEAP32[$point14 >> 2];
    var $call18 = _qh_projectpoint($15, $facet, $14);
    HEAP32[$point1 >> 2] = $call18;
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_facetvertices($facetlist, $facets, $allfacets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $0 = HEAP32[5249156 >> 2];
    var $inc = $0 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $1 = $0 & -2147483648;
    var $2 = $bf_value | $1;
    HEAP32[5249156 >> 2] = $2;
    var $3 = HEAP32[5248940 >> 2];
    var $cmp = ($3 | 0) != ($facetlist | 0);
    var $tobool = ($allfacets | 0) == 0;
    var $or_cond = $cmp | $tobool;
    var $or_cond_not = $or_cond ^ 1;
    var $tobool2 = ($facets | 0) == 0;
    var $or_cond26 = $tobool2 & $or_cond_not;
    if ($or_cond26) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $4 = HEAP32[5248996 >> 2];
    var $call = _qh_settemp($4);
    HEAP32[$vertices >> 2] = $call;
    var $vertex_033 = HEAP32[5248980 >> 2];
    var $tobool334 = ($vertex_033 | 0) == 0;
    if ($tobool334) {
      label = 18;
      break;
    } else {
      var $vertex_035 = $vertex_033;
      label = 4;
      break;
    }
   case 4:
    var $vertex_035;
    var $next = $vertex_035 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool4 = ($5 | 0) == 0;
    if ($tobool4) {
      label = 18;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $6 = HEAP32[5249156 >> 2];
    var $bf_clear5 = $6 & 2147483647;
    var $7 = $vertex_035;
    var $8 = $vertex_035 + 16 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $11 = $10 & -2147483648;
    var $12 = $11 | $bf_clear5;
    HEAP32[$9 >> 2] = $12;
    _qh_setappend($vertices, $7);
    var $vertex_0 = HEAP32[$next >> 2];
    var $tobool3 = ($vertex_0 | 0) == 0;
    if ($tobool3) {
      label = 18;
      break;
    } else {
      var $vertex_035 = $vertex_0;
      label = 4;
      break;
    }
   case 6:
    var $13 = HEAP32[5248936 >> 2];
    var $call8 = _qh_settemp($13);
    HEAP32[$vertices >> 2] = $call8;
    var $tobool9 = ($facetlist | 0) == 0;
    if ($tobool9) {
      label = 18;
      break;
    } else {
      var $facet_041 = $facetlist;
      label = 7;
      break;
    }
   case 7:
    var $facet_041;
    var $next14 = $facet_041 + 44 | 0;
    var $14 = HEAP32[$next14 >> 2];
    var $tobool15 = ($14 | 0) == 0;
    if ($tobool15) {
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $call20 = _qh_skipfacet($facet_041);
    var $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    var $vertices23 = $facet_041 + 48 | 0;
    var $15 = HEAP32[$vertices23 >> 2];
    var $tobool24 = ($15 | 0) == 0;
    if ($tobool24) {
      label = 17;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p = $15 + 4 | 0;
    var $16 = HEAP32[$p >> 2];
    var $tobool2837 = ($16 | 0) == 0;
    if ($tobool2837) {
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $17 = $16;
    var $incdec_ptr3642 = $p + 4 | 0;
    var $incdec_ptr36 = $incdec_ptr3642;
    var $incdec_ptr38 = $incdec_ptr36;
    var $18 = $17;
    label = 13;
    break;
   case 13:
    var $18;
    var $incdec_ptr38;
    var $19 = $18 + 16 | 0;
    var $20 = $19;
    var $21 = HEAP32[$20 >> 2];
    var $bf_clear31 = $21 & 2147483647;
    var $22 = HEAP32[5249156 >> 2];
    var $bf_clear32 = $22 & 2147483647;
    var $cmp33 = ($bf_clear31 | 0) == ($bf_clear32 | 0);
    if ($cmp33) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $23 = $18;
    var $24 = $21 & -2147483648;
    var $25 = $bf_clear32 | $24;
    HEAP32[$20 >> 2] = $25;
    _qh_setappend($vertices, $23);
    label = 15;
    break;
   case 15:
    var $26 = HEAP32[$incdec_ptr38 >> 2];
    var $tobool28 = ($26 | 0) == 0;
    if ($tobool28) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $incdec_ptr = $incdec_ptr38 + 4 | 0;
    var $incdec_ptr38 = $incdec_ptr;
    var $18 = $26;
    label = 13;
    break;
   case 17:
    var $27 = HEAP32[$next14 >> 2];
    var $tobool12 = ($27 | 0) == 0;
    if ($tobool12) {
      label = 18;
      break;
    } else {
      var $facet_041 = $27;
      label = 7;
      break;
    }
   case 18:
    if ($tobool2) {
      label = 31;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $p50 = $facets + 4 | 0;
    var $28 = HEAP32[$p50 >> 2];
    var $tobool5331 = ($28 | 0) == 0;
    if ($tobool5331) {
      label = 31;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $29 = $28;
    var $incdec_ptr523043 = $p50 + 4 | 0;
    var $incdec_ptr5230 = $incdec_ptr523043;
    var $incdec_ptr5232 = $incdec_ptr5230;
    var $30 = $29;
    label = 21;
    break;
   case 21:
    var $30;
    var $incdec_ptr5232;
    if ($tobool) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $call57 = _qh_skipfacet($30);
    var $tobool58 = ($call57 | 0) == 0;
    if ($tobool58) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $incdec_ptr52 = $incdec_ptr5232 + 4 | 0;
    var $31 = HEAP32[$incdec_ptr5232 >> 2];
    var $tobool53 = ($31 | 0) == 0;
    if ($tobool53) {
      label = 31;
      break;
    } else {
      var $incdec_ptr5232 = $incdec_ptr52;
      var $30 = $31;
      label = 21;
      break;
    }
   case 24:
    var $vertices61 = $30 + 48 | 0;
    var $32 = HEAP32[$vertices61 >> 2];
    var $tobool62 = ($32 | 0) == 0;
    if ($tobool62) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $p67 = $32 + 4 | 0;
    var $33 = HEAP32[$p67 >> 2];
    var $tobool7028 = ($33 | 0) == 0;
    if ($tobool7028) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $34 = $33;
    var $incdec_ptr692744 = $p67 + 4 | 0;
    var $incdec_ptr6927 = $incdec_ptr692744;
    var $incdec_ptr6929 = $incdec_ptr6927;
    var $35 = $34;
    label = 27;
    break;
   case 27:
    var $35;
    var $incdec_ptr6929;
    var $36 = $35 + 16 | 0;
    var $37 = $36;
    var $38 = HEAP32[$37 >> 2];
    var $bf_clear73 = $38 & 2147483647;
    var $39 = HEAP32[5249156 >> 2];
    var $bf_clear74 = $39 & 2147483647;
    var $cmp75 = ($bf_clear73 | 0) == ($bf_clear74 | 0);
    if ($cmp75) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $40 = $35;
    var $41 = $38 & -2147483648;
    var $42 = $bf_clear74 | $41;
    HEAP32[$37 >> 2] = $42;
    _qh_setappend($vertices, $40);
    label = 29;
    break;
   case 29:
    var $43 = HEAP32[$incdec_ptr6929 >> 2];
    var $tobool70 = ($43 | 0) == 0;
    if ($tobool70) {
      label = 23;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $incdec_ptr69 = $incdec_ptr6929 + 4 | 0;
    var $incdec_ptr6929 = $incdec_ptr69;
    var $35 = $43;
    label = 27;
    break;
   case 31:
    var $44 = HEAP32[$vertices >> 2];
    STACKTOP = __stackBase__;
    return $44;
  }
}
_qh_facetvertices["X"] = 1;
function _qh_geomplanes($facet, $outerplane, $innerplane) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247080 >> 2];
    var $tobool = ($0 | 0) != 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $1 < 8.988465674311579e+307;
    var $or_cond = $tobool | $cmp;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    _qh_outerinner($facet, $outerplane, $innerplane);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp1 = $3 < 8.988465674311579e+307;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      var $radius_0 = $2;
      label = 5;
      break;
    }
   case 4:
    var $4 = HEAP32[5247504 >> 2];
    var $conv = $4 | 0;
    var $call = Math.sqrt($conv);
    var $mul = $3 * $call;
    var $sub = $2 - $mul;
    var $radius_0 = $sub;
    label = 5;
    break;
   case 5:
    var $radius_0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $radius_0 + $5;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$outerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$outerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub3 = $6 - $radius_0;
    HEAPF64[tempDoublePtr >> 3] = $sub3, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $7 = HEAP32[5247148 >> 2];
    var $8 = HEAP32[5247308 >> 2];
    var $9 = $8 | $7;
    var $10 = ($9 | 0) == 0;
    if ($10) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul8 = $11 * .002;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add9 = $12 + $mul8;
    HEAPF64[tempDoublePtr >> 3] = $add9, HEAP32[$outerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$outerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul10 = $13 * .002;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub11 = $14 - $mul10;
    HEAPF64[tempDoublePtr >> 3] = $sub11, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 7:
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$outerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$outerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    return;
  }
}
function _qh_markkeep($facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $facets = __stackBase__;
    var $0 = HEAP32[5248992 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$facets >> 2] = $call;
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5296792);
    label = 4;
    break;
   case 4:
    var $tobool = ($facetlist | 0) != 0;
    if ($tobool) {
      var $facet_033 = $facetlist;
      label = 5;
      break;
    } else {
      var $9 = $call;
      label = 9;
      break;
    }
   case 5:
    var $facet_033;
    var $next = $facet_033 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $facet_033 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $5 & 526336;
    var $7 = ($6 | 0) == 524288;
    if ($7) {
      label = 7;
      break;
    } else {
      var $facet_033 = $2;
      label = 5;
      break;
    }
   case 7:
    var $8 = $facet_033;
    _qh_setappend($facets, $8);
    var $_pre1 = HEAP32[$next >> 2];
    var $tobool2 = ($_pre1 | 0) == 0;
    if ($tobool2) {
      label = 8;
      break;
    } else {
      var $facet_033 = $_pre1;
      label = 5;
      break;
    }
   case 8:
    var $_pre = HEAP32[$facets >> 2];
    var $9 = $_pre;
    label = 9;
    break;
   case 9:
    var $9;
    var $call12 = _qh_setsize($9);
    var $10 = HEAP32[5247040 >> 2];
    var $tobool13 = ($10 | 0) == 0;
    if ($tobool13) {
      var $19 = $9;
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $9 + 4 | 0;
    var $11 = $p;
    _qsort($11, $call12, 4, 6);
    var $12 = HEAP32[5247040 >> 2];
    var $sub = $call12 - $12 | 0;
    var $cmp15 = ($sub | 0) > 0;
    if ($cmp15) {
      label = 11;
      break;
    } else {
      var $19 = $9;
      label = 15;
      break;
    }
   case 11:
    var $tobool17 = ($9 | 0) == 0;
    if ($tobool17) {
      var $19 = 0;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $13 = $p;
    var $count_0 = $sub;
    var $facetp_0 = $13;
    label = 13;
    break;
   case 13:
    var $facetp_0;
    var $count_0;
    var $14 = HEAP32[$facetp_0 >> 2];
    var $tobool23 = ($14 | 0) == 0;
    if ($tobool23) {
      var $19 = $9;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $incdec_ptr = $facetp_0 + 4 | 0;
    var $15 = $14 + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 & -524289;
    HEAP32[$16 >> 2] = $18;
    var $dec = $count_0 - 1 | 0;
    var $cmp26 = ($dec | 0) == 0;
    if ($cmp26) {
      var $19 = $9;
      label = 15;
      break;
    } else {
      var $count_0 = $dec;
      var $facetp_0 = $incdec_ptr;
      label = 13;
      break;
    }
   case 15:
    var $19;
    var $20 = HEAP32[5247052 >> 2];
    var $tobool33 = ($20 | 0) == 0;
    if ($tobool33) {
      var $29 = $19;
      label = 21;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p37 = $19 + 4 | 0;
    var $21 = $p37;
    _qsort($21, $call12, 4, 16);
    var $22 = HEAP32[5247052 >> 2];
    var $sub38 = $call12 - $22 | 0;
    var $cmp39 = ($sub38 | 0) > 0;
    if ($cmp39) {
      label = 17;
      break;
    } else {
      var $29 = $19;
      label = 21;
      break;
    }
   case 17:
    var $tobool41 = ($19 | 0) == 0;
    if ($tobool41) {
      var $29 = 0;
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $23 = $p37;
    var $count_1 = $sub38;
    var $facetp_1 = $23;
    label = 19;
    break;
   case 19:
    var $facetp_1;
    var $count_1;
    var $24 = HEAP32[$facetp_1 >> 2];
    var $tobool48 = ($24 | 0) == 0;
    if ($tobool48) {
      var $29 = $19;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $incdec_ptr47 = $facetp_1 + 4 | 0;
    var $25 = $24 + 76 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $28 = $27 & -524289;
    HEAP32[$26 >> 2] = $28;
    var $dec51 = $count_1 - 1 | 0;
    var $cmp52 = ($dec51 | 0) == 0;
    if ($cmp52) {
      var $29 = $19;
      label = 21;
      break;
    } else {
      var $count_1 = $dec51;
      var $facetp_1 = $incdec_ptr47;
      label = 19;
      break;
    }
   case 21:
    var $29;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp59 = $30 >= 8.988465674311579e+307;
    var $tobool61 = ($29 | 0) == 0;
    var $or_cond = $cmp59 | $tobool61;
    if ($or_cond) {
      label = 28;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $p65 = $29 + 4 | 0;
    var $31 = HEAP32[$p65 >> 2];
    var $tobool6830 = ($31 | 0) == 0;
    if ($tobool6830) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $32 = $31;
    var $incdec_ptr672934 = $p65 + 4 | 0;
    var $incdec_ptr6729 = $incdec_ptr672934;
    var $incdec_ptr6731 = $incdec_ptr6729;
    var $33 = $32;
    label = 24;
    break;
   case 24:
    var $33;
    var $incdec_ptr6731;
    var $34 = $33 + 76 | 0;
    var $35 = $34;
    var $36 = HEAP32[$35 >> 2];
    var $bf_clear71 = $36 & 1048576;
    var $tobool72 = ($bf_clear71 | 0) == 0;
    if ($tobool72) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $area = $33 + 28 | 0;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$area >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$area + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp73 = $37 < $38;
    if ($cmp73) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $39 = $36 & -524289;
    HEAP32[$35 >> 2] = $39;
    label = 27;
    break;
   case 27:
    var $incdec_ptr67 = $incdec_ptr6731 + 4 | 0;
    var $40 = HEAP32[$incdec_ptr6731 >> 2];
    var $tobool68 = ($40 | 0) == 0;
    if ($tobool68) {
      label = 28;
      break;
    } else {
      var $incdec_ptr6731 = $incdec_ptr67;
      var $33 = $40;
      label = 24;
      break;
    }
   case 28:
    _qh_settempfree($facets);
    if ($tobool) {
      var $facet_127 = $facetlist;
      var $count_228 = 0;
      label = 29;
      break;
    } else {
      var $count_4 = 0;
      label = 31;
      break;
    }
   case 29:
    var $count_228;
    var $facet_127;
    var $next85 = $facet_127 + 44 | 0;
    var $41 = HEAP32[$next85 >> 2];
    var $tobool86 = ($41 | 0) == 0;
    if ($tobool86) {
      var $count_4 = $count_228;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $42 = $facet_127 + 76 | 0;
    var $43 = $42;
    var $44 = HEAP32[$43 >> 2];
    var $bf_clear90 = $44 >>> 19;
    var $bf_clear90_lobit = $bf_clear90 & 1;
    var $count_2_inc = $bf_clear90_lobit + $count_228 | 0;
    var $facet_127 = $41;
    var $count_228 = $count_2_inc;
    label = 29;
    break;
   case 31:
    var $count_4;
    HEAP32[5249004 >> 2] = $count_4;
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_markkeep["X"] = 1;
function _qh_markvoronoi($facetlist, $facets, $isLowerp, $numcentersp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249128 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5249128 >> 2] = $inc;
    _qh_clearcenters(1);
    _qh_vertexneighbors();
    var $call = _qh_pointvertex();
    var $1 = HEAP32[5246956 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = HEAP32[5247512 >> 2];
    var $sub = $2 - 1 | 0;
    var $p = $call + 4 + ($sub << 2) | 0;
    HEAP32[$p >> 2] = 0;
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5249152 >> 2];
    var $inc1 = $3 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc1;
    var $4 = HEAP32[5248992 >> 2];
    var $cmp = $inc1 >>> 0 < $4 >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5249152 >> 2] = $4;
    label = 6;
    break;
   case 6:
    var $tobool4 = ($facetlist | 0) != 0;
    if ($tobool4) {
      var $facet_053 = $facetlist;
      label = 7;
      break;
    } else {
      var $isLower_0 = 0;
      label = 11;
      break;
    }
   case 7:
    var $facet_053;
    var $next = $facet_053 + 44 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool7 = ($5 | 0) == 0;
    if ($tobool7) {
      var $isLower_0 = 0;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $call9 = _qh_skipfacet($facet_053);
    var $tobool10 = ($call9 | 0) == 0;
    if ($tobool10) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $6 = $facet_053 + 76 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $bf_clear = $8 & 131072;
    var $tobool12 = ($bf_clear | 0) == 0;
    if ($tobool12) {
      var $isLower_0 = 1;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $9 = HEAP32[$next >> 2];
    var $tobool6 = ($9 | 0) == 0;
    if ($tobool6) {
      var $isLower_0 = 0;
      label = 11;
      break;
    } else {
      var $facet_053 = $9;
      label = 7;
      break;
    }
   case 11:
    var $isLower_0;
    var $tobool18 = ($facets | 0) != 0;
    if ($tobool18) {
      label = 12;
      break;
    } else {
      var $isLower_1 = $isLower_0;
      label = 17;
      break;
    }
   case 12:
    var $p22 = $facets + 4 | 0;
    var $10 = HEAP32[$p22 >> 2];
    var $tobool2449 = ($10 | 0) == 0;
    if ($tobool2449) {
      var $isLower_1 = $isLower_0;
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $11 = $10;
    var $incdec_ptr4855 = $p22 + 4 | 0;
    var $incdec_ptr48 = $incdec_ptr4855;
    var $incdec_ptr50 = $incdec_ptr48;
    var $12 = $11;
    label = 14;
    break;
   case 14:
    var $12;
    var $incdec_ptr50;
    var $call28 = _qh_skipfacet($12);
    var $tobool29 = ($call28 | 0) == 0;
    if ($tobool29) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $incdec_ptr = $incdec_ptr50 + 4 | 0;
    var $13 = HEAP32[$incdec_ptr50 >> 2];
    var $tobool24 = ($13 | 0) == 0;
    if ($tobool24) {
      var $isLower_1 = $isLower_0;
      label = 17;
      break;
    } else {
      var $incdec_ptr50 = $incdec_ptr;
      var $12 = $13;
      label = 14;
      break;
    }
   case 16:
    var $14 = $12 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear32 = $16 & 131072;
    var $tobool33 = ($bf_clear32 | 0) == 0;
    if ($tobool33) {
      var $isLower_1 = 1;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 17:
    var $isLower_1;
    var $facet_145 = HEAP32[5248940 >> 2];
    var $tobool4046 = ($facet_145 | 0) == 0;
    if ($tobool4046) {
      label = 24;
      break;
    } else {
      var $facet_147 = $facet_145;
      label = 18;
      break;
    }
   case 18:
    var $facet_147;
    var $next42 = $facet_147 + 44 | 0;
    var $17 = HEAP32[$next42 >> 2];
    var $tobool43 = ($17 | 0) == 0;
    if ($tobool43) {
      label = 24;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $normal = $facet_147 + 24 | 0;
    var $18 = HEAP32[$normal >> 2];
    var $tobool46 = ($18 | 0) == 0;
    var $_phi_trans_insert_phi_trans_insert = $facet_147 + 76 | 0;
    var $_phi_trans_insert1_phi_trans_insert = $_phi_trans_insert_phi_trans_insert;
    var $_pre_pre = HEAP32[$_phi_trans_insert1_phi_trans_insert >> 2];
    if ($tobool46) {
      var $_pre = $_pre_pre;
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $19 = $_pre_pre >>> 17;
    var $bf_clear48 = $19 & 1;
    var $cmp49 = ($bf_clear48 | 0) == ($isLower_1 | 0);
    if ($cmp49) {
      label = 21;
      break;
    } else {
      var $_pre = $_pre_pre;
      label = 22;
      break;
    }
   case 21:
    var $visitid = $facet_147 + 68 | 0;
    HEAP32[$visitid >> 2] = 0;
    var $21 = $_pre_pre;
    label = 23;
    break;
   case 22:
    var $_pre;
    var $20 = HEAP32[5249152 >> 2];
    var $visitid51 = $facet_147 + 68 | 0;
    HEAP32[$visitid51 >> 2] = $20;
    var $21 = $_pre;
    label = 23;
    break;
   case 23:
    var $21;
    var $22 = $facet_147 + 76 | 0;
    var $23 = $22;
    var $24 = $21 & -49153;
    var $25 = $24 | 32768;
    HEAP32[$23 >> 2] = $25;
    var $facet_147 = $17;
    label = 18;
    break;
   case 24:
    if ($tobool4) {
      var $facet_243 = $facetlist;
      var $numcenters_044 = 1;
      label = 25;
      break;
    } else {
      var $numcenters_2 = 1;
      label = 29;
      break;
    }
   case 25:
    var $numcenters_044;
    var $facet_243;
    var $next64 = $facet_243 + 44 | 0;
    var $26 = HEAP32[$next64 >> 2];
    var $tobool65 = ($26 | 0) == 0;
    if ($tobool65) {
      var $numcenters_2 = $numcenters_044;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $call70 = _qh_skipfacet($facet_243);
    var $tobool71 = ($call70 | 0) == 0;
    if ($tobool71) {
      label = 27;
      break;
    } else {
      var $numcenters_1 = $numcenters_044;
      label = 28;
      break;
    }
   case 27:
    var $inc73 = $numcenters_044 + 1 | 0;
    var $visitid74 = $facet_243 + 68 | 0;
    HEAP32[$visitid74 >> 2] = $numcenters_044;
    var $numcenters_1 = $inc73;
    label = 28;
    break;
   case 28:
    var $numcenters_1;
    var $27 = HEAP32[$next64 >> 2];
    var $tobool62 = ($27 | 0) == 0;
    if ($tobool62) {
      var $numcenters_2 = $numcenters_1;
      label = 29;
      break;
    } else {
      var $facet_243 = $27;
      var $numcenters_044 = $numcenters_1;
      label = 25;
      break;
    }
   case 29:
    var $numcenters_2;
    if ($tobool18) {
      label = 30;
      break;
    } else {
      var $numcenters_4 = $numcenters_2;
      label = 35;
      break;
    }
   case 30:
    var $p84 = $facets + 4 | 0;
    var $28 = $p84;
    var $numcenters_3_ph = $numcenters_2;
    var $facetp_1_ph = $28;
    label = 31;
    break;
   case 31:
    var $facetp_1_ph;
    var $numcenters_3_ph;
    var $facetp_1 = $facetp_1_ph;
    label = 32;
    break;
   case 32:
    var $facetp_1;
    var $incdec_ptr86 = $facetp_1 + 4 | 0;
    var $29 = HEAP32[$facetp_1 >> 2];
    var $tobool87 = ($29 | 0) == 0;
    if ($tobool87) {
      var $numcenters_4 = $numcenters_3_ph;
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $call91 = _qh_skipfacet($29);
    var $tobool92 = ($call91 | 0) == 0;
    if ($tobool92) {
      label = 34;
      break;
    } else {
      var $facetp_1 = $incdec_ptr86;
      label = 32;
      break;
    }
   case 34:
    var $inc94 = $numcenters_3_ph + 1 | 0;
    var $visitid95 = $29 + 68 | 0;
    HEAP32[$visitid95 >> 2] = $numcenters_3_ph;
    var $numcenters_3_ph = $inc94;
    var $facetp_1_ph = $incdec_ptr86;
    label = 31;
    break;
   case 35:
    var $numcenters_4;
    HEAP32[$isLowerp >> 2] = $isLower_1;
    HEAP32[$numcentersp >> 2] = $numcenters_4;
    var $30 = HEAP32[5247036 >> 2];
    var $cmp99 = ($30 | 0) > 1;
    if ($cmp99) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    _qh_fprintf(5295040);
    label = 37;
    break;
   case 37:
    return $call;
  }
}
_qh_markvoronoi["X"] = 1;
function _qh_order_vertexneighbors($vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $newset = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5293404);
    label = 4;
    break;
   case 4:
    var $neighbors = $vertex + 12 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $call = _qh_setsize($1);
    var $call1 = _qh_settemp($call);
    HEAP32[$newset >> 2] = $call1;
    var $2 = HEAP32[$neighbors >> 2];
    var $call3 = _qh_setdellast($2);
    _qh_setappend($newset, $call3);
    var $3 = HEAP32[$neighbors >> 2];
    var $call52022 = _qh_setsize($3);
    var $tobool2123 = ($call52022 | 0) == 0;
    if ($tobool2123) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $4 = $call3;
    var $facet_0_ph24 = $4;
    label = 6;
    break;
   case 6:
    var $facet_0_ph24;
    var $neighbors11 = $facet_0_ph24 + 56 | 0;
    label = 7;
    break;
   case 7:
    var $5 = HEAP32[$neighbors >> 2];
    var $tobool7 = ($5 | 0) == 0;
    if ($tobool7) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p = $5 + 4 | 0;
    var $6 = $p;
    var $neighborp_0 = $6;
    label = 9;
    break;
   case 9:
    var $neighborp_0;
    var $7 = HEAP32[$neighborp_0 >> 2];
    var $tobool10 = ($7 | 0) == 0;
    if ($tobool10) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $8 = HEAP32[$neighbors11 >> 2];
    var $9 = $7;
    var $call12 = _qh_setin($8, $9);
    var $tobool13 = ($call12 | 0) == 0;
    if ($tobool13) {
      var $neighborp_0 = $incdec_ptr;
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $call16 = _qh_setdel($5, $9);
    _qh_setappend($newset, $9);
    var $10 = HEAP32[$neighbors >> 2];
    var $call520 = _qh_setsize($10);
    var $tobool21 = ($call520 | 0) == 0;
    if ($tobool21) {
      label = 13;
      break;
    } else {
      var $facet_0_ph24 = $7;
      label = 6;
      break;
    }
   case 12:
    _qh_fprintf(5291572);
    _qh_errexit(5, $facet_0_ph24, 0);
    var $11 = HEAP32[$neighbors >> 2];
    var $call5 = _qh_setsize($11);
    var $tobool = ($call5 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 13:
    _qh_setfree($neighbors);
    var $call25 = _qh_settemppop();
    var $12 = HEAP32[$newset >> 2];
    HEAP32[$neighbors >> 2] = $12;
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_order_vertexneighbors["X"] = 1;
function _qh_printafacet($format, $facet, $printall) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $color = __stackBase__;
    var $dist = __stackBase__ + 32;
    var $outerplane = __stackBase__ + 40;
    var $innerplane = __stackBase__ + 48;
    var $zerodiv = __stackBase__ + 56;
    var $tobool = ($printall | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _qh_skipfacet($facet);
    var $tobool1 = ($call | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 83;
      break;
    }
   case 4:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 2048;
    var $3 = HEAP32[5249088 >> 2];
    var $notlhs = ($bf_clear | 0) == 0;
    var $notrhs = ($3 | 0) == 0;
    var $or_cond_not = $notrhs | $notlhs;
    var $cmp = ($format | 0) == 5;
    var $or_cond115 = $or_cond_not | $cmp;
    if ($or_cond115) {
      label = 5;
      break;
    } else {
      label = 83;
      break;
    }
   case 5:
    var $4 = HEAP32[5249128 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5249128 >> 2] = $inc;
    if (($format | 0) == 1) {
      label = 6;
      break;
    } else if (($format | 0) == 3) {
      label = 9;
      break;
    } else if (($format | 0) == 4) {
      label = 14;
      break;
    } else if (($format | 0) == 5) {
      label = 15;
      break;
    } else if (($format | 0) == 6) {
      label = 16;
      break;
    } else if (($format | 0) == 7) {
      label = 17;
      break;
    } else if (($format | 0) == 8) {
      label = 31;
      break;
    } else if (($format | 0) == 14 | ($format | 0) == 17 | ($format | 0) == 25) {
      label = 32;
      break;
    } else if (($format | 0) == 9) {
      label = 37;
      break;
    } else if (($format | 0) == 16) {
      label = 38;
      break;
    } else if (($format | 0) == 12) {
      label = 39;
      break;
    } else if (($format | 0) == 11) {
      label = 40;
      break;
    } else if (($format | 0) == 15 | ($format | 0) == 13) {
      label = 49;
      break;
    } else if (($format | 0) == 10) {
      label = 52;
      break;
    } else if (($format | 0) == 19) {
      label = 57;
      break;
    } else if (($format | 0) == 20) {
      label = 71;
      break;
    } else if (($format | 0) == 21) {
      label = 75;
      break;
    } else if (($format | 0) == 26) {
      label = 78;
      break;
    } else {
      label = 83;
      break;
    }
   case 6:
    var $5 = HEAP32[$1 >> 2];
    var $bf_clear9 = $5 & 1048576;
    var $tobool10 = ($bf_clear9 | 0) == 0;
    if ($tobool10) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_fprintf(5290352);
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 8:
    _qh_fprintf(5287112);
    label = 83;
    break;
   case 9:
    var $coplanarset = $facet + 64 | 0;
    var $6 = HEAP32[$coplanarset >> 2];
    var $call14 = _qh_setsize($6);
    _qh_fprintf(5284892);
    var $7 = HEAP32[$coplanarset >> 2];
    var $tobool16 = ($7 | 0) == 0;
    if ($tobool16) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $7 + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool19118 = ($8 | 0) == 0;
    if ($tobool19118) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $9 = $p;
    var $pointp_0119 = $9;
    label = 12;
    break;
   case 12:
    var $pointp_0119;
    var $incdec_ptr = $pointp_0119 + 4 | 0;
    _qh_fprintf(5295004);
    var $10 = HEAP32[$incdec_ptr >> 2];
    var $tobool19 = ($10 | 0) == 0;
    if ($tobool19) {
      label = 13;
      break;
    } else {
      var $pointp_0119 = $incdec_ptr;
      label = 12;
      break;
    }
   case 13:
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 14:
    _qh_printcenter(4, 0, $facet);
    label = 83;
    break;
   case 15:
    _qh_printfacet($facet);
    label = 83;
    break;
   case 16:
    _qh_printfacetheader($facet);
    label = 83;
    break;
   case 17:
    var $normal = $facet + 24 | 0;
    var $11 = HEAP32[$normal >> 2];
    var $tobool26 = ($11 | 0) == 0;
    if ($tobool26) {
      label = 83;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $12 = HEAP32[5247504 >> 2];
    var $tobool30121 = ($12 | 0) == 0;
    if ($tobool30121) {
      label = 20;
      break;
    } else {
      var $dec122_in = $12;
      label = 19;
      break;
    }
   case 19:
    var $dec122_in;
    var $dec122 = $dec122_in - 1 | 0;
    var $arrayidx33 = $11 + ($dec122 << 3) | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx33 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx33 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $13 + 1;
    var $div = $add * .5;
    var $arrayidx34 = $color + ($dec122 << 3) | 0;
    var $cmp36 = $div < -1;
    var $storemerge = $cmp36 ? -1 : $div;
    var $cmp41 = $storemerge > 1;
    var $storemerge143 = $cmp41 ? 1 : $storemerge;
    HEAPF64[tempDoublePtr >> 3] = $storemerge143, HEAP32[$arrayidx34 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool30 = ($dec122 | 0) == 0;
    if ($tobool30) {
      label = 20;
      break;
    } else {
      var $dec122_in = $dec122;
      label = 19;
      break;
    }
   case 20:
    var $arraydecay = $color | 0;
    _qh_projectdim3($arraydecay, $arraydecay);
    var $14 = HEAP32[5247152 >> 2];
    var $15 = HEAP32[5247504 >> 2];
    var $cmp47 = ($14 | 0) == ($15 | 0);
    if ($cmp47) {
      var $16 = $14;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_normalize2($arraydecay, 3, 1);
    var $_pr = HEAP32[5247504 >> 2];
    var $16 = $_pr;
    label = 22;
    break;
   case 22:
    var $16;
    var $cmp51 = ($16 | 0) < 3;
    if ($cmp51) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    _qh_printfacet2geom($facet, $arraydecay);
    label = 83;
    break;
   case 24:
    var $cmp55 = ($16 | 0) == 3;
    var $17 = HEAP32[$1 >> 2];
    var $bf_clear58 = $17 & 8192;
    var $tobool59 = ($bf_clear58 | 0) != 0;
    if ($cmp55) {
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 25:
    if ($tobool59) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_printfacet3geom_simplicial($facet, $arraydecay);
    label = 83;
    break;
   case 27:
    _qh_printfacet3geom_nonsimplicial($facet, $arraydecay);
    label = 83;
    break;
   case 28:
    if ($tobool59) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_printfacet4geom_simplicial($facet);
    label = 83;
    break;
   case 30:
    _qh_printfacet4geom_nonsimplicial($facet);
    label = 83;
    break;
   case 31:
    _qh_fprintf(5280304);
    label = 83;
    break;
   case 32:
    var $18 = HEAP32[5247504 >> 2];
    var $cmp78 = ($18 | 0) != 3;
    var $cmp80 = ($format | 0) == 25;
    var $or_cond116 = $cmp78 | $cmp80;
    if ($or_cond116) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    _qh_printfacet3vertex($facet, $format);
    label = 83;
    break;
   case 34:
    var $19 = HEAP32[$1 >> 2];
    var $bf_clear84 = $19 & 8192;
    var $tobool85 = ($bf_clear84 | 0) != 0;
    var $cmp86 = ($18 | 0) == 2;
    var $or_cond1 = $tobool85 | $cmp86;
    var $cmp88 = ($format | 0) == 17;
    var $or_cond117 = $or_cond1 | $cmp88;
    if ($or_cond117) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    _qh_printfacetNvertex_simplicial($facet, $format);
    label = 83;
    break;
   case 36:
    var $20 = HEAP32[5249124 >> 2];
    var $inc91 = $20 + 1 | 0;
    HEAP32[5249124 >> 2] = $inc91;
    _qh_printfacetNvertex_nonsimplicial($facet, $format);
    label = 83;
    break;
   case 37:
    _qh_outerinner($facet, 0, $innerplane);
    label = 40;
    break;
   case 38:
    _qh_fprintf(5280304);
    label = 83;
    break;
   case 39:
    _qh_outerinner($facet, $outerplane, 0);
    label = 40;
    break;
   case 40:
    var $normal104 = $facet + 24 | 0;
    var $21 = HEAP32[$normal104 >> 2];
    var $tobool105 = ($21 | 0) == 0;
    if ($tobool105) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    _qh_fprintf(5279248);
    label = 83;
    break;
   case 42:
    var $22 = HEAP32[5246972 >> 2];
    var $tobool109 = ($22 | 0) == 0;
    if ($tobool109) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $23 = HEAP32[5247504 >> 2];
    var $cmp122123 = ($23 | 0) > 0;
    if ($cmp122123) {
      var $k_2124 = 0;
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 44:
    _qh_fprintf(5290352);
    var $24 = HEAP32[5247504 >> 2];
    var $cmp113125 = ($24 | 0) > 0;
    if ($cmp113125) {
      var $k_1126 = 0;
      label = 45;
      break;
    } else {
      label = 48;
      break;
    }
   case 45:
    var $k_1126;
    _qh_fprintf(5290352);
    var $inc118 = $k_1126 + 1 | 0;
    var $25 = HEAP32[5247504 >> 2];
    var $cmp113 = ($inc118 | 0) < ($25 | 0);
    if ($cmp113) {
      var $k_1126 = $inc118;
      label = 45;
      break;
    } else {
      label = 48;
      break;
    }
   case 46:
    var $k_2124;
    _qh_fprintf(5290352);
    var $inc127 = $k_2124 + 1 | 0;
    var $26 = HEAP32[5247504 >> 2];
    var $cmp122 = ($inc127 | 0) < ($26 | 0);
    if ($cmp122) {
      var $k_2124 = $inc127;
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    _qh_fprintf(5290352);
    label = 48;
    break;
   case 48:
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 49:
    var $27 = HEAP32[5247504 >> 2];
    var $cmp131 = ($27 | 0) == 2;
    var $28 = HEAP32[5249124 >> 2];
    var $inc133 = $28 + 1 | 0;
    HEAP32[5249124 >> 2] = $inc133;
    if ($cmp131) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    _qh_printfacet2math($facet, $format, $28);
    label = 83;
    break;
   case 51:
    _qh_printfacet3math($facet, $format, $28);
    label = 83;
    break;
   case 52:
    var $neighbors = $facet + 56 | 0;
    var $29 = HEAP32[$neighbors >> 2];
    var $call138 = _qh_setsize($29);
    _qh_fprintf(5284892);
    var $30 = HEAP32[$neighbors >> 2];
    var $tobool140 = ($30 | 0) == 0;
    if ($tobool140) {
      label = 56;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $p145 = $30 + 4 | 0;
    var $31 = HEAP32[$p145 >> 2];
    var $tobool148128 = ($31 | 0) == 0;
    if ($tobool148128) {
      label = 56;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $incdec_ptr147127142 = $p145 + 4 | 0;
    var $incdec_ptr147127 = $incdec_ptr147127142;
    var $incdec_ptr147129 = $incdec_ptr147127;
    label = 55;
    break;
   case 55:
    var $incdec_ptr147129;
    _qh_fprintf(5295004);
    var $incdec_ptr147 = $incdec_ptr147129 + 4 | 0;
    var $32 = HEAP32[$incdec_ptr147129 >> 2];
    var $tobool148 = ($32 | 0) == 0;
    if ($tobool148) {
      label = 56;
      break;
    } else {
      var $incdec_ptr147129 = $incdec_ptr147;
      label = 55;
      break;
    }
   case 56:
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 57:
    var $33 = HEAP32[5247492 >> 2];
    var $tobool158 = ($33 | 0) == 0;
    if ($tobool158) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    _qh_fprintf(5278708);
    _qh_errexit(1, 0, 0);
    label = 59;
    break;
   case 59:
    var $offset161 = $facet + 16 | 0;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp162 = $34 > 0;
    if ($cmp162) {
      label = 68;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $35 = HEAP32[5248928 >> 2];
    var $call165 = _qh_memalloc($35);
    var $36 = $call165;
    var $normal166 = $facet + 24 | 0;
    var $37 = HEAP32[$normal166 >> 2];
    var $38 = HEAP32[5247492 >> 2];
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248672 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248676 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub168 = -$40;
    var $cmp169 = $39 < $sub168;
    var $41 = HEAP32[5247504 >> 2];
    if ($cmp169) {
      label = 61;
      break;
    } else {
      var $k_4 = $41;
      var $feasiblep_1 = $38;
      var $coordp_1 = $36;
      var $normp_1 = $37;
      label = 64;
      break;
    }
   case 61:
    var $tobool173132 = ($41 | 0) == 0;
    if ($tobool173132) {
      label = 67;
      break;
    } else {
      var $normp_0133 = $37;
      var $coordp_0134 = $36;
      var $feasiblep_0135 = $38;
      var $k_3136 = $41;
      var $42 = $39;
      label = 62;
      break;
    }
   case 62:
    var $42;
    var $k_3136;
    var $feasiblep_0135;
    var $coordp_0134;
    var $normp_0133;
    var $dec172 = $k_3136 - 1 | 0;
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normp_0133 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normp_0133 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub177 = -$42;
    var $div178 = $43 / $sub177;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$feasiblep_0135 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$feasiblep_0135 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add180 = $div178 + $44;
    HEAPF64[tempDoublePtr >> 3] = $add180, HEAP32[$coordp_0134 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coordp_0134 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool173 = ($dec172 | 0) == 0;
    if ($tobool173) {
      label = 67;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $incdec_ptr181 = $coordp_0134 + 8 | 0;
    var $incdec_ptr179 = $feasiblep_0135 + 8 | 0;
    var $incdec_ptr175 = $normp_0133 + 8 | 0;
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $normp_0133 = $incdec_ptr175;
    var $coordp_0134 = $incdec_ptr181;
    var $feasiblep_0135 = $incdec_ptr179;
    var $k_3136 = $dec172;
    var $42 = $_pre;
    label = 62;
    break;
   case 64:
    var $normp_1;
    var $coordp_1;
    var $feasiblep_1;
    var $k_4;
    var $tobool186 = ($k_4 | 0) == 0;
    if ($tobool186) {
      label = 67;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $dec185 = $k_4 - 1 | 0;
    var $incdec_ptr188 = $normp_1 + 8 | 0;
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$normp_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$normp_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset161 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset161 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248664 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248668 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call190 = _qh_divzero($45, $46, $47, $zerodiv);
    var $incdec_ptr191 = $feasiblep_1 + 8 | 0;
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$feasiblep_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$feasiblep_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add192 = $call190 + $48;
    var $incdec_ptr193 = $coordp_1 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add192, HEAP32[$coordp_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coordp_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $49 = HEAP32[$zerodiv >> 2];
    var $tobool194 = ($49 | 0) == 0;
    if ($tobool194) {
      var $k_4 = $dec185;
      var $feasiblep_1 = $incdec_ptr191;
      var $coordp_1 = $incdec_ptr193;
      var $normp_1 = $incdec_ptr188;
      label = 64;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $50 = HEAP32[5248928 >> 2];
    _qh_memfree($call165, $50);
    label = 68;
    break;
   case 67:
    _qh_printpoint(0, $36);
    var $51 = HEAP32[5248928 >> 2];
    _qh_memfree($call165, $51);
    label = 83;
    break;
   case 68:
    var $52 = HEAP32[5247504 >> 2];
    var $tobool201130 = ($52 | 0) == 0;
    if ($tobool201130) {
      label = 70;
      break;
    } else {
      var $k_5131 = $52;
      label = 69;
      break;
    }
   case 69:
    var $k_5131;
    var $dec200 = $k_5131 - 1 | 0;
    _qh_fprintf(5290352);
    var $tobool201 = ($dec200 | 0) == 0;
    if ($tobool201) {
      label = 70;
      break;
    } else {
      var $k_5131 = $dec200;
      label = 69;
      break;
    }
   case 70:
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 71:
    var $coplanarset205 = $facet + 64 | 0;
    var $53 = HEAP32[$coplanarset205 >> 2];
    var $tobool206 = ($53 | 0) == 0;
    if ($tobool206) {
      label = 83;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $p211 = $53 + 4 | 0;
    var $54 = HEAP32[$p211 >> 2];
    var $tobool214138 = ($54 | 0) == 0;
    if ($tobool214138) {
      label = 83;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $55 = $54;
    var $56 = $p211;
    var $pointp_1139 = $56;
    var $57 = $55;
    label = 74;
    break;
   case 74:
    var $57;
    var $pointp_1139;
    var $incdec_ptr213 = $pointp_1139 + 4 | 0;
    var $call217 = _qh_nearvertex($facet, $57, $dist);
    _qh_fprintf(5277580);
    var $58 = HEAP32[$incdec_ptr213 >> 2];
    var $tobool214 = ($58 | 0) == 0;
    if ($tobool214) {
      label = 83;
      break;
    } else {
      var $pointp_1139 = $incdec_ptr213;
      var $57 = $58;
      label = 74;
      break;
    }
   case 75:
    var $59 = HEAP32[5246972 >> 2];
    var $tobool225 = ($59 | 0) == 0;
    if ($tobool225) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    _qh_fprintf(5277044);
    label = 77;
    break;
   case 77:
    _qh_printcenter(21, 0, $facet);
    label = 83;
    break;
   case 78:
    var $vertices = $facet + 48 | 0;
    var $60 = HEAP32[$vertices >> 2];
    var $call229 = _qh_setsize($60);
    _qh_fprintf(5284892);
    var $61 = HEAP32[$vertices >> 2];
    var $tobool231 = ($61 | 0) == 0;
    if ($tobool231) {
      label = 82;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    var $p236 = $61 + 4 | 0;
    var $62 = HEAP32[$p236 >> 2];
    var $tobool239140 = ($62 | 0) == 0;
    if ($tobool239140) {
      label = 82;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $63 = $p236;
    var $vertexp_0141 = $63;
    label = 81;
    break;
   case 81:
    var $vertexp_0141;
    var $incdec_ptr238 = $vertexp_0141 + 4 | 0;
    _qh_fprintf(5295004);
    var $64 = HEAP32[$incdec_ptr238 >> 2];
    var $tobool239 = ($64 | 0) == 0;
    if ($tobool239) {
      label = 82;
      break;
    } else {
      var $vertexp_0141 = $incdec_ptr238;
      label = 81;
      break;
    }
   case 82:
    _qh_fprintf(5299656);
    label = 83;
    break;
   case 83:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printafacet["X"] = 1;
function _qh_printcenter($format, $string, $facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249032 >> 2];
    var $_off = $0 - 1 | 0;
    var $1 = $_off >>> 0 > 1;
    if ($1) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool = ($string | 0) == 0;
    if ($tobool) {
      var $2 = $0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf($string);
    var $_pre = HEAP32[5249032 >> 2];
    var $2 = $_pre;
    label = 5;
    break;
   case 5:
    var $2;
    var $cmp4 = ($2 | 0) == 1;
    var $3 = HEAP32[5247504 >> 2];
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 14;
      break;
    }
   case 6:
    var $sub = $3 - 1 | 0;
    var $normal = $facet + 24 | 0;
    var $4 = HEAP32[$normal >> 2];
    var $tobool6 = ($4 | 0) == 0;
    if ($tobool6) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $5 = $facet + 76 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $bf_clear = $7 & 131072;
    var $tobool7 = ($bf_clear | 0) != 0;
    var $8 = HEAP32[5246956 >> 2];
    var $tobool9 = ($8 | 0) != 0;
    var $or_cond1 = $tobool7 & $tobool9;
    if ($or_cond1) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $cmp1833 = ($sub | 0) > 0;
    if ($cmp1833) {
      var $k_134 = 0;
      label = 13;
      break;
    } else {
      label = 20;
      break;
    }
   case 9:
    var $center = $facet + 36 | 0;
    var $9 = HEAP32[$center >> 2];
    var $tobool11 = ($9 | 0) == 0;
    if ($tobool11) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $vertices = $facet + 48 | 0;
    var $10 = HEAP32[$vertices >> 2];
    var $call = _qh_facetcenter($10);
    HEAP32[$center >> 2] = $call;
    label = 11;
    break;
   case 11:
    var $cmp1530 = ($sub | 0) > 0;
    if ($cmp1530) {
      var $k_031 = 0;
      label = 12;
      break;
    } else {
      label = 20;
      break;
    }
   case 12:
    var $k_031;
    _qh_fprintf(5290352);
    var $inc = $k_031 + 1 | 0;
    var $exitcond = ($inc | 0) == ($sub | 0);
    if ($exitcond) {
      var $num_1 = $sub;
      label = 18;
      break;
    } else {
      var $k_031 = $inc;
      label = 12;
      break;
    }
   case 13:
    var $k_134;
    _qh_fprintf(5290352);
    var $inc21 = $k_134 + 1 | 0;
    var $exitcond38 = ($inc21 | 0) == ($sub | 0);
    if ($exitcond38) {
      var $num_1 = $sub;
      label = 18;
      break;
    } else {
      var $k_134 = $inc21;
      label = 13;
      break;
    }
   case 14:
    var $cmp25 = ($format | 0) == 25;
    var $11 = HEAP32[5246996 >> 2];
    var $tobool27 = ($11 | 0) != 0;
    var $or_cond2 = $cmp25 & $tobool27;
    var $dec = $or_cond2 << 31 >> 31;
    var $dec_ = $dec + $3 | 0;
    var $center30 = $facet + 36 | 0;
    var $12 = HEAP32[$center30 >> 2];
    var $tobool31 = ($12 | 0) == 0;
    if ($tobool31) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $call33 = _qh_getcentrum($facet);
    HEAP32[$center30 >> 2] = $call33;
    label = 16;
    break;
   case 16:
    var $cmp3736 = ($dec_ | 0) > 0;
    if ($cmp3736) {
      var $k_237 = 0;
      label = 17;
      break;
    } else {
      label = 20;
      break;
    }
   case 17:
    var $k_237;
    _qh_fprintf(5290352);
    var $inc42 = $k_237 + 1 | 0;
    var $exitcond39 = ($inc42 | 0) == ($dec_ | 0);
    if ($exitcond39) {
      var $num_1 = $dec_;
      label = 18;
      break;
    } else {
      var $k_237 = $inc42;
      label = 17;
      break;
    }
   case 18:
    var $num_1;
    var $cmp45 = ($format | 0) == 7;
    var $cmp47 = ($num_1 | 0) == 2;
    var $or_cond = $cmp45 & $cmp47;
    if ($or_cond) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5264364);
    label = 21;
    break;
   case 20:
    _qh_fprintf(5299656);
    label = 21;
    break;
   case 21:
    return;
  }
}
_qh_printcenter["X"] = 1;
function _qh_printfacetheader($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $magicptr125 = $facet;
    if (($magicptr125 | 0) == 2) {
      label = 3;
      break;
    } else if (($magicptr125 | 0) == 1) {
      label = 4;
      break;
    } else if (($magicptr125 | 0) == 0) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    _qh_fprintf(5252720);
    label = 97;
    break;
   case 4:
    _qh_fprintf(5252428);
    label = 97;
    break;
   case 5:
    _qh_fprintf(5252252);
    label = 97;
    break;
   case 6:
    var $0 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $0;
    HEAP32[5247336 >> 2] = 0;
    _qh_fprintf(5251932);
    _qh_fprintf(5251620);
    var $1 = $facet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 4096;
    var $tobool7 = ($bf_clear | 0) == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_fprintf(5251336);
    label = 9;
    break;
   case 8:
    _qh_fprintf(5251140);
    label = 9;
    break;
   case 9:
    var $4 = HEAP32[$2 >> 2];
    var $bf_clear12 = $4 & 8192;
    var $tobool13 = ($bf_clear12 | 0) == 0;
    if ($tobool13) {
      var $5 = $4;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5250892);
    var $_pre = HEAP32[$2 >> 2];
    var $5 = $_pre;
    label = 11;
    break;
   case 11:
    var $5;
    var $bf_clear17 = $5 & 512;
    var $tobool18 = ($bf_clear17 | 0) == 0;
    if ($tobool18) {
      var $6 = $5;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5250480);
    var $_pre1 = HEAP32[$2 >> 2];
    var $6 = $_pre1;
    label = 13;
    break;
   case 13:
    var $6;
    var $bf_clear22 = $6 & 131072;
    var $tobool23 = ($bf_clear22 | 0) == 0;
    if ($tobool23) {
      var $7 = $6;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5250236);
    var $_pre2 = HEAP32[$2 >> 2];
    var $7 = $_pre2;
    label = 15;
    break;
   case 15:
    var $7;
    var $bf_clear27 = $7 & 2048;
    var $tobool28 = ($bf_clear27 | 0) == 0;
    if ($tobool28) {
      var $8 = $7;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _qh_fprintf(5250096);
    var $_pre3 = HEAP32[$2 >> 2];
    var $8 = $_pre3;
    label = 17;
    break;
   case 17:
    var $8;
    var $bf_clear32 = $8 & 1024;
    var $tobool33 = ($bf_clear32 | 0) == 0;
    if ($tobool33) {
      var $9 = $8;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _qh_fprintf(5249720);
    var $_pre4 = HEAP32[$2 >> 2];
    var $9 = $_pre4;
    label = 19;
    break;
   case 19:
    var $9;
    var $bf_clear37 = $9 & 134217728;
    var $tobool38 = ($bf_clear37 | 0) == 0;
    if ($tobool38) {
      var $10 = $9;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5249460);
    var $_pre5 = HEAP32[$2 >> 2];
    var $10 = $_pre5;
    label = 21;
    break;
   case 21:
    var $10;
    var $bf_clear42 = $10 & 524288;
    var $tobool43 = ($bf_clear42 | 0) == 0;
    if ($tobool43) {
      label = 22;
      break;
    } else {
      var $11 = $10;
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5302352);
    var $_pre6 = HEAP32[$2 >> 2];
    var $11 = $_pre6;
    label = 23;
    break;
   case 23:
    var $11;
    var $bf_clear47 = $11 & 16384;
    var $tobool48 = ($bf_clear47 | 0) == 0;
    if ($tobool48) {
      var $12 = $11;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_fprintf(5302024);
    var $_pre7 = HEAP32[$2 >> 2];
    var $12 = $_pre7;
    label = 25;
    break;
   case 25:
    var $12;
    var $bf_clear52 = $12 & 16777216;
    var $tobool53 = ($bf_clear52 | 0) == 0;
    if ($tobool53) {
      var $13 = $12;
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    _qh_fprintf(5301660);
    var $_pre8 = HEAP32[$2 >> 2];
    var $13 = $_pre8;
    label = 27;
    break;
   case 27:
    var $13;
    var $bf_clear57 = $13 & 33554432;
    var $tobool58 = ($bf_clear57 | 0) == 0;
    if ($tobool58) {
      var $14 = $13;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    _qh_fprintf(5301428);
    var $_pre9 = HEAP32[$2 >> 2];
    var $14 = $_pre9;
    label = 29;
    break;
   case 29:
    var $14;
    var $bf_clear62 = $14 & 268435456;
    var $tobool63 = ($bf_clear62 | 0) == 0;
    if ($tobool63) {
      var $15 = $14;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    _qh_fprintf(5301080);
    var $_pre10 = HEAP32[$2 >> 2];
    var $15 = $_pre10;
    label = 31;
    break;
   case 31:
    var $15;
    var $bf_clear67 = $15 & 2097152;
    var $tobool68 = ($bf_clear67 | 0) == 0;
    if ($tobool68) {
      var $16 = $15;
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _qh_fprintf(5300928);
    var $_pre11 = HEAP32[$2 >> 2];
    var $16 = $_pre11;
    label = 33;
    break;
   case 33:
    var $16;
    var $17 = $16 & 12582912;
    var $18 = ($17 | 0) == 4194304;
    if ($18) {
      label = 34;
      break;
    } else {
      var $19 = $16;
      label = 35;
      break;
    }
   case 34:
    _qh_fprintf(5300604);
    var $_pre12 = HEAP32[$2 >> 2];
    var $19 = $_pre12;
    label = 35;
    break;
   case 35:
    var $19;
    var $bf_clear80 = $19 & 8388608;
    var $tobool81 = ($bf_clear80 | 0) == 0;
    if ($tobool81) {
      var $20 = $19;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    _qh_fprintf(5300540);
    var $_pre13 = HEAP32[$2 >> 2];
    var $20 = $_pre13;
    label = 37;
    break;
   case 37:
    var $20;
    var $bf_clear85 = $20 & 536870912;
    var $tobool86 = ($bf_clear85 | 0) == 0;
    if ($tobool86) {
      var $21 = $20;
      label = 39;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    _qh_fprintf(5300212);
    var $_pre14 = HEAP32[$2 >> 2];
    var $21 = $_pre14;
    label = 39;
    break;
   case 39:
    var $21;
    var $bf_clear90 = $21 & 65536;
    var $tobool91 = ($bf_clear90 | 0) == 0;
    if ($tobool91) {
      var $22 = $21;
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    _qh_fprintf(5300072);
    var $_pre15 = HEAP32[$2 >> 2];
    var $22 = $_pre15;
    label = 41;
    break;
   case 41:
    var $22;
    var $bf_clear95 = $22 & 262144;
    var $tobool96 = ($bf_clear95 | 0) == 0;
    if ($tobool96) {
      var $23 = $22;
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    _qh_fprintf(5299872);
    var $_pre16 = HEAP32[$2 >> 2];
    var $23 = $_pre16;
    label = 43;
    break;
   case 43:
    var $23;
    var $bf_clear100 = $23 & 1073741824;
    var $tobool101 = ($bf_clear100 | 0) == 0;
    if ($tobool101) {
      var $24 = $23;
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    _qh_fprintf(5299660);
    var $_pr = HEAP32[$2 >> 2];
    var $24 = $_pr;
    label = 45;
    break;
   case 45:
    var $24;
    var $tobool106 = ($24 | 0) < 0;
    if ($tobool106) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    _qh_fprintf(5299344);
    label = 47;
    break;
   case 47:
    _qh_fprintf(5299656);
    var $25 = HEAP32[$2 >> 2];
    var $bf_clear110 = $25 & 1048576;
    var $tobool111 = ($bf_clear110 | 0) == 0;
    if ($tobool111) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    _qh_fprintf(5299112);
    label = 61;
    break;
   case 49:
    var $26 = HEAP32[5249088 >> 2];
    var $tobool114 = ($26 | 0) == 0;
    if ($tobool114) {
      label = 53;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $bf_clear117 = $25 & 2048;
    var $tobool118 = ($bf_clear117 | 0) == 0;
    if ($tobool118) {
      label = 53;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $f120 = $facet + 28 | 0;
    var $replace = $f120;
    var $27 = HEAP32[$replace >> 2];
    var $tobool121 = ($27 | 0) == 0;
    if ($tobool121) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    _qh_fprintf(5298908);
    label = 61;
    break;
   case 53:
    var $bf_clear128 = $25 & 1024;
    var $tobool129 = ($bf_clear128 | 0) == 0;
    if ($tobool129) {
      label = 56;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $f131 = $facet + 28 | 0;
    var $samecycle = $f131;
    var $28 = HEAP32[$samecycle >> 2];
    var $tobool132 = ($28 | 0) == 0;
    var $cmp136 = ($28 | 0) == ($facet | 0);
    var $or_cond126 = $tobool132 | $cmp136;
    if ($or_cond126) {
      label = 61;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    _qh_fprintf(5298484);
    label = 61;
    break;
   case 56:
    var $bf_clear144 = $25 & 512;
    var $tobool145 = ($bf_clear144 | 0) == 0;
    var $f147 = $facet + 28 | 0;
    var $triowner = $f147;
    var $29 = HEAP32[$triowner >> 2];
    var $tobool148 = ($29 | 0) != 0;
    if ($tobool145) {
      label = 59;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    if ($tobool148) {
      label = 58;
      break;
    } else {
      label = 61;
      break;
    }
   case 58:
    _qh_fprintf(5298208);
    label = 61;
    break;
   case 59:
    if ($tobool148) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    _qh_fprintf(5297988);
    label = 61;
    break;
   case 61:
    var $30 = HEAP32[$2 >> 2];
    var $bf_clear167 = $30 & 511;
    var $tobool168 = ($bf_clear167 | 0) == 0;
    if ($tobool168) {
      label = 63;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    _qh_fprintf(5297692);
    label = 63;
    break;
   case 63:
    var $31 = HEAP32[5247504 >> 2];
    var $normal = $facet + 24 | 0;
    var $32 = HEAP32[$normal >> 2];
    _qh_printpointid(5297624, $31, $32, -1);
    _qh_fprintf(5297424);
    var $33 = HEAP32[5249032 >> 2];
    var $cmp173 = ($33 | 0) == 1;
    if ($cmp173) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $center = $facet + 36 | 0;
    var $34 = HEAP32[$center >> 2];
    var $tobool174 = ($34 | 0) == 0;
    if ($tobool174) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    _qh_printcenter(5, 5297084, $facet);
    label = 66;
    break;
   case 66:
    var $maxoutside = $facet + 8 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp177 = $35 > $36;
    if ($cmp177) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    _qh_fprintf(5296764);
    label = 68;
    break;
   case 68:
    var $outsideset = $facet + 60 | 0;
    var $37 = HEAP32[$outsideset >> 2];
    var $tobool181 = ($37 | 0) == 0;
    if ($tobool181) {
      label = 79;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $p = $37 + 4 | 0;
    var $38 = HEAP32[$p >> 2];
    var $tobool184 = ($38 | 0) == 0;
    if ($tobool184) {
      label = 79;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $call = _qh_setlast($37);
    var $39 = $call;
    var $call188 = _qh_setsize($37);
    var $cmp189 = ($call188 | 0) < 6;
    if ($cmp189) {
      label = 71;
      break;
    } else {
      label = 75;
      break;
    }
   case 71:
    _qh_fprintf(5296556);
    var $40 = HEAP32[$outsideset >> 2];
    var $tobool193 = ($40 | 0) == 0;
    if ($tobool193) {
      label = 78;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $p198 = $40 + 4 | 0;
    var $41 = HEAP32[$p198 >> 2];
    var $tobool199130 = ($41 | 0) == 0;
    if ($tobool199130) {
      label = 78;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $42 = $41;
    var $43 = $p198;
    var $pointp_0131 = $43;
    var $44 = $42;
    label = 74;
    break;
   case 74:
    var $44;
    var $pointp_0131;
    var $incdec_ptr = $pointp_0131 + 4 | 0;
    _qh_printpoint(5296384, $44);
    var $45 = HEAP32[$incdec_ptr >> 2];
    var $tobool199 = ($45 | 0) == 0;
    if ($tobool199) {
      label = 78;
      break;
    } else {
      var $pointp_0131 = $incdec_ptr;
      var $44 = $45;
      label = 74;
      break;
    }
   case 75:
    var $46 = HEAP32[$outsideset >> 2];
    var $call203 = _qh_setsize($46);
    var $cmp204 = ($call203 | 0) < 21;
    var $47 = HEAP32[$outsideset >> 2];
    if ($cmp204) {
      label = 76;
      break;
    } else {
      label = 77;
      break;
    }
   case 76:
    _qh_printpoints(5296176, $47);
    label = 78;
    break;
   case 77:
    var $call209 = _qh_setsize($47);
    _qh_fprintf(5296004);
    _qh_printpoint(5295880, $39);
    label = 78;
    break;
   case 78:
    _qh_fprintf(5295628);
    label = 79;
    break;
   case 79:
    var $coplanarset = $facet + 64 | 0;
    var $48 = HEAP32[$coplanarset >> 2];
    var $tobool213 = ($48 | 0) == 0;
    if ($tobool213) {
      label = 90;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $p218 = $48 + 4 | 0;
    var $49 = HEAP32[$p218 >> 2];
    var $tobool219 = ($49 | 0) == 0;
    if ($tobool219) {
      label = 90;
      break;
    } else {
      label = 81;
      break;
    }
   case 81:
    var $call224 = _qh_setlast($48);
    var $50 = $call224;
    var $call226 = _qh_setsize($48);
    var $cmp227 = ($call226 | 0) < 6;
    if ($cmp227) {
      label = 82;
      break;
    } else {
      label = 86;
      break;
    }
   case 82:
    _qh_fprintf(5295504);
    var $51 = HEAP32[$coplanarset >> 2];
    var $tobool231 = ($51 | 0) == 0;
    if ($tobool231) {
      label = 89;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $p236 = $51 + 4 | 0;
    var $52 = HEAP32[$p236 >> 2];
    var $tobool239128 = ($52 | 0) == 0;
    if ($tobool239128) {
      label = 89;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    var $53 = $52;
    var $54 = $p236;
    var $pointp_1129 = $54;
    var $55 = $53;
    label = 85;
    break;
   case 85:
    var $55;
    var $pointp_1129;
    var $incdec_ptr238 = $pointp_1129 + 4 | 0;
    _qh_printpoint(5296384, $55);
    var $56 = HEAP32[$incdec_ptr238 >> 2];
    var $tobool239 = ($56 | 0) == 0;
    if ($tobool239) {
      label = 89;
      break;
    } else {
      var $pointp_1129 = $incdec_ptr238;
      var $55 = $56;
      label = 85;
      break;
    }
   case 86:
    var $57 = HEAP32[$coplanarset >> 2];
    var $call245 = _qh_setsize($57);
    var $cmp246 = ($call245 | 0) < 21;
    var $58 = HEAP32[$coplanarset >> 2];
    if ($cmp246) {
      label = 87;
      break;
    } else {
      label = 88;
      break;
    }
   case 87:
    _qh_printpoints(5295400, $58);
    label = 89;
    break;
   case 88:
    var $call251 = _qh_setsize($58);
    _qh_fprintf(5295156);
    _qh_printpoint(5295880, $50);
    label = 89;
    break;
   case 89:
    var $59 = HEAP32[5243424 >> 2];
    var $inc = $59 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    _qh_distplane($50, $facet, $dist);
    _qh_fprintf(5295008);
    label = 90;
    break;
   case 90:
    var $vertices = $facet + 48 | 0;
    var $60 = HEAP32[$vertices >> 2];
    _qh_printvertices($60);
    _qh_fprintf(5294860);
    var $neighbors = $facet + 56 | 0;
    var $61 = HEAP32[$neighbors >> 2];
    var $tobool255 = ($61 | 0) == 0;
    if ($tobool255) {
      label = 96;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $p260 = $61 + 4 | 0;
    var $62 = $p260;
    var $neighborp_0 = $62;
    label = 92;
    break;
   case 92:
    var $neighborp_0;
    var $incdec_ptr262 = $neighborp_0 + 4 | 0;
    var $63 = HEAP32[$neighborp_0 >> 2];
    var $magicptr127 = $63;
    if (($magicptr127 | 0) == 2) {
      label = 93;
      break;
    } else if (($magicptr127 | 0) == 1) {
      label = 94;
      break;
    } else if (($magicptr127 | 0) == 0) {
      label = 96;
      break;
    } else {
      label = 95;
      break;
    }
   case 93:
    _qh_fprintf(5294704);
    var $neighborp_0 = $incdec_ptr262;
    label = 92;
    break;
   case 94:
    _qh_fprintf(5294492);
    var $neighborp_0 = $incdec_ptr262;
    label = 92;
    break;
   case 95:
    _qh_fprintf(5260352);
    var $neighborp_0 = $incdec_ptr262;
    label = 92;
    break;
   case 96:
    _qh_fprintf(5299656);
    var $64 = HEAP32[5249220 >> 2];
    HEAP32[5247336 >> 2] = $64;
    label = 97;
    break;
   case 97:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacetheader["X"] = 1;
function _qh_projectdim3($source, $destination) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247504 >> 2];
    var $cmp15 = ($0 | 0) > 0;
    if ($cmp15) {
      var $i_016 = 0;
      var $k_017 = 0;
      var $1 = $0;
      label = 4;
      break;
    } else {
      var $i_0_lcssa20 = 0;
      label = 11;
      break;
    }
   case 3:
    var $cmp1613 = ($i_1 | 0) < 3;
    if ($cmp1613) {
      var $i_0_lcssa20 = $i_1;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 4:
    var $1;
    var $k_017;
    var $i_016;
    var $cmp1 = ($1 | 0) == 4;
    var $2 = HEAP32[5247004 >> 2];
    var $cmp2 = ($k_017 | 0) == ($2 | 0);
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    if ($cmp2) {
      var $i_1 = $i_016;
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $arrayidx = $source + ($k_017 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $inc = $i_016 + 1 | 0;
    var $arrayidx4 = $destination + ($i_016 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $3, HEAP32[$arrayidx4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_1 = $inc;
    label = 10;
    break;
   case 7:
    if ($cmp2) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $inc7 = $i_016 + 1 | 0;
    var $arrayidx8 = $destination + ($i_016 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx8 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_1 = $inc7;
    label = 10;
    break;
   case 9:
    var $arrayidx10 = $source + ($k_017 << 3) | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx10 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx10 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $inc11 = $i_016 + 1 | 0;
    var $arrayidx12 = $destination + ($i_016 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $4, HEAP32[$arrayidx12 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_1 = $inc11;
    label = 10;
    break;
   case 10:
    var $i_1;
    var $inc15 = $k_017 + 1 | 0;
    var $5 = HEAP32[5247504 >> 2];
    var $cmp = ($inc15 | 0) < ($5 | 0);
    if ($cmp) {
      var $i_016 = $i_1;
      var $k_017 = $inc15;
      var $1 = $5;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 11:
    var $i_0_lcssa20;
    var $scevgep = $destination + ($i_0_lcssa20 << 3) | 0;
    var $scevgep18 = $scevgep;
    var $6 = $i_0_lcssa20 << 3;
    var $7 = 24 - $6 | 0;
    _memset($scevgep18, 0, $7);
    label = 12;
    break;
   case 12:
    return;
  }
}
function _qh_printfacet2geom($facet, $color) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $point0 = __stackBase__;
    var $point1 = __stackBase__ + 4;
    var $mindist = __stackBase__ + 8;
    var $innerplane = __stackBase__ + 16;
    var $outerplane = __stackBase__ + 24;
    _qh_facet2point($facet, $point0, $point1, $mindist);
    _qh_geomplanes($facet, $outerplane, $innerplane);
    var $0 = HEAP32[5247180 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $1 = HEAP32[5247172 >> 2];
    var $2 = HEAP32[5247164 >> 2];
    var $3 = $2 | $1;
    var $4 = ($3 | 0) == 0;
    if ($4) {
      label = 4;
      break;
    } else {
      var $8 = $2;
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP32[$point0 >> 2];
    var $6 = HEAP32[$point1 >> 2];
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printfacet2geom_points($5, $6, $facet, $7);
    var $_pr = HEAP32[5247164 >> 2];
    var $8 = $_pr;
    label = 5;
    break;
   case 5:
    var $8;
    var $tobool3 = ($8 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $16 = $_pre;
    label = 9;
    break;
   case 7:
    var $9 = HEAP32[5247172 >> 2];
    var $10 = HEAP32[5247180 >> 2];
    var $11 = $10 | $9;
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $13 - $14;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $15 * 2;
    var $mul9 = $mul * .002;
    var $cmp = $sub > $mul9;
    if ($cmp) {
      var $16 = $14;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $16;
    var $arrayidx = $color + 16 | 0;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub12 = 1 - $17;
    HEAPF64[tempDoublePtr >> 3] = $sub12, HEAP32[$arrayidx >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx_1 = $color + 8 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub12_1 = 1 - $18;
    HEAPF64[tempDoublePtr >> 3] = $sub12_1, HEAP32[$arrayidx_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$color >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$color + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub12_2 = 1 - $19;
    HEAPF64[tempDoublePtr >> 3] = $sub12_2, HEAP32[$color >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$color + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $20 = HEAP32[$point0 >> 2];
    var $21 = HEAP32[$point1 >> 2];
    _qh_printfacet2geom_points($20, $21, $facet, $16);
    label = 10;
    break;
   case 10:
    var $22 = HEAP32[$point1 >> 2];
    var $23 = $22;
    var $24 = HEAP32[5248928 >> 2];
    _qh_memfree($23, $24);
    var $25 = HEAP32[$point0 >> 2];
    var $26 = $25;
    var $27 = HEAP32[5248928 >> 2];
    _qh_memfree($26, $27);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet2geom["X"] = 1;
function _qh_printfacet3geom_simplicial($facet, $color) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $points = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $outerplane = __stackBase__ + 8;
    var $innerplane = __stackBase__ + 16;
    _qh_geomplanes($facet, $outerplane, $innerplane);
    var $call = _qh_facet3vertex($facet);
    HEAP32[$vertices >> 2] = $call;
    var $0 = HEAP32[5248936 >> 2];
    var $call1 = _qh_settemp($0);
    HEAP32[$points >> 2] = $call1;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool228 = ($1 | 0) == 0;
    if ($tobool228) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = $1;
    var $3 = $p;
    var $vertexp_029 = $3;
    var $4 = $2;
    label = 5;
    break;
   case 5:
    var $4;
    var $vertexp_029;
    var $incdec_ptr = $vertexp_029 + 4 | 0;
    var $point = $4 + 8 | 0;
    var $5 = HEAP32[$point >> 2];
    var $6 = $5;
    _qh_setappend($points, $6);
    var $7 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($7 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      var $vertexp_029 = $incdec_ptr;
      var $4 = $7;
      label = 5;
      break;
    }
   case 6:
    var $8 = HEAP32[5247180 >> 2];
    var $tobool3 = ($8 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $9 = HEAP32[5247172 >> 2];
    var $10 = HEAP32[5247164 >> 2];
    var $11 = $10 | $9;
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 8;
      break;
    } else {
      var $15 = $10;
      label = 9;
      break;
    }
   case 8:
    var $13 = HEAP32[$points >> 2];
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printfacet3geom_points($13, $facet, $14);
    var $_pr = HEAP32[5247164 >> 2];
    var $15 = $_pr;
    label = 9;
    break;
   case 9:
    var $15;
    var $tobool8 = ($15 | 0) == 0;
    if ($tobool8) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $23 = $_pre;
    label = 13;
    break;
   case 11:
    var $16 = HEAP32[5247172 >> 2];
    var $17 = HEAP32[5247180 >> 2];
    var $18 = $17 | $16;
    var $19 = ($18 | 0) == 0;
    if ($19) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $20 - $21;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $22 * 2;
    var $mul14 = $mul * .002;
    var $cmp = $sub > $mul14;
    if ($cmp) {
      var $23 = $21;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $23;
    var $arrayidx19 = $color + 16 | 0;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx19 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx19 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub20 = 1 - $24;
    HEAPF64[tempDoublePtr >> 3] = $sub20, HEAP32[$arrayidx19 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx19_1 = $color + 8 | 0;
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx19_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx19_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub20_1 = 1 - $25;
    HEAPF64[tempDoublePtr >> 3] = $sub20_1, HEAP32[$arrayidx19_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx19_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$color >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$color + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub20_2 = 1 - $26;
    HEAPF64[tempDoublePtr >> 3] = $sub20_2, HEAP32[$color >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$color + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $27 = HEAP32[$points >> 2];
    _qh_printfacet3geom_points($27, $facet, $23);
    label = 14;
    break;
   case 14:
    _qh_settempfree($points);
    _qh_settempfree($vertices);
    var $28 = HEAP32[5247e3 >> 2];
    var $29 = HEAP32[5247304 >> 2];
    var $30 = $29 | $28;
    var $31 = ($30 | 0) == 0;
    if ($31) {
      label = 27;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $32 = $facet + 76 | 0;
    var $33 = $32;
    var $34 = HEAP32[$33 >> 2];
    var $bf_clear = $34 & 2048;
    var $tobool28 = ($bf_clear | 0) != 0;
    var $35 = HEAP32[5249088 >> 2];
    var $tobool30 = ($35 | 0) != 0;
    var $or_cond3 = $tobool28 & $tobool30;
    if ($or_cond3) {
      label = 27;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $36 = HEAP32[5249152 >> 2];
    var $visitid = $facet + 68 | 0;
    HEAP32[$visitid >> 2] = $36;
    var $neighbors = $facet + 56 | 0;
    var $37 = HEAP32[$neighbors >> 2];
    var $tobool32 = ($37 | 0) == 0;
    if ($tobool32) {
      label = 27;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p37 = $37 + 4 | 0;
    var $38 = HEAP32[$p37 >> 2];
    var $tobool4025 = ($38 | 0) == 0;
    if ($tobool4025) {
      label = 27;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $39 = $38;
    var $incdec_ptr392430 = $p37 + 4 | 0;
    var $incdec_ptr3924 = $incdec_ptr392430;
    var $vertices45 = $facet + 48 | 0;
    var $incdec_ptr3926 = $incdec_ptr3924;
    var $40 = $39;
    label = 19;
    break;
   case 19:
    var $40;
    var $incdec_ptr3926;
    var $visitid42 = $40 + 68 | 0;
    var $41 = HEAP32[$visitid42 >> 2];
    var $42 = HEAP32[5249152 >> 2];
    var $cmp43 = ($41 | 0) == ($42 | 0);
    if ($cmp43) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $43 = HEAP32[$vertices45 >> 2];
    var $44 = HEAP32[5247504 >> 2];
    var $45 = HEAP32[$neighbors >> 2];
    var $p49 = $45 + 8 | 0;
    var $sub_ptr_lhs_cast = $incdec_ptr3926;
    var $sub_ptr_rhs_cast = $p49;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $call50 = _qh_setnew_delnthsorted($43, $44, $sub_ptr_div, 0);
    HEAP32[$vertices >> 2] = $call50;
    var $46 = HEAP32[5247e3 >> 2];
    var $tobool51 = ($46 | 0) == 0;
    if ($tobool51) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_printhyperplaneintersection($facet, $40, $call50);
    label = 22;
    break;
   case 22:
    var $47 = HEAP32[5247304 >> 2];
    var $tobool54 = ($47 | 0) == 0;
    if ($tobool54) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $p58 = $call50 + 4 | 0;
    var $48 = HEAP32[$p58 >> 2];
    var $p61 = $call50 + 8 | 0;
    var $49 = HEAP32[$p61 >> 2];
    var $point62 = $48 + 8 | 0;
    var $50 = $point62;
    var $51 = HEAP32[$50 >> 2];
    var $point63 = $49 + 8 | 0;
    var $52 = $point63;
    var $53 = HEAP32[$52 >> 2];
    _qh_printline3geom($51, $53);
    label = 24;
    break;
   case 24:
    _qh_setfree($vertices);
    label = 25;
    break;
   case 25:
    var $54 = HEAP32[$incdec_ptr3926 >> 2];
    var $tobool40 = ($54 | 0) == 0;
    if ($tobool40) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $incdec_ptr39 = $incdec_ptr3926 + 4 | 0;
    var $incdec_ptr3926 = $incdec_ptr39;
    var $40 = $54;
    label = 19;
    break;
   case 27:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet3geom_simplicial["X"] = 1;
function _qh_printfacet3geom_nonsimplicial($facet, $color) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $projectedpoints = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $dist = __stackBase__ + 8;
    var $outerplane = __stackBase__ + 16;
    var $innerplane = __stackBase__ + 24;
    _qh_geomplanes($facet, $outerplane, $innerplane);
    var $call = _qh_facet3vertex($facet);
    HEAP32[$vertices >> 2] = $call;
    var $call1 = _qh_setsize($call);
    var $call2 = _qh_settemp($call1);
    HEAP32[$projectedpoints >> 2] = $call2;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool335 = ($0 | 0) == 0;
    if ($tobool335) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $0;
    var $2 = $p;
    var $vertexp_036 = $2;
    var $3 = $1;
    label = 5;
    break;
   case 5:
    var $3;
    var $vertexp_036;
    var $incdec_ptr = $vertexp_036 + 4 | 0;
    var $4 = HEAP32[5243424 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    var $point4 = $3 + 8 | 0;
    var $5 = HEAP32[$point4 >> 2];
    _qh_distplane($5, $facet, $dist);
    var $6 = HEAP32[$point4 >> 2];
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call6 = _qh_projectpoint($6, $facet, $7);
    var $8 = $call6;
    _qh_setappend($projectedpoints, $8);
    var $9 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($9 | 0) == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      var $vertexp_036 = $incdec_ptr;
      var $3 = $9;
      label = 5;
      break;
    }
   case 6:
    var $10 = HEAP32[5247180 >> 2];
    var $tobool7 = ($10 | 0) == 0;
    if ($tobool7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $11 = HEAP32[5247172 >> 2];
    var $12 = HEAP32[5247164 >> 2];
    var $13 = $12 | $11;
    var $14 = ($13 | 0) == 0;
    if ($14) {
      label = 8;
      break;
    } else {
      var $17 = $12;
      label = 9;
      break;
    }
   case 8:
    var $15 = HEAP32[$projectedpoints >> 2];
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printfacet3geom_points($15, $facet, $16);
    var $_pr = HEAP32[5247164 >> 2];
    var $17 = $_pr;
    label = 9;
    break;
   case 9:
    var $17;
    var $tobool12 = ($17 | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = $_pre;
    label = 13;
    break;
   case 11:
    var $18 = HEAP32[5247172 >> 2];
    var $19 = HEAP32[5247180 >> 2];
    var $20 = $19 | $18;
    var $21 = ($20 | 0) == 0;
    if ($21) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $22 - $23;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $24 * 2;
    var $mul18 = $mul * .002;
    var $cmp = $sub > $mul18;
    if ($cmp) {
      var $25 = $23;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $25;
    var $arrayidx23 = $color + 16 | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx23 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx23 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub24 = 1 - $26;
    HEAPF64[tempDoublePtr >> 3] = $sub24, HEAP32[$arrayidx23 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx23_1 = $color + 8 | 0;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx23_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx23_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub24_1 = 1 - $27;
    HEAPF64[tempDoublePtr >> 3] = $sub24_1, HEAP32[$arrayidx23_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx23_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$color >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$color + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub24_2 = 1 - $28;
    HEAPF64[tempDoublePtr >> 3] = $sub24_2, HEAP32[$color >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$color + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $29 = HEAP32[$projectedpoints >> 2];
    _qh_printfacet3geom_points($29, $facet, $25);
    label = 14;
    break;
   case 14:
    var $30 = HEAP32[$projectedpoints >> 2];
    var $tobool28 = ($30 | 0) == 0;
    if ($tobool28) {
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $p32 = $30 + 4 | 0;
    var $31 = HEAP32[$p32 >> 2];
    var $tobool3532 = ($31 | 0) == 0;
    if ($tobool3532) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $32 = $31;
    var $33 = $p32;
    var $pointp_033 = $33;
    var $34 = $32;
    label = 17;
    break;
   case 17:
    var $34;
    var $pointp_033;
    var $incdec_ptr34 = $pointp_033 + 4 | 0;
    var $35 = $34;
    var $36 = HEAP32[5248928 >> 2];
    _qh_memfree($35, $36);
    var $37 = HEAP32[$incdec_ptr34 >> 2];
    var $tobool35 = ($37 | 0) == 0;
    if ($tobool35) {
      label = 18;
      break;
    } else {
      var $pointp_033 = $incdec_ptr34;
      var $34 = $37;
      label = 17;
      break;
    }
   case 18:
    _qh_settempfree($projectedpoints);
    _qh_settempfree($vertices);
    var $38 = HEAP32[5247e3 >> 2];
    var $39 = HEAP32[5247304 >> 2];
    var $40 = $39 | $38;
    var $41 = ($40 | 0) == 0;
    if ($41) {
      label = 31;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $42 = $facet + 76 | 0;
    var $43 = $42;
    var $44 = HEAP32[$43 >> 2];
    var $bf_clear = $44 & 2048;
    var $tobool43 = ($bf_clear | 0) != 0;
    var $45 = HEAP32[5249088 >> 2];
    var $tobool45 = ($45 | 0) != 0;
    var $or_cond3 = $tobool43 & $tobool45;
    if ($or_cond3) {
      label = 31;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $46 = HEAP32[5249152 >> 2];
    var $visitid = $facet + 68 | 0;
    HEAP32[$visitid >> 2] = $46;
    var $ridges = $facet + 52 | 0;
    var $47 = HEAP32[$ridges >> 2];
    var $tobool47 = ($47 | 0) == 0;
    if ($tobool47) {
      label = 31;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $p52 = $47 + 4 | 0;
    var $48 = HEAP32[$p52 >> 2];
    var $tobool5530 = ($48 | 0) == 0;
    if ($tobool5530) {
      label = 31;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $49 = $48;
    var $incdec_ptr542937 = $p52 + 4 | 0;
    var $incdec_ptr5429 = $incdec_ptr542937;
    var $incdec_ptr5431 = $incdec_ptr5429;
    var $50 = $49;
    label = 23;
    break;
   case 23:
    var $50;
    var $incdec_ptr5431;
    var $top = $50 + 4 | 0;
    var $51 = HEAP32[$top >> 2];
    var $cmp57 = ($51 | 0) == ($facet | 0);
    if ($cmp57) {
      label = 24;
      break;
    } else {
      var $cond = $51;
      label = 25;
      break;
    }
   case 24:
    var $bottom = $50 + 8 | 0;
    var $52 = HEAP32[$bottom >> 2];
    var $cond = $52;
    label = 25;
    break;
   case 25:
    var $cond;
    var $visitid59 = $cond + 68 | 0;
    var $53 = HEAP32[$visitid59 >> 2];
    var $54 = HEAP32[5249152 >> 2];
    var $cmp60 = ($53 | 0) == ($54 | 0);
    if ($cmp60) {
      label = 30;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $55 = HEAP32[5247e3 >> 2];
    var $tobool62 = ($55 | 0) == 0;
    if ($tobool62) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $vertices64 = $50 | 0;
    var $56 = HEAP32[$vertices64 >> 2];
    _qh_printhyperplaneintersection($facet, $cond, $56);
    label = 28;
    break;
   case 28:
    var $57 = HEAP32[5247304 >> 2];
    var $tobool66 = ($57 | 0) == 0;
    if ($tobool66) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $vertices68 = $50 | 0;
    var $58 = HEAP32[$vertices68 >> 2];
    var $p71 = $58 + 4 | 0;
    var $59 = HEAP32[$p71 >> 2];
    var $p75 = $58 + 8 | 0;
    var $60 = HEAP32[$p75 >> 2];
    var $point76 = $59 + 8 | 0;
    var $61 = $point76;
    var $62 = HEAP32[$61 >> 2];
    var $point77 = $60 + 8 | 0;
    var $63 = $point77;
    var $64 = HEAP32[$63 >> 2];
    _qh_printline3geom($62, $64);
    label = 30;
    break;
   case 30:
    var $incdec_ptr54 = $incdec_ptr5431 + 4 | 0;
    var $65 = HEAP32[$incdec_ptr5431 >> 2];
    var $tobool55 = ($65 | 0) == 0;
    if ($tobool55) {
      label = 31;
      break;
    } else {
      var $incdec_ptr5431 = $incdec_ptr54;
      var $50 = $65;
      label = 23;
      break;
    }
   case 31:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet3geom_nonsimplicial["X"] = 1;
function _qh_printfacet4geom_simplicial($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $0 = HEAP32[5249152 >> 2];
    var $visitid = $facet + 68 | 0;
    HEAP32[$visitid >> 2] = $0;
    var $1 = HEAP32[5247172 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 28;
      break;
    }
   case 3:
    var $2 = $facet + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 2048;
    var $tobool1 = ($bf_clear | 0) != 0;
    var $5 = HEAP32[5249088 >> 2];
    var $tobool2 = ($5 | 0) != 0;
    var $or_cond = $tobool1 & $tobool2;
    if ($or_cond) {
      label = 28;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $neighbors = $facet + 56 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 28;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool631 = ($7 | 0) == 0;
    if ($tobool631) {
      label = 28;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $8 = $7;
    var $incdec_ptr3033 = $p + 4 | 0;
    var $incdec_ptr30 = $incdec_ptr3033;
    var $vertices17 = $facet + 48 | 0;
    var $incdec_ptr32 = $incdec_ptr30;
    var $9 = $8;
    label = 7;
    break;
   case 7:
    var $9;
    var $incdec_ptr32;
    var $visitid7 = $9 + 68 | 0;
    var $10 = HEAP32[$visitid7 >> 2];
    var $11 = HEAP32[5249152 >> 2];
    var $cmp = ($10 | 0) == ($11 | 0);
    if ($cmp) {
      label = 26;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $12 = HEAP32[5247320 >> 2];
    var $tobool10 = ($12 | 0) == 0;
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $13 = $9 + 76 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear13 = $15 & 524288;
    var $tobool14 = ($bf_clear13 | 0) == 0;
    if ($tobool14) {
      label = 26;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $16 = HEAP32[$vertices17 >> 2];
    var $17 = HEAP32[5247504 >> 2];
    var $18 = HEAP32[$neighbors >> 2];
    var $p21 = $18 + 8 | 0;
    var $sub_ptr_lhs_cast = $incdec_ptr32;
    var $sub_ptr_rhs_cast = $p21;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $call = _qh_setnew_delnthsorted($16, $17, $sub_ptr_div, 0);
    HEAP32[$vertices >> 2] = $call;
    var $19 = HEAP32[5247e3 >> 2];
    var $tobool22 = ($19 | 0) == 0;
    if ($tobool22) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _qh_printhyperplaneintersection($facet, $9, $call);
    label = 25;
    break;
   case 12:
    var $20 = HEAP32[5247004 >> 2];
    var $cmp24 = ($20 | 0) > -1;
    if ($cmp24) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5253152);
    label = 15;
    break;
   case 14:
    var $21 = HEAP32[5249124 >> 2];
    var $inc = $21 + 1 | 0;
    HEAP32[5249124 >> 2] = $inc;
    _qh_fprintf(5252936);
    label = 15;
    break;
   case 15:
    var $tobool31 = ($call | 0) == 0;
    if ($tobool31) {
      label = 23;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p35 = $call + 4 | 0;
    var $22 = HEAP32[$p35 >> 2];
    var $tobool3828 = ($22 | 0) == 0;
    if ($tobool3828) {
      label = 23;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $incdec_ptr372734 = $p35 + 4 | 0;
    var $incdec_ptr3727 = $incdec_ptr372734;
    var $incdec_ptr3729 = $incdec_ptr3727;
    label = 18;
    break;
   case 18:
    var $incdec_ptr3729;
    var $23 = HEAP32[5247504 >> 2];
    var $cmp4125 = ($23 | 0) > 0;
    if ($cmp4125) {
      var $k_026 = 0;
      var $24 = $23;
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    var $24;
    var $k_026;
    var $25 = HEAP32[5247004 >> 2];
    var $cmp43 = ($k_026 | 0) == ($25 | 0);
    if ($cmp43) {
      var $26 = $24;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5256868);
    var $_pre = HEAP32[5247504 >> 2];
    var $26 = $_pre;
    label = 21;
    break;
   case 21:
    var $26;
    var $inc47 = $k_026 + 1 | 0;
    var $cmp41 = ($inc47 | 0) < ($26 | 0);
    if ($cmp41) {
      var $k_026 = $inc47;
      var $24 = $26;
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_fprintf(5299656);
    var $incdec_ptr37 = $incdec_ptr3729 + 4 | 0;
    var $27 = HEAP32[$incdec_ptr3729 >> 2];
    var $tobool38 = ($27 | 0) == 0;
    if ($tobool38) {
      label = 23;
      break;
    } else {
      var $incdec_ptr3729 = $incdec_ptr37;
      label = 18;
      break;
    }
   case 23:
    var $28 = HEAP32[5247004 >> 2];
    var $cmp50 = ($28 | 0) > -1;
    if ($cmp50) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5253420);
    label = 25;
    break;
   case 25:
    _qh_setfree($vertices);
    label = 26;
    break;
   case 26:
    var $29 = HEAP32[$incdec_ptr32 >> 2];
    var $tobool6 = ($29 | 0) == 0;
    if ($tobool6) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $incdec_ptr = $incdec_ptr32 + 4 | 0;
    var $incdec_ptr32 = $incdec_ptr;
    var $9 = $29;
    label = 7;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet4geom_simplicial["X"] = 1;
function _qh_printfacet4geom_nonsimplicial($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5249152 >> 2];
    var $visitid = $facet + 68 | 0;
    HEAP32[$visitid >> 2] = $0;
    var $1 = HEAP32[5247172 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 28;
      break;
    }
   case 3:
    var $2 = $facet + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 2048;
    var $tobool1 = ($bf_clear | 0) != 0;
    var $5 = HEAP32[5249088 >> 2];
    var $tobool2 = ($5 | 0) != 0;
    var $or_cond = $tobool1 & $tobool2;
    if ($or_cond) {
      label = 28;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $ridges = $facet + 52 | 0;
    var $6 = HEAP32[$ridges >> 2];
    var $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 28;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool637 = ($7 | 0) == 0;
    if ($tobool637) {
      label = 28;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $8 = $7;
    var $incdec_ptr3639 = $p + 4 | 0;
    var $incdec_ptr36 = $incdec_ptr3639;
    var $incdec_ptr38 = $incdec_ptr36;
    var $9 = $8;
    label = 7;
    break;
   case 7:
    var $9;
    var $incdec_ptr38;
    var $top = $9 + 4 | 0;
    var $10 = HEAP32[$top >> 2];
    var $cmp = ($10 | 0) == ($facet | 0);
    if ($cmp) {
      label = 8;
      break;
    } else {
      var $cond = $10;
      label = 9;
      break;
    }
   case 8:
    var $bottom = $9 + 8 | 0;
    var $11 = HEAP32[$bottom >> 2];
    var $cond = $11;
    label = 9;
    break;
   case 9:
    var $cond;
    var $visitid8 = $cond + 68 | 0;
    var $12 = HEAP32[$visitid8 >> 2];
    var $13 = HEAP32[5249152 >> 2];
    var $cmp9 = ($12 | 0) == ($13 | 0);
    if ($cmp9) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $incdec_ptr = $incdec_ptr38 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr38 >> 2];
    var $tobool6 = ($14 | 0) == 0;
    if ($tobool6) {
      label = 28;
      break;
    } else {
      var $incdec_ptr38 = $incdec_ptr;
      var $9 = $14;
      label = 7;
      break;
    }
   case 11:
    var $15 = HEAP32[5247320 >> 2];
    var $tobool12 = ($15 | 0) == 0;
    if ($tobool12) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $16 = $cond + 76 | 0;
    var $17 = $16;
    var $18 = HEAP32[$17 >> 2];
    var $bf_clear15 = $18 & 524288;
    var $tobool16 = ($bf_clear15 | 0) == 0;
    if ($tobool16) {
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $19 = HEAP32[5247e3 >> 2];
    var $tobool19 = ($19 | 0) == 0;
    if ($tobool19) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $vertices = $9 | 0;
    var $20 = HEAP32[$vertices >> 2];
    _qh_printhyperplaneintersection($facet, $cond, $20);
    label = 10;
    break;
   case 15:
    var $21 = HEAP32[5247004 >> 2];
    var $cmp21 = ($21 | 0) > -1;
    if ($cmp21) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5253896);
    label = 18;
    break;
   case 17:
    var $22 = HEAP32[5249124 >> 2];
    var $inc = $22 + 1 | 0;
    HEAP32[5249124 >> 2] = $inc;
    _qh_fprintf(5253660);
    label = 18;
    break;
   case 18:
    var $vertices29 = $9 | 0;
    var $23 = HEAP32[$vertices29 >> 2];
    var $tobool30 = ($23 | 0) == 0;
    if ($tobool30) {
      label = 26;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $p35 = $23 + 4 | 0;
    var $24 = HEAP32[$p35 >> 2];
    var $tobool3834 = ($24 | 0) == 0;
    if ($tobool3834) {
      label = 26;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $25 = $24;
    var $incdec_ptr373340 = $p35 + 4 | 0;
    var $incdec_ptr3733 = $incdec_ptr373340;
    var $incdec_ptr3735 = $incdec_ptr3733;
    var $26 = $25;
    label = 21;
    break;
   case 21:
    var $26;
    var $incdec_ptr3735;
    var $27 = HEAP32[5243424 >> 2];
    var $inc40 = $27 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc40;
    var $point41 = $26 + 8 | 0;
    var $28 = HEAP32[$point41 >> 2];
    _qh_distplane($28, $facet, $dist);
    var $29 = HEAP32[$point41 >> 2];
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_projectpoint($29, $facet, $30);
    var $31 = HEAP32[5247504 >> 2];
    var $cmp4431 = ($31 | 0) > 0;
    if ($cmp4431) {
      var $k_032 = 0;
      var $32 = $31;
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 22:
    var $32;
    var $k_032;
    var $33 = HEAP32[5247004 >> 2];
    var $cmp46 = ($k_032 | 0) == ($33 | 0);
    if ($cmp46) {
      var $34 = $32;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    _qh_fprintf(5256868);
    var $_pre = HEAP32[5247504 >> 2];
    var $34 = $_pre;
    label = 24;
    break;
   case 24:
    var $34;
    var $inc50 = $k_032 + 1 | 0;
    var $cmp44 = ($inc50 | 0) < ($34 | 0);
    if ($cmp44) {
      var $k_032 = $inc50;
      var $32 = $34;
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_fprintf(5299656);
    var $35 = $call;
    var $36 = HEAP32[5248928 >> 2];
    _qh_memfree($35, $36);
    var $incdec_ptr37 = $incdec_ptr3735 + 4 | 0;
    var $37 = HEAP32[$incdec_ptr3735 >> 2];
    var $tobool38 = ($37 | 0) == 0;
    if ($tobool38) {
      label = 26;
      break;
    } else {
      var $incdec_ptr3735 = $incdec_ptr37;
      var $26 = $37;
      label = 21;
      break;
    }
   case 26:
    var $38 = HEAP32[5247004 >> 2];
    var $cmp53 = ($38 | 0) > -1;
    if ($cmp53) {
      label = 27;
      break;
    } else {
      label = 10;
      break;
    }
   case 27:
    _qh_fprintf(5253420);
    label = 10;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet4geom_nonsimplicial["X"] = 1;
function _qh_printfacet3vertex($facet, $format) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $call = _qh_facet3vertex($facet);
    HEAP32[$vertices >> 2] = $call;
    var $cmp = ($format | 0) == 17;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call1 = _qh_setsize($call);
    _qh_fprintf(5256464);
    label = 4;
    break;
   case 4:
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $call + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool33 = ($0 | 0) == 0;
    if ($tobool33) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $1 = $p;
    var $vertexp_04 = $1;
    label = 7;
    break;
   case 7:
    var $vertexp_04;
    var $incdec_ptr = $vertexp_04 + 4 | 0;
    _qh_fprintf(5256464);
    var $2 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      var $vertexp_04 = $incdec_ptr;
      label = 7;
      break;
    }
   case 8:
    _qh_fprintf(5299656);
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printfacetNvertex_simplicial($facet, $format) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    if (($format | 0) == 25 | ($format | 0) == 17) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $vertices = $facet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $call = _qh_setsize($0);
    _qh_fprintf(5256464);
    label = 4;
    break;
   case 4:
    var $1 = $facet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 4096;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    var $4 = HEAP32[5247504 >> 2];
    var $cmp3 = ($4 | 0) > 2;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $bf_clear5 = $3 & 8192;
    var $tobool6 = ($bf_clear5 | 0) == 0;
    if ($tobool6) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $vertices8 = $facet + 48 | 0;
    var $5 = HEAP32[$vertices8 >> 2];
    var $tobool9 = ($5 | 0) == 0;
    if ($tobool9) {
      label = 20;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p = $5 + 4 | 0;
    var $6 = HEAP32[$p >> 2];
    var $tobool1218 = ($6 | 0) == 0;
    if ($tobool1218) {
      label = 20;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $7 = $p;
    var $vertexp_019 = $7;
    label = 10;
    break;
   case 10:
    var $vertexp_019;
    var $incdec_ptr = $vertexp_019 + 4 | 0;
    _qh_fprintf(5256464);
    var $8 = HEAP32[$incdec_ptr >> 2];
    var $tobool12 = ($8 | 0) == 0;
    if ($tobool12) {
      label = 20;
      break;
    } else {
      var $vertexp_019 = $incdec_ptr;
      label = 10;
      break;
    }
   case 11:
    var $vertices15 = $facet + 48 | 0;
    var $9 = HEAP32[$vertices15 >> 2];
    var $tobool16 = ($9 | 0) == 0;
    if ($tobool16) {
      label = 20;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p21 = $9 + 8 | 0;
    var $10 = HEAP32[$p21 >> 2];
    var $tobool2321 = ($10 | 0) == 0;
    if ($tobool2321) {
      label = 20;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $11 = $p21;
    var $vertexp_122 = $11;
    label = 14;
    break;
   case 14:
    var $vertexp_122;
    _qh_fprintf(5256464);
    var $12 = HEAP32[$vertices15 >> 2];
    var $e28 = $12 + 4 | 0;
    var $13 = $e28;
    var $cmp31 = ($vertexp_122 | 0) == ($13 | 0);
    if ($cmp31) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $add_ptr = $vertexp_122 + 8 | 0;
    var $vertexp_1_be = $add_ptr;
    label = 18;
    break;
   case 16:
    var $p35 = $12 + 8 | 0;
    var $14 = $p35;
    var $cmp36 = ($vertexp_122 | 0) == ($14 | 0);
    if ($cmp36) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $incdec_ptr38 = $vertexp_122 - 4 | 0;
    var $vertexp_1_be = $incdec_ptr38;
    label = 18;
    break;
   case 18:
    var $vertexp_1_be;
    var $15 = HEAP32[$vertexp_1_be >> 2];
    var $tobool23 = ($15 | 0) == 0;
    if ($tobool23) {
      label = 20;
      break;
    } else {
      var $vertexp_122 = $vertexp_1_be;
      label = 14;
      break;
    }
   case 19:
    var $incdec_ptr40 = $vertexp_122 + 4 | 0;
    var $vertexp_1_be = $incdec_ptr40;
    label = 18;
    break;
   case 20:
    _qh_fprintf(5299656);
    return;
  }
}
_qh_printfacetNvertex_simplicial["X"] = 1;
function _qh_printfacetNvertex_nonsimplicial($facet, $format) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 2048;
    var $tobool = ($bf_clear | 0) != 0;
    var $3 = HEAP32[5249088 >> 2];
    var $tobool1 = ($3 | 0) != 0;
    var $or_cond = $tobool & $tobool1;
    if ($or_cond) {
      label = 23;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $ridges = $facet + 52 | 0;
    var $4 = HEAP32[$ridges >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 23;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool524 = ($5 | 0) == 0;
    if ($tobool524) {
      label = 23;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $6 = $5;
    var $incdec_ptr2326 = $p + 4 | 0;
    var $incdec_ptr23 = $incdec_ptr2326;
    var $cmp = ($format | 0) == 25;
    var $incdec_ptr25 = $incdec_ptr23;
    var $7 = $6;
    label = 6;
    break;
   case 6:
    var $7;
    var $incdec_ptr25;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_fprintf(5256464);
    label = 8;
    break;
   case 8:
    _qh_fprintf(5256464);
    var $top = $7 + 4 | 0;
    var $8 = HEAP32[$top >> 2];
    var $cmp8 = ($8 | 0) == ($facet | 0);
    var $vertices = $7 | 0;
    var $9 = HEAP32[$vertices >> 2];
    var $tobool11 = ($9 | 0) != 0;
    if ($cmp8) {
      label = 9;
      break;
    } else {
      label = 13;
      break;
    }
   case 9:
    if ($tobool11) {
      label = 10;
      break;
    } else {
      label = 22;
      break;
    }
   case 10:
    var $p16 = $9 + 4 | 0;
    var $10 = HEAP32[$p16 >> 2];
    var $tobool1921 = ($10 | 0) == 0;
    if ($tobool1921) {
      label = 22;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $11 = $p16;
    var $vertexp_022 = $11;
    label = 12;
    break;
   case 12:
    var $vertexp_022;
    var $incdec_ptr18 = $vertexp_022 + 4 | 0;
    _qh_fprintf(5256464);
    var $12 = HEAP32[$incdec_ptr18 >> 2];
    var $tobool19 = ($12 | 0) == 0;
    if ($tobool19) {
      label = 22;
      break;
    } else {
      var $vertexp_022 = $incdec_ptr18;
      label = 12;
      break;
    }
   case 13:
    if ($tobool11) {
      label = 14;
      break;
    } else {
      label = 22;
      break;
    }
   case 14:
    var $p28 = $9 + 8 | 0;
    var $13 = HEAP32[$p28 >> 2];
    var $tobool3018 = ($13 | 0) == 0;
    if ($tobool3018) {
      label = 22;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $14 = $p28;
    var $vertexp_119 = $14;
    label = 16;
    break;
   case 16:
    var $vertexp_119;
    _qh_fprintf(5256464);
    var $15 = HEAP32[$vertices >> 2];
    var $e35 = $15 + 4 | 0;
    var $16 = $e35;
    var $cmp38 = ($vertexp_119 | 0) == ($16 | 0);
    if ($cmp38) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $add_ptr = $vertexp_119 + 8 | 0;
    var $vertexp_1_be = $add_ptr;
    label = 20;
    break;
   case 18:
    var $p43 = $15 + 8 | 0;
    var $17 = $p43;
    var $cmp44 = ($vertexp_119 | 0) == ($17 | 0);
    if ($cmp44) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $incdec_ptr47 = $vertexp_119 - 4 | 0;
    var $vertexp_1_be = $incdec_ptr47;
    label = 20;
    break;
   case 20:
    var $vertexp_1_be;
    var $18 = HEAP32[$vertexp_1_be >> 2];
    var $tobool30 = ($18 | 0) == 0;
    if ($tobool30) {
      label = 22;
      break;
    } else {
      var $vertexp_119 = $vertexp_1_be;
      label = 16;
      break;
    }
   case 21:
    var $incdec_ptr49 = $vertexp_119 + 4 | 0;
    var $vertexp_1_be = $incdec_ptr49;
    label = 20;
    break;
   case 22:
    _qh_fprintf(5299656);
    var $incdec_ptr = $incdec_ptr25 + 4 | 0;
    var $19 = HEAP32[$incdec_ptr25 >> 2];
    var $tobool5 = ($19 | 0) == 0;
    if ($tobool5) {
      label = 23;
      break;
    } else {
      var $incdec_ptr25 = $incdec_ptr;
      var $7 = $19;
      label = 6;
      break;
    }
   case 23:
    return;
  }
}
_qh_printfacetNvertex_nonsimplicial["X"] = 1;
function _qh_printfacet2math($facet, $format, $notfirst) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $point0 = __stackBase__;
    var $point1 = __stackBase__ + 4;
    var $mindist = __stackBase__ + 8;
    _qh_facet2point($facet, $point0, $point1, $mindist);
    var $tobool = ($notfirst | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5258052);
    label = 4;
    break;
   case 4:
    var $cmp = ($format | 0) == 13;
    var $_ = $cmp ? 5257908 : 5257544;
    _qh_fprintf($_);
    var $0 = HEAP32[$point1 >> 2];
    var $1 = $0;
    var $2 = HEAP32[5248928 >> 2];
    _qh_memfree($1, $2);
    var $3 = HEAP32[$point0 >> 2];
    var $4 = $3;
    var $5 = HEAP32[5248928 >> 2];
    _qh_memfree($4, $5);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printfacet3math($facet, $format, $notfirst) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $points = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $dist = __stackBase__ + 8;
    var $tobool = ($notfirst | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5255840);
    label = 4;
    break;
   case 4:
    var $call = _qh_facet3vertex($facet);
    HEAP32[$vertices >> 2] = $call;
    var $call1 = _qh_setsize($call);
    var $call2 = _qh_settemp($call1);
    HEAP32[$points >> 2] = $call2;
    var $tobool3 = ($call | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $call + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool520 = ($0 | 0) == 0;
    if ($tobool520) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $1 = $0;
    var $2 = $p;
    var $vertexp_021 = $2;
    var $3 = $1;
    label = 7;
    break;
   case 7:
    var $3;
    var $vertexp_021;
    var $incdec_ptr = $vertexp_021 + 4 | 0;
    var $4 = HEAP32[5243424 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    var $point6 = $3 + 8 | 0;
    var $5 = HEAP32[$point6 >> 2];
    _qh_distplane($5, $facet, $dist);
    var $6 = HEAP32[$point6 >> 2];
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call8 = _qh_projectpoint($6, $facet, $7);
    var $8 = $call8;
    _qh_setappend($points, $8);
    var $9 = HEAP32[$incdec_ptr >> 2];
    var $tobool5 = ($9 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      var $vertexp_021 = $incdec_ptr;
      var $3 = $9;
      label = 7;
      break;
    }
   case 8:
    var $cmp = ($format | 0) == 13;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5255524);
    var $endfmt_0 = 5255152;
    var $pointfmt_0 = 5255324;
    label = 11;
    break;
   case 10:
    _qh_fprintf(5254912);
    var $endfmt_0 = 5254320;
    var $pointfmt_0 = 5254504;
    label = 11;
    break;
   case 11:
    var $pointfmt_0;
    var $endfmt_0;
    var $10 = HEAP32[$points >> 2];
    var $tobool12 = ($10 | 0) == 0;
    if ($tobool12) {
      label = 20;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p16 = $10 + 4 | 0;
    var $11 = HEAP32[$p16 >> 2];
    var $tobool1917 = ($11 | 0) == 0;
    if ($tobool1917) {
      label = 20;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $incdec_ptr181622 = $p16 + 4 | 0;
    var $incdec_ptr1816 = $incdec_ptr181622;
    var $firstpoint_018 = 0;
    var $incdec_ptr1819 = $incdec_ptr1816;
    label = 14;
    break;
   case 14:
    var $incdec_ptr1819;
    var $firstpoint_018;
    if ($firstpoint_018) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5255840);
    label = 16;
    break;
   case 16:
    _qh_fprintf($pointfmt_0);
    var $incdec_ptr18 = $incdec_ptr1819 + 4 | 0;
    var $12 = HEAP32[$incdec_ptr1819 >> 2];
    var $tobool19 = ($12 | 0) == 0;
    if ($tobool19) {
      label = 17;
      break;
    } else {
      var $firstpoint_018 = 1;
      var $incdec_ptr1819 = $incdec_ptr18;
      label = 14;
      break;
    }
   case 17:
    var $_pr = HEAP32[$p16 >> 2];
    var $tobool3714 = ($_pr | 0) == 0;
    if ($tobool3714) {
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $13 = $_pr;
    var $14 = $p16;
    var $pointp_115 = $14;
    var $15 = $13;
    label = 19;
    break;
   case 19:
    var $15;
    var $pointp_115;
    var $incdec_ptr36 = $pointp_115 + 4 | 0;
    var $16 = $15;
    var $17 = HEAP32[5248928 >> 2];
    _qh_memfree($16, $17);
    var $18 = HEAP32[$incdec_ptr36 >> 2];
    var $tobool37 = ($18 | 0) == 0;
    if ($tobool37) {
      label = 20;
      break;
    } else {
      var $pointp_115 = $incdec_ptr36;
      var $15 = $18;
      label = 19;
      break;
    }
   case 20:
    _qh_settempfree($points);
    _qh_settempfree($vertices);
    _qh_fprintf($endfmt_0);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet3math["X"] = 1;
function _qh_printpoint($string, $point) {
  var $call = _qh_pointid($point);
  _qh_printpointid($string, HEAP32[5247504 >> 2], $point, $call);
  return;
}
function _qh_printbegin($format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numfacets = __stackBase__;
    var $numsimplicial = __stackBase__ + 4;
    var $numridges = __stackBase__ + 8;
    var $totneighbors = __stackBase__ + 12;
    var $numcoplanars = __stackBase__ + 16;
    var $numtricoplanars = __stackBase__ + 20;
    var $num = __stackBase__ + 24;
    var $vertices = __stackBase__ + 28;
    HEAP32[5249128 >> 2] = 0;
    _qh_countfacets($facetlist, $facets, $printall, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
    if (($format | 0) == 1) {
      label = 3;
      break;
    } else if (($format | 0) == 3) {
      label = 4;
      break;
    } else if (($format | 0) == 4) {
      label = 5;
      break;
    } else if (($format | 0) == 5 | ($format | 0) == 6) {
      label = 8;
      break;
    } else if (($format | 0) == 7) {
      label = 10;
      break;
    } else if (($format | 0) == 8) {
      label = 133;
      break;
    } else if (($format | 0) == 14) {
      label = 134;
      break;
    } else if (($format | 0) == 9 | ($format | 0) == 11 | ($format | 0) == 12) {
      label = 137;
      break;
    } else if (($format | 0) == 15 | ($format | 0) == 13) {
      label = 140;
      break;
    } else if (($format | 0) == 16) {
      label = 149;
      break;
    } else if (($format | 0) == 19) {
      label = 150;
      break;
    } else if (($format | 0) == 10) {
      label = 151;
      break;
    } else if (($format | 0) == 17 | ($format | 0) == 25) {
      label = 152;
      break;
    } else if (($format | 0) == 20) {
      label = 172;
      break;
    } else if (($format | 0) == 21) {
      label = 173;
      break;
    } else if (($format | 0) == 26) {
      label = 177;
      break;
    } else if (($format | 0) == 0) {
      label = 179;
      break;
    } else {
      label = 178;
      break;
    }
   case 3:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 4:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 5:
    var $0 = HEAP32[5249032 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_clearcenters(2);
    label = 7;
    break;
   case 7:
    _qh_fprintf(5276208);
    label = 179;
    break;
   case 8:
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 179;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _qh_printvertexlist($facetlist, $facets, $printall);
    label = 179;
    break;
   case 10:
    var $1 = HEAP32[5247504 >> 2];
    var $cmp8 = ($1 | 0) > 4;
    if ($cmp8) {
      label = 178;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $2 = HEAP32[5247472 >> 2];
    var $tobool11 = ($2 | 0) != 0;
    var $cmp12 = ($1 | 0) > 3;
    var $or_cond = $tobool11 & $cmp12;
    if ($or_cond) {
      label = 178;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $cmp15 = ($1 | 0) == 2;
    if ($cmp15) {
      label = 13;
      break;
    } else {
      var $7 = $1;
      label = 15;
      break;
    }
   case 13:
    var $3 = HEAP32[5247304 >> 2];
    var $4 = HEAP32[5247e3 >> 2];
    var $5 = $4 | $3;
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 19;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5275484);
    var $_pre = HEAP32[5247504 >> 2];
    var $7 = $_pre;
    label = 15;
    break;
   case 15:
    var $7;
    var $cmp21 = ($7 | 0) == 4;
    if ($cmp21) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $8 = HEAP32[5247164 >> 2];
    var $9 = HEAP32[5247180 >> 2];
    var $10 = $9 | $8;
    var $11 = ($10 | 0) == 0;
    if ($11) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $12 = HEAP32[5247152 >> 2];
    var $cmp27 = ($12 | 0) == 4;
    var $13 = HEAP32[5247144 >> 2];
    var $tobool29 = ($13 | 0) != 0;
    var $or_cond3 = $cmp27 & $tobool29;
    if ($or_cond3) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    _qh_fprintf(5274916);
    label = 19;
    break;
   case 19:
    var $14 = HEAP32[5247152 >> 2];
    var $cmp32 = ($14 | 0) == 4;
    var $15 = HEAP32[5247308 >> 2];
    var $tobool34 = ($15 | 0) != 0;
    var $or_cond4 = $cmp32 & $tobool34;
    if ($or_cond4) {
      label = 20;
      break;
    } else {
      var $16 = $14;
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5274128);
    var $_pre1 = HEAP32[5247152 >> 2];
    var $16 = $_pre1;
    label = 21;
    break;
   case 21:
    var $16;
    var $cmp37 = ($16 | 0) == 4;
    var $17 = HEAP32[5247e3 >> 2];
    var $tobool39 = ($17 | 0) != 0;
    var $or_cond5 = $cmp37 & $tobool39;
    var $18 = HEAP32[5247172 >> 2];
    var $tobool41 = ($18 | 0) != 0;
    var $or_cond6 = $or_cond5 & $tobool41;
    if ($or_cond6) {
      label = 22;
      break;
    } else {
      var $19 = $16;
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5273564);
    var $_pre2 = HEAP32[5247152 >> 2];
    var $19 = $_pre2;
    label = 23;
    break;
   case 23:
    var $19;
    if (($19 | 0) == 2) {
      label = 24;
      break;
    } else if (($19 | 0) == 3) {
      label = 25;
      break;
    } else if (($19 | 0) == 4) {
      label = 26;
      break;
    } else {
      label = 34;
      break;
    }
   case 24:
    _qh_fprintf(5273032);
    label = 34;
    break;
   case 25:
    _qh_fprintf(5272480);
    label = 34;
    break;
   case 26:
    var $20 = HEAP32[5249152 >> 2];
    var $inc = $20 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    HEAP32[$num >> 2] = 0;
    var $tobool51 = ($facetlist | 0) == 0;
    if ($tobool51) {
      label = 29;
      break;
    } else {
      var $facet_0165 = $facetlist;
      label = 27;
      break;
    }
   case 27:
    var $facet_0165;
    var $next = $facet_0165 + 44 | 0;
    var $21 = HEAP32[$next >> 2];
    var $tobool54 = ($21 | 0) == 0;
    if ($tobool54) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    _qh_printend4geom(0, $facet_0165, $num, $printall);
    var $22 = HEAP32[$next >> 2];
    var $tobool53 = ($22 | 0) == 0;
    if ($tobool53) {
      label = 29;
      break;
    } else {
      var $facet_0165 = $22;
      label = 27;
      break;
    }
   case 29:
    var $tobool57 = ($facets | 0) == 0;
    if ($tobool57) {
      label = 33;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $p = $facets + 4 | 0;
    var $23 = HEAP32[$p >> 2];
    var $tobool60162 = ($23 | 0) == 0;
    if ($tobool60162) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $24 = $23;
    var $25 = $p;
    var $facetp_0163 = $25;
    var $26 = $24;
    label = 32;
    break;
   case 32:
    var $26;
    var $facetp_0163;
    var $incdec_ptr = $facetp_0163 + 4 | 0;
    _qh_printend4geom(0, $26, $num, $printall);
    var $27 = HEAP32[$incdec_ptr >> 2];
    var $tobool60 = ($27 | 0) == 0;
    if ($tobool60) {
      label = 33;
      break;
    } else {
      var $facetp_0163 = $incdec_ptr;
      var $26 = $27;
      label = 32;
      break;
    }
   case 33:
    var $28 = HEAP32[$num >> 2];
    HEAP32[5249268 >> 2] = $28;
    HEAP32[5249124 >> 2] = 0;
    _qh_fprintf(5271940);
    label = 34;
    break;
   case 34:
    var $29 = HEAP32[5247156 >> 2];
    var $tobool67 = ($29 | 0) == 0;
    if ($tobool67) {
      label = 65;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $30 = HEAP32[5249128 >> 2];
    var $inc69 = $30 + 1 | 0;
    HEAP32[5249128 >> 2] = $inc69;
    var $31 = HEAP32[5247512 >> 2];
    var $32 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($32);
    var $add = $call + $31 | 0;
    HEAP32[$num >> 2] = $add;
    var $33 = HEAP32[5246996 >> 2];
    var $tobool70 = ($33 | 0) != 0;
    var $34 = HEAP32[5246956 >> 2];
    var $tobool72 = ($34 | 0) != 0;
    var $or_cond7 = $tobool70 & $tobool72;
    if ($or_cond7) {
      label = 36;
      break;
    } else {
      var $35 = $add;
      label = 37;
      break;
    }
   case 36:
    var $dec = $add - 1 | 0;
    HEAP32[$num >> 2] = $dec;
    var $35 = $dec;
    label = 37;
    break;
   case 37:
    var $35;
    var $36 = HEAP32[5247152 >> 2];
    var $cmp75 = ($36 | 0) == 4;
    if ($cmp75) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    _qh_fprintf(5271392);
    label = 40;
    break;
   case 39:
    _qh_fprintf(5270536);
    label = 40;
    break;
   case 40:
    var $tobool81160 = ($35 | 0) == 0;
    if ($tobool81160) {
      label = 41;
      break;
    } else {
      var $dec80161_in = $35;
      label = 42;
      break;
    }
   case 41:
    _qh_fprintf(5270128);
    label = 46;
    break;
   case 42:
    var $dec80161_in;
    var $dec80161 = $dec80161_in - 1 | 0;
    var $rem = ($dec80161 | 0) % 20;
    var $cmp83 = ($rem | 0) == 0;
    if ($cmp83) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _qh_fprintf(5299656);
    label = 44;
    break;
   case 44:
    _qh_fprintf(5277044);
    var $tobool81 = ($dec80161 | 0) == 0;
    if ($tobool81) {
      label = 45;
      break;
    } else {
      var $dec80161_in = $dec80161;
      label = 42;
      break;
    }
   case 45:
    _qh_fprintf(5270128);
    var $tobool89157 = ($35 | 0) == 1;
    if ($tobool89157) {
      label = 50;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $dec88156 = $35 - 2 | 0;
    var $dec88158 = $dec88156;
    label = 47;
    break;
   case 47:
    var $dec88158;
    var $rem91 = ($dec88158 | 0) % 20;
    var $cmp92 = ($rem91 | 0) == 0;
    if ($cmp92) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    _qh_fprintf(5299656);
    label = 49;
    break;
   case 49:
    _qh_fprintf(5269528);
    var $dec88 = $dec88158 - 1 | 0;
    var $tobool89 = ($dec88158 | 0) == 0;
    if ($tobool89) {
      label = 50;
      break;
    } else {
      var $dec88158 = $dec88;
      label = 47;
      break;
    }
   case 50:
    _qh_fprintf(5268720);
    var $37 = HEAP32[5247516 >> 2];
    var $38 = HEAP32[5247504 >> 2];
    var $39 = HEAP32[5247512 >> 2];
    var $mul = $39 * $38 & -1;
    var $add_ptr = $37 + ($mul << 3) | 0;
    var $cmp97154 = ($mul | 0) > 0;
    if ($cmp97154) {
      var $point_0155 = $37;
      label = 51;
      break;
    } else {
      label = 57;
      break;
    }
   case 51:
    var $point_0155;
    var $40 = HEAP32[5246996 >> 2];
    var $tobool99 = ($40 | 0) != 0;
    var $41 = HEAP32[5246956 >> 2];
    var $tobool101 = ($41 | 0) != 0;
    var $or_cond8 = $tobool99 & $tobool101;
    if ($or_cond8) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    var $call103 = _qh_pointid($point_0155);
    var $42 = HEAP32[5247512 >> 2];
    var $sub104 = $42 - 1 | 0;
    var $cmp105 = ($call103 | 0) == ($sub104 | 0);
    if ($cmp105) {
      label = 56;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $43 = HEAP32[5247152 >> 2];
    var $cmp107 = ($43 | 0) == 4;
    if ($cmp107) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    _qh_printpoint(0, $point_0155);
    label = 56;
    break;
   case 55:
    _qh_printpoint3($point_0155);
    label = 56;
    break;
   case 56:
    var $44 = HEAP32[5247504 >> 2];
    var $add_ptr113 = $point_0155 + ($44 << 3) | 0;
    var $cmp97 = $add_ptr113 >>> 0 < $add_ptr >>> 0;
    if ($cmp97) {
      var $point_0155 = $add_ptr113;
      label = 51;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    var $45 = HEAP32[5249180 >> 2];
    var $tobool115 = ($45 | 0) == 0;
    if ($tobool115) {
      label = 64;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    var $p119 = $45 + 4 | 0;
    var $46 = HEAP32[$p119 >> 2];
    var $tobool122152 = ($46 | 0) == 0;
    if ($tobool122152) {
      label = 64;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $47 = $46;
    var $incdec_ptr121151173 = $p119 + 4 | 0;
    var $incdec_ptr121151 = $incdec_ptr121151173;
    var $incdec_ptr121153 = $incdec_ptr121151;
    var $48 = $47;
    label = 60;
    break;
   case 60:
    var $48;
    var $incdec_ptr121153;
    var $49 = HEAP32[5247152 >> 2];
    var $cmp124 = ($49 | 0) == 4;
    if ($cmp124) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    _qh_printpoint(0, $48);
    label = 63;
    break;
   case 62:
    _qh_printpoint3($48);
    label = 63;
    break;
   case 63:
    var $incdec_ptr121 = $incdec_ptr121153 + 4 | 0;
    var $50 = HEAP32[$incdec_ptr121153 >> 2];
    var $tobool122 = ($50 | 0) == 0;
    if ($tobool122) {
      label = 64;
      break;
    } else {
      var $incdec_ptr121153 = $incdec_ptr121;
      var $48 = $50;
      label = 60;
      break;
    }
   case 64:
    _qh_fprintf(5267884);
    label = 65;
    break;
   case 65:
    var $51 = HEAP32[5247152 >> 2];
    var $cmp131 = ($51 | 0) != 4;
    var $52 = HEAP32[5247172 >> 2];
    var $tobool133 = ($52 | 0) != 0;
    var $or_cond9 = $cmp131 | $tobool133;
    if ($or_cond9) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    _qh_fprintf(5267768);
    label = 67;
    break;
   case 67:
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul137 = $53 * 2;
    HEAPF64[tempDoublePtr >> 3] = $mul137, HEAP32[5249104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $54 = HEAP32[5247140 >> 2];
    var $tobool138 = ($54 | 0) == 0;
    if ($tobool138) {
      label = 70;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add140 = $55 + $53;
    var $cmp141 = $mul137 < $add140;
    if ($cmp141) {
      label = 69;
      break;
    } else {
      var $58 = $mul137;
      label = 73;
      break;
    }
   case 69:
    HEAPF64[tempDoublePtr >> 3] = $add140, HEAP32[5249104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $58 = $add140;
    label = 73;
    break;
   case 70:
    var $56 = HEAP32[5247136 >> 2];
    var $tobool146 = ($56 | 0) == 0;
    if ($tobool146) {
      var $58 = $mul137;
      label = 73;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247092 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247096 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add148 = $57 + $53;
    var $cmp149 = $mul137 < $add148;
    if ($cmp149) {
      label = 72;
      break;
    } else {
      var $58 = $mul137;
      label = 73;
      break;
    }
   case 72:
    HEAPF64[tempDoublePtr >> 3] = $add148, HEAP32[5249104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $58 = $add148;
    label = 73;
    break;
   case 73:
    var $58;
    HEAPF64[tempDoublePtr >> 3] = $58, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $59 = HEAP32[5247308 >> 2];
    var $60 = HEAP32[5247148 >> 2];
    var $add155 = -$60 | 0;
    var $tobool156 = ($59 | 0) == ($add155 | 0);
    if ($tobool156) {
      var $62 = $58;
      label = 76;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    var $61 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul158 = $61 * .02;
    var $cmp159 = $58 < $mul158;
    if ($cmp159) {
      label = 75;
      break;
    } else {
      var $62 = $58;
      label = 76;
      break;
    }
   case 75:
    HEAPF64[tempDoublePtr >> 3] = $mul158, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $62 = $mul158;
    label = 76;
    break;
   case 76:
    var $62;
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp164 = $63 < 8.988465674311579e+307;
    if ($cmp164) {
      label = 77;
      break;
    } else {
      label = 79;
      break;
    }
   case 77:
    var $sub166 = 1 - $63;
    var $64 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul167 = $sub166 * $64;
    var $cmp168 = $62 < $mul167;
    if ($cmp168) {
      label = 78;
      break;
    } else {
      var $68 = $62;
      label = 82;
      break;
    }
   case 78:
    HEAPF64[tempDoublePtr >> 3] = $mul167, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $68 = $mul167;
    label = 82;
    break;
   case 79:
    var $65 = HEAP32[5247136 >> 2];
    var $tobool176 = ($65 | 0) != 0;
    var $or_cond10 = $tobool138 & $tobool176;
    var $66 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246988 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246992 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp178 = $66 < 8.988465674311579e+307;
    var $or_cond11 = $or_cond10 & $cmp178;
    if ($or_cond11) {
      label = 80;
      break;
    } else {
      var $68 = $62;
      label = 82;
      break;
    }
   case 80:
    var $sub180 = 1 - $66;
    var $67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul181 = $sub180 * $67;
    var $cmp182 = $62 < $mul181;
    if ($cmp182) {
      label = 81;
      break;
    } else {
      var $68 = $62;
      label = 82;
      break;
    }
   case 81:
    HEAPF64[tempDoublePtr >> 3] = $mul181, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $68 = $mul181;
    label = 82;
    break;
   case 82:
    var $68;
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp189 = $68 < $69;
    if ($cmp189) {
      label = 83;
      break;
    } else {
      var $70 = $68;
      label = 84;
      break;
    }
   case 83:
    HEAPF64[tempDoublePtr >> 3] = $69, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $70 = $69;
    label = 84;
    break;
   case 84:
    var $70;
    var $71 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp192 = $71 < 8.988465674311579e+307;
    if ($cmp192) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    var $72 = HEAP32[5247504 >> 2];
    var $conv = $72 | 0;
    var $call194 = Math.sqrt($conv);
    var $mul195 = $71 * $call194;
    var $add196 = $70 + $mul195;
    HEAPF64[tempDoublePtr >> 3] = $add196, HEAP32[5249112 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249116 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 86;
    break;
   case 86:
    var $73 = HEAP32[5247152 >> 2];
    var $cmp198 = ($73 | 0) == 4;
    if ($cmp198) {
      label = 132;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    var $74 = $59 | $60;
    var $75 = HEAP32[5247144 >> 2];
    var $76 = $74 | $75;
    var $77 = ($76 | 0) == 0;
    if ($77) {
      label = 132;
      break;
    } else {
      label = 88;
      break;
    }
   case 88:
    var $call207 = _qh_facetvertices($facetlist, $facets, $printall);
    HEAP32[$vertices >> 2] = $call207;
    var $78 = HEAP32[5247308 >> 2];
    var $tobool208 = ($78 | 0) != 0;
    var $79 = HEAP32[5247152 >> 2];
    var $cmp210 = ($79 | 0) < 4;
    var $or_cond14 = $tobool208 & $cmp210;
    if ($or_cond14) {
      label = 89;
      break;
    } else {
      label = 90;
      break;
    }
   case 89:
    _qh_printspheres($call207);
    label = 90;
    break;
   case 90:
    var $80 = HEAP32[5247148 >> 2];
    var $81 = HEAP32[5247144 >> 2];
    var $82 = $81 | $80;
    var $83 = ($82 | 0) == 0;
    if ($83) {
      label = 131;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    HEAP32[5249216 >> 2] = 1;
    var $tobool218 = ($80 | 0) == 0;
    var $84 = HEAP32[5247308 >> 2];
    var $tobool220 = ($84 | 0) != 0;
    var $or_cond16 = $tobool218 | $tobool220;
    var $tobool222 = ($call207 | 0) == 0;
    var $or_cond12 = $or_cond16 | $tobool222;
    if ($or_cond12) {
      label = 95;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    var $p226 = $call207 + 4 | 0;
    var $85 = HEAP32[$p226 >> 2];
    var $tobool229149 = ($85 | 0) == 0;
    if ($tobool229149) {
      label = 95;
      break;
    } else {
      label = 93;
      break;
    }
   case 93:
    var $86 = $85;
    var $87 = $p226;
    var $vertexp_0150 = $87;
    var $88 = $86;
    label = 94;
    break;
   case 94:
    var $88;
    var $vertexp_0150;
    var $incdec_ptr228 = $vertexp_0150 + 4 | 0;
    var $point231 = $88 + 8 | 0;
    var $89 = HEAP32[$point231 >> 2];
    var $90 = HEAP32[5248924 >> 2];
    var $91 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printpointvect2($89, 0, $90, $91);
    var $92 = HEAP32[$incdec_ptr228 >> 2];
    var $tobool229 = ($92 | 0) == 0;
    if ($tobool229) {
      label = 95;
      break;
    } else {
      var $vertexp_0150 = $incdec_ptr228;
      var $88 = $92;
      label = 94;
      break;
    }
   case 95:
    var $tobool235 = ($facetlist | 0) == 0;
    if ($tobool235) {
      label = 113;
      break;
    } else {
      label = 96;
      break;
    }
   case 96:
    var $tobool244 = ($printall | 0) == 0;
    var $facet_1148 = $facetlist;
    label = 97;
    break;
   case 97:
    var $facet_1148;
    var $next240 = $facet_1148 + 44 | 0;
    var $93 = HEAP32[$next240 >> 2];
    var $tobool241 = ($93 | 0) == 0;
    if ($tobool241) {
      label = 113;
      break;
    } else {
      label = 98;
      break;
    }
   case 98:
    if ($tobool244) {
      label = 99;
      break;
    } else {
      label = 100;
      break;
    }
   case 99:
    var $call246 = _qh_skipfacet($facet_1148);
    var $tobool247 = ($call246 | 0) == 0;
    if ($tobool247) {
      label = 100;
      break;
    } else {
      label = 112;
      break;
    }
   case 100:
    var $normal = $facet_1148 + 24 | 0;
    var $94 = HEAP32[$normal >> 2];
    var $tobool250 = ($94 | 0) == 0;
    if ($tobool250) {
      label = 112;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    var $95 = HEAP32[5247144 >> 2];
    var $tobool253 = ($95 | 0) != 0;
    var $96 = HEAP32[5247152 >> 2];
    var $cmp255 = ($96 | 0) < 4;
    var $or_cond17 = $tobool253 & $cmp255;
    if ($or_cond17) {
      label = 102;
      break;
    } else {
      label = 103;
      break;
    }
   case 102:
    var $97 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printcentrum($facet_1148, $97);
    label = 103;
    break;
   case 103:
    var $98 = HEAP32[5247148 >> 2];
    var $tobool259 = ($98 | 0) == 0;
    if ($tobool259) {
      label = 112;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    var $coplanarset = $facet_1148 + 64 | 0;
    var $99 = HEAP32[$coplanarset >> 2];
    var $tobool262 = ($99 | 0) == 0;
    if ($tobool262) {
      label = 108;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    var $p267 = $99 + 4 | 0;
    var $100 = HEAP32[$p267 >> 2];
    var $tobool270143 = ($100 | 0) == 0;
    if ($tobool270143) {
      label = 108;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    var $101 = $100;
    var $102 = $p267;
    var $pointp_1144 = $102;
    var $103 = $101;
    label = 107;
    break;
   case 107:
    var $103;
    var $pointp_1144;
    var $incdec_ptr269 = $pointp_1144 + 4 | 0;
    var $104 = HEAP32[$normal >> 2];
    var $105 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printpointvect2($103, $104, 0, $105);
    var $106 = HEAP32[$incdec_ptr269 >> 2];
    var $tobool270 = ($106 | 0) == 0;
    if ($tobool270) {
      label = 108;
      break;
    } else {
      var $pointp_1144 = $incdec_ptr269;
      var $103 = $106;
      label = 107;
      break;
    }
   case 108:
    var $outsideset = $facet_1148 + 60 | 0;
    var $107 = HEAP32[$outsideset >> 2];
    var $tobool275 = ($107 | 0) == 0;
    if ($tobool275) {
      label = 112;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    var $p280 = $107 + 4 | 0;
    var $108 = HEAP32[$p280 >> 2];
    var $tobool283145 = ($108 | 0) == 0;
    if ($tobool283145) {
      label = 112;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    var $109 = $108;
    var $110 = $p280;
    var $pointp_2146 = $110;
    var $111 = $109;
    label = 111;
    break;
   case 111:
    var $111;
    var $pointp_2146;
    var $incdec_ptr282 = $pointp_2146 + 4 | 0;
    var $112 = HEAP32[$normal >> 2];
    var $113 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printpointvect2($111, $112, 0, $113);
    var $114 = HEAP32[$incdec_ptr282 >> 2];
    var $tobool283 = ($114 | 0) == 0;
    if ($tobool283) {
      label = 112;
      break;
    } else {
      var $pointp_2146 = $incdec_ptr282;
      var $111 = $114;
      label = 111;
      break;
    }
   case 112:
    var $115 = HEAP32[$next240 >> 2];
    var $tobool238 = ($115 | 0) == 0;
    if ($tobool238) {
      label = 113;
      break;
    } else {
      var $facet_1148 = $115;
      label = 97;
      break;
    }
   case 113:
    var $tobool292 = ($facets | 0) == 0;
    if ($tobool292) {
      label = 131;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    var $p296 = $facets + 4 | 0;
    var $116 = HEAP32[$p296 >> 2];
    var $tobool299141 = ($116 | 0) == 0;
    if ($tobool299141) {
      label = 131;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    var $117 = $116;
    var $incdec_ptr298140174 = $p296 + 4 | 0;
    var $incdec_ptr298140 = $incdec_ptr298140174;
    var $tobool301 = ($printall | 0) == 0;
    var $incdec_ptr298142 = $incdec_ptr298140;
    var $118 = $117;
    label = 116;
    break;
   case 116:
    var $118;
    var $incdec_ptr298142;
    if ($tobool301) {
      label = 117;
      break;
    } else {
      label = 119;
      break;
    }
   case 117:
    var $call303 = _qh_skipfacet($118);
    var $tobool304 = ($call303 | 0) == 0;
    if ($tobool304) {
      label = 119;
      break;
    } else {
      label = 118;
      break;
    }
   case 118:
    var $incdec_ptr298 = $incdec_ptr298142 + 4 | 0;
    var $119 = HEAP32[$incdec_ptr298142 >> 2];
    var $tobool299 = ($119 | 0) == 0;
    if ($tobool299) {
      label = 131;
      break;
    } else {
      var $incdec_ptr298142 = $incdec_ptr298;
      var $118 = $119;
      label = 116;
      break;
    }
   case 119:
    var $normal307 = $118 + 24 | 0;
    var $120 = HEAP32[$normal307 >> 2];
    var $tobool308 = ($120 | 0) == 0;
    if ($tobool308) {
      label = 118;
      break;
    } else {
      label = 120;
      break;
    }
   case 120:
    var $121 = HEAP32[5247144 >> 2];
    var $tobool311 = ($121 | 0) != 0;
    var $122 = HEAP32[5247152 >> 2];
    var $cmp313 = ($122 | 0) < 4;
    var $or_cond18 = $tobool311 & $cmp313;
    if ($or_cond18) {
      label = 121;
      break;
    } else {
      label = 122;
      break;
    }
   case 121:
    var $123 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printcentrum($118, $123);
    label = 122;
    break;
   case 122:
    var $124 = HEAP32[5247148 >> 2];
    var $tobool317 = ($124 | 0) == 0;
    if ($tobool317) {
      label = 118;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    var $coplanarset320 = $118 + 64 | 0;
    var $125 = HEAP32[$coplanarset320 >> 2];
    var $tobool321 = ($125 | 0) == 0;
    if ($tobool321) {
      label = 127;
      break;
    } else {
      label = 124;
      break;
    }
   case 124:
    var $p326 = $125 + 4 | 0;
    var $126 = HEAP32[$p326 >> 2];
    var $tobool329136 = ($126 | 0) == 0;
    if ($tobool329136) {
      label = 127;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    var $127 = $126;
    var $128 = $p326;
    var $pointp_3137 = $128;
    var $129 = $127;
    label = 126;
    break;
   case 126:
    var $129;
    var $pointp_3137;
    var $incdec_ptr328 = $pointp_3137 + 4 | 0;
    var $130 = HEAP32[$normal307 >> 2];
    var $131 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printpointvect2($129, $130, 0, $131);
    var $132 = HEAP32[$incdec_ptr328 >> 2];
    var $tobool329 = ($132 | 0) == 0;
    if ($tobool329) {
      label = 127;
      break;
    } else {
      var $pointp_3137 = $incdec_ptr328;
      var $129 = $132;
      label = 126;
      break;
    }
   case 127:
    var $outsideset334 = $118 + 60 | 0;
    var $133 = HEAP32[$outsideset334 >> 2];
    var $tobool335 = ($133 | 0) == 0;
    if ($tobool335) {
      label = 118;
      break;
    } else {
      label = 128;
      break;
    }
   case 128:
    var $p340 = $133 + 4 | 0;
    var $134 = HEAP32[$p340 >> 2];
    var $tobool343138 = ($134 | 0) == 0;
    if ($tobool343138) {
      label = 118;
      break;
    } else {
      label = 129;
      break;
    }
   case 129:
    var $135 = $134;
    var $136 = $p340;
    var $pointp_4139 = $136;
    var $137 = $135;
    label = 130;
    break;
   case 130:
    var $137;
    var $pointp_4139;
    var $incdec_ptr342 = $pointp_4139 + 4 | 0;
    var $138 = HEAP32[$normal307 >> 2];
    var $139 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249112 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249116 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_printpointvect2($137, $138, 0, $139);
    var $140 = HEAP32[$incdec_ptr342 >> 2];
    var $tobool343 = ($140 | 0) == 0;
    if ($tobool343) {
      label = 118;
      break;
    } else {
      var $pointp_4139 = $incdec_ptr342;
      var $137 = $140;
      label = 130;
      break;
    }
   case 131:
    _qh_settempfree($vertices);
    label = 132;
    break;
   case 132:
    var $141 = HEAP32[5249152 >> 2];
    var $inc352 = $141 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc352;
    label = 179;
    break;
   case 133:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 134:
    var $142 = HEAP32[5247472 >> 2];
    var $tobool355 = ($142 | 0) != 0;
    var $143 = HEAP32[5247184 >> 2];
    var $tobool357 = ($143 | 0) != 0;
    var $or_cond19 = $tobool355 & $tobool357;
    if ($or_cond19) {
      label = 135;
      break;
    } else {
      label = 136;
      break;
    }
   case 135:
    _qh_fprintf(5267560);
    label = 136;
    break;
   case 136:
    var $144 = HEAP32[5249016 >> 2];
    var $bf_clear = $144 & 16777215;
    HEAP32[5249124 >> 2] = $bf_clear;
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 137:
    var $145 = HEAP32[5246972 >> 2];
    var $tobool367 = ($145 | 0) == 0;
    if ($tobool367) {
      label = 139;
      break;
    } else {
      label = 138;
      break;
    }
   case 138:
    _qh_fprintf(5267380);
    label = 179;
    break;
   case 139:
    _qh_fprintf(5276208);
    label = 179;
    break;
   case 140:
    var $146 = HEAP32[5247504 >> 2];
    var $cmp374 = ($146 | 0) > 3;
    if ($cmp374) {
      label = 178;
      break;
    } else {
      label = 141;
      break;
    }
   case 141:
    var $147 = HEAP32[5247472 >> 2];
    var $tobool378 = ($147 | 0) == 0;
    if ($tobool378) {
      label = 143;
      break;
    } else {
      label = 142;
      break;
    }
   case 142:
    _qh_fprintf(5267080);
    label = 143;
    break;
   case 143:
    var $cmp381 = ($format | 0) == 13;
    if ($cmp381) {
      label = 144;
      break;
    } else {
      label = 147;
      break;
    }
   case 144:
    var $148 = HEAP32[5247504 >> 2];
    var $cmp384 = ($148 | 0) == 2;
    if ($cmp384) {
      label = 145;
      break;
    } else {
      label = 146;
      break;
    }
   case 145:
    _qh_fprintf(5266724);
    label = 148;
    break;
   case 146:
    _qh_fprintf(5266376);
    label = 148;
    break;
   case 147:
    _qh_fprintf(5266e3);
    label = 148;
    break;
   case 148:
    HEAP32[5249124 >> 2] = 0;
    label = 179;
    break;
   case 149:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 150:
    _qh_fprintf(5276208);
    label = 179;
    break;
   case 151:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 152:
    var $149 = HEAP32[5247472 >> 2];
    var $tobool395 = ($149 | 0) == 0;
    if ($tobool395) {
      label = 153;
      break;
    } else {
      label = 178;
      break;
    }
   case 153:
    var $150 = HEAP32[5247504 >> 2];
    HEAP32[$num >> 2] = $150;
    var $cmp398 = ($format | 0) == 17;
    var $cmp401 = ($150 | 0) == 2;
    var $or_cond20 = $cmp398 | $cmp401;
    var $151 = HEAP32[5247512 >> 2];
    var $152 = HEAP32[5249180 >> 2];
    var $call404 = _qh_setsize($152);
    if ($or_cond20) {
      label = 154;
      break;
    } else {
      label = 155;
      break;
    }
   case 154:
    _qh_fprintf(5265536);
    var $155 = $150;
    label = 158;
    break;
   case 155:
    var $add405 = $call404 + $151 | 0;
    HEAP32[5249124 >> 2] = $add405;
    var $153 = HEAP32[5246996 >> 2];
    var $tobool409 = ($153 | 0) == 0;
    if ($tobool409) {
      var $154 = $150;
      label = 157;
      break;
    } else {
      label = 156;
      break;
    }
   case 156:
    var $dec411 = $150 - 1 | 0;
    HEAP32[$num >> 2] = $dec411;
    var $154 = $dec411;
    label = 157;
    break;
   case 157:
    var $154;
    _qh_fprintf(5265536);
    var $155 = $154;
    label = 158;
    break;
   case 158:
    var $155;
    var $156 = HEAP32[5247516 >> 2];
    var $157 = HEAP32[5247504 >> 2];
    var $158 = HEAP32[5247512 >> 2];
    var $mul418 = $158 * $157 & -1;
    var $add_ptr419 = $156 + ($mul418 << 3) | 0;
    var $cmp421171 = ($mul418 | 0) > 0;
    if ($cmp421171) {
      var $point_1172 = $156;
      label = 159;
      break;
    } else {
      var $160 = $157;
      label = 160;
      break;
    }
   case 159:
    var $point_1172;
    _qh_printpointid(0, $155, $point_1172, -1);
    var $159 = HEAP32[5247504 >> 2];
    var $add_ptr425 = $point_1172 + ($159 << 3) | 0;
    var $cmp421 = $add_ptr425 >>> 0 < $add_ptr419 >>> 0;
    if ($cmp421) {
      var $point_1172 = $add_ptr425;
      label = 159;
      break;
    } else {
      var $160 = $159;
      label = 160;
      break;
    }
   case 160:
    var $160;
    var $161 = HEAP32[5249180 >> 2];
    var $tobool427 = ($161 | 0) == 0;
    if ($tobool427) {
      var $167 = $160;
      label = 165;
      break;
    } else {
      label = 161;
      break;
    }
   case 161:
    var $p431 = $161 + 4 | 0;
    var $162 = HEAP32[$p431 >> 2];
    var $tobool434169 = ($162 | 0) == 0;
    if ($tobool434169) {
      var $167 = $160;
      label = 165;
      break;
    } else {
      label = 162;
      break;
    }
   case 162:
    var $163 = $162;
    var $164 = $p431;
    var $pointp_5170 = $164;
    var $165 = $163;
    label = 163;
    break;
   case 163:
    var $165;
    var $pointp_5170;
    var $incdec_ptr433 = $pointp_5170 + 4 | 0;
    _qh_printpointid(0, $155, $165, -1);
    var $166 = HEAP32[$incdec_ptr433 >> 2];
    var $tobool434 = ($166 | 0) == 0;
    if ($tobool434) {
      label = 164;
      break;
    } else {
      var $pointp_5170 = $incdec_ptr433;
      var $165 = $166;
      label = 163;
      break;
    }
   case 164:
    var $_pre3 = HEAP32[5247504 >> 2];
    var $167 = $_pre3;
    label = 165;
    break;
   case 165:
    var $167;
    var $cmp438 = ($format | 0) == 25;
    var $cmp441 = ($167 | 0) > 2;
    var $or_cond21 = $cmp438 & $cmp441;
    if ($or_cond21) {
      label = 166;
      break;
    } else {
      label = 179;
      break;
    }
   case 166:
    var $facet_2166 = HEAP32[5248940 >> 2];
    var $tobool445167 = ($facet_2166 | 0) == 0;
    if ($tobool445167) {
      label = 179;
      break;
    } else {
      var $facet_2168 = $facet_2166;
      label = 167;
      break;
    }
   case 167:
    var $facet_2168;
    var $next447 = $facet_2168 + 44 | 0;
    var $168 = HEAP32[$next447 >> 2];
    var $tobool448 = ($168 | 0) == 0;
    if ($tobool448) {
      label = 179;
      break;
    } else {
      label = 168;
      break;
    }
   case 168:
    var $169 = $facet_2168 + 76 | 0;
    var $170 = $169;
    var $171 = HEAP32[$170 >> 2];
    var $bf_clear451 = $171 & 8192;
    var $tobool452 = ($bf_clear451 | 0) == 0;
    if ($tobool452) {
      label = 169;
      break;
    } else {
      var $facet_2168 = $168;
      label = 167;
      break;
    }
   case 169:
    var $visitid = $facet_2168 + 68 | 0;
    var $172 = HEAP32[$visitid >> 2];
    var $tobool454 = ($172 | 0) == 0;
    if ($tobool454) {
      var $facet_2 = $168;
      label = 170;
      break;
    } else {
      label = 171;
      break;
    }
   case 170:
    var $facet_2;
    var $tobool445 = ($facet_2 | 0) == 0;
    if ($tobool445) {
      label = 179;
      break;
    } else {
      var $facet_2168 = $facet_2;
      label = 167;
      break;
    }
   case 171:
    _qh_printcenter(25, 0, $facet_2168);
    var $facet_2_pre = HEAP32[$next447 >> 2];
    var $facet_2 = $facet_2_pre;
    label = 170;
    break;
   case 172:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 173:
    var $173 = HEAP32[5247472 >> 2];
    var $tobool463 = ($173 | 0) == 0;
    if ($tobool463) {
      label = 178;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    var $174 = HEAP32[5246972 >> 2];
    var $tobool466 = ($174 | 0) == 0;
    if ($tobool466) {
      label = 176;
      break;
    } else {
      label = 175;
      break;
    }
   case 175:
    _qh_fprintf(5265176);
    label = 179;
    break;
   case 176:
    _qh_fprintf(5276208);
    label = 179;
    break;
   case 177:
    _qh_fprintf(5280304);
    label = 179;
    break;
   case 178:
    _qh_fprintf(5264732);
    _qh_errexit(5, 0, 0);
    label = 179;
    break;
   case 179:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printbegin["X"] = 1;
function _qh_printvertexlist($facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $call = _qh_facetvertices($facetlist, $facets, $printall);
    HEAP32[$vertices >> 2] = $call;
    _qh_fprintf(5290424);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool12 = ($0 | 0) == 0;
    if ($tobool12) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $0;
    var $2 = $p;
    var $vertexp_03 = $2;
    var $3 = $1;
    label = 5;
    break;
   case 5:
    var $3;
    var $vertexp_03;
    var $incdec_ptr = $vertexp_03 + 4 | 0;
    _qh_printvertex($3);
    var $4 = HEAP32[$incdec_ptr >> 2];
    var $tobool1 = ($4 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      var $vertexp_03 = $incdec_ptr;
      var $3 = $4;
      label = 5;
      break;
    }
   case 6:
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printend4geom($fp, $facet, $nump, $printall) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$nump >> 2];
    var $tobool = ($printall | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _qh_skipfacet($facet);
    var $1 = HEAP32[5247172 >> 2];
    var $2 = $1 | $call;
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 5;
      break;
    } else {
      label = 27;
      break;
    }
   case 4:
    var $_old = HEAP32[5247172 >> 2];
    var $tobool2_old = ($_old | 0) == 0;
    if ($tobool2_old) {
      label = 5;
      break;
    } else {
      label = 27;
      break;
    }
   case 5:
    var $4 = $facet + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 2048;
    var $tobool3 = ($bf_clear | 0) != 0;
    var $7 = HEAP32[5249088 >> 2];
    var $tobool5 = ($7 | 0) != 0;
    var $or_cond = $tobool3 & $tobool5;
    if ($or_cond) {
      label = 27;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $normal = $facet + 24 | 0;
    var $8 = HEAP32[$normal >> 2];
    var $tobool8 = ($8 | 0) == 0;
    if ($tobool8) {
      label = 27;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $tobool11 = ($fp | 0) != 0;
    var $9 = HEAP32[5249152 >> 2];
    var $visitid = $facet + 68 | 0;
    HEAP32[$visitid >> 2] = $9;
    var $bf_clear27 = $6 & 8192;
    var $tobool28 = ($bf_clear27 | 0) == 0;
    if ($tobool28) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $neighbors = $facet + 56 | 0;
    var $10 = HEAP32[$neighbors >> 2];
    var $tobool30 = ($10 | 0) == 0;
    if ($tobool30) {
      var $num_2 = $0;
      label = 26;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p = $10 + 4 | 0;
    var $11 = $p;
    var $neighborp_0_ph = $11;
    var $num_0_ph = $0;
    label = 10;
    break;
   case 10:
    var $num_0_ph;
    var $neighborp_0_ph;
    var $12 = HEAP32[5249152 >> 2];
    var $neighborp_0 = $neighborp_0_ph;
    label = 11;
    break;
   case 11:
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $13 = HEAP32[$neighborp_0 >> 2];
    var $tobool35 = ($13 | 0) == 0;
    if ($tobool35) {
      var $num_2 = $num_0_ph;
      label = 26;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $visitid37 = $13 + 68 | 0;
    var $14 = HEAP32[$visitid37 >> 2];
    var $cmp38 = ($14 | 0) == ($12 | 0);
    if ($cmp38) {
      var $neighborp_0 = $incdec_ptr;
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    if ($tobool11) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5259772);
    label = 15;
    break;
   case 15:
    var $inc51 = $num_0_ph + 1 | 0;
    var $neighborp_0_ph = $incdec_ptr;
    var $num_0_ph = $inc51;
    label = 10;
    break;
   case 16:
    var $ridges = $facet + 52 | 0;
    var $15 = HEAP32[$ridges >> 2];
    var $tobool55 = ($15 | 0) == 0;
    if ($tobool55) {
      var $num_2 = $0;
      label = 26;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p60 = $15 + 4 | 0;
    var $16 = $p60;
    var $ridgep_0_ph = $16;
    var $num_1_ph = $0;
    label = 18;
    break;
   case 18:
    var $num_1_ph;
    var $ridgep_0_ph;
    var $17 = HEAP32[5249152 >> 2];
    var $ridgep_0 = $ridgep_0_ph;
    label = 19;
    break;
   case 19:
    var $ridgep_0;
    var $incdec_ptr62 = $ridgep_0 + 4 | 0;
    var $18 = HEAP32[$ridgep_0 >> 2];
    var $tobool63 = ($18 | 0) == 0;
    if ($tobool63) {
      var $num_2 = $num_1_ph;
      label = 26;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $top = $18 + 4 | 0;
    var $19 = HEAP32[$top >> 2];
    var $cmp65 = ($19 | 0) == ($facet | 0);
    if ($cmp65) {
      label = 21;
      break;
    } else {
      var $cond = $19;
      label = 22;
      break;
    }
   case 21:
    var $bottom = $18 + 8 | 0;
    var $20 = HEAP32[$bottom >> 2];
    var $cond = $20;
    label = 22;
    break;
   case 22:
    var $cond;
    var $visitid67 = $cond + 68 | 0;
    var $21 = HEAP32[$visitid67 >> 2];
    var $cmp68 = ($21 | 0) == ($17 | 0);
    if ($cmp68) {
      var $ridgep_0 = $incdec_ptr62;
      label = 19;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    if ($tobool11) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5259484);
    label = 25;
    break;
   case 25:
    var $inc85 = $num_1_ph + 1 | 0;
    var $ridgep_0_ph = $incdec_ptr62;
    var $num_1_ph = $inc85;
    label = 18;
    break;
   case 26:
    var $num_2;
    HEAP32[$nump >> 2] = $num_2;
    label = 27;
    break;
   case 27:
    return;
  }
}
_qh_printend4geom["X"] = 1;
function _qh_printpoint3($point) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  _qh_projectdim3($point, __stackBase__ | 0);
  _qh_fprintf(5256868);
  _qh_fprintf(5256868);
  _qh_fprintf(5256868);
  _qh_fprintf(5290764);
  STACKTOP = __stackBase__;
  return;
}
function _qh_printspheres($vertices) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249128 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5249128 >> 2] = $inc;
    _qh_fprintf(5288944);
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool19 = ($1 | 0) == 0;
    if ($tobool19) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = $1;
    var $3 = $p;
    var $vertexp_010 = $3;
    var $4 = $2;
    label = 5;
    break;
   case 5:
    var $4;
    var $vertexp_010;
    var $incdec_ptr = $vertexp_010 + 4 | 0;
    _qh_fprintf(5288852);
    var $point = $4 + 8 | 0;
    var $5 = HEAP32[$point >> 2];
    _qh_printpoint3($5);
    _qh_fprintf(5288836);
    var $6 = HEAP32[$incdec_ptr >> 2];
    var $tobool1 = ($6 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      var $vertexp_010 = $incdec_ptr;
      var $4 = $6;
      label = 5;
      break;
    }
   case 6:
    _qh_fprintf(5288680);
    return;
  }
}
function _qh_printpointvect2($point, $normal, $center, $radius) {
  _qh_printpointvect($point, $normal, $center, $radius);
  _qh_printpointvect($point, $normal, $center, -$radius);
  return;
}
function _qh_printcentrum($facet, $radius) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $xaxis = __stackBase__;
    var $yaxis = __stackBase__ + 32;
    var $normal = __stackBase__ + 64;
    var $dist = __stackBase__ + 96;
    var $0 = HEAP32[5249032 >> 2];
    var $cmp = ($0 | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $center = $facet + 36 | 0;
    var $1 = HEAP32[$center >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $centrum_0 = $1;
      var $tempcentrum_0 = 0;
      label = 6;
      break;
    }
   case 4:
    var $call = _qh_getcentrum($facet);
    HEAP32[$center >> 2] = $call;
    var $centrum_0 = $call;
    var $tempcentrum_0 = 0;
    label = 6;
    break;
   case 5:
    var $call4 = _qh_getcentrum($facet);
    var $centrum_0 = $call4;
    var $tempcentrum_0 = 1;
    label = 6;
    break;
   case 6:
    var $tempcentrum_0;
    var $centrum_0;
    _qh_fprintf(5263944);
    var $2 = HEAP32[5249216 >> 2];
    var $tobool6 = ($2 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    HEAP32[5249216 >> 2] = 0;
    _qh_fprintf(5263544);
    label = 9;
    break;
   case 8:
    _qh_fprintf(5263264);
    label = 9;
    break;
   case 9:
    var $vertices = $facet + 48 | 0;
    var $3 = HEAP32[$vertices >> 2];
    var $p = $3 + 4 | 0;
    var $4 = HEAP32[$p >> 2];
    var $point = $4 + 8 | 0;
    var $5 = $point;
    var $6 = HEAP32[$5 >> 2];
    _qh_distplane($6, $facet, $dist);
    var $7 = HEAP32[$5 >> 2];
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call12 = _qh_projectpoint($7, $facet, $8);
    var $9 = HEAP32[5247504 >> 2];
    var $tobool1330 = ($9 | 0) == 0;
    var $normal45_pre = $facet + 24 | 0;
    if ($tobool1330) {
      var $normal45_pre_phi = $normal45_pre;
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre = HEAP32[$normal45_pre >> 2];
    var $dec31_in = $9;
    label = 11;
    break;
   case 11:
    var $dec31_in;
    var $dec31 = $dec31_in - 1 | 0;
    var $arrayidx14 = $call12 + ($dec31 << 3) | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx14 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx14 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx15 = $centrum_0 + ($dec31 << 3) | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx15 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx15 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $10 - $11;
    var $arrayidx16 = $xaxis + ($dec31 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$arrayidx16 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx18 = $_pre + ($dec31 << 3) | 0;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx19 = $normal + ($dec31 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $12, HEAP32[$arrayidx19 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool13 = ($dec31 | 0) == 0;
    if ($tobool13) {
      label = 12;
      break;
    } else {
      var $dec31_in = $dec31;
      label = 11;
      break;
    }
   case 12:
    if (($9 | 0) == 2) {
      label = 13;
      break;
    } else if (($9 | 0) == 4) {
      label = 14;
      break;
    } else {
      var $normal45_pre_phi = $normal45_pre;
      label = 15;
      break;
    }
   case 13:
    var $arrayidx22 = $xaxis + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx22 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx23 = $normal + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx23 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $normal45_pre_phi = $normal45_pre;
    label = 15;
    break;
   case 14:
    var $arraydecay = $xaxis | 0;
    _qh_projectdim3($arraydecay, $arraydecay);
    var $arraydecay28 = $normal | 0;
    _qh_projectdim3($arraydecay28, $arraydecay28);
    var $13 = HEAP32[5247152 >> 2];
    _qh_normalize2($arraydecay28, $13, 1);
    var $normal45_pre_phi = $normal45_pre;
    label = 15;
    break;
   case 15:
    var $normal45_pre_phi;
    var $arraydecay33 = $xaxis | 0;
    var $arraydecay34 = $normal | 0;
    var $arraydecay35 = $yaxis | 0;
    _qh_crossproduct($arraydecay33, $arraydecay34, $arraydecay35);
    _qh_fprintf(5262848);
    _qh_fprintf(5262848);
    _qh_fprintf(5262848);
    _qh_printpoint3($centrum_0);
    _qh_fprintf(5262188);
    var $14 = $call12;
    var $15 = HEAP32[5248928 >> 2];
    _qh_memfree($14, $15);
    var $16 = HEAP32[$normal45_pre_phi >> 2];
    _qh_printpointvect($centrum_0, $16, 0, $radius);
    var $tobool47 = ($tempcentrum_0 | 0) == 0;
    if ($tobool47) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $17 = $centrum_0;
    var $18 = HEAP32[5248928 >> 2];
    _qh_memfree($17, $18);
    label = 17;
    break;
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printcentrum["X"] = 1;
function _qh_printpointid($string, $dim, $point, $id) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($point | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool1 = ($string | 0) != 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    _qh_fprintf(5290424);
    var $cmp = ($id | 0) == -1;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5290344);
    label = 6;
    break;
   case 6:
    var $tobool69 = ($dim | 0) == 0;
    if ($tobool69) {
      label = 11;
      break;
    } else {
      var $dec11_in = $dim;
      label = 7;
      break;
    }
   case 7:
    var $dec11_in;
    var $dec11 = $dec11_in - 1 | 0;
    if ($tobool1) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5290292);
    label = 10;
    break;
   case 9:
    _qh_fprintf(5290352);
    label = 10;
    break;
   case 10:
    var $tobool6 = ($dec11 | 0) == 0;
    if ($tobool6) {
      label = 11;
      break;
    } else {
      var $dec11_in = $dec11;
      label = 7;
      break;
    }
   case 11:
    _qh_fprintf(5299656);
    label = 12;
    break;
   case 12:
    return;
  }
}
function _qh_printpointvect($point, $normal, $center, $radius) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $diff = __stackBase__;
    var $pointA = __stackBase__ + 32;
    var $0 = HEAP32[5247504 >> 2];
    var $tobool18 = ($0 | 0) == 0;
    var $tobool1 = ($center | 0) != 0;
    if ($tobool18) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool4 = ($normal | 0) == 0;
    var $dec19_in = $0;
    label = 4;
    break;
   case 4:
    var $dec19_in;
    var $dec19 = $dec19_in - 1 | 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $arrayidx = $point + ($dec19 << 3) | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx2 = $center + ($dec19 << 3) | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $1 - $2;
    var $arrayidx3 = $diff + ($dec19 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$arrayidx3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 6:
    if ($tobool4) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $arrayidx6 = $normal + ($dec19 << 3) | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx6 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx6 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx7 = $diff + ($dec19 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $3, HEAP32[$arrayidx7 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $tobool = ($dec19 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      var $dec19_in = $dec19;
      label = 4;
      break;
    }
   case 9:
    var $arrayidx9 = $diff + ($dec19 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx9 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 10:
    if ($tobool1) {
      label = 11;
      break;
    } else {
      var $4 = $0;
      label = 12;
      break;
    }
   case 11:
    var $arraydecay = $diff | 0;
    _qh_normalize2($arraydecay, $0, 1);
    var $_pre = HEAP32[5247504 >> 2];
    var $4 = $_pre;
    label = 12;
    break;
   case 12:
    var $4;
    var $tobool1615 = ($4 | 0) == 0;
    if ($tobool1615) {
      label = 14;
      break;
    } else {
      var $dec1516_in = $4;
      label = 13;
      break;
    }
   case 13:
    var $dec1516_in;
    var $dec1516 = $dec1516_in - 1 | 0;
    var $arrayidx18 = $point + ($dec1516 << 3) | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx19 = $diff + ($dec1516 << 3) | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx19 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx19 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $6 * $radius;
    var $add = $5 + $mul;
    var $arrayidx20 = $pointA + ($dec1516 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$arrayidx20 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool16 = ($dec1516 | 0) == 0;
    if ($tobool16) {
      label = 14;
      break;
    } else {
      var $dec1516_in = $dec1516;
      label = 13;
      break;
    }
   case 14:
    var $arraydecay22 = $pointA | 0;
    _qh_printline3geom($point, $arraydecay22);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printpointvect["X"] = 1;
function _qh_printend($fp, $format, $facetlist, $facets, $printall) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $num = __stackBase__;
    var $0 = HEAP32[5249128 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5261808);
    label = 4;
    break;
   case 4:
    if (($format | 0) == 7) {
      label = 5;
      break;
    } else if (($format | 0) == 9 | ($format | 0) == 11 | ($format | 0) == 12) {
      label = 16;
      break;
    } else if (($format | 0) == 13) {
      label = 18;
      break;
    } else if (($format | 0) == 15) {
      label = 19;
      break;
    } else if (($format | 0) == 21) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 5:
    var $1 = HEAP32[5247504 >> 2];
    var $2 = HEAP32[5247004 >> 2];
    var $notlhs = ($1 | 0) != 4;
    var $notrhs = ($2 | 0) > -1;
    var $or_cond_not = $notrhs | $notlhs;
    var $3 = HEAP32[5247172 >> 2];
    var $tobool3 = ($3 | 0) != 0;
    var $or_cond1 = $or_cond_not | $tobool3;
    if ($or_cond1) {
      label = 15;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = HEAP32[5249152 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    HEAP32[$num >> 2] = 0;
    var $tobool5 = ($facetlist | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      var $facet_018 = $facetlist;
      label = 7;
      break;
    }
   case 7:
    var $facet_018;
    var $next = $facet_018 + 44 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool8 = ($5 | 0) == 0;
    if ($tobool8) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_printend4geom($fp, $facet_018, $num, $printall);
    var $6 = HEAP32[$next >> 2];
    var $tobool7 = ($6 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      var $facet_018 = $6;
      label = 7;
      break;
    }
   case 9:
    var $tobool11 = ($facets | 0) == 0;
    if ($tobool11) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $facets + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool1415 = ($7 | 0) == 0;
    if ($tobool1415) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $8 = $7;
    var $9 = $p;
    var $facetp_016 = $9;
    var $10 = $8;
    label = 12;
    break;
   case 12:
    var $10;
    var $facetp_016;
    var $incdec_ptr = $facetp_016 + 4 | 0;
    _qh_printend4geom($fp, $10, $num, $printall);
    var $11 = HEAP32[$incdec_ptr >> 2];
    var $tobool14 = ($11 | 0) == 0;
    if ($tobool14) {
      label = 13;
      break;
    } else {
      var $facetp_016 = $incdec_ptr;
      var $10 = $11;
      label = 12;
      break;
    }
   case 13:
    var $12 = HEAP32[$num >> 2];
    var $13 = HEAP32[5249268 >> 2];
    var $cmp18 = ($12 | 0) == ($13 | 0);
    var $14 = HEAP32[5249124 >> 2];
    var $cmp19 = ($14 | 0) == ($13 | 0);
    var $or_cond = $cmp18 & $cmp19;
    if ($or_cond) {
      label = 22;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5261308);
    _qh_errexit(5, 0, 0);
    label = 22;
    break;
   case 15:
    _qh_fprintf(5260860);
    label = 22;
    break;
   case 16:
    var $15 = HEAP32[5246972 >> 2];
    var $tobool24 = ($15 | 0) == 0;
    if ($tobool24) {
      label = 22;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_fprintf(5260392);
    label = 22;
    break;
   case 18:
    _qh_fprintf(5260004);
    label = 22;
    break;
   case 19:
    _qh_fprintf(5260860);
    label = 22;
    break;
   case 20:
    var $16 = HEAP32[5246972 >> 2];
    var $tobool30 = ($16 | 0) == 0;
    if ($tobool30) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_fprintf(5260392);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printend["X"] = 1;
function _qh_printextremes($facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $points = __stackBase__ + 4;
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($1);
    var $add = $call + $0 | 0;
    var $call1 = _qh_settemp($add);
    HEAP32[$points >> 2] = $call1;
    _qh_setzero($call1, $add);
    var $call2 = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call2;
    var $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call2 + 4 | 0;
    var $2 = $p;
    var $vertexp_0 = $2;
    label = 4;
    break;
   case 4:
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $3 = HEAP32[$vertexp_0 >> 2];
    var $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $point4 = $3 + 8 | 0;
    var $4 = HEAP32[$point4 >> 2];
    var $call5 = _qh_pointid($4);
    var $cmp = ($call5 | 0) > -1;
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $vertexp_0 = $incdec_ptr;
      label = 4;
      break;
    }
   case 6:
    var $5 = $4;
    var $p10 = $call1 + 4 + ($call5 << 2) | 0;
    HEAP32[$p10 >> 2] = $5;
    var $vertexp_0 = $incdec_ptr;
    label = 4;
    break;
   case 7:
    _qh_settempfree($vertices);
    _qh_fprintf(5280304);
    var $tobool12 = ($call1 | 0) == 0;
    if ($tobool12) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p16 = $call1 + 4 | 0;
    var $6 = HEAP32[$p16 >> 2];
    var $call17 = _qh_setsize($call1);
    var $cmp198 = ($call17 | 0) > 0;
    if ($cmp198) {
      var $point_i_09 = 0;
      var $point_0_in10 = $6;
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 9:
    var $point_0_in10;
    var $point_i_09;
    var $tobool21 = ($point_0_in10 | 0) == 0;
    if ($tobool21) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5280304);
    label = 11;
    break;
   case 11:
    var $inc24 = $point_i_09 + 1 | 0;
    var $p27 = $call1 + 4 + ($inc24 << 2) | 0;
    var $7 = HEAP32[$p27 >> 2];
    var $exitcond = ($inc24 | 0) == ($call17 | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $point_i_09 = $inc24;
      var $point_0_in10 = $7;
      label = 9;
      break;
    }
   case 12:
    _qh_settempfree($points);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printextremes["X"] = 1;
function _qh_printextremes_2d($facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numfacets = __stackBase__;
    var $numridges = __stackBase__ + 4;
    var $totneighbors = __stackBase__ + 8;
    var $numcoplanars = __stackBase__ + 12;
    var $numsimplicial = __stackBase__ + 16;
    var $numtricoplanars = __stackBase__ + 20;
    var $vertices = __stackBase__ + 24;
    _qh_countfacets($facetlist, $facets, 0, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
    var $call = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call;
    var $call1 = _qh_setsize($call);
    _qh_fprintf(5280304);
    _qh_settempfree($vertices);
    var $0 = HEAP32[$numfacets >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool2 = ($facetlist | 0) == 0;
    if ($tobool2) {
      label = 4;
      break;
    } else {
      var $cond = $facetlist;
      label = 5;
      break;
    }
   case 4:
    var $p = $facets + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $2 = $1;
    var $cond = $2;
    label = 5;
    break;
   case 5:
    var $cond;
    var $3 = HEAP32[5249156 >> 2];
    var $inc = $3 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $4 = $3 & -2147483648;
    var $5 = $bf_value | $4;
    HEAP32[5249156 >> 2] = $5;
    var $6 = HEAP32[5249152 >> 2];
    var $inc3 = $6 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc3;
    var $facet_0 = $cond;
    label = 6;
    break;
   case 6:
    var $facet_0;
    var $7 = $facet_0 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $bf_clear4 = $9 & 4096;
    var $tobool5 = ($bf_clear4 | 0) == 0;
    var $vertices7 = $facet_0 + 48 | 0;
    var $10 = HEAP32[$vertices7 >> 2];
    var $e8 = $10 + 4 | 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p10 = $e8 | 0;
    var $p14 = $10 + 8 | 0;
    var $neighbors = $facet_0 + 56 | 0;
    var $11 = HEAP32[$neighbors >> 2];
    var $p17 = $11 + 4 | 0;
    var $vertexB_0_in_in = $p14;
    var $vertexA_0_in_in = $p10;
    var $nextfacet_0_in_in = $p17;
    label = 9;
    break;
   case 8:
    var $p21 = $10 + 8 | 0;
    var $p25 = $e8 | 0;
    var $neighbors26 = $facet_0 + 56 | 0;
    var $12 = HEAP32[$neighbors26 >> 2];
    var $p29 = $12 + 8 | 0;
    var $vertexB_0_in_in = $p25;
    var $vertexA_0_in_in = $p21;
    var $nextfacet_0_in_in = $p29;
    label = 9;
    break;
   case 9:
    var $nextfacet_0_in_in;
    var $vertexA_0_in_in;
    var $vertexB_0_in_in;
    var $vertexB_0_in = HEAP32[$vertexB_0_in_in >> 2];
    var $vertexA_0_in = HEAP32[$vertexA_0_in_in >> 2];
    var $nextfacet_0_in = HEAP32[$nextfacet_0_in_in >> 2];
    var $nextfacet_0 = $nextfacet_0_in;
    var $visitid = $facet_0 + 68 | 0;
    var $13 = HEAP32[$visitid >> 2];
    var $14 = HEAP32[5249152 >> 2];
    var $cmp = ($13 | 0) == ($14 | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      var $15 = $13;
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5259220);
    _qh_errexit2(5, $facet_0, $nextfacet_0);
    var $_pr = HEAP32[$visitid >> 2];
    var $15 = $_pr;
    label = 11;
    break;
   case 11:
    var $15;
    var $tobool35 = ($15 | 0) == 0;
    if ($tobool35) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $bf_field_offs37 = $vertexA_0_in + 16 | 0;
    var $16 = $bf_field_offs37;
    var $17 = HEAP32[$16 >> 2];
    var $bf_clear38 = $17 & 2147483647;
    var $18 = HEAP32[5249156 >> 2];
    var $bf_clear39 = $18 & 2147483647;
    var $cmp40 = ($bf_clear38 | 0) == ($bf_clear39 | 0);
    if ($cmp40) {
      var $21 = $18;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $19 = $17 & -2147483648;
    var $20 = $bf_clear39 | $19;
    HEAP32[$16 >> 2] = $20;
    _qh_fprintf(5280304);
    var $_pre = HEAP32[5249156 >> 2];
    var $21 = $_pre;
    label = 14;
    break;
   case 14:
    var $21;
    var $bf_field_offs47 = $vertexB_0_in + 16 | 0;
    var $22 = $bf_field_offs47;
    var $23 = HEAP32[$22 >> 2];
    var $bf_clear48 = $23 & 2147483647;
    var $bf_clear49 = $21 & 2147483647;
    var $cmp50 = ($bf_clear48 | 0) == ($bf_clear49 | 0);
    if ($cmp50) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $24 = $23 & -2147483648;
    var $25 = $bf_clear49 | $24;
    HEAP32[$22 >> 2] = $25;
    _qh_fprintf(5280304);
    label = 16;
    break;
   case 16:
    var $26 = HEAP32[5249152 >> 2];
    HEAP32[$visitid >> 2] = $26;
    var $tobool60 = ($nextfacet_0_in | 0) == 0;
    var $cmp61 = ($nextfacet_0 | 0) == ($cond | 0);
    var $or_cond = $tobool60 | $cmp61;
    if ($or_cond) {
      label = 17;
      break;
    } else {
      var $facet_0 = $nextfacet_0;
      label = 6;
      break;
    }
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printextremes_2d["X"] = 1;
function _qh_printextremes_d($facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $call = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call;
    _qh_vertexneighbors();
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5280304);
    label = 23;
    break;
   case 4:
    var $p = $call + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool12329 = ($0 | 0) == 0;
    if ($tobool12329) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5280304);
    var $27 = $call;
    label = 18;
    break;
   case 6:
    var $1 = $0;
    var $incdec_ptr222833 = $p + 4 | 0;
    var $incdec_ptr2228 = $incdec_ptr222833;
    var $incdec_ptr24 = $incdec_ptr2228;
    var $2 = $1;
    label = 7;
    break;
   case 7:
    var $2;
    var $incdec_ptr24;
    var $neighbors = $2 + 12 | 0;
    var $3 = HEAP32[$neighbors >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $4 = $2 + 20 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $24 = $5;
    var $23 = $6;
    label = 15;
    break;
   case 9:
    var $p7 = $3 + 4 | 0;
    var $7 = HEAP32[$p7 >> 2];
    var $tobool1015 = ($7 | 0) == 0;
    if ($tobool1015) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $8 = $2 + 20 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $24 = $9;
    var $23 = $10;
    label = 15;
    break;
   case 11:
    var $11 = $7;
    var $12 = $p7;
    var $upperseen_016 = 0;
    var $lowerseen_017 = 0;
    var $neighborp_018 = $12;
    var $13 = $11;
    label = 12;
    break;
   case 12:
    var $13;
    var $neighborp_018;
    var $lowerseen_017;
    var $upperseen_016;
    var $incdec_ptr9 = $neighborp_018 + 4 | 0;
    var $14 = $13 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear = $16 & 131072;
    var $tobool12 = ($bf_clear | 0) == 0;
    var $upperseen_0_ = $tobool12 ? $upperseen_016 : 1;
    var $_lowerseen_0 = $tobool12 ? 1 : $lowerseen_017;
    var $17 = HEAP32[$incdec_ptr9 >> 2];
    var $tobool10 = ($17 | 0) == 0;
    if ($tobool10) {
      label = 13;
      break;
    } else {
      var $upperseen_016 = $upperseen_0_;
      var $lowerseen_017 = $_lowerseen_0;
      var $neighborp_018 = $incdec_ptr9;
      var $13 = $17;
      label = 12;
      break;
    }
   case 13:
    var $phitmp = ($upperseen_0_ | 0) == 0;
    var $phitmp34 = ($_lowerseen_0 | 0) == 0;
    var $or_cond = $phitmp | $phitmp34;
    var $18 = $2 + 20 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    if ($or_cond) {
      var $24 = $19;
      var $23 = $20;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $21 = $20 | 268435456;
    HEAP32[$19 >> 2] = $21;
    var $22 = HEAP32[$incdec_ptr24 >> 2];
    var $tobool123 = ($22 | 0) == 0;
    if ($tobool123) {
      label = 17;
      break;
    } else {
      var $_be = $22;
      label = 16;
      break;
    }
   case 15:
    var $23;
    var $24;
    var $25 = $23 & -268435457;
    HEAP32[$24 >> 2] = $25;
    var $26 = HEAP32[$incdec_ptr24 >> 2];
    var $tobool1 = ($26 | 0) == 0;
    if ($tobool1) {
      label = 17;
      break;
    } else {
      var $_be = $26;
      label = 16;
      break;
    }
   case 16:
    var $_be;
    var $incdec_ptr24_be = $incdec_ptr24 + 4 | 0;
    var $incdec_ptr24 = $incdec_ptr24_be;
    var $2 = $_be;
    label = 7;
    break;
   case 17:
    var $_pre = HEAP32[$vertices >> 2];
    _qh_fprintf(5280304);
    var $tobool24 = ($_pre | 0) == 0;
    if ($tobool24) {
      label = 23;
      break;
    } else {
      var $27 = $_pre;
      label = 18;
      break;
    }
   case 18:
    var $27;
    var $p28 = $27 + 4 | 0;
    var $28 = HEAP32[$p28 >> 2];
    var $tobool3113 = ($28 | 0) == 0;
    if ($tobool3113) {
      label = 23;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $29 = $28;
    var $incdec_ptr301235 = $p28 + 4 | 0;
    var $incdec_ptr3012 = $incdec_ptr301235;
    var $incdec_ptr3014 = $incdec_ptr3012;
    var $30 = $29;
    label = 20;
    break;
   case 20:
    var $30;
    var $incdec_ptr3014;
    var $31 = $30 + 20 | 0;
    var $32 = $31;
    var $33 = HEAP32[$32 >> 2];
    var $bf_clear34 = $33 & 268435456;
    var $tobool35 = ($bf_clear34 | 0) == 0;
    if ($tobool35) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_fprintf(5280304);
    label = 22;
    break;
   case 22:
    var $incdec_ptr30 = $incdec_ptr3014 + 4 | 0;
    var $34 = HEAP32[$incdec_ptr3014 >> 2];
    var $tobool31 = ($34 | 0) == 0;
    if ($tobool31) {
      label = 23;
      break;
    } else {
      var $incdec_ptr3014 = $incdec_ptr30;
      var $30 = $34;
      label = 20;
      break;
    }
   case 23:
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printextremes_d["X"] = 1;
function _qh_printfacetridges($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 2048;
    var $tobool = ($bf_clear | 0) != 0;
    var $3 = HEAP32[5249088 >> 2];
    var $tobool1 = ($3 | 0) != 0;
    var $or_cond = $tobool & $tobool1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    _qh_fprintf(5294064);
    var $ridges = $facet + 52 | 0;
    var $4 = HEAP32[$ridges >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool544 = ($5 | 0) == 0;
    if ($tobool544) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $6 = $p;
    var $ridgep_045 = $6;
    label = 6;
    break;
   case 6:
    var $ridgep_045;
    var $incdec_ptr = $ridgep_045 + 4 | 0;
    _qh_fprintf(5293972);
    var $7 = HEAP32[$incdec_ptr >> 2];
    var $tobool5 = ($7 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      var $ridgep_045 = $incdec_ptr;
      label = 6;
      break;
    }
   case 7:
    _qh_fprintf(5299656);
    label = 41;
    break;
   case 8:
    _qh_fprintf(5293760);
    var $ridges8 = $facet + 52 | 0;
    var $8 = HEAP32[$ridges8 >> 2];
    var $tobool9 = ($8 | 0) == 0;
    if ($tobool9) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p14 = $8 + 4 | 0;
    var $9 = HEAP32[$p14 >> 2];
    var $tobool1759 = ($9 | 0) == 0;
    if ($tobool1759) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $10 = $9;
    var $11 = $p14;
    var $ridgep_160 = $11;
    var $12 = $10;
    label = 11;
    break;
   case 11:
    var $12;
    var $ridgep_160;
    var $incdec_ptr16 = $ridgep_160 + 4 | 0;
    var $13 = $12 + 12 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & -16777217;
    HEAP32[$14 >> 2] = $16;
    var $17 = HEAP32[$incdec_ptr16 >> 2];
    var $tobool17 = ($17 | 0) == 0;
    if ($tobool17) {
      label = 12;
      break;
    } else {
      var $ridgep_160 = $incdec_ptr16;
      var $12 = $17;
      label = 11;
      break;
    }
   case 12:
    var $18 = HEAP32[5247504 >> 2];
    var $cmp = ($18 | 0) == 3;
    if ($cmp) {
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 13:
    var $19 = HEAP32[$ridges8 >> 2];
    var $p26 = $19 + 4 | 0;
    var $20 = HEAP32[$p26 >> 2];
    var $tobool2751 = ($20 | 0) == 0;
    if ($tobool2751) {
      var $numridges_3 = 0;
      label = 29;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $21 = $20;
    var $ridge_052 = $21;
    var $numridges_053 = 0;
    label = 15;
    break;
   case 15:
    var $numridges_053;
    var $ridge_052;
    var $22 = $ridge_052 + 12 | 0;
    var $23 = $22;
    var $24 = HEAP32[$23 >> 2];
    var $bf_clear29 = $24 & 16777216;
    var $lnot = ($bf_clear29 | 0) == 0;
    if ($lnot) {
      label = 16;
      break;
    } else {
      var $numridges_3 = $numridges_053;
      label = 29;
      break;
    }
   case 16:
    var $25 = $24 | 16777216;
    HEAP32[$23 >> 2] = $25;
    _qh_printridge($ridge_052);
    var $inc = $numridges_053 + 1 | 0;
    var $call = _qh_nextridge3d($ridge_052, $facet, 0);
    var $tobool27 = ($call | 0) == 0;
    if ($tobool27) {
      var $numridges_3 = $inc;
      label = 29;
      break;
    } else {
      var $ridge_052 = $call;
      var $numridges_053 = $inc;
      label = 15;
      break;
    }
   case 17:
    var $neighbors = $facet + 56 | 0;
    var $26 = HEAP32[$neighbors >> 2];
    var $tobool33 = ($26 | 0) == 0;
    if ($tobool33) {
      var $numridges_3 = 0;
      label = 29;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $p38 = $26 + 4 | 0;
    var $27 = $p38;
    var $numridges_1_ph = 0;
    var $neighborp_0_ph = $27;
    label = 19;
    break;
   case 19:
    var $neighborp_0_ph;
    var $numridges_1_ph;
    var $neighborp_0 = $neighborp_0_ph;
    label = 20;
    break;
   case 20:
    var $neighborp_0;
    var $incdec_ptr40 = $neighborp_0 + 4 | 0;
    var $28 = HEAP32[$neighborp_0 >> 2];
    var $tobool41 = ($28 | 0) == 0;
    if ($tobool41) {
      var $numridges_3 = $numridges_1_ph;
      label = 29;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $29 = HEAP32[$ridges8 >> 2];
    var $tobool44 = ($29 | 0) == 0;
    if ($tobool44) {
      var $neighborp_0 = $incdec_ptr40;
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $p49 = $29 + 4 | 0;
    var $30 = $p49;
    var $numridges_2_ph = $numridges_1_ph;
    var $ridgep_2_ph = $30;
    label = 23;
    break;
   case 23:
    var $ridgep_2_ph;
    var $numridges_2_ph;
    var $ridgep_2 = $ridgep_2_ph;
    label = 24;
    break;
   case 24:
    var $ridgep_2;
    var $incdec_ptr51 = $ridgep_2 + 4 | 0;
    var $31 = HEAP32[$ridgep_2 >> 2];
    var $tobool52 = ($31 | 0) == 0;
    if ($tobool52) {
      var $numridges_1_ph = $numridges_2_ph;
      var $neighborp_0_ph = $incdec_ptr40;
      label = 19;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $top = $31 + 4 | 0;
    var $32 = HEAP32[$top >> 2];
    var $cmp54 = ($32 | 0) == ($facet | 0);
    if ($cmp54) {
      label = 26;
      break;
    } else {
      var $cond = $32;
      label = 27;
      break;
    }
   case 26:
    var $bottom = $31 + 8 | 0;
    var $33 = HEAP32[$bottom >> 2];
    var $cond = $33;
    label = 27;
    break;
   case 27:
    var $cond;
    var $cmp56 = ($cond | 0) == ($28 | 0);
    if ($cmp56) {
      label = 28;
      break;
    } else {
      var $ridgep_2 = $incdec_ptr51;
      label = 24;
      break;
    }
   case 28:
    var $34 = $31 + 12 | 0;
    var $35 = $34;
    var $36 = HEAP32[$35 >> 2];
    var $37 = $36 | 16777216;
    HEAP32[$35 >> 2] = $37;
    _qh_printridge($31);
    var $inc59 = $numridges_2_ph + 1 | 0;
    var $numridges_2_ph = $inc59;
    var $ridgep_2_ph = $incdec_ptr51;
    label = 23;
    break;
   case 29:
    var $numridges_3;
    var $38 = HEAP32[$ridges8 >> 2];
    var $call67 = _qh_setsize($38);
    var $cmp68 = ($numridges_3 | 0) == ($call67 | 0);
    if ($cmp68) {
      label = 35;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    _qh_fprintf(5293604);
    var $39 = HEAP32[$ridges8 >> 2];
    var $tobool71 = ($39 | 0) == 0;
    if ($tobool71) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $p76 = $39 + 4 | 0;
    var $40 = HEAP32[$p76 >> 2];
    var $tobool7949 = ($40 | 0) == 0;
    if ($tobool7949) {
      label = 34;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $41 = $p76;
    var $ridgep_350 = $41;
    label = 33;
    break;
   case 33:
    var $ridgep_350;
    var $incdec_ptr78 = $ridgep_350 + 4 | 0;
    _qh_fprintf(5293972);
    var $42 = HEAP32[$incdec_ptr78 >> 2];
    var $tobool79 = ($42 | 0) == 0;
    if ($tobool79) {
      label = 34;
      break;
    } else {
      var $ridgep_350 = $incdec_ptr78;
      label = 33;
      break;
    }
   case 34:
    _qh_fprintf(5299656);
    label = 35;
    break;
   case 35:
    var $43 = HEAP32[$ridges8 >> 2];
    var $tobool87 = ($43 | 0) == 0;
    if ($tobool87) {
      label = 41;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $p92 = $43 + 4 | 0;
    var $44 = HEAP32[$p92 >> 2];
    var $tobool9547 = ($44 | 0) == 0;
    if ($tobool9547) {
      label = 41;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $45 = $44;
    var $incdec_ptr944661 = $p92 + 4 | 0;
    var $incdec_ptr9446 = $incdec_ptr944661;
    var $incdec_ptr9448 = $incdec_ptr9446;
    var $46 = $45;
    label = 38;
    break;
   case 38:
    var $46;
    var $incdec_ptr9448;
    var $47 = $46 + 12 | 0;
    var $48 = $47;
    var $49 = HEAP32[$48 >> 2];
    var $bf_clear98 = $49 & 16777216;
    var $tobool99 = ($bf_clear98 | 0) == 0;
    if ($tobool99) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _qh_printridge($46);
    label = 40;
    break;
   case 40:
    var $incdec_ptr94 = $incdec_ptr9448 + 4 | 0;
    var $50 = HEAP32[$incdec_ptr9448 >> 2];
    var $tobool95 = ($50 | 0) == 0;
    if ($tobool95) {
      label = 41;
      break;
    } else {
      var $incdec_ptr9448 = $incdec_ptr94;
      var $46 = $50;
      label = 38;
      break;
    }
   case 41:
    return;
  }
}
_qh_printfacetridges["X"] = 1;
function _qh_printfacet2geom_points($point1, $point2, $facet, $offset) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_fprintf(5258912);
    var $cmp = $offset != 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5258496);
    label = 5;
    break;
   case 4:
    var $sub = -$offset;
    var $call = _qh_projectpoint($point1, $facet, $sub);
    var $call2 = _qh_projectpoint($point2, $facet, $sub);
    _qh_fprintf(5258496);
    var $0 = $call;
    var $1 = HEAP32[5248928 >> 2];
    _qh_memfree($0, $1);
    var $2 = $call2;
    var $3 = HEAP32[5248928 >> 2];
    _qh_memfree($2, $3);
    label = 5;
    break;
   case 5:
    _qh_fprintf(5258284);
    return;
  }
}
function _qh_printfacet3geom_points($points, $facet, $offset) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $printpoints = __stackBase__;
    var $call = _qh_setsize($points);
    _qh_fprintf(5257184);
    var $cmp = $offset != 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $call1 = _qh_settemp($call);
    HEAP32[$printpoints >> 2] = $call1;
    var $tobool = ($points | 0) == 0;
    if ($tobool) {
      var $6 = $call1;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p = $points + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool332 = ($0 | 0) == 0;
    if ($tobool332) {
      var $6 = $call1;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $1 = $0;
    var $2 = $p;
    var $sub = -$offset;
    var $pointp_033 = $2;
    var $3 = $1;
    label = 6;
    break;
   case 6:
    var $3;
    var $pointp_033;
    var $incdec_ptr = $pointp_033 + 4 | 0;
    var $call4 = _qh_projectpoint($3, $facet, $sub);
    var $4 = $call4;
    _qh_setappend($printpoints, $4);
    var $5 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($5 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      var $pointp_033 = $incdec_ptr;
      var $3 = $5;
      label = 6;
      break;
    }
   case 7:
    HEAP32[$printpoints >> 2] = $points;
    var $6 = $points;
    label = 9;
    break;
   case 8:
    var $_pr_pre = HEAP32[$printpoints >> 2];
    var $6 = $_pr_pre;
    label = 9;
    break;
   case 9:
    var $6;
    var $tobool6 = ($6 | 0) == 0;
    if ($tobool6) {
      var $16 = 0;
      label = 20;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p10 = $6 + 4 | 0;
    var $7 = HEAP32[$p10 >> 2];
    var $tobool1330 = ($7 | 0) == 0;
    if ($tobool1330) {
      var $16 = $6;
      label = 20;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $8 = $7;
    var $incdec_ptr122934 = $p10 + 4 | 0;
    var $incdec_ptr1229 = $incdec_ptr122934;
    var $incdec_ptr1231 = $incdec_ptr1229;
    var $9 = $8;
    label = 12;
    break;
   case 12:
    var $9;
    var $incdec_ptr1231;
    var $10 = HEAP32[5247504 >> 2];
    var $cmp1627 = ($10 | 0) > 0;
    if ($cmp1627) {
      var $k_028 = 0;
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 13:
    var $k_028;
    var $11 = HEAP32[5247004 >> 2];
    var $cmp18 = ($k_028 | 0) == ($11 | 0);
    if ($cmp18) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5269528);
    label = 16;
    break;
   case 15:
    _qh_fprintf(5256868);
    label = 16;
    break;
   case 16:
    var $inc = $k_028 + 1 | 0;
    var $12 = HEAP32[5247504 >> 2];
    var $cmp16 = ($inc | 0) < ($12 | 0);
    if ($cmp16) {
      var $k_028 = $inc;
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $cmp24 = ($6 | 0) == ($points | 0);
    if ($cmp24) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $13 = $9;
    var $14 = HEAP32[5248928 >> 2];
    _qh_memfree($13, $14);
    label = 19;
    break;
   case 19:
    _qh_fprintf(5299656);
    var $incdec_ptr12 = $incdec_ptr1231 + 4 | 0;
    var $15 = HEAP32[$incdec_ptr1231 >> 2];
    var $tobool13 = ($15 | 0) == 0;
    if ($tobool13) {
      var $16 = $6;
      label = 20;
      break;
    } else {
      var $incdec_ptr1231 = $incdec_ptr12;
      var $9 = $15;
      label = 12;
      break;
    }
   case 20:
    var $16;
    var $cmp29 = ($16 | 0) == ($points | 0);
    if ($cmp29) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_settempfree($printpoints);
    label = 22;
    break;
   case 22:
    _qh_fprintf(5256464);
    var $cmp3325 = ($call | 0) > 0;
    if ($cmp3325) {
      var $i_026 = 0;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $i_026;
    _qh_fprintf(5256464);
    var $inc36 = $i_026 + 1 | 0;
    var $exitcond = ($inc36 | 0) == ($call | 0);
    if ($exitcond) {
      label = 24;
      break;
    } else {
      var $i_026 = $inc36;
      label = 23;
      break;
    }
   case 24:
    _qh_fprintf(5256216);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printfacet3geom_points["X"] = 1;
function _qh_printhyperplaneintersection($facet1, $facet2, $vertices) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist1 = __stackBase__;
    var $dist2 = __stackBase__ + 8;
    var $p = __stackBase__ + 16;
    var $nearzero1 = __stackBase__ + 48;
    var $nearzero2 = __stackBase__ + 52;
    var $normal = $facet1 + 24 | 0;
    var $0 = HEAP32[$normal >> 2];
    var $normal1 = $facet2 + 24 | 0;
    var $1 = HEAP32[$normal1 >> 2];
    var $call = _qh_getangle($0, $1);
    var $mul = $call * $call;
    var $sub = 1 - $mul;
    var $call2 = _qh_setsize($vertices);
    var $2 = HEAP32[5247504 >> 2];
    var $cmp = ($2 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5292144);
    label = 7;
    break;
   case 4:
    var $cmp3 = ($2 | 0) == 4;
    var $3 = HEAP32[5247004 >> 2];
    var $cmp4 = ($3 | 0) > -1;
    var $or_cond = $cmp3 & $cmp4;
    if ($or_cond) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5291944);
    label = 7;
    break;
   case 6:
    var $4 = HEAP32[5249124 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5249124 >> 2] = $inc;
    label = 7;
    break;
   case 7:
    _qh_fprintf(5291736);
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul9 = $5 * 10;
    var $div = 1 / $mul9;
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 23;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p11 = $vertices + 4 | 0;
    var $6 = HEAP32[$p11 >> 2];
    var $tobool1239 = ($6 | 0) == 0;
    if ($tobool1239) {
      label = 23;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $7 = $6;
    var $incdec_ptr3841 = $p11 + 4 | 0;
    var $incdec_ptr38 = $incdec_ptr3841;
    var $arraydecay = $p | 0;
    var $incdec_ptr40 = $incdec_ptr38;
    var $8 = $7;
    label = 10;
    break;
   case 10:
    var $8;
    var $incdec_ptr40;
    var $9 = HEAP32[5243424 >> 2];
    var $add = $9 + 2 | 0;
    HEAP32[5243424 >> 2] = $add;
    var $point = $8 + 8 | 0;
    var $10 = HEAP32[$point >> 2];
    _qh_distplane($10, $facet1, $dist1);
    var $11 = HEAP32[$point >> 2];
    _qh_distplane($11, $facet2, $dist2);
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul15 = $call * $13;
    var $add16 = $mul15 - $12;
    var $call17 = _qh_divzero($add16, $sub, $div, $nearzero1);
    var $mul19 = $call * $12;
    var $add20 = $mul19 - $13;
    var $call21 = _qh_divzero($add20, $sub, $div, $nearzero2);
    var $14 = HEAP32[$nearzero1 >> 2];
    var $tobool22 = ($14 | 0) == 0;
    if ($tobool22) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $15 = HEAP32[$nearzero2 >> 2];
    var $tobool23 = ($15 | 0) == 0;
    if ($tobool23) {
      var $s_0 = $call17;
      var $t_0 = $call21;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $s_0 = 0;
    var $t_0 = 0;
    label = 13;
    break;
   case 13:
    var $t_0;
    var $s_0;
    var $16 = HEAP32[5247504 >> 2];
    var $tobool2736 = ($16 | 0) == 0;
    if ($tobool2736) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $17 = HEAP32[$point >> 2];
    var $18 = HEAP32[$normal >> 2];
    var $19 = HEAP32[$normal1 >> 2];
    var $dec37_in = $16;
    label = 15;
    break;
   case 15:
    var $dec37_in;
    var $dec37 = $dec37_in - 1 | 0;
    var $arrayidx30 = $17 + ($dec37 << 3) | 0;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx30 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx30 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx32 = $18 + ($dec37 << 3) | 0;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx32 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx32 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul33 = $s_0 * $21;
    var $add34 = $20 + $mul33;
    var $arrayidx36 = $19 + ($dec37 << 3) | 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx36 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx36 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul37 = $t_0 * $22;
    var $add38 = $add34 + $mul37;
    var $arrayidx39 = $p + ($dec37 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $add38, HEAP32[$arrayidx39 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx39 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool27 = ($dec37 | 0) == 0;
    if ($tobool27) {
      label = 16;
      break;
    } else {
      var $dec37_in = $dec37;
      label = 15;
      break;
    }
   case 16:
    var $23 = HEAP32[5247152 >> 2];
    var $cmp40 = ($23 | 0) < 4;
    if ($cmp40) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _qh_projectdim3($arraydecay, $arraydecay);
    _qh_fprintf(5291548);
    label = 19;
    break;
   case 18:
    _qh_fprintf(5291420);
    label = 19;
    break;
   case 19:
    var $24 = HEAP32[$nearzero2 >> 2];
    var $add52 = -$24 | 0;
    var $tobool53 = ($14 | 0) == ($add52 | 0);
    if ($tobool53) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5291364);
    label = 22;
    break;
   case 21:
    _qh_fprintf(5291240);
    label = 22;
    break;
   case 22:
    var $incdec_ptr = $incdec_ptr40 + 4 | 0;
    var $25 = HEAP32[$incdec_ptr40 >> 2];
    var $tobool12 = ($25 | 0) == 0;
    if ($tobool12) {
      label = 23;
      break;
    } else {
      var $incdec_ptr40 = $incdec_ptr;
      var $8 = $25;
      label = 10;
      break;
    }
   case 23:
    var $26 = HEAP32[5247504 >> 2];
    var $cmp63 = ($26 | 0) == 3;
    if ($cmp63) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5258284);
    label = 27;
    break;
   case 25:
    var $cmp69 = ($26 | 0) == 4;
    var $27 = HEAP32[5247004 >> 2];
    var $cmp71 = ($27 | 0) > -1;
    var $or_cond1 = $cmp69 & $cmp71;
    if ($or_cond1) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_fprintf(5290984);
    label = 27;
    break;
   case 27:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printhyperplaneintersection["X"] = 1;
function _qh_printline3geom($pointA, $pointB) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pA = __stackBase__;
    var $pB = __stackBase__ + 32;
    var $arraydecay = $pA | 0;
    _qh_projectdim3($pointA, $arraydecay);
    var $arraydecay1 = $pB | 0;
    _qh_projectdim3($pointB, $arraydecay1);
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arraydecay >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arraydecay + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arraydecay1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arraydecay1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $0 - $1;
    var $call = Math.abs($sub);
    var $cmp = $call > .001;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arrayidx3 = $pA + 8 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx4 = $pB + 8 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub5 = $2 - $3;
    var $call6 = Math.abs($sub5);
    var $cmp7 = $call6 > .001;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arrayidx9 = $pA + 16 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx10 = $pB + 16 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx10 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx10 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub11 = $4 - $5;
    var $call12 = Math.abs($sub11);
    var $cmp13 = $call12 > .001;
    if ($cmp13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5290928);
    _qh_fprintf(5256868);
    _qh_fprintf(5256868);
    _qh_fprintf(5256868);
    _qh_fprintf(5290764);
    label = 7;
    break;
   case 6:
    _qh_fprintf(5290720);
    label = 7;
    break;
   case 7:
    _qh_fprintf(5256868);
    _qh_fprintf(5256868);
    _qh_fprintf(5256868);
    _qh_fprintf(5290764);
    _qh_fprintf(5290612);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printvertices($vertices) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_fprintf(5290424);
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool15 = ($0 | 0) == 0;
    if ($tobool15) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $p;
    var $vertexp_06 = $1;
    label = 5;
    break;
   case 5:
    var $vertexp_06;
    var $incdec_ptr = $vertexp_06 + 4 | 0;
    _qh_fprintf(5287488);
    var $2 = HEAP32[$incdec_ptr >> 2];
    var $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      var $vertexp_06 = $incdec_ptr;
      label = 5;
      break;
    }
   case 6:
    _qh_fprintf(5299656);
    return;
  }
}
function _qh_printridge($ridge) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $ridge + 12 | 0;
    var $1 = $0;
    _qh_fprintf(5290252);
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear2 = $2 & 33554432;
    var $tobool = ($bf_clear2 | 0) == 0;
    if ($tobool) {
      var $3 = $2;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5249460);
    var $_pre = HEAP32[$1 >> 2];
    var $3 = $_pre;
    label = 4;
    break;
   case 4:
    var $3;
    var $bf_clear4 = $3 & 67108864;
    var $tobool5 = ($bf_clear4 | 0) == 0;
    if ($tobool5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5290120);
    label = 6;
    break;
   case 6:
    _qh_fprintf(5299656);
    var $vertices = $ridge | 0;
    var $4 = HEAP32[$vertices >> 2];
    _qh_printvertices($4);
    var $top = $ridge + 4 | 0;
    var $5 = HEAP32[$top >> 2];
    var $tobool8 = ($5 | 0) == 0;
    if ($tobool8) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $bottom = $ridge + 8 | 0;
    var $6 = HEAP32[$bottom >> 2];
    var $tobool9 = ($6 | 0) == 0;
    if ($tobool9) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_fprintf(5289756);
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_printpoints_out($facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $points = __stackBase__ + 4;
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($1);
    var $add = $call + $0 | 0;
    var $call1 = _qh_settemp($add);
    HEAP32[$points >> 2] = $call1;
    _qh_setzero($call1, $add);
    var $call2 = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call2;
    var $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call2 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool360 = ($2 | 0) == 0;
    if ($tobool360) {
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $2;
    var $incdec_ptr5962 = $p + 4 | 0;
    var $incdec_ptr59 = $incdec_ptr5962;
    var $incdec_ptr61 = $incdec_ptr59;
    var $4 = $3;
    label = 5;
    break;
   case 5:
    var $4;
    var $incdec_ptr61;
    var $point4 = $4 + 8 | 0;
    var $5 = HEAP32[$point4 >> 2];
    var $call5 = _qh_pointid($5);
    var $cmp = ($call5 | 0) > -1;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $6 = $5;
    var $p10 = $call1 + 4 + ($call5 << 2) | 0;
    HEAP32[$p10 >> 2] = $6;
    label = 7;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr61 + 4 | 0;
    var $7 = HEAP32[$incdec_ptr61 >> 2];
    var $tobool3 = ($7 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      var $incdec_ptr61 = $incdec_ptr;
      var $4 = $7;
      label = 5;
      break;
    }
   case 8:
    var $8 = HEAP32[5247048 >> 2];
    var $9 = HEAP32[5247044 >> 2];
    var $10 = $9 | $8;
    var $11 = HEAP32[5247500 >> 2];
    var $12 = $10 | $11;
    var $13 = ($12 | 0) == 0;
    if ($13) {
      label = 30;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $tobool17 = ($facetlist | 0) == 0;
    if ($tobool17) {
      label = 19;
      break;
    } else {
      var $facet_058 = $facetlist;
      label = 10;
      break;
    }
   case 10:
    var $facet_058;
    var $next = $facet_058 + 44 | 0;
    var $14 = HEAP32[$next >> 2];
    var $tobool21 = ($14 | 0) == 0;
    if ($tobool21) {
      label = 19;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $call24 = _qh_skipfacet($facet_058);
    var $tobool25 = ($call24 | 0) == 0;
    if ($tobool25) {
      label = 12;
      break;
    } else {
      label = 18;
      break;
    }
   case 12:
    var $coplanarset = $facet_058 + 64 | 0;
    var $15 = HEAP32[$coplanarset >> 2];
    var $tobool28 = ($15 | 0) == 0;
    if ($tobool28) {
      label = 18;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $p33 = $15 + 4 | 0;
    var $16 = HEAP32[$p33 >> 2];
    var $tobool3655 = ($16 | 0) == 0;
    if ($tobool3655) {
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $17 = $16;
    var $incdec_ptr355463 = $p33 + 4 | 0;
    var $incdec_ptr3554 = $incdec_ptr355463;
    var $incdec_ptr3556 = $incdec_ptr3554;
    var $18 = $17;
    label = 15;
    break;
   case 15:
    var $18;
    var $incdec_ptr3556;
    var $call38 = _qh_pointid($18);
    var $cmp39 = ($call38 | 0) > -1;
    if ($cmp39) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $19 = $18;
    var $p43 = $call1 + 4 + ($call38 << 2) | 0;
    HEAP32[$p43 >> 2] = $19;
    label = 17;
    break;
   case 17:
    var $incdec_ptr35 = $incdec_ptr3556 + 4 | 0;
    var $20 = HEAP32[$incdec_ptr3556 >> 2];
    var $tobool36 = ($20 | 0) == 0;
    if ($tobool36) {
      label = 18;
      break;
    } else {
      var $incdec_ptr3556 = $incdec_ptr35;
      var $18 = $20;
      label = 15;
      break;
    }
   case 18:
    var $21 = HEAP32[$next >> 2];
    var $tobool20 = ($21 | 0) == 0;
    if ($tobool20) {
      label = 19;
      break;
    } else {
      var $facet_058 = $21;
      label = 10;
      break;
    }
   case 19:
    var $tobool50 = ($facets | 0) == 0;
    if ($tobool50) {
      label = 30;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $p54 = $facets + 4 | 0;
    var $22 = HEAP32[$p54 >> 2];
    var $tobool5752 = ($22 | 0) == 0;
    if ($tobool5752) {
      label = 30;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $23 = $22;
    var $incdec_ptr565164 = $p54 + 4 | 0;
    var $incdec_ptr5651 = $incdec_ptr565164;
    var $incdec_ptr5653 = $incdec_ptr5651;
    var $24 = $23;
    label = 22;
    break;
   case 22:
    var $24;
    var $incdec_ptr5653;
    var $call61 = _qh_skipfacet($24);
    var $tobool62 = ($call61 | 0) == 0;
    if ($tobool62) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $incdec_ptr56 = $incdec_ptr5653 + 4 | 0;
    var $25 = HEAP32[$incdec_ptr5653 >> 2];
    var $tobool57 = ($25 | 0) == 0;
    if ($tobool57) {
      label = 30;
      break;
    } else {
      var $incdec_ptr5653 = $incdec_ptr56;
      var $24 = $25;
      label = 22;
      break;
    }
   case 24:
    var $coplanarset65 = $24 + 64 | 0;
    var $26 = HEAP32[$coplanarset65 >> 2];
    var $tobool66 = ($26 | 0) == 0;
    if ($tobool66) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $p71 = $26 + 4 | 0;
    var $27 = HEAP32[$p71 >> 2];
    var $tobool7449 = ($27 | 0) == 0;
    if ($tobool7449) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $28 = $27;
    var $incdec_ptr734865 = $p71 + 4 | 0;
    var $incdec_ptr7348 = $incdec_ptr734865;
    var $incdec_ptr7350 = $incdec_ptr7348;
    var $29 = $28;
    label = 27;
    break;
   case 27:
    var $29;
    var $incdec_ptr7350;
    var $call76 = _qh_pointid($29);
    var $cmp77 = ($call76 | 0) > -1;
    if ($cmp77) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $30 = $29;
    var $p81 = $call1 + 4 + ($call76 << 2) | 0;
    HEAP32[$p81 >> 2] = $30;
    label = 29;
    break;
   case 29:
    var $incdec_ptr73 = $incdec_ptr7350 + 4 | 0;
    var $31 = HEAP32[$incdec_ptr7350 >> 2];
    var $tobool74 = ($31 | 0) == 0;
    if ($tobool74) {
      label = 23;
      break;
    } else {
      var $incdec_ptr7350 = $incdec_ptr73;
      var $29 = $31;
      label = 27;
      break;
    }
   case 30:
    _qh_settempfree($vertices);
    var $tobool88 = ($call1 | 0) == 0;
    if ($tobool88) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $call93 = _qh_setsize($call1);
    var $cmp9544 = ($call93 | 0) > 0;
    if ($cmp9544) {
      var $point_i_046 = 0;
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $point_i_046;
    var $inc101 = $point_i_046 + 1 | 0;
    var $exitcond66 = ($inc101 | 0) == ($call93 | 0);
    if ($exitcond66) {
      label = 33;
      break;
    } else {
      var $point_i_046 = $inc101;
      label = 32;
      break;
    }
   case 33:
    var $32 = HEAP32[5246972 >> 2];
    var $tobool107 = ($32 | 0) == 0;
    if ($tobool107) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    _qh_fprintf(5265176);
    label = 36;
    break;
   case 35:
    _qh_fprintf(5276208);
    label = 36;
    break;
   case 36:
    if ($tobool88) {
      label = 43;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $p115 = $call1 + 4 | 0;
    var $33 = HEAP32[$p115 >> 2];
    var $call116 = _qh_setsize($call1);
    var $cmp11840 = ($call116 | 0) > 0;
    if ($cmp11840) {
      var $point_i_141 = 0;
      var $point_143_in = $33;
      label = 38;
      break;
    } else {
      label = 43;
      break;
    }
   case 38:
    var $point_143_in;
    var $point_i_141;
    var $point_143 = $point_143_in;
    var $tobool120 = ($point_143_in | 0) == 0;
    if ($tobool120) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $34 = HEAP32[5246972 >> 2];
    var $tobool122 = ($34 | 0) == 0;
    if ($tobool122) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    _qh_fprintf(5277044);
    label = 41;
    break;
   case 41:
    _qh_printpoint(0, $point_143);
    label = 42;
    break;
   case 42:
    var $inc127 = $point_i_141 + 1 | 0;
    var $p130 = $call1 + 4 + ($inc127 << 2) | 0;
    var $35 = HEAP32[$p130 >> 2];
    var $exitcond = ($inc127 | 0) == ($call116 | 0);
    if ($exitcond) {
      label = 43;
      break;
    } else {
      var $point_i_141 = $inc127;
      var $point_143_in = $35;
      label = 38;
      break;
    }
   case 43:
    var $36 = HEAP32[5246972 >> 2];
    var $tobool133 = ($36 | 0) == 0;
    if ($tobool133) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    _qh_fprintf(5260392);
    label = 45;
    break;
   case 45:
    _qh_settempfree($points);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printpoints_out["X"] = 1;
function _qh_printvneighbors($facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numfacets = __stackBase__;
    var $numsimplicial = __stackBase__ + 4;
    var $numridges = __stackBase__ + 8;
    var $totneighbors = __stackBase__ + 12;
    var $numcoplanars = __stackBase__ + 16;
    var $numtricoplanars = __stackBase__ + 20;
    var $vertices = __stackBase__ + 24;
    var $vertex_points = __stackBase__ + 28;
    var $coplanar_points = __stackBase__ + 32;
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($1);
    var $add = $call + $0 | 0;
    _qh_countfacets($facetlist, $facets, 0, $numfacets, $numsimplicial, $totneighbors, $numridges, $numcoplanars, $numtricoplanars);
    _qh_fprintf(5280304);
    _qh_vertexneighbors();
    var $call1 = _qh_facetvertices($facetlist, $facets, 0);
    HEAP32[$vertices >> 2] = $call1;
    var $call2 = _qh_settemp($add);
    HEAP32[$vertex_points >> 2] = $call2;
    var $call3 = _qh_settemp($add);
    HEAP32[$coplanar_points >> 2] = $call3;
    _qh_setzero($call2, $add);
    _qh_setzero($call3, $add);
    var $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool456 = ($2 | 0) == 0;
    if ($tobool456) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $2;
    var $4 = $p;
    var $vertexp_057 = $4;
    var $5 = $3;
    label = 5;
    break;
   case 5:
    var $5;
    var $vertexp_057;
    var $incdec_ptr = $vertexp_057 + 4 | 0;
    var $point5 = $5 + 8 | 0;
    var $6 = HEAP32[$point5 >> 2];
    var $7 = $5;
    _qh_point_add($call2, $6, $7);
    var $8 = HEAP32[$incdec_ptr >> 2];
    var $tobool4 = ($8 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      var $vertexp_057 = $incdec_ptr;
      var $5 = $8;
      label = 5;
      break;
    }
   case 6:
    var $tobool6 = ($facetlist | 0) == 0;
    if ($tobool6) {
      label = 14;
      break;
    } else {
      var $facet_055 = $facetlist;
      label = 7;
      break;
    }
   case 7:
    var $facet_055;
    var $next = $facet_055 + 44 | 0;
    var $9 = HEAP32[$next >> 2];
    var $tobool10 = ($9 | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $coplanarset = $facet_055 + 64 | 0;
    var $10 = HEAP32[$coplanarset >> 2];
    var $tobool12 = ($10 | 0) == 0;
    if ($tobool12) {
      var $facet_055 = $9;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p17 = $10 + 4 | 0;
    var $11 = HEAP32[$p17 >> 2];
    var $tobool2052 = ($11 | 0) == 0;
    if ($tobool2052) {
      var $17 = $9;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $12 = $11;
    var $13 = $p17;
    var $14 = $facet_055;
    var $pointp_053 = $13;
    var $15 = $12;
    label = 11;
    break;
   case 11:
    var $15;
    var $pointp_053;
    var $incdec_ptr19 = $pointp_053 + 4 | 0;
    _qh_point_add($call3, $15, $14);
    var $16 = HEAP32[$incdec_ptr19 >> 2];
    var $tobool20 = ($16 | 0) == 0;
    if ($tobool20) {
      label = 12;
      break;
    } else {
      var $pointp_053 = $incdec_ptr19;
      var $15 = $16;
      label = 11;
      break;
    }
   case 12:
    var $_pre = HEAP32[$next >> 2];
    var $17 = $_pre;
    label = 13;
    break;
   case 13:
    var $17;
    var $tobool9 = ($17 | 0) == 0;
    if ($tobool9) {
      label = 14;
      break;
    } else {
      var $facet_055 = $17;
      label = 7;
      break;
    }
   case 14:
    var $tobool27 = ($facets | 0) == 0;
    if ($tobool27) {
      label = 22;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $p31 = $facets + 4 | 0;
    var $18 = HEAP32[$p31 >> 2];
    var $tobool3450 = ($18 | 0) == 0;
    if ($tobool3450) {
      label = 22;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $19 = $18;
    var $incdec_ptr334958 = $p31 + 4 | 0;
    var $incdec_ptr3349 = $incdec_ptr334958;
    var $incdec_ptr3351 = $incdec_ptr3349;
    var $20 = $19;
    label = 17;
    break;
   case 17:
    var $20;
    var $incdec_ptr3351;
    var $coplanarset36 = $20 + 64 | 0;
    var $21 = HEAP32[$coplanarset36 >> 2];
    var $tobool37 = ($21 | 0) == 0;
    if ($tobool37) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $incdec_ptr33 = $incdec_ptr3351 + 4 | 0;
    var $22 = HEAP32[$incdec_ptr3351 >> 2];
    var $tobool34 = ($22 | 0) == 0;
    if ($tobool34) {
      label = 22;
      break;
    } else {
      var $incdec_ptr3351 = $incdec_ptr33;
      var $20 = $22;
      label = 17;
      break;
    }
   case 19:
    var $p42 = $21 + 4 | 0;
    var $23 = HEAP32[$p42 >> 2];
    var $tobool4547 = ($23 | 0) == 0;
    if ($tobool4547) {
      label = 18;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $24 = $23;
    var $25 = $p42;
    var $26 = $20;
    var $pointp_148 = $25;
    var $27 = $24;
    label = 21;
    break;
   case 21:
    var $27;
    var $pointp_148;
    var $incdec_ptr44 = $pointp_148 + 4 | 0;
    _qh_point_add($call3, $27, $26);
    var $28 = HEAP32[$incdec_ptr44 >> 2];
    var $tobool45 = ($28 | 0) == 0;
    if ($tobool45) {
      label = 18;
      break;
    } else {
      var $pointp_148 = $incdec_ptr44;
      var $27 = $28;
      label = 21;
      break;
    }
   case 22:
    var $tobool51 = ($call2 | 0) == 0;
    if ($tobool51) {
      label = 38;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $p55 = $call2 + 4 | 0;
    var $29 = HEAP32[$p55 >> 2];
    var $call56 = _qh_setsize($call2);
    var $cmp43 = ($call56 | 0) > 0;
    if ($cmp43) {
      var $vertex_i_044 = 0;
      var $vertex_046_in = $29;
      label = 24;
      break;
    } else {
      label = 38;
      break;
    }
   case 24:
    var $vertex_046_in;
    var $vertex_i_044;
    var $vertex_046 = $vertex_046_in;
    var $tobool59 = ($vertex_046_in | 0) == 0;
    if ($tobool59) {
      label = 34;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $neighbors = $vertex_046_in + 12 | 0;
    var $30 = $neighbors;
    var $31 = HEAP32[$30 >> 2];
    var $call61 = _qh_setsize($31);
    _qh_fprintf(5284892);
    var $32 = HEAP32[5247504 >> 2];
    var $cmp62 = ($32 | 0) == 3;
    if ($cmp62) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_order_vertexneighbors($vertex_046);
    label = 29;
    break;
   case 27:
    var $cmp64 = ($32 | 0) > 3;
    if ($cmp64) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $33 = HEAP32[$30 >> 2];
    var $p69 = $33 + 4 | 0;
    var $34 = $p69;
    _qsort($34, $call61, 4, 14);
    label = 29;
    break;
   case 29:
    var $35 = HEAP32[$30 >> 2];
    var $tobool73 = ($35 | 0) == 0;
    if ($tobool73) {
      label = 33;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $p78 = $35 + 4 | 0;
    var $36 = HEAP32[$p78 >> 2];
    var $tobool8140 = ($36 | 0) == 0;
    if ($tobool8140) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $incdec_ptr803959 = $p78 + 4 | 0;
    var $incdec_ptr8039 = $incdec_ptr803959;
    var $incdec_ptr8041 = $incdec_ptr8039;
    label = 32;
    break;
   case 32:
    var $incdec_ptr8041;
    _qh_fprintf(5295004);
    var $incdec_ptr80 = $incdec_ptr8041 + 4 | 0;
    var $37 = HEAP32[$incdec_ptr8041 >> 2];
    var $tobool81 = ($37 | 0) == 0;
    if ($tobool81) {
      label = 33;
      break;
    } else {
      var $incdec_ptr8041 = $incdec_ptr80;
      label = 32;
      break;
    }
   case 33:
    _qh_fprintf(5299656);
    label = 37;
    break;
   case 34:
    var $p91 = $call3 + 4 + ($vertex_i_044 << 2) | 0;
    var $38 = HEAP32[$p91 >> 2];
    var $tobool92 = ($38 | 0) == 0;
    if ($tobool92) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    _qh_fprintf(5287244);
    label = 37;
    break;
   case 36:
    _qh_fprintf(5287112);
    label = 37;
    break;
   case 37:
    var $inc = $vertex_i_044 + 1 | 0;
    var $p110 = $call2 + 4 + ($inc << 2) | 0;
    var $39 = HEAP32[$p110 >> 2];
    var $exitcond = ($inc | 0) == ($call56 | 0);
    if ($exitcond) {
      label = 38;
      break;
    } else {
      var $vertex_i_044 = $inc;
      var $vertex_046_in = $39;
      label = 24;
      break;
    }
   case 38:
    _qh_settempfree($coplanar_points);
    _qh_settempfree($vertex_points);
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printvneighbors["X"] = 1;
function _qh_printvoronoi($format, $facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numcenters = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $isLower = __stackBase__ + 8;
    var $0 = HEAP32[5248992 >> 2];
    var $call = _qh_markvoronoi($facetlist, $facets, $isLower, $numcenters);
    HEAP32[$vertices >> 2] = $call;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      var $8 = 0;
      label = 14;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $call + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $call1 = _qh_setsize($call);
    var $cmp129 = ($call1 | 0) > 0;
    if ($cmp129) {
      var $numvertices_0130 = 0;
      var $vertex_i_0131 = 0;
      var $vertex_0_in133 = $1;
      label = 4;
      break;
    } else {
      var $8 = $call;
      label = 14;
      break;
    }
   case 4:
    var $vertex_0_in133;
    var $vertex_i_0131;
    var $numvertices_0130;
    var $tobool2 = ($vertex_0_in133 | 0) == 0;
    if ($tobool2) {
      var $numvertices_1 = $numvertices_0130;
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $inc = $numvertices_0130 + 1 | 0;
    var $neighbors = $vertex_0_in133 + 12 | 0;
    var $2 = $neighbors;
    var $3 = HEAP32[$2 >> 2];
    var $tobool4 = ($3 | 0) == 0;
    if ($tobool4) {
      var $numvertices_1 = $inc;
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p9 = $3 + 4 | 0;
    var $4 = $p9;
    var $neighborp_0_ph = $4;
    var $numinf_0_ph = 0;
    var $numneighbors_0_ph = 0;
    label = 7;
    break;
   case 7:
    var $numneighbors_0_ph;
    var $numinf_0_ph;
    var $neighborp_0_ph;
    var $neighborp_0 = $neighborp_0_ph;
    var $numinf_0 = $numinf_0_ph;
    label = 8;
    break;
   case 8:
    var $numinf_0;
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $5 = HEAP32[$neighborp_0 >> 2];
    var $tobool11 = ($5 | 0) == 0;
    if ($tobool11) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $visitid = $5 + 68 | 0;
    var $6 = HEAP32[$visitid >> 2];
    var $cmp13 = ($6 | 0) == 0;
    if ($cmp13) {
      var $neighborp_0 = $incdec_ptr;
      var $numinf_0 = 1;
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $cmp16 = $6 >>> 0 < $0 >>> 0;
    var $inc18 = $cmp16 & 1;
    var $inc18_numneighbors_0 = $inc18 + $numneighbors_0_ph | 0;
    var $neighborp_0_ph = $incdec_ptr;
    var $numinf_0_ph = $numinf_0;
    var $numneighbors_0_ph = $inc18_numneighbors_0;
    label = 7;
    break;
   case 11:
    var $tobool21 = ($numinf_0 | 0) != 0;
    var $tobool22 = ($numneighbors_0_ph | 0) == 0;
    var $or_cond = $tobool21 & $tobool22;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $numvertices_1 = $inc;
      label = 13;
      break;
    }
   case 12:
    var $p26 = $call + 4 + ($vertex_i_0131 << 2) | 0;
    HEAP32[$p26 >> 2] = 0;
    var $numvertices_1 = $numvertices_0130;
    label = 13;
    break;
   case 13:
    var $numvertices_1;
    var $inc29 = $vertex_i_0131 + 1 | 0;
    var $p32 = $call + 4 + ($inc29 << 2) | 0;
    var $7 = HEAP32[$p32 >> 2];
    var $exitcond149 = ($inc29 | 0) == ($call1 | 0);
    if ($exitcond149) {
      var $8 = $call;
      label = 14;
      break;
    } else {
      var $numvertices_0130 = $numvertices_1;
      var $vertex_i_0131 = $inc29;
      var $vertex_0_in133 = $7;
      label = 4;
      break;
    }
   case 14:
    var $8;
    var $cmp35 = ($format | 0) == 7;
    if ($cmp35) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5287044);
    var $9 = HEAP32[5247504 >> 2];
    var $k_0120 = $9 - 1 | 0;
    var $tobool45121 = ($k_0120 | 0) == 0;
    if ($tobool45121) {
      label = 18;
      break;
    } else {
      var $k_0122 = $k_0120;
      label = 17;
      break;
    }
   case 16:
    var $call38 = _qh_setsize($8);
    _qh_fprintf(5286912);
    var $10 = HEAP32[5247504 >> 2];
    var $k_1123 = $10 - 1 | 0;
    var $tobool52124 = ($k_1123 | 0) == 0;
    if ($tobool52124) {
      label = 20;
      break;
    } else {
      var $k_1125 = $k_1123;
      label = 19;
      break;
    }
   case 17:
    var $k_0122;
    _qh_fprintf(5290352);
    var $k_0 = $k_0122 - 1 | 0;
    var $tobool45 = ($k_0 | 0) == 0;
    if ($tobool45) {
      label = 18;
      break;
    } else {
      var $k_0122 = $k_0;
      label = 17;
      break;
    }
   case 18:
    _qh_fprintf(5286768);
    label = 21;
    break;
   case 19:
    var $k_1125;
    _qh_fprintf(5290352);
    var $k_1 = $k_1125 - 1 | 0;
    var $tobool52 = ($k_1 | 0) == 0;
    if ($tobool52) {
      label = 20;
      break;
    } else {
      var $k_1125 = $k_1;
      label = 19;
      break;
    }
   case 20:
    _qh_fprintf(5299656);
    label = 21;
    break;
   case 21:
    var $tobool56 = ($facetlist | 0) == 0;
    if ($tobool56) {
      var $vid_3 = 1;
      label = 27;
      break;
    } else {
      var $vid_0118 = 1;
      var $facet_0119 = $facetlist;
      label = 22;
      break;
    }
   case 22:
    var $facet_0119;
    var $vid_0118;
    var $next = $facet_0119 + 44 | 0;
    var $11 = HEAP32[$next >> 2];
    var $tobool60 = ($11 | 0) == 0;
    if ($tobool60) {
      var $vid_3 = $vid_0118;
      label = 27;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $visitid62 = $facet_0119 + 68 | 0;
    var $12 = HEAP32[$visitid62 >> 2];
    var $tobool63 = ($12 | 0) != 0;
    var $cmp66 = $12 >>> 0 < $0 >>> 0;
    var $or_cond87 = $tobool63 & $cmp66;
    if ($or_cond87) {
      label = 24;
      break;
    } else {
      var $vid_0118 = $vid_0118;
      var $facet_0119 = $11;
      label = 22;
      break;
    }
   case 24:
    if ($cmp35) {
      label = 25;
      break;
    } else {
      var $vid_1 = $vid_0118;
      label = 26;
      break;
    }
   case 25:
    var $inc70 = $vid_0118 + 1 | 0;
    _qh_fprintf(5286532);
    var $vid_1 = $inc70;
    label = 26;
    break;
   case 26:
    var $vid_1;
    _qh_printcenter($format, 0, $facet_0119);
    var $_pre = HEAP32[$next >> 2];
    var $tobool59 = ($_pre | 0) == 0;
    if ($tobool59) {
      var $vid_3 = $vid_1;
      label = 27;
      break;
    } else {
      var $vid_0118 = $vid_1;
      var $facet_0119 = $_pre;
      label = 22;
      break;
    }
   case 27:
    var $vid_3;
    var $tobool77 = ($facets | 0) == 0;
    if ($tobool77) {
      label = 35;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $p81 = $facets + 4 | 0;
    var $13 = $p81;
    var $facetp_0_ph = $13;
    var $vid_4_ph = $vid_3;
    label = 29;
    break;
   case 29:
    var $vid_4_ph;
    var $facetp_0_ph;
    var $facetp_0 = $facetp_0_ph;
    label = 30;
    break;
   case 30:
    var $facetp_0;
    var $incdec_ptr83 = $facetp_0 + 4 | 0;
    var $14 = HEAP32[$facetp_0 >> 2];
    var $tobool84 = ($14 | 0) == 0;
    if ($tobool84) {
      label = 35;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $visitid86 = $14 + 68 | 0;
    var $15 = HEAP32[$visitid86 >> 2];
    var $tobool87 = ($15 | 0) != 0;
    var $cmp90 = $15 >>> 0 < $0 >>> 0;
    var $or_cond88 = $tobool87 & $cmp90;
    if ($or_cond88) {
      label = 32;
      break;
    } else {
      var $facetp_0 = $incdec_ptr83;
      label = 30;
      break;
    }
   case 32:
    if ($cmp35) {
      label = 33;
      break;
    } else {
      var $vid_5 = $vid_4_ph;
      label = 34;
      break;
    }
   case 33:
    var $inc94 = $vid_4_ph + 1 | 0;
    _qh_fprintf(5286532);
    var $vid_5 = $inc94;
    label = 34;
    break;
   case 34:
    var $vid_5;
    _qh_printcenter($format, 0, $14);
    var $facetp_0_ph = $incdec_ptr83;
    var $vid_4_ph = $vid_5;
    label = 29;
    break;
   case 35:
    var $tobool100 = ($8 | 0) == 0;
    if ($tobool100) {
      label = 71;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $p104 = $8 + 4 | 0;
    var $16 = HEAP32[$p104 >> 2];
    var $call105 = _qh_setsize($8);
    var $cmp107109 = ($call105 | 0) > 0;
    if ($cmp107109) {
      var $vertex_i_1110 = 0;
      var $vertex_1113_in = $16;
      label = 37;
      break;
    } else {
      label = 71;
      break;
    }
   case 37:
    var $vertex_1113_in;
    var $vertex_i_1110;
    var $vertex_1113 = $vertex_1113_in;
    var $tobool109 = ($vertex_1113_in | 0) != 0;
    if ($tobool109) {
      label = 38;
      break;
    } else {
      var $numinf_3 = 0;
      label = 47;
      break;
    }
   case 38:
    var $17 = HEAP32[5247504 >> 2];
    var $cmp111 = ($17 | 0) == 3;
    if ($cmp111) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _qh_order_vertexneighbors($vertex_1113);
    label = 42;
    break;
   case 40:
    var $cmp114 = ($17 | 0) > 3;
    if ($cmp114) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    var $neighbors116 = $vertex_1113_in + 12 | 0;
    var $18 = $neighbors116;
    var $19 = HEAP32[$18 >> 2];
    var $p119 = $19 + 4 | 0;
    var $20 = $p119;
    var $call121 = _qh_setsize($19);
    _qsort($20, $call121, 4, 14);
    label = 42;
    break;
   case 42:
    var $neighbors124 = $vertex_1113_in + 12 | 0;
    var $21 = $neighbors124;
    var $22 = HEAP32[$21 >> 2];
    var $tobool125 = ($22 | 0) == 0;
    if ($tobool125) {
      var $numinf_3 = 0;
      label = 47;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $p130 = $22 + 4 | 0;
    var $23 = $p130;
    var $neighborp_1_ph = $23;
    var $numinf_2_ph = 0;
    label = 44;
    break;
   case 44:
    var $numinf_2_ph;
    var $neighborp_1_ph;
    var $neighborp_1 = $neighborp_1_ph;
    label = 45;
    break;
   case 45:
    var $neighborp_1;
    var $incdec_ptr132 = $neighborp_1 + 4 | 0;
    var $24 = HEAP32[$neighborp_1 >> 2];
    var $tobool133 = ($24 | 0) == 0;
    if ($tobool133) {
      var $numinf_3 = $numinf_2_ph;
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $visitid135 = $24 + 68 | 0;
    var $25 = HEAP32[$visitid135 >> 2];
    var $cmp136 = ($25 | 0) == 0;
    if ($cmp136) {
      var $neighborp_1_ph = $incdec_ptr132;
      var $numinf_2_ph = 1;
      label = 44;
      break;
    } else {
      var $neighborp_1 = $incdec_ptr132;
      label = 45;
      break;
    }
   case 47:
    var $numinf_3;
    if ($cmp35) {
      label = 48;
      break;
    } else {
      label = 57;
      break;
    }
   case 48:
    if ($tobool109) {
      label = 49;
      break;
    } else {
      label = 56;
      break;
    }
   case 49:
    _qh_fprintf(5284892);
    var $neighbors152 = $vertex_1113_in + 12 | 0;
    var $26 = $neighbors152;
    var $27 = HEAP32[$26 >> 2];
    var $tobool153 = ($27 | 0) == 0;
    if ($tobool153) {
      label = 55;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $p158 = $27 + 4 | 0;
    var $28 = HEAP32[$p158 >> 2];
    var $tobool161102 = ($28 | 0) == 0;
    if ($tobool161102) {
      label = 55;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $29 = $28;
    var $incdec_ptr160101136 = $p158 + 4 | 0;
    var $incdec_ptr160101 = $incdec_ptr160101136;
    var $incdec_ptr160103 = $incdec_ptr160101;
    var $30 = $29;
    label = 52;
    break;
   case 52:
    var $30;
    var $incdec_ptr160103;
    var $visitid163 = $30 + 68 | 0;
    var $31 = HEAP32[$visitid163 >> 2];
    var $tobool164 = ($31 | 0) != 0;
    var $cmp167 = $31 >>> 0 < $0 >>> 0;
    var $or_cond89 = $tobool164 & $cmp167;
    if ($or_cond89) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    _qh_fprintf(5295004);
    label = 54;
    break;
   case 54:
    var $incdec_ptr160 = $incdec_ptr160103 + 4 | 0;
    var $32 = HEAP32[$incdec_ptr160103 >> 2];
    var $tobool161 = ($32 | 0) == 0;
    if ($tobool161) {
      label = 55;
      break;
    } else {
      var $incdec_ptr160103 = $incdec_ptr160;
      var $30 = $32;
      label = 52;
      break;
    }
   case 55:
    _qh_fprintf(5285780);
    label = 70;
    break;
   case 56:
    _qh_fprintf(5285700);
    label = 70;
    break;
   case 57:
    _qh_fprintf(5284892);
    if ($tobool109) {
      label = 58;
      break;
    } else {
      label = 69;
      break;
    }
   case 58:
    var $neighbors182 = $vertex_1113_in + 12 | 0;
    var $33 = $neighbors182;
    var $34 = HEAP32[$33 >> 2];
    var $tobool183 = ($34 | 0) == 0;
    if ($tobool183) {
      label = 69;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $p188 = $34 + 4 | 0;
    var $35 = HEAP32[$p188 >> 2];
    var $tobool19199105 = ($35 | 0) == 0;
    if ($tobool19199105) {
      label = 69;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $36 = $35;
    var $incdec_ptr19098104135 = $p188 + 4 | 0;
    var $incdec_ptr19098104 = $incdec_ptr19098104135;
    var $numinf_4_ph106 = $numinf_3;
    var $incdec_ptr19098107 = $incdec_ptr19098104;
    var $37 = $36;
    label = 61;
    break;
   case 61:
    var $37;
    var $incdec_ptr19098107;
    var $numinf_4_ph106;
    var $incdec_ptr190100 = $incdec_ptr19098107;
    var $38 = $37;
    label = 62;
    break;
   case 62:
    var $38;
    var $incdec_ptr190100;
    var $visitid193 = $38 + 68 | 0;
    var $39 = HEAP32[$visitid193 >> 2];
    var $cmp194 = ($39 | 0) == 0;
    if ($cmp194) {
      label = 63;
      break;
    } else {
      label = 66;
      break;
    }
   case 63:
    var $tobool196 = ($numinf_4_ph106 | 0) == 0;
    if ($tobool196) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    _qh_fprintf(5295004);
    label = 65;
    break;
   case 65:
    var $incdec_ptr19098 = $incdec_ptr190100 + 4 | 0;
    var $40 = HEAP32[$incdec_ptr190100 >> 2];
    var $tobool19199 = ($40 | 0) == 0;
    if ($tobool19199) {
      label = 69;
      break;
    } else {
      var $numinf_4_ph106 = 0;
      var $incdec_ptr19098107 = $incdec_ptr19098;
      var $37 = $40;
      label = 61;
      break;
    }
   case 66:
    var $cmp202 = $39 >>> 0 < $0 >>> 0;
    if ($cmp202) {
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $incdec_ptr190 = $incdec_ptr190100 + 4 | 0;
    var $41 = HEAP32[$incdec_ptr190100 >> 2];
    var $tobool191 = ($41 | 0) == 0;
    if ($tobool191) {
      label = 69;
      break;
    } else {
      var $incdec_ptr190100 = $incdec_ptr190;
      var $38 = $41;
      label = 62;
      break;
    }
   case 68:
    _qh_fprintf(5295004);
    label = 67;
    break;
   case 69:
    _qh_fprintf(5299656);
    label = 70;
    break;
   case 70:
    var $inc212 = $vertex_i_1110 + 1 | 0;
    var $p215 = $8 + 4 + ($inc212 << 2) | 0;
    var $42 = HEAP32[$p215 >> 2];
    var $exitcond = ($inc212 | 0) == ($call105 | 0);
    if ($exitcond) {
      label = 71;
      break;
    } else {
      var $vertex_i_1110 = $inc212;
      var $vertex_1113_in = $42;
      label = 37;
      break;
    }
   case 71:
    if ($cmp35) {
      label = 72;
      break;
    } else {
      label = 73;
      break;
    }
   case 72:
    _qh_fprintf(5260860);
    label = 73;
    break;
   case 73:
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printvoronoi["X"] = 1;
function _qh_printvdiagram($fp, $format, $facetlist, $facets) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $numcenters = __stackBase__ + 4;
    var $isLower = __stackBase__ + 8;
    if (($format | 0) == 9) {
      label = 3;
      break;
    } else if (($format | 0) == 12) {
      label = 4;
      break;
    } else if (($format | 0) == 26) {
      var $printvridge_0 = 2;
      var $innerouter_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $printvridge_0 = 12;
    var $innerouter_0 = 1;
    label = 6;
    break;
   case 4:
    var $printvridge_0 = 12;
    var $innerouter_0 = 2;
    label = 6;
    break;
   case 5:
    _qh_fprintf(5288552);
    _qh_errexit(1, 0, 0);
    var $printvridge_0 = 0;
    var $innerouter_0 = 0;
    label = 6;
    break;
   case 6:
    var $innerouter_0;
    var $printvridge_0;
    var $call = _qh_markvoronoi($facetlist, $facets, $isLower, $numcenters);
    HEAP32[$vertices >> 2] = $call;
    _qh_printvdiagram2(0, 0, $call, $innerouter_0, 0);
    _qh_fprintf(5280304);
    _qh_printvdiagram2($fp, $printvridge_0, $call, $innerouter_0, 1);
    _qh_settempfree($vertices);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printneighborhood($fp, $format, $facetA, $facetB) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $facets = __stackBase__;
    var $cmp = ($format | 0) == 0;
    if ($cmp) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5248940 >> 2];
    _qh_findgood_all($0);
    var $cmp1 = ($facetA | 0) == ($facetB | 0);
    var $_facetB = $cmp1 ? 0 : $facetB;
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $call = _qh_setsize($1);
    var $add = $call << 1;
    var $mul = $add + 2 | 0;
    var $call4 = _qh_settemp($mul);
    HEAP32[$facets >> 2] = $call4;
    var $2 = HEAP32[5249152 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $tobool19 = ($facetA | 0) == 0;
    if ($tobool19) {
      var $14 = $call4;
      label = 17;
      break;
    } else {
      var $facet_020 = $facetA;
      var $3 = $inc;
      label = 4;
      break;
    }
   case 4:
    var $3;
    var $facet_020;
    var $visitid = $facet_020 + 68 | 0;
    var $4 = HEAP32[$visitid >> 2];
    var $cmp5 = ($4 | 0) == ($3 | 0);
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[$visitid >> 2] = $3;
    var $5 = $facet_020;
    _qh_setappend($facets, $5);
    label = 6;
    break;
   case 6:
    var $neighbors9 = $facet_020 + 56 | 0;
    var $6 = HEAP32[$neighbors9 >> 2];
    var $tobool10 = ($6 | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool1417 = ($7 | 0) == 0;
    if ($tobool1417) {
      label = 14;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $8 = $7;
    var $incdec_ptr1621 = $p + 4 | 0;
    var $incdec_ptr16 = $incdec_ptr1621;
    var $incdec_ptr18 = $incdec_ptr16;
    var $9 = $8;
    label = 9;
    break;
   case 9:
    var $9;
    var $incdec_ptr18;
    var $visitid16 = $9 + 68 | 0;
    var $10 = HEAP32[$visitid16 >> 2];
    var $11 = HEAP32[5249152 >> 2];
    var $cmp17 = ($10 | 0) == ($11 | 0);
    if ($cmp17) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    var $12 = HEAP32[$incdec_ptr18 >> 2];
    var $tobool14 = ($12 | 0) == 0;
    if ($tobool14) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $incdec_ptr = $incdec_ptr18 + 4 | 0;
    var $incdec_ptr18 = $incdec_ptr;
    var $9 = $12;
    label = 9;
    break;
   case 12:
    HEAP32[$visitid16 >> 2] = $11;
    var $call22 = _qh_skipfacet($9);
    var $tobool23 = ($call22 | 0) == 0;
    if ($tobool23) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 13:
    var $13 = $9;
    _qh_setappend($facets, $13);
    label = 10;
    break;
   case 14:
    var $cmp27 = ($facet_020 | 0) == ($facetA | 0);
    var $cond = $cmp27 ? $_facetB : 0;
    var $tobool = ($cond | 0) == 0;
    if ($tobool) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $_pre1 = HEAP32[5249152 >> 2];
    var $facet_020 = $cond;
    var $3 = $_pre1;
    label = 4;
    break;
   case 16:
    var $_pre = HEAP32[$facets >> 2];
    var $14 = $_pre;
    label = 17;
    break;
   case 17:
    var $14;
    _qh_printfacets($fp, $format, 0, $14);
    _qh_settempfree($facets);
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printneighborhood["X"] = 1;
function _qh_printvridge($fp, $vertex, $vertexA, $centers, $unbounded) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _qh_setsize($centers);
    _qh_fprintf(5285392);
    var $tobool = ($centers | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $centers + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool45 = ($0 | 0) == 0;
    if ($tobool45) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $p;
    var $facetp_06 = $1;
    label = 5;
    break;
   case 5:
    var $facetp_06;
    var $incdec_ptr = $facetp_06 + 4 | 0;
    _qh_fprintf(5295004);
    var $2 = HEAP32[$incdec_ptr >> 2];
    var $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      var $facetp_06 = $incdec_ptr;
      label = 5;
      break;
    }
   case 6:
    _qh_fprintf(5299656);
    return;
  }
}
function _qh_printvnorm($fp, $vertex, $vertexA, $centers, $unbounded) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $offset = __stackBase__;
    var $call = _qh_detvnorm($vertex, $vertexA, $centers, $offset);
    _qh_fprintf(5285540);
    var $0 = HEAP32[5247504 >> 2];
    var $sub7 = $0 - 1 | 0;
    var $cmp8 = ($sub7 | 0) > 0;
    if ($cmp8) {
      var $k_09 = 0;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $k_09;
    _qh_fprintf(5290352);
    var $inc = $k_09 + 1 | 0;
    var $1 = HEAP32[5247504 >> 2];
    var $sub = $1 - 1 | 0;
    var $cmp = ($inc | 0) < ($sub | 0);
    if ($cmp) {
      var $k_09 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5290352);
    _qh_fprintf(5299656);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printvdiagram2($fp, $printvridge, $vertices, $innerouter, $inorder) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertex_018 = HEAP32[5248980 >> 2];
    var $tobool19 = ($vertex_018 | 0) == 0;
    if ($tobool19) {
      label = 5;
      break;
    } else {
      var $vertex_020 = $vertex_018;
      label = 3;
      break;
    }
   case 3:
    var $vertex_020;
    var $next = $vertex_020 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $vertex_020 + 20 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $3 & -268435457;
    HEAP32[$2 >> 2] = $4;
    var $vertex_020 = $0;
    label = 3;
    break;
   case 5:
    var $tobool3 = ($vertices | 0) == 0;
    if ($tobool3) {
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $vertices + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $call = _qh_setsize($vertices);
    var $cmp13 = ($call | 0) > 0;
    if ($cmp13) {
      var $vertex_i_014 = 0;
      var $totcount_015 = 0;
      var $vertex_117_in = $5;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $vertex_117_in;
    var $totcount_015;
    var $vertex_i_014;
    var $vertex_117 = $vertex_117_in;
    var $tobool6 = ($vertex_117_in | 0) == 0;
    if ($tobool6) {
      var $totcount_1 = $totcount_015;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $6 = HEAP32[5247024 >> 2];
    var $cmp8 = ($6 | 0) > 0;
    if ($cmp8) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $point = $vertex_117_in + 8 | 0;
    var $7 = $point;
    var $8 = HEAP32[$7 >> 2];
    var $call9 = _qh_pointid($8);
    var $add = $call9 + 1 | 0;
    var $cmp10 = ($add | 0) == ($6 | 0);
    if ($cmp10) {
      label = 10;
      break;
    } else {
      var $totcount_1 = $totcount_015;
      label = 11;
      break;
    }
   case 10:
    var $call12 = _qh_eachvoronoi($fp, $printvridge, $vertex_117, $innerouter, $inorder);
    var $add13 = $call12 + $totcount_015 | 0;
    var $totcount_1 = $add13;
    label = 11;
    break;
   case 11:
    var $totcount_1;
    var $inc = $vertex_i_014 + 1 | 0;
    var $p18 = $vertices + 4 + ($inc << 2) | 0;
    var $9 = HEAP32[$p18 >> 2];
    var $exitcond = ($inc | 0) == ($call | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $vertex_i_014 = $inc;
      var $totcount_015 = $totcount_1;
      var $vertex_117_in = $9;
      label = 7;
      break;
    }
   case 12:
    return;
  }
}
function _qh_qhull() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numoutside = __stackBase__;
    var $call = _clock();
    HEAP32[5249020 >> 2] = $call;
    var $0 = HEAP32[5247376 >> 2];
    var $tobool = ($0 | 0) != 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $1 < 8.988465674311579e+307;
    var $or_cond = $tobool | $cmp;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_build_withrestart();
    label = 5;
    break;
   case 4:
    _qh_initbuild();
    _qh_buildhull();
    label = 5;
    break;
   case 5:
    var $2 = HEAP32[5247412 >> 2];
    var $3 = HEAP32[5247408 >> 2];
    var $4 = $3 | $2;
    var $5 = ($4 | 0) == 0;
    if ($5) {
      label = 6;
      break;
    } else {
      label = 28;
      break;
    }
   case 6:
    var $6 = HEAP32[5249160 >> 2];
    var $7 = HEAP32[5247420 >> 2];
    var $notlhs = ($6 | 0) != 0;
    var $notrhs = ($7 | 0) == 0;
    var $or_cond2_not = $notrhs & $notlhs;
    var $8 = HEAP32[5247072 >> 2];
    var $tobool8 = ($8 | 0) != 0;
    var $or_cond3 = $or_cond2_not & $tobool8;
    if ($or_cond3) {
      label = 7;
      break;
    } else {
      var $10 = $6;
      var $9 = $7;
      label = 8;
      break;
    }
   case 7:
    var $call10 = _qh_checkzero(1);
    var $_pre = HEAP32[5249160 >> 2];
    var $_pre1 = HEAP32[5247420 >> 2];
    var $10 = $_pre;
    var $9 = $_pre1;
    label = 8;
    break;
   case 8:
    var $9;
    var $10;
    var $tobool12 = ($10 | 0) == 0;
    var $tobool14 = ($9 | 0) != 0;
    var $or_cond4 = $tobool12 | $tobool14;
    var $11 = HEAP32[5249164 >> 2];
    var $tobool16 = ($11 | 0) != 0;
    var $or_cond5 = $or_cond4 | $tobool16;
    if ($or_cond5) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $12 = HEAP32[5247036 >> 2];
    var $cmp18 = ($12 | 0) > 1;
    if ($cmp18) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5266824);
    label = 11;
    break;
   case 11:
    HEAP32[5247484 >> 2] = 0;
    label = 26;
    break;
   case 12:
    var $13 = HEAP32[5247072 >> 2];
    var $tobool22 = ($13 | 0) == 0;
    if ($tobool22) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $14 = HEAP32[5247504 >> 2];
    var $cmp24 = ($14 | 0) > 5;
    var $15 = HEAP32[5247140 >> 2];
    var $tobool26 = ($15 | 0) != 0;
    var $or_cond6 = $cmp24 & $tobool26;
    if ($or_cond6) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $18 = HEAP32[5247136 >> 2];
    var $tobool28 = ($18 | 0) != 0;
    var $cond = $tobool28 ? 0 : $9;
    _qh_postmerge($16, $17, $cond);
    label = 17;
    break;
   case 15:
    var $19 = HEAP32[5247136 >> 2];
    var $tobool30 = ($19 | 0) == 0;
    var $or_cond7 = $tobool30 & $tobool14;
    if ($or_cond7) {
      label = 16;
      break;
    } else {
      var $22 = $19;
      label = 18;
      break;
    }
   case 16:
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_postmerge($20, $21, 1);
    label = 17;
    break;
   case 17:
    var $_pr = HEAP32[5247136 >> 2];
    var $22 = $_pr;
    label = 18;
    break;
   case 18:
    var $22;
    var $tobool36 = ($22 | 0) == 0;
    if ($tobool36) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247092 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247096 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246988 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246992 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = HEAP32[5247420 >> 2];
    _qh_postmerge($23, $24, $25);
    label = 20;
    break;
   case 20:
    var $26 = HEAP32[5248956 >> 2];
    var $27 = HEAP32[5248940 >> 2];
    var $cmp39 = ($26 | 0) == ($27 | 0);
    if ($cmp39) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[5249092 >> 2] = 1;
    _qh_partitionvisible($numoutside);
    HEAP32[5249092 >> 2] = 0;
    _qh_deletevisible();
    _qh_resetlists(0, 1);
    label = 22;
    break;
   case 22:
    var $_pr9 = HEAP32[5247484 >> 2];
    var $tobool43 = ($_pr9 | 0) == 0;
    if ($tobool43) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $28 = HEAP32[5247368 >> 2];
    var $tobool45 = ($28 | 0) == 0;
    if ($tobool45) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_buildtracing(0, 0);
    _qh_fprintf(5266936);
    label = 25;
    break;
   case 25:
    _qh_check_maxout();
    label = 26;
    break;
   case 26:
    var $29 = HEAP32[5247500 >> 2];
    var $tobool49 = ($29 | 0) == 0;
    var $30 = HEAP32[5249060 >> 2];
    var $tobool51 = ($30 | 0) != 0;
    var $or_cond8 = $tobool49 | $tobool51;
    if ($or_cond8) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    _qh_nearcoplanar();
    label = 28;
    break;
   case 28:
    var $31 = HEAP32[5242928 >> 2];
    var $call55 = _qh_setsize($31);
    var $cmp56 = ($call55 | 0) == 0;
    if ($cmp56) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $32 = HEAP32[5242928 >> 2];
    var $call58 = _qh_setsize($32);
    _qh_fprintf(5263124);
    _qh_errexit(5, 0, 0);
    label = 30;
    break;
   case 30:
    var $call60 = _clock();
    var $33 = HEAP32[5249020 >> 2];
    var $sub = $call60 - $33 | 0;
    HEAP32[5249020 >> 2] = $sub;
    HEAP32[5249132 >> 2] = 1;
    var $34 = HEAP32[5247036 >> 2];
    var $cmp61 = ($34 | 0) > 0;
    if ($cmp61) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5259136);
    label = 32;
    break;
   case 32:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_qhull["X"] = 1;
function _qh_build_withrestart() {
  var label = 0;
  label = 2;
  var mySetjmpIds = {};
  var setjmpTable = {
    "3": (function(value) {
      label = 25;
      $call = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (label) {
     case 2:
      HEAP32[5249024 >> 2] = 1;
      label = 3;
      break;
     case 3:
      var $call = (tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label, HEAP32[5248830 >> 2] = tempInt, 0);
      label = 25;
      break;
     case 25:
      var $tobool = ($call | 0) != 0;
      if ($tobool) {
        label = 5;
        break;
      } else {
        label = 4;
        break;
      }
     case 4:
      var $_pre1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $3 = $_pre1;
      label = 8;
      break;
     case 5:
      var $0 = HEAP32[5244424 >> 2];
      var $inc = $0 + 1 | 0;
      HEAP32[5244424 >> 2] = $inc;
      var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244432 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244436 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp = $1 < $2;
      if ($cmp) {
        label = 6;
        break;
      } else {
        label = 7;
        break;
      }
     case 6:
      HEAPF64[tempDoublePtr >> 3] = $2, HEAP32[5244432 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244436 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      label = 7;
      break;
     case 7:
      HEAP32[5247408 >> 2] = -1;
      var $3 = $2;
      label = 8;
      break;
     case 8:
      var $3;
      var $4 = HEAP32[5247376 >> 2];
      var $tobool3 = ($4 | 0) == 0;
      var $cmp4 = $3 < 8.988465674311579e+307;
      var $or_cond = $tobool3 & $cmp4;
      var $5 = HEAP32[5249028 >> 2];
      if ($or_cond) {
        label = 9;
        break;
      } else {
        label = 12;
        break;
      }
     case 9:
      var $cmp6 = ($5 | 0) > 100;
      if ($cmp6) {
        label = 10;
        break;
      } else {
        var $6 = $5;
        label = 11;
        break;
      }
     case 10:
      _qh_fprintf(5250664);
      _qh_errexit(5, 0, 0);
      var $_pre = HEAP32[5249028 >> 2];
      var $6 = $_pre;
      label = 11;
      break;
     case 11:
      var $6;
      var $tobool9 = ($6 | 0) == 0;
      var $brmerge = $tobool9 | $tobool;
      if ($brmerge) {
        label = 13;
        break;
      } else {
        label = 24;
        break;
      }
     case 12:
      var $tobool14 = ($5 | 0) == 0;
      var $cmp16 = ($5 | 0) < ($4 | 0);
      var $or_cond5 = $tobool14 | $cmp16;
      if ($or_cond5) {
        label = 13;
        break;
      } else {
        label = 24;
        break;
      }
     case 13:
      HEAP32[5247408 >> 2] = 0;
      _qh_freebuild();
      var $7 = HEAP32[5249028 >> 2];
      var $inc20 = $7 + 1 | 0;
      HEAP32[5249028 >> 2] = $inc20;
      var $8 = HEAP32[5248564 >> 2];
      var $tobool21 = ($8 | 0) == 0;
      if ($tobool21) {
        label = 14;
        break;
      } else {
        label = 15;
        break;
      }
     case 14:
      var $call23 = _strlen(5248048);
      HEAP32[5248564 >> 2] = $call23;
      label = 16;
      break;
     case 15:
      var $arrayidx = $8 + 5248048 | 0;
      HEAP8[$arrayidx] = 0;
      HEAP32[5248560 >> 2] = 80;
      label = 16;
      break;
     case 16:
      _qh_option(5301072, 5249028, 0);
      var $9 = HEAP32[5249028 >> 2];
      var $10 = HEAP32[5247376 >> 2];
      var $cmp26 = ($9 | 0) == ($10 | 0);
      if ($cmp26) {
        label = 17;
        break;
      } else {
        label = 20;
        break;
      }
     case 17:
      var $11 = HEAP32[5247428 >> 2];
      HEAP32[5247036 >> 2] = $11;
      var $12 = HEAP32[5247432 >> 2];
      var $cmp28 = ($12 | 0) != -1;
      var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp29 = $13 < 8.988465674311579e+307;
      var $or_cond1 = $cmp28 | $cmp29;
      var $14 = HEAP32[5247444 >> 2];
      var $tobool31 = ($14 | 0) != 0;
      var $or_cond2 = $or_cond1 | $tobool31;
      if ($or_cond2) {
        label = 18;
        break;
      } else {
        var $15 = $11;
        label = 19;
        break;
      }
     case 18:
      var $tobool33 = ($11 | 0) != 0;
      var $cond = $tobool33 ? $11 : 3;
      HEAP32[5247424 >> 2] = $cond;
      HEAP32[5247036 >> 2] = 0;
      var $15 = 0;
      label = 19;
      break;
     case 19:
      var $15;
      HEAP32[5242936 >> 2] = $15;
      label = 20;
      break;
     case 20:
      var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp36 = $16 < 8.988465674311579e+307;
      if ($cmp36) {
        label = 21;
        break;
      } else {
        label = 22;
        break;
      }
     case 21:
      _qh_joggleinput();
      label = 22;
      break;
     case 22:
      _qh_initbuild();
      _qh_buildhull();
      var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp39 = $17 >= 8.988465674311579e+307;
      var $18 = HEAP32[5247080 >> 2];
      var $tobool41 = ($18 | 0) != 0;
      var $or_cond3 = $cmp39 | $tobool41;
      if ($or_cond3) {
        label = 3;
        break;
      } else {
        label = 23;
        break;
      }
     case 23:
      var $19 = HEAP32[5248940 >> 2];
      _qh_checkconvex($19, 0);
      label = 3;
      break;
     case 24:
      HEAP32[5249024 >> 2] = 0;
      return;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in mySetjmpIds)) throw e;
    setjmpTable[setjmpLabels[e.id]](e.value);
  }
}
_qh_build_withrestart["X"] = 1;
function _qh_buildhull() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $facet = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5298876);
    label = 4;
    break;
   case 4:
    var $storemerge14 = HEAP32[5248940 >> 2];
    HEAP32[$facet >> 2] = $storemerge14;
    var $tobool15 = ($storemerge14 | 0) == 0;
    if ($tobool15) {
      var $vertex_0_in = 5248980;
      label = 9;
      break;
    } else {
      var $1 = $storemerge14;
      label = 5;
      break;
    }
   case 5:
    var $1;
    var $next = $1 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      var $vertex_0_in = 5248980;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $1 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $5 & 3072;
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[$facet >> 2] = $2;
    var $1 = $2;
    label = 5;
    break;
   case 8:
    _qh_fprintf(5296304);
    _qh_errexit(5, $1, 0);
    var $storemerge_pre = HEAP32[$next >> 2];
    HEAP32[$facet >> 2] = $storemerge_pre;
    var $tobool = ($storemerge_pre | 0) == 0;
    if ($tobool) {
      var $vertex_0_in = 5248980;
      label = 9;
      break;
    } else {
      var $1 = $storemerge_pre;
      label = 5;
      break;
    }
   case 9:
    var $vertex_0_in;
    var $vertex_0 = HEAP32[$vertex_0_in >> 2];
    var $tobool11 = ($vertex_0 | 0) == 0;
    if ($tobool11) {
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $next13 = $vertex_0 | 0;
    var $8 = HEAP32[$next13 >> 2];
    var $tobool14 = ($8 | 0) == 0;
    if ($tobool14) {
      label = 18;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $9 = $vertex_0 + 20 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $tobool19 = ($11 | 0) < 0;
    if ($tobool19) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5294792);
    _qh_errprint(0, 0, 0, $vertex_0);
    _qh_errexit(5, 0, 0);
    label = 13;
    break;
   case 13:
    var $point = $vertex_0 + 8 | 0;
    var $12 = HEAP32[$point >> 2];
    var $call = _qh_pointid($12);
    var $13 = HEAP32[5247412 >> 2];
    var $cmp24 = ($13 | 0) > 0;
    var $sub = $13 - 1 | 0;
    var $cmp25 = ($call | 0) == ($sub | 0);
    var $or_cond11 = $cmp24 & $cmp25;
    if ($or_cond11) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $cmp27 = ($13 | 0) < 0;
    var $sub30 = $13 ^ -1;
    var $cmp31 = ($call | 0) == ($sub30 | 0);
    var $or_cond12 = $cmp27 & $cmp31;
    if ($or_cond12) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $14 = HEAP32[5247408 >> 2];
    var $cmp33 = ($14 | 0) > 0;
    var $sub35 = $14 - 1 | 0;
    var $cmp36 = ($call | 0) == ($sub35 | 0);
    var $or_cond13 = $cmp33 & $cmp36;
    if ($or_cond13) {
      label = 16;
      break;
    } else {
      var $vertex_0_in = $next13;
      label = 9;
      break;
    }
   case 16:
    var $15 = HEAP32[5247036 >> 2];
    var $cmp38 = ($15 | 0) > 0;
    if ($cmp38) {
      label = 17;
      break;
    } else {
      label = 27;
      break;
    }
   case 17:
    _qh_fprintf(5291308);
    label = 27;
    break;
   case 18:
    var $16 = HEAP32[5248940 >> 2];
    HEAP32[5248948 >> 2] = $16;
    label = 19;
    break;
   case 19:
    var $call45 = _qh_nextfurthest($facet);
    var $tobool46 = ($call45 | 0) != 0;
    if ($tobool46) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $17 = HEAP32[5249e3 >> 2];
    var $dec = $17 - 1 | 0;
    HEAP32[5249e3 >> 2] = $dec;
    var $18 = HEAP32[$facet >> 2];
    var $19 = HEAP32[5247128 >> 2];
    var $call47 = _qh_addpoint($call45, $18, $19);
    var $tobool48 = ($call47 | 0) == 0;
    if ($tobool48) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 21:
    var $20 = HEAP32[5248704 >> 2];
    var $tobool51 = ($20 | 0) == 0;
    if ($tobool51) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_outcoplanar();
    label = 23;
    break;
   case 23:
    var $21 = HEAP32[5249e3 >> 2];
    var $tobool54 = ($21 | 0) == 0;
    var $brmerge = $tobool54 | $tobool46;
    if ($brmerge) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_fprintf(5290172);
    _qh_errexit(5, 0, 0);
    label = 25;
    break;
   case 25:
    var $22 = HEAP32[5247036 >> 2];
    var $cmp59 = ($22 | 0) > 0;
    if ($cmp59) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_fprintf(5288312);
    label = 27;
    break;
   case 27:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_buildhull["X"] = 1;
function _qh_partitionvisible($numoutside) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247128 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249072 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249076 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $1 < $2;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAPF64[tempDoublePtr >> 3] = $2, HEAP32[5246944 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246948 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 5;
    break;
   case 5:
    HEAP32[$numoutside >> 2] = 0;
    var $visible_042 = HEAP32[5248956 >> 2];
    var $tobool343 = ($visible_042 | 0) == 0;
    if ($tobool343) {
      label = 28;
      break;
    } else {
      var $coplanar_044 = 0;
      var $visible_045 = $visible_042;
      label = 6;
      break;
    }
   case 6:
    var $visible_045;
    var $coplanar_044;
    var $3 = $visible_045 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 2048;
    var $tobool4 = ($bf_clear | 0) == 0;
    if ($tobool4) {
      label = 28;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $outsideset = $visible_045 + 60 | 0;
    var $6 = HEAP32[$outsideset >> 2];
    var $tobool5 = ($6 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $coplanarset = $visible_045 + 64 | 0;
    var $7 = HEAP32[$coplanarset >> 2];
    var $tobool6 = ($7 | 0) == 0;
    if ($tobool6) {
      var $coplanar_1 = $coplanar_044;
      label = 27;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $f = $visible_045 + 28 | 0;
    var $replace = $f;
    var $8 = HEAP32[$replace >> 2];
    var $tobool932 = ($8 | 0) == 0;
    if ($tobool932) {
      var $newfacet_0_lcssa = 0;
      var $tobool9_lcssa = 0;
      label = 14;
      break;
    } else {
      var $newfacet_033 = $8;
      var $count_034 = 0;
      label = 10;
      break;
    }
   case 10:
    var $count_034;
    var $newfacet_033;
    var $9 = $newfacet_033 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $bf_clear12 = $11 & 2048;
    var $tobool13 = ($bf_clear12 | 0) == 0;
    if ($tobool13) {
      var $newfacet_0_lcssa = $newfacet_033;
      var $tobool9_lcssa = 1;
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $f15 = $newfacet_033 + 28 | 0;
    var $replace16 = $f15;
    var $12 = HEAP32[$replace16 >> 2];
    var $inc = $count_034 + 1 | 0;
    var $13 = HEAP32[5249008 >> 2];
    var $cmp17 = $count_034 >>> 0 > $13 >>> 0;
    if ($cmp17) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_infiniteloop($visible_045);
    label = 13;
    break;
   case 13:
    var $tobool9 = ($12 | 0) == 0;
    if ($tobool9) {
      var $newfacet_0_lcssa = 0;
      var $tobool9_lcssa = 0;
      label = 14;
      break;
    } else {
      var $newfacet_033 = $12;
      var $count_034 = $inc;
      label = 10;
      break;
    }
   case 14:
    var $tobool9_lcssa;
    var $newfacet_0_lcssa;
    var $14 = HEAP32[5248952 >> 2];
    var $newfacet_0_ = $tobool9_lcssa ? $newfacet_0_lcssa : $14;
    var $15 = HEAP32[5248944 >> 2];
    var $cmp23 = ($newfacet_0_ | 0) == ($15 | 0);
    if ($cmp23) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5267260);
    _qh_errexit(3, 0, 0);
    label = 16;
    break;
   case 16:
    var $16 = HEAP32[$outsideset >> 2];
    var $tobool27 = ($16 | 0) == 0;
    if ($tobool27) {
      label = 21;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $call = _qh_setsize($16);
    var $17 = HEAP32[$numoutside >> 2];
    var $add = $17 + $call | 0;
    HEAP32[$numoutside >> 2] = $add;
    var $18 = HEAP32[5249e3 >> 2];
    var $sub = $18 - $call | 0;
    HEAP32[5249e3 >> 2] = $sub;
    var $19 = HEAP32[$outsideset >> 2];
    var $tobool31 = ($19 | 0) == 0;
    if ($tobool31) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $p = $19 + 4 | 0;
    var $20 = HEAP32[$p >> 2];
    var $tobool3537 = ($20 | 0) == 0;
    if ($tobool3537) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $21 = $20;
    var $22 = $p;
    var $pointp_038 = $22;
    var $23 = $21;
    label = 20;
    break;
   case 20:
    var $23;
    var $pointp_038;
    var $incdec_ptr = $pointp_038 + 4 | 0;
    _qh_partitionpoint($23, $newfacet_0_);
    var $24 = HEAP32[$incdec_ptr >> 2];
    var $tobool35 = ($24 | 0) == 0;
    if ($tobool35) {
      label = 21;
      break;
    } else {
      var $pointp_038 = $incdec_ptr;
      var $23 = $24;
      label = 20;
      break;
    }
   case 21:
    var $coplanarset39 = $visible_045 + 64 | 0;
    var $25 = HEAP32[$coplanarset39 >> 2];
    var $tobool40 = ($25 | 0) == 0;
    if ($tobool40) {
      var $coplanar_1 = $coplanar_044;
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $26 = HEAP32[5247044 >> 2];
    var $27 = HEAP32[5247048 >> 2];
    var $add42 = $27 + $26 | 0;
    var $28 = HEAP32[5247500 >> 2];
    var $add43 = -$28 | 0;
    var $tobool44 = ($add42 | 0) == ($add43 | 0);
    if ($tobool44) {
      var $coplanar_1 = $coplanar_044;
      label = 27;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $call47 = _qh_setsize($25);
    var $add48 = $call47 + $coplanar_044 | 0;
    var $29 = HEAP32[$coplanarset39 >> 2];
    var $tobool50 = ($29 | 0) == 0;
    if ($tobool50) {
      var $coplanar_1 = $add48;
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $p55 = $29 + 4 | 0;
    var $30 = HEAP32[$p55 >> 2];
    var $tobool5840 = ($30 | 0) == 0;
    if ($tobool5840) {
      var $coplanar_1 = $add48;
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $31 = $30;
    var $incdec_ptr573949 = $p55 + 4 | 0;
    var $incdec_ptr5739 = $incdec_ptr573949;
    var $incdec_ptr5741 = $incdec_ptr5739;
    var $32 = $31;
    label = 26;
    break;
   case 26:
    var $32;
    var $incdec_ptr5741;
    _qh_partitioncoplanar($32, $newfacet_0_, 0);
    var $incdec_ptr57 = $incdec_ptr5741 + 4 | 0;
    var $33 = HEAP32[$incdec_ptr5741 >> 2];
    var $tobool58 = ($33 | 0) == 0;
    if ($tobool58) {
      var $coplanar_1 = $add48;
      label = 27;
      break;
    } else {
      var $incdec_ptr5741 = $incdec_ptr57;
      var $32 = $33;
      label = 26;
      break;
    }
   case 27:
    var $coplanar_1;
    var $next = $visible_045 + 44 | 0;
    var $visible_0 = HEAP32[$next >> 2];
    var $tobool3 = ($visible_0 | 0) == 0;
    if ($tobool3) {
      label = 28;
      break;
    } else {
      var $coplanar_044 = $coplanar_1;
      var $visible_045 = $visible_0;
      label = 6;
      break;
    }
   case 28:
    var $34 = HEAP32[5249184 >> 2];
    var $tobool67 = ($34 | 0) == 0;
    if ($tobool67) {
      label = 34;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $p71 = $34 + 4 | 0;
    var $35 = HEAP32[$p71 >> 2];
    var $tobool7430 = ($35 | 0) == 0;
    if ($tobool7430) {
      label = 34;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $36 = $35;
    var $incdec_ptr732950 = $p71 + 4 | 0;
    var $incdec_ptr7329 = $incdec_ptr732950;
    var $incdec_ptr7331 = $incdec_ptr7329;
    var $37 = $36;
    label = 31;
    break;
   case 31:
    var $37;
    var $incdec_ptr7331;
    var $point76 = $37 + 8 | 0;
    var $38 = HEAP32[$point76 >> 2];
    var $tobool77 = ($38 | 0) == 0;
    if ($tobool77) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $incdec_ptr73 = $incdec_ptr7331 + 4 | 0;
    var $39 = HEAP32[$incdec_ptr7331 >> 2];
    var $tobool74 = ($39 | 0) == 0;
    if ($tobool74) {
      label = 34;
      break;
    } else {
      var $incdec_ptr7331 = $incdec_ptr73;
      var $37 = $39;
      label = 31;
      break;
    }
   case 33:
    var $40 = HEAP32[5248952 >> 2];
    _qh_partitioncoplanar($38, $40, 0);
    label = 32;
    break;
   case 34:
    var $41 = HEAP32[5247036 >> 2];
    var $cmp88 = ($41 | 0) > 0;
    if ($cmp88) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    _qh_fprintf(5266968);
    label = 36;
    break;
   case 36:
    return;
  }
}
_qh_partitionvisible["X"] = 1;
function _qh_buildtracing($furthest, $facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $timedata = __stackBase__ + 8;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $0;
    HEAP32[5247336 >> 2] = 0;
    var $tobool = ($furthest | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _time($timedata);
    var $call1 = _localtime($timedata);
    var $call2 = _clock();
    _qh_fprintf(5286612);
    label = 26;
    break;
   case 4:
    var $call7 = _qh_pointid($furthest);
    var $1 = HEAP32[5247432 >> 2];
    var $cmp = ($1 | 0) == ($call7 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $2 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $2;
    HEAP32[5242936 >> 2] = $2;
    label = 8;
    break;
   case 6:
    var $cmp10 = ($1 | 0) != -1;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp12 = $3 < 8.988465674311579e+307;
    var $or_cond = $cmp10 & $cmp12;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5247036 >> 2] = 0;
    HEAP32[5242936 >> 2] = 0;
    label = 8;
    break;
   case 8:
    var $4 = HEAP32[5247368 >> 2];
    var $tobool17 = ($4 | 0) == 0;
    if ($tobool17) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $5 = HEAP32[5249008 >> 2];
    var $sub19 = $5 - 1 | 0;
    var $6 = HEAP32[5249252 >> 2];
    var $add20 = $6 + $4 | 0;
    var $cmp21 = $sub19 >>> 0 > $add20 >>> 0;
    if ($cmp21) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[5249252 >> 2] = $sub19;
    var $call25 = _time($timedata);
    var $call26 = _localtime($timedata);
    var $call27 = _clock();
    var $7 = HEAP32[5243424 >> 2];
    var $inc = $7 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    _qh_distplane($furthest, $facet, $dist);
    _qh_fprintf(5284520);
    label = 13;
    break;
   case 11:
    var $8 = HEAP32[5247036 >> 2];
    var $cmp42 = ($8 | 0) > 0;
    if ($cmp42) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $call45 = _clock();
    _qh_distplane($furthest, $facet, $dist);
    _qh_fprintf(5282304);
    label = 13;
    break;
   case 13:
    var $9 = HEAP32[5244744 >> 2];
    var $10 = HEAP32[5249152 >> 2];
    var $div61 = ($10 | 0) / 2 & -1;
    var $cmp62 = ($9 | 0) < ($div61 | 0);
    if ($cmp62) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5244744 >> 2] = $div61;
    label = 15;
    break;
   case 15:
    var $cmp67 = ($10 | 0) < 0;
    if ($cmp67) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $11 = HEAP32[5244736 >> 2];
    var $inc70 = $11 + 1 | 0;
    HEAP32[5244736 >> 2] = $inc70;
    HEAP32[5249152 >> 2] = 0;
    var $facet_addr_034 = HEAP32[5248940 >> 2];
    var $tobool7135 = ($facet_addr_034 | 0) == 0;
    if ($tobool7135) {
      label = 19;
      break;
    } else {
      var $facet_addr_036 = $facet_addr_034;
      label = 17;
      break;
    }
   case 17:
    var $facet_addr_036;
    var $next = $facet_addr_036 + 44 | 0;
    var $12 = HEAP32[$next >> 2];
    var $tobool72 = ($12 | 0) == 0;
    if ($tobool72) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $visitid = $facet_addr_036 + 68 | 0;
    HEAP32[$visitid >> 2] = 0;
    var $facet_addr_036 = $12;
    label = 17;
    break;
   case 19:
    var $13 = HEAP32[5244776 >> 2];
    var $14 = HEAP32[5249156 >> 2];
    var $bf_clear75 = $14 >>> 1;
    var $div76 = $bf_clear75 & 1073741823;
    var $cmp77 = ($13 | 0) < ($div76 | 0);
    if ($cmp77) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAP32[5244776 >> 2] = $div76;
    label = 21;
    break;
   case 21:
    var $bf_clear83 = $14 & 1073741824;
    var $cmp84 = $bf_clear83 >>> 0 > 1073741823;
    if ($cmp84) {
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 22:
    var $15 = HEAP32[5244768 >> 2];
    var $inc87 = $15 + 1 | 0;
    HEAP32[5244768 >> 2] = $inc87;
    var $16 = $14 & -2147483648;
    HEAP32[5249156 >> 2] = $16;
    var $vertex_031 = HEAP32[5248980 >> 2];
    var $tobool8932 = ($vertex_031 | 0) == 0;
    if ($tobool8932) {
      label = 25;
      break;
    } else {
      var $vertex_033 = $vertex_031;
      label = 23;
      break;
    }
   case 23:
    var $vertex_033;
    var $next91 = $vertex_033 | 0;
    var $17 = HEAP32[$next91 >> 2];
    var $tobool92 = ($17 | 0) == 0;
    if ($tobool92) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $18 = $vertex_033 + 16 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $20 & -2147483648;
    HEAP32[$19 >> 2] = $21;
    var $vertex_033 = $17;
    label = 23;
    break;
   case 25:
    HEAP32[5249036 >> 2] = $call7;
    var $22 = HEAP32[5249220 >> 2];
    HEAP32[5247336 >> 2] = $22;
    label = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_buildtracing["X"] = 1;
function _qh_addpoint($furthest, $facet, $checkdist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $goodvisible = __stackBase__;
    var $goodhorizon = __stackBase__ + 4;
    var $dist = __stackBase__ + 8;
    var $isoutside = __stackBase__ + 16;
    var $numpart = __stackBase__ + 20;
    var $numpoints = __stackBase__ + 24;
    HEAP32[$isoutside >> 2] = 0;
    HEAP32[5249060 >> 2] = 0;
    var $call = _qh_pointid($furthest);
    var $cmp = ($call | 0) == -1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = $furthest;
    _qh_setappend(5249180, $0);
    label = 4;
    break;
   case 4:
    var $tobool = ($facet | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5256100);
    _qh_errexit(5, 0, 0);
    label = 6;
    break;
   case 6:
    var $tobool3 = ($checkdist | 0) == 0;
    if ($tobool3) {
      var $facet_addr_0 = $facet;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $call5 = _qh_findbest($furthest, $facet, 0, 0, 0, $dist, $isoutside, $numpart);
    var $1 = HEAP32[$numpart >> 2];
    var $2 = HEAP32[5244312 >> 2];
    var $add = $2 + $1 | 0;
    HEAP32[5244312 >> 2] = $add;
    var $3 = HEAP32[$isoutside >> 2];
    var $tobool6 = ($3 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      var $facet_addr_0 = $call5;
      label = 9;
      break;
    }
   case 8:
    var $4 = HEAP32[5244192 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5244192 >> 2] = $inc;
    var $5 = $call5 + 76 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 | 262144;
    HEAP32[$6 >> 2] = $8;
    _qh_partitioncoplanar($furthest, $call5, $dist);
    var $retval_0 = 1;
    label = 50;
    break;
   case 9:
    var $facet_addr_0;
    _qh_buildtracing($furthest, $facet_addr_0);
    var $9 = HEAP32[5247412 >> 2];
    var $cmp10 = ($9 | 0) < 0;
    if ($cmp10) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    var $10 = HEAP32[5249036 >> 2];
    var $sub11 = $9 ^ -1;
    var $cmp12 = ($10 | 0) == ($sub11 | 0);
    if ($cmp12) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $11 = $facet_addr_0 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $14 = $13 | 262144;
    HEAP32[$12 >> 2] = $14;
    var $retval_0 = 0;
    label = 50;
    break;
   case 12:
    _qh_findhorizon($furthest, $facet_addr_0, $goodvisible, $goodhorizon);
    var $15 = HEAP32[5247124 >> 2];
    var $tobool16 = ($15 | 0) == 0;
    if ($tobool16) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $16 = HEAP32[$goodvisible >> 2];
    var $17 = HEAP32[$goodhorizon >> 2];
    var $add18 = -$17 | 0;
    var $tobool19 = ($16 | 0) != ($add18 | 0);
    var $18 = HEAP32[5249040 >> 2];
    var $tobool21 = ($18 | 0) != 0;
    var $or_cond = $tobool19 | $tobool21;
    if ($or_cond) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $19 = HEAP32[5244176 >> 2];
    var $inc23 = $19 + 1 | 0;
    HEAP32[5244176 >> 2] = $inc23;
    var $20 = $facet_addr_0 + 76 | 0;
    var $21 = $20;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22 | 262144;
    HEAP32[$21 >> 2] = $23;
    _qh_resetlists(0, 1);
    var $retval_0 = 1;
    label = 50;
    break;
   case 15:
    var $24 = HEAP32[5244376 >> 2];
    var $inc26 = $24 + 1 | 0;
    HEAP32[5244376 >> 2] = $inc26;
    var $25 = HEAP32[5249008 >> 2];
    var $call27 = _qh_makenewfacets($furthest);
    _qh_makenewplanes();
    var $26 = HEAP32[5249008 >> 2];
    var $sub28 = $26 - $25 | 0;
    var $conv = $sub28 | 0;
    var $27 = HEAP32[5248992 >> 2];
    var $28 = HEAP32[5248960 >> 2];
    var $sub29 = $27 - $28 | 0;
    var $conv30 = $sub29 | 0;
    var $29 = HEAP32[5247504 >> 2];
    var $conv31 = $29 | 0;
    var $mul = $conv30 * $conv31;
    var $30 = HEAP32[5248996 >> 2];
    var $conv32 = $30 | 0;
    var $div = $mul / $conv32;
    var $sub33 = $conv - $div;
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244096 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244100 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add34 = $31 + $sub33;
    HEAPF64[tempDoublePtr >> 3] = $add34, HEAP32[5244096 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244100 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $mul35 = $sub33 * $sub33;
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add36 = $32 + $mul35;
    HEAPF64[tempDoublePtr >> 3] = $add36, HEAP32[5244104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $33 = HEAP32[5247124 >> 2];
    var $tobool37 = ($33 | 0) == 0;
    if ($tobool37) {
      label = 23;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $34 = HEAP32[5248952 >> 2];
    var $35 = HEAP32[$goodhorizon >> 2];
    var $call39 = _qh_findgood($34, $35);
    var $tobool40 = ($call39 | 0) != 0;
    var $36 = HEAP32[5249040 >> 2];
    var $tobool42 = ($36 | 0) != 0;
    var $or_cond1 = $tobool40 | $tobool42;
    if ($or_cond1) {
      label = 21;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $newfacet_035 = HEAP32[5248952 >> 2];
    var $tobool4436 = ($newfacet_035 | 0) == 0;
    if ($tobool4436) {
      label = 20;
      break;
    } else {
      var $newfacet_037 = $newfacet_035;
      label = 18;
      break;
    }
   case 18:
    var $newfacet_037;
    var $next = $newfacet_037 + 44 | 0;
    var $37 = HEAP32[$next >> 2];
    var $tobool45 = ($37 | 0) == 0;
    if ($tobool45) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _qh_delfacet($newfacet_037);
    var $newfacet_0 = HEAP32[$next >> 2];
    var $tobool44 = ($newfacet_0 | 0) == 0;
    if ($tobool44) {
      label = 20;
      break;
    } else {
      var $newfacet_037 = $newfacet_0;
      label = 18;
      break;
    }
   case 20:
    _qh_delvertex($call27);
    _qh_resetlists(1, 1);
    var $38 = HEAP32[5244184 >> 2];
    var $inc47 = $38 + 1 | 0;
    HEAP32[5244184 >> 2] = $inc47;
    var $39 = $facet_addr_0 + 76 | 0;
    var $40 = $39;
    var $41 = HEAP32[$40 >> 2];
    var $42 = $41 | 262144;
    HEAP32[$40 >> 2] = $42;
    var $retval_0 = 1;
    label = 50;
    break;
   case 21:
    var $_pr = HEAP32[5247124 >> 2];
    var $tobool50 = ($_pr | 0) == 0;
    if ($tobool50) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_attachnewfacets();
    label = 23;
    break;
   case 23:
    _qh_matchnewfacets();
    _qh_updatevertices();
    var $43 = HEAP32[5247408 >> 2];
    var $tobool53 = ($43 | 0) == 0;
    if ($tobool53) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $44 = HEAP32[5249036 >> 2];
    var $sub55 = $43 - 1 | 0;
    var $cmp56 = ($44 | 0) == ($sub55 | 0);
    if ($cmp56) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $45 = $facet_addr_0 + 76 | 0;
    var $46 = $45;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 | 262144;
    HEAP32[$46 >> 2] = $48;
    var $retval_0 = 0;
    label = 50;
    break;
   case 26:
    HEAP32[5249092 >> 2] = 0;
    var $49 = HEAP32[5247140 >> 2];
    var $50 = HEAP32[5247072 >> 2];
    var $51 = $50 | $49;
    var $52 = ($51 | 0) == 0;
    if ($52) {
      label = 34;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_premerge($53, $54);
    var $55 = HEAP32[5244576 >> 2];
    var $cmp64 = ($55 | 0) > 50;
    if ($cmp64) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[5249092 >> 2] = 1;
    label = 36;
    break;
   case 29:
    var $56 = HEAP32[5248952 >> 2];
    var $newfacet_1 = $56;
    label = 30;
    break;
   case 30:
    var $newfacet_1;
    var $tobool68 = ($newfacet_1 | 0) == 0;
    if ($tobool68) {
      label = 36;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $next70 = $newfacet_1 + 44 | 0;
    var $57 = HEAP32[$next70 >> 2];
    var $tobool71 = ($57 | 0) == 0;
    if ($tobool71) {
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $58 = $newfacet_1 + 76 | 0;
    var $59 = $58;
    var $60 = HEAP32[$59 >> 2];
    var $bf_clear = $60 & 8192;
    var $tobool75 = ($bf_clear | 0) == 0;
    if ($tobool75) {
      label = 33;
      break;
    } else {
      var $newfacet_1 = $57;
      label = 30;
      break;
    }
   case 33:
    HEAP32[5249092 >> 2] = 1;
    label = 36;
    break;
   case 34:
    var $61 = HEAP32[5246964 >> 2];
    var $tobool83 = ($61 | 0) == 0;
    if ($tobool83) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    HEAP32[5249092 >> 2] = 1;
    label = 36;
    break;
   case 36:
    _qh_partitionvisible($numpoints);
    HEAP32[5249092 >> 2] = 0;
    HEAP32[5249096 >> 2] = 0;
    var $62 = HEAP32[5244336 >> 2];
    var $inc87 = $62 + 1 | 0;
    HEAP32[5244336 >> 2] = $inc87;
    var $63 = HEAP32[$numpoints >> 2];
    var $conv88 = $63 | 0;
    var $64 = HEAP32[5247504 >> 2];
    var $conv89 = $64 | 0;
    var $65 = HEAP32[5247512 >> 2];
    var $66 = HEAP32[5248996 >> 2];
    var $sub90 = $65 - $66 | 0;
    var $conv91 = $sub90 | 0;
    var $mul92 = $conv89 * $conv91;
    var $conv93 = $66 | 0;
    var $div94 = $mul92 / $conv93;
    var $sub95 = $conv88 - $div94;
    var $67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244344 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244348 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add96 = $67 + $sub95;
    HEAPF64[tempDoublePtr >> 3] = $add96, HEAP32[5244344 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244348 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $mul97 = $sub95 * $sub95;
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244352 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244356 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add98 = $68 + $mul97;
    HEAPF64[tempDoublePtr >> 3] = $add98, HEAP32[5244352 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244356 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_deletevisible();
    var $69 = HEAP32[5243896 >> 2];
    var $70 = HEAP32[5248996 >> 2];
    var $cmp99 = ($69 | 0) < ($70 | 0);
    if ($cmp99) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[5243896 >> 2] = $70;
    label = 38;
    break;
   case 38:
    HEAP32[5249088 >> 2] = 0;
    var $71 = HEAP32[5247036 >> 2];
    var $cmp103 = ($71 | 0) > 3;
    if ($cmp103) {
      label = 39;
      break;
    } else {
      label = 42;
      break;
    }
   case 39:
    var $72 = HEAP32[5248992 >> 2];
    var $cmp106 = ($72 | 0) < 2e3;
    if ($cmp106) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    _qh_printlists();
    label = 41;
    break;
   case 41:
    var $73 = HEAP32[5248952 >> 2];
    _qh_printfacetlist($73);
    var $74 = HEAP32[5248940 >> 2];
    _qh_checkpolygon($74);
    label = 46;
    break;
   case 42:
    var $75 = HEAP32[5246976 >> 2];
    var $tobool111 = ($75 | 0) == 0;
    if ($tobool111) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $76 = HEAP32[5248992 >> 2];
    var $cmp113 = ($76 | 0) < 50;
    if ($cmp113) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    var $77 = HEAP32[5248940 >> 2];
    _qh_checkpolygon($77);
    label = 46;
    break;
   case 45:
    var $78 = HEAP32[5248952 >> 2];
    _qh_checkpolygon($78);
    label = 46;
    break;
   case 46:
    var $79 = HEAP32[5247412 >> 2];
    var $cmp120 = ($79 | 0) > 0;
    if ($cmp120) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $80 = HEAP32[5249036 >> 2];
    var $sub123 = $79 - 1 | 0;
    var $cmp124 = ($80 | 0) == ($sub123 | 0);
    if ($cmp124) {
      var $retval_0 = 0;
      label = 50;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    _qh_resetlists(1, 1);
    var $81 = HEAP32[5247036 >> 2];
    var $cmp128 = ($81 | 0) > 1;
    if ($cmp128) {
      label = 49;
      break;
    } else {
      var $retval_0 = 1;
      label = 50;
      break;
    }
   case 49:
    _qh_fprintf(5253336);
    var $retval_0 = 1;
    label = 50;
    break;
   case 50:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_addpoint["X"] = 1;
function _qh_partitioncoplanar($point, $facet, $dist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestdist = __stackBase__;
    var $dist2 = __stackBase__ + 8;
    var $numpart = __stackBase__ + 16;
    var $isoutside = __stackBase__ + 20;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$dist2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[$numpart >> 2] = 0;
    HEAP32[5249164 >> 2] = 1;
    var $tobool = ($dist | 0) != 0;
    if ($tobool) {
      label = 16;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5249092 >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _qh_findbestnew($point, $facet, $bestdist, 1, $isoutside, $numpart);
    var $bestfacet_0 = $call;
    label = 6;
    break;
   case 5:
    var $1 = HEAP32[5246996 >> 2];
    var $call3 = _qh_findbest($point, $facet, 1, 0, $1, $bestdist, $isoutside, $numpart);
    var $bestfacet_0 = $call3;
    label = 6;
    break;
   case 6:
    var $bestfacet_0;
    var $2 = HEAP32[5244584 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5244584 >> 2] = $inc;
    var $3 = HEAP32[$numpart >> 2];
    var $4 = HEAP32[5244280 >> 2];
    var $add = $4 + $3 | 0;
    HEAP32[5244280 >> 2] = $add;
    var $5 = HEAP32[5246996 >> 2];
    var $6 = HEAP32[5247048 >> 2];
    var $7 = $6 | $5;
    var $8 = ($7 | 0) == 0;
    if ($8) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $bestfacet_1 = $bestfacet_0;
    var $18 = $_pre;
    label = 17;
    break;
   case 8:
    var $9 = HEAP32[5247500 >> 2];
    var $tobool7 = ($9 | 0) == 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool7) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248712 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248716 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$11;
    var $cmp = $10 < $sub;
    if ($cmp) {
      label = 10;
      break;
    } else {
      var $bestfacet_1 = $bestfacet_0;
      var $18 = $10;
      label = 17;
      break;
    }
   case 10:
    var $12 = HEAP32[5243264 >> 2];
    var $inc10 = $12 + 1 | 0;
    HEAP32[5243264 >> 2] = $inc10;
    var $13 = HEAP32[5247036 >> 2];
    var $cmp11 = ($13 | 0) > 3;
    if ($cmp11) {
      label = 11;
      break;
    } else {
      label = 32;
      break;
    }
   case 11:
    _qh_fprintf(5272936);
    label = 32;
    break;
   case 12:
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub17 = -$14;
    var $cmp18 = $10 < $sub17;
    if ($cmp18) {
      label = 13;
      break;
    } else {
      var $bestfacet_1 = $bestfacet_0;
      var $18 = $10;
      label = 17;
      break;
    }
   case 13:
    var $15 = HEAP32[5247036 >> 2];
    var $cmp20 = ($15 | 0) > 3;
    if ($cmp20) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5272400);
    label = 15;
    break;
   case 15:
    var $16 = HEAP32[5243264 >> 2];
    var $inc25 = $16 + 1 | 0;
    HEAP32[5243264 >> 2] = $inc25;
    label = 32;
    break;
   case 16:
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $17, HEAP32[$bestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $bestfacet_1 = $facet;
    var $18 = $17;
    label = 17;
    break;
   case 17:
    var $18;
    var $bestfacet_1;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp31 = $18 > $19;
    if ($cmp31) {
      label = 18;
      break;
    } else {
      label = 25;
      break;
    }
   case 18:
    var $cmp35 = ($bestfacet_1 | 0) == ($facet | 0);
    var $or_cond = $tobool | $cmp35;
    if ($or_cond) {
      label = 23;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $20 = HEAP32[5244272 >> 2];
    var $inc37 = $20 + 1 | 0;
    HEAP32[5244272 >> 2] = $inc37;
    var $normal = $facet + 24 | 0;
    var $21 = HEAP32[$normal >> 2];
    var $normal38 = $bestfacet_1 + 24 | 0;
    var $22 = HEAP32[$normal38 >> 2];
    var $call39 = _qh_getangle($21, $22);
    var $cmp40 = $call39 < 0;
    if ($cmp40) {
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 20:
    var $23 = HEAP32[5244288 >> 2];
    var $inc42 = $23 + 1 | 0;
    HEAP32[5244288 >> 2] = $inc42;
    var $24 = HEAP32[5247036 >> 2];
    var $cmp43 = ($24 | 0) > 1;
    if ($cmp43) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_fprintf(5271840);
    label = 22;
    break;
   case 22:
    var $25 = HEAP32[5249092 >> 2];
    HEAP32[5249092 >> 2] = 0;
    _qh_partitionpoint($point, $bestfacet_1);
    HEAP32[5249092 >> 2] = $25;
    label = 32;
    break;
   case 23:
    HEAPF64[tempDoublePtr >> 3] = $18, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp51 = $18 > $26;
    if ($cmp51) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5271300);
    _qh_errprint($facet, $bestfacet_1, 0, 0);
    label = 25;
    break;
   case 25:
    var $27 = HEAP32[5247044 >> 2];
    var $28 = HEAP32[5247048 >> 2];
    var $add58 = $28 + $27 | 0;
    var $29 = HEAP32[5247500 >> 2];
    var $add59 = -$29 | 0;
    var $tobool60 = ($add58 | 0) == ($add59 | 0);
    if ($tobool60) {
      label = 30;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $coplanarset = $bestfacet_1 + 64 | 0;
    var $30 = HEAP32[$coplanarset >> 2];
    var $call62 = _qh_setlast($30);
    var $tobool63 = ($call62 | 0) == 0;
    if ($tobool63) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $31 = $call62;
    var $32 = HEAP32[5243168 >> 2];
    var $inc65 = $32 + 1 | 0;
    HEAP32[5243168 >> 2] = $inc65;
    _qh_distplane($31, $bestfacet_1, $dist2);
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp68 = $33 < $34;
    if ($cmp68) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $35 = $point;
    _qh_setappend($coplanarset, $35);
    label = 30;
    break;
   case 29:
    var $36 = $point;
    _qh_setappend2ndlast($coplanarset, $36);
    label = 30;
    break;
   case 30:
    var $37 = HEAP32[5247036 >> 2];
    var $cmp75 = ($37 | 0) > 3;
    if ($cmp75) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5269984);
    label = 32;
    break;
   case 32:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_partitioncoplanar["X"] = 1;
function _qh_findhorizon($point, $facet, $goodvisible, $goodhorizon) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5280084);
    label = 4;
    break;
   case 4:
    HEAP32[$goodhorizon >> 2] = 0;
    HEAP32[$goodvisible >> 2] = 0;
    var $1 = HEAP32[5244616 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5244616 >> 2] = $inc;
    _qh_removefacet($facet);
    _qh_appendfacet($facet);
    HEAP32[5248960 >> 2] = 1;
    var $2 = $facet + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 524288;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $5 = HEAP32[$goodvisible >> 2];
    var $inc2 = $5 + 1 | 0;
    HEAP32[$goodvisible >> 2] = $inc2;
    label = 6;
    break;
   case 6:
    HEAP32[5248956 >> 2] = $facet;
    var $6 = HEAP32[$3 >> 2];
    var $7 = $6 | 2048;
    HEAP32[$3 >> 2] = $7;
    var $f = $facet + 28 | 0;
    var $replace = $f;
    HEAP32[$replace >> 2] = 0;
    var $8 = HEAP32[5247036 >> 2];
    var $cmp5 = ($8 | 0) > 3;
    if ($cmp5) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_errprint($facet, 0, 0, 0);
    label = 8;
    break;
   case 8:
    var $9 = HEAP32[5249152 >> 2];
    var $inc8 = $9 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc8;
    var $visible_056 = HEAP32[5248956 >> 2];
    var $tobool957 = ($visible_056 | 0) == 0;
    if ($tobool957) {
      label = 45;
      break;
    } else {
      var $numhorizon_058 = 0;
      var $coplanar_059 = 0;
      var $visible_060 = $visible_056;
      label = 9;
      break;
    }
   case 9:
    var $visible_060;
    var $coplanar_059;
    var $numhorizon_058;
    var $10 = $visible_060 + 76 | 0;
    var $11 = $10;
    var $12 = HEAP32[$11 >> 2];
    var $bf_clear11 = $12 & 2048;
    var $tobool12 = ($bf_clear11 | 0) == 0;
    if ($tobool12) {
      var $numhorizon_0_lcssa = $numhorizon_058;
      label = 44;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $bf_clear14 = $12 & 512;
    var $tobool15 = ($bf_clear14 | 0) == 0;
    var $13 = HEAP32[5247452 >> 2];
    var $tobool16 = ($13 | 0) != 0;
    var $or_cond = $tobool15 | $tobool16;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _qh_fprintf(5278612);
    _qh_errexit(5, $visible_060, 0);
    label = 12;
    break;
   case 12:
    var $14 = HEAP32[5249152 >> 2];
    var $visitid = $visible_060 + 68 | 0;
    HEAP32[$visitid >> 2] = $14;
    var $neighbors = $visible_060 + 56 | 0;
    var $15 = HEAP32[$neighbors >> 2];
    var $tobool19 = ($15 | 0) == 0;
    if ($tobool19) {
      var $coplanar_3 = $coplanar_059;
      var $numhorizon_2 = $numhorizon_058;
      label = 43;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $p = $15 + 4 | 0;
    var $16 = HEAP32[$p >> 2];
    var $tobool234451 = ($16 | 0) == 0;
    if ($tobool234451) {
      var $coplanar_3 = $coplanar_059;
      var $numhorizon_2 = $numhorizon_058;
      label = 43;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $17 = $16;
    var $incdec_ptr435063 = $p + 4 | 0;
    var $incdec_ptr4350 = $incdec_ptr435063;
    var $numhorizon_1_ph52 = $numhorizon_058;
    var $coplanar_1_ph53 = $coplanar_059;
    var $incdec_ptr4354 = $incdec_ptr4350;
    var $18 = $17;
    label = 15;
    break;
   case 15:
    var $18;
    var $incdec_ptr4354;
    var $coplanar_1_ph53;
    var $numhorizon_1_ph52;
    var $incdec_ptr45 = $incdec_ptr4354;
    var $19 = $18;
    label = 16;
    break;
   case 16:
    var $19;
    var $incdec_ptr45;
    var $visitid25 = $19 + 68 | 0;
    var $20 = HEAP32[$visitid25 >> 2];
    var $21 = HEAP32[5249152 >> 2];
    var $cmp26 = ($20 | 0) == ($21 | 0);
    if ($cmp26) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $22 = HEAP32[$incdec_ptr45 >> 2];
    var $tobool23 = ($22 | 0) == 0;
    if ($tobool23) {
      var $coplanar_3 = $coplanar_1_ph53;
      var $numhorizon_2 = $numhorizon_1_ph52;
      label = 43;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $incdec_ptr = $incdec_ptr45 + 4 | 0;
    var $incdec_ptr45 = $incdec_ptr;
    var $19 = $22;
    label = 16;
    break;
   case 19:
    HEAP32[$visitid25 >> 2] = $21;
    var $23 = HEAP32[5244248 >> 2];
    var $inc30 = $23 + 1 | 0;
    HEAP32[5244248 >> 2] = $inc30;
    _qh_distplane($point, $19, $dist);
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp31 = $24 > $25;
    if ($cmp31) {
      label = 20;
      break;
    } else {
      label = 24;
      break;
    }
   case 20:
    var $26 = HEAP32[5244616 >> 2];
    var $inc33 = $26 + 1 | 0;
    HEAP32[5244616 >> 2] = $inc33;
    _qh_removefacet($19);
    _qh_appendfacet($19);
    var $27 = $19 + 76 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $30 = $29 | 2048;
    HEAP32[$28 >> 2] = $30;
    var $f35 = $19 + 28 | 0;
    var $replace36 = $f35;
    HEAP32[$replace36 >> 2] = 0;
    var $31 = HEAP32[5248960 >> 2];
    var $inc37 = $31 + 1 | 0;
    HEAP32[5248960 >> 2] = $inc37;
    var $32 = HEAP32[$28 >> 2];
    var $bf_clear39 = $32 & 524288;
    var $tobool40 = ($bf_clear39 | 0) == 0;
    if ($tobool40) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $33 = HEAP32[$goodvisible >> 2];
    var $inc42 = $33 + 1 | 0;
    HEAP32[$goodvisible >> 2] = $inc42;
    label = 22;
    break;
   case 22:
    var $34 = HEAP32[5247036 >> 2];
    var $cmp44 = ($34 | 0) > 3;
    if ($cmp44) {
      label = 23;
      break;
    } else {
      label = 17;
      break;
    }
   case 23:
    _qh_errprint($19, 0, 0, 0);
    label = 17;
    break;
   case 24:
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$35;
    var $cmp47 = $24 > $sub;
    var $36 = $19 + 76 | 0;
    var $37 = $36;
    var $38 = HEAP32[$37 >> 2];
    if ($cmp47) {
      label = 25;
      break;
    } else {
      label = 37;
      break;
    }
   case 25:
    var $39 = $38 | 16777216;
    HEAP32[$37 >> 2] = $39;
    var $40 = HEAP32[5243256 >> 2];
    var $inc50 = $40 + 1 | 0;
    HEAP32[5243256 >> 2] = $inc50;
    _qh_precision();
    var $inc51 = $coplanar_1_ph53 + 1 | 0;
    var $41 = HEAP32[5247080 >> 2];
    var $tobool52 = ($41 | 0) == 0;
    if ($tobool52) {
      label = 35;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp54 = $42 > 0;
    if ($cmp54) {
      label = 27;
      break;
    } else {
      label = 33;
      break;
    }
   case 27:
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp56 = $43 < $42;
    if ($cmp56) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 29;
    break;
   case 29:
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249072 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249076 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp59 = $44 < $42;
    if ($cmp59) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[5249072 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249076 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 31;
    break;
   case 31:
    var $maxoutside = $19 + 8 | 0;
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp62 = $45 < $42;
    if ($cmp62) {
      label = 32;
      break;
    } else {
      label = 35;
      break;
    }
   case 32:
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[$maxoutside >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxoutside + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 35;
    break;
   case 33:
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp67 = $46 > $42;
    if ($cmp67) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 35;
    break;
   case 35:
    var $47 = HEAP32[5247036 >> 2];
    var $cmp72 = ($47 | 0) > 1;
    if ($cmp72) {
      label = 36;
      break;
    } else {
      var $coplanar_2 = $inc51;
      label = 38;
      break;
    }
   case 36:
    _qh_fprintf(5276952);
    var $coplanar_2 = $inc51;
    label = 38;
    break;
   case 37:
    var $48 = $38 & -16777217;
    HEAP32[$37 >> 2] = $48;
    var $coplanar_2 = $coplanar_1_ph53;
    label = 38;
    break;
   case 38:
    var $coplanar_2;
    var $49 = HEAP32[5244568 >> 2];
    var $inc80 = $49 + 1 | 0;
    HEAP32[5244568 >> 2] = $inc80;
    var $inc81 = $numhorizon_1_ph52 + 1 | 0;
    var $50 = HEAP32[$37 >> 2];
    var $bf_clear83 = $50 & 524288;
    var $tobool84 = ($bf_clear83 | 0) == 0;
    if ($tobool84) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $51 = HEAP32[$goodhorizon >> 2];
    var $inc86 = $51 + 1 | 0;
    HEAP32[$goodhorizon >> 2] = $inc86;
    label = 40;
    break;
   case 40:
    var $52 = HEAP32[5247036 >> 2];
    var $cmp88 = ($52 | 0) > 3;
    if ($cmp88) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    _qh_errprint($19, 0, 0, 0);
    label = 42;
    break;
   case 42:
    var $incdec_ptr43 = $incdec_ptr45 + 4 | 0;
    var $53 = HEAP32[$incdec_ptr45 >> 2];
    var $tobool2344 = ($53 | 0) == 0;
    if ($tobool2344) {
      var $coplanar_3 = $coplanar_2;
      var $numhorizon_2 = $inc81;
      label = 43;
      break;
    } else {
      var $numhorizon_1_ph52 = $inc81;
      var $coplanar_1_ph53 = $coplanar_2;
      var $incdec_ptr4354 = $incdec_ptr43;
      var $18 = $53;
      label = 15;
      break;
    }
   case 43:
    var $numhorizon_2;
    var $coplanar_3;
    var $next = $visible_060 + 44 | 0;
    var $visible_0 = HEAP32[$next >> 2];
    var $tobool9 = ($visible_0 | 0) == 0;
    if ($tobool9) {
      var $numhorizon_0_lcssa = $numhorizon_2;
      label = 44;
      break;
    } else {
      var $numhorizon_058 = $numhorizon_2;
      var $coplanar_059 = $coplanar_3;
      var $visible_060 = $visible_0;
      label = 9;
      break;
    }
   case 44:
    var $numhorizon_0_lcssa;
    var $tobool94 = ($numhorizon_0_lcssa | 0) == 0;
    if ($tobool94) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _qh_precision();
    _qh_fprintf(5275392);
    var $54 = HEAP32[5248940 >> 2];
    _qh_printfacetlist($54);
    _qh_errexit(3, 0, 0);
    label = 46;
    break;
   case 46:
    var $55 = HEAP32[5247036 >> 2];
    var $cmp98 = ($55 | 0) > 0;
    if ($cmp98) {
      label = 47;
      break;
    } else {
      label = 49;
      break;
    }
   case 47:
    _qh_fprintf(5274836);
    var $_pre = HEAP32[5247036 >> 2];
    var $cmp101 = ($_pre | 0) > 3;
    var $56 = HEAP32[5248992 >> 2];
    var $cmp103 = ($56 | 0) < 50;
    var $or_cond1 = $cmp101 & $cmp103;
    if ($or_cond1) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    _qh_printlists();
    label = 49;
    break;
   case 49:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_findhorizon["X"] = 1;
function _qh_nextfurthest($visible) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248948 >> 2];
    var $1 = HEAP32[5248944 >> 2];
    var $cmp57 = ($0 | 0) == ($1 | 0);
    if ($cmp57) {
      var $retval_0 = 0;
      label = 40;
      break;
    } else {
      var $2 = $0;
      label = 3;
      break;
    }
   case 3:
    var $2;
    var $outsideset = $2 + 60 | 0;
    var $3 = HEAP32[$outsideset >> 2];
    var $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $next = $2 + 44 | 0;
    var $4 = HEAP32[$next >> 2];
    HEAP32[5248948 >> 2] = $4;
    label = 5;
    break;
   case 5:
    var $5 = HEAP32[5248948 >> 2];
    var $6 = HEAP32[5248944 >> 2];
    var $cmp = ($5 | 0) == ($6 | 0);
    if ($cmp) {
      var $retval_0 = 0;
      label = 40;
      break;
    } else {
      var $2 = $5;
      label = 3;
      break;
    }
   case 6:
    var $maxsize = $3 | 0;
    var $7 = HEAP32[$maxsize >> 2];
    var $arrayidx = $3 + 4 + ($7 << 2) | 0;
    var $i = $arrayidx;
    var $8 = HEAP32[$i >> 2];
    var $tobool3 = ($8 | 0) == 0;
    var $dec = $8 - 1 | 0;
    var $size_0 = $tobool3 ? $7 : $dec;
    var $tobool6 = ($size_0 | 0) == 0;
    if ($tobool6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_setfree($outsideset);
    var $next9 = $2 + 44 | 0;
    var $9 = HEAP32[$next9 >> 2];
    HEAP32[5248948 >> 2] = $9;
    label = 5;
    break;
   case 8:
    var $10 = HEAP32[5248704 >> 2];
    var $tobool11 = ($10 | 0) == 0;
    if ($tobool11) {
      label = 13;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $11 = $2 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear = $13 & 262144;
    var $tobool13 = ($bf_clear | 0) == 0;
    if ($tobool13) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_furthestout($2);
    label = 11;
    break;
   case 11:
    var $furthestdist = $2 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$furthestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$furthestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp17 = $14 < $15;
    if ($cmp17) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $next19 = $2 + 44 | 0;
    var $16 = HEAP32[$next19 >> 2];
    HEAP32[5248948 >> 2] = $16;
    label = 5;
    break;
   case 13:
    var $17 = HEAP32[5247364 >> 2];
    var $18 = HEAP32[5247468 >> 2];
    var $19 = $18 | $17;
    var $20 = ($19 | 0) == 0;
    if ($20) {
      label = 14;
      break;
    } else {
      label = 17;
      break;
    }
   case 14:
    var $21 = HEAP32[5247132 >> 2];
    var $tobool25 = ($21 | 0) == 0;
    if ($tobool25) {
      var $facet_0 = $2;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_furthestnext();
    var $22 = HEAP32[5248948 >> 2];
    var $facet_0 = $22;
    label = 16;
    break;
   case 16:
    var $facet_0;
    HEAP32[$visible >> 2] = $facet_0;
    var $outsideset28 = $facet_0 + 60 | 0;
    var $23 = HEAP32[$outsideset28 >> 2];
    var $call29 = _qh_setdellast($23);
    var $24 = $call29;
    var $retval_0 = $24;
    label = 40;
    break;
   case 17:
    var $tobool22 = ($17 | 0) == 0;
    if ($tobool22) {
      label = 35;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $25 = HEAP32[5248704 >> 2];
    var $tobool33 = ($25 | 0) == 0;
    if ($tobool33) {
      var $outcoplanar_2 = 0;
      label = 24;
      break;
    } else {
      var $outcoplanar_0_ph = 0;
      var $facet_1_in_ph = 5248940;
      label = 19;
      break;
    }
   case 19:
    var $facet_1_in_ph;
    var $outcoplanar_0_ph;
    var $26 = HEAP32[5248948 >> 2];
    var $facet_1_pre = HEAP32[$facet_1_in_ph >> 2];
    var $facet_1 = $facet_1_pre;
    label = 20;
    break;
   case 20:
    var $facet_1;
    var $tobool35 = ($facet_1 | 0) == 0;
    if ($tobool35) {
      var $outcoplanar_2 = $outcoplanar_0_ph;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $next36 = $facet_1 + 44 | 0;
    var $27 = HEAP32[$next36 >> 2];
    var $tobool37 = ($27 | 0) == 0;
    var $cmp38 = ($facet_1 | 0) == ($26 | 0);
    var $or_cond = $tobool37 | $cmp38;
    if ($or_cond) {
      var $outcoplanar_2 = $outcoplanar_0_ph;
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $outsideset41 = $facet_1 + 60 | 0;
    var $28 = HEAP32[$outsideset41 >> 2];
    var $tobool42 = ($28 | 0) == 0;
    if ($tobool42) {
      var $facet_1 = $27;
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $call45 = _qh_setsize($28);
    var $add = $call45 + $outcoplanar_0_ph | 0;
    var $outcoplanar_0_ph = $add;
    var $facet_1_in_ph = $next36;
    label = 19;
    break;
   case 24:
    var $outcoplanar_2;
    var $call49 = _qh_rand();
    var $29 = HEAP32[5248948 >> 2];
    var $tobool53 = ($29 | 0) == 0;
    if ($tobool53) {
      label = 34;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $30 = HEAP32[5249e3 >> 2];
    var $sub = $30 - $outcoplanar_2 | 0;
    var $conv = $call49 | 0;
    var $conv50 = $sub | 0;
    var $div = $conv / 2147483647;
    var $mul = $div * $conv50;
    var $call51 = Math.floor($mul);
    var $conv52 = $call51 & -1;
    var $facet_250 = $29;
    var $idx_051 = $conv52;
    label = 26;
    break;
   case 26:
    var $idx_051;
    var $facet_250;
    var $next58 = $facet_250 + 44 | 0;
    var $31 = HEAP32[$next58 >> 2];
    var $tobool59 = ($31 | 0) == 0;
    if ($tobool59) {
      label = 34;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $outsideset62 = $facet_250 + 60 | 0;
    var $32 = HEAP32[$outsideset62 >> 2];
    var $tobool63 = ($32 | 0) == 0;
    if ($tobool63) {
      var $facet_250 = $31;
      var $idx_051 = $idx_051;
      label = 26;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $maxsize66 = $32 | 0;
    var $33 = HEAP32[$maxsize66 >> 2];
    var $arrayidx69 = $32 + 4 + ($33 << 2) | 0;
    var $i70 = $arrayidx69;
    var $34 = HEAP32[$i70 >> 2];
    var $tobool71 = ($34 | 0) == 0;
    var $dec73 = $34 - 1 | 0;
    var $size_1 = $tobool71 ? $33 : $dec73;
    var $tobool79 = ($size_1 | 0) == 0;
    if ($tobool79) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_setfree($outsideset62);
    var $_pre = HEAP32[$next58 >> 2];
    var $idx_1 = $idx_051;
    var $37 = $_pre;
    label = 33;
    break;
   case 30:
    var $cmp82 = ($size_1 | 0) > ($idx_051 | 0);
    if ($cmp82) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    HEAP32[$visible >> 2] = $facet_250;
    var $35 = HEAP32[$outsideset62 >> 2];
    var $call86 = _qh_setdelnth($35, $idx_051);
    var $36 = $call86;
    var $retval_0 = $36;
    label = 40;
    break;
   case 32:
    var $sub88 = $idx_051 - $size_1 | 0;
    var $idx_1 = $sub88;
    var $37 = $31;
    label = 33;
    break;
   case 33:
    var $37;
    var $idx_1;
    var $tobool56 = ($37 | 0) == 0;
    if ($tobool56) {
      label = 34;
      break;
    } else {
      var $facet_250 = $37;
      var $idx_051 = $idx_1;
      label = 26;
      break;
    }
   case 34:
    _qh_fprintf(5274016);
    _qh_errexit(5, 0, 0);
    label = 5;
    break;
   case 35:
    var $38 = HEAP32[5248944 >> 2];
    var $previous = $38 + 40 | 0;
    var $39 = HEAP32[$previous >> 2];
    var $outsideset98 = $39 + 60 | 0;
    var $40 = HEAP32[$outsideset98 >> 2];
    var $call99 = _qh_setdellast($40);
    var $tobool100 = ($call99 | 0) == 0;
    if ($tobool100) {
      label = 36;
      break;
    } else {
      label = 39;
      break;
    }
   case 36:
    var $41 = HEAP32[$outsideset98 >> 2];
    var $tobool103 = ($41 | 0) == 0;
    if ($tobool103) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    _qh_setfree($outsideset98);
    label = 38;
    break;
   case 38:
    _qh_removefacet($39);
    _qh_prependfacet($39, 5248940);
    label = 5;
    break;
   case 39:
    var $42 = $call99;
    HEAP32[$visible >> 2] = $39;
    var $retval_0 = $42;
    label = 40;
    break;
   case 40:
    var $retval_0;
    return $retval_0;
  }
}
_qh_nextfurthest["X"] = 1;
function _qh_errexit2($exitcode, $facet, $otherfacet) {
  _qh_errprint($facet, $otherfacet, 0, 0);
  _qh_errexit($exitcode, 0, 0);
  return;
}
function _qh_partitionall($vertices, $points, $numpoints) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pointset = __stackBase__;
    var $dist = __stackBase__ + 4;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5273440);
    label = 4;
    break;
   case 4:
    var $call = _qh_settemp($numpoints);
    HEAP32[$pointset >> 2] = $call;
    HEAP32[5249e3 >> 2] = 0;
    var $tobool70 = ($numpoints | 0) == 0;
    if ($tobool70) {
      var $3 = $call;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $call + 4 | 0;
    var $1 = $p;
    var $point_071 = $points;
    var $pointp_072 = $1;
    var $i_073 = $numpoints;
    label = 6;
    break;
   case 6:
    var $i_073;
    var $pointp_072;
    var $point_071;
    var $dec = $i_073 - 1 | 0;
    var $incdec_ptr = $pointp_072 + 4 | 0;
    HEAP32[$pointp_072 >> 2] = $point_071;
    var $2 = HEAP32[5247504 >> 2];
    var $add_ptr = $point_071 + ($2 << 3) | 0;
    var $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      var $point_071 = $add_ptr;
      var $pointp_072 = $incdec_ptr;
      var $i_073 = $dec;
      label = 6;
      break;
    }
   case 7:
    var $_pre = HEAP32[$pointset >> 2];
    var $3 = $_pre;
    label = 8;
    break;
   case 8:
    var $3;
    _qh_settruncate($3, $numpoints);
    var $tobool1 = ($vertices | 0) == 0;
    if ($tobool1) {
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p5 = $vertices + 4 | 0;
    var $4 = HEAP32[$p5 >> 2];
    var $tobool868 = ($4 | 0) == 0;
    if ($tobool868) {
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $5 = $4;
    var $incdec_ptr76774 = $p5 + 4 | 0;
    var $incdec_ptr767 = $incdec_ptr76774;
    var $incdec_ptr769 = $incdec_ptr767;
    var $6 = $5;
    label = 11;
    break;
   case 11:
    var $6;
    var $incdec_ptr769;
    var $point10 = $6 + 8 | 0;
    var $7 = HEAP32[$point10 >> 2];
    var $call11 = _qh_pointid($7);
    var $cmp12 = ($call11 | 0) > -1;
    if ($cmp12) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $p16 = $3 + 4 + ($call11 << 2) | 0;
    HEAP32[$p16 >> 2] = 0;
    label = 13;
    break;
   case 13:
    var $incdec_ptr7 = $incdec_ptr769 + 4 | 0;
    var $8 = HEAP32[$incdec_ptr769 >> 2];
    var $tobool8 = ($8 | 0) == 0;
    if ($tobool8) {
      label = 14;
      break;
    } else {
      var $incdec_ptr769 = $incdec_ptr7;
      var $6 = $8;
      label = 11;
      break;
    }
   case 14:
    var $9 = HEAP32[5247016 >> 2];
    var $call20 = _qh_pointid($9);
    var $cmp21 = ($call20 | 0) > -1;
    if ($cmp21) {
      label = 15;
      break;
    } else {
      label = 18;
      break;
    }
   case 15:
    var $10 = HEAP32[5247408 >> 2];
    var $sub = $10 - 1 | 0;
    var $cmp22 = ($sub | 0) == ($call20 | 0);
    if ($cmp22) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $11 = HEAP32[5247412 >> 2];
    var $sub25 = $11 ^ -1;
    var $cmp26 = ($call20 | 0) == ($sub25 | 0);
    if ($cmp26) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p30 = $3 + 4 + ($call20 << 2) | 0;
    HEAP32[$p30 >> 2] = 0;
    label = 18;
    break;
   case 18:
    var $12 = HEAP32[5247028 >> 2];
    var $13 = HEAP32[5247124 >> 2];
    var $notlhs = ($12 | 0) == 0;
    var $notrhs = ($13 | 0) == 0;
    var $or_cond_not = $notrhs | $notlhs;
    var $14 = HEAP32[5247080 >> 2];
    var $tobool36 = ($14 | 0) != 0;
    var $or_cond1 = $or_cond_not | $tobool36;
    if ($or_cond1) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $call38 = _qh_pointid($12);
    var $cmp39 = ($call38 | 0) > -1;
    if ($cmp39) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $15 = HEAP32[$pointset >> 2];
    var $p43 = $15 + 4 + ($call38 << 2) | 0;
    HEAP32[$p43 >> 2] = 0;
    label = 21;
    break;
   case 21:
    var $16 = HEAP32[5246964 >> 2];
    var $tobool46 = ($16 | 0) == 0;
    if ($tobool46) {
      label = 22;
      break;
    } else {
      var $35 = $16;
      label = 40;
      break;
    }
   case 22:
    var $17 = HEAP32[5244576 >> 2];
    var $cmp48 = ($17 | 0) > 50;
    var $conv = $cmp48 ? 2 : 1;
    var $18 = HEAP32[5247080 >> 2];
    var $tobool49 = ($18 | 0) != 0;
    var $conv51 = $tobool49 ? 2 : 1;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $19 * $conv51;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp52 = $mul < $20;
    var $_mul = $cmp52 ? $20 : $mul;
    var $mul59 = $conv * $_mul;
    var $21 = HEAP32[5247512 >> 2];
    var $22 = HEAP32[5247504 >> 2];
    var $sub60 = $21 - 1 | 0;
    var $sub61 = $sub60 - $22 | 0;
    HEAP32[5244592 >> 2] = $sub61;
    var $facet_060 = HEAP32[5248940 >> 2];
    var $tobool6361 = ($facet_060 | 0) == 0;
    if ($tobool6361) {
      var $35 = 0;
      label = 40;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $23 = HEAP32[5248992 >> 2];
    var $point_end_062 = $numpoints;
    var $remaining_063 = $23;
    var $bestdist_064 = -1.7976931348623157e+308;
    var $facet_065 = $facet_060;
    label = 24;
    break;
   case 24:
    var $facet_065;
    var $bestdist_064;
    var $remaining_063;
    var $point_end_062;
    var $next = $facet_065 + 44 | 0;
    var $24 = HEAP32[$next >> 2];
    var $tobool64 = ($24 | 0) == 0;
    if ($tobool64) {
      label = 39;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $dec66 = $remaining_063 - 1 | 0;
    var $div = ($point_end_062 | 0) / ($remaining_063 | 0) & -1;
    var $add = $div + 100 | 0;
    var $call67 = _qh_setnew($add);
    var $outsideset = $facet_065 + 60 | 0;
    HEAP32[$outsideset >> 2] = $call67;
    var $25 = HEAP32[$pointset >> 2];
    var $tobool68 = ($25 | 0) == 0;
    if ($tobool68) {
      var $point_end_342 = 0;
      var $bestdist_344 = $bestdist_064;
      label = 37;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $p72 = $25 + 4 | 0;
    var $26 = HEAP32[$p72 >> 2];
    var $call73 = _qh_setsize($25);
    var $cmp7551 = ($call73 | 0) > 0;
    if ($cmp7551) {
      var $bestpoint_053 = 0;
      var $point_i_054 = 0;
      var $point_end_155 = 0;
      var $bestdist_156 = $bestdist_064;
      var $point_157_in = $26;
      label = 27;
      break;
    } else {
      var $point_end_342 = 0;
      var $bestdist_344 = $bestdist_064;
      label = 37;
      break;
    }
   case 27:
    var $point_157_in;
    var $bestdist_156;
    var $point_end_155;
    var $point_i_054;
    var $bestpoint_053;
    var $point_157 = $point_157_in;
    var $tobool78 = ($point_157_in | 0) == 0;
    if ($tobool78) {
      var $bestdist_2 = $bestdist_156;
      var $point_end_2 = $point_end_155;
      var $bestpoint_1 = $bestpoint_053;
      label = 34;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $27 = HEAP32[5244320 >> 2];
    var $inc = $27 + 1 | 0;
    HEAP32[5244320 >> 2] = $inc;
    _qh_distplane($point_157, $facet_065, $dist);
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp80 = $28 < $mul59;
    if ($cmp80) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $inc83 = $point_end_155 + 1 | 0;
    var $p86 = $25 + 4 + ($point_end_155 << 2) | 0;
    HEAP32[$p86 >> 2] = $point_157_in;
    var $bestdist_2 = $bestdist_156;
    var $point_end_2 = $inc83;
    var $bestpoint_1 = $bestpoint_053;
    label = 34;
    break;
   case 30:
    var $29 = HEAP32[5249e3 >> 2];
    var $inc87 = $29 + 1 | 0;
    HEAP32[5249e3 >> 2] = $inc87;
    var $tobool88 = ($bestpoint_053 | 0) == 0;
    if ($tobool88) {
      var $bestdist_2 = $28;
      var $point_end_2 = $point_end_155;
      var $bestpoint_1 = $point_157;
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $cmp91 = $28 > $bestdist_156;
    if ($cmp91) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $30 = $bestpoint_053;
    _qh_setappend($outsideset, $30);
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $bestdist_2 = $31;
    var $point_end_2 = $point_end_155;
    var $bestpoint_1 = $point_157;
    label = 34;
    break;
   case 33:
    _qh_setappend($outsideset, $point_157_in);
    var $bestdist_2 = $bestdist_156;
    var $point_end_2 = $point_end_155;
    var $bestpoint_1 = $bestpoint_053;
    label = 34;
    break;
   case 34:
    var $bestpoint_1;
    var $point_end_2;
    var $bestdist_2;
    var $inc102 = $point_i_054 + 1 | 0;
    var $p105 = $25 + 4 + ($inc102 << 2) | 0;
    var $32 = HEAP32[$p105 >> 2];
    var $exitcond75 = ($inc102 | 0) == ($call73 | 0);
    if ($exitcond75) {
      label = 35;
      break;
    } else {
      var $bestpoint_053 = $bestpoint_1;
      var $point_i_054 = $inc102;
      var $point_end_155 = $point_end_2;
      var $bestdist_156 = $bestdist_2;
      var $point_157_in = $32;
      label = 27;
      break;
    }
   case 35:
    var $tobool108 = ($bestpoint_1 | 0) == 0;
    if ($tobool108) {
      var $point_end_342 = $point_end_2;
      var $bestdist_344 = $bestdist_2;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $33 = $bestpoint_1;
    _qh_setappend($outsideset, $33);
    var $furthestdist = $facet_065 | 0;
    HEAPF64[tempDoublePtr >> 3] = $bestdist_2, HEAP32[$furthestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$furthestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $point_end_341 = $point_end_2;
    var $bestdist_343 = $bestdist_2;
    label = 38;
    break;
   case 37:
    var $bestdist_344;
    var $point_end_342;
    _qh_setfree($outsideset);
    var $point_end_341 = $point_end_342;
    var $bestdist_343 = $bestdist_344;
    label = 38;
    break;
   case 38:
    var $bestdist_343;
    var $point_end_341;
    var $34 = HEAP32[$pointset >> 2];
    _qh_settruncate($34, $point_end_341);
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool63 = ($facet_0 | 0) == 0;
    if ($tobool63) {
      label = 39;
      break;
    } else {
      var $point_end_062 = $point_end_341;
      var $remaining_063 = $dec66;
      var $bestdist_064 = $bestdist_343;
      var $facet_065 = $facet_0;
      label = 24;
      break;
    }
   case 39:
    var $_pre1 = HEAP32[5246964 >> 2];
    var $35 = $_pre1;
    label = 40;
    break;
   case 40:
    var $35;
    var $36 = HEAP32[5247080 >> 2];
    var $37 = $36 | $35;
    var $38 = HEAP32[5247044 >> 2];
    var $39 = $37 | $38;
    var $40 = HEAP32[5247048 >> 2];
    var $41 = $39 | $40;
    var $42 = ($41 | 0) == 0;
    if ($42) {
      label = 47;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    HEAP32[5249092 >> 2] = 1;
    var $43 = HEAP32[$pointset >> 2];
    var $tobool125 = ($43 | 0) == 0;
    if ($tobool125) {
      label = 46;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $p129 = $43 + 4 | 0;
    var $44 = HEAP32[$p129 >> 2];
    var $call130 = _qh_setsize($43);
    var $cmp13246 = ($call130 | 0) > 0;
    if ($cmp13246) {
      var $point_i_148 = 0;
      var $point_249_in = $44;
      label = 43;
      break;
    } else {
      label = 46;
      break;
    }
   case 43:
    var $point_249_in;
    var $point_i_148;
    var $tobool135 = ($point_249_in | 0) == 0;
    if ($tobool135) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $point_249 = $point_249_in;
    var $45 = HEAP32[5248940 >> 2];
    _qh_partitionpoint($point_249, $45);
    label = 45;
    break;
   case 45:
    var $inc139 = $point_i_148 + 1 | 0;
    var $p142 = $43 + 4 + ($inc139 << 2) | 0;
    var $46 = HEAP32[$p142 >> 2];
    var $exitcond = ($inc139 | 0) == ($call130 | 0);
    if ($exitcond) {
      label = 46;
      break;
    } else {
      var $point_i_148 = $inc139;
      var $point_249_in = $46;
      label = 43;
      break;
    }
   case 46:
    HEAP32[5249092 >> 2] = 0;
    label = 47;
    break;
   case 47:
    var $47 = HEAP32[5244312 >> 2];
    var $48 = HEAP32[5244320 >> 2];
    var $add146 = $48 + $47 | 0;
    HEAP32[5244320 >> 2] = $add146;
    HEAP32[5244312 >> 2] = 0;
    _qh_settempfree($pointset);
    var $49 = HEAP32[5247036 >> 2];
    var $cmp147 = ($49 | 0) > 3;
    if ($cmp147) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    var $50 = HEAP32[5248940 >> 2];
    _qh_printfacetlist($50);
    label = 49;
    break;
   case 49:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_partitionall["X"] = 1;
function _qh_precision() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249024 >> 2];
    var $tobool = ($0 | 0) == 0;
    var $1 = HEAP32[5247140 >> 2];
    var $tobool1 = ($1 | 0) != 0;
    var $or_cond = $tobool | $tobool1;
    var $2 = HEAP32[5247072 >> 2];
    var $tobool3 = ($2 | 0) != 0;
    var $or_cond1 = $or_cond | $tobool3;
    var $or_cond1_not = $or_cond1 ^ 1;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $3 < 8.988465674311579e+307;
    var $or_cond2 = $cmp & $or_cond1_not;
    if ($or_cond2) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $4 = HEAP32[5247036 >> 2];
    var $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5266680);
    label = 5;
    break;
   case 5:
    _longjmp(5248830, 3);
   case 6:
    return;
  }
}
function _qh_partitionpoint($point, $facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestdist = __stackBase__;
    var $isoutside = __stackBase__ + 8;
    var $numpart = __stackBase__ + 12;
    var $0 = HEAP32[5249092 >> 2];
    var $tobool = ($0 | 0) == 0;
    var $1 = HEAP32[5246964 >> 2];
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call = _qh_findbestnew($point, $facet, $bestdist, $1, $isoutside, $numpart);
    var $bestfacet_0 = $call;
    label = 5;
    break;
   case 4:
    var $call1 = _qh_findbest($point, $facet, $1, 1, 0, $bestdist, $isoutside, $numpart);
    var $bestfacet_0 = $call1;
    label = 5;
    break;
   case 5:
    var $bestfacet_0;
    var $2 = HEAP32[5244592 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5244592 >> 2] = $inc;
    var $3 = HEAP32[$numpart >> 2];
    var $4 = HEAP32[5244312 >> 2];
    var $add = $4 + $3 | 0;
    HEAP32[5244312 >> 2] = $add;
    var $5 = HEAP32[5248704 >> 2];
    var $tobool2 = ($5 | 0) == 0;
    if ($tobool2) {
      label = 15;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $6 = HEAP32[5246996 >> 2];
    var $tobool4 = ($6 | 0) == 0;
    if ($tobool4) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $7 = HEAP32[$isoutside >> 2];
    var $tobool5 = ($7 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$9;
    var $cmp = $8 < $sub;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _qh_precision();
    label = 10;
    break;
   case 10:
    var $10 = HEAP32[5247500 >> 2];
    var $tobool9 = ($10 | 0) == 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool9) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248712 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248716 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub11 = -$12;
    var $cmp12 = $11 < $sub11;
    if ($cmp12) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$isoutside >> 2] = 1;
    label = 16;
    break;
   case 13:
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub16 = -$13;
    var $cmp17 = $11 < $sub16;
    if ($cmp17) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    HEAP32[$isoutside >> 2] = 1;
    label = 16;
    break;
   case 15:
    var $_pr = HEAP32[$isoutside >> 2];
    var $tobool22 = ($_pr | 0) == 0;
    if ($tobool22) {
      label = 26;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $outsideset = $bestfacet_0 + 60 | 0;
    var $14 = HEAP32[$outsideset >> 2];
    var $tobool24 = ($14 | 0) == 0;
    if ($tobool24) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $call26 = _qh_setlast($14);
    var $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 18;
      break;
    } else {
      label = 21;
      break;
    }
   case 18:
    var $15 = $point;
    _qh_setappend($outsideset, $15);
    var $16 = $bestfacet_0 + 76 | 0;
    var $17 = $16;
    var $18 = HEAP32[$17 >> 2];
    var $bf_clear = $18 & 1024;
    var $tobool30 = ($bf_clear | 0) == 0;
    if ($tobool30) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_removefacet($bestfacet_0);
    _qh_appendfacet($bestfacet_0);
    label = 20;
    break;
   case 20:
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $furthestdist = $bestfacet_0 | 0;
    HEAPF64[tempDoublePtr >> 3] = $19, HEAP32[$furthestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$furthestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 24;
    break;
   case 21:
    var $furthestdist34 = $bestfacet_0 | 0;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$furthestdist34 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$furthestdist34 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp35 = $20 < $21;
    var $22 = $point;
    if ($cmp35) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _qh_setappend($outsideset, $22);
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $23, HEAP32[$furthestdist34 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$furthestdist34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 24;
    break;
   case 23:
    _qh_setappend2ndlast($outsideset, $22);
    label = 24;
    break;
   case 24:
    var $24 = HEAP32[5249e3 >> 2];
    var $inc43 = $24 + 1 | 0;
    HEAP32[5249e3 >> 2] = $inc43;
    var $25 = HEAP32[5247036 >> 2];
    var $cmp44 = ($25 | 0) > 3;
    if ($cmp44) {
      label = 25;
      break;
    } else {
      label = 42;
      break;
    }
   case 25:
    _qh_fprintf(5268644);
    label = 42;
    break;
   case 26:
    var $26 = HEAP32[5246996 >> 2];
    var $tobool51 = ($26 | 0) == 0;
    if ($tobool51) {
      label = 27;
      break;
    } else {
      label = 29;
      break;
    }
   case 27:
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub53 = -$28;
    var $cmp54 = $27 < $sub53;
    if ($cmp54) {
      label = 35;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $29 = HEAP32[5243272 >> 2];
    var $inc561 = $29 + 1 | 0;
    HEAP32[5243272 >> 2] = $inc561;
    label = 30;
    break;
   case 29:
    var $30 = HEAP32[5243272 >> 2];
    var $inc56 = $30 + 1 | 0;
    HEAP32[5243272 >> 2] = $inc56;
    _qh_precision();
    label = 30;
    break;
   case 30:
    var $31 = HEAP32[5247044 >> 2];
    var $32 = HEAP32[5247500 >> 2];
    var $add60 = -$32 | 0;
    var $tobool61 = ($31 | 0) == ($add60 | 0);
    if ($tobool61) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$bestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$bestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp63 = $33 > $34;
    if ($cmp63) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_partitioncoplanar($point, $bestfacet_0, $bestdist);
    label = 42;
    break;
   case 33:
    var $35 = HEAP32[5247036 >> 2];
    var $cmp66 = ($35 | 0) > 3;
    if ($cmp66) {
      label = 34;
      break;
    } else {
      label = 42;
      break;
    }
   case 34:
    _qh_fprintf(5267700);
    label = 42;
    break;
   case 35:
    var $36 = HEAP32[5247500 >> 2];
    var $tobool73 = ($36 | 0) == 0;
    if ($tobool73) {
      label = 38;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248712 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248716 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub75 = -$37;
    var $cmp76 = $27 > $sub75;
    if ($cmp76) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $38 = HEAP32[5244328 >> 2];
    var $inc78 = $38 + 1 | 0;
    HEAP32[5244328 >> 2] = $inc78;
    _qh_partitioncoplanar($point, $bestfacet_0, $bestdist);
    label = 42;
    break;
   case 38:
    var $39 = HEAP32[5244304 >> 2];
    var $inc80 = $39 + 1 | 0;
    HEAP32[5244304 >> 2] = $inc80;
    var $40 = HEAP32[5247036 >> 2];
    var $cmp81 = ($40 | 0) > 3;
    if ($cmp81) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _qh_fprintf(5267480);
    label = 40;
    break;
   case 40:
    var $41 = HEAP32[5247048 >> 2];
    var $tobool86 = ($41 | 0) == 0;
    if ($tobool86) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    _qh_partitioncoplanar($point, $bestfacet_0, $bestdist);
    label = 42;
    break;
   case 42:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_partitionpoint["X"] = 1;
function _qh_printsummary() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $outerplane = __stackBase__;
    var $innerplane = __stackBase__ + 8;
    var $0 = HEAP32[5243376 >> 2];
    var $1 = HEAP32[5247512 >> 2];
    var $2 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($2);
    var $add = $call + $1 | 0;
    var $3 = HEAP32[5248996 >> 2];
    var $4 = HEAP32[5249184 >> 2];
    var $call1 = _qh_setsize($4);
    var $sub = $3 - $call1 | 0;
    var $5 = HEAP32[5247016 >> 2];
    var $call2 = _qh_pointid($5);
    var $numtricoplanars_0_ph = 0;
    var $facet_0_in_ph = 5248940;
    var $nonsimplicial_0_ph = 0;
    var $numcoplanars_0_ph = 0;
    label = 3;
    break;
   case 3:
    var $numcoplanars_0_ph;
    var $nonsimplicial_0_ph;
    var $facet_0_in_ph;
    var $numtricoplanars_0_ph;
    var $numtricoplanars_0_ph126 = $numtricoplanars_0_ph;
    var $facet_0_in_ph125 = $facet_0_in_ph;
    var $numcoplanars_0_ph124 = $numcoplanars_0_ph;
    label = 4;
    break;
   case 4:
    var $numcoplanars_0_ph124;
    var $facet_0_in_ph125;
    var $numtricoplanars_0_ph126;
    var $facet_0_in = $facet_0_in_ph125;
    var $numcoplanars_0 = $numcoplanars_0_ph124;
    label = 5;
    break;
   case 5:
    var $numcoplanars_0;
    var $facet_0_in;
    var $facet_0 = HEAP32[$facet_0_in >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $next = $facet_0 + 44 | 0;
    var $6 = HEAP32[$next >> 2];
    var $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $coplanarset = $facet_0 + 64 | 0;
    var $7 = HEAP32[$coplanarset >> 2];
    var $tobool4 = ($7 | 0) == 0;
    if ($tobool4) {
      var $numcoplanars_1 = $numcoplanars_0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $call6 = _qh_setsize($7);
    var $add7 = $call6 + $numcoplanars_0 | 0;
    var $numcoplanars_1 = $add7;
    label = 9;
    break;
   case 9:
    var $numcoplanars_1;
    var $8 = $facet_0 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear = $10 & 524288;
    var $tobool8 = ($bf_clear | 0) == 0;
    if ($tobool8) {
      var $facet_0_in = $next;
      var $numcoplanars_0 = $numcoplanars_1;
      label = 5;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $bf_clear11 = $10 & 8192;
    var $tobool12 = ($bf_clear11 | 0) == 0;
    if ($tobool12) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $11 = $10 & 268435968;
    var $not_ = ($11 | 0) == 268435968;
    var $inc = $not_ & 1;
    var $numtricoplanars_0_inc = $inc + $numtricoplanars_0_ph126 | 0;
    var $numtricoplanars_0_ph126 = $numtricoplanars_0_inc;
    var $facet_0_in_ph125 = $next;
    var $numcoplanars_0_ph124 = $numcoplanars_1;
    label = 4;
    break;
   case 12:
    var $vertices = $facet_0 + 48 | 0;
    var $12 = HEAP32[$vertices >> 2];
    var $call22 = _qh_setsize($12);
    var $13 = HEAP32[5247504 >> 2];
    var $not_cmp = ($call22 | 0) != ($13 | 0);
    var $inc24 = $not_cmp & 1;
    var $nonsimplicial_0_inc24 = $inc24 + $nonsimplicial_0_ph | 0;
    var $numtricoplanars_0_ph = $numtricoplanars_0_ph126;
    var $facet_0_in_ph = $next;
    var $nonsimplicial_0_ph = $nonsimplicial_0_inc24;
    var $numcoplanars_0_ph = $numcoplanars_1;
    label = 3;
    break;
   case 13:
    var $cmp29 = ($call2 | 0) > -1;
    var $14 = HEAP32[5247408 >> 2];
    if ($cmp29) {
      label = 14;
      break;
    } else {
      var $size_0 = $add;
      var $16 = $14;
      label = 16;
      break;
    }
   case 14:
    var $sub31 = $14 - 1 | 0;
    var $cmp32 = ($sub31 | 0) == ($call2 | 0);
    if ($cmp32) {
      var $size_0 = $add;
      var $16 = $14;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $15 = HEAP32[5247412 >> 2];
    var $sub35 = $15 ^ -1;
    var $not_cmp36 = ($call2 | 0) != ($sub35 | 0);
    var $dec = $not_cmp36 << 31 >> 31;
    var $add_dec = $dec + $add | 0;
    var $size_0 = $add_dec;
    var $16 = $14;
    label = 16;
    break;
   case 16:
    var $16;
    var $size_0;
    var $17 = HEAP32[5247412 >> 2];
    var $18 = $17 | $16;
    var $19 = ($18 | 0) == 0;
    if ($19) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_fprintf(5266296);
    label = 18;
    break;
   case 18:
    var $20 = HEAP32[5247456 >> 2];
    var $tobool43 = ($20 | 0) == 0;
    if ($tobool43) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $21 = HEAP32[5247024 >> 2];
    var $22 = HEAP32[5247012 >> 2];
    var $add45 = $22 + $21 | 0;
    var $23 = HEAP32[5247404 >> 2];
    var $add46 = $add45 + $23 | 0;
    var $goodused_0 = $add46;
    label = 23;
    break;
   case 20:
    var $24 = HEAP32[5246996 >> 2];
    var $tobool48 = ($24 | 0) == 0;
    if ($tobool48) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $25 = HEAP32[5247024 >> 2];
    var $26 = HEAP32[5247012 >> 2];
    var $add50 = $26 + $25 | 0;
    var $27 = HEAP32[5247020 >> 2];
    var $add51 = $add50 + $27 | 0;
    var $goodused_0 = $add51;
    label = 23;
    break;
   case 22:
    var $28 = HEAP32[5249004 >> 2];
    var $goodused_0 = $28;
    label = 23;
    break;
   case 23:
    var $goodused_0;
    var $29 = HEAP32[5244576 >> 2];
    var $30 = HEAP32[5243312 >> 2];
    var $sub55 = $29 - $30 | 0;
    var $31 = HEAP32[5243304 >> 2];
    var $32 = HEAP32[5247472 >> 2];
    var $tobool57 = ($32 | 0) == 0;
    if ($tobool57) {
      label = 35;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    if ($tobool43) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_fprintf(5265820);
    label = 27;
    break;
   case 26:
    _qh_fprintf(5265476);
    label = 27;
    break;
   case 27:
    _qh_fprintf(5265140);
    var $tobool64 = ($0 | 0) == 0;
    if ($tobool64) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    _qh_fprintf(5263888);
    label = 29;
    break;
   case 29:
    var $sub67 = $numcoplanars_0 - $0 | 0;
    var $cmp68 = ($sub67 | 0) > 0;
    if ($cmp68) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _qh_fprintf(5263504);
    label = 33;
    break;
   case 31:
    var $sub72 = $size_0 - $sub | 0;
    var $sub73 = $sub72 - $0 | 0;
    var $cmp74 = ($sub73 | 0) > 0;
    if ($cmp74) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5263188);
    label = 33;
    break;
   case 33:
    _qh_fprintf(5262812);
    var $tobool82 = ($nonsimplicial_0_ph | 0) == 0;
    if ($tobool82) {
      label = 60;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    _qh_fprintf(5261688);
    label = 60;
    break;
   case 35:
    var $33 = HEAP32[5246996 >> 2];
    var $tobool88 = ($33 | 0) == 0;
    if ($tobool88) {
      label = 47;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    if ($tobool43) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    _qh_fprintf(5261224);
    label = 39;
    break;
   case 38:
    _qh_fprintf(5260792);
    label = 39;
    break;
   case 39:
    _qh_fprintf(5260360);
    var $tobool96 = ($0 | 0) == 0;
    if ($tobool96) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    _qh_fprintf(5263888);
    label = 41;
    break;
   case 41:
    var $sub99 = $numcoplanars_0 - $0 | 0;
    var $cmp100 = ($sub99 | 0) > 0;
    if ($cmp100) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    _qh_fprintf(5263504);
    label = 45;
    break;
   case 43:
    var $sub104 = $size_0 - $sub | 0;
    var $sub105 = $sub104 - $0 | 0;
    var $cmp106 = ($sub105 | 0) > 0;
    if ($cmp106) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    _qh_fprintf(5263188);
    label = 45;
    break;
   case 45:
    _qh_fprintf(5259932);
    var $tobool114 = ($nonsimplicial_0_ph | 0) == 0;
    if ($tobool114) {
      label = 60;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    _qh_fprintf(5259720);
    label = 60;
    break;
   case 47:
    var $34 = HEAP32[5247032 >> 2];
    var $tobool120 = ($34 | 0) == 0;
    if ($tobool120) {
      label = 54;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    _qh_fprintf(5259416);
    _qh_fprintf(5259164);
    _qh_fprintf(5258868);
    var $tobool122 = ($numcoplanars_0 | 0) == 0;
    if ($tobool122) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    _qh_fprintf(5257876);
    label = 50;
    break;
   case 50:
    _qh_fprintf(5257504);
    var $tobool136 = ($goodused_0 | 0) == 0;
    if ($tobool136) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    _qh_fprintf(5257104);
    label = 52;
    break;
   case 52:
    var $tobool139 = ($nonsimplicial_0_ph | 0) == 0;
    if ($tobool139) {
      label = 60;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    _qh_fprintf(5256812);
    label = 60;
    break;
   case 54:
    _qh_fprintf(5256424);
    _qh_fprintf(5256188);
    var $tobool145 = ($numcoplanars_0 | 0) == 0;
    if ($tobool145) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    _qh_fprintf(5255124);
    label = 56;
    break;
   case 56:
    _qh_fprintf(5254888);
    var $tobool159 = ($goodused_0 | 0) == 0;
    if ($tobool159) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    _qh_fprintf(5254472);
    label = 58;
    break;
   case 58:
    var $tobool162 = ($nonsimplicial_0_ph | 0) == 0;
    if ($tobool162) {
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    _qh_fprintf(5254252);
    label = 60;
    break;
   case 60:
    var $tobool170 = ($numtricoplanars_0_ph126 | 0) == 0;
    if ($tobool170) {
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    _qh_fprintf(5253856);
    label = 62;
    break;
   case 62:
    _qh_fprintf(5253632);
    var $35 = HEAP32[5247380 >> 2];
    var $cmp173 = ($35 | 0) == -2147483648;
    if ($cmp173) {
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    _qh_fprintf(5253412);
    label = 65;
    break;
   case 64:
    _qh_fprintf(5281244);
    label = 65;
    break;
   case 65:
    _qh_fprintf(5252900);
    _qh_fprintf(5252620);
    var $36 = HEAP32[5246996 >> 2];
    var $tobool177 = ($36 | 0) == 0;
    if ($tobool177) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    _qh_fprintf(5252396);
    label = 67;
    break;
   case 67:
    _qh_fprintf(5252208);
    var $add56 = -$31 | 0;
    var $tobool184 = ($sub55 | 0) == ($add56 | 0);
    if ($tobool184) {
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    _qh_fprintf(5251888);
    _qh_fprintf(5251528);
    _qh_fprintf(5251304);
    label = 69;
    break;
   case 69:
    var $37 = HEAP32[5247364 >> 2];
    var $tobool191 = ($37 | 0) == 0;
    var $38 = HEAP32[5249132 >> 2];
    var $tobool193 = ($38 | 0) != 0;
    var $or_cond3 = $tobool191 & $tobool193;
    if ($or_cond3) {
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 70:
    var $39 = HEAP32[5249020 >> 2];
    var $conv = $39 >>> 0;
    var $div = $conv / 1e3;
    var $conv195 = $div;
    HEAPF64[tempDoublePtr >> 3] = $conv195, HEAP32[5243288 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243292 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_fprintf(5251088);
    label = 71;
    break;
   case 71:
    var $40 = HEAP32[5247376 >> 2];
    var $tobool198 = ($40 | 0) == 0;
    if ($tobool198) {
      label = 74;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $41 = HEAP32[5247140 >> 2];
    var $42 = HEAP32[5247072 >> 2];
    var $43 = $42 | $41;
    var $44 = ($43 | 0) == 0;
    if ($44) {
      label = 73;
      break;
    } else {
      label = 78;
      break;
    }
   case 73:
    _qh_fprintf(5250840);
    label = 78;
    break;
   case 74:
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp209 = $45 < 8.988465674311579e+307;
    if ($cmp209) {
      label = 75;
      break;
    } else {
      label = 78;
      break;
    }
   case 75:
    var $46 = HEAP32[5244424 >> 2];
    var $tobool212 = ($46 | 0) == 0;
    if ($tobool212) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    _qh_fprintf(5250432);
    label = 78;
    break;
   case 77:
    _qh_fprintf(5250208);
    label = 78;
    break;
   case 78:
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249136 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249140 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp218 = $47 != 0;
    if ($cmp218) {
      label = 79;
      break;
    } else {
      label = 80;
      break;
    }
   case 79:
    _qh_fprintf(5249972);
    label = 80;
    break;
   case 80:
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249144 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249148 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp224 = $48 != 0;
    if ($cmp224) {
      label = 81;
      break;
    } else {
      label = 82;
      break;
    }
   case 81:
    _qh_fprintf(5302324);
    label = 82;
    break;
   case 82:
    var $49 = HEAP32[5247080 >> 2];
    var $tobool230 = ($49 | 0) == 0;
    if ($tobool230) {
      label = 92;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    _qh_outerinner(0, $outerplane, $innerplane);
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $51 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul232 = $51 * 2;
    var $cmp233 = $50 > $mul232;
    if ($cmp233) {
      label = 84;
      break;
    } else {
      label = 88;
      break;
    }
   case 84:
    _qh_fprintf(5301936);
    var $52 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$outerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$outerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248720 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248724 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add238 = $53 + $54;
    var $div239 = $52 / $add238;
    var $cmp240 = $div239 > .05;
    if ($cmp240) {
      label = 85;
      break;
    } else {
      label = 87;
      break;
    }
   case 85:
    var $mul243 = $53 * 2;
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp244 = $mul243 > $55;
    var $56 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp247 = $56 > 8.988465674311579e+307;
    var $or_cond5 = $cmp244 & $cmp247;
    if ($or_cond5) {
      label = 86;
      break;
    } else {
      label = 87;
      break;
    }
   case 86:
    _qh_fprintf(5301416);
    label = 88;
    break;
   case 87:
    _qh_fprintf(5299656);
    label = 88;
    break;
   case 88:
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $58 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul253 = $58 * -2;
    var $cmp254 = $57 < $mul253;
    if ($cmp254) {
      label = 89;
      break;
    } else {
      label = 92;
      break;
    }
   case 89:
    _qh_fprintf(5300876);
    var $59 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub259 = -$59;
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248720 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248724 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $61 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add260 = $60 + $61;
    var $div261 = $sub259 / $add260;
    var $cmp262 = $div261 > .05;
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp265 = $62 > 8.988465674311579e+307;
    var $or_cond6 = $cmp262 & $cmp265;
    if ($or_cond6) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    _qh_fprintf(5301416);
    label = 92;
    break;
   case 91:
    _qh_fprintf(5299656);
    label = 92;
    break;
   case 92:
    _qh_fprintf(5299656);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printsummary["X"] = 1;
function _qh_memalloc($insize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($insize | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5262460);
    _qh_errexit(4, 0, 0);
    var $0 = HEAP32[5242912 >> 2];
    var $30 = $0;
    label = 15;
    break;
   case 4:
    var $1 = HEAP32[5242896 >> 2];
    var $cmp2 = ($1 | 0) < ($insize | 0);
    var $or_cond = $cmp | $cmp2;
    var $2 = HEAP32[5242912 >> 2];
    if ($or_cond) {
      var $30 = $2;
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $arrayidx = $2 + ($insize << 2) | 0;
    var $3 = HEAP32[$arrayidx >> 2];
    var $4 = HEAP32[5242908 >> 2];
    var $arrayidx4 = $4 + ($3 << 2) | 0;
    var $5 = HEAP32[$arrayidx4 >> 2];
    var $6 = HEAP32[5242980 >> 2];
    var $add = $6 + $5 | 0;
    HEAP32[5242980 >> 2] = $add;
    var $7 = HEAP32[5242904 >> 2];
    var $add_ptr = $7 + ($3 << 2) | 0;
    var $8 = HEAP32[$add_ptr >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $9 = HEAP32[5242940 >> 2];
    var $inc = $9 + 1 | 0;
    HEAP32[5242940 >> 2] = $inc;
    var $10 = HEAP32[5242968 >> 2];
    var $sub = $10 - $5 | 0;
    HEAP32[5242968 >> 2] = $sub;
    var $11 = HEAP32[$add_ptr >> 2];
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    HEAP32[$add_ptr >> 2] = $13;
    var $14 = HEAP32[5242936 >> 2];
    var $cmp8 = ($14 | 0) > 4;
    if ($cmp8) {
      label = 7;
      break;
    } else {
      var $retval_0 = $8;
      label = 23;
      break;
    }
   case 7:
    _qh_fprintf(5291120);
    var $retval_0 = $8;
    label = 23;
    break;
   case 8:
    var $15 = HEAP32[5242944 >> 2];
    var $inc13 = $15 + 1 | 0;
    HEAP32[5242944 >> 2] = $inc13;
    var $16 = HEAP32[5242924 >> 2];
    var $cmp14 = ($5 | 0) > ($16 | 0);
    if ($cmp14) {
      label = 9;
      break;
    } else {
      var $26 = $16;
      label = 13;
      break;
    }
   case 9:
    var $17 = HEAP32[5242964 >> 2];
    var $add16 = $17 + $16 | 0;
    HEAP32[5242964 >> 2] = $add16;
    var $18 = HEAP32[5242916 >> 2];
    var $tobool17 = ($18 | 0) == 0;
    var $_val = HEAP32[5242884 >> 2];
    var $_val37 = HEAP32[5242880 >> 2];
    var $bufsize_0 = $tobool17 ? $_val : $_val37;
    var $call = _qh_malloc($bufsize_0);
    var $tobool21 = ($call | 0) == 0;
    if ($tobool21) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5276860);
    _qh_errexit(4, 0, 0);
    label = 11;
    break;
   case 11:
    var $19 = HEAP32[5242916 >> 2];
    var $20 = $call;
    HEAP32[$20 >> 2] = $19;
    HEAP32[5242916 >> 2] = $call;
    var $21 = HEAP32[5242900 >> 2];
    var $add24 = $21 + 4 | 0;
    var $neg = $21 ^ -1;
    var $and = $add24 & $neg;
    var $add_ptr25 = $call + $and | 0;
    HEAP32[5242920 >> 2] = $add_ptr25;
    var $sub26 = $bufsize_0 - $and | 0;
    HEAP32[5242924 >> 2] = $sub26;
    var $22 = HEAP32[5242960 >> 2];
    var $add28 = $sub26 + $22 | 0;
    HEAP32[5242960 >> 2] = $add28;
    var $23 = HEAP32[5242980 >> 2];
    var $24 = HEAP32[5242968 >> 2];
    var $25 = HEAP32[5242964 >> 2];
    var $add29 = $23 - $5 | 0;
    var $add30 = $add29 + $24 | 0;
    var $add31 = $add30 + $25 | 0;
    var $sub32 = $add31 + $sub26 | 0;
    var $cmp33 = ($add28 | 0) == ($sub32 | 0);
    if ($cmp33) {
      var $26 = $sub26;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5271224);
    _qh_errexit(4, 0, 0);
    var $_pre = HEAP32[5242924 >> 2];
    var $26 = $_pre;
    label = 13;
    break;
   case 13:
    var $26;
    var $27 = HEAP32[5242920 >> 2];
    var $add_ptr37 = $27 + $5 | 0;
    HEAP32[5242920 >> 2] = $add_ptr37;
    var $sub38 = $26 - $5 | 0;
    HEAP32[5242924 >> 2] = $sub38;
    var $sub39 = $5 - $insize | 0;
    var $28 = HEAP32[5242984 >> 2];
    var $add40 = $sub39 + $28 | 0;
    HEAP32[5242984 >> 2] = $add40;
    var $29 = HEAP32[5242936 >> 2];
    var $cmp43 = ($29 | 0) > 4;
    if ($cmp43) {
      label = 14;
      break;
    } else {
      var $retval_0 = $27;
      label = 23;
      break;
    }
   case 14:
    _qh_fprintf(5266624);
    var $retval_0 = $27;
    label = 23;
    break;
   case 15:
    var $30;
    var $tobool49 = ($30 | 0) == 0;
    if ($tobool49) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5262740);
    _qh_errexit(5, 0, 0);
    label = 17;
    break;
   case 17:
    var $31 = HEAP32[5242948 >> 2];
    var $inc52 = $31 + 1 | 0;
    HEAP32[5242948 >> 2] = $inc52;
    var $32 = HEAP32[5242972 >> 2];
    var $add53 = $32 + $insize | 0;
    HEAP32[5242972 >> 2] = $add53;
    var $33 = HEAP32[5242976 >> 2];
    var $cmp54 = ($33 | 0) < ($add53 | 0);
    if ($cmp54) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAP32[5242976 >> 2] = $add53;
    label = 19;
    break;
   case 19:
    var $call57 = _qh_malloc($insize);
    var $tobool58 = ($call57 | 0) == 0;
    if ($tobool58) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5258796);
    _qh_errexit(4, 0, 0);
    label = 21;
    break;
   case 21:
    var $34 = HEAP32[5242936 >> 2];
    var $cmp61 = ($34 | 0) > 4;
    if ($cmp61) {
      label = 22;
      break;
    } else {
      var $retval_0 = $call57;
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5255784);
    var $retval_0 = $call57;
    label = 23;
    break;
   case 23:
    var $retval_0;
    return $retval_0;
  }
}
_qh_memalloc["X"] = 1;
function _qh_memfree($object, $insize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($object | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5242896 >> 2];
    var $cmp = ($0 | 0) < ($insize | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[5242952 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5242952 >> 2] = $inc;
    var $2 = HEAP32[5242912 >> 2];
    var $arrayidx = $2 + ($insize << 2) | 0;
    var $3 = HEAP32[$arrayidx >> 2];
    var $4 = HEAP32[5242908 >> 2];
    var $arrayidx2 = $4 + ($3 << 2) | 0;
    var $5 = HEAP32[$arrayidx2 >> 2];
    var $6 = HEAP32[5242968 >> 2];
    var $add = $6 + $5 | 0;
    HEAP32[5242968 >> 2] = $add;
    var $7 = HEAP32[5242980 >> 2];
    var $sub = $7 - $5 | 0;
    HEAP32[5242980 >> 2] = $sub;
    var $8 = HEAP32[5242904 >> 2];
    var $add_ptr = $8 + ($3 << 2) | 0;
    var $9 = HEAP32[$add_ptr >> 2];
    var $10 = $object;
    HEAP32[$10 >> 2] = $9;
    HEAP32[$add_ptr >> 2] = $object;
    var $11 = HEAP32[5242936 >> 2];
    var $cmp5 = ($11 | 0) > 4;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    _qh_fprintf(5253096);
    label = 8;
    break;
   case 6:
    var $12 = HEAP32[5242956 >> 2];
    var $inc10 = $12 + 1 | 0;
    HEAP32[5242956 >> 2] = $inc10;
    var $13 = HEAP32[5242972 >> 2];
    var $sub11 = $13 - $insize | 0;
    HEAP32[5242972 >> 2] = $sub11;
    _qh_free($object);
    var $14 = HEAP32[5242936 >> 2];
    var $cmp12 = ($14 | 0) > 4;
    if ($cmp12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_fprintf(5250376);
    label = 8;
    break;
   case 8:
    return;
  }
}
function _qh_intcompare($i, $j) {
  return HEAP32[$i >> 2] - HEAP32[$j >> 2] | 0;
}
function _qh_memfreeshort($curlong, $totlong) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242948 >> 2];
    var $1 = HEAP32[5242956 >> 2];
    var $sub = $0 - $1 | 0;
    HEAP32[$curlong >> 2] = $sub;
    var $2 = HEAP32[5242972 >> 2];
    HEAP32[$totlong >> 2] = $2;
    var $3 = HEAP32[5242916 >> 2];
    var $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      var $buffer_04 = $3;
      label = 3;
      break;
    }
   case 3:
    var $buffer_04;
    var $4 = $buffer_04;
    var $5 = HEAP32[$4 >> 2];
    _qh_free($buffer_04);
    var $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $buffer_04 = $5;
      label = 3;
      break;
    }
   case 4:
    HEAP32[5242916 >> 2] = 0;
    var $6 = HEAP32[5242896 >> 2];
    var $tobool1 = ($6 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $7 = HEAP32[5242912 >> 2];
    var $8 = $7;
    _qh_free($8);
    var $9 = HEAP32[5242904 >> 2];
    var $10 = $9;
    _qh_free($10);
    var $11 = HEAP32[5242908 >> 2];
    var $12 = $11;
    _qh_free($12);
    label = 6;
    break;
   case 6:
    var $13 = HEAP32[5242932 >> 2];
    for (var $$dest = 5242880 >> 2, $$stop = $$dest + 29; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5242932 >> 2] = $13;
    return;
  }
}
function _qh_meminit($ferr) {
  for (var $$dest = 5242880 >> 2, $$stop = $$dest + 29; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  HEAP32[5242932 >> 2] = $ferr;
  return;
}
function _qh_meminitbuffers($tracelevel) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[5242936 >> 2] = $tracelevel;
    HEAP32[5242892 >> 2] = 18;
    HEAP32[5242880 >> 2] = 65536;
    HEAP32[5242884 >> 2] = 131072;
    HEAP32[5242900 >> 2] = 7;
    var $call = _calloc();
    var $0 = $call;
    HEAP32[5242908 >> 2] = $0;
    var $call1 = _calloc();
    var $1 = $call1;
    HEAP32[5242904 >> 2] = $1;
    var $2 = HEAP32[5242908 >> 2];
    var $tobool2 = ($2 | 0) != 0;
    var $tobool3 = ($call1 | 0) != 0;
    var $or_cond = $tobool2 & $tobool3;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5298436);
    _qh_errexit(4, 0, 0);
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5242936 >> 2];
    var $cmp = ($3 | 0) > 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5296116);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _qh_memsetup() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242908 >> 2];
    var $1 = $0;
    var $2 = HEAP32[5242888 >> 2];
    _qsort($1, $2, 4, 10);
    var $3 = HEAP32[5242888 >> 2];
    var $sub = $3 - 1 | 0;
    var $4 = HEAP32[5242908 >> 2];
    var $arrayidx = $4 + ($sub << 2) | 0;
    var $5 = HEAP32[$arrayidx >> 2];
    HEAP32[5242896 >> 2] = $5;
    var $6 = HEAP32[5242880 >> 2];
    var $cmp = ($5 | 0) < ($6 | 0);
    var $7 = HEAP32[5242884 >> 2];
    var $cmp1 = ($5 | 0) < ($7 | 0);
    var $or_cond = $cmp & $cmp1;
    if ($or_cond) {
      var $8 = $5;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5294608);
    _qh_errexit(4, 0, 0);
    var $_pre = HEAP32[5242896 >> 2];
    var $8 = $_pre;
    label = 4;
    break;
   case 4:
    var $8;
    var $add = $8 << 2;
    var $mul = $add + 4 | 0;
    var $call = _qh_malloc($mul);
    var $9 = $call;
    HEAP32[5242912 >> 2] = $9;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5292828);
    _qh_errexit(4, 0, 0);
    label = 6;
    break;
   case 6:
    var $10 = HEAP32[5242896 >> 2];
    var $tobool512 = ($10 | 0) == -1;
    if ($tobool512) {
      label = 11;
      break;
    } else {
      var $dec13 = $10;
      label = 8;
      break;
    }
   case 7:
    var $_pr = HEAP32[5242896 >> 2];
    var $cmp89 = ($_pr | 0) < 0;
    if ($cmp89) {
      label = 11;
      break;
    } else {
      var $k_110 = 0;
      var $i_011 = 0;
      label = 10;
      break;
    }
   case 8:
    var $dec13;
    var $11 = HEAP32[5242912 >> 2];
    var $arrayidx6 = $11 + ($dec13 << 2) | 0;
    HEAP32[$arrayidx6 >> 2] = $dec13;
    var $tobool5 = ($dec13 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $dec = $dec13 - 1 | 0;
    var $dec13 = $dec;
    label = 8;
    break;
   case 10:
    var $i_011;
    var $k_110;
    var $12 = HEAP32[5242912 >> 2];
    var $arrayidx10 = $12 + ($k_110 << 2) | 0;
    var $13 = HEAP32[$arrayidx10 >> 2];
    var $14 = HEAP32[5242908 >> 2];
    var $arrayidx11 = $14 + ($i_011 << 2) | 0;
    var $15 = HEAP32[$arrayidx11 >> 2];
    var $cmp12 = ($13 | 0) > ($15 | 0);
    var $inc = $cmp12 & 1;
    var $storemerge = $inc + $i_011 | 0;
    HEAP32[$arrayidx10 >> 2] = $storemerge;
    var $inc17 = $k_110 + 1 | 0;
    var $16 = HEAP32[5242896 >> 2];
    var $cmp8 = ($inc17 | 0) > ($16 | 0);
    if ($cmp8) {
      label = 11;
      break;
    } else {
      var $k_110 = $inc17;
      var $i_011 = $storemerge;
      label = 10;
      break;
    }
   case 11:
    return;
  }
}
_qh_memsetup["X"] = 1;
function _qh_memsize($size) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242896 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5291176);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5242900 >> 2];
    var $add = $1 + $size | 0;
    var $neg = $1 ^ -1;
    var $and = $add & $neg;
    var $2 = HEAP32[5242888 >> 2];
    var $3 = HEAP32[5242908 >> 2];
    var $k_0 = $2;
    label = 5;
    break;
   case 5:
    var $k_0;
    var $dec = $k_0 - 1 | 0;
    var $tobool1 = ($k_0 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $arrayidx = $3 + ($dec << 2) | 0;
    var $4 = HEAP32[$arrayidx >> 2];
    var $cmp = ($4 | 0) == ($and | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      var $k_0 = $dec;
      label = 5;
      break;
    }
   case 7:
    var $5 = HEAP32[5242892 >> 2];
    var $cmp4 = ($2 | 0) < ($5 | 0);
    if ($cmp4) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $inc = $2 + 1 | 0;
    HEAP32[5242888 >> 2] = $inc;
    var $arrayidx6 = $3 + ($2 << 2) | 0;
    HEAP32[$arrayidx6 >> 2] = $and;
    label = 10;
    break;
   case 9:
    _qh_fprintf(5289932);
    label = 10;
    break;
   case 10:
    return;
  }
}
function _qh_memstatistics() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242888 >> 2];
    var $cmp31 = ($0 | 0) > 0;
    if ($cmp31) {
      label = 3;
      break;
    } else {
      var $totfree_0_lcssa = 0;
      label = 7;
      break;
    }
   case 3:
    var $1 = HEAP32[5242904 >> 2];
    var $2 = HEAP32[5242908 >> 2];
    var $i_032 = 0;
    var $totfree_033 = 0;
    label = 4;
    break;
   case 4:
    var $totfree_033;
    var $i_032;
    var $arrayidx = $1 + ($i_032 << 2) | 0;
    var $object_026 = HEAP32[$arrayidx >> 2];
    var $tobool27 = ($object_026 | 0) == 0;
    if ($tobool27) {
      var $count_0_lcssa = 0;
      label = 6;
      break;
    } else {
      var $count_028 = 0;
      var $object_029 = $object_026;
      label = 5;
      break;
    }
   case 5:
    var $object_029;
    var $count_028;
    var $inc = $count_028 + 1 | 0;
    var $3 = $object_029;
    var $object_0 = HEAP32[$3 >> 2];
    var $tobool = ($object_0 | 0) == 0;
    if ($tobool) {
      var $count_0_lcssa = $inc;
      label = 6;
      break;
    } else {
      var $count_028 = $inc;
      var $object_029 = $object_0;
      label = 5;
      break;
    }
   case 6:
    var $count_0_lcssa;
    var $arrayidx3 = $2 + ($i_032 << 2) | 0;
    var $4 = HEAP32[$arrayidx3 >> 2];
    var $mul = $4 * $count_0_lcssa & -1;
    var $add = $mul + $totfree_033 | 0;
    var $inc5 = $i_032 + 1 | 0;
    var $cmp = ($inc5 | 0) < ($0 | 0);
    if ($cmp) {
      var $i_032 = $inc5;
      var $totfree_033 = $add;
      label = 4;
      break;
    } else {
      var $totfree_0_lcssa = $add;
      label = 7;
      break;
    }
   case 7:
    var $totfree_0_lcssa;
    var $5 = HEAP32[5242968 >> 2];
    var $cmp7 = ($totfree_0_lcssa | 0) == ($5 | 0);
    if ($cmp7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_fprintf(5288120);
    _qh_errexit(5, 0, 0);
    label = 9;
    break;
   case 9:
    _qh_fprintf(5285988);
    var $6 = HEAP32[5242988 >> 2];
    var $tobool9 = ($6 | 0) == 0;
    if ($tobool9) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5284344);
    _qh_fprintf(5282108);
    label = 11;
    break;
   case 11:
    var $7 = HEAP32[5242888 >> 2];
    var $cmp1524 = ($7 | 0) > 0;
    if ($cmp1524) {
      var $i_125 = 0;
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    var $i_125;
    var $8 = HEAP32[5242904 >> 2];
    var $arrayidx18 = $8 + ($i_125 << 2) | 0;
    var $object_120 = HEAP32[$arrayidx18 >> 2];
    var $tobool2021 = ($object_120 | 0) == 0;
    if ($tobool2021) {
      label = 14;
      break;
    } else {
      var $object_123 = $object_120;
      label = 13;
      break;
    }
   case 13:
    var $object_123;
    var $9 = $object_123;
    var $object_1 = HEAP32[$9 >> 2];
    var $tobool20 = ($object_1 | 0) == 0;
    if ($tobool20) {
      label = 14;
      break;
    } else {
      var $object_123 = $object_1;
      label = 13;
      break;
    }
   case 14:
    _qh_fprintf(5280004);
    var $inc27 = $i_125 + 1 | 0;
    var $10 = HEAP32[5242888 >> 2];
    var $cmp15 = ($inc27 | 0) < ($10 | 0);
    if ($cmp15) {
      var $i_125 = $inc27;
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_fprintf(5281244);
    return;
  }
}
_qh_memstatistics["X"] = 1;
function _qh_premerge($maxcentrum, $maxangle) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $othermerge = __stackBase__;
    HEAP32[$othermerge >> 2] = 0;
    var $0 = HEAP32[5248580 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call = _qh_checkzero(0);
    var $tobool1 = ($call | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 19;
      break;
    }
   case 4:
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 1;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    _qh_fprintf(5260700);
    var $_pre = HEAP32[5247036 >> 2];
    var $cmp5 = ($_pre | 0) > 3;
    var $2 = HEAP32[5248992 >> 2];
    var $cmp7 = ($2 | 0) < 50;
    var $or_cond = $cmp5 & $cmp7;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_printlists();
    label = 7;
    break;
   case 7:
    HEAPF64[tempDoublePtr >> 3] = $maxcentrum, HEAP32[5248608 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248612 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $maxangle, HEAP32[5248616 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248620 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $3 = HEAP32[5248936 >> 2];
    var $call10 = _qh_settemp($3);
    HEAP32[5249172 >> 2] = $call10;
    var $4 = HEAP32[5248936 >> 2];
    var $call11 = _qh_settemp($4);
    HEAP32[5249168 >> 2] = $call11;
    var $5 = HEAP32[5247504 >> 2];
    var $cmp12 = ($5 | 0) > 2;
    var $6 = HEAP32[5248952 >> 2];
    if ($cmp12) {
      label = 8;
      break;
    } else {
      label = 14;
      break;
    }
   case 8:
    _qh_mark_dupridges($6);
    var $7 = HEAP32[5248952 >> 2];
    _qh_mergecycle_all($7, $othermerge);
    _qh_forcedmerges($othermerge);
    var $newfacet_09 = HEAP32[5248952 >> 2];
    var $tobool1410 = ($newfacet_09 | 0) == 0;
    if ($tobool1410) {
      label = 12;
      break;
    } else {
      var $newfacet_011 = $newfacet_09;
      label = 9;
      break;
    }
   case 9:
    var $newfacet_011;
    var $next = $newfacet_011 + 44 | 0;
    var $8 = HEAP32[$next >> 2];
    var $tobool15 = ($8 | 0) == 0;
    if ($tobool15) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $9 = $newfacet_011 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $12 = $11 & 4202496;
    var $13 = ($12 | 0) == 0;
    if ($13) {
      label = 11;
      break;
    } else {
      var $newfacet_011 = $8;
      label = 9;
      break;
    }
   case 11:
    _qh_degen_redundant_neighbors($newfacet_011, 0);
    var $newfacet_0_pre = HEAP32[$next >> 2];
    var $tobool14 = ($newfacet_0_pre | 0) == 0;
    if ($tobool14) {
      label = 12;
      break;
    } else {
      var $newfacet_011 = $newfacet_0_pre;
      label = 9;
      break;
    }
   case 12:
    var $call26 = _qh_merge_degenredundant();
    var $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAP32[$othermerge >> 2] = 1;
    label = 15;
    break;
   case 14:
    _qh_mergecycle_all($6, $othermerge);
    label = 15;
    break;
   case 15:
    var $14 = HEAP32[5248952 >> 2];
    _qh_flippedmerges($14, $othermerge);
    var $15 = HEAP32[5247072 >> 2];
    var $tobool31 = ($15 | 0) == 0;
    if ($tobool31) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $16 = HEAP32[5244576 >> 2];
    var $tobool32 = ($16 | 0) == 0;
    if ($tobool32) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $17 = HEAP32[5244368 >> 2];
    var $inc = $17 + 1 | 0;
    HEAP32[5244368 >> 2] = $inc;
    HEAP32[5249120 >> 2] = 0;
    var $18 = HEAP32[5248952 >> 2];
    _qh_getmergeset_initial($18);
    var $19 = HEAP32[$othermerge >> 2];
    _qh_all_merges($19, 0);
    label = 18;
    break;
   case 18:
    _qh_settempfree(5249168);
    _qh_settempfree(5249172);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_premerge["X"] = 1;
function _qh_checkzero($testall) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $tobool = ($testall | 0) != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[5248940 >> 2];
    var $facetlist_0 = $0;
    label = 13;
    break;
   case 4:
    var $1 = HEAP32[5248952 >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 10;
      break;
    } else {
      var $facet_0 = $1;
      label = 5;
      break;
    }
   case 5:
    var $facet_0;
    var $tobool3 = ($facet_0 | 0) == 0;
    if ($tobool3) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $next = $facet_0 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $neighbors = $facet_0 + 56 | 0;
    var $3 = HEAP32[$neighbors >> 2];
    var $p = $3 + 4 | 0;
    var $4 = HEAP32[$p >> 2];
    var $bf_field_offs = $4 + 76 | 0;
    var $5 = $bf_field_offs;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 8192;
    var $tobool5 = ($bf_clear | 0) == 0;
    if ($tobool5) {
      label = 34;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = $facet_0 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $10 = $9 & 2162688;
    var $11 = ($10 | 0) == 0;
    if ($11) {
      label = 9;
      break;
    } else {
      label = 34;
      break;
    }
   case 9:
    var $normal = $facet_0 + 24 | 0;
    var $12 = HEAP32[$normal >> 2];
    var $tobool14 = ($12 | 0) == 0;
    if ($tobool14) {
      label = 34;
      break;
    } else {
      var $facet_0 = $2;
      label = 5;
      break;
    }
   case 10:
    var $13 = HEAP32[5247072 >> 2];
    var $tobool19 = ($13 | 0) != 0;
    var $14 = HEAP32[5249160 >> 2];
    var $tobool20 = ($14 | 0) != 0;
    var $or_cond = $tobool19 & $tobool20;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      var $facetlist_0 = $1;
      label = 13;
      break;
    }
   case 11:
    var $15 = HEAP32[5247036 >> 2];
    var $cmp = ($15 | 0) > 1;
    if ($cmp) {
      label = 12;
      break;
    } else {
      var $retval_0 = 1;
      label = 38;
      break;
    }
   case 12:
    _qh_fprintf(5300660);
    var $retval_0 = 1;
    label = 38;
    break;
   case 13:
    var $facetlist_0;
    var $tobool26 = ($facetlist_0 | 0) == 0;
    if ($tobool26) {
      label = 32;
      break;
    } else {
      var $facet_160 = $facetlist_0;
      label = 14;
      break;
    }
   case 14:
    var $facet_160;
    var $next31 = $facet_160 + 44 | 0;
    var $16 = HEAP32[$next31 >> 2];
    var $tobool32 = ($16 | 0) == 0;
    if ($tobool32) {
      label = 32;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $17 = HEAP32[5249156 >> 2];
    var $inc = $17 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $18 = $17 & -2147483648;
    var $19 = $bf_value | $18;
    HEAP32[5249156 >> 2] = $19;
    var $neighbors36 = $facet_160 + 56 | 0;
    var $20 = HEAP32[$neighbors36 >> 2];
    var $tobool37 = ($20 | 0) == 0;
    if ($tobool37) {
      var $horizon_1 = 0;
      label = 24;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p42 = $20 + 4 | 0;
    var $21 = HEAP32[$p42 >> 2];
    var $tobool444251 = ($21 | 0) == 0;
    if ($tobool444251) {
      var $horizon_1 = 0;
      label = 24;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $22 = $21;
    var $incdec_ptr415062 = $p42 + 4 | 0;
    var $incdec_ptr4150 = $incdec_ptr415062;
    var $vertices = $facet_160 + 48 | 0;
    var $horizon_0_ph52 = 0;
    var $neighbor_i_0_ph53 = 0;
    var $incdec_ptr4154 = $incdec_ptr4150;
    var $24 = $22;
    label = 19;
    break;
   case 18:
    var $incdec_ptr41 = $incdec_ptr44 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr44 >> 2];
    var $tobool4442 = ($23 | 0) == 0;
    if ($tobool4442) {
      var $horizon_1 = $25;
      label = 24;
      break;
    } else {
      var $horizon_0_ph52 = $25;
      var $neighbor_i_0_ph53 = $inc52;
      var $incdec_ptr4154 = $incdec_ptr41;
      var $24 = $23;
      label = 19;
      break;
    }
   case 19:
    var $24;
    var $incdec_ptr4154;
    var $neighbor_i_0_ph53;
    var $horizon_0_ph52;
    var $neighbor_i_043 = $neighbor_i_0_ph53;
    var $incdec_ptr44 = $incdec_ptr4154;
    var $25 = $24;
    label = 20;
    break;
   case 20:
    var $25;
    var $incdec_ptr44;
    var $neighbor_i_043;
    var $26 = $neighbor_i_043 | $testall;
    var $27 = ($26 | 0) == 0;
    var $inc52 = $neighbor_i_043 + 1 | 0;
    if ($27) {
      label = 18;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $28 = HEAP32[$vertices >> 2];
    var $p55 = $28 + 4 + ($neighbor_i_043 << 2) | 0;
    var $29 = HEAP32[$p55 >> 2];
    var $30 = HEAP32[5249156 >> 2];
    var $bf_clear56 = $30 & 2147483647;
    var $bf_field_offs58 = $29 + 16 | 0;
    var $31 = $bf_field_offs58;
    var $32 = HEAP32[$31 >> 2];
    var $33 = $32 & -2147483648;
    var $34 = $33 | $bf_clear56;
    HEAP32[$31 >> 2] = $34;
    var $35 = HEAP32[5243456 >> 2];
    var $inc59 = $35 + 1 | 0;
    HEAP32[5243456 >> 2] = $inc59;
    var $point = $29 + 8 | 0;
    var $36 = $point;
    var $37 = HEAP32[$36 >> 2];
    _qh_distplane($37, $25, $dist);
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$39;
    var $cmp60 = $38 < $sub;
    if ($cmp60) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    HEAP32[5249160 >> 2] = 0;
    var $40 = HEAP32[5247072 >> 2];
    var $tobool62 = ($40 | 0) == 0;
    var $brmerge35 = $tobool62 | $tobool;
    var $cmp66 = $38 > $39;
    var $or_cond3 = $brmerge35 | $cmp66;
    if ($or_cond3) {
      label = 36;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $incdec_ptr = $incdec_ptr44 + 4 | 0;
    var $41 = HEAP32[$incdec_ptr44 >> 2];
    var $tobool44 = ($41 | 0) == 0;
    if ($tobool44) {
      var $horizon_1 = $horizon_0_ph52;
      label = 24;
      break;
    } else {
      var $neighbor_i_043 = $inc52;
      var $incdec_ptr44 = $incdec_ptr;
      var $25 = $41;
      label = 20;
      break;
    }
   case 24:
    var $horizon_1;
    if ($tobool) {
      label = 31;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $vertices74 = $horizon_1 + 48 | 0;
    var $42 = HEAP32[$vertices74 >> 2];
    var $tobool75 = ($42 | 0) == 0;
    if ($tobool75) {
      label = 31;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $p80 = $42 + 4 | 0;
    var $43 = $p80;
    var $vertexp_0 = $43;
    label = 27;
    break;
   case 27:
    var $vertexp_0;
    var $44 = HEAP32[$vertexp_0 >> 2];
    var $tobool83 = ($44 | 0) == 0;
    if ($tobool83) {
      label = 31;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $incdec_ptr82 = $vertexp_0 + 4 | 0;
    var $45 = $44 + 16 | 0;
    var $46 = $45;
    var $47 = HEAP32[$46 >> 2];
    var $48 = HEAP32[5249156 >> 2];
    var $49 = $48 ^ $47;
    var $50 = $49 & 2147483647;
    var $cmp88 = ($50 | 0) == 0;
    if ($cmp88) {
      var $vertexp_0 = $incdec_ptr82;
      label = 27;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $51 = HEAP32[5243456 >> 2];
    var $inc90 = $51 + 1 | 0;
    HEAP32[5243456 >> 2] = $inc90;
    var $point91 = $44 + 8 | 0;
    var $52 = HEAP32[$point91 >> 2];
    _qh_distplane($52, $facet_160, $dist);
    var $53 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub92 = -$54;
    var $cmp93 = $53 < $sub92;
    if ($cmp93) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    HEAP32[5249160 >> 2] = 0;
    var $55 = HEAP32[5247072 >> 2];
    var $tobool95 = ($55 | 0) == 0;
    var $cmp97 = $53 > $54;
    var $or_cond4 = $tobool95 | $cmp97;
    if ($or_cond4) {
      label = 36;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $56 = HEAP32[$next31 >> 2];
    var $tobool29 = ($56 | 0) == 0;
    if ($tobool29) {
      label = 32;
      break;
    } else {
      var $facet_160 = $56;
      label = 14;
      break;
    }
   case 32:
    var $57 = HEAP32[5247036 >> 2];
    var $cmp109 = ($57 | 0) > 1;
    if ($cmp109) {
      label = 33;
      break;
    } else {
      var $retval_0 = 1;
      label = 38;
      break;
    }
   case 33:
    _qh_fprintf(5298304);
    var $retval_0 = 1;
    label = 38;
    break;
   case 34:
    HEAP32[5249160 >> 2] = 0;
    var $58 = HEAP32[5247036 >> 2];
    var $cmp116 = ($58 | 0) > 1;
    if ($cmp116) {
      label = 35;
      break;
    } else {
      var $retval_0 = 0;
      label = 38;
      break;
    }
   case 35:
    _qh_fprintf(5292680);
    var $retval_0 = 0;
    label = 38;
    break;
   case 36:
    var $59 = HEAP32[5247036 >> 2];
    var $cmp119 = ($59 | 0) > 1;
    if ($cmp119) {
      label = 37;
      break;
    } else {
      var $retval_0 = 0;
      label = 38;
      break;
    }
   case 37:
    _qh_fprintf(5291048);
    var $retval_0 = 0;
    label = 38;
    break;
   case 38:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_checkzero["X"] = 1;
function _qh_mark_dupridges($facetlist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5266776);
    label = 4;
    break;
   case 4:
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 29;
      break;
    } else {
      var $facet_037 = $facetlist;
      var $nummerge_038 = 0;
      label = 5;
      break;
    }
   case 5:
    var $nummerge_038;
    var $facet_037;
    var $next = $facet_037 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool3 = ($1 | 0) == 0;
    if ($tobool3) {
      var $nummerge_0_lcssa = $nummerge_038;
      label = 17;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $2 = $facet_037;
    var $3 = $facet_037 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 2097152;
    var $tobool4 = ($bf_clear | 0) == 0;
    if ($tobool4) {
      var $facet_037 = $1;
      var $nummerge_038 = $nummerge_038;
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $neighbors = $facet_037 + 56 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $tobool6 = ($6 | 0) == 0;
    if ($tobool6) {
      var $nummerge_2 = $nummerge_038;
      var $18 = $1;
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p = $6 + 4 | 0;
    var $7 = $p;
    var $nummerge_1_ph = $nummerge_038;
    var $neighborp_0_ph = $7;
    var $8 = $5;
    label = 9;
    break;
   case 9:
    var $8;
    var $neighborp_0_ph;
    var $nummerge_1_ph;
    var $neighborp_0 = $neighborp_0_ph;
    var $9 = $8;
    label = 10;
    break;
   case 10:
    var $9;
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $10 = HEAP32[$neighborp_0 >> 2];
    var $magicptr = $10;
    if (($magicptr | 0) == 2) {
      label = 11;
      break;
    } else if (($magicptr | 0) == 0) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $11 = $9 | 4194304;
    HEAP32[$4 >> 2] = $11;
    var $neighborp_0 = $incdec_ptr;
    var $9 = $11;
    label = 10;
    break;
   case 12:
    var $12 = $10 + 76 | 0;
    var $13 = $12;
    var $14 = HEAP32[$13 >> 2];
    var $bf_clear17 = $14 & 2097152;
    var $tobool18 = ($bf_clear17 | 0) == 0;
    if ($tobool18) {
      var $neighborp_0 = $incdec_ptr;
      var $9 = $9;
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $neighbors19 = $10 + 56 | 0;
    var $15 = HEAP32[$neighbors19 >> 2];
    var $call = _qh_setin($15, $2);
    var $tobool20 = ($call | 0) == 0;
    if ($tobool20) {
      label = 14;
      break;
    } else {
      var $neighborp_0 = $incdec_ptr;
      var $9 = $9;
      label = 10;
      break;
    }
   case 14:
    _qh_appendmergeset($facet_037, $10, 5, 0);
    var $16 = HEAP32[$4 >> 2];
    var $17 = $16 | 12582912;
    HEAP32[$4 >> 2] = $17;
    var $inc = $nummerge_1_ph + 1 | 0;
    var $nummerge_1_ph = $inc;
    var $neighborp_0_ph = $incdec_ptr;
    var $8 = $17;
    label = 9;
    break;
   case 15:
    var $_pre1 = HEAP32[$next >> 2];
    var $nummerge_2 = $nummerge_1_ph;
    var $18 = $_pre1;
    label = 16;
    break;
   case 16:
    var $18;
    var $nummerge_2;
    var $tobool2 = ($18 | 0) == 0;
    if ($tobool2) {
      var $nummerge_0_lcssa = $nummerge_2;
      label = 17;
      break;
    } else {
      var $facet_037 = $18;
      var $nummerge_038 = $nummerge_2;
      label = 5;
      break;
    }
   case 17:
    var $nummerge_0_lcssa;
    var $tobool30 = ($nummerge_0_lcssa | 0) == 0;
    if ($tobool30) {
      label = 29;
      break;
    } else {
      var $facet_133 = $facetlist;
      label = 18;
      break;
    }
   case 18:
    var $facet_133;
    var $next38 = $facet_133 + 44 | 0;
    var $19 = HEAP32[$next38 >> 2];
    var $tobool39 = ($19 | 0) == 0;
    if ($tobool39) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $20 = $facet_133 + 76 | 0;
    var $21 = $20;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22 & 12582912;
    var $24 = ($23 | 0) == 4194304;
    if ($24) {
      label = 20;
      break;
    } else {
      var $facet_133 = $19;
      label = 18;
      break;
    }
   case 20:
    _qh_makeridges($facet_133);
    var $_pre = HEAP32[$next38 >> 2];
    var $tobool36 = ($_pre | 0) == 0;
    if ($tobool36) {
      label = 21;
      break;
    } else {
      var $facet_133 = $_pre;
      label = 18;
      break;
    }
   case 21:
    var $25 = HEAP32[5249168 >> 2];
    var $tobool55 = ($25 | 0) == 0;
    if ($tobool55) {
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $p59 = $25 + 4 | 0;
    var $26 = HEAP32[$p59 >> 2];
    var $tobool6230 = ($26 | 0) == 0;
    if ($tobool6230) {
      label = 27;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $27 = $26;
    var $incdec_ptr612939 = $p59 + 4 | 0;
    var $incdec_ptr6129 = $incdec_ptr612939;
    var $incdec_ptr6131 = $incdec_ptr6129;
    var $28 = $27;
    label = 24;
    break;
   case 24:
    var $28;
    var $incdec_ptr6131;
    var $type = $28 + 16 | 0;
    var $29 = HEAP32[$type >> 2];
    var $cmp64 = ($29 | 0) == 5;
    if ($cmp64) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $facet2 = $28 + 12 | 0;
    var $30 = HEAP32[$facet2 >> 2];
    var $neighbors66 = $30 + 56 | 0;
    var $facet1 = $28 + 8 | 0;
    var $31 = HEAP32[$facet1 >> 2];
    var $32 = $31;
    _qh_setappend($neighbors66, $32);
    var $33 = HEAP32[$facet1 >> 2];
    _qh_makeridges($33);
    label = 26;
    break;
   case 26:
    var $incdec_ptr61 = $incdec_ptr6131 + 4 | 0;
    var $34 = HEAP32[$incdec_ptr6131 >> 2];
    var $tobool62 = ($34 | 0) == 0;
    if ($tobool62) {
      label = 27;
      break;
    } else {
      var $incdec_ptr6131 = $incdec_ptr61;
      var $28 = $34;
      label = 24;
      break;
    }
   case 27:
    var $35 = HEAP32[5247036 >> 2];
    var $cmp71 = ($35 | 0) > 0;
    if ($cmp71) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    _qh_fprintf(5266576);
    label = 29;
    break;
   case 29:
    return;
  }
}
_qh_mark_dupridges["X"] = 1;
function _qh_mergecycle_all($facetlist, $wasmerge) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $facet_0_ph = $facetlist;
      var $cycles_0_ph = 0;
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5259388);
    var $facet_0_ph = $facetlist;
    var $cycles_0_ph = 0;
    label = 4;
    break;
   case 4:
    var $cycles_0_ph;
    var $facet_0_ph;
    var $facet_0 = $facet_0_ph;
    label = 5;
    break;
   case 5:
    var $facet_0;
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 33;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $next = $facet_0 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 33;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $normal = $facet_0 + 24 | 0;
    var $2 = HEAP32[$normal >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 8;
      break;
    } else {
      var $facet_0 = $1;
      label = 5;
      break;
    }
   case 8:
    var $3 = $facet_0 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 33554432;
    var $tobool5 = ($bf_clear | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5259072);
    _qh_errexit(5, $facet_0, 0);
    label = 10;
    break;
   case 10:
    var $neighbors = $facet_0 + 56 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $8 = $7;
    var $f = $facet_0 + 28 | 0;
    var $samecycle8 = $f;
    var $9 = HEAP32[$samecycle8 >> 2];
    var $cmp9 = ($9 | 0) == ($facet_0 | 0);
    if ($cmp9) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $tobool3344 = ($9 | 0) == 0;
    if ($tobool3344) {
      var $facets_0_lcssa = 0;
      label = 24;
      break;
    } else {
      var $prev_045 = $facet_0;
      var $same_046 = $9;
      var $facets_047 = 0;
      label = 18;
      break;
    }
   case 12:
    var $10 = HEAP32[5244264 >> 2];
    var $inc = $10 + 1 | 0;
    HEAP32[5244264 >> 2] = $inc;
    var $vertices = $facet_0 + 48 | 0;
    var $11 = HEAP32[$vertices >> 2];
    var $p13 = $11 + 4 | 0;
    var $12 = HEAP32[$p13 >> 2];
    var $13 = $12;
    var $tobool15 = ($11 | 0) == 0;
    var $tobool2252 = ($12 | 0) == 0;
    var $or_cond = $tobool15 | $tobool2252;
    if ($or_cond) {
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $incdec_ptr5155 = $p13 + 4 | 0;
    var $incdec_ptr51 = $incdec_ptr5155;
    var $incdec_ptr53 = $incdec_ptr51;
    var $14 = $13;
    label = 14;
    break;
   case 14:
    var $14;
    var $incdec_ptr53;
    var $cmp24 = ($14 | 0) == ($13 | 0);
    if ($cmp24) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $15 = $14 + 20 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 | 536870912;
    HEAP32[$16 >> 2] = $18;
    label = 16;
    break;
   case 16:
    var $incdec_ptr = $incdec_ptr53 + 4 | 0;
    var $19 = HEAP32[$incdec_ptr53 >> 2];
    var $tobool22 = ($19 | 0) == 0;
    if ($tobool22) {
      label = 17;
      break;
    } else {
      var $incdec_ptr53 = $incdec_ptr;
      var $14 = $19;
      label = 14;
      break;
    }
   case 17:
    var $f29 = $7 + 28 | 0;
    var $newcycle = $f29;
    HEAP32[$newcycle >> 2] = 0;
    _qh_mergefacet($facet_0, $8, 0, 0, 1);
    var $nextfacet_1 = $1;
    label = 32;
    break;
   case 18:
    var $facets_047;
    var $same_046;
    var $prev_045;
    var $f35 = $same_046 + 28 | 0;
    var $samecycle36 = $f35;
    var $20 = HEAP32[$samecycle36 >> 2];
    var $21 = $same_046 + 76 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 & 67110912;
    var $25 = ($24 | 0) == 0;
    if ($25) {
      var $26 = $23;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _qh_infiniteloop($same_046);
    var $_pre = HEAP32[$22 >> 2];
    var $26 = $_pre;
    label = 20;
    break;
   case 20:
    var $26;
    var $27 = $26 | 67108864;
    HEAP32[$22 >> 2] = $27;
    var $normal46 = $same_046 + 24 | 0;
    var $28 = HEAP32[$normal46 >> 2];
    var $tobool47 = ($28 | 0) == 0;
    if ($tobool47) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $29 = HEAP32[$samecycle36 >> 2];
    var $f51 = $prev_045 + 28 | 0;
    var $samecycle52 = $f51;
    HEAP32[$samecycle52 >> 2] = $29;
    HEAP32[$samecycle36 >> 2] = 0;
    var $facets_1 = $facets_047;
    var $prev_1 = $prev_045;
    label = 23;
    break;
   case 22:
    var $inc56 = $facets_047 + 1 | 0;
    var $facets_1 = $inc56;
    var $prev_1 = $same_046;
    label = 23;
    break;
   case 23:
    var $prev_1;
    var $facets_1;
    var $cmp58 = ($same_046 | 0) == ($facet_0 | 0);
    var $cond = $cmp58 ? 0 : $20;
    var $tobool33 = ($cond | 0) == 0;
    if ($tobool33) {
      var $facets_0_lcssa = $facets_1;
      label = 24;
      break;
    } else {
      var $prev_045 = $prev_1;
      var $same_046 = $cond;
      var $facets_047 = $facets_1;
      label = 18;
      break;
    }
   case 24:
    var $facets_0_lcssa;
    var $nextfacet_049 = $1;
    label = 25;
    break;
   case 25:
    var $nextfacet_049;
    var $30 = $nextfacet_049 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear63 = $32 & 67108864;
    var $tobool64 = ($bf_clear63 | 0) == 0;
    if ($tobool64) {
      var $nextfacet_0_lcssa_ph = $nextfacet_049;
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $next66 = $nextfacet_049 + 44 | 0;
    var $33 = HEAP32[$next66 >> 2];
    var $tobool60 = ($33 | 0) == 0;
    if ($tobool60) {
      var $nextfacet_0_lcssa_ph = 0;
      label = 27;
      break;
    } else {
      var $nextfacet_049 = $33;
      label = 25;
      break;
    }
   case 27:
    var $nextfacet_0_lcssa_ph;
    var $f67 = $7 + 28 | 0;
    var $newcycle68 = $f67;
    HEAP32[$newcycle68 >> 2] = 0;
    _qh_mergecycle($facet_0, $8);
    var $bf_field_offs69 = $7 + 76 | 0;
    var $34 = $bf_field_offs69;
    var $35 = HEAP32[$34 >> 2];
    var $bf_clear70 = $35 & 511;
    var $add = $bf_clear70 + $facets_0_lcssa | 0;
    var $cmp71 = ($add | 0) > 511;
    if ($cmp71) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $36 = $35 | 511;
    var $storemerge = $36;
    label = 30;
    break;
   case 29:
    var $fold = $35 + $facets_0_lcssa | 0;
    var $bf_value = $fold & 511;
    var $37 = $35 & -512;
    var $38 = $bf_value | $37;
    var $storemerge = $38;
    label = 30;
    break;
   case 30:
    var $storemerge;
    HEAP32[$34 >> 2] = $storemerge;
    var $39 = HEAP32[5243312 >> 2];
    var $inc78 = $39 + 1 | 0;
    HEAP32[5243312 >> 2] = $inc78;
    var $40 = HEAP32[5243304 >> 2];
    var $add80 = $40 + $facets_0_lcssa | 0;
    HEAP32[5243304 >> 2] = $add80;
    var $41 = HEAP32[5243296 >> 2];
    var $cmp81 = ($41 | 0) < ($facets_0_lcssa | 0);
    if ($cmp81) {
      label = 31;
      break;
    } else {
      var $nextfacet_1 = $nextfacet_0_lcssa_ph;
      label = 32;
      break;
    }
   case 31:
    HEAP32[5243296 >> 2] = $facets_0_lcssa;
    var $nextfacet_1 = $nextfacet_0_lcssa_ph;
    label = 32;
    break;
   case 32:
    var $nextfacet_1;
    var $inc86 = $cycles_0_ph + 1 | 0;
    var $facet_0_ph = $nextfacet_1;
    var $cycles_0_ph = $inc86;
    label = 4;
    break;
   case 33:
    var $tobool89 = ($cycles_0_ph | 0) == 0;
    if ($tobool89) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    HEAP32[$wasmerge >> 2] = 1;
    label = 35;
    break;
   case 35:
    var $42 = HEAP32[5247036 >> 2];
    var $cmp92 = ($42 | 0) > 0;
    if ($cmp92) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    _qh_fprintf(5258720);
    label = 37;
    break;
   case 37:
    return;
  }
}
_qh_mergecycle_all["X"] = 1;
function _qh_forcedmerges($wasmerge) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mindist1 = __stackBase__;
    var $mindist2 = __stackBase__ + 8;
    var $maxdist1 = __stackBase__ + 16;
    var $maxdist2 = __stackBase__ + 24;
    var $othermerges = __stackBase__ + 32;
    var $0 = HEAP32[5247444 >> 2];
    var $sub = $0 - 1 | 0;
    var $1 = HEAP32[5244576 >> 2];
    var $cmp = ($sub | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[5247036 >> 2];
    var $3 = $_pre;
    label = 5;
    break;
   case 4:
    var $2 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $2;
    HEAP32[5242936 >> 2] = $2;
    var $3 = $2;
    label = 5;
    break;
   case 5:
    var $3;
    var $cmp1 = ($3 | 0) > 3;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_fprintf(5270512);
    label = 7;
    break;
   case 7:
    var $call = _qh_settemppop();
    HEAP32[$othermerges >> 2] = $call;
    var $4 = HEAP32[5248936 >> 2];
    var $call4 = _qh_settemp($4);
    HEAP32[5249168 >> 2] = $call4;
    _qh_settemppush($call);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_settempfree($othermerges);
    label = 44;
    break;
   case 9:
    var $p = $call + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool65966 = ($5 | 0) == 0;
    if ($tobool65966) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_settempfree($othermerges);
    label = 44;
    break;
   case 11:
    var $6 = $5;
    var $incdec_ptr586572 = $p + 4 | 0;
    var $incdec_ptr5865 = $incdec_ptr586572;
    var $nummerge_0_ph67 = 0;
    var $numflip_0_ph68 = 0;
    var $incdec_ptr5869 = $incdec_ptr5865;
    var $7 = $6;
    label = 12;
    break;
   case 12:
    var $7;
    var $incdec_ptr5869;
    var $numflip_0_ph68;
    var $nummerge_0_ph67;
    var $incdec_ptr60 = $incdec_ptr5869;
    var $8 = $7;
    label = 13;
    break;
   case 13:
    var $8;
    var $incdec_ptr60;
    var $type = $8 + 16 | 0;
    var $9 = HEAP32[$type >> 2];
    var $cmp7 = ($9 | 0) == 5;
    if ($cmp7) {
      label = 14;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $facet110 = $8 + 8 | 0;
    var $facet211 = $8 + 12 | 0;
    var $10 = HEAP32[$facet211 >> 2];
    var $facet1_048 = HEAP32[$facet110 >> 2];
    var $11 = $facet1_048 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear49 = $13 & 2048;
    var $tobool1250 = ($bf_clear49 | 0) == 0;
    if ($tobool1250) {
      var $_lcssa_in = $facet1_048;
      label = 16;
      break;
    } else {
      var $facet1_051 = $facet1_048;
      label = 15;
      break;
    }
   case 15:
    var $facet1_051;
    var $f = $facet1_051 + 28 | 0;
    var $replace = $f;
    var $facet1_0 = HEAP32[$replace >> 2];
    var $14 = $facet1_0 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear = $16 & 2048;
    var $tobool12 = ($bf_clear | 0) == 0;
    if ($tobool12) {
      var $_lcssa_in = $facet1_0;
      label = 16;
      break;
    } else {
      var $facet1_051 = $facet1_0;
      label = 15;
      break;
    }
   case 16:
    var $_lcssa_in;
    var $17 = $10 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $bf_clear1553 = $19 & 2048;
    var $tobool1654 = ($bf_clear1553 | 0) == 0;
    if ($tobool1654) {
      var $facet2_0_lcssa = $10;
      label = 18;
      break;
    } else {
      var $facet2_055 = $10;
      label = 17;
      break;
    }
   case 17:
    var $facet2_055;
    var $f18 = $facet2_055 + 28 | 0;
    var $replace19 = $f18;
    var $20 = HEAP32[$replace19 >> 2];
    var $21 = $20 + 76 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $bf_clear15 = $23 & 2048;
    var $tobool16 = ($bf_clear15 | 0) == 0;
    if ($tobool16) {
      var $facet2_0_lcssa = $20;
      label = 18;
      break;
    } else {
      var $facet2_055 = $20;
      label = 17;
      break;
    }
   case 18:
    var $facet2_0_lcssa;
    var $cmp21 = ($_lcssa_in | 0) == ($facet2_0_lcssa | 0);
    if ($cmp21) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $incdec_ptr = $incdec_ptr60 + 4 | 0;
    var $24 = HEAP32[$incdec_ptr60 >> 2];
    var $tobool6 = ($24 | 0) == 0;
    if ($tobool6) {
      var $nummerge_0_ph62_ph = $nummerge_0_ph67;
      label = 36;
      break;
    } else {
      var $incdec_ptr60 = $incdec_ptr;
      var $8 = $24;
      label = 13;
      break;
    }
   case 20:
    var $_lcssa = $_lcssa_in;
    var $neighbors = $facet2_0_lcssa + 56 | 0;
    var $25 = HEAP32[$neighbors >> 2];
    var $call24 = _qh_setin($25, $_lcssa);
    var $tobool25 = ($call24 | 0) == 0;
    if ($tobool25) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_fprintf(5269860);
    _qh_errexit2(5, $_lcssa_in, $facet2_0_lcssa);
    label = 22;
    break;
   case 22:
    var $26 = HEAP32[5247444 >> 2];
    var $sub33 = $26 - 1 | 0;
    var $27 = HEAP32[5244576 >> 2];
    var $cmp34 = ($sub33 | 0) == ($27 | 0);
    if ($cmp34) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $28 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $28;
    HEAP32[5242936 >> 2] = $28;
    label = 24;
    break;
   case 24:
    var $call37 = _qh_getdistance($_lcssa_in, $facet2_0_lcssa, $mindist1, $maxdist1);
    var $call38 = _qh_getdistance($facet2_0_lcssa, $_lcssa_in, $mindist2, $maxdist2);
    var $29 = HEAP32[5247036 >> 2];
    var $tobool39 = ($29 | 0) == 0;
    if ($tobool39) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_fprintf(5269428);
    label = 26;
    break;
   case 26:
    var $cmp44 = $call37 < $call38;
    if ($cmp44) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    _qh_mergefacet($_lcssa_in, $facet2_0_lcssa, $mindist1, $maxdist1, 0);
    var $facet1_1 = $_lcssa_in;
    var $dist1_0 = $call37;
    label = 29;
    break;
   case 28:
    _qh_mergefacet($facet2_0_lcssa, $_lcssa_in, $mindist2, $maxdist2, 0);
    var $facet1_1 = $facet2_0_lcssa;
    var $dist1_0 = $call38;
    label = 29;
    break;
   case 29:
    var $dist1_0;
    var $facet1_1;
    var $30 = $facet1_1 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear48 = $32 & 65536;
    var $tobool49 = ($bf_clear48 | 0) == 0;
    if ($tobool49) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $33 = HEAP32[5243952 >> 2];
    var $inc = $33 + 1 | 0;
    HEAP32[5243952 >> 2] = $inc;
    var $inc51 = $numflip_0_ph68 + 1 | 0;
    var $numflip_1 = $inc51;
    var $nummerge_1 = $nummerge_0_ph67;
    label = 32;
    break;
   case 31:
    var $inc53 = $nummerge_0_ph67 + 1 | 0;
    var $numflip_1 = $numflip_0_ph68;
    var $nummerge_1 = $inc53;
    label = 32;
    break;
   case 32:
    var $nummerge_1;
    var $numflip_1;
    var $34 = HEAP32[5247312 >> 2];
    var $tobool55 = ($34 | 0) == 0;
    if ($tobool55) {
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $35 = HEAP32[5243584 >> 2];
    var $inc57 = $35 + 1 | 0;
    HEAP32[5243584 >> 2] = $inc57;
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243600 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243604 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $dist1_0 + $36;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5243600 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243604 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243592 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243596 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp58 = $37 < $dist1_0;
    if ($cmp58) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    HEAPF64[tempDoublePtr >> 3] = $dist1_0, HEAP32[5243592 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243596 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 35;
    break;
   case 35:
    var $incdec_ptr58 = $incdec_ptr60 + 4 | 0;
    var $38 = HEAP32[$incdec_ptr60 >> 2];
    var $tobool659 = ($38 | 0) == 0;
    if ($tobool659) {
      var $nummerge_0_ph62_ph = $nummerge_1;
      label = 36;
      break;
    } else {
      var $nummerge_0_ph67 = $nummerge_1;
      var $numflip_0_ph68 = $numflip_1;
      var $incdec_ptr5869 = $incdec_ptr58;
      var $7 = $38;
      label = 12;
      break;
    }
   case 36:
    var $nummerge_0_ph62_ph;
    var $_pr = HEAP32[$p >> 2];
    var $tobool7046 = ($_pr | 0) == 0;
    if ($tobool7046) {
      var $nummerge_0_ph623 = $nummerge_0_ph62_ph;
      label = 42;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $39 = $_pr;
    var $incdec_ptr694573 = $p + 4 | 0;
    var $incdec_ptr6945 = $incdec_ptr694573;
    var $incdec_ptr6947 = $incdec_ptr6945;
    var $40 = $39;
    label = 38;
    break;
   case 38:
    var $40;
    var $incdec_ptr6947;
    var $type72 = $40 + 16 | 0;
    var $41 = HEAP32[$type72 >> 2];
    var $cmp73 = ($41 | 0) == 5;
    var $42 = $40;
    if ($cmp73) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _qh_memfree($42, 20);
    label = 41;
    break;
   case 40:
    _qh_setappend(5249168, $42);
    label = 41;
    break;
   case 41:
    var $incdec_ptr69 = $incdec_ptr6947 + 4 | 0;
    var $43 = HEAP32[$incdec_ptr6947 >> 2];
    var $tobool70 = ($43 | 0) == 0;
    if ($tobool70) {
      var $nummerge_0_ph623 = $nummerge_0_ph62_ph;
      label = 42;
      break;
    } else {
      var $incdec_ptr6947 = $incdec_ptr69;
      var $40 = $43;
      label = 38;
      break;
    }
   case 42:
    var $nummerge_0_ph623;
    _qh_settempfree($othermerges);
    var $tobool79 = ($nummerge_0_ph623 | 0) == 0;
    if ($tobool79) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    HEAP32[$wasmerge >> 2] = 1;
    label = 44;
    break;
   case 44:
    var $44 = HEAP32[5247036 >> 2];
    var $cmp82 = ($44 | 0) > 0;
    if ($cmp82) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _qh_fprintf(5268560);
    label = 46;
    break;
   case 46:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_forcedmerges["X"] = 1;
function _qh_degen_redundant_neighbors($facet, $delfacet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5281864);
    label = 4;
    break;
   case 4:
    var $neighbors = $facet + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $call = _qh_setsize($1);
    var $2 = HEAP32[5247504 >> 2];
    var $cmp2 = ($call | 0) < ($2 | 0);
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    _qh_appendmergeset($facet, $facet, 6, 0);
    var $3 = HEAP32[5247036 >> 2];
    var $cmp4 = ($3 | 0) > 1;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_fprintf(5279848);
    label = 7;
    break;
   case 7:
    var $tobool9 = ($delfacet | 0) == 0;
    var $facet_delfacet = $tobool9 ? $facet : $delfacet;
    var $4 = HEAP32[5249156 >> 2];
    var $inc = $4 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $5 = $4 & -2147483648;
    var $6 = $bf_value | $5;
    HEAP32[5249156 >> 2] = $6;
    var $vertices = $facet + 48 | 0;
    var $7 = HEAP32[$vertices >> 2];
    var $tobool12 = ($7 | 0) == 0;
    if ($tobool12) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p = $7 + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool1543 = ($8 | 0) == 0;
    if ($tobool1543) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $9 = $8;
    var $10 = $p;
    var $vertexp_044 = $10;
    var $12 = $9;
    var $11 = $6;
    label = 10;
    break;
   case 10:
    var $11;
    var $12;
    var $vertexp_044;
    var $incdec_ptr = $vertexp_044 + 4 | 0;
    var $bf_clear16 = $11 & 2147483647;
    var $13 = $12 + 16 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & -2147483648;
    var $17 = $16 | $bf_clear16;
    HEAP32[$14 >> 2] = $17;
    var $18 = HEAP32[$incdec_ptr >> 2];
    var $tobool15 = ($18 | 0) == 0;
    if ($tobool15) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_pre = HEAP32[5249156 >> 2];
    var $vertexp_044 = $incdec_ptr;
    var $12 = $18;
    var $11 = $_pre;
    label = 10;
    break;
   case 12:
    var $neighbors19 = $facet_delfacet + 56 | 0;
    var $19 = HEAP32[$neighbors19 >> 2];
    var $tobool20 = ($19 | 0) == 0;
    if ($tobool20) {
      label = 31;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $p25 = $19 + 4 | 0;
    var $20 = HEAP32[$p25 >> 2];
    var $tobool2841 = ($20 | 0) == 0;
    if ($tobool2841) {
      var $_pr3 = $19;
      label = 24;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $21 = $20;
    var $incdec_ptr274045 = $p25 + 4 | 0;
    var $incdec_ptr2740 = $incdec_ptr274045;
    var $incdec_ptr2742 = $incdec_ptr2740;
    var $22 = $21;
    label = 15;
    break;
   case 15:
    var $22;
    var $incdec_ptr2742;
    var $cmp30 = ($22 | 0) == ($facet | 0);
    if ($cmp30) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $incdec_ptr27 = $incdec_ptr2742 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr2742 >> 2];
    var $tobool28 = ($23 | 0) == 0;
    if ($tobool28) {
      label = 23;
      break;
    } else {
      var $incdec_ptr2742 = $incdec_ptr27;
      var $22 = $23;
      label = 15;
      break;
    }
   case 17:
    var $vertices33 = $22 + 48 | 0;
    var $24 = HEAP32[$vertices33 >> 2];
    var $tobool34 = ($24 | 0) == 0;
    if ($tobool34) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $p39 = $24 + 4 | 0;
    var $25 = $p39;
    var $vertexp_1 = $25;
    label = 19;
    break;
   case 19:
    var $vertexp_1;
    var $26 = HEAP32[$vertexp_1 >> 2];
    var $tobool42 = ($26 | 0) == 0;
    if ($tobool42) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $incdec_ptr41 = $vertexp_1 + 4 | 0;
    var $27 = $26 + 16 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $30 = HEAP32[5249156 >> 2];
    var $31 = $30 ^ $29;
    var $32 = $31 & 2147483647;
    var $cmp47 = ($32 | 0) == 0;
    if ($cmp47) {
      var $vertexp_1 = $incdec_ptr41;
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 21:
    _qh_appendmergeset($22, $facet, 7, 0);
    var $33 = HEAP32[5247036 >> 2];
    var $cmp54 = ($33 | 0) > 1;
    if ($cmp54) {
      label = 22;
      break;
    } else {
      label = 16;
      break;
    }
   case 22:
    _qh_fprintf(5279108);
    label = 16;
    break;
   case 23:
    var $_pr_pre = HEAP32[$neighbors19 >> 2];
    var $tobool63 = ($_pr_pre | 0) == 0;
    if ($tobool63) {
      label = 31;
      break;
    } else {
      var $_pr3 = $_pr_pre;
      label = 24;
      break;
    }
   case 24:
    var $_pr3;
    var $p68 = $_pr3 + 4 | 0;
    var $34 = HEAP32[$p68 >> 2];
    var $tobool7138 = ($34 | 0) == 0;
    if ($tobool7138) {
      label = 31;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $35 = $34;
    var $incdec_ptr703746 = $p68 + 4 | 0;
    var $incdec_ptr7037 = $incdec_ptr703746;
    var $incdec_ptr7039 = $incdec_ptr7037;
    var $36 = $35;
    label = 26;
    break;
   case 26:
    var $36;
    var $incdec_ptr7039;
    var $cmp73 = ($36 | 0) == ($facet | 0);
    if ($cmp73) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $incdec_ptr70 = $incdec_ptr7039 + 4 | 0;
    var $37 = HEAP32[$incdec_ptr7039 >> 2];
    var $tobool71 = ($37 | 0) == 0;
    if ($tobool71) {
      label = 31;
      break;
    } else {
      var $incdec_ptr7039 = $incdec_ptr70;
      var $36 = $37;
      label = 26;
      break;
    }
   case 28:
    var $neighbors76 = $36 + 56 | 0;
    var $38 = HEAP32[$neighbors76 >> 2];
    var $call77 = _qh_setsize($38);
    var $39 = HEAP32[5247504 >> 2];
    var $cmp78 = ($call77 | 0) < ($39 | 0);
    if ($cmp78) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 29:
    _qh_appendmergeset($36, $36, 6, 0);
    var $40 = HEAP32[5247036 >> 2];
    var $cmp80 = ($40 | 0) > 1;
    if ($cmp80) {
      label = 30;
      break;
    } else {
      label = 27;
      break;
    }
   case 30:
    _qh_fprintf(5278472);
    label = 27;
    break;
   case 31:
    return;
  }
}
_qh_degen_redundant_neighbors["X"] = 1;
function _qh_merge_degenredundant() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $mindist = __stackBase__ + 8;
    var $maxdist = __stackBase__ + 16;
    var $0 = HEAP32[5249172 >> 2];
    var $call44 = _qh_setdellast($0);
    var $tobool45 = ($call44 | 0) == 0;
    if ($tobool45) {
      var $nummerges_0_lcssa = 0;
      label = 35;
      break;
    } else {
      var $nummerges_046 = 0;
      var $call47 = $call44;
      label = 3;
      break;
    }
   case 3:
    var $call47;
    var $nummerges_046;
    var $facet11 = $call47 + 8 | 0;
    var $1 = $facet11;
    var $2 = HEAP32[$1 >> 2];
    var $facet22 = $call47 + 12 | 0;
    var $3 = $facet22;
    var $4 = HEAP32[$3 >> 2];
    var $type = $call47 + 16 | 0;
    var $5 = $type;
    var $6 = HEAP32[$5 >> 2];
    _qh_memfree($call47, 20);
    var $7 = $2;
    var $8 = $2 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear = $10 & 2048;
    var $tobool3 = ($bf_clear | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      var $nummerges_0_be = $nummerges_046;
      label = 13;
      break;
    }
   case 4:
    var $11 = $10 & 1073741823;
    HEAP32[$9 >> 2] = $11;
    var $12 = HEAP32[5247444 >> 2];
    var $sub = $12 - 1 | 0;
    var $13 = HEAP32[5244576 >> 2];
    var $cmp = ($sub | 0) == ($13 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $14 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $14;
    HEAP32[5242936 >> 2] = $14;
    label = 6;
    break;
   case 6:
    var $cmp8 = ($6 | 0) == 7;
    if ($cmp8) {
      label = 7;
      break;
    } else {
      label = 17;
      break;
    }
   case 7:
    var $15 = HEAP32[5244088 >> 2];
    var $inc = $15 + 1 | 0;
    HEAP32[5244088 >> 2] = $inc;
    var $16 = $4 + 76 | 0;
    var $17 = $16;
    var $18 = HEAP32[$17 >> 2];
    var $bf_clear1241 = $18 & 2048;
    var $tobool1342 = ($bf_clear1241 | 0) == 0;
    if ($tobool1342) {
      var $facet2_0_lcssa = $4;
      label = 11;
      break;
    } else {
      var $facet2_043 = $4;
      label = 8;
      break;
    }
   case 8:
    var $facet2_043;
    var $f = $facet2_043 + 28 | 0;
    var $replace = $f;
    var $19 = HEAP32[$replace >> 2];
    var $tobool15 = ($19 | 0) == 0;
    if ($tobool15) {
      label = 9;
      break;
    } else {
      var $20 = $19;
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5265048);
    _qh_errexit2(5, $2, $facet2_043);
    var $_pre = HEAP32[$replace >> 2];
    var $20 = $_pre;
    label = 10;
    break;
   case 10:
    var $20;
    var $21 = $20 + 76 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $bf_clear12 = $23 & 2048;
    var $tobool13 = ($bf_clear12 | 0) == 0;
    if ($tobool13) {
      var $facet2_0_lcssa = $20;
      label = 11;
      break;
    } else {
      var $facet2_043 = $20;
      label = 8;
      break;
    }
   case 11:
    var $facet2_0_lcssa;
    var $cmp21 = ($2 | 0) == ($facet2_0_lcssa | 0);
    if ($cmp21) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    _qh_degen_redundant_facet($2);
    var $nummerges_0_be = $nummerges_046;
    label = 13;
    break;
   case 13:
    var $nummerges_0_be;
    var $24 = HEAP32[5249172 >> 2];
    var $call = _qh_setdellast($24);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      var $nummerges_0_lcssa = $nummerges_0_be;
      label = 35;
      break;
    } else {
      var $nummerges_046 = $nummerges_0_be;
      var $call47 = $call;
      label = 3;
      break;
    }
   case 14:
    var $25 = HEAP32[5247036 >> 2];
    var $cmp24 = ($25 | 0) > 1;
    if ($cmp24) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5264664);
    label = 16;
    break;
   case 16:
    _qh_mergefacet($2, $facet2_0_lcssa, 0, 0, 0);
    var $inc29 = $nummerges_046 + 1 | 0;
    var $nummerges_0_be = $inc29;
    label = 13;
    break;
   case 17:
    var $neighbors = $2 + 56 | 0;
    var $26 = HEAP32[$neighbors >> 2];
    var $call30 = _qh_setsize($26);
    var $tobool31 = ($call30 | 0) == 0;
    if ($tobool31) {
      label = 18;
      break;
    } else {
      label = 29;
      break;
    }
   case 18:
    var $27 = HEAP32[5243360 >> 2];
    var $inc33 = $27 + 1 | 0;
    HEAP32[5243360 >> 2] = $inc33;
    var $28 = HEAP32[5247036 >> 2];
    var $cmp34 = ($28 | 0) > 1;
    if ($cmp34) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5264272);
    label = 20;
    break;
   case 20:
    _qh_willdelete($2, 0);
    var $vertices = $2 + 48 | 0;
    var $29 = HEAP32[$vertices >> 2];
    var $tobool38 = ($29 | 0) == 0;
    if ($tobool38) {
      label = 28;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $p = $29 + 4 | 0;
    var $30 = HEAP32[$p >> 2];
    var $tobool4139 = ($30 | 0) == 0;
    if ($tobool4139) {
      label = 28;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $31 = $30;
    var $incdec_ptr3849 = $p + 4 | 0;
    var $incdec_ptr38 = $incdec_ptr3849;
    var $incdec_ptr40 = $incdec_ptr38;
    var $32 = $31;
    label = 23;
    break;
   case 23:
    var $32;
    var $incdec_ptr40;
    var $neighbors42 = $32 + 12 | 0;
    var $33 = HEAP32[$neighbors42 >> 2];
    var $call43 = _qh_setdel($33, $7);
    var $34 = HEAP32[$neighbors42 >> 2];
    var $p47 = $34 + 4 | 0;
    var $35 = HEAP32[$p47 >> 2];
    var $tobool48 = ($35 | 0) == 0;
    if ($tobool48) {
      label = 24;
      break;
    } else {
      label = 27;
      break;
    }
   case 24:
    var $36 = HEAP32[5243352 >> 2];
    var $inc50 = $36 + 1 | 0;
    HEAP32[5243352 >> 2] = $inc50;
    var $37 = HEAP32[5247036 >> 2];
    var $cmp51 = ($37 | 0) > 1;
    if ($cmp51) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _qh_fprintf(5263820);
    label = 26;
    break;
   case 26:
    var $38 = $32;
    var $39 = $32 + 20 | 0;
    var $40 = $39;
    var $41 = HEAP32[$40 >> 2];
    var $42 = $41 | 1073741824;
    HEAP32[$40 >> 2] = $42;
    _qh_setappend(5249184, $38);
    label = 27;
    break;
   case 27:
    var $incdec_ptr = $incdec_ptr40 + 4 | 0;
    var $43 = HEAP32[$incdec_ptr40 >> 2];
    var $tobool41 = ($43 | 0) == 0;
    if ($tobool41) {
      label = 28;
      break;
    } else {
      var $incdec_ptr40 = $incdec_ptr;
      var $32 = $43;
      label = 23;
      break;
    }
   case 28:
    var $inc60 = $nummerges_046 + 1 | 0;
    var $nummerges_0_be = $inc60;
    label = 13;
    break;
   case 29:
    var $44 = HEAP32[5247504 >> 2];
    var $cmp62 = ($call30 | 0) < ($44 | 0);
    if ($cmp62) {
      label = 30;
      break;
    } else {
      var $nummerges_0_be = $nummerges_046;
      label = 13;
      break;
    }
   case 30:
    var $call64 = _qh_findbestneighbor($2, $dist, $mindist, $maxdist);
    var $45 = HEAP32[5247036 >> 2];
    var $cmp65 = ($45 | 0) > 1;
    if ($cmp65) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5263424);
    label = 32;
    break;
   case 32:
    _qh_mergefacet($2, $call64, $mindist, $maxdist, 0);
    var $inc70 = $nummerges_046 + 1 | 0;
    var $46 = HEAP32[5247312 >> 2];
    var $tobool71 = ($46 | 0) == 0;
    if ($tobool71) {
      var $nummerges_0_be = $inc70;
      label = 13;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $47 = HEAP32[5243328 >> 2];
    var $inc73 = $47 + 1 | 0;
    HEAP32[5243328 >> 2] = $inc73;
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243344 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243348 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $48 + $49;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5243344 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243348 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $50 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243336 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243340 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp74 = $50 < $48;
    if ($cmp74) {
      label = 34;
      break;
    } else {
      var $nummerges_0_be = $inc70;
      label = 13;
      break;
    }
   case 34:
    HEAPF64[tempDoublePtr >> 3] = $48, HEAP32[5243336 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243340 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $nummerges_0_be = $inc70;
    label = 13;
    break;
   case 35:
    var $nummerges_0_lcssa;
    STACKTOP = __stackBase__;
    return $nummerges_0_lcssa;
  }
}
_qh_merge_degenredundant["X"] = 1;
function _qh_flippedmerges($facetlist, $wasmerge) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $mindist = __stackBase__ + 8;
    var $maxdist = __stackBase__ + 16;
    var $othermerges = __stackBase__ + 24;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5272372);
    label = 4;
    break;
   case 4:
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      var $facet_032 = $facetlist;
      label = 5;
      break;
    }
   case 5:
    var $facet_032;
    var $next = $facet_032 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool3 = ($1 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $2 = $facet_032 + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $5 = $4 & 67584;
    var $6 = ($5 | 0) == 65536;
    if ($6) {
      label = 7;
      break;
    } else {
      var $facet_032 = $1;
      label = 5;
      break;
    }
   case 7:
    _qh_appendmergeset($facet_032, $facet_032, 4, 0);
    var $_pre = HEAP32[$next >> 2];
    var $tobool2 = ($_pre | 0) == 0;
    if ($tobool2) {
      label = 8;
      break;
    } else {
      var $facet_032 = $_pre;
      label = 5;
      break;
    }
   case 8:
    var $call = _qh_settemppop();
    HEAP32[$othermerges >> 2] = $call;
    var $7 = HEAP32[5248936 >> 2];
    var $call12 = _qh_settemp($7);
    HEAP32[5249168 >> 2] = $call12;
    _qh_settemppush($call);
    var $tobool13 = ($call | 0) == 0;
    if ($tobool13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_settempfree($othermerges);
    label = 34;
    break;
   case 10:
    var $p = $call + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool162936 = ($8 | 0) == 0;
    if ($tobool162936) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _qh_settempfree($othermerges);
    label = 34;
    break;
   case 12:
    var $9 = $8;
    var $incdec_ptr283539 = $p + 4 | 0;
    var $incdec_ptr2835 = $incdec_ptr283539;
    var $nummerge_0_ph37 = 0;
    var $incdec_ptr2838 = $incdec_ptr2835;
    var $10 = $9;
    label = 13;
    break;
   case 13:
    var $10;
    var $incdec_ptr2838;
    var $nummerge_0_ph37;
    var $incdec_ptr30 = $incdec_ptr2838;
    var $11 = $10;
    label = 14;
    break;
   case 14:
    var $11;
    var $incdec_ptr30;
    var $facet118 = $11 + 8 | 0;
    var $12 = HEAP32[$facet118 >> 2];
    var $type = $11 + 16 | 0;
    var $13 = HEAP32[$type >> 2];
    var $cmp19 = ($13 | 0) == 4;
    if ($cmp19) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $incdec_ptr = $incdec_ptr30 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr30 >> 2];
    var $tobool16 = ($14 | 0) == 0;
    if ($tobool16) {
      var $nummerge_0_ph34_ph = $nummerge_0_ph37;
      label = 25;
      break;
    } else {
      var $incdec_ptr30 = $incdec_ptr;
      var $11 = $14;
      label = 14;
      break;
    }
   case 16:
    var $15 = $12 + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $bf_clear21 = $17 & 2048;
    var $tobool22 = ($bf_clear21 | 0) == 0;
    if ($tobool22) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 17:
    var $18 = HEAP32[5247444 >> 2];
    var $sub = $18 - 1 | 0;
    var $19 = HEAP32[5244576 >> 2];
    var $cmp25 = ($sub | 0) == ($19 | 0);
    if ($cmp25) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $20 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $20;
    HEAP32[5242936 >> 2] = $20;
    label = 19;
    break;
   case 19:
    var $call28 = _qh_findbestneighbor($12, $dist, $mindist, $maxdist);
    var $21 = HEAP32[5247036 >> 2];
    var $tobool29 = ($21 | 0) == 0;
    if ($tobool29) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5271772);
    label = 21;
    break;
   case 21:
    _qh_mergefacet($12, $call28, $mindist, $maxdist, 0);
    var $inc = $nummerge_0_ph37 + 1 | 0;
    var $22 = HEAP32[5247312 >> 2];
    var $tobool33 = ($22 | 0) == 0;
    if ($tobool33) {
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $23 = HEAP32[5243624 >> 2];
    var $inc35 = $23 + 1 | 0;
    HEAP32[5243624 >> 2] = $inc35;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243640 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243644 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $24 + $25;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[5243640 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243644 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp36 = $26 < $24;
    if ($cmp36) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    HEAPF64[tempDoublePtr >> 3] = $24, HEAP32[5243632 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243636 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 24;
    break;
   case 24:
    var $call40 = _qh_merge_degenredundant();
    var $incdec_ptr28 = $incdec_ptr30 + 4 | 0;
    var $27 = HEAP32[$incdec_ptr30 >> 2];
    var $tobool1629 = ($27 | 0) == 0;
    if ($tobool1629) {
      var $nummerge_0_ph34_ph = $inc;
      label = 25;
      break;
    } else {
      var $nummerge_0_ph37 = $inc;
      var $incdec_ptr2838 = $incdec_ptr28;
      var $10 = $27;
      label = 13;
      break;
    }
   case 25:
    var $nummerge_0_ph34_ph;
    var $_pr = HEAP32[$p >> 2];
    var $tobool5025 = ($_pr | 0) == 0;
    if ($tobool5025) {
      var $nummerge_0_ph345 = $nummerge_0_ph34_ph;
      label = 32;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $28 = $_pr;
    var $incdec_ptr492440 = $p + 4 | 0;
    var $incdec_ptr4924 = $incdec_ptr492440;
    var $incdec_ptr4926 = $incdec_ptr4924;
    var $29 = $28;
    label = 27;
    break;
   case 27:
    var $29;
    var $incdec_ptr4926;
    var $facet152 = $29 + 8 | 0;
    var $30 = HEAP32[$facet152 >> 2];
    var $31 = $30 + 76 | 0;
    var $32 = $31;
    var $33 = HEAP32[$32 >> 2];
    var $bf_clear54 = $33 & 2048;
    var $tobool55 = ($bf_clear54 | 0) == 0;
    if ($tobool55) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $facet2 = $29 + 12 | 0;
    var $34 = HEAP32[$facet2 >> 2];
    var $35 = $34 + 76 | 0;
    var $36 = $35;
    var $37 = HEAP32[$36 >> 2];
    var $bf_clear58 = $37 & 2048;
    var $tobool59 = ($bf_clear58 | 0) == 0;
    if ($tobool59) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $38 = $29;
    _qh_memfree($38, 20);
    label = 31;
    break;
   case 30:
    var $39 = $29;
    _qh_setappend(5249168, $39);
    label = 31;
    break;
   case 31:
    var $incdec_ptr49 = $incdec_ptr4926 + 4 | 0;
    var $40 = HEAP32[$incdec_ptr4926 >> 2];
    var $tobool50 = ($40 | 0) == 0;
    if ($tobool50) {
      var $nummerge_0_ph345 = $nummerge_0_ph34_ph;
      label = 32;
      break;
    } else {
      var $incdec_ptr4926 = $incdec_ptr49;
      var $29 = $40;
      label = 27;
      break;
    }
   case 32:
    var $nummerge_0_ph345;
    _qh_settempfree($othermerges);
    var $tobool64 = ($nummerge_0_ph345 | 0) == 0;
    if ($tobool64) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[$wasmerge >> 2] = 1;
    label = 34;
    break;
   case 34:
    var $41 = HEAP32[5247036 >> 2];
    var $cmp67 = ($41 | 0) > 0;
    if ($cmp67) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    _qh_fprintf(5271156);
    label = 36;
    break;
   case 36:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_flippedmerges["X"] = 1;
function _qh_getmergeset_initial($facetlist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249152 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 23;
      break;
    } else {
      var $facet_031 = $facetlist;
      label = 3;
      break;
    }
   case 3:
    var $facet_031;
    var $next = $facet_031 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool2 = ($1 | 0) == 0;
    if ($tobool2) {
      label = 23;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = HEAP32[5249152 >> 2];
    var $visitid = $facet_031 + 68 | 0;
    HEAP32[$visitid >> 2] = $2;
    var $3 = $facet_031 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $5 | 134217728;
    HEAP32[$4 >> 2] = $6;
    var $neighbors = $facet_031 + 56 | 0;
    var $7 = HEAP32[$neighbors >> 2];
    var $tobool3 = ($7 | 0) == 0;
    if ($tobool3) {
      label = 18;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $7 + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool726 = ($8 | 0) == 0;
    if ($tobool726) {
      label = 18;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $9 = $8;
    var $incdec_ptr2532 = $p + 4 | 0;
    var $incdec_ptr25 = $incdec_ptr2532;
    var $incdec_ptr27 = $incdec_ptr25;
    var $10 = $9;
    label = 7;
    break;
   case 7:
    var $10;
    var $incdec_ptr27;
    var $visitid9 = $10 + 68 | 0;
    var $11 = HEAP32[$visitid9 >> 2];
    var $12 = HEAP32[5249152 >> 2];
    var $cmp = ($11 | 0) == ($12 | 0);
    if ($cmp) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $call = _qh_test_appendmerge($facet_031, $10);
    var $tobool11 = ($call | 0) == 0;
    if ($tobool11) {
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $ridges = $10 + 52 | 0;
    var $13 = HEAP32[$ridges >> 2];
    var $tobool13 = ($13 | 0) == 0;
    if ($tobool13) {
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p18 = $13 + 4 | 0;
    var $14 = $p18;
    var $ridgep_0 = $14;
    label = 11;
    break;
   case 11:
    var $ridgep_0;
    var $incdec_ptr20 = $ridgep_0 + 4 | 0;
    var $15 = HEAP32[$ridgep_0 >> 2];
    var $tobool21 = ($15 | 0) == 0;
    if ($tobool21) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $top = $15 + 4 | 0;
    var $16 = HEAP32[$top >> 2];
    var $cmp23 = ($16 | 0) == ($10 | 0);
    if ($cmp23) {
      label = 13;
      break;
    } else {
      var $cond = $16;
      label = 14;
      break;
    }
   case 13:
    var $bottom = $15 + 8 | 0;
    var $17 = HEAP32[$bottom >> 2];
    var $cond = $17;
    label = 14;
    break;
   case 14:
    var $cond;
    var $cmp25 = ($facet_031 | 0) == ($cond | 0);
    if ($cmp25) {
      label = 15;
      break;
    } else {
      var $ridgep_0 = $incdec_ptr20;
      label = 11;
      break;
    }
   case 15:
    var $18 = $15 + 12 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $20 | 67108864;
    HEAP32[$19 >> 2] = $21;
    label = 16;
    break;
   case 16:
    var $22 = HEAP32[$incdec_ptr27 >> 2];
    var $tobool7 = ($22 | 0) == 0;
    if ($tobool7) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $incdec_ptr = $incdec_ptr27 + 4 | 0;
    var $incdec_ptr27 = $incdec_ptr;
    var $10 = $22;
    label = 7;
    break;
   case 18:
    var $ridges33 = $facet_031 + 52 | 0;
    var $23 = HEAP32[$ridges33 >> 2];
    var $tobool34 = ($23 | 0) == 0;
    if ($tobool34) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $p39 = $23 + 4 | 0;
    var $24 = HEAP32[$p39 >> 2];
    var $tobool4228 = ($24 | 0) == 0;
    if ($tobool4228) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $25 = $24;
    var $26 = $p39;
    var $ridgep_129 = $26;
    var $27 = $25;
    label = 21;
    break;
   case 21:
    var $27;
    var $ridgep_129;
    var $incdec_ptr41 = $ridgep_129 + 4 | 0;
    var $28 = $27 + 12 | 0;
    var $29 = $28;
    var $30 = HEAP32[$29 >> 2];
    var $31 = $30 | 33554432;
    HEAP32[$29 >> 2] = $31;
    var $32 = HEAP32[$incdec_ptr41 >> 2];
    var $tobool42 = ($32 | 0) == 0;
    if ($tobool42) {
      label = 22;
      break;
    } else {
      var $ridgep_129 = $incdec_ptr41;
      var $27 = $32;
      label = 21;
      break;
    }
   case 22:
    var $33 = HEAP32[$next >> 2];
    var $tobool1 = ($33 | 0) == 0;
    if ($tobool1) {
      label = 23;
      break;
    } else {
      var $facet_031 = $33;
      label = 3;
      break;
    }
   case 23:
    var $34 = HEAP32[5249168 >> 2];
    var $call50 = _qh_setsize($34);
    var $35 = HEAP32[5246936 >> 2];
    var $tobool51 = ($35 | 0) == 0;
    var $36 = HEAP32[5249168 >> 2];
    var $p55 = $36 + 4 | 0;
    var $37 = $p55;
    if ($tobool51) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qsort($37, $call50, 4, 4);
    label = 26;
    break;
   case 25:
    _qsort($37, $call50, 4, 18);
    label = 26;
    break;
   case 26:
    var $38 = HEAP32[5249120 >> 2];
    var $tobool60 = ($38 | 0) == 0;
    if ($tobool60) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $39 = HEAP32[5243984 >> 2];
    var $add = $39 + $call50 | 0;
    HEAP32[5243984 >> 2] = $add;
    label = 30;
    break;
   case 28:
    var $40 = HEAP32[5243968 >> 2];
    var $add63 = $40 + $call50 | 0;
    HEAP32[5243968 >> 2] = $add63;
    var $41 = HEAP32[5243976 >> 2];
    var $cmp64 = ($41 | 0) < ($call50 | 0);
    if ($cmp64) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    HEAP32[5243976 >> 2] = $call50;
    label = 30;
    break;
   case 30:
    var $42 = HEAP32[5247036 >> 2];
    var $cmp68 = ($42 | 0) > 1;
    if ($cmp68) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_fprintf(5267436);
    label = 32;
    break;
   case 32:
    return;
  }
}
_qh_getmergeset_initial["X"] = 1;
function _qh_all_merges($othermerge, $vneighbors) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5266420);
    label = 4;
    break;
   case 4:
    var $tobool82 = ($vneighbors | 0) == 0;
    var $numnewmerges_0 = 0;
    var $numdegenredun_0 = 0;
    var $numconcave_0 = 0;
    var $numcoplanar_0 = 0;
    var $othermerge_addr_0 = $othermerge;
    label = 5;
    break;
   case 5:
    var $othermerge_addr_0;
    var $numcoplanar_0;
    var $numconcave_0;
    var $numdegenredun_0;
    var $numnewmerges_0;
    var $1 = HEAP32[5249168 >> 2];
    var $call50 = _qh_setsize($1);
    var $tobool251 = ($call50 | 0) == 0;
    if ($tobool251) {
      var $wasmerge_0_lcssa = 0;
      var $numcoplanar_1_lcssa = $numcoplanar_0;
      var $numconcave_1_lcssa = $numconcave_0;
      var $numdegenredun_1_lcssa = $numdegenredun_0;
      var $numnewmerges_1_lcssa = $numnewmerges_0;
      label = 20;
      break;
    } else {
      var $numnewmerges_2_ph_ph_ph = $numnewmerges_0;
      var $numdegenredun_2_ph_ph_ph = $numdegenredun_0;
      var $numconcave_2_ph_ph_ph = $numconcave_0;
      var $numcoplanar_2_ph_ph_ph = $numcoplanar_0;
      var $wasmerge_1_ph_ph_ph = 0;
      label = 6;
      break;
    }
   case 6:
    var $wasmerge_1_ph_ph_ph;
    var $numcoplanar_2_ph_ph_ph;
    var $numconcave_2_ph_ph_ph;
    var $numdegenredun_2_ph_ph_ph;
    var $numnewmerges_2_ph_ph_ph;
    var $numnewmerges_2_ph = $numnewmerges_2_ph_ph_ph;
    var $numdegenredun_2_ph = $numdegenredun_2_ph_ph_ph;
    var $numconcave_2_ph = $numconcave_2_ph_ph_ph;
    var $wasmerge_1_ph = $wasmerge_1_ph_ph_ph;
    label = 7;
    break;
   case 7:
    var $wasmerge_1_ph;
    var $numconcave_2_ph;
    var $numdegenredun_2_ph;
    var $numnewmerges_2_ph;
    var $2 = HEAP32[5249168 >> 2];
    var $call533 = _qh_setdellast($2);
    var $tobool634 = ($call533 | 0) == 0;
    if ($tobool634) {
      label = 17;
      break;
    } else {
      var $call535 = $call533;
      label = 8;
      break;
    }
   case 8:
    var $call535;
    var $facet18 = $call535 + 8 | 0;
    var $3 = $facet18;
    var $4 = HEAP32[$3 >> 2];
    var $facet29 = $call535 + 12 | 0;
    var $5 = $facet29;
    var $6 = HEAP32[$5 >> 2];
    var $type = $call535 + 16 | 0;
    var $7 = $type;
    var $8 = HEAP32[$7 >> 2];
    _qh_memfree($call535, 20);
    var $9 = $4 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $bf_clear = $11 & 2048;
    var $tobool10 = ($bf_clear | 0) == 0;
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $12 = HEAP32[5249168 >> 2];
    var $call5 = _qh_setdellast($12);
    var $tobool6 = ($call5 | 0) == 0;
    if ($tobool6) {
      label = 17;
      break;
    } else {
      var $call535 = $call5;
      label = 8;
      break;
    }
   case 10:
    var $13 = $6 + 76 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear12 = $15 & 2048;
    var $tobool13 = ($bf_clear12 | 0) == 0;
    if ($tobool13) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 11:
    var $16 = $11 & 134218752;
    var $17 = ($16 | 0) == 1024;
    if ($17) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $bf_clear24 = $15 & 1024;
    var $tobool25 = ($bf_clear24 | 0) == 0;
    if ($tobool25) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $bf_clear28 = $15 & 134217728;
    var $tobool29 = ($bf_clear28 | 0) == 0;
    var $18 = HEAP32[5247076 >> 2];
    var $tobool31 = ($18 | 0) != 0;
    var $or_cond6 = $tobool29 & $tobool31;
    var $cmp33_old = $8 >>> 0 < 3;
    var $or_cond28 = $or_cond6 & $cmp33_old;
    if ($or_cond28) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $_old = HEAP32[5247076 >> 2];
    var $tobool31_old = ($_old | 0) != 0;
    var $cmp33 = $8 >>> 0 < 3;
    var $or_cond27 = $tobool31_old & $cmp33;
    if ($or_cond27) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_merge_nonconvex($4, $6, $8);
    var $call37 = _qh_merge_degenredundant();
    var $add = $call37 + $numdegenredun_2_ph | 0;
    var $inc = $numnewmerges_2_ph + 1 | 0;
    var $cmp38 = ($8 | 0) == 3;
    var $inc40 = $numconcave_2_ph + 1 | 0;
    if ($cmp38) {
      var $numnewmerges_2_ph = $inc;
      var $numdegenredun_2_ph = $add;
      var $numconcave_2_ph = $inc40;
      var $wasmerge_1_ph = 1;
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $inc41 = $numcoplanar_2_ph_ph_ph + 1 | 0;
    var $numnewmerges_2_ph_ph_ph = $inc;
    var $numdegenredun_2_ph_ph_ph = $add;
    var $numconcave_2_ph_ph_ph = $numconcave_2_ph;
    var $numcoplanar_2_ph_ph_ph = $inc41;
    var $wasmerge_1_ph_ph_ph = 1;
    label = 6;
    break;
   case 17:
    var $19 = HEAP32[5249120 >> 2];
    var $tobool43 = ($19 | 0) != 0;
    var $20 = HEAP32[5247504 >> 2];
    var $cmp45 = ($20 | 0) < 6;
    var $or_cond = $tobool43 & $cmp45;
    var $cmp47 = ($numnewmerges_2_ph | 0) > 2;
    var $or_cond29 = $or_cond & $cmp47;
    if ($or_cond29) {
      label = 18;
      break;
    } else {
      var $numnewmerges_3 = $numnewmerges_2_ph;
      label = 19;
      break;
    }
   case 18:
    var $call49 = _qh_reducevertices();
    var $numnewmerges_3 = 0;
    label = 19;
    break;
   case 19:
    var $numnewmerges_3;
    var $21 = HEAP32[5248952 >> 2];
    _qh_getmergeset($21);
    var $22 = HEAP32[5249168 >> 2];
    var $call = _qh_setsize($22);
    var $tobool2 = ($call | 0) == 0;
    if ($tobool2) {
      var $wasmerge_0_lcssa = $wasmerge_1_ph;
      var $numcoplanar_1_lcssa = $numcoplanar_2_ph_ph_ph;
      var $numconcave_1_lcssa = $numconcave_2_ph;
      var $numdegenredun_1_lcssa = $numdegenredun_2_ph;
      var $numnewmerges_1_lcssa = $numnewmerges_3;
      label = 20;
      break;
    } else {
      var $numnewmerges_2_ph = $numnewmerges_3;
      var $numdegenredun_2_ph = $numdegenredun_2_ph;
      var $numconcave_2_ph = $numconcave_2_ph;
      var $wasmerge_1_ph = $wasmerge_1_ph;
      label = 7;
      break;
    }
   case 20:
    var $numnewmerges_1_lcssa;
    var $numdegenredun_1_lcssa;
    var $numconcave_1_lcssa;
    var $numcoplanar_1_lcssa;
    var $wasmerge_0_lcssa;
    var $23 = HEAP32[5248576 >> 2];
    var $tobool52 = ($23 | 0) == 0;
    if ($tobool52) {
      var $othermerge_addr_2 = $othermerge_addr_0;
      label = 30;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $24 = HEAP32[5247504 >> 2];
    var $cmp54 = ($24 | 0) > 3;
    var $25 = HEAP32[5249120 >> 2];
    var $tobool56 = ($25 | 0) != 0;
    var $or_cond1 = $cmp54 & $tobool56;
    if ($or_cond1) {
      label = 22;
      break;
    } else {
      var $isreduce_0 = 0;
      label = 25;
      break;
    }
   case 22:
    var $vertex_061 = HEAP32[5248980 >> 2];
    var $tobool5862 = ($vertex_061 | 0) == 0;
    if ($tobool5862) {
      var $isreduce_0 = 1;
      label = 25;
      break;
    } else {
      var $vertex_063 = $vertex_061;
      label = 23;
      break;
    }
   case 23:
    var $vertex_063;
    var $next = $vertex_063 | 0;
    var $26 = HEAP32[$next >> 2];
    var $tobool59 = ($26 | 0) == 0;
    if ($tobool59) {
      var $isreduce_0 = 1;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $27 = $vertex_063 + 20 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $30 = $29 | 536870912;
    HEAP32[$28 >> 2] = $30;
    var $vertex_063 = $26;
    label = 23;
    break;
   case 25:
    var $isreduce_0;
    var $31 = $wasmerge_0_lcssa | $othermerge_addr_0;
    var $32 = ($31 | 0) == 0;
    if ($32) {
      var $othermerge_addr_1 = $othermerge_addr_0;
      var $isreduce_1 = $isreduce_0;
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $33 = HEAP32[5247072 >> 2];
    var $tobool67 = ($33 | 0) == 0;
    var $34 = HEAP32[5249120 >> 2];
    var $tobool69 = ($34 | 0) != 0;
    var $or_cond2 = $tobool67 | $tobool69;
    var $35 = HEAP32[5247504 >> 2];
    var $cmp71 = ($35 | 0) < 6;
    var $or_cond3 = $or_cond2 & $cmp71;
    var $_isreduce_0 = $or_cond3 ? 1 : $isreduce_0;
    var $_othermerge_addr_0 = $or_cond3 ? 0 : $othermerge_addr_0;
    var $othermerge_addr_1 = $_othermerge_addr_0;
    var $isreduce_1 = $_isreduce_0;
    label = 27;
    break;
   case 27:
    var $isreduce_1;
    var $othermerge_addr_1;
    var $tobool74 = ($isreduce_1 | 0) == 0;
    if ($tobool74) {
      var $othermerge_addr_2 = $othermerge_addr_1;
      label = 30;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $call76 = _qh_reducevertices();
    var $tobool77 = ($call76 | 0) == 0;
    if ($tobool77) {
      var $othermerge_addr_2 = $othermerge_addr_1;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $36 = HEAP32[5248952 >> 2];
    _qh_getmergeset($36);
    var $numnewmerges_0 = $numnewmerges_1_lcssa;
    var $numdegenredun_0 = $numdegenredun_1_lcssa;
    var $numconcave_0 = $numconcave_1_lcssa;
    var $numcoplanar_0 = $numcoplanar_1_lcssa;
    var $othermerge_addr_0 = $othermerge_addr_1;
    label = 5;
    break;
   case 30:
    var $othermerge_addr_2;
    if ($tobool82) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $call84 = _qh_test_vneighbors();
    var $tobool85 = ($call84 | 0) == 0;
    if ($tobool85) {
      label = 32;
      break;
    } else {
      var $numnewmerges_0 = $numnewmerges_1_lcssa;
      var $numdegenredun_0 = $numdegenredun_1_lcssa;
      var $numconcave_0 = $numconcave_1_lcssa;
      var $numcoplanar_0 = $numcoplanar_1_lcssa;
      var $othermerge_addr_0 = $othermerge_addr_2;
      label = 5;
      break;
    }
   case 32:
    var $37 = HEAP32[5246976 >> 2];
    var $tobool89 = ($37 | 0) == 0;
    var $38 = HEAP32[5247072 >> 2];
    var $tobool91 = ($38 | 0) != 0;
    var $or_cond4 = $tobool89 | $tobool91;
    if ($or_cond4) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $39 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $39;
    HEAP32[5247336 >> 2] = 0;
    var $40 = HEAP32[5248952 >> 2];
    _qh_checkconvex($40, 0);
    var $41 = HEAP32[5249220 >> 2];
    HEAP32[5247336 >> 2] = $41;
    label = 34;
    break;
   case 34:
    var $42 = HEAP32[5247036 >> 2];
    var $cmp94 = ($42 | 0) > 0;
    if ($cmp94) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    _qh_fprintf(5262224);
    var $_pre = HEAP32[5247036 >> 2];
    var $cmp97 = ($_pre | 0) > 3;
    var $43 = HEAP32[5248992 >> 2];
    var $cmp99 = ($43 | 0) < 50;
    var $or_cond5 = $cmp97 & $cmp99;
    if ($or_cond5) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    _qh_printlists();
    label = 37;
    break;
   case 37:
    return;
  }
}
_qh_all_merges["X"] = 1;
function _qh_postmerge($maxcentrum, $maxangle, $vneighbors) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $othermerges = __stackBase__;
    HEAP32[$othermerges >> 2] = 0;
    var $0 = HEAP32[5247368 >> 2];
    var $1 = HEAP32[5247036 >> 2];
    var $2 = $1 | $0;
    var $3 = ($2 | 0) == 0;
    if ($3) {
      var $5 = $1;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_buildtracing(0, 0);
    _qh_printsummary();
    var $4 = HEAP32[5247312 >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_printallstatistics();
    label = 5;
    break;
   case 5:
    _qh_fprintf(5276624);
    var $_pr = HEAP32[5247036 >> 2];
    var $5 = $_pr;
    label = 6;
    break;
   case 6:
    var $5;
    var $cmp = ($5 | 0) > 1;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_fprintf(5270860);
    label = 8;
    break;
   case 8:
    HEAPF64[tempDoublePtr >> 3] = $maxcentrum, HEAP32[5248608 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248612 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $maxangle, HEAP32[5248616 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248620 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5249120 >> 2] = 1;
    var $6 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($6);
    HEAP32[5249172 >> 2] = $call;
    var $7 = HEAP32[5248936 >> 2];
    var $call7 = _qh_settemp($7);
    HEAP32[5249168 >> 2] = $call7;
    var $8 = HEAP32[5248956 >> 2];
    var $9 = HEAP32[5248940 >> 2];
    var $cmp8 = ($8 | 0) == ($9 | 0);
    if ($cmp8) {
      label = 23;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[5249088 >> 2] = 1;
    HEAP32[5248952 >> 2] = $9;
    HEAP32[5248956 >> 2] = $9;
    var $tobool1025 = ($9 | 0) == 0;
    if ($tobool1025) {
      label = 12;
      break;
    } else {
      var $newfacet_026 = $9;
      label = 10;
      break;
    }
   case 10:
    var $newfacet_026;
    var $next = $newfacet_026 + 44 | 0;
    var $10 = HEAP32[$next >> 2];
    var $tobool11 = ($10 | 0) == 0;
    if ($tobool11) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $11 = $newfacet_026 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear = $13 << 16;
    var $14 = $bf_clear & 536870912;
    var $15 = $14 ^ 536871936;
    var $_ = $15 | $13;
    HEAP32[$12 >> 2] = $_;
    var $16 = HEAP32[5244360 >> 2];
    var $inc = $16 + 1 | 0;
    HEAP32[5244360 >> 2] = $inc;
    var $newfacet_026 = $10;
    label = 10;
    break;
   case 12:
    var $17 = HEAP32[5248980 >> 2];
    HEAP32[5248988 >> 2] = $17;
    var $tobool1922 = ($17 | 0) == 0;
    if ($tobool1922) {
      label = 15;
      break;
    } else {
      var $vertex_023 = $17;
      label = 13;
      break;
    }
   case 13:
    var $vertex_023;
    var $next21 = $vertex_023 | 0;
    var $18 = HEAP32[$next21 >> 2];
    var $tobool22 = ($18 | 0) == 0;
    if ($tobool22) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $19 = $vertex_023 + 20 | 0;
    var $20 = $19;
    var $21 = HEAP32[$20 >> 2];
    var $22 = $21 | -2147483648;
    HEAP32[$20 >> 2] = $22;
    var $vertex_023 = $18;
    label = 13;
    break;
   case 15:
    var $23 = HEAP32[5248576 >> 2];
    var $tobool29 = ($23 | 0) == 0;
    if ($tobool29) {
      label = 21;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $vertex_118 = HEAP32[5248980 >> 2];
    var $tobool3219 = ($vertex_118 | 0) == 0;
    if ($tobool3219) {
      label = 19;
      break;
    } else {
      var $vertex_120 = $vertex_118;
      label = 17;
      break;
    }
   case 17:
    var $vertex_120;
    var $next34 = $vertex_120 | 0;
    var $24 = HEAP32[$next34 >> 2];
    var $tobool35 = ($24 | 0) == 0;
    if ($tobool35) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $25 = $vertex_120 + 20 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $28 = $27 | 536870912;
    HEAP32[$26 >> 2] = $28;
    var $vertex_120 = $24;
    label = 17;
    break;
   case 19:
    var $29 = HEAP32[5247072 >> 2];
    var $tobool42 = ($29 | 0) != 0;
    var $30 = HEAP32[5247504 >> 2];
    var $cmp44 = ($30 | 0) < 6;
    var $or_cond2 = $tobool42 & $cmp44;
    if ($or_cond2) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $call46 = _qh_reducevertices();
    label = 21;
    break;
   case 21:
    var $31 = HEAP32[5247140 >> 2];
    var $32 = HEAP32[5247072 >> 2];
    var $33 = $32 | $31;
    var $34 = ($33 | 0) == 0;
    if ($34) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $35 = HEAP32[5248952 >> 2];
    _qh_flippedmerges($35, $othermerges);
    label = 23;
    break;
   case 23:
    var $36 = HEAP32[5248952 >> 2];
    _qh_getmergeset_initial($36);
    _qh_all_merges(0, $vneighbors);
    _qh_settempfree(5249168);
    _qh_settempfree(5249172);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_postmerge["X"] = 1;
function _qh_reducevertices() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247504 >> 2];
    var $cmp = ($0 | 0) == 2;
    if ($cmp) {
      var $retval_0 = 0;
      label = 33;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call = _qh_merge_degenredundant();
    var $not_tobool = ($call | 0) != 0;
    var $_ = $not_tobool & 1;
    var $degenredun_0 = $_;
    var $numrename_0 = 0;
    var $numshare_0 = 0;
    label = 4;
    break;
   case 4:
    var $numshare_0;
    var $numrename_0;
    var $degenredun_0;
    var $newfacet_026 = HEAP32[5248952 >> 2];
    var $tobool327 = ($newfacet_026 | 0) == 0;
    if ($tobool327) {
      label = 10;
      break;
    } else {
      var $newfacet_028 = $newfacet_026;
      label = 5;
      break;
    }
   case 5:
    var $newfacet_028;
    var $next = $newfacet_028 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool4 = ($1 | 0) == 0;
    if ($tobool4) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $2 = $newfacet_028 + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 536870912;
    var $tobool5 = ($bf_clear | 0) == 0;
    if ($tobool5) {
      var $newfacet_028 = $1;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $call11 = _qh_remove_extravertices($newfacet_028);
    var $newfacet_0_pre = HEAP32[$next >> 2];
    var $tobool3 = ($newfacet_0_pre | 0) == 0;
    if ($tobool3) {
      label = 10;
      break;
    } else {
      var $newfacet_028 = $newfacet_0_pre;
      label = 5;
      break;
    }
   case 8:
    var $5 = HEAP32[5247100 >> 2];
    var $tobool7 = ($5 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 9:
    var $6 = $4 & -536870913;
    HEAP32[$3 >> 2] = $6;
    label = 7;
    break;
   case 10:
    var $7 = HEAP32[5247100 >> 2];
    var $tobool14 = ($7 | 0) == 0;
    if ($tobool14) {
      var $retval_0 = 0;
      label = 33;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $newfacet_13343 = HEAP32[5248952 >> 2];
    var $tobool183444 = ($newfacet_13343 | 0) == 0;
    if ($tobool183444) {
      var $numshare_1_ph41 = $numshare_0;
      label = 22;
      break;
    } else {
      var $numshare_1_ph45 = $numshare_0;
      var $newfacet_13346 = $newfacet_13343;
      label = 13;
      break;
    }
   case 12:
    var $newfacet_133 = HEAP32[$next20 >> 2];
    var $tobool1834 = ($newfacet_133 | 0) == 0;
    if ($tobool1834) {
      var $numshare_1_ph41 = $numshare_2_ph;
      label = 22;
      break;
    } else {
      var $numshare_1_ph45 = $numshare_2_ph;
      var $newfacet_13346 = $newfacet_133;
      label = 13;
      break;
    }
   case 13:
    var $newfacet_13346;
    var $numshare_1_ph45;
    var $newfacet_135 = $newfacet_13346;
    label = 14;
    break;
   case 14:
    var $newfacet_135;
    var $next20 = $newfacet_135 + 44 | 0;
    var $8 = HEAP32[$next20 >> 2];
    var $tobool21 = ($8 | 0) == 0;
    if ($tobool21) {
      var $numshare_1_ph41 = $numshare_1_ph45;
      label = 22;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $9 = $newfacet_135 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $bf_clear25 = $11 & 536870912;
    var $tobool26 = ($bf_clear25 | 0) == 0;
    if ($tobool26) {
      var $newfacet_135 = $8;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $12 = $11 & -536870913;
    HEAP32[$10 >> 2] = $12;
    var $vertices = $newfacet_135 + 48 | 0;
    var $13 = HEAP32[$vertices >> 2];
    var $tobool29 = ($13 | 0) == 0;
    if ($tobool29) {
      var $newfacet_135 = $8;
      label = 14;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p = $13 + 4 | 0;
    var $14 = $p;
    var $vertexp_0_ph = $14;
    var $numshare_2_ph = $numshare_1_ph45;
    label = 18;
    break;
   case 18:
    var $numshare_2_ph;
    var $vertexp_0_ph;
    var $vertexp_0 = $vertexp_0_ph;
    label = 19;
    break;
   case 19:
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $15 = HEAP32[$vertexp_0 >> 2];
    var $tobool33 = ($15 | 0) == 0;
    if ($tobool33) {
      label = 12;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $16 = $15 + 20 | 0;
    var $17 = $16;
    var $18 = HEAP32[$17 >> 2];
    var $bf_clear36 = $18 & 536870912;
    var $tobool37 = ($bf_clear36 | 0) == 0;
    if ($tobool37) {
      var $vertexp_0 = $incdec_ptr;
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $call39 = _qh_rename_sharedvertex($15, $newfacet_135);
    var $tobool40 = ($call39 | 0) == 0;
    var $19 = $tobool40 & 1;
    var $inc = $19 ^ 1;
    var $numshare_2_inc = $inc + $numshare_2_ph | 0;
    var $incdec_ptr_vertexp_0 = $tobool40 ? $incdec_ptr : $vertexp_0;
    var $vertexp_0_ph = $incdec_ptr_vertexp_0;
    var $numshare_2_ph = $numshare_2_inc;
    label = 18;
    break;
   case 22:
    var $numshare_1_ph41;
    var $vertex_0_in_ph = 5248988;
    var $numrename_1_ph = $numrename_0;
    label = 23;
    break;
   case 23:
    var $numrename_1_ph;
    var $vertex_0_in_ph;
    var $vertex_036 = HEAP32[$vertex_0_in_ph >> 2];
    var $tobool5237 = ($vertex_036 | 0) == 0;
    if ($tobool5237) {
      label = 31;
      break;
    } else {
      var $vertex_038 = $vertex_036;
      label = 24;
      break;
    }
   case 24:
    var $vertex_038;
    var $next54 = $vertex_038 | 0;
    var $20 = HEAP32[$next54 >> 2];
    var $tobool55 = ($20 | 0) == 0;
    if ($tobool55) {
      label = 31;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $21 = $vertex_038 + 20 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 & 1610612736;
    var $25 = ($24 | 0) == 536870912;
    if ($25) {
      label = 27;
      break;
    } else {
      var $vertex_038 = $20;
      label = 24;
      break;
    }
   case 26:
    var $vertex_0;
    var $tobool52 = ($vertex_0 | 0) == 0;
    if ($tobool52) {
      label = 31;
      break;
    } else {
      var $vertex_038 = $vertex_0;
      label = 24;
      break;
    }
   case 27:
    var $26 = $23 & -536870913;
    HEAP32[$22 >> 2] = $26;
    var $27 = HEAP32[5247504 >> 2];
    var $cmp66 = ($27 | 0) > 3;
    if ($cmp66) {
      label = 28;
      break;
    } else {
      var $vertex_0 = $20;
      label = 26;
      break;
    }
   case 28:
    var $call68 = _qh_redundant_vertex($vertex_038);
    var $tobool69 = ($call68 | 0) == 0;
    if ($tobool69) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $vertex_0_pre = HEAP32[$next54 >> 2];
    var $vertex_0 = $vertex_0_pre;
    label = 26;
    break;
   case 30:
    var $inc71 = $numrename_1_ph + 1 | 0;
    var $call72 = _qh_merge_degenredundant();
    var $tobool73 = ($call72 | 0) == 0;
    if ($tobool73) {
      var $vertex_0_in_ph = $next54;
      var $numrename_1_ph = $inc71;
      label = 23;
      break;
    } else {
      var $degenredun_0 = 1;
      var $numrename_0 = $inc71;
      var $numshare_0 = $numshare_1_ph41;
      label = 4;
      break;
    }
   case 31:
    var $28 = HEAP32[5247036 >> 2];
    var $cmp81 = ($28 | 0) > 0;
    if ($cmp81) {
      label = 32;
      break;
    } else {
      var $retval_0 = $degenredun_0;
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5302240);
    var $retval_0 = $degenredun_0;
    label = 33;
    break;
   case 33:
    var $retval_0;
    return $retval_0;
  }
}
_qh_reducevertices["X"] = 1;
function _qh_merge_nonconvex($facet1, $facet2, $mergetype) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $dist2 = __stackBase__ + 8;
    var $mindist = __stackBase__ + 16;
    var $mindist2 = __stackBase__ + 24;
    var $maxdist = __stackBase__ + 32;
    var $maxdist2 = __stackBase__ + 40;
    var $0 = HEAP32[5247444 >> 2];
    var $sub = $0 - 1 | 0;
    var $1 = HEAP32[5244576 >> 2];
    var $cmp = ($sub | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[5247036 >> 2];
    var $3 = $_pre;
    label = 5;
    break;
   case 4:
    var $2 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $2;
    HEAP32[5242936 >> 2] = $2;
    var $3 = $2;
    label = 5;
    break;
   case 5:
    var $3;
    var $cmp1 = ($3 | 0) > 2;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _qh_fprintf(5263068);
    label = 7;
    break;
   case 7:
    var $4 = $facet1 + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 1024;
    var $tobool = ($bf_clear | 0) == 0;
    var $facet2_facet1 = $tobool ? $facet2 : $facet1;
    var $facet1_facet2 = $tobool ? $facet1 : $facet2;
    var $call = _qh_findbestneighbor($facet2_facet1, $dist, $mindist, $maxdist);
    var $call7 = _qh_findbestneighbor($facet1_facet2, $dist2, $mindist2, $maxdist2);
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp8 = $7 < $8;
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_mergefacet($facet2_facet1, $call, $mindist, $maxdist, 0);
    var $21 = $7;
    label = 20;
    break;
   case 9:
    var $9 = HEAP32[5246960 >> 2];
    var $tobool11 = ($9 | 0) == 0;
    if ($tobool11) {
      label = 19;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $10 = $facet1_facet2 + 76 | 0;
    var $11 = $10;
    var $12 = HEAP32[$11 >> 2];
    var $bf_clear13 = $12 & 1024;
    var $tobool14 = ($bf_clear13 | 0) == 0;
    if ($tobool14) {
      label = 11;
      break;
    } else {
      label = 19;
      break;
    }
   case 11:
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub16 = -$14;
    var $cmp17 = $13 < $sub16;
    if ($cmp17) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp19 = $15 > $16;
    if ($cmp19) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $mul = $7 * 1.5;
    var $cmp20 = $mul < $8;
    if ($cmp20) {
      label = 14;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $17 = HEAP32[5243088 >> 2];
    var $inc = $17 + 1 | 0;
    HEAP32[5243088 >> 2] = $inc;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add22 = $7 + $18;
    HEAPF64[tempDoublePtr >> 3] = $add22, HEAP32[5243104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243096 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243100 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp23 = $19 < $7;
    if ($cmp23) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    HEAPF64[tempDoublePtr >> 3] = $7, HEAP32[5243096 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243100 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 16;
    break;
   case 16:
    var $20 = HEAP32[5247036 >> 2];
    var $cmp26 = ($20 | 0) > 1;
    if ($cmp26) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _qh_fprintf(5262648);
    label = 18;
    break;
   case 18:
    _qh_mergefacet($facet2_facet1, $call, $mindist, $maxdist, 0);
    var $21 = $7;
    label = 20;
    break;
   case 19:
    _qh_mergefacet($facet1_facet2, $call7, $mindist2, $maxdist2, 0);
    HEAPF64[tempDoublePtr >> 3] = $8, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $21 = $8;
    label = 20;
    break;
   case 20:
    var $21;
    var $22 = HEAP32[5247312 >> 2];
    var $tobool34 = ($22 | 0) == 0;
    if ($tobool34) {
      label = 28;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    if (($mergetype | 0) == 2) {
      label = 22;
      break;
    } else if (($mergetype | 0) == 3) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 22:
    var $23 = HEAP32[5243e3 >> 2];
    var $inc38 = $23 + 1 | 0;
    HEAP32[5243e3 >> 2] = $inc38;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243016 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243020 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add39 = $21 + $24;
    HEAPF64[tempDoublePtr >> 3] = $add39, HEAP32[5243016 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243020 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243008 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243012 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp40 = $25 < $21;
    if ($cmp40) {
      label = 23;
      break;
    } else {
      label = 28;
      break;
    }
   case 23:
    HEAPF64[tempDoublePtr >> 3] = $21, HEAP32[5243008 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243012 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 28;
    break;
   case 24:
    var $26 = HEAP32[5243176 >> 2];
    var $inc46 = $26 + 1 | 0;
    HEAP32[5243176 >> 2] = $inc46;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243192 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243196 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add47 = $21 + $27;
    HEAPF64[tempDoublePtr >> 3] = $add47, HEAP32[5243192 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243196 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243184 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243188 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp48 = $28 < $21;
    if ($cmp48) {
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 25:
    HEAPF64[tempDoublePtr >> 3] = $21, HEAP32[5243184 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243188 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 28;
    break;
   case 26:
    var $29 = HEAP32[5243216 >> 2];
    var $inc52 = $29 + 1 | 0;
    HEAP32[5243216 >> 2] = $inc52;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243232 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243236 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add53 = $21 + $30;
    HEAPF64[tempDoublePtr >> 3] = $add53, HEAP32[5243232 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243236 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243224 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243228 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp54 = $31 < $21;
    if ($cmp54) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    HEAPF64[tempDoublePtr >> 3] = $21, HEAP32[5243224 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243228 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 28;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_merge_nonconvex["X"] = 1;
function _qh_getmergeset($facetlist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249168 >> 2];
    var $call = _qh_setsize($0);
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5267856);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5249152 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 24;
      break;
    } else {
      var $facet_035 = $facetlist;
      label = 5;
      break;
    }
   case 5:
    var $facet_035;
    var $next = $facet_035 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      label = 24;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = $facet_035 + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 134217728;
    var $tobool4 = ($bf_clear | 0) == 0;
    if ($tobool4) {
      label = 7;
      break;
    } else {
      label = 23;
      break;
    }
   case 7:
    var $7 = HEAP32[5249152 >> 2];
    var $visitid = $facet_035 + 68 | 0;
    HEAP32[$visitid >> 2] = $7;
    var $8 = $6 | 134217728;
    HEAP32[$5 >> 2] = $8;
    var $neighbors = $facet_035 + 56 | 0;
    var $9 = HEAP32[$neighbors >> 2];
    var $tobool8 = ($9 | 0) == 0;
    if ($tobool8) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p = $9 + 4 | 0;
    var $10 = HEAP32[$p >> 2];
    var $tobool1229 = ($10 | 0) == 0;
    if ($tobool1229) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $11 = $10;
    var $12 = $p;
    var $neighborp_030 = $12;
    var $13 = $11;
    label = 10;
    break;
   case 10:
    var $13;
    var $neighborp_030;
    var $incdec_ptr = $neighborp_030 + 4 | 0;
    var $14 = $13 + 76 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $17 = $16 & -16385;
    HEAP32[$15 >> 2] = $17;
    var $18 = HEAP32[$incdec_ptr >> 2];
    var $tobool12 = ($18 | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      var $neighborp_030 = $incdec_ptr;
      var $13 = $18;
      label = 10;
      break;
    }
   case 11:
    var $ridges = $facet_035 + 52 | 0;
    var $19 = HEAP32[$ridges >> 2];
    var $tobool16 = ($19 | 0) == 0;
    if ($tobool16) {
      label = 23;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p21 = $19 + 4 | 0;
    var $20 = HEAP32[$p21 >> 2];
    var $tobool2432 = ($20 | 0) == 0;
    if ($tobool2432) {
      label = 23;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $21 = $20;
    var $incdec_ptr233136 = $p21 + 4 | 0;
    var $incdec_ptr2331 = $incdec_ptr233136;
    var $incdec_ptr2333 = $incdec_ptr2331;
    var $22 = $21;
    label = 14;
    break;
   case 14:
    var $22;
    var $incdec_ptr2333;
    var $23 = $22 + 12 | 0;
    var $24 = $23;
    var $25 = HEAP32[$24 >> 2];
    var $26 = $25 & 100663296;
    var $27 = ($26 | 0) == 33554432;
    if ($27) {
      label = 22;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $top = $22 + 4 | 0;
    var $28 = HEAP32[$top >> 2];
    var $cmp34 = ($28 | 0) == ($facet_035 | 0);
    if ($cmp34) {
      label = 16;
      break;
    } else {
      var $cond = $28;
      label = 17;
      break;
    }
   case 16:
    var $bottom = $22 + 8 | 0;
    var $29 = HEAP32[$bottom >> 2];
    var $cond = $29;
    label = 17;
    break;
   case 17:
    var $cond;
    var $30 = $cond + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear37 = $32 & 16384;
    var $tobool38 = ($bf_clear37 | 0) == 0;
    if ($tobool38) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $33 = $25 & -100663297;
    var $34 = $33 | 33554432;
    HEAP32[$24 >> 2] = $34;
    label = 22;
    break;
   case 19:
    var $visitid42 = $cond + 68 | 0;
    var $35 = HEAP32[$visitid42 >> 2];
    var $36 = HEAP32[5249152 >> 2];
    var $cmp43 = ($35 | 0) == ($36 | 0);
    if ($cmp43) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $37 = $25 & -100663297;
    var $38 = $37 | 33554432;
    HEAP32[$24 >> 2] = $38;
    var $39 = HEAP32[$31 >> 2];
    var $40 = $39 | 16384;
    HEAP32[$31 >> 2] = $40;
    var $call48 = _qh_test_appendmerge($facet_035, $cond);
    var $tobool49 = ($call48 | 0) == 0;
    if ($tobool49) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $41 = HEAP32[$24 >> 2];
    var $42 = $41 | 67108864;
    HEAP32[$24 >> 2] = $42;
    label = 22;
    break;
   case 22:
    var $incdec_ptr23 = $incdec_ptr2333 + 4 | 0;
    var $43 = HEAP32[$incdec_ptr2333 >> 2];
    var $tobool24 = ($43 | 0) == 0;
    if ($tobool24) {
      label = 23;
      break;
    } else {
      var $incdec_ptr2333 = $incdec_ptr23;
      var $22 = $43;
      label = 14;
      break;
    }
   case 23:
    var $44 = HEAP32[$next >> 2];
    var $tobool2 = ($44 | 0) == 0;
    if ($tobool2) {
      label = 24;
      break;
    } else {
      var $facet_035 = $44;
      label = 5;
      break;
    }
   case 24:
    var $45 = HEAP32[5249168 >> 2];
    var $call60 = _qh_setsize($45);
    var $46 = HEAP32[5246936 >> 2];
    var $tobool61 = ($46 | 0) == 0;
    var $47 = HEAP32[5249168 >> 2];
    var $p65 = $47 + 4 | 0;
    var $48 = $p65;
    if ($tobool61) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qsort($48, $call60, 4, 4);
    label = 27;
    break;
   case 26:
    _qsort($48, $call60, 4, 18);
    label = 27;
    break;
   case 27:
    var $49 = HEAP32[5249120 >> 2];
    var $tobool71 = ($49 | 0) == 0;
    if ($tobool71) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $50 = HEAP32[5244024 >> 2];
    var $add = $50 + $call60 | 0;
    HEAP32[5244024 >> 2] = $add;
    label = 31;
    break;
   case 29:
    var $51 = HEAP32[5244008 >> 2];
    var $add74 = $51 + $call60 | 0;
    HEAP32[5244008 >> 2] = $add74;
    var $52 = HEAP32[5244016 >> 2];
    var $cmp75 = ($52 | 0) < ($call60 | 0);
    if ($cmp75) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    HEAP32[5244016 >> 2] = $call60;
    label = 31;
    break;
   case 31:
    var $53 = HEAP32[5247036 >> 2];
    var $cmp79 = ($53 | 0) > 1;
    if ($cmp79) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5267664);
    label = 33;
    break;
   case 33:
    return;
  }
}
_qh_getmergeset["X"] = 1;
function _qh_test_vneighbors() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5298148);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248576 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_vertexneighbors();
    label = 6;
    break;
   case 6:
    var $newfacet_038 = HEAP32[5248952 >> 2];
    var $tobool339 = ($newfacet_038 | 0) == 0;
    if ($tobool339) {
      var $nummerges_0_ph = 0;
      var $newfacet_1_in_ph = 5248952;
      label = 9;
      break;
    } else {
      var $newfacet_040 = $newfacet_038;
      label = 7;
      break;
    }
   case 7:
    var $newfacet_040;
    var $next = $newfacet_040 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      var $nummerges_0_ph = 0;
      var $newfacet_1_in_ph = 5248952;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $3 = $newfacet_040 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $5 & -16385;
    HEAP32[$4 >> 2] = $6;
    var $newfacet_040 = $2;
    label = 7;
    break;
   case 9:
    var $newfacet_1_in_ph;
    var $nummerges_0_ph;
    var $newfacet_1_in = $newfacet_1_in_ph;
    label = 10;
    break;
   case 10:
    var $newfacet_1_in;
    var $newfacet_1 = HEAP32[$newfacet_1_in >> 2];
    var $tobool7 = ($newfacet_1 | 0) == 0;
    if ($tobool7) {
      label = 29;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $next9 = $newfacet_1 + 44 | 0;
    var $7 = HEAP32[$next9 >> 2];
    var $tobool10 = ($7 | 0) == 0;
    if ($tobool10) {
      label = 29;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $8 = $newfacet_1 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $11 = $10 | 16384;
    HEAP32[$9 >> 2] = $11;
    var $12 = HEAP32[5249152 >> 2];
    var $inc = $12 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $visitid = $newfacet_1 + 68 | 0;
    HEAP32[$visitid >> 2] = $12;
    var $neighbors = $newfacet_1 + 56 | 0;
    var $13 = HEAP32[$neighbors >> 2];
    var $tobool14 = ($13 | 0) == 0;
    if ($tobool14) {
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $p = $13 + 4 | 0;
    var $14 = HEAP32[$p >> 2];
    var $tobool1822 = ($14 | 0) == 0;
    if ($tobool1822) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $15 = $p;
    var $neighborp_023 = $15;
    label = 15;
    break;
   case 15:
    var $neighborp_023;
    var $incdec_ptr = $neighborp_023 + 4 | 0;
    var $16 = HEAP32[5249152 >> 2];
    HEAP32[$visitid >> 2] = $16;
    var $17 = HEAP32[$incdec_ptr >> 2];
    var $tobool18 = ($17 | 0) == 0;
    if ($tobool18) {
      label = 16;
      break;
    } else {
      var $neighborp_023 = $incdec_ptr;
      label = 15;
      break;
    }
   case 16:
    var $vertices = $newfacet_1 + 48 | 0;
    var $18 = HEAP32[$vertices >> 2];
    var $tobool23 = ($18 | 0) == 0;
    if ($tobool23) {
      var $newfacet_1_in = $next9;
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p28 = $18 + 4 | 0;
    var $19 = $p28;
    var $nummerges_1_ph_ph = $nummerges_0_ph;
    var $vertexp_0_ph_ph = $19;
    label = 18;
    break;
   case 18:
    var $vertexp_0_ph_ph;
    var $nummerges_1_ph_ph;
    var $vertexp_0 = $vertexp_0_ph_ph;
    label = 19;
    break;
   case 19:
    var $vertexp_0;
    var $incdec_ptr30 = $vertexp_0 + 4 | 0;
    var $20 = HEAP32[$vertexp_0 >> 2];
    var $tobool31 = ($20 | 0) == 0;
    if ($tobool31) {
      var $nummerges_0_ph = $nummerges_1_ph_ph;
      var $newfacet_1_in_ph = $next9;
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $neighbors33 = $20 + 12 | 0;
    var $21 = HEAP32[$neighbors33 >> 2];
    var $tobool34 = ($21 | 0) == 0;
    if ($tobool34) {
      var $vertexp_0 = $incdec_ptr30;
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $p39 = $21 + 4 | 0;
    var $22 = HEAP32[$p39 >> 2];
    var $tobool422732 = ($22 | 0) == 0;
    if ($tobool422732) {
      var $vertexp_0 = $incdec_ptr30;
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $23 = $22;
    var $incdec_ptr41263141 = $p39 + 4 | 0;
    var $incdec_ptr412631 = $incdec_ptr41263141;
    var $nummerges_2_ph33 = $nummerges_1_ph_ph;
    var $incdec_ptr412634 = $incdec_ptr412631;
    var $24 = $23;
    label = 23;
    break;
   case 23:
    var $24;
    var $incdec_ptr412634;
    var $nummerges_2_ph33;
    var $25 = HEAP32[5249152 >> 2];
    var $incdec_ptr4128 = $incdec_ptr412634;
    var $26 = $24;
    label = 24;
    break;
   case 24:
    var $26;
    var $incdec_ptr4128;
    var $27 = $26 + 76 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $bf_clear = $29 & 16384;
    var $tobool45 = ($bf_clear | 0) == 0;
    if ($tobool45) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $visitid46 = $26 + 68 | 0;
    var $30 = HEAP32[$visitid46 >> 2];
    var $cmp47 = ($30 | 0) == ($25 | 0);
    if ($cmp47) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $incdec_ptr41 = $incdec_ptr4128 + 4 | 0;
    var $31 = HEAP32[$incdec_ptr4128 >> 2];
    var $tobool42 = ($31 | 0) == 0;
    if ($tobool42) {
      var $nummerges_1_ph_ph = $nummerges_2_ph33;
      var $vertexp_0_ph_ph = $incdec_ptr30;
      label = 18;
      break;
    } else {
      var $incdec_ptr4128 = $incdec_ptr41;
      var $26 = $31;
      label = 24;
      break;
    }
   case 27:
    var $call = _qh_test_appendmerge($newfacet_1, $26);
    var $not_tobool50 = ($call | 0) != 0;
    var $inc52 = $not_tobool50 & 1;
    var $nummerges_2_inc52 = $inc52 + $nummerges_2_ph33 | 0;
    var $32 = HEAP32[$incdec_ptr4128 >> 2];
    var $tobool4227 = ($32 | 0) == 0;
    if ($tobool4227) {
      var $nummerges_1_ph_ph = $nummerges_2_inc52;
      var $vertexp_0_ph_ph = $incdec_ptr30;
      label = 18;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $incdec_ptr4126 = $incdec_ptr4128 + 4 | 0;
    var $nummerges_2_ph33 = $nummerges_2_inc52;
    var $incdec_ptr412634 = $incdec_ptr4126;
    var $24 = $32;
    label = 23;
    break;
   case 29:
    var $33 = HEAP32[5244552 >> 2];
    var $add = $33 + $nummerges_0_ph | 0;
    HEAP32[5244552 >> 2] = $add;
    var $34 = HEAP32[5247036 >> 2];
    var $cmp61 = ($34 | 0) > 0;
    if ($cmp61) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _qh_fprintf(5297876);
    label = 31;
    break;
   case 31:
    var $cmp64 = ($nummerges_0_ph | 0) > 0;
    var $conv = $cmp64 & 1;
    return $conv;
  }
}
_qh_test_vneighbors["X"] = 1;
function _qh_appendmergeset($facet, $neighbor, $mergetype, $angle) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $tobool = ($2 | 0) < 0;
    if ($tobool) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $bf_clear2 = $2 & 1073741824;
    var $tobool3 = ($bf_clear2 | 0) != 0;
    var $cmp = ($mergetype | 0) == 6;
    var $or_cond31 = $tobool3 & $cmp;
    if ($or_cond31) {
      label = 21;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _qh_memalloc(20);
    var $facet1 = $call + 8 | 0;
    var $3 = $facet1;
    HEAP32[$3 >> 2] = $facet;
    var $facet2 = $call + 12 | 0;
    var $4 = $facet2;
    HEAP32[$4 >> 2] = $neighbor;
    var $type = $call + 16 | 0;
    var $5 = $type;
    HEAP32[$5 >> 2] = $mergetype;
    var $tobool6 = ($angle | 0) != 0;
    var $6 = HEAP32[5246936 >> 2];
    var $tobool8 = ($6 | 0) != 0;
    var $or_cond = $tobool6 & $tobool8;
    if ($or_cond) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $angle10 = $call;
    HEAPF64[tempDoublePtr >> 3] = $7, HEAP32[$angle10 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle10 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 6;
    break;
   case 6:
    var $cmp12 = $mergetype >>> 0 < 6;
    if ($cmp12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_setappend(5249168, $call);
    label = 21;
    break;
   case 8:
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 13;
      break;
    }
   case 9:
    var $8 = HEAP32[$1 >> 2];
    var $9 = $8 | 1073741824;
    HEAP32[$1 >> 2] = $9;
    var $10 = HEAP32[5249172 >> 2];
    var $call17 = _qh_setlast($10);
    var $tobool18 = ($call17 | 0) == 0;
    if ($tobool18) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $type19 = $call17 + 16 | 0;
    var $11 = $type19;
    var $12 = HEAP32[$11 >> 2];
    var $cmp20 = ($12 | 0) == 6;
    if ($cmp20) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _qh_setappend(5249172, $call);
    label = 21;
    break;
   case 12:
    _qh_setaddnth(5249172, 0, $call);
    label = 21;
    break;
   case 13:
    var $cmp25 = ($mergetype | 0) == 7;
    var $13 = HEAP32[$1 >> 2];
    if ($cmp25) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $14 = $13 | -2147483648;
    HEAP32[$1 >> 2] = $14;
    _qh_setappend(5249172, $call);
    label = 21;
    break;
   case 15:
    var $tobool31 = ($13 | 0) < 0;
    if ($tobool31) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $15 = $neighbor + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $tobool35 = ($17 | 0) < 0;
    if ($tobool35) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _qh_fprintf(5258556);
    _qh_errexit2(5, $facet, $neighbor);
    label = 18;
    break;
   case 18:
    var $vertices = $facet + 48 | 0;
    var $18 = HEAP32[$vertices >> 2];
    var $vertices39 = $neighbor + 48 | 0;
    var $19 = HEAP32[$vertices39 >> 2];
    var $call40 = _qh_setequal($18, $19);
    var $tobool41 = ($call40 | 0) == 0;
    if ($tobool41) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5255552);
    _qh_errexit2(5, $facet, $neighbor);
    label = 20;
    break;
   case 20:
    var $20 = HEAP32[$1 >> 2];
    var $21 = $20 | -2147483648;
    HEAP32[$1 >> 2] = $21;
    var $22 = $neighbor + 76 | 0;
    var $23 = $22;
    var $24 = HEAP32[$23 >> 2];
    var $25 = $24 | -2147483648;
    HEAP32[$23 >> 2] = $25;
    _qh_setappend(5249172, $call);
    label = 21;
    break;
   case 21:
    return;
  }
}
_qh_appendmergeset["X"] = 1;
function _qh_compareangle($p1, $p2) {
  var $3 = HEAP32[$p2 >> 2];
  var $angle = HEAP32[$p1 >> 2] | 0;
  var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
  var $angle1 = $3 | 0;
  return $4 > (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]) ? 1 : -1;
}
function _qh_comparemerge($p1, $p2) {
  return HEAP32[HEAP32[$p1 >> 2] + 16 >> 2] - HEAP32[HEAP32[$p2 >> 2] + 16 >> 2] | 0;
}
function _qh_comparevisit($p1, $p2) {
  return (HEAP32[HEAP32[$p1 >> 2] + 16 >> 2] & 2147483647) - (HEAP32[HEAP32[$p2 >> 2] + 16 >> 2] & 2147483647) | 0;
}
function _qh_basevertices($samecycle) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$vertices >> 2] = $call;
    var $vertices1 = $samecycle + 48 | 0;
    var $1 = HEAP32[$vertices1 >> 2];
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $3 = HEAP32[5249156 >> 2];
    var $inc = $3 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $4 = $3 & -2147483648;
    var $5 = $bf_value | $4;
    HEAP32[5249156 >> 2] = $5;
    var $bf_field_offs = $2 + 16 | 0;
    var $6 = $bf_field_offs;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 & -2147483648;
    var $9 = $8 | $bf_value;
    HEAP32[$6 >> 2] = $9;
    var $f = $samecycle + 28 | 0;
    var $samecycle3 = $f;
    var $10 = HEAP32[$samecycle3 >> 2];
    var $tobool14 = ($10 | 0) == 0;
    if ($tobool14) {
      label = 13;
      break;
    } else {
      var $same_015 = $10;
      label = 3;
      break;
    }
   case 3:
    var $same_015;
    var $11 = $same_015 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear5 = $13 & 4194304;
    var $tobool6 = ($bf_clear5 | 0) == 0;
    if ($tobool6) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    var $vertices7 = $same_015 + 48 | 0;
    var $14 = HEAP32[$vertices7 >> 2];
    var $tobool8 = ($14 | 0) == 0;
    if ($tobool8) {
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p13 = $14 + 4 | 0;
    var $15 = HEAP32[$p13 >> 2];
    var $tobool1512 = ($15 | 0) == 0;
    if ($tobool1512) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $16 = $15;
    var $incdec_ptr1116 = $p13 + 4 | 0;
    var $incdec_ptr11 = $incdec_ptr1116;
    var $incdec_ptr13 = $incdec_ptr11;
    var $17 = $16;
    label = 7;
    break;
   case 7:
    var $17;
    var $incdec_ptr13;
    var $18 = $17 + 16 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    var $21 = HEAP32[5249156 >> 2];
    var $22 = $21 ^ $20;
    var $23 = $22 & 2147483647;
    var $cmp = ($23 | 0) == 0;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $24 = $17;
    _qh_setappend($vertices, $24);
    var $25 = HEAP32[5249156 >> 2];
    var $bf_clear21 = $25 & 2147483647;
    var $26 = HEAP32[$19 >> 2];
    var $27 = $26 & -2147483648;
    var $28 = $27 | $bf_clear21;
    HEAP32[$19 >> 2] = $28;
    var $29 = $17 + 20 | 0;
    var $30 = $29;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31 & -268435457;
    HEAP32[$30 >> 2] = $32;
    label = 9;
    break;
   case 9:
    var $33 = HEAP32[$incdec_ptr13 >> 2];
    var $tobool15 = ($33 | 0) == 0;
    if ($tobool15) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $incdec_ptr = $incdec_ptr13 + 4 | 0;
    var $incdec_ptr13 = $incdec_ptr;
    var $17 = $33;
    label = 7;
    break;
   case 11:
    var $cmp27 = ($same_015 | 0) == ($samecycle | 0);
    if ($cmp27) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $f28 = $same_015 + 28 | 0;
    var $samecycle29 = $f28;
    var $34 = HEAP32[$samecycle29 >> 2];
    var $tobool = ($34 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      var $same_015 = $34;
      label = 3;
      break;
    }
   case 13:
    var $35 = HEAP32[5247036 >> 2];
    var $cmp31 = ($35 | 0) > 3;
    var $36 = HEAP32[$vertices >> 2];
    if ($cmp31) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $call33 = _qh_setsize($36);
    _qh_fprintf(5253004);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return $36;
  }
}
_qh_basevertices["X"] = 1;
function _qh_copynonconvex($atridge) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $top = $atridge + 4 | 0;
    var $0 = HEAP32[$top >> 2];
    var $bottom = $atridge + 8 | 0;
    var $1 = HEAP32[$bottom >> 2];
    var $ridges = $0 + 52 | 0;
    var $2 = HEAP32[$ridges >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $2 + 4 | 0;
    var $3 = $p;
    var $ridgep_0 = $3;
    label = 4;
    break;
   case 4:
    var $ridgep_0;
    var $incdec_ptr = $ridgep_0 + 4 | 0;
    var $4 = HEAP32[$ridgep_0 >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $top3 = $4 + 4 | 0;
    var $5 = HEAP32[$top3 >> 2];
    var $cmp = ($5 | 0) == ($0 | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $cond = $5;
      label = 7;
      break;
    }
   case 6:
    var $bottom4 = $4 + 8 | 0;
    var $6 = HEAP32[$bottom4 >> 2];
    var $cond = $6;
    label = 7;
    break;
   case 7:
    var $cond;
    var $cmp6 = ($1 | 0) != ($cond | 0);
    var $cmp7 = ($4 | 0) == ($atridge | 0);
    var $or_cond = $cmp6 | $cmp7;
    if ($or_cond) {
      var $ridgep_0 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = $4 + 12 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $10 = $9 | 67108864;
    HEAP32[$8 >> 2] = $10;
    var $11 = HEAP32[5247036 >> 2];
    var $cmp9 = ($11 | 0) > 3;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5289876);
    label = 10;
    break;
   case 10:
    return;
  }
}
function _qh_degen_redundant_facet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5287904);
    label = 4;
    break;
   case 4:
    var $neighbors = $facet + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      var $31 = 0;
      label = 20;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool327 = ($2 | 0) == 0;
    if ($tobool327) {
      var $31 = $1;
      label = 20;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2;
    var $incdec_ptr2629 = $p + 4 | 0;
    var $incdec_ptr26 = $incdec_ptr2629;
    var $vertices17 = $facet + 48 | 0;
    var $_pre2 = HEAP32[5249156 >> 2];
    var $incdec_ptr28 = $incdec_ptr26;
    var $6 = $3;
    var $5 = $_pre2;
    label = 8;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr28 + 4 | 0;
    var $4 = HEAP32[$incdec_ptr28 >> 2];
    var $tobool3 = ($4 | 0) == 0;
    if ($tobool3) {
      label = 19;
      break;
    } else {
      var $incdec_ptr28 = $incdec_ptr;
      var $6 = $4;
      var $5 = $27;
      label = 8;
      break;
    }
   case 8:
    var $5;
    var $6;
    var $incdec_ptr28;
    var $inc = $5 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $7 = $5 & -2147483648;
    var $8 = $bf_value | $7;
    HEAP32[5249156 >> 2] = $8;
    var $vertices = $6 + 48 | 0;
    var $9 = HEAP32[$vertices >> 2];
    var $tobool4 = ($9 | 0) == 0;
    if ($tobool4) {
      label = 13;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p9 = $9 + 4 | 0;
    var $10 = HEAP32[$p9 >> 2];
    var $tobool1220 = ($10 | 0) == 0;
    if ($tobool1220) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $11 = $10;
    var $12 = $p9;
    var $vertexp_021 = $12;
    var $14 = $11;
    var $13 = $8;
    label = 11;
    break;
   case 11:
    var $13;
    var $14;
    var $vertexp_021;
    var $incdec_ptr11 = $vertexp_021 + 4 | 0;
    var $bf_clear14 = $13 & 2147483647;
    var $15 = $14 + 16 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 & -2147483648;
    var $19 = $18 | $bf_clear14;
    HEAP32[$16 >> 2] = $19;
    var $20 = HEAP32[$incdec_ptr11 >> 2];
    var $tobool12 = ($20 | 0) == 0;
    if ($tobool12) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre3 = HEAP32[5249156 >> 2];
    var $vertexp_021 = $incdec_ptr11;
    var $14 = $20;
    var $13 = $_pre3;
    label = 11;
    break;
   case 13:
    var $21 = HEAP32[$vertices17 >> 2];
    var $tobool18 = ($21 | 0) == 0;
    if ($tobool18) {
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p23 = $21 + 4 | 0;
    var $22 = $p23;
    var $vertexp_1 = $22;
    label = 15;
    break;
   case 15:
    var $vertexp_1;
    var $23 = HEAP32[$vertexp_1 >> 2];
    var $tobool26 = ($23 | 0) == 0;
    if ($tobool26) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $incdec_ptr25 = $vertexp_1 + 4 | 0;
    var $24 = $23 + 16 | 0;
    var $25 = $24;
    var $26 = HEAP32[$25 >> 2];
    var $27 = HEAP32[5249156 >> 2];
    var $28 = $27 ^ $26;
    var $29 = $28 & 2147483647;
    var $cmp31 = ($29 | 0) == 0;
    if ($cmp31) {
      var $vertexp_1 = $incdec_ptr25;
      label = 15;
      break;
    } else {
      label = 7;
      break;
    }
   case 17:
    _qh_appendmergeset($facet, $6, 7, 0);
    var $30 = HEAP32[5247036 >> 2];
    var $cmp38 = ($30 | 0) > 1;
    if ($cmp38) {
      label = 18;
      break;
    } else {
      label = 23;
      break;
    }
   case 18:
    _qh_fprintf(5285796);
    label = 23;
    break;
   case 19:
    var $_pre = HEAP32[$neighbors >> 2];
    var $31 = $_pre;
    label = 20;
    break;
   case 20:
    var $31;
    var $call = _qh_setsize($31);
    var $32 = HEAP32[5247504 >> 2];
    var $cmp47 = ($call | 0) < ($32 | 0);
    if ($cmp47) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    _qh_appendmergeset($facet, $facet, 6, 0);
    var $33 = HEAP32[5247036 >> 2];
    var $cmp49 = ($33 | 0) > 1;
    if ($cmp49) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5284084);
    label = 23;
    break;
   case 23:
    return;
  }
}
_qh_degen_redundant_facet["X"] = 1;
function _qh_find_newvertex($oldvertex, $vertices, $ridges) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $newridges = __stackBase__;
    var $hash = __stackBase__ + 4;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    _qh_fprintf(5277528);
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p = $vertices + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool277 = ($1 | 0) == 0;
    if ($tobool277) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = $p;
    var $vertexp_078 = $2;
    label = 6;
    break;
   case 6:
    var $vertexp_078;
    var $incdec_ptr = $vertexp_078 + 4 | 0;
    _qh_fprintf(5295392);
    var $3 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      var $vertexp_078 = $incdec_ptr;
      label = 6;
      break;
    }
   case 7:
    var $tobool5 = ($ridges | 0) == 0;
    if ($tobool5) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p9 = $ridges + 4 | 0;
    var $4 = HEAP32[$p9 >> 2];
    var $tobool1275 = ($4 | 0) == 0;
    if ($tobool1275) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $5 = $p9;
    var $ridgep_076 = $5;
    label = 10;
    break;
   case 10:
    var $ridgep_076;
    var $incdec_ptr11 = $ridgep_076 + 4 | 0;
    _qh_fprintf(5276200);
    var $6 = HEAP32[$incdec_ptr11 >> 2];
    var $tobool12 = ($6 | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      var $ridgep_076 = $incdec_ptr11;
      label = 10;
      break;
    }
   case 11:
    _qh_fprintf(5299656);
    label = 12;
    break;
   case 12:
    var $tobool19 = ($vertices | 0) != 0;
    if ($tobool19) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $p23 = $vertices + 4 | 0;
    var $7 = HEAP32[$p23 >> 2];
    var $tobool2673 = ($7 | 0) == 0;
    if ($tobool2673) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $8 = $7;
    var $9 = $p23;
    var $vertexp_174 = $9;
    var $10 = $8;
    label = 15;
    break;
   case 15:
    var $10;
    var $vertexp_174;
    var $incdec_ptr25 = $vertexp_174 + 4 | 0;
    var $11 = $10 + 16 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $14 = $13 & -2147483648;
    HEAP32[$12 >> 2] = $14;
    var $15 = HEAP32[$incdec_ptr25 >> 2];
    var $tobool26 = ($15 | 0) == 0;
    if ($tobool26) {
      label = 16;
      break;
    } else {
      var $vertexp_174 = $incdec_ptr25;
      var $10 = $15;
      label = 15;
      break;
    }
   case 16:
    var $tobool31 = ($ridges | 0) != 0;
    if ($tobool31) {
      label = 17;
      break;
    } else {
      label = 24;
      break;
    }
   case 17:
    var $p35 = $ridges + 4 | 0;
    var $16 = HEAP32[$p35 >> 2];
    var $tobool3871 = ($16 | 0) == 0;
    if ($tobool3871) {
      label = 24;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $17 = $16;
    var $incdec_ptr377085 = $p35 + 4 | 0;
    var $incdec_ptr3770 = $incdec_ptr377085;
    var $incdec_ptr3772 = $incdec_ptr3770;
    var $18 = $17;
    label = 19;
    break;
   case 19:
    var $18;
    var $incdec_ptr3772;
    var $vertices40 = $18 | 0;
    var $19 = HEAP32[$vertices40 >> 2];
    var $tobool41 = ($19 | 0) == 0;
    if ($tobool41) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $incdec_ptr37 = $incdec_ptr3772 + 4 | 0;
    var $20 = HEAP32[$incdec_ptr3772 >> 2];
    var $tobool38 = ($20 | 0) == 0;
    if ($tobool38) {
      label = 24;
      break;
    } else {
      var $incdec_ptr3772 = $incdec_ptr37;
      var $18 = $20;
      label = 19;
      break;
    }
   case 21:
    var $p46 = $19 + 4 | 0;
    var $21 = HEAP32[$p46 >> 2];
    var $tobool4968 = ($21 | 0) == 0;
    if ($tobool4968) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $22 = $21;
    var $23 = $p46;
    var $vertexp_269 = $23;
    var $24 = $22;
    label = 23;
    break;
   case 23:
    var $24;
    var $vertexp_269;
    var $incdec_ptr48 = $vertexp_269 + 4 | 0;
    var $25 = $24 + 16 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $inc = $27 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $28 = $27 & -2147483648;
    var $29 = $bf_value | $28;
    HEAP32[$26 >> 2] = $29;
    var $30 = HEAP32[$incdec_ptr48 >> 2];
    var $tobool49 = ($30 | 0) == 0;
    if ($tobool49) {
      label = 20;
      break;
    } else {
      var $vertexp_269 = $incdec_ptr48;
      var $24 = $30;
      label = 23;
      break;
    }
   case 24:
    if ($tobool19) {
      label = 25;
      break;
    } else {
      label = 31;
      break;
    }
   case 25:
    var $e60 = $vertices + 4 | 0;
    var $31 = $e60;
    var $32 = HEAP32[$31 >> 2];
    var $tobool656780 = ($32 | 0) == 0;
    if ($tobool656780) {
      label = 31;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $incdec_ptr647984 = $vertices + 8 | 0;
    var $incdec_ptr6479 = $incdec_ptr647984;
    var $p73 = $vertices + 8 | 0;
    var $sub_ptr_rhs_cast = $p73;
    var $vertexp_3_ph81 = $31;
    var $incdec_ptr6482 = $incdec_ptr6479;
    var $34 = $32;
    label = 28;
    break;
   case 27:
    var $incdec_ptr64 = $incdec_ptr6482 + 4 | 0;
    var $33 = HEAP32[$incdec_ptr6482 >> 2];
    var $tobool6567 = ($33 | 0) == 0;
    if ($tobool6567) {
      label = 31;
      break;
    } else {
      var $vertexp_3_ph81 = $incdec_ptr6482;
      var $incdec_ptr6482 = $incdec_ptr64;
      var $34 = $33;
      label = 28;
      break;
    }
   case 28:
    var $34;
    var $incdec_ptr6482;
    var $vertexp_3_ph81;
    var $sub_ptr_lhs_cast = $incdec_ptr6482;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $35 = $34;
    label = 29;
    break;
   case 29:
    var $35;
    var $36 = $35 + 16 | 0;
    var $37 = $36;
    var $38 = HEAP32[$37 >> 2];
    var $bf_clear68 = $38 & 2147483647;
    var $tobool69 = ($bf_clear68 | 0) == 0;
    if ($tobool69) {
      label = 30;
      break;
    } else {
      label = 27;
      break;
    }
   case 30:
    var $call = _qh_setdelnth($vertices, $sub_ptr_div);
    var $39 = HEAP32[$vertexp_3_ph81 >> 2];
    var $tobool65 = ($39 | 0) == 0;
    if ($tobool65) {
      label = 31;
      break;
    } else {
      var $35 = $39;
      label = 29;
      break;
    }
   case 31:
    var $call78 = _qh_setsize($ridges);
    var $40 = HEAP32[5249156 >> 2];
    var $add = $40 + $call78 | 0;
    var $bf_value80 = $add & 2147483647;
    var $41 = $40 & -2147483648;
    var $42 = $bf_value80 | $41;
    HEAP32[5249156 >> 2] = $42;
    var $call81 = _qh_setsize($vertices);
    var $tobool82 = ($call81 | 0) == 0;
    if ($tobool82) {
      label = 32;
      break;
    } else {
      label = 34;
      break;
    }
   case 32:
    var $43 = HEAP32[5247036 >> 2];
    var $cmp84 = ($43 | 0) > 3;
    if ($cmp84) {
      label = 33;
      break;
    } else {
      var $retval_0 = 0;
      label = 56;
      break;
    }
   case 33:
    _qh_fprintf(5275340);
    var $retval_0 = 0;
    label = 56;
    break;
   case 34:
    var $p92 = $vertices + 4 | 0;
    var $44 = $p92;
    var $call93 = _qh_setsize($vertices);
    _qsort($44, $call93, 4, 8);
    var $45 = HEAP32[5247312 >> 2];
    var $tobool94 = ($45 | 0) == 0;
    if ($tobool94) {
      label = 37;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $call96 = _qh_setsize($vertices);
    var $46 = HEAP32[5243824 >> 2];
    var $inc97 = $46 + 1 | 0;
    HEAP32[5243824 >> 2] = $inc97;
    var $47 = HEAP32[5243856 >> 2];
    var $add98 = $47 + $call96 | 0;
    HEAP32[5243856 >> 2] = $add98;
    var $48 = HEAP32[5243840 >> 2];
    var $cmp99 = ($48 | 0) < ($call96 | 0);
    if ($cmp99) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    HEAP32[5243840 >> 2] = $call96;
    label = 37;
    break;
   case 37:
    var $call103 = _qh_setsize($ridges);
    var $call104 = _qh_newhashtable($call103);
    if ($tobool31) {
      label = 38;
      break;
    } else {
      label = 41;
      break;
    }
   case 38:
    var $p109 = $ridges + 4 | 0;
    var $49 = HEAP32[$p109 >> 2];
    var $tobool11264 = ($49 | 0) == 0;
    if ($tobool11264) {
      label = 41;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $50 = $49;
    var $51 = $p109;
    var $ridgep_265 = $51;
    var $52 = $50;
    label = 40;
    break;
   case 40:
    var $52;
    var $ridgep_265;
    var $incdec_ptr111 = $ridgep_265 + 4 | 0;
    var $53 = HEAP32[5249176 >> 2];
    _qh_hashridge($53, $call104, $52, $oldvertex);
    var $54 = HEAP32[$incdec_ptr111 >> 2];
    var $tobool112 = ($54 | 0) == 0;
    if ($tobool112) {
      label = 41;
      break;
    } else {
      var $ridgep_265 = $incdec_ptr111;
      var $52 = $54;
      label = 40;
      break;
    }
   case 41:
    if ($tobool19) {
      label = 42;
      break;
    } else {
      label = 53;
      break;
    }
   case 42:
    var $55 = HEAP32[$p92 >> 2];
    var $tobool12362 = ($55 | 0) == 0;
    if ($tobool12362) {
      label = 53;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $56 = $55;
    var $incdec_ptr1226183 = $p92 + 4 | 0;
    var $incdec_ptr12261 = $incdec_ptr1226183;
    var $incdec_ptr12263 = $incdec_ptr12261;
    var $57 = $56;
    label = 44;
    break;
   case 44:
    var $57;
    var $incdec_ptr12263;
    var $call125 = _qh_vertexridges($57);
    HEAP32[$newridges >> 2] = $call125;
    var $tobool126 = ($call125 | 0) == 0;
    if ($tobool126) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _qh_settempfree($newridges);
    label = 51;
    break;
   case 46:
    var $p130 = $call125 + 4 | 0;
    var $58 = $p130;
    var $ridgep_3 = $58;
    label = 47;
    break;
   case 47:
    var $ridgep_3;
    var $59 = HEAP32[$ridgep_3 >> 2];
    var $tobool133 = ($59 | 0) == 0;
    if ($tobool133) {
      label = 50;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $incdec_ptr132 = $ridgep_3 + 4 | 0;
    var $60 = HEAP32[5249176 >> 2];
    var $call135 = _qh_hashridge_find($60, $call104, $59, $57, $oldvertex, $hash);
    var $tobool136 = ($call135 | 0) == 0;
    if ($tobool136) {
      var $ridgep_3 = $incdec_ptr132;
      label = 47;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $61 = HEAP32[5243608 >> 2];
    var $inc138 = $61 + 1 | 0;
    HEAP32[5243608 >> 2] = $inc138;
    _qh_settempfree($newridges);
    var $incdec_ptr122 = $incdec_ptr12263 + 4 | 0;
    var $62 = HEAP32[$incdec_ptr12263 >> 2];
    var $tobool123 = ($62 | 0) == 0;
    if ($tobool123) {
      label = 53;
      break;
    } else {
      var $incdec_ptr12263 = $incdec_ptr122;
      var $57 = $62;
      label = 44;
      break;
    }
   case 50:
    _qh_settempfree($newridges);
    var $tobool147 = ($57 | 0) == 0;
    if ($tobool147) {
      label = 53;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $63 = HEAP32[5247036 >> 2];
    var $cmp149 = ($63 | 0) > 1;
    if ($cmp149) {
      label = 52;
      break;
    } else {
      var $vertex_055 = $57;
      label = 55;
      break;
    }
   case 52:
    var $call155 = _qh_setsize($vertices);
    var $call156 = _qh_setsize($ridges);
    _qh_fprintf(5274760);
    var $vertex_055 = $57;
    label = 55;
    break;
   case 53:
    var $64 = HEAP32[5243688 >> 2];
    var $inc158 = $64 + 1 | 0;
    HEAP32[5243688 >> 2] = $inc158;
    var $65 = HEAP32[5247036 >> 2];
    var $tobool159 = ($65 | 0) == 0;
    if ($tobool159) {
      var $vertex_055 = 0;
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    _qh_fprintf(5273932);
    var $vertex_055 = 0;
    label = 55;
    break;
   case 55:
    var $vertex_055;
    _qh_setfree(5249176);
    var $retval_0 = $vertex_055;
    label = 56;
    break;
   case 56:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_find_newvertex["X"] = 1;
function _qh_hashridge($hashtable, $hashsize, $ridge, $oldvertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = $ridge | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $1 = HEAP32[5247504 >> 2];
    var $sub = $1 - 1 | 0;
    var $2 = $oldvertex;
    var $call = _qh_gethash($hashsize, $0, $sub, 0, $2);
    var $p8 = $hashtable + 4 + ($call << 2) | 0;
    var $3 = HEAP32[$p8 >> 2];
    var $tobool9 = ($3 | 0) == 0;
    if ($tobool9) {
      var $p_lcssa = $p8;
      label = 3;
      break;
    } else {
      var $hash_010 = $call;
      var $5 = $3;
      label = 4;
      break;
    }
   case 3:
    var $p_lcssa;
    var $4 = $ridge;
    HEAP32[$p_lcssa >> 2] = $4;
    label = 6;
    break;
   case 4:
    var $5;
    var $hash_010;
    var $6 = $5;
    var $cmp = ($6 | 0) == ($ridge | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $inc = $hash_010 + 1 | 0;
    var $cmp6 = ($inc | 0) == ($hashsize | 0);
    var $_inc = $cmp6 ? 0 : $inc;
    var $p = $hashtable + 4 + ($_inc << 2) | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool = ($7 | 0) == 0;
    if ($tobool) {
      var $p_lcssa = $p;
      label = 3;
      break;
    } else {
      var $hash_010 = $_inc;
      var $5 = $7;
      label = 4;
      break;
    }
   case 6:
    return;
  }
}
function _qh_vertexridges($vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ridges = __stackBase__;
    var $0 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($0);
    HEAP32[$ridges >> 2] = $call;
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $neighbors = $vertex + 12 | 0;
    var $2 = HEAP32[$neighbors >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool216 = ($3 | 0) == 0;
    if ($tobool216) {
      var $_pr4 = $2;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = $3;
    var $5 = $p;
    var $neighborp_017 = $5;
    var $7 = $4;
    var $6 = $inc;
    label = 5;
    break;
   case 5:
    var $6;
    var $7;
    var $neighborp_017;
    var $incdec_ptr = $neighborp_017 + 4 | 0;
    var $visitid = $7 + 68 | 0;
    HEAP32[$visitid >> 2] = $6;
    var $8 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($8 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $_pre2 = HEAP32[5249152 >> 2];
    var $neighborp_017 = $incdec_ptr;
    var $7 = $8;
    var $6 = $_pre2;
    label = 5;
    break;
   case 7:
    var $_pr_pre = HEAP32[$neighbors >> 2];
    var $tobool4 = ($_pr_pre | 0) == 0;
    if ($tobool4) {
      label = 12;
      break;
    } else {
      var $_pr4 = $_pr_pre;
      label = 8;
      break;
    }
   case 8:
    var $_pr4;
    var $p9 = $_pr4 + 4 | 0;
    var $9 = HEAP32[$p9 >> 2];
    var $tobool1214 = ($9 | 0) == 0;
    if ($tobool1214) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $10 = $9;
    var $incdec_ptr111318 = $p9 + 4 | 0;
    var $incdec_ptr1113 = $incdec_ptr111318;
    var $incdec_ptr1115 = $incdec_ptr1113;
    var $11 = $10;
    label = 10;
    break;
   case 10:
    var $11;
    var $incdec_ptr1115;
    var $12 = HEAP32[$incdec_ptr1115 >> 2];
    var $tobool14 = ($12 | 0) == 0;
    if ($tobool14) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _qh_vertexridges_facet($vertex, $11, $ridges);
    var $_pr19 = HEAP32[$incdec_ptr1115 >> 2];
    var $incdec_ptr11 = $incdec_ptr1115 + 4 | 0;
    var $tobool12 = ($_pr19 | 0) == 0;
    if ($tobool12) {
      label = 12;
      break;
    } else {
      var $incdec_ptr1115 = $incdec_ptr11;
      var $11 = $_pr19;
      label = 10;
      break;
    }
   case 12:
    var $13 = HEAP32[5247312 >> 2];
    var $14 = HEAP32[5247036 >> 2];
    var $15 = $14 | $13;
    var $16 = ($15 | 0) == 0;
    var $_pre = HEAP32[$ridges >> 2];
    if ($16) {
      var $21 = $_pre;
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $call22 = _qh_setsize($_pre);
    var $17 = HEAP32[5244688 >> 2];
    var $inc23 = $17 + 1 | 0;
    HEAP32[5244688 >> 2] = $inc23;
    var $18 = HEAP32[5244696 >> 2];
    var $add = $18 + $call22 | 0;
    HEAP32[5244696 >> 2] = $add;
    var $19 = HEAP32[5244704 >> 2];
    var $cmp = ($19 | 0) < ($call22 | 0);
    if ($cmp) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5244704 >> 2] = $call22;
    label = 15;
    break;
   case 15:
    var $20 = HEAP32[5247036 >> 2];
    var $cmp26 = ($20 | 0) > 2;
    if ($cmp26) {
      label = 16;
      break;
    } else {
      var $21 = $_pre;
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5296720);
    var $21 = $_pre;
    label = 17;
    break;
   case 17:
    var $21;
    STACKTOP = __stackBase__;
    return $21;
  }
}
_qh_vertexridges["X"] = 1;
function _qh_hashridge_find($hashtable, $hashsize, $ridge, $vertex, $oldvertex, $hashslot) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[$hashslot >> 2] = 0;
    var $0 = HEAP32[5243792 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5243792 >> 2] = $inc;
    var $vertices = $ridge | 0;
    var $1 = HEAP32[$vertices >> 2];
    var $2 = HEAP32[5247504 >> 2];
    var $sub = $2 - 1 | 0;
    var $3 = $vertex;
    var $call = _qh_gethash($hashsize, $1, $sub, 0, $3);
    var $p14 = $hashtable + 4 + ($call << 2) | 0;
    var $4 = HEAP32[$p14 >> 2];
    var $tobool15 = ($4 | 0) == 0;
    if ($tobool15) {
      var $hash_0_lcssa = $call;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $oldvertex;
    var $hash_016 = $call;
    var $_in = $4;
    label = 4;
    break;
   case 4:
    var $_in;
    var $hash_016;
    var $6 = $_in;
    var $cmp = ($6 | 0) == ($ridge | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$hashslot >> 2] = -1;
    label = 7;
    break;
   case 6:
    var $7 = HEAP32[5243800 >> 2];
    var $inc1 = $7 + 1 | 0;
    HEAP32[5243800 >> 2] = $inc1;
    var $8 = HEAP32[$vertices >> 2];
    var $vertices3 = $_in;
    var $9 = HEAP32[$vertices3 >> 2];
    var $call4 = _qh_setequal_except($8, $3, $9, $5);
    var $tobool5 = ($call4 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      var $retval_0 = $6;
      label = 10;
      break;
    }
   case 7:
    var $inc8 = $hash_016 + 1 | 0;
    var $cmp9 = ($inc8 | 0) == ($hashsize | 0);
    var $_inc8 = $cmp9 ? 0 : $inc8;
    var $p = $hashtable + 4 + ($_inc8 << 2) | 0;
    var $10 = HEAP32[$p >> 2];
    var $tobool = ($10 | 0) == 0;
    if ($tobool) {
      var $hash_0_lcssa = $_inc8;
      label = 8;
      break;
    } else {
      var $hash_016 = $_inc8;
      var $_in = $10;
      label = 4;
      break;
    }
   case 8:
    var $hash_0_lcssa;
    var $11 = HEAP32[$hashslot >> 2];
    var $tobool12 = ($11 | 0) == 0;
    if ($tobool12) {
      label = 9;
      break;
    } else {
      var $retval_0 = 0;
      label = 10;
      break;
    }
   case 9:
    HEAP32[$hashslot >> 2] = $hash_0_lcssa;
    var $retval_0 = 0;
    label = 10;
    break;
   case 10:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_findbest_test($testcentrum, $facet, $neighbor, $bestfacet, $distp, $mindistp, $maxdistp) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $mindist = __stackBase__ + 8;
    var $maxdist = __stackBase__ + 16;
    var $tobool = ($testcentrum | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5243128 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5243128 >> 2] = $inc;
    var $center = $facet + 36 | 0;
    var $1 = HEAP32[$center >> 2];
    _qh_distplane($1, $neighbor, $dist);
    var $2 = HEAP32[5247504 >> 2];
    var $conv = $2 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $3 * $conv;
    HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp = $mul < 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$maxdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$mindist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub = -$mul;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $4 = $sub;
    label = 7;
    break;
   case 5:
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$mindist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$maxdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $4 = $mul;
    label = 7;
    break;
   case 6:
    var $call = _qh_getdistance($facet, $neighbor, $mindist, $maxdist);
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[$dist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $4 = $call;
    label = 7;
    break;
   case 7:
    var $4;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$distp >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$distp + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp5 = $4 < $5;
    if ($cmp5) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[$bestfacet >> 2] = $neighbor;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $6, HEAP32[$mindistp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$mindistp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $7, HEAP32[$maxdistp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxdistp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $4, HEAP32[$distp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$distp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_findbestneighbor($facet, $distp, $mindistp, $maxdistp) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bestfacet = __stackBase__;
    HEAP32[$bestfacet >> 2] = 0;
    var $vertices = $facet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $call = _qh_setsize($0);
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[$distp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$distp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $1 = HEAP32[5247504 >> 2];
    var $mul = $1 << 1;
    var $add = $mul + 20 | 0;
    var $cmp = ($call | 0) > ($add | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $testcentrum_0 = 0;
      var $4 = $1;
      label = 5;
      break;
    }
   case 3:
    var $2 = HEAP32[5243120 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5243120 >> 2] = $inc;
    var $center = $facet + 36 | 0;
    var $3 = HEAP32[$center >> 2];
    var $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $testcentrum_0 = 1;
      var $4 = $1;
      label = 5;
      break;
    }
   case 4:
    var $call2 = _qh_getcentrum($facet);
    HEAP32[$center >> 2] = $call2;
    var $_pre = HEAP32[5247504 >> 2];
    var $testcentrum_0 = 1;
    var $4 = $_pre;
    label = 5;
    break;
   case 5:
    var $4;
    var $testcentrum_0;
    var $add5 = $4 + 15 | 0;
    var $cmp6 = ($call | 0) > ($add5 | 0);
    if ($cmp6) {
      label = 6;
      break;
    } else {
      label = 15;
      break;
    }
   case 6:
    var $ridges = $facet + 52 | 0;
    var $5 = HEAP32[$ridges >> 2];
    var $tobool8 = ($5 | 0) == 0;
    if ($tobool8) {
      label = 15;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $5 + 4 | 0;
    var $6 = HEAP32[$p >> 2];
    var $tobool1136 = ($6 | 0) == 0;
    if ($tobool1136) {
      label = 15;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = $6;
    var $incdec_ptr3538 = $p + 4 | 0;
    var $incdec_ptr35 = $incdec_ptr3538;
    var $incdec_ptr37 = $incdec_ptr35;
    var $8 = $7;
    label = 9;
    break;
   case 9:
    var $8;
    var $incdec_ptr37;
    var $9 = $8 + 12 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $bf_clear = $11 & 67108864;
    var $tobool12 = ($bf_clear | 0) == 0;
    if ($tobool12) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $top = $8 + 4 | 0;
    var $12 = HEAP32[$top >> 2];
    var $cmp14 = ($12 | 0) == ($facet | 0);
    if ($cmp14) {
      label = 11;
      break;
    } else {
      var $cond = $12;
      label = 12;
      break;
    }
   case 11:
    var $bottom = $8 + 8 | 0;
    var $13 = HEAP32[$bottom >> 2];
    var $cond = $13;
    label = 12;
    break;
   case 12:
    var $cond;
    _qh_findbest_test($testcentrum_0, $facet, $cond, $bestfacet, $distp, $mindistp, $maxdistp);
    label = 13;
    break;
   case 13:
    var $incdec_ptr = $incdec_ptr37 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr37 >> 2];
    var $tobool11 = ($14 | 0) == 0;
    if ($tobool11) {
      label = 14;
      break;
    } else {
      var $incdec_ptr37 = $incdec_ptr;
      var $8 = $14;
      label = 9;
      break;
    }
   case 14:
    var $_pre1 = HEAP32[$bestfacet >> 2];
    var $tobool19 = ($_pre1 | 0) == 0;
    if ($tobool19) {
      label = 15;
      break;
    } else {
      var $21 = $_pre1;
      label = 21;
      break;
    }
   case 15:
    var $neighbors = $facet + 56 | 0;
    var $15 = HEAP32[$neighbors >> 2];
    var $tobool21 = ($15 | 0) == 0;
    if ($tobool21) {
      label = 20;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $p26 = $15 + 4 | 0;
    var $16 = HEAP32[$p26 >> 2];
    var $tobool2933 = ($16 | 0) == 0;
    if ($tobool2933) {
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $17 = $16;
    var $18 = $p26;
    var $neighborp_034 = $18;
    var $19 = $17;
    label = 18;
    break;
   case 18:
    var $19;
    var $neighborp_034;
    var $incdec_ptr28 = $neighborp_034 + 4 | 0;
    _qh_findbest_test($testcentrum_0, $facet, $19, $bestfacet, $distp, $mindistp, $maxdistp);
    var $20 = HEAP32[$incdec_ptr28 >> 2];
    var $tobool29 = ($20 | 0) == 0;
    if ($tobool29) {
      label = 19;
      break;
    } else {
      var $neighborp_034 = $incdec_ptr28;
      var $19 = $20;
      label = 18;
      break;
    }
   case 19:
    var $_pr_pre = HEAP32[$bestfacet >> 2];
    var $tobool34 = ($_pr_pre | 0) == 0;
    if ($tobool34) {
      label = 20;
      break;
    } else {
      var $21 = $_pr_pre;
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5273372);
    _qh_errexit(5, $facet, 0);
    var $21 = 0;
    label = 21;
    break;
   case 21:
    var $21;
    var $tobool37 = ($testcentrum_0 | 0) == 0;
    if ($tobool37) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $call39 = _qh_getdistance($facet, $21, $mindistp, $maxdistp);
    label = 23;
    break;
   case 23:
    var $22 = HEAP32[5247036 >> 2];
    var $cmp41 = ($22 | 0) > 2;
    if ($cmp41) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5272824);
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return $21;
  }
}
_qh_findbestneighbor["X"] = 1;
function _qh_mergefacet($facet1, $facet2, $mindist, $maxdist, $mergeapex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet1 + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 512;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $3 = $facet2 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear2 = $5 & 512;
    var $tobool3 = ($bf_clear2 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[5247452 >> 2];
    var $tobool4 = ($6 | 0) == 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5255028);
    _qh_errexit2(5, $facet1, $facet2);
    label = 6;
    break;
   case 6:
    var $7 = $facet2 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $bf_clear7 = $9 & 512;
    var $tobool8 = ($bf_clear7 | 0) == 0;
    if ($tobool8) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $10 = $9 & -268435969;
    HEAP32[$8 >> 2] = $10;
    label = 8;
    break;
   case 8:
    var $11 = HEAP32[5244576 >> 2];
    var $inc = $11 + 1 | 0;
    HEAP32[5244576 >> 2] = $inc;
    var $12 = HEAP32[5247372 >> 2];
    var $tobool14 = ($12 | 0) != 0;
    var $13 = HEAP32[5249120 >> 2];
    var $tobool15 = ($13 | 0) != 0;
    var $or_cond = $tobool14 & $tobool15;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $14 = HEAP32[5249256 >> 2];
    var $add = $14 + $12 | 0;
    var $cmp = ($inc | 0) > ($add | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_tracemerging();
    label = 11;
    break;
   case 11:
    var $15 = HEAP32[5249028 >> 2];
    var $16 = HEAP32[5247376 >> 2];
    var $cmp20 = ($15 | 0) < ($16 | 0);
    if ($cmp20) {
      var $traceonce_0 = 0;
      var $tracerestore_0 = 0;
      label = 18;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $tobool22 = ($mindist | 0) == 0;
    if ($tobool22) {
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$17;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp24 = $18 < $sub;
    if ($cmp24) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp26 = $19 > $18;
    if ($cmp26) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $20 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $20;
    _qh_fprintf(5254796);
    var $traceonce_0 = 1;
    var $tracerestore_0 = 0;
    label = 18;
    break;
   case 16:
    var $21 = HEAP32[5248968 >> 2];
    var $cmp32 = ($21 | 0) == ($facet1 | 0);
    var $cmp34 = ($21 | 0) == ($facet2 | 0);
    var $or_cond87 = $cmp32 | $cmp34;
    if ($or_cond87) {
      label = 17;
      break;
    } else {
      var $traceonce_0 = 0;
      var $tracerestore_0 = 0;
      label = 18;
      break;
    }
   case 17:
    var $22 = HEAP32[5247036 >> 2];
    HEAP32[5247036 >> 2] = 4;
    _qh_fprintf(5254396);
    var $traceonce_0 = 1;
    var $tracerestore_0 = $22;
    label = 18;
    break;
   case 18:
    var $tracerestore_0;
    var $traceonce_0;
    var $23 = HEAP32[5247036 >> 2];
    var $cmp39 = ($23 | 0) > 1;
    if ($cmp39) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _qh_fprintf(5254180);
    label = 20;
    break;
   case 20:
    var $cmp47 = ($facet1 | 0) == ($facet2 | 0);
    if ($cmp47) {
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $24 = HEAP32[$1 >> 2];
    var $bf_clear50 = $24 & 2048;
    var $tobool51 = ($bf_clear50 | 0) == 0;
    if ($tobool51) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $25 = $facet2 + 76 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $bf_clear54 = $27 & 2048;
    var $tobool55 = ($bf_clear54 | 0) == 0;
    if ($tobool55) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    _qh_fprintf(5253756);
    _qh_errexit2(5, $facet1, $facet2);
    label = 24;
    break;
   case 24:
    var $28 = HEAP32[5248992 >> 2];
    var $29 = HEAP32[5248960 >> 2];
    var $sub60 = $28 - $29 | 0;
    var $30 = HEAP32[5247504 >> 2];
    var $add61 = $30 + 1 | 0;
    var $cmp62 = ($sub60 | 0) > ($add61 | 0);
    if ($cmp62) {
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_fprintf(5253480);
    var $31 = HEAP32[5247504 >> 2];
    var $cmp65 = ($31 | 0) < 5;
    var $32 = HEAP32[5247072 >> 2];
    var $tobool67 = ($32 | 0) != 0;
    var $or_cond1 = $cmp65 | $tobool67;
    if ($or_cond1) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    _qh_fprintf(5253296);
    label = 27;
    break;
   case 27:
    _qh_errexit(3, 0, 0);
    label = 28;
    break;
   case 28:
    var $33 = HEAP32[5248576 >> 2];
    var $tobool71 = ($33 | 0) == 0;
    if ($tobool71) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_vertexneighbors();
    label = 30;
    break;
   case 30:
    _qh_makeridges($facet1);
    _qh_makeridges($facet2);
    var $34 = HEAP32[5247036 >> 2];
    var $cmp74 = ($34 | 0) > 3;
    if ($cmp74) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    _qh_errprint($facet1, $facet2, 0, 0);
    label = 32;
    break;
   case 32:
    var $tobool77 = ($mindist | 0) == 0;
    if ($tobool77) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $_phi_trans_insert = $facet2 + 76 | 0;
    var $_phi_trans_insert3 = $_phi_trans_insert;
    var $_pre4 = HEAP32[$_phi_trans_insert3 >> 2];
    var $51 = $_pre4;
    label = 46;
    break;
   case 34:
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp79 = $35 < $36;
    if ($cmp79) {
      label = 35;
      break;
    } else {
      var $37 = $36;
      label = 36;
      break;
    }
   case 35:
    HEAPF64[tempDoublePtr >> 3] = $36, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $_pre1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $37 = $_pre1;
    label = 36;
    break;
   case 36:
    var $37;
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249072 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249076 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp82 = $38 < $37;
    if ($cmp82) {
      label = 37;
      break;
    } else {
      var $39 = $37;
      label = 38;
      break;
    }
   case 37:
    HEAPF64[tempDoublePtr >> 3] = $37, HEAP32[5249072 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249076 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $_pre2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $39 = $_pre2;
    label = 38;
    break;
   case 38:
    var $39;
    var $maxoutside = $facet2 + 8 | 0;
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp85 = $40 < $39;
    if ($cmp85) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAPF64[tempDoublePtr >> 3] = $39, HEAP32[$maxoutside >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxoutside + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 40;
    break;
   case 40:
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp89 = $41 > $42;
    if ($cmp89) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAPF64[tempDoublePtr >> 3] = $42, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 42;
    break;
   case 42:
    var $43 = $facet2 + 76 | 0;
    var $44 = $43;
    var $45 = HEAP32[$44 >> 2];
    var $bf_clear93 = $45 & 268435456;
    var $tobool94 = ($bf_clear93 | 0) == 0;
    if ($tobool94) {
      label = 43;
      break;
    } else {
      var $51 = $45;
      label = 46;
      break;
    }
   case 43:
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248736 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248740 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp96 = $46 > $47;
    if ($cmp96) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mindist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mindist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub98 = -$47;
    var $cmp99 = $48 < $sub98;
    if ($cmp99) {
      label = 45;
      break;
    } else {
      var $51 = $45;
      label = 46;
      break;
    }
   case 45:
    var $49 = $45 | 268435456;
    HEAP32[$44 >> 2] = $49;
    var $50 = HEAP32[5244784 >> 2];
    var $inc102 = $50 + 1 | 0;
    HEAP32[5244784 >> 2] = $inc102;
    var $51 = $49;
    label = 46;
    break;
   case 46:
    var $51;
    var $52 = HEAP32[$1 >> 2];
    var $bf_clear106 = $52 & 511;
    var $53 = $facet2 + 76 | 0;
    var $54 = $53;
    var $bf_clear108 = $51 & 511;
    var $add109 = $bf_clear106 + 1 | 0;
    var $add110 = $add109 + $bf_clear108 | 0;
    var $cmp111 = ($add110 | 0) > 510;
    if ($cmp111) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $55 = $51 | 511;
    var $storemerge = $55;
    label = 49;
    break;
   case 48:
    var $fold = $51 + $add109 | 0;
    var $bf_value = $fold & 511;
    var $56 = $51 & -512;
    var $57 = $bf_value | $56;
    var $storemerge = $57;
    label = 49;
    break;
   case 49:
    var $storemerge;
    var $58 = $storemerge & -538968065;
    var $59 = $58 | 536870912;
    HEAP32[$54 >> 2] = $59;
    _qh_updatetested($facet1, $facet2);
    var $60 = HEAP32[5247504 >> 2];
    var $cmp120 = ($60 | 0) > 2;
    if ($cmp120) {
      label = 50;
      break;
    } else {
      var $63 = $60;
      label = 52;
      break;
    }
   case 50:
    var $vertices = $facet1 + 48 | 0;
    var $61 = HEAP32[$vertices >> 2];
    var $call = _qh_setsize($61);
    var $62 = HEAP32[5247504 >> 2];
    var $cmp123 = ($call | 0) == ($62 | 0);
    if ($cmp123) {
      label = 51;
      break;
    } else {
      var $63 = $62;
      label = 52;
      break;
    }
   case 51:
    _qh_mergesimplex($facet1, $facet2, $mergeapex);
    label = 63;
    break;
   case 52:
    var $63;
    var $64 = HEAP32[5249156 >> 2];
    var $inc128 = $64 + 1 | 0;
    var $bf_value129 = $inc128 & 2147483647;
    var $65 = $64 & -2147483648;
    var $66 = $bf_value129 | $65;
    HEAP32[5249156 >> 2] = $66;
    var $vertices130 = $facet2 + 48 | 0;
    var $67 = HEAP32[$vertices130 >> 2];
    var $tobool131 = ($67 | 0) == 0;
    if ($tobool131) {
      var $79 = $63;
      label = 58;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $p = $67 + 4 | 0;
    var $68 = HEAP32[$p >> 2];
    var $tobool13488 = ($68 | 0) == 0;
    if ($tobool13488) {
      var $79 = $63;
      label = 58;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $69 = $68;
    var $70 = $p;
    var $vertexp_089 = $70;
    var $72 = $69;
    var $71 = $66;
    label = 55;
    break;
   case 55:
    var $71;
    var $72;
    var $vertexp_089;
    var $incdec_ptr = $vertexp_089 + 4 | 0;
    var $bf_clear135 = $71 & 2147483647;
    var $73 = $72 + 16 | 0;
    var $74 = $73;
    var $75 = HEAP32[$74 >> 2];
    var $76 = $75 & -2147483648;
    var $77 = $76 | $bf_clear135;
    HEAP32[$74 >> 2] = $77;
    var $78 = HEAP32[$incdec_ptr >> 2];
    var $tobool134 = ($78 | 0) == 0;
    if ($tobool134) {
      label = 57;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $_pre5 = HEAP32[5249156 >> 2];
    var $vertexp_089 = $incdec_ptr;
    var $72 = $78;
    var $71 = $_pre5;
    label = 55;
    break;
   case 57:
    var $_pre = HEAP32[5247504 >> 2];
    var $79 = $_pre;
    label = 58;
    break;
   case 58:
    var $79;
    var $cmp139 = ($79 | 0) == 2;
    if ($cmp139) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    _qh_mergefacet2d($facet1, $facet2);
    label = 61;
    break;
   case 60:
    _qh_mergeneighbors($facet1, $facet2);
    var $vertices143 = $facet1 + 48 | 0;
    var $80 = HEAP32[$vertices143 >> 2];
    _qh_mergevertices($80, $vertices130);
    label = 61;
    break;
   case 61:
    _qh_mergeridges($facet1, $facet2);
    _qh_mergevertex_neighbors($facet1, $facet2);
    var $81 = HEAP32[$54 >> 2];
    var $bf_clear147 = $81 & 1024;
    var $tobool148 = ($bf_clear147 | 0) == 0;
    if ($tobool148) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    var $82 = HEAP32[$vertices130 >> 2];
    _qh_newvertices($82);
    label = 63;
    break;
   case 63:
    var $tobool153 = ($mergeapex | 0) == 0;
    if ($tobool153) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    _qh_degen_redundant_neighbors($facet2, $facet1);
    label = 65;
    break;
   case 65:
    var $83 = HEAP32[$54 >> 2];
    var $bf_clear157 = $83 & 16777216;
    var $tobool158 = ($bf_clear157 | 0) != 0;
    var $bf_clear161 = $83 & 1024;
    var $tobool162 = ($bf_clear161 | 0) == 0;
    var $or_cond6 = $tobool158 | $tobool162;
    if ($or_cond6) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 66:
    var $84 = HEAP32[5243992 >> 2];
    var $inc164 = $84 + 1 | 0;
    HEAP32[5243992 >> 2] = $inc164;
    label = 70;
    break;
   case 67:
    var $85 = HEAP32[$1 >> 2];
    var $bf_clear167 = $85 & 1024;
    var $tobool168_not = ($bf_clear167 | 0) == 0;
    if ($tobool168_not) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    var $86 = HEAP32[5243960 >> 2];
    var $inc174 = $86 + 1 | 0;
    HEAP32[5243960 >> 2] = $inc174;
    label = 70;
    break;
   case 69:
    var $87 = HEAP32[5244e3 >> 2];
    var $inc176 = $87 + 1 | 0;
    HEAP32[5244e3 >> 2] = $inc176;
    label = 70;
    break;
   case 70:
    _qh_willdelete($facet1, $facet2);
    _qh_removefacet($facet2);
    _qh_appendfacet($facet2);
    var $88 = HEAP32[$54 >> 2];
    var $89 = $88 & -134218753;
    var $90 = $89 | 1024;
    HEAP32[$54 >> 2] = $90;
    _qh_tracemerge($facet2);
    var $tobool181 = ($traceonce_0 | 0) == 0;
    if ($tobool181) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    _qh_fprintf(5252864);
    HEAP32[5247036 >> 2] = $tracerestore_0;
    label = 72;
    break;
   case 72:
    return;
  }
}



_qh_mergefacet["X"] = 1;
function _qh_test_appendmerge($facet, $neighbor) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $dist2 = __stackBase__ + 8;
    var $angle = __stackBase__ + 16;
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[$dist2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$dist2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = HEAP32[5247400 >> 2];
    var $tobool = ($0 | 0) == 0;
    var $1 = HEAP32[5249120 >> 2];
    var $tobool1 = ($1 | 0) != 0;
    var $or_cond = $tobool | $tobool1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 25;
      break;
    }
   case 3:
    var $2 = HEAP32[5247072 >> 2];
    var $tobool2 = ($2 | 0) == 0;
    var $or_cond1 = $tobool2 | $tobool1;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248616 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248620 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $3 < 8.988465674311579e+307;
    var $or_cond2 = $or_cond1 & $cmp;
    if ($or_cond2) {
      label = 4;
      break;
    } else {
      var $okangle_0 = 0;
      label = 7;
      break;
    }
   case 4:
    var $normal = $facet + 24 | 0;
    var $4 = HEAP32[$normal >> 2];
    var $normal6 = $neighbor + 24 | 0;
    var $5 = HEAP32[$normal6 >> 2];
    var $call = _qh_getangle($4, $5);
    HEAPF64[tempDoublePtr >> 3] = $call, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $6 = HEAP32[5243056 >> 2];
    var $inc = $6 + 1 | 0;
    HEAP32[5243056 >> 2] = $inc;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248616 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248620 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp7 = $call > $7;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      var $okangle_0 = 1;
      label = 7;
      break;
    }
   case 5:
    var $8 = HEAP32[5243240 >> 2];
    var $inc9 = $8 + 1 | 0;
    HEAP32[5243240 >> 2] = $inc9;
    _qh_appendmergeset($facet, $neighbor, 2, $angle);
    var $9 = HEAP32[5247036 >> 2];
    var $cmp10 = ($9 | 0) > 1;
    if ($cmp10) {
      label = 6;
      break;
    } else {
      var $retval_0 = 1;
      label = 25;
      break;
    }
   case 6:
    _qh_fprintf(5299048);
    var $retval_0 = 1;
    label = 25;
    break;
   case 7:
    var $okangle_0;
    var $center = $facet + 36 | 0;
    var $10 = HEAP32[$center >> 2];
    var $tobool16 = ($10 | 0) == 0;
    if ($tobool16) {
      label = 8;
      break;
    } else {
      var $11 = $10;
      label = 9;
      break;
    }
   case 8:
    var $call18 = _qh_getcentrum($facet);
    HEAP32[$center >> 2] = $call18;
    var $11 = $call18;
    label = 9;
    break;
   case 9:
    var $11;
    var $12 = HEAP32[5243152 >> 2];
    var $inc21 = $12 + 1 | 0;
    HEAP32[5243152 >> 2] = $inc21;
    _qh_distplane($11, $neighbor, $dist);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248608 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248612 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp23 = $13 > $14;
    if ($cmp23) {
      var $isconcave_032 = 1;
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $sub = -$14;
    var $cmp26 = $13 > $sub;
    var $center29 = $neighbor + 36 | 0;
    var $15 = HEAP32[$center29 >> 2];
    var $tobool30 = ($15 | 0) == 0;
    if ($tobool30) {
      label = 11;
      break;
    } else {
      var $16 = $15;
      label = 12;
      break;
    }
   case 11:
    var $call32 = _qh_getcentrum($neighbor);
    HEAP32[$center29 >> 2] = $call32;
    var $16 = $call32;
    label = 12;
    break;
   case 12:
    var $16;
    var $17 = HEAP32[5243152 >> 2];
    var $inc35 = $17 + 1 | 0;
    HEAP32[5243152 >> 2] = $inc35;
    _qh_distplane($16, $facet, $dist2);
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248608 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248612 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp37 = $18 > $19;
    if ($cmp37) {
      var $isconcave_032 = 1;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    if ($cmp26) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $sub42 = -$19;
    var $cmp43 = $18 > $sub42;
    if ($cmp43) {
      label = 15;
      break;
    } else {
      var $retval_0 = 0;
      label = 25;
      break;
    }
   case 15:
    var $20 = HEAP32[5247072 >> 2];
    var $tobool52 = ($20 | 0) == 0;
    var $21 = HEAP32[5249120 >> 2];
    var $tobool54 = ($21 | 0) != 0;
    var $or_cond3 = $tobool52 | $tobool54;
    if ($or_cond3) {
      var $isconcave_032 = 0;
      label = 16;
      break;
    } else {
      var $retval_0 = 0;
      label = 25;
      break;
    }
   case 16:
    var $isconcave_032;
    var $tobool57 = ($okangle_0 | 0) == 0;
    var $22 = HEAP32[5246936 >> 2];
    var $tobool59 = ($22 | 0) != 0;
    var $or_cond4 = $tobool57 & $tobool59;
    if ($or_cond4) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $normal61 = $facet + 24 | 0;
    var $23 = HEAP32[$normal61 >> 2];
    var $normal62 = $neighbor + 24 | 0;
    var $24 = HEAP32[$normal62 >> 2];
    var $call63 = _qh_getangle($23, $24);
    HEAPF64[tempDoublePtr >> 3] = $call63, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $25 = HEAP32[5243056 >> 2];
    var $inc64 = $25 + 1 | 0;
    HEAP32[5243056 >> 2] = $inc64;
    label = 18;
    break;
   case 18:
    if ($isconcave_032) {
      label = 19;
      break;
    } else {
      label = 23;
      break;
    }
   case 19:
    var $26 = HEAP32[5243208 >> 2];
    var $inc68 = $26 + 1 | 0;
    HEAP32[5243208 >> 2] = $inc68;
    var $27 = HEAP32[5246936 >> 2];
    var $tobool69 = ($27 | 0) == 0;
    if ($tobool69) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $28 + 2;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$angle >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angle + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 21;
    break;
   case 21:
    _qh_appendmergeset($facet, $neighbor, 3, $angle);
    var $29 = HEAP32[5247036 >> 2];
    var $tobool72 = ($29 | 0) == 0;
    if ($tobool72) {
      var $retval_0 = 1;
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_fprintf(5298776);
    var $retval_0 = 1;
    label = 25;
    break;
   case 23:
    var $30 = HEAP32[5243248 >> 2];
    var $inc78 = $30 + 1 | 0;
    HEAP32[5243248 >> 2] = $inc78;
    _qh_appendmergeset($facet, $neighbor, 1, $angle);
    var $31 = HEAP32[5247036 >> 2];
    var $cmp79 = ($31 | 0) > 1;
    if ($cmp79) {
      label = 24;
      break;
    } else {
      var $retval_0 = 1;
      label = 25;
      break;
    }
   case 24:
    _qh_fprintf(5298348);
    var $retval_0 = 1;
    label = 25;
    break;
   case 25:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_test_appendmerge["X"] = 1;
function _qh_makeridges($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 8192;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 28;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5247036 >> 2];
    var $cmp = ($3 | 0) > 3;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $4 = $2;
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5267224);
    var $_pre = HEAP32[$1 >> 2];
    var $4 = $_pre;
    label = 5;
    break;
   case 5:
    var $4;
    var $5 = $4 & -8193;
    HEAP32[$1 >> 2] = $5;
    var $neighbors = $facet + 56 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $tobool4 = ($6 | 0) == 0;
    if ($tobool4) {
      var $mergeridge_1 = 0;
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $6 + 4 | 0;
    var $7 = $p;
    var $mergeridge_0_ph = 0;
    var $neighborp_0_ph = $7;
    label = 7;
    break;
   case 7:
    var $neighborp_0_ph;
    var $mergeridge_0_ph;
    var $neighborp_0 = $neighborp_0_ph;
    label = 8;
    break;
   case 8:
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $8 = HEAP32[$neighborp_0 >> 2];
    var $magicptr = $8;
    if (($magicptr | 0) == 2) {
      var $mergeridge_0_ph = 1;
      var $neighborp_0_ph = $incdec_ptr;
      label = 7;
      break;
    } else if (($magicptr | 0) == 0) {
      var $mergeridge_1 = $mergeridge_0_ph;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $9 = $8 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $12 = $11 & -16385;
    HEAP32[$10 >> 2] = $12;
    var $neighborp_0 = $incdec_ptr;
    label = 8;
    break;
   case 10:
    var $mergeridge_1;
    var $ridges = $facet + 52 | 0;
    var $13 = HEAP32[$ridges >> 2];
    var $tobool13 = ($13 | 0) == 0;
    if ($tobool13) {
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p18 = $13 + 4 | 0;
    var $14 = HEAP32[$p18 >> 2];
    var $tobool2142 = ($14 | 0) == 0;
    if ($tobool2142) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $15 = $14;
    var $incdec_ptr204145 = $p18 + 4 | 0;
    var $incdec_ptr2041 = $incdec_ptr204145;
    var $incdec_ptr2043 = $incdec_ptr2041;
    var $16 = $15;
    label = 13;
    break;
   case 13:
    var $16;
    var $incdec_ptr2043;
    var $top = $16 + 4 | 0;
    var $17 = HEAP32[$top >> 2];
    var $cmp23 = ($17 | 0) == ($facet | 0);
    if ($cmp23) {
      label = 14;
      break;
    } else {
      var $cond = $17;
      label = 15;
      break;
    }
   case 14:
    var $bottom = $16 + 8 | 0;
    var $18 = HEAP32[$bottom >> 2];
    var $cond = $18;
    label = 15;
    break;
   case 15:
    var $cond;
    var $19 = $cond + 76 | 0;
    var $20 = $19;
    var $21 = HEAP32[$20 >> 2];
    var $22 = $21 | 16384;
    HEAP32[$20 >> 2] = $22;
    var $incdec_ptr20 = $incdec_ptr2043 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr2043 >> 2];
    var $tobool21 = ($23 | 0) == 0;
    if ($tobool21) {
      label = 16;
      break;
    } else {
      var $incdec_ptr2043 = $incdec_ptr20;
      var $16 = $23;
      label = 13;
      break;
    }
   case 16:
    var $24 = HEAP32[$neighbors >> 2];
    var $tobool29 = ($24 | 0) == 0;
    if ($tobool29) {
      label = 26;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p34 = $24 + 4 | 0;
    var $25 = HEAP32[$p34 >> 2];
    var $call = _qh_setsize($24);
    var $cmp3737 = ($call | 0) > 0;
    if ($cmp3737) {
      label = 18;
      break;
    } else {
      label = 26;
      break;
    }
   case 18:
    var $vertices = $facet + 48 | 0;
    var $neighbor_i_038 = 0;
    var $neighbor_040_in = $25;
    label = 19;
    break;
   case 19:
    var $neighbor_040_in;
    var $neighbor_i_038;
    var $neighbor_040 = $neighbor_040_in;
    var $cmp39 = ($neighbor_040_in | 0) == 2;
    if ($cmp39) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $bf_field_offs42 = $neighbor_040_in + 76 | 0;
    var $26 = $bf_field_offs42;
    var $27 = HEAP32[$26 >> 2];
    var $bf_clear43 = $27 & 16384;
    var $tobool44 = ($bf_clear43 | 0) == 0;
    if ($tobool44) {
      label = 21;
      break;
    } else {
      label = 25;
      break;
    }
   case 21:
    var $call46 = _qh_newridge();
    var $28 = HEAP32[$vertices >> 2];
    var $29 = HEAP32[5247504 >> 2];
    var $call47 = _qh_setnew_delnthsorted($28, $29, $neighbor_i_038, 0);
    var $vertices48 = $call46 | 0;
    HEAP32[$vertices48 >> 2] = $call47;
    var $30 = HEAP32[$1 >> 2];
    var $31 = $30 >>> 12;
    var $bf_clear5035 = $31 ^ $neighbor_i_038;
    var $xor = $bf_clear5035 & 1;
    var $tobool51 = ($xor | 0) == 0;
    var $top56 = $call46 + 4 | 0;
    if ($tobool51) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    HEAP32[$top56 >> 2] = $facet;
    var $bottom54 = $call46 + 8 | 0;
    HEAP32[$bottom54 >> 2] = $neighbor_040;
    label = 24;
    break;
   case 23:
    HEAP32[$top56 >> 2] = $neighbor_040;
    var $bottom57 = $call46 + 8 | 0;
    HEAP32[$bottom57 >> 2] = $facet;
    label = 24;
    break;
   case 24:
    var $32 = $call46;
    _qh_setappend($ridges, $32);
    var $ridges60 = $neighbor_040_in + 52 | 0;
    var $33 = $ridges60;
    _qh_setappend($33, $32);
    label = 25;
    break;
   case 25:
    var $inc = $neighbor_i_038 + 1 | 0;
    var $34 = HEAP32[$neighbors >> 2];
    var $p66 = $34 + 4 + ($inc << 2) | 0;
    var $35 = HEAP32[$p66 >> 2];
    var $exitcond = ($inc | 0) == ($call | 0);
    if ($exitcond) {
      label = 26;
      break;
    } else {
      var $neighbor_i_038 = $inc;
      var $neighbor_040_in = $35;
      label = 19;
      break;
    }
   case 26:
    var $tobool69 = ($mergeridge_1 | 0) == 0;
    if ($tobool69) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $36 = HEAP32[$neighbors >> 2];
    var $call72 = _qh_setdel($36, 2);
    var $tobool73 = ($call72 | 0) == 0;
    if ($tobool73) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 28:
    return;
  }
}
_qh_makeridges["X"] = 1;
function _qh_maydropneighbor($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $angledegen = __stackBase__;
    HEAPF64[tempDoublePtr >> 3] = 5, HEAP32[$angledegen >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$angledegen + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $0 = HEAP32[5249152 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5266236);
    label = 4;
    break;
   case 4:
    var $ridges = $facet + 52 | 0;
    var $2 = HEAP32[$ridges >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool322 = ($3 | 0) == 0;
    if ($tobool322) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = $3;
    var $5 = $p;
    var $ridgep_023 = $5;
    var $6 = $4;
    label = 7;
    break;
   case 7:
    var $6;
    var $ridgep_023;
    var $incdec_ptr = $ridgep_023 + 4 | 0;
    var $7 = HEAP32[5249152 >> 2];
    var $top = $6 + 4 | 0;
    var $8 = HEAP32[$top >> 2];
    var $visitid = $8 + 68 | 0;
    HEAP32[$visitid >> 2] = $7;
    var $9 = HEAP32[5249152 >> 2];
    var $bottom = $6 + 8 | 0;
    var $10 = HEAP32[$bottom >> 2];
    var $visitid4 = $10 + 68 | 0;
    HEAP32[$visitid4 >> 2] = $9;
    var $11 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($11 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      var $ridgep_023 = $incdec_ptr;
      var $6 = $11;
      label = 7;
      break;
    }
   case 8:
    var $neighbors = $facet + 56 | 0;
    var $12 = HEAP32[$neighbors >> 2];
    var $tobool6 = ($12 | 0) == 0;
    if ($tobool6) {
      label = 20;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p11 = $12 + 4 | 0;
    var $13 = HEAP32[$p11 >> 2];
    var $tobool142124 = ($13 | 0) == 0;
    if ($tobool142124) {
      label = 20;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $14 = $13;
    var $15 = $p11;
    var $16 = $facet;
    var $neighborp_0_ph25 = $15;
    var $18 = $14;
    label = 12;
    break;
   case 11:
    var $17 = HEAP32[$incdec_ptr13 >> 2];
    var $tobool1421 = ($17 | 0) == 0;
    if ($tobool1421) {
      label = 20;
      break;
    } else {
      var $neighborp_0_ph25 = $incdec_ptr13;
      var $18 = $17;
      label = 12;
      break;
    }
   case 12:
    var $18;
    var $neighborp_0_ph25;
    var $incdec_ptr13 = $neighborp_0_ph25 + 4 | 0;
    var $19 = $18;
    label = 13;
    break;
   case 13:
    var $19;
    var $visitid16 = $19 + 68 | 0;
    var $20 = HEAP32[$visitid16 >> 2];
    var $21 = HEAP32[5249152 >> 2];
    var $cmp17 = ($20 | 0) == ($21 | 0);
    if ($cmp17) {
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $22 = HEAP32[5247036 >> 2];
    var $tobool19 = ($22 | 0) == 0;
    if ($tobool19) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_fprintf(5265744);
    label = 16;
    break;
   case 16:
    var $23 = HEAP32[5243568 >> 2];
    var $inc24 = $23 + 1 | 0;
    HEAP32[5243568 >> 2] = $inc24;
    var $24 = HEAP32[$neighbors >> 2];
    var $25 = $19;
    var $call = _qh_setdel($24, $25);
    var $neighbors27 = $19 + 56 | 0;
    var $26 = HEAP32[$neighbors27 >> 2];
    var $call28 = _qh_setdel($26, $16);
    var $27 = HEAP32[$neighbors27 >> 2];
    var $call30 = _qh_setsize($27);
    var $28 = HEAP32[5247504 >> 2];
    var $cmp31 = ($call30 | 0) < ($28 | 0);
    if ($cmp31) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $29 = HEAP32[$neighborp_0_ph25 >> 2];
    var $tobool14 = ($29 | 0) == 0;
    if ($tobool14) {
      label = 20;
      break;
    } else {
      var $19 = $29;
      label = 13;
      break;
    }
   case 18:
    var $30 = HEAP32[5243560 >> 2];
    var $inc33 = $30 + 1 | 0;
    HEAP32[5243560 >> 2] = $inc33;
    _qh_appendmergeset($19, $19, 6, $angledegen);
    var $31 = HEAP32[5247036 >> 2];
    var $cmp34 = ($31 | 0) > 1;
    if ($cmp34) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 19:
    _qh_fprintf(5265432);
    label = 17;
    break;
   case 20:
    var $32 = HEAP32[$neighbors >> 2];
    var $call43 = _qh_setsize($32);
    var $33 = HEAP32[5247504 >> 2];
    var $cmp44 = ($call43 | 0) < ($33 | 0);
    if ($cmp44) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $34 = HEAP32[5243560 >> 2];
    var $inc46 = $34 + 1 | 0;
    HEAP32[5243560 >> 2] = $inc46;
    _qh_appendmergeset($facet, $facet, 6, $angledegen);
    var $35 = HEAP32[5247036 >> 2];
    var $cmp47 = ($35 | 0) > 1;
    if ($cmp47) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5265432);
    label = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_maydropneighbor["X"] = 1;
function _qh_willdelete($facet, $replace) {
  _qh_removefacet($facet);
  _qh_prependfacet($facet, 5248956);
  HEAP32[5248960 >> 2] = HEAP32[5248960 >> 2] + 1 | 0;
  var $2 = $facet + 76 | 0;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2048;
  HEAP32[$facet + 28 >> 2] = $replace;
  return;
}
function _qh_mergecycle($samecycle, $newfacet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $newfacet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 512;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5247452 >> 2];
    var $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      var $4 = $2;
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5262092);
    _qh_errexit(5, $newfacet, 0);
    var $_pre1 = HEAP32[$1 >> 2];
    var $4 = $_pre1;
    label = 5;
    break;
   case 5:
    var $4;
    var $5 = $4 & -268435969;
    HEAP32[$1 >> 2] = $5;
    label = 6;
    break;
   case 6:
    var $6 = HEAP32[5248576 >> 2];
    var $tobool6 = ($6 | 0) == 0;
    if ($tobool6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_vertexneighbors();
    label = 8;
    break;
   case 8:
    var $7 = HEAP32[5244576 >> 2];
    var $inc = $7 + 1 | 0;
    HEAP32[5244576 >> 2] = $inc;
    var $8 = HEAP32[5247372 >> 2];
    var $tobool9 = ($8 | 0) != 0;
    var $9 = HEAP32[5249120 >> 2];
    var $tobool10 = ($9 | 0) != 0;
    var $or_cond = $tobool9 & $tobool10;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      var $11 = $inc;
      label = 11;
      break;
    }
   case 9:
    var $10 = HEAP32[5249256 >> 2];
    var $add = $10 + $8 | 0;
    var $cmp = ($inc | 0) > ($add | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      var $11 = $inc;
      label = 11;
      break;
    }
   case 10:
    _qh_tracemerging();
    var $_pre = HEAP32[5244576 >> 2];
    var $11 = $_pre;
    label = 11;
    break;
   case 11:
    var $11;
    var $12 = HEAP32[5247444 >> 2];
    var $cmp15 = ($12 | 0) == ($11 | 0);
    if ($cmp15) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre2 = HEAP32[5247036 >> 2];
    var $14 = $_pre2;
    label = 14;
    break;
   case 13:
    var $13 = HEAP32[5247424 >> 2];
    HEAP32[5247036 >> 2] = $13;
    HEAP32[5242936 >> 2] = $13;
    var $14 = $13;
    label = 14;
    break;
   case 14:
    var $14;
    var $cmp18 = ($14 | 0) > 1;
    if ($cmp18) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5261608);
    label = 16;
    break;
   case 16:
    var $15 = HEAP32[5248968 >> 2];
    var $cmp22 = ($15 | 0) == ($newfacet | 0);
    if ($cmp22) {
      label = 17;
      break;
    } else {
      var $traceonce_0 = 0;
      var $tracerestore_0 = 0;
      label = 18;
      break;
    }
   case 17:
    var $16 = HEAP32[5247036 >> 2];
    HEAP32[5247036 >> 2] = 4;
    _qh_fprintf(5261132);
    var $traceonce_0 = 1;
    var $tracerestore_0 = $16;
    label = 18;
    break;
   case 18:
    var $tracerestore_0;
    var $traceonce_0;
    var $17 = HEAP32[5247036 >> 2];
    var $cmp27 = ($17 | 0) > 3;
    if ($cmp27) {
      label = 19;
      break;
    } else {
      label = 24;
      break;
    }
   case 19:
    _qh_fprintf(5260776);
    var $f = $samecycle + 28 | 0;
    var $samecycle29 = $f;
    var $18 = HEAP32[$samecycle29 >> 2];
    var $tobool3033 = ($18 | 0) == 0;
    if ($tobool3033) {
      label = 22;
      break;
    } else {
      var $same_034 = $18;
      label = 20;
      break;
    }
   case 20:
    var $same_034;
    _qh_fprintf(5260352);
    var $cmp32 = ($same_034 | 0) == ($samecycle | 0);
    if ($cmp32) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $f33 = $same_034 + 28 | 0;
    var $samecycle34 = $f33;
    var $19 = HEAP32[$samecycle34 >> 2];
    var $tobool30 = ($19 | 0) == 0;
    if ($tobool30) {
      label = 22;
      break;
    } else {
      var $same_034 = $19;
      label = 20;
      break;
    }
   case 22:
    _qh_fprintf(5299656);
    var $_pr = HEAP32[5247036 >> 2];
    var $cmp36 = ($_pr | 0) > 3;
    if ($cmp36) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    _qh_errprint($samecycle, $newfacet, 0, 0);
    label = 24;
    break;
   case 24:
    var $vertices = $samecycle + 48 | 0;
    var $20 = HEAP32[$vertices >> 2];
    var $p = $20 + 4 | 0;
    var $21 = HEAP32[$p >> 2];
    _qh_makeridges($newfacet);
    _qh_mergecycle_neighbors($samecycle, $newfacet);
    _qh_mergecycle_ridges($samecycle, $newfacet);
    _qh_mergecycle_vneighbors($samecycle, $newfacet);
    var $vertices39 = $newfacet + 48 | 0;
    var $22 = HEAP32[$vertices39 >> 2];
    var $p42 = $22 + 4 | 0;
    var $23 = HEAP32[$p42 >> 2];
    var $cmp43 = ($23 | 0) == ($21 | 0);
    if ($cmp43) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_setaddnth($vertices39, 0, $21);
    label = 26;
    break;
   case 26:
    var $24 = HEAP32[$1 >> 2];
    var $bf_clear48 = $24 & 1024;
    var $tobool49 = ($bf_clear48 | 0) == 0;
    if ($tobool49) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $25 = HEAP32[$vertices39 >> 2];
    _qh_newvertices($25);
    label = 28;
    break;
   case 28:
    _qh_mergecycle_facets($samecycle, $newfacet);
    _qh_tracemerge($newfacet);
    var $tobool53 = ($traceonce_0 | 0) == 0;
    if ($tobool53) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    _qh_fprintf(5259684);
    HEAP32[5247036 >> 2] = $tracerestore_0;
    label = 30;
    break;
   case 30:
    return;
  }
}
_qh_mergecycle["X"] = 1;
function _qh_tracemerging() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $timedata = __stackBase__;
  HEAP32[5249256 >> 2] = HEAP32[5244576 >> 2];
  _time($timedata);
  _localtime($timedata);
  _clock();
  _qh_setsize(HEAP32[5249184 >> 2]);
  _qh_fprintf(5296956);
  STACKTOP = __stackBase__;
  return;
}
function _qh_mergecycle_neighbors($samecycle, $newfacet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249152 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $f = $samecycle + 28 | 0;
    var $samecycle1 = $f;
    var $1 = HEAP32[$samecycle1 >> 2];
    var $tobool71 = ($1 | 0) == 0;
    if ($tobool71) {
      var $7 = $inc;
      label = 9;
      break;
    } else {
      var $same_072 = $1;
      label = 3;
      break;
    }
   case 3:
    var $same_072;
    var $visitid = $same_072 + 68 | 0;
    var $2 = HEAP32[$visitid >> 2];
    var $cmp = ($2 | 0) == ($inc | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $same_072 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 2048;
    var $tobool2 = ($bf_clear | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_infiniteloop($samecycle);
    label = 6;
    break;
   case 6:
    HEAP32[$visitid >> 2] = $inc;
    var $cmp4 = ($same_072 | 0) == ($samecycle | 0);
    if ($cmp4) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $f5 = $same_072 + 28 | 0;
    var $samecycle6 = $f5;
    var $6 = HEAP32[$samecycle6 >> 2];
    var $tobool = ($6 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      var $same_072 = $6;
      label = 3;
      break;
    }
   case 8:
    var $_pre = HEAP32[5249152 >> 2];
    var $7 = $_pre;
    label = 9;
    break;
   case 9:
    var $7;
    var $inc7 = $7 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc7;
    var $visitid8 = $newfacet + 68 | 0;
    HEAP32[$visitid8 >> 2] = $inc7;
    var $8 = HEAP32[5247036 >> 2];
    var $cmp9 = ($8 | 0) > 3;
    if ($cmp9) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5257988);
    label = 11;
    break;
   case 11:
    var $neighbors = $newfacet + 56 | 0;
    var $9 = HEAP32[$neighbors >> 2];
    var $tobool12 = ($9 | 0) == 0;
    if ($tobool12) {
      var $18 = 0;
      label = 19;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p = $9 + 4 | 0;
    var $10 = HEAP32[$p >> 2];
    var $tobool166776 = ($10 | 0) == 0;
    if ($tobool166776) {
      var $18 = $9;
      label = 19;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $11 = $10;
    var $12 = $p;
    var $incdec_ptr667581 = $p + 4 | 0;
    var $incdec_ptr6675 = $incdec_ptr667581;
    var $neighborp_068 = $12;
    var $incdec_ptr70 = $incdec_ptr6675;
    var $13 = $11;
    label = 14;
    break;
   case 14:
    var $13;
    var $incdec_ptr70;
    var $neighborp_068;
    var $visitid18 = $13 + 68 | 0;
    var $14 = HEAP32[$visitid18 >> 2];
    var $cmp19 = ($14 | 0) == ($inc | 0);
    if ($cmp19) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    HEAP32[$neighborp_068 >> 2] = 0;
    var $15 = HEAP32[$incdec_ptr70 >> 2];
    var $tobool1667 = ($15 | 0) == 0;
    if ($tobool1667) {
      label = 18;
      break;
    } else {
      var $_be = $15;
      label = 17;
      break;
    }
   case 16:
    var $16 = HEAP32[5249152 >> 2];
    HEAP32[$visitid18 >> 2] = $16;
    var $17 = HEAP32[$incdec_ptr70 >> 2];
    var $tobool16 = ($17 | 0) == 0;
    if ($tobool16) {
      label = 18;
      break;
    } else {
      var $_be = $17;
      label = 17;
      break;
    }
   case 17:
    var $_be;
    var $incdec_ptr70_be = $incdec_ptr70 + 4 | 0;
    var $neighborp_068 = $incdec_ptr70;
    var $incdec_ptr70 = $incdec_ptr70_be;
    var $13 = $_be;
    label = 14;
    break;
   case 18:
    var $_pre1 = HEAP32[$neighbors >> 2];
    var $18 = $_pre1;
    label = 19;
    break;
   case 19:
    var $18;
    _qh_setcompact($18);
    var $19 = HEAP32[5247036 >> 2];
    var $cmp28 = ($19 | 0) > 3;
    if ($cmp28) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5257832);
    label = 21;
    break;
   case 21:
    var $20 = HEAP32[$samecycle1 >> 2];
    var $tobool3460 = ($20 | 0) == 0;
    if ($tobool3460) {
      label = 42;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $21 = $newfacet;
    var $newneighbors_061 = 0;
    var $same_162 = $20;
    label = 23;
    break;
   case 23:
    var $same_162;
    var $newneighbors_061;
    var $neighbors36 = $same_162 + 56 | 0;
    var $22 = HEAP32[$neighbors36 >> 2];
    var $tobool37 = ($22 | 0) == 0;
    if ($tobool37) {
      var $newneighbors_2 = $newneighbors_061;
      label = 40;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $p42 = $22 + 4 | 0;
    var $23 = HEAP32[$p42 >> 2];
    var $tobool4557 = ($23 | 0) == 0;
    if ($tobool4557) {
      var $newneighbors_2 = $newneighbors_061;
      label = 40;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $24 = $23;
    var $incdec_ptr445682 = $p42 + 4 | 0;
    var $incdec_ptr4456 = $incdec_ptr445682;
    var $25 = $same_162;
    var $newneighbors_158 = $newneighbors_061;
    var $incdec_ptr4459 = $incdec_ptr4456;
    var $26 = $24;
    label = 26;
    break;
   case 26:
    var $26;
    var $incdec_ptr4459;
    var $newneighbors_158;
    var $visitid47 = $26 + 68 | 0;
    var $27 = HEAP32[$visitid47 >> 2];
    var $cmp48 = ($27 | 0) == ($inc | 0);
    if ($cmp48) {
      var $newneighbors_1_be = $newneighbors_158;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $newneighbors_1_be;
    var $incdec_ptr44 = $incdec_ptr4459 + 4 | 0;
    var $28 = HEAP32[$incdec_ptr4459 >> 2];
    var $tobool45 = ($28 | 0) == 0;
    if ($tobool45) {
      var $newneighbors_2 = $newneighbors_1_be;
      label = 40;
      break;
    } else {
      var $newneighbors_158 = $newneighbors_1_be;
      var $incdec_ptr4459 = $incdec_ptr44;
      var $26 = $28;
      label = 26;
      break;
    }
   case 28:
    var $29 = $26;
    var $30 = $26 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear52 = $32 & 8192;
    var $tobool53 = ($bf_clear52 | 0) == 0;
    if ($tobool53) {
      label = 38;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $33 = HEAP32[5249152 >> 2];
    var $cmp56 = ($27 | 0) == ($33 | 0);
    if ($cmp56) {
      label = 37;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    _qh_setappend($neighbors, $29);
    var $neighbors59 = $26 + 56 | 0;
    var $34 = HEAP32[$neighbors59 >> 2];
    _qh_setreplace($34, $25, $21);
    var $inc60 = $newneighbors_158 + 1 | 0;
    var $35 = HEAP32[5249152 >> 2];
    HEAP32[$visitid47 >> 2] = $35;
    var $ridges = $26 + 52 | 0;
    var $36 = HEAP32[$ridges >> 2];
    var $tobool62 = ($36 | 0) == 0;
    if ($tobool62) {
      var $newneighbors_1_be = $inc60;
      label = 27;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $p67 = $36 + 4 | 0;
    var $37 = $p67;
    var $ridgep_0 = $37;
    label = 32;
    break;
   case 32:
    var $ridgep_0;
    var $incdec_ptr69 = $ridgep_0 + 4 | 0;
    var $38 = HEAP32[$ridgep_0 >> 2];
    var $tobool70 = ($38 | 0) == 0;
    if ($tobool70) {
      var $newneighbors_1_be = $inc60;
      label = 27;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $top = $38 + 4 | 0;
    var $39 = HEAP32[$top >> 2];
    var $cmp72 = ($39 | 0) == ($same_162 | 0);
    if ($cmp72) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    HEAP32[$top >> 2] = $newfacet;
    var $newneighbors_1_be = $inc60;
    label = 27;
    break;
   case 35:
    var $bottom = $38 + 8 | 0;
    var $40 = HEAP32[$bottom >> 2];
    var $cmp76 = ($40 | 0) == ($same_162 | 0);
    if ($cmp76) {
      label = 36;
      break;
    } else {
      var $ridgep_0 = $incdec_ptr69;
      label = 32;
      break;
    }
   case 36:
    HEAP32[$bottom >> 2] = $newfacet;
    var $newneighbors_1_be = $inc60;
    label = 27;
    break;
   case 37:
    _qh_makeridges($26);
    var $neighbors84 = $26 + 56 | 0;
    var $41 = HEAP32[$neighbors84 >> 2];
    var $call = _qh_setdel($41, $25);
    var $newneighbors_1_be = $newneighbors_158;
    label = 27;
    break;
   case 38:
    var $neighbors87 = $26 + 56 | 0;
    var $42 = HEAP32[$neighbors87 >> 2];
    var $call88 = _qh_setdel($42, $25);
    var $43 = HEAP32[$visitid47 >> 2];
    var $44 = HEAP32[5249152 >> 2];
    var $cmp90 = ($43 | 0) == ($44 | 0);
    if ($cmp90) {
      var $newneighbors_1_be = $newneighbors_158;
      label = 27;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    _qh_setappend($neighbors87, $21);
    _qh_setappend($neighbors, $29);
    var $45 = HEAP32[5249152 >> 2];
    HEAP32[$visitid47 >> 2] = $45;
    var $inc95 = $newneighbors_158 + 1 | 0;
    var $newneighbors_1_be = $inc95;
    label = 27;
    break;
   case 40:
    var $newneighbors_2;
    var $cmp101 = ($same_162 | 0) == ($samecycle | 0);
    if ($cmp101) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $f104 = $same_162 + 28 | 0;
    var $samecycle105 = $f104;
    var $46 = HEAP32[$samecycle105 >> 2];
    var $tobool34 = ($46 | 0) == 0;
    if ($tobool34) {
      label = 42;
      break;
    } else {
      var $newneighbors_061 = $newneighbors_2;
      var $same_162 = $46;
      label = 23;
      break;
    }
   case 42:
    var $47 = HEAP32[5247036 >> 2];
    var $cmp109 = ($47 | 0) > 1;
    if ($cmp109) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _qh_fprintf(5257444);
    label = 44;
    break;
   case 44:
    return;
  }
}
_qh_mergecycle_neighbors["X"] = 1;
function _qh_mergecycle_ridges($samecycle, $newfacet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5257044);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5249152 >> 2];
    var $sub = $1 - 1 | 0;
    var $ridges = $newfacet + 52 | 0;
    var $2 = HEAP32[$ridges >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      var $neighbor_1 = 0;
      var $11 = 0;
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool3123 = ($3 | 0) == 0;
    if ($tobool3123) {
      var $neighbor_1 = 0;
      var $11 = $2;
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = $3;
    var $5 = $p;
    var $incdec_ptr122127 = $p + 4 | 0;
    var $incdec_ptr122 = $incdec_ptr122127;
    var $ridgep_0124 = $5;
    var $incdec_ptr125 = $incdec_ptr122;
    var $6 = $4;
    label = 7;
    break;
   case 7:
    var $6;
    var $incdec_ptr125;
    var $ridgep_0124;
    var $top = $6 + 4 | 0;
    var $7 = HEAP32[$top >> 2];
    var $cmp4 = ($7 | 0) == ($newfacet | 0);
    if ($cmp4) {
      label = 8;
      break;
    } else {
      var $cond = $7;
      label = 9;
      break;
    }
   case 8:
    var $bottom = $6 + 8 | 0;
    var $8 = HEAP32[$bottom >> 2];
    var $cond = $8;
    label = 9;
    break;
   case 9:
    var $cond;
    var $visitid = $cond + 68 | 0;
    var $9 = HEAP32[$visitid >> 2];
    var $cmp6 = ($9 | 0) == ($sub | 0);
    if ($cmp6) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[$ridgep_0124 >> 2] = 0;
    label = 11;
    break;
   case 11:
    var $incdec_ptr = $incdec_ptr125 + 4 | 0;
    var $10 = HEAP32[$incdec_ptr125 >> 2];
    var $tobool3 = ($10 | 0) == 0;
    if ($tobool3) {
      label = 12;
      break;
    } else {
      var $ridgep_0124 = $incdec_ptr125;
      var $incdec_ptr125 = $incdec_ptr;
      var $6 = $10;
      label = 7;
      break;
    }
   case 12:
    var $_pre = HEAP32[$ridges >> 2];
    var $neighbor_1 = $cond;
    var $11 = $_pre;
    label = 13;
    break;
   case 13:
    var $11;
    var $neighbor_1;
    _qh_setcompact($11);
    var $12 = HEAP32[5247036 >> 2];
    var $cmp12 = ($12 | 0) > 3;
    if ($cmp12) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5256720);
    label = 15;
    break;
   case 15:
    var $f = $samecycle + 28 | 0;
    var $samecycle15 = $f;
    var $13 = HEAP32[$samecycle15 >> 2];
    var $tobool17115 = ($13 | 0) == 0;
    if ($tobool17115) {
      label = 48;
      break;
    } else {
      var $numnew_0116 = 0;
      var $numold_0117 = 0;
      var $neighbor_2118 = $neighbor_1;
      var $same_0119 = $13;
      label = 16;
      break;
    }
   case 16:
    var $same_0119;
    var $neighbor_2118;
    var $numold_0117;
    var $numnew_0116;
    var $ridges19 = $same_0119 + 52 | 0;
    var $14 = HEAP32[$ridges19 >> 2];
    var $tobool20 = ($14 | 0) == 0;
    if ($tobool20) {
      var $numold_277 = $numold_0117;
      var $neighbor_578 = $neighbor_2118;
      label = 35;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p25 = $14 + 4 | 0;
    var $15 = HEAP32[$p25 >> 2];
    var $tobool2894109 = ($15 | 0) == 0;
    if ($tobool2894109) {
      var $numold_1_lcssa = $numold_0117;
      var $neighbor_3_ph107 = $neighbor_2118;
      label = 33;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $16 = $15;
    var $incdec_ptr2793108128 = $p25 + 4 | 0;
    var $incdec_ptr2793108 = $incdec_ptr2793108128;
    var $numold_1_ph110 = $numold_0117;
    var $neighbor_3_ph111 = $neighbor_2118;
    var $incdec_ptr2793112 = $incdec_ptr2793108;
    var $17 = $16;
    label = 19;
    break;
   case 19:
    var $17;
    var $incdec_ptr2793112;
    var $neighbor_3_ph111;
    var $numold_1_ph110;
    var $numold_195 = $numold_1_ph110;
    var $incdec_ptr2796 = $incdec_ptr2793112;
    var $18 = $17;
    label = 20;
    break;
   case 20:
    var $18;
    var $incdec_ptr2796;
    var $numold_195;
    var $top30 = $18 + 4 | 0;
    var $19 = HEAP32[$top30 >> 2];
    var $cmp31 = ($19 | 0) == ($same_0119 | 0);
    if ($cmp31) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[$top30 >> 2] = $newfacet;
    var $bottom34 = $18 + 8 | 0;
    var $20 = HEAP32[$bottom34 >> 2];
    var $neighbor_4 = $20;
    label = 27;
    break;
   case 22:
    var $bottom35 = $18 + 8 | 0;
    var $21 = HEAP32[$bottom35 >> 2];
    var $cmp36 = ($21 | 0) == ($same_0119 | 0);
    if ($cmp36) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    HEAP32[$bottom35 >> 2] = $newfacet;
    var $neighbor_4 = $19;
    label = 27;
    break;
   case 24:
    var $cmp42 = ($19 | 0) == ($newfacet | 0);
    var $cmp44 = ($21 | 0) == ($newfacet | 0);
    var $or_cond = $cmp42 | $cmp44;
    if ($or_cond) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $22 = $18;
    _qh_setappend($ridges, $22);
    var $inc = $numold_195 + 1 | 0;
    var $incdec_ptr27 = $incdec_ptr2796 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr2796 >> 2];
    var $tobool28 = ($23 | 0) == 0;
    if ($tobool28) {
      var $numold_1_lcssa = $inc;
      var $neighbor_3_ph107 = $neighbor_3_ph111;
      label = 33;
      break;
    } else {
      var $numold_195 = $inc;
      var $incdec_ptr2796 = $incdec_ptr27;
      var $18 = $23;
      label = 20;
      break;
    }
   case 26:
    _qh_fprintf(5256364);
    _qh_errexit(5, 0, $18);
    var $neighbor_4 = $neighbor_3_ph111;
    label = 27;
    break;
   case 27:
    var $neighbor_4;
    var $cmp51 = ($neighbor_4 | 0) == ($newfacet | 0);
    if ($cmp51) {
      label = 28;
      break;
    } else {
      label = 30;
      break;
    }
   case 28:
    var $vertices = $18 | 0;
    _qh_setfree($vertices);
    var $24 = $18;
    _qh_memfree($24, 16);
    label = 29;
    break;
   case 29:
    var $numold_1_ph_be = $numold_195 + 1 | 0;
    var $incdec_ptr2793 = $incdec_ptr2796 + 4 | 0;
    var $25 = HEAP32[$incdec_ptr2796 >> 2];
    var $tobool2894 = ($25 | 0) == 0;
    if ($tobool2894) {
      var $numold_1_lcssa = $numold_1_ph_be;
      var $neighbor_3_ph107 = $neighbor_4;
      label = 33;
      break;
    } else {
      var $numold_1_ph110 = $numold_1_ph_be;
      var $neighbor_3_ph111 = $neighbor_4;
      var $incdec_ptr2793112 = $incdec_ptr2793;
      var $17 = $25;
      label = 19;
      break;
    }
   case 30:
    var $visitid55 = $neighbor_4 + 68 | 0;
    var $26 = HEAP32[$visitid55 >> 2];
    var $cmp56 = ($26 | 0) == ($sub | 0);
    if ($cmp56) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $ridges58 = $neighbor_4 + 52 | 0;
    var $27 = HEAP32[$ridges58 >> 2];
    var $28 = $18;
    var $call = _qh_setdel($27, $28);
    var $vertices59 = $18 | 0;
    _qh_setfree($vertices59);
    _qh_memfree($28, 16);
    label = 29;
    break;
   case 32:
    var $29 = $18;
    _qh_setappend($ridges, $29);
    label = 29;
    break;
   case 33:
    var $neighbor_3_ph107;
    var $numold_1_lcssa;
    var $_pr = HEAP32[$ridges19 >> 2];
    var $tobool69 = ($_pr | 0) == 0;
    if ($tobool69) {
      var $numold_277 = $numold_1_lcssa;
      var $neighbor_578 = $neighbor_3_ph107;
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    _qh_settruncate($_pr, 0);
    var $numold_277 = $numold_1_lcssa;
    var $neighbor_578 = $neighbor_3_ph107;
    label = 35;
    break;
   case 35:
    var $neighbor_578;
    var $numold_277;
    var $30 = $same_0119 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear74 = $32 & 8192;
    var $tobool75 = ($bf_clear74 | 0) == 0;
    if ($tobool75) {
      var $neighbor_7 = $neighbor_578;
      var $numnew_3 = $numnew_0116;
      label = 46;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $neighbors = $same_0119 + 56 | 0;
    var $33 = HEAP32[$neighbors >> 2];
    var $tobool78 = ($33 | 0) == 0;
    if ($tobool78) {
      var $neighbor_7 = 0;
      var $numnew_3 = $numnew_0116;
      label = 46;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $p83 = $33 + 4 | 0;
    var $34 = HEAP32[$p83 >> 2];
    var $call85 = _qh_setsize($33);
    var $neighbor_697 = $34;
    var $cmp8798 = ($call85 | 0) > 0;
    if ($cmp8798) {
      label = 38;
      break;
    } else {
      var $neighbor_7 = $neighbor_697;
      var $numnew_3 = $numnew_0116;
      label = 46;
      break;
    }
   case 38:
    var $vertices96 = $same_0119 + 48 | 0;
    var $numnew_199 = $numnew_0116;
    var $neighbor_i_0100 = 0;
    var $neighbor_6_in101 = $34;
    var $neighbor_6102 = $neighbor_697;
    label = 39;
    break;
   case 39:
    var $neighbor_6102;
    var $neighbor_6_in101;
    var $neighbor_i_0100;
    var $numnew_199;
    var $visitid89 = $neighbor_6_in101 + 68 | 0;
    var $35 = $visitid89;
    var $36 = HEAP32[$35 >> 2];
    var $cmp90 = ($36 | 0) == ($sub | 0);
    if ($cmp90) {
      var $numnew_2 = $numnew_199;
      label = 45;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $bf_field_offs91 = $neighbor_6_in101 + 76 | 0;
    var $37 = $bf_field_offs91;
    var $38 = HEAP32[$37 >> 2];
    var $bf_clear92 = $38 & 8192;
    var $tobool93 = ($bf_clear92 | 0) == 0;
    if ($tobool93) {
      var $numnew_2 = $numnew_199;
      label = 45;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $call95 = _qh_newridge();
    var $39 = HEAP32[$vertices96 >> 2];
    var $40 = HEAP32[5247504 >> 2];
    var $call97 = _qh_setnew_delnthsorted($39, $40, $neighbor_i_0100, 0);
    var $vertices98 = $call95 | 0;
    HEAP32[$vertices98 >> 2] = $call97;
    var $41 = HEAP32[$31 >> 2];
    var $42 = $41 >>> 12;
    var $bf_clear10075 = $42 ^ $neighbor_i_0100;
    var $xor = $bf_clear10075 & 1;
    var $tobool101 = ($xor | 0) == 0;
    var $top106 = $call95 + 4 | 0;
    if ($tobool101) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    HEAP32[$top106 >> 2] = $newfacet;
    var $bottom104 = $call95 + 8 | 0;
    HEAP32[$bottom104 >> 2] = $neighbor_6102;
    label = 44;
    break;
   case 43:
    HEAP32[$top106 >> 2] = $neighbor_6102;
    var $bottom107 = $call95 + 8 | 0;
    HEAP32[$bottom107 >> 2] = $newfacet;
    label = 44;
    break;
   case 44:
    var $43 = $call95;
    _qh_setappend($ridges, $43);
    var $ridges110 = $neighbor_6_in101 + 52 | 0;
    var $44 = $ridges110;
    _qh_setappend($44, $43);
    var $inc111 = $numnew_199 + 1 | 0;
    var $numnew_2 = $inc111;
    label = 45;
    break;
   case 45:
    var $numnew_2;
    var $inc113 = $neighbor_i_0100 + 1 | 0;
    var $45 = HEAP32[$neighbors >> 2];
    var $p117 = $45 + 4 + ($inc113 << 2) | 0;
    var $46 = HEAP32[$p117 >> 2];
    var $neighbor_6 = $46;
    var $exitcond = ($inc113 | 0) == ($call85 | 0);
    if ($exitcond) {
      var $neighbor_7 = $neighbor_6;
      var $numnew_3 = $numnew_2;
      label = 46;
      break;
    } else {
      var $numnew_199 = $numnew_2;
      var $neighbor_i_0100 = $inc113;
      var $neighbor_6_in101 = $46;
      var $neighbor_6102 = $neighbor_6;
      label = 39;
      break;
    }
   case 46:
    var $numnew_3;
    var $neighbor_7;
    var $cmp121 = ($same_0119 | 0) == ($samecycle | 0);
    if ($cmp121) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $f124 = $same_0119 + 28 | 0;
    var $samecycle125 = $f124;
    var $47 = HEAP32[$samecycle125 >> 2];
    var $tobool17 = ($47 | 0) == 0;
    if ($tobool17) {
      label = 48;
      break;
    } else {
      var $numnew_0116 = $numnew_3;
      var $numold_0117 = $numold_277;
      var $neighbor_2118 = $neighbor_7;
      var $same_0119 = $47;
      label = 16;
      break;
    }
   case 48:
    var $48 = HEAP32[5247036 >> 2];
    var $cmp129 = ($48 | 0) > 1;
    if ($cmp129) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    _qh_fprintf(5256008);
    label = 50;
    break;
   case 50:
    return;
  }
}
_qh_mergecycle_ridges["X"] = 1;
function _qh_mergecycle_vneighbors($samecycle, $newfacet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5255720);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5249152 >> 2];
    var $sub = $1 - 1 | 0;
    var $visitid = $newfacet + 68 | 0;
    HEAP32[$visitid >> 2] = $sub;
    var $call = _qh_basevertices($samecycle);
    HEAP32[$vertices >> 2] = $call;
    var $vertices1 = $samecycle + 48 | 0;
    var $2 = HEAP32[$vertices1 >> 2];
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    _qh_setappend($vertices, $3);
    var $4 = HEAP32[$vertices >> 2];
    var $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 19;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p5 = $4 + 4 | 0;
    var $5 = HEAP32[$p5 >> 2];
    var $tobool624 = ($5 | 0) == 0;
    if ($tobool624) {
      label = 19;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $6 = $5;
    var $incdec_ptr2326 = $p5 + 4 | 0;
    var $incdec_ptr23 = $incdec_ptr2326;
    var $7 = $newfacet;
    var $vertices36 = $newfacet + 48 | 0;
    var $incdec_ptr25 = $incdec_ptr23;
    var $8 = $6;
    label = 7;
    break;
   case 7:
    var $8;
    var $incdec_ptr25;
    var $9 = $8;
    var $10 = $8 + 20 | 0;
    var $11 = $10;
    var $12 = HEAP32[$11 >> 2];
    var $13 = $12 | 536870912;
    HEAP32[$11 >> 2] = $13;
    var $neighbors = $8 + 12 | 0;
    var $14 = HEAP32[$neighbors >> 2];
    var $tobool7 = ($14 | 0) == 0;
    if ($tobool7) {
      var $21 = 0;
      label = 14;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p12 = $14 + 4 | 0;
    var $15 = HEAP32[$p12 >> 2];
    var $tobool1520 = ($15 | 0) == 0;
    if ($tobool1520) {
      var $21 = $14;
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $16 = $15;
    var $17 = $p12;
    var $incdec_ptr141927 = $p12 + 4 | 0;
    var $incdec_ptr1419 = $incdec_ptr141927;
    var $neighborp_021 = $17;
    var $incdec_ptr1422 = $incdec_ptr1419;
    var $18 = $16;
    label = 10;
    break;
   case 10:
    var $18;
    var $incdec_ptr1422;
    var $neighborp_021;
    var $visitid17 = $18 + 68 | 0;
    var $19 = HEAP32[$visitid17 >> 2];
    var $cmp18 = ($19 | 0) == ($sub | 0);
    if ($cmp18) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$neighborp_021 >> 2] = 0;
    label = 12;
    break;
   case 12:
    var $incdec_ptr14 = $incdec_ptr1422 + 4 | 0;
    var $20 = HEAP32[$incdec_ptr1422 >> 2];
    var $tobool15 = ($20 | 0) == 0;
    if ($tobool15) {
      label = 13;
      break;
    } else {
      var $neighborp_021 = $incdec_ptr1422;
      var $incdec_ptr1422 = $incdec_ptr14;
      var $18 = $20;
      label = 10;
      break;
    }
   case 13:
    var $_pre = HEAP32[$neighbors >> 2];
    var $21 = $_pre;
    label = 14;
    break;
   case 14:
    var $21;
    _qh_setcompact($21);
    _qh_setappend($neighbors, $7);
    var $22 = HEAP32[$neighbors >> 2];
    var $p28 = $22 + 8 | 0;
    var $23 = HEAP32[$p28 >> 2];
    var $tobool29 = ($23 | 0) == 0;
    if ($tobool29) {
      label = 15;
      break;
    } else {
      label = 18;
      break;
    }
   case 15:
    var $24 = HEAP32[5243320 >> 2];
    var $inc = $24 + 1 | 0;
    HEAP32[5243320 >> 2] = $inc;
    var $25 = HEAP32[5247036 >> 2];
    var $cmp31 = ($25 | 0) > 1;
    if ($cmp31) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5255452);
    label = 17;
    break;
   case 17:
    var $26 = HEAP32[$vertices36 >> 2];
    _qh_setdelsorted($26, $9);
    var $27 = HEAP32[$11 >> 2];
    var $28 = $27 | 1073741824;
    HEAP32[$11 >> 2] = $28;
    _qh_setappend(5249184, $9);
    label = 18;
    break;
   case 18:
    var $incdec_ptr = $incdec_ptr25 + 4 | 0;
    var $29 = HEAP32[$incdec_ptr25 >> 2];
    var $tobool6 = ($29 | 0) == 0;
    if ($tobool6) {
      label = 19;
      break;
    } else {
      var $incdec_ptr25 = $incdec_ptr;
      var $8 = $29;
      label = 7;
      break;
    }
   case 19:
    _qh_settempfree($vertices);
    var $30 = HEAP32[5247036 >> 2];
    var $cmp42 = ($30 | 0) > 2;
    if ($cmp42) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5255228);
    label = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_mergecycle_vneighbors["X"] = 1;
function _qh_newvertices($vertices) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool15 = ($0 | 0) == 0;
    if ($tobool15) {
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $0;
    var $incdec_ptr47 = $p + 4 | 0;
    var $incdec_ptr4 = $incdec_ptr47;
    var $incdec_ptr6 = $incdec_ptr4;
    var $2 = $1;
    label = 5;
    break;
   case 5:
    var $2;
    var $incdec_ptr6;
    var $3 = $2 + 20 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $tobool2 = ($5 | 0) < 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_removevertex($2);
    _qh_appendvertex($2);
    label = 7;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr6 + 4 | 0;
    var $6 = HEAP32[$incdec_ptr6 >> 2];
    var $tobool1 = ($6 | 0) == 0;
    if ($tobool1) {
      label = 8;
      break;
    } else {
      var $incdec_ptr6 = $incdec_ptr;
      var $2 = $6;
      label = 5;
      break;
    }
   case 8:
    return;
  }
}
function _qh_mergecycle_facets($samecycle, $newfacet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5258432);
    label = 4;
    break;
   case 4:
    _qh_removefacet($newfacet);
    _qh_appendfacet($newfacet);
    var $1 = $newfacet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $3 & -536880129;
    var $5 = $4 | 536871936;
    HEAP32[$2 >> 2] = $5;
    var $f = $samecycle + 28 | 0;
    var $samecycle3 = $f;
    var $6 = HEAP32[$samecycle3 >> 2];
    var $tobool16 = ($6 | 0) == 0;
    if ($tobool16) {
      label = 6;
      break;
    } else {
      var $same_017 = $6;
      label = 5;
      break;
    }
   case 5:
    var $same_017;
    var $f4 = $same_017 + 28 | 0;
    var $samecycle5 = $f4;
    var $7 = HEAP32[$samecycle5 >> 2];
    _qh_willdelete($same_017, $newfacet);
    var $cmp6 = ($same_017 | 0) == ($samecycle | 0);
    var $cond = $cmp6 ? 0 : $7;
    var $tobool = ($cond | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      var $same_017 = $cond;
      label = 5;
      break;
    }
   case 6:
    var $center = $newfacet + 36 | 0;
    var $8 = HEAP32[$center >> 2];
    var $tobool7 = ($8 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $vertices = $newfacet + 48 | 0;
    var $9 = HEAP32[$vertices >> 2];
    var $call = _qh_setsize($9);
    var $10 = HEAP32[5247504 >> 2];
    var $add = $10 + 5 | 0;
    var $cmp8 = ($call | 0) > ($add | 0);
    if ($cmp8) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $11 = HEAP32[$center >> 2];
    var $12 = $11;
    var $13 = HEAP32[5248928 >> 2];
    _qh_memfree($12, $13);
    HEAP32[$center >> 2] = 0;
    label = 9;
    break;
   case 9:
    var $14 = HEAP32[5247036 >> 2];
    var $cmp13 = ($14 | 0) > 2;
    if ($cmp13) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5258220);
    label = 11;
    break;
   case 11:
    return;
  }
}
_qh_mergecycle_facets["X"] = 1;
function _qh_tracemerge($facet2) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $waserror = __stackBase__;
    HEAP32[$waserror >> 2] = 0;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_errprint($facet2, 0, 0, 0);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248968 >> 2];
    var $cmp1 = ($1 | 0) == ($facet2 | 0);
    if ($cmp1) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[5248976 >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2 + 20 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $tobool2 = ($5 | 0) < 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    _qh_fprintf(5297544);
    var $6 = HEAP32[5248968 >> 2];
    var $cmp5 = ($6 | 0) == ($facet2 | 0);
    if ($cmp5) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = HEAP32[5248976 >> 2];
    var $tobool7 = ($7 | 0) == 0;
    if ($tobool7) {
      var $cond = 0;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $neighbors = $7 + 12 | 0;
    var $8 = HEAP32[$neighbors >> 2];
    var $tobool9 = ($8 | 0) == 0;
    if ($tobool9) {
      var $cond = 0;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $8 + 4 | 0;
    var $9 = HEAP32[$p >> 2];
    var $10 = $9;
    var $cond = $10;
    label = 11;
    break;
   case 11:
    var $cond;
    _qh_errprint($6, $cond, 0, $7);
    label = 12;
    break;
   case 12:
    var $_pr = HEAP32[5248976 >> 2];
    var $tobool13 = ($_pr | 0) == 0;
    if ($tobool13) {
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $11 = $_pr + 20 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear16 = $13 & 1073741824;
    var $tobool17 = ($bf_clear16 | 0) == 0;
    if ($tobool17) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5297368);
    label = 16;
    break;
   case 15:
    _qh_checkvertex($_pr);
    label = 16;
    break;
   case 16:
    var $14 = HEAP32[5248968 >> 2];
    var $tobool21 = ($14 | 0) == 0;
    if ($tobool21) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_checkfacet($14, 1, $waserror);
    var $15 = HEAP32[$waserror >> 2];
    var $tobool23 = ($15 | 0) == 0;
    if ($tobool23) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $16 = HEAP32[5248968 >> 2];
    _qh_errexit(5, $16, 0);
    label = 19;
    break;
   case 19:
    var $17 = HEAP32[5246976 >> 2];
    var $tobool27 = ($17 | 0) != 0;
    var $18 = HEAP32[5247036 >> 2];
    var $cmp29 = ($18 | 0) > 3;
    var $or_cond = $tobool27 | $cmp29;
    if ($or_cond) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    _qh_checkfacet($facet2, 1, $waserror);
    var $19 = HEAP32[$waserror >> 2];
    var $tobool31 = ($19 | 0) == 0;
    if ($tobool31) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_errexit(5, 0, 0);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_tracemerge["X"] = 1;
function _qh_updatetested($facet1, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $facet2 + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $3 = $2 & -134217729;
    HEAP32[$1 >> 2] = $3;
    var $ridges = $facet1 + 52 | 0;
    var $4 = HEAP32[$ridges >> 2];
    var $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool217 = ($5 | 0) == 0;
    if ($tobool217) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = $5;
    var $7 = $p;
    var $ridgep_018 = $7;
    var $8 = $6;
    label = 5;
    break;
   case 5:
    var $8;
    var $ridgep_018;
    var $incdec_ptr = $ridgep_018 + 4 | 0;
    var $9 = $8 + 12 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $12 = $11 & -33554433;
    HEAP32[$10 >> 2] = $12;
    var $13 = HEAP32[$incdec_ptr >> 2];
    var $tobool2 = ($13 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      var $ridgep_018 = $incdec_ptr;
      var $8 = $13;
      label = 5;
      break;
    }
   case 6:
    var $center = $facet2 + 36 | 0;
    var $14 = HEAP32[$center >> 2];
    var $tobool4 = ($14 | 0) == 0;
    if ($tobool4) {
      label = 18;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $vertices = $facet2 + 48 | 0;
    var $15 = HEAP32[$vertices >> 2];
    var $call = _qh_setsize($15);
    var $16 = HEAP32[$1 >> 2];
    var $bf_clear = $16 & 268435456;
    var $tobool8 = ($bf_clear | 0) == 0;
    var $17 = HEAP32[5247504 >> 2];
    var $add13 = $17 + 5 | 0;
    var $cmp = ($call | 0) > ($add13 | 0);
    if ($tobool8) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    if ($cmp) {
      label = 9;
      break;
    } else {
      var $22 = $16;
      label = 13;
      break;
    }
   case 9:
    var $18 = $16 | 268435456;
    HEAP32[$1 >> 2] = $18;
    var $19 = HEAP32[5244792 >> 2];
    var $inc = $19 + 1 | 0;
    HEAP32[5244792 >> 2] = $inc;
    var $22 = $18;
    label = 13;
    break;
   case 10:
    if ($cmp) {
      var $22 = $16;
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $cmp16 = ($call | 0) == ($17 | 0);
    var $20 = HEAP32[5249120 >> 2];
    var $tobool17 = ($20 | 0) != 0;
    var $or_cond = $cmp16 | $tobool17;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $22 = $16;
      label = 13;
      break;
    }
   case 12:
    var $21 = $16 & -268435457;
    HEAP32[$1 >> 2] = $21;
    var $22 = $21;
    label = 13;
    break;
   case 13:
    var $22;
    var $bf_clear24 = $22 & 268435456;
    var $tobool25 = ($bf_clear24 | 0) == 0;
    if ($tobool25) {
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    var $23 = HEAP32[$center >> 2];
    var $24 = $23;
    var $25 = HEAP32[5248928 >> 2];
    _qh_memfree($24, $25);
    HEAP32[$center >> 2] = 0;
    var $ridges29 = $facet2 + 52 | 0;
    var $26 = HEAP32[$ridges29 >> 2];
    var $tobool30 = ($26 | 0) == 0;
    if ($tobool30) {
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $p35 = $26 + 4 | 0;
    var $27 = HEAP32[$p35 >> 2];
    var $tobool3815 = ($27 | 0) == 0;
    if ($tobool3815) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $28 = $27;
    var $29 = $p35;
    var $ridgep_116 = $29;
    var $30 = $28;
    label = 17;
    break;
   case 17:
    var $30;
    var $ridgep_116;
    var $incdec_ptr37 = $ridgep_116 + 4 | 0;
    var $31 = $30 + 12 | 0;
    var $32 = $31;
    var $33 = HEAP32[$32 >> 2];
    var $34 = $33 & -33554433;
    HEAP32[$32 >> 2] = $34;
    var $35 = HEAP32[$incdec_ptr37 >> 2];
    var $tobool38 = ($35 | 0) == 0;
    if ($tobool38) {
      label = 18;
      break;
    } else {
      var $ridgep_116 = $incdec_ptr37;
      var $30 = $35;
      label = 17;
      break;
    }
   case 18:
    return;
  }
}
_qh_updatetested["X"] = 1;
function _qh_mergesimplex($facet1, $facet2, $mergeapex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($mergeapex | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = $facet2 + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 1024;
    var $tobool1 = ($bf_clear | 0) == 0;
    var $vertices = $facet2 + 48 | 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $3 = HEAP32[$vertices >> 2];
    _qh_newvertices($3);
    label = 5;
    break;
   case 5:
    var $vertices3 = $facet1 + 48 | 0;
    var $4 = HEAP32[$vertices3 >> 2];
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $6 = $5;
    var $7 = HEAP32[$vertices >> 2];
    var $p7 = $7 + 4 | 0;
    var $8 = HEAP32[$p7 >> 2];
    var $cmp = ($8 | 0) == ($5 | 0);
    if ($cmp) {
      var $issubset_1 = 1;
      var $apex_0 = $6;
      label = 38;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_setaddnth($vertices, 0, $5);
    var $issubset_1 = 0;
    var $apex_0 = $6;
    label = 38;
    break;
   case 7:
    var $9 = HEAP32[5244032 >> 2];
    var $inc = $9 + 1 | 0;
    HEAP32[5244032 >> 2] = $inc;
    var $vertices12 = $facet1 + 48 | 0;
    var $10 = HEAP32[$vertices12 >> 2];
    var $tobool13 = ($10 | 0) == 0;
    if ($tobool13) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $p18 = $10 + 4 | 0;
    var $11 = HEAP32[$p18 >> 2];
    var $tobool19124 = ($11 | 0) == 0;
    if ($tobool19124) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $12 = $11;
    var $13 = $p18;
    var $vertexp_0125 = $13;
    var $14 = $12;
    label = 10;
    break;
   case 10:
    var $14;
    var $vertexp_0125;
    var $incdec_ptr = $vertexp_0125 + 4 | 0;
    var $15 = $14 + 20 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 & -268435457;
    HEAP32[$16 >> 2] = $18;
    var $19 = HEAP32[$incdec_ptr >> 2];
    var $tobool19 = ($19 | 0) == 0;
    if ($tobool19) {
      label = 11;
      break;
    } else {
      var $vertexp_0125 = $incdec_ptr;
      var $14 = $19;
      label = 10;
      break;
    }
   case 11:
    var $ridges = $facet1 + 52 | 0;
    var $20 = HEAP32[$ridges >> 2];
    var $tobool22 = ($20 | 0) == 0;
    if ($tobool22) {
      label = 21;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p27 = $20 + 4 | 0;
    var $21 = $p27;
    var $ridgep_0 = $21;
    label = 13;
    break;
   case 13:
    var $ridgep_0;
    var $incdec_ptr29 = $ridgep_0 + 4 | 0;
    var $22 = HEAP32[$ridgep_0 >> 2];
    var $tobool30 = ($22 | 0) == 0;
    if ($tobool30) {
      label = 21;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $top = $22 + 4 | 0;
    var $23 = HEAP32[$top >> 2];
    var $cmp32 = ($23 | 0) == ($facet1 | 0);
    if ($cmp32) {
      label = 15;
      break;
    } else {
      var $cond = $23;
      label = 16;
      break;
    }
   case 15:
    var $bottom = $22 + 8 | 0;
    var $24 = HEAP32[$bottom >> 2];
    var $cond = $24;
    label = 16;
    break;
   case 16:
    var $cond;
    var $cmp34 = ($cond | 0) == ($facet2 | 0);
    if ($cmp34) {
      label = 17;
      break;
    } else {
      var $ridgep_0 = $incdec_ptr29;
      label = 13;
      break;
    }
   case 17:
    var $vertices36 = $22 | 0;
    var $25 = HEAP32[$vertices36 >> 2];
    var $tobool37 = ($25 | 0) == 0;
    if ($tobool37) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $p42 = $25 + 4 | 0;
    var $26 = HEAP32[$p42 >> 2];
    var $tobool45120 = ($26 | 0) == 0;
    if ($tobool45120) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $27 = $26;
    var $28 = $p42;
    var $vertexp_1121 = $28;
    var $29 = $27;
    label = 20;
    break;
   case 20:
    var $29;
    var $vertexp_1121;
    var $incdec_ptr44 = $vertexp_1121 + 4 | 0;
    var $30 = $29 + 20 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $33 = $32 | 805306368;
    HEAP32[$31 >> 2] = $33;
    var $34 = HEAP32[$incdec_ptr44 >> 2];
    var $tobool45 = ($34 | 0) == 0;
    if ($tobool45) {
      label = 21;
      break;
    } else {
      var $vertexp_1121 = $incdec_ptr44;
      var $29 = $34;
      label = 20;
      break;
    }
   case 21:
    var $35 = HEAP32[$vertices12 >> 2];
    var $tobool55 = ($35 | 0) == 0;
    if ($tobool55) {
      var $vertex_0 = 0;
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $p60 = $35 + 4 | 0;
    var $36 = $p60;
    var $vertexp_2 = $36;
    label = 23;
    break;
   case 23:
    var $vertexp_2;
    var $37 = HEAP32[$vertexp_2 >> 2];
    var $tobool63 = ($37 | 0) == 0;
    if ($tobool63) {
      var $vertex_0 = 0;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $incdec_ptr62 = $vertexp_2 + 4 | 0;
    var $38 = $37 + 20 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $bf_clear66 = $40 & 268435456;
    var $tobool67 = ($bf_clear66 | 0) == 0;
    if ($tobool67) {
      var $vertex_0 = $37;
      label = 25;
      break;
    } else {
      var $vertexp_2 = $incdec_ptr62;
      label = 23;
      break;
    }
   case 25:
    var $vertex_0;
    var $41 = HEAP32[5247036 >> 2];
    var $cmp72 = ($41 | 0) > 3;
    if ($cmp72) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    _qh_fprintf(5251832);
    label = 27;
    break;
   case 27:
    var $vertices78 = $facet2 + 48 | 0;
    var $42 = HEAP32[$vertices78 >> 2];
    var $tobool79 = ($42 | 0) == 0;
    if ($tobool79) {
      var $vertex_i_1_ph = -1;
      label = 33;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $p84 = $42 + 4 | 0;
    var $43 = HEAP32[$p84 >> 2];
    var $call = _qh_setsize($42);
    var $cmp87117 = ($call | 0) > 0;
    if ($cmp87117) {
      label = 29;
      break;
    } else {
      var $vertex_i_1_ph = 0;
      label = 33;
      break;
    }
   case 29:
    var $44 = $vertex_0 + 20 | 0;
    var $45 = $44;
    var $46 = HEAP32[$45 >> 2];
    var $bf_clear92 = $46 & 16777215;
    var $vertex_i_0118 = 0;
    var $vertex_1_in119 = $43;
    label = 30;
    break;
   case 30:
    var $vertex_1_in119;
    var $vertex_i_0118;
    var $bf_field_offs89 = $vertex_1_in119 + 20 | 0;
    var $47 = $bf_field_offs89;
    var $48 = HEAP32[$47 >> 2];
    var $bf_clear90 = $48 & 16777215;
    var $cmp93 = $bf_clear90 >>> 0 < $bf_clear92 >>> 0;
    if ($cmp93) {
      var $vertex_i_1_ph = $vertex_i_0118;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $cmp100 = ($bf_clear90 | 0) == ($bf_clear92 | 0);
    if ($cmp100) {
      var $issubset_0103 = 1;
      label = 34;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $inc104 = $vertex_i_0118 + 1 | 0;
    var $49 = HEAP32[$vertices78 >> 2];
    var $p108 = $49 + 4 + ($inc104 << 2) | 0;
    var $50 = HEAP32[$p108 >> 2];
    var $cmp87 = ($inc104 | 0) < ($call | 0);
    if ($cmp87) {
      var $vertex_i_0118 = $inc104;
      var $vertex_1_in119 = $50;
      label = 30;
      break;
    } else {
      var $vertex_i_1_ph = $inc104;
      label = 33;
      break;
    }
   case 33:
    var $vertex_i_1_ph;
    var $51 = $vertex_0;
    _qh_setaddnth($vertices78, $vertex_i_1_ph, $51);
    var $issubset_0103 = 0;
    label = 34;
    break;
   case 34:
    var $issubset_0103;
    var $52 = $facet2 + 76 | 0;
    var $53 = $52;
    var $54 = HEAP32[$53 >> 2];
    var $bf_clear116 = $54 & 1024;
    var $tobool117 = ($bf_clear116 | 0) == 0;
    if ($tobool117) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $55 = HEAP32[$vertices78 >> 2];
    _qh_newvertices($55);
    var $issubset_1 = $issubset_0103;
    var $apex_0 = $vertex_0;
    label = 38;
    break;
   case 36:
    var $56 = $vertex_0 + 20 | 0;
    var $57 = $56;
    var $58 = HEAP32[$57 >> 2];
    var $tobool123 = ($58 | 0) < 0;
    if ($tobool123) {
      var $issubset_1 = $issubset_0103;
      var $apex_0 = $vertex_0;
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    _qh_removevertex($vertex_0);
    _qh_appendvertex($vertex_0);
    var $issubset_1 = $issubset_0103;
    var $apex_0 = $vertex_0;
    label = 38;
    break;
   case 38:
    var $apex_0;
    var $issubset_1;
    var $59 = HEAP32[5247036 >> 2];
    var $cmp128 = ($59 | 0) > 3;
    if ($cmp128) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _qh_fprintf(5251476);
    label = 40;
    break;
   case 40:
    var $vertices132 = $facet1 + 48 | 0;
    var $60 = HEAP32[$vertices132 >> 2];
    var $tobool133 = ($60 | 0) == 0;
    if ($tobool133) {
      label = 48;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $p138 = $60 + 4 | 0;
    var $61 = HEAP32[$p138 >> 2];
    var $tobool141114 = ($61 | 0) == 0;
    if ($tobool141114) {
      label = 48;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $62 = $61;
    var $incdec_ptr140113126 = $p138 + 4 | 0;
    var $incdec_ptr140113 = $incdec_ptr140113126;
    var $tobool144 = ($issubset_1 | 0) == 0;
    var $63 = $facet1;
    var $64 = $facet2;
    var $incdec_ptr140115 = $incdec_ptr140113;
    var $65 = $62;
    label = 43;
    break;
   case 43:
    var $65;
    var $incdec_ptr140115;
    var $cmp143 = ($65 | 0) == ($apex_0 | 0);
    var $or_cond = $cmp143 & $tobool144;
    var $neighbors = $65 + 12 | 0;
    var $66 = HEAP32[$neighbors >> 2];
    if ($or_cond) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    _qh_setreplace($66, $63, $64);
    label = 47;
    break;
   case 45:
    var $call148 = _qh_setdel($66, $63);
    var $67 = HEAP32[$neighbors >> 2];
    var $p152 = $67 + 8 | 0;
    var $68 = HEAP32[$p152 >> 2];
    var $tobool153 = ($68 | 0) == 0;
    if ($tobool153) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    _qh_mergevertex_del($65, $facet2);
    label = 47;
    break;
   case 47:
    var $incdec_ptr140 = $incdec_ptr140115 + 4 | 0;
    var $69 = HEAP32[$incdec_ptr140115 >> 2];
    var $tobool141 = ($69 | 0) == 0;
    if ($tobool141) {
      label = 48;
      break;
    } else {
      var $incdec_ptr140115 = $incdec_ptr140;
      var $65 = $69;
      label = 43;
      break;
    }
   case 48:
    var $70 = HEAP32[5247036 >> 2];
    var $cmp159 = ($70 | 0) > 3;
    if ($cmp159) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    _qh_fprintf(5251240);
    label = 50;
    break;
   case 50:
    var $71 = HEAP32[5249152 >> 2];
    var $inc164 = $71 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc164;
    var $neighbors165 = $facet2 + 56 | 0;
    var $72 = HEAP32[$neighbors165 >> 2];
    var $tobool166 = ($72 | 0) == 0;
    if ($tobool166) {
      label = 55;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $p171 = $72 + 4 | 0;
    var $73 = HEAP32[$p171 >> 2];
    var $tobool174111 = ($73 | 0) == 0;
    if ($tobool174111) {
      label = 55;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $74 = $73;
    var $75 = $p171;
    var $neighborp_0112 = $75;
    var $77 = $74;
    var $76 = $inc164;
    label = 53;
    break;
   case 53:
    var $76;
    var $77;
    var $neighborp_0112;
    var $incdec_ptr173 = $neighborp_0112 + 4 | 0;
    var $visitid = $77 + 68 | 0;
    HEAP32[$visitid >> 2] = $76;
    var $78 = HEAP32[$incdec_ptr173 >> 2];
    var $tobool174 = ($78 | 0) == 0;
    if ($tobool174) {
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $_pre2 = HEAP32[5249152 >> 2];
    var $neighborp_0112 = $incdec_ptr173;
    var $77 = $78;
    var $76 = $_pre2;
    label = 53;
    break;
   case 55:
    var $ridges178 = $facet1 + 52 | 0;
    var $79 = HEAP32[$ridges178 >> 2];
    var $p184 = $79 + 4 | 0;
    var $80 = HEAP32[$p184 >> 2];
    var $tobool187109 = ($80 | 0) == 0;
    if ($tobool187109) {
      var $105 = $79;
      label = 73;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $81 = $80;
    var $incdec_ptr186108127 = $p184 + 4 | 0;
    var $incdec_ptr186108 = $incdec_ptr186108127;
    var $ridges199 = $facet2 + 52 | 0;
    var $82 = $facet1;
    var $83 = $facet2;
    var $incdec_ptr186110 = $incdec_ptr186108;
    var $84 = $81;
    label = 57;
    break;
   case 57:
    var $84;
    var $incdec_ptr186110;
    var $top189 = $84 + 4 | 0;
    var $85 = HEAP32[$top189 >> 2];
    var $cmp190 = ($85 | 0) == ($facet1 | 0);
    if ($cmp190) {
      label = 58;
      break;
    } else {
      var $cond196 = $85;
      label = 59;
      break;
    }
   case 58:
    var $bottom192 = $84 + 8 | 0;
    var $86 = HEAP32[$bottom192 >> 2];
    var $cond196 = $86;
    label = 59;
    break;
   case 59:
    var $cond196;
    var $cmp197 = ($cond196 | 0) == ($facet2 | 0);
    if ($cmp197) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $87 = HEAP32[$ridges199 >> 2];
    var $88 = $84;
    var $call200 = _qh_setdel($87, $88);
    var $vertices201 = $84 | 0;
    _qh_setfree($vertices201);
    _qh_memfree($88, 16);
    var $89 = HEAP32[$neighbors165 >> 2];
    var $call203 = _qh_setdel($89, $82);
    label = 70;
    break;
   case 61:
    var $90 = $84;
    _qh_setappend($ridges199, $90);
    var $visitid206 = $cond196 + 68 | 0;
    var $91 = HEAP32[$visitid206 >> 2];
    var $92 = HEAP32[5249152 >> 2];
    var $cmp207 = ($91 | 0) == ($92 | 0);
    if ($cmp207) {
      label = 63;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $93 = $cond196;
    _qh_setappend($neighbors165, $93);
    var $neighbors210 = $cond196 + 56 | 0;
    var $94 = HEAP32[$neighbors210 >> 2];
    _qh_setreplace($94, $82, $83);
    var $95 = HEAP32[5249152 >> 2];
    HEAP32[$visitid206 >> 2] = $95;
    label = 68;
    break;
   case 63:
    var $96 = $cond196 + 76 | 0;
    var $97 = $96;
    var $98 = HEAP32[$97 >> 2];
    var $bf_clear214 = $98 & 8192;
    var $tobool215 = ($bf_clear214 | 0) == 0;
    if ($tobool215) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    _qh_makeridges($cond196);
    label = 65;
    break;
   case 65:
    var $neighbors218 = $cond196 + 56 | 0;
    var $99 = HEAP32[$neighbors218 >> 2];
    var $p221 = $99 + 4 | 0;
    var $100 = HEAP32[$p221 >> 2];
    var $101 = $100;
    var $cmp222 = ($101 | 0) == ($facet1 | 0);
    if ($cmp222) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $call225 = _qh_setdel($99, $82);
    label = 68;
    break;
   case 67:
    var $call228 = _qh_setdel($99, $83);
    var $102 = HEAP32[$neighbors218 >> 2];
    _qh_setreplace($102, $82, $83);
    label = 68;
    break;
   case 68:
    var $103 = HEAP32[$top189 >> 2];
    var $cmp233 = ($103 | 0) == ($facet1 | 0);
    if ($cmp233) {
      label = 69;
      break;
    } else {
      label = 71;
      break;
    }
   case 69:
    HEAP32[$top189 >> 2] = $facet2;
    label = 70;
    break;
   case 70:
    var $incdec_ptr186 = $incdec_ptr186110 + 4 | 0;
    var $104 = HEAP32[$incdec_ptr186110 >> 2];
    var $tobool187 = ($104 | 0) == 0;
    if ($tobool187) {
      label = 72;
      break;
    } else {
      var $incdec_ptr186110 = $incdec_ptr186;
      var $84 = $104;
      label = 57;
      break;
    }
   case 71:
    var $bottom237 = $84 + 8 | 0;
    HEAP32[$bottom237 >> 2] = $facet2;
    label = 70;
    break;
   case 72:
    var $_pre = HEAP32[$ridges178 >> 2];
    var $105 = $_pre;
    label = 73;
    break;
   case 73:
    var $105;
    var $p245 = $105 + 4 | 0;
    HEAP32[$p245 >> 2] = 0;
    var $106 = HEAP32[5247036 >> 2];
    var $cmp246 = ($106 | 0) > 2;
    if ($cmp246) {
      label = 74;
      break;
    } else {
      label = 75;
      break;
    }
   case 74:
    _qh_fprintf(5251024);
    label = 75;
    break;
   case 75:
    return;
  }
}
_qh_mergesimplex["X"] = 1;
function _qh_mergefacet2d($facet1, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = $facet1 + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $2 = $1;
    var $p4 = $0 + 8 | 0;
    var $3 = HEAP32[$p4 >> 2];
    var $4 = $3;
    var $vertices5 = $facet2 + 48 | 0;
    var $5 = HEAP32[$vertices5 >> 2];
    var $p8 = $5 + 4 | 0;
    var $6 = HEAP32[$p8 >> 2];
    var $7 = $6;
    var $p12 = $5 + 8 | 0;
    var $8 = HEAP32[$p12 >> 2];
    var $9 = $8;
    var $neighbors = $facet1 + 56 | 0;
    var $10 = HEAP32[$neighbors >> 2];
    var $p15 = $10 + 4 | 0;
    var $11 = HEAP32[$p15 >> 2];
    var $12 = $11;
    var $p19 = $10 + 8 | 0;
    var $13 = HEAP32[$p19 >> 2];
    var $14 = $13;
    var $neighbors20 = $facet2 + 56 | 0;
    var $15 = HEAP32[$neighbors20 >> 2];
    var $p23 = $15 + 4 | 0;
    var $16 = HEAP32[$p23 >> 2];
    var $17 = $16;
    var $p27 = $15 + 8 | 0;
    var $18 = HEAP32[$p27 >> 2];
    var $19 = $18;
    var $cmp = ($1 | 0) == ($6 | 0);
    if ($cmp) {
      var $neighborB_0 = $12;
      var $neighborA_0 = $17;
      var $vertexA_0 = $4;
      var $vertexB_0 = $9;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp28 = ($1 | 0) == ($8 | 0);
    if ($cmp28) {
      var $neighborB_0 = $12;
      var $neighborA_0 = $19;
      var $vertexA_0 = $4;
      var $vertexB_0 = $7;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $cmp31 = ($3 | 0) == ($6 | 0);
    var $_ = $cmp31 ? $9 : $7;
    var $_49 = $cmp31 ? $17 : $19;
    var $neighborB_0 = $14;
    var $neighborA_0 = $_49;
    var $vertexA_0 = $2;
    var $vertexB_0 = $_;
    label = 5;
    break;
   case 5:
    var $vertexB_0;
    var $vertexA_0;
    var $neighborA_0;
    var $neighborB_0;
    var $20 = $vertexA_0;
    var $21 = $vertexA_0 + 20 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $bf_clear = $23 & 16777215;
    var $24 = $vertexB_0;
    var $25 = $vertexB_0 + 20 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $bf_clear37 = $27 & 16777215;
    var $cmp38 = $bf_clear >>> 0 > $bf_clear37 >>> 0;
    if ($cmp38) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    HEAP32[$p8 >> 2] = $20;
    var $28 = HEAP32[$vertices5 >> 2];
    var $p47 = $28 + 8 | 0;
    HEAP32[$p47 >> 2] = $24;
    var $cmp48 = ($vertexB_0 | 0) == ($7 | 0);
    if ($cmp48) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $29 = $facet2 + 76 | 0;
    var $30 = $29;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31 ^ 4096;
    HEAP32[$30 >> 2] = $32;
    label = 8;
    break;
   case 8:
    var $33 = $neighborA_0;
    var $34 = HEAP32[$neighbors20 >> 2];
    var $p57 = $34 + 4 | 0;
    HEAP32[$p57 >> 2] = $33;
    var $35 = $neighborB_0;
    var $36 = HEAP32[$neighbors20 >> 2];
    var $p61 = $36 + 8 | 0;
    HEAP32[$p61 >> 2] = $35;
    label = 12;
    break;
   case 9:
    HEAP32[$p8 >> 2] = $24;
    var $37 = HEAP32[$vertices5 >> 2];
    var $p70 = $37 + 8 | 0;
    HEAP32[$p70 >> 2] = $20;
    var $cmp71 = ($vertexB_0 | 0) == ($9 | 0);
    if ($cmp71) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $38 = $facet2 + 76 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $41 = $40 ^ 4096;
    HEAP32[$39 >> 2] = $41;
    label = 11;
    break;
   case 11:
    var $42 = $neighborB_0;
    var $43 = HEAP32[$neighbors20 >> 2];
    var $p84 = $43 + 4 | 0;
    HEAP32[$p84 >> 2] = $42;
    var $44 = $neighborA_0;
    var $45 = HEAP32[$neighbors20 >> 2];
    var $p88 = $45 + 8 | 0;
    HEAP32[$p88 >> 2] = $44;
    label = 12;
    break;
   case 12:
    _qh_makeridges($neighborB_0);
    var $neighbors90 = $neighborB_0 + 56 | 0;
    var $46 = HEAP32[$neighbors90 >> 2];
    var $47 = $facet1;
    var $48 = $facet2;
    _qh_setreplace($46, $47, $48);
    var $49 = HEAP32[5247036 >> 2];
    var $cmp91 = ($49 | 0) > 3;
    if ($cmp91) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5252556);
    label = 14;
    break;
   case 14:
    return;
  }
}
_qh_mergefacet2d["X"] = 1;
function _qh_mergeneighbors($facet1, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5252344);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $neighbors = $facet2 + 56 | 0;
    var $2 = HEAP32[$neighbors >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool430 = ($3 | 0) == 0;
    if ($tobool430) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = $3;
    var $5 = $p;
    var $neighborp_031 = $5;
    var $7 = $4;
    var $6 = $inc;
    label = 7;
    break;
   case 7:
    var $6;
    var $7;
    var $neighborp_031;
    var $incdec_ptr = $neighborp_031 + 4 | 0;
    var $visitid = $7 + 68 | 0;
    HEAP32[$visitid >> 2] = $6;
    var $8 = HEAP32[$incdec_ptr >> 2];
    var $tobool4 = ($8 | 0) == 0;
    if ($tobool4) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre1 = HEAP32[5249152 >> 2];
    var $neighborp_031 = $incdec_ptr;
    var $7 = $8;
    var $6 = $_pre1;
    label = 7;
    break;
   case 9:
    var $neighbors6 = $facet1 + 56 | 0;
    var $9 = HEAP32[$neighbors6 >> 2];
    var $tobool7 = ($9 | 0) == 0;
    if ($tobool7) {
      var $27 = 0;
      label = 23;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p12 = $9 + 4 | 0;
    var $10 = HEAP32[$p12 >> 2];
    var $tobool1528 = ($10 | 0) == 0;
    if ($tobool1528) {
      var $27 = $9;
      label = 23;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $11 = $10;
    var $incdec_ptr142732 = $p12 + 4 | 0;
    var $incdec_ptr1427 = $incdec_ptr142732;
    var $12 = $facet2;
    var $13 = $facet1;
    var $incdec_ptr1429 = $incdec_ptr1427;
    var $14 = $11;
    label = 12;
    break;
   case 12:
    var $14;
    var $incdec_ptr1429;
    var $visitid17 = $14 + 68 | 0;
    var $15 = HEAP32[$visitid17 >> 2];
    var $16 = HEAP32[5249152 >> 2];
    var $cmp18 = ($15 | 0) == ($16 | 0);
    if ($cmp18) {
      label = 13;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    var $17 = $14 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $bf_clear = $19 & 8192;
    var $tobool20 = ($bf_clear | 0) == 0;
    if ($tobool20) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_makeridges($14);
    label = 15;
    break;
   case 15:
    var $neighbors23 = $14 + 56 | 0;
    var $20 = HEAP32[$neighbors23 >> 2];
    var $p26 = $20 + 4 | 0;
    var $21 = HEAP32[$p26 >> 2];
    var $22 = $21;
    var $cmp27 = ($22 | 0) == ($facet1 | 0);
    if ($cmp27) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $call = _qh_setdel($20, $13);
    label = 20;
    break;
   case 17:
    var $call31 = _qh_setdel($20, $12);
    var $23 = HEAP32[$neighbors23 >> 2];
    _qh_setreplace($23, $13, $12);
    label = 20;
    break;
   case 18:
    var $cmp35 = ($14 | 0) == ($facet2 | 0);
    if ($cmp35) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $24 = $14;
    _qh_setappend($neighbors, $24);
    var $neighbors38 = $14 + 56 | 0;
    var $25 = HEAP32[$neighbors38 >> 2];
    _qh_setreplace($25, $13, $12);
    label = 20;
    break;
   case 20:
    var $26 = HEAP32[$incdec_ptr1429 >> 2];
    var $tobool15 = ($26 | 0) == 0;
    if ($tobool15) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $incdec_ptr14 = $incdec_ptr1429 + 4 | 0;
    var $incdec_ptr1429 = $incdec_ptr14;
    var $14 = $26;
    label = 12;
    break;
   case 22:
    var $_pre = HEAP32[$neighbors6 >> 2];
    var $27 = $_pre;
    label = 23;
    break;
   case 23:
    var $27;
    var $28 = $facet2;
    var $call44 = _qh_setdel($27, $28);
    var $29 = HEAP32[$neighbors >> 2];
    var $30 = $facet1;
    var $call46 = _qh_setdel($29, $30);
    return;
  }
}
_qh_mergeneighbors["X"] = 1;
function _qh_mergevertices($vertices1, $vertices2) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mergedvertices = __stackBase__;
    var $call = _qh_setsize($vertices1);
    var $0 = HEAP32[$vertices2 >> 2];
    var $call1 = _qh_setsize($0);
    var $1 = HEAP32[5247504 >> 2];
    var $add = $call + 1 | 0;
    var $sub = $add + $call1 | 0;
    var $add2 = $sub - $1 | 0;
    var $2 = HEAP32[$vertices2 >> 2];
    var $p = $2 + 4 | 0;
    var $3 = $p;
    var $call3 = _qh_settemp($add2);
    HEAP32[$mergedvertices >> 2] = $call3;
    var $tobool = ($vertices1 | 0) == 0;
    if ($tobool) {
      var $vertex2_2_ph = $3;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p6 = $vertices1 + 4 | 0;
    var $4 = HEAP32[$p6 >> 2];
    var $tobool73237 = ($4 | 0) == 0;
    if ($tobool73237) {
      var $vertex2_2_ph = $3;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = $4;
    var $incdec_ptr313641 = $p6 + 4 | 0;
    var $incdec_ptr3136 = $incdec_ptr313641;
    var $vertex2_0_ph38 = $3;
    var $incdec_ptr3139 = $incdec_ptr3136;
    var $6 = $5;
    label = 5;
    break;
   case 5:
    var $6;
    var $incdec_ptr3139;
    var $vertex2_0_ph38;
    var $incdec_ptr33 = $incdec_ptr3139;
    var $8 = $6;
    label = 7;
    break;
   case 6:
    var $vertex2_2_ph;
    var $7 = HEAP32[$vertex2_2_ph >> 2];
    var $tobool3220 = ($7 | 0) == 0;
    if ($tobool3220) {
      label = 19;
      break;
    } else {
      var $vertex2_221 = $vertex2_2_ph;
      var $25 = $7;
      label = 18;
      break;
    }
   case 7:
    var $8;
    var $incdec_ptr33;
    var $9 = HEAP32[$vertex2_0_ph38 >> 2];
    var $tobool8 = ($9 | 0) == 0;
    if ($tobool8) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $10 = $8 + 20 | 0;
    var $11 = $10;
    var $12 = HEAP32[$11 >> 2];
    var $bf_clear = $12 & 16777215;
    var $13 = $9 + 20 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear10 = $15 & 16777215;
    var $cmp = $bf_clear >>> 0 > $bf_clear10 >>> 0;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $16 = $8;
    var $vertex2_125 = $vertex2_0_ph38;
    var $_pr = $9;
    var $20 = $15;
    var $19 = $12;
    label = 11;
    break;
   case 10:
    var $17 = $8;
    _qh_setappend($mergedvertices, $17);
    var $incdec_ptr = $incdec_ptr33 + 4 | 0;
    var $18 = HEAP32[$incdec_ptr33 >> 2];
    var $tobool7 = ($18 | 0) == 0;
    if ($tobool7) {
      var $vertex2_2_ph = $vertex2_0_ph38;
      label = 6;
      break;
    } else {
      var $incdec_ptr33 = $incdec_ptr;
      var $8 = $18;
      label = 7;
      break;
    }
   case 11:
    var $19;
    var $20;
    var $_pr;
    var $vertex2_125;
    var $bf_clear14 = $20 & 16777215;
    var $bf_clear16 = $19 & 16777215;
    var $cmp17 = $bf_clear14 >>> 0 > $bf_clear16 >>> 0;
    if ($cmp17) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $incdec_ptr18 = $vertex2_125 + 4 | 0;
    var $21 = $_pr;
    _qh_setappend($mergedvertices, $21);
    var $22 = HEAP32[$incdec_ptr18 >> 2];
    var $tobool12 = ($22 | 0) == 0;
    if ($tobool12) {
      var $vertex2_123 = $incdec_ptr18;
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_phi_trans_insert = $22 + 20 | 0;
    var $_phi_trans_insert2 = $_phi_trans_insert;
    var $_pre = HEAP32[$_phi_trans_insert2 >> 2];
    var $_pre3 = HEAP32[$11 >> 2];
    var $vertex2_125 = $incdec_ptr18;
    var $_pr = $22;
    var $20 = $_pre;
    var $19 = $_pre3;
    label = 11;
    break;
   case 14:
    var $tobool19 = ($_pr | 0) == 0;
    var $cmp25 = $bf_clear14 >>> 0 < $bf_clear16 >>> 0;
    var $or_cond = $tobool19 | $cmp25;
    if ($or_cond) {
      var $vertex2_123 = $vertex2_125;
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    var $vertex2_123;
    _qh_setappend($mergedvertices, $16);
    var $vertex2_0_ph_be = $vertex2_123;
    label = 16;
    break;
   case 16:
    var $vertex2_0_ph_be;
    var $incdec_ptr31 = $incdec_ptr33 + 4 | 0;
    var $23 = HEAP32[$incdec_ptr33 >> 2];
    var $tobool732 = ($23 | 0) == 0;
    if ($tobool732) {
      var $vertex2_2_ph = $vertex2_0_ph_be;
      label = 6;
      break;
    } else {
      var $vertex2_0_ph38 = $vertex2_0_ph_be;
      var $incdec_ptr3139 = $incdec_ptr31;
      var $6 = $23;
      label = 5;
      break;
    }
   case 17:
    var $24 = $_pr;
    var $incdec_ptr28 = $vertex2_125 + 4 | 0;
    _qh_setappend($mergedvertices, $24);
    var $vertex2_0_ph_be = $incdec_ptr28;
    label = 16;
    break;
   case 18:
    var $25;
    var $vertex2_221;
    var $incdec_ptr34 = $vertex2_221 + 4 | 0;
    var $26 = $25;
    _qh_setappend($mergedvertices, $26);
    var $27 = HEAP32[$incdec_ptr34 >> 2];
    var $tobool32 = ($27 | 0) == 0;
    if ($tobool32) {
      label = 19;
      break;
    } else {
      var $vertex2_221 = $incdec_ptr34;
      var $25 = $27;
      label = 18;
      break;
    }
   case 19:
    var $28 = HEAP32[$mergedvertices >> 2];
    var $call36 = _qh_setsize($28);
    var $cmp37 = ($add2 | 0) < ($call36 | 0);
    if ($cmp37) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _qh_fprintf(5249648);
    _qh_errexit(5, 0, 0);
    label = 21;
    break;
   case 21:
    _qh_setfree($vertices2);
    HEAP32[$vertices2 >> 2] = $28;
    var $call40 = _qh_settemppop();
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_mergevertices["X"] = 1;
function _qh_mergeridges($facet1, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5252160);
    label = 4;
    break;
   case 4:
    var $ridges = $facet2 + 52 | 0;
    var $1 = HEAP32[$ridges >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 16;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool42527 = ($2 | 0) == 0;
    if ($tobool42527) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2;
    var $4 = $p;
    var $incdec_ptr2630 = $p + 4 | 0;
    var $incdec_ptr26 = $incdec_ptr2630;
    var $ridgep_0_ph28 = $4;
    var $incdec_ptr29 = $incdec_ptr26;
    var $6 = $3;
    label = 8;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr29 + 4 | 0;
    var $5 = HEAP32[$incdec_ptr29 >> 2];
    var $tobool425 = ($5 | 0) == 0;
    if ($tobool425) {
      label = 16;
      break;
    } else {
      var $ridgep_0_ph28 = $incdec_ptr29;
      var $incdec_ptr29 = $incdec_ptr;
      var $6 = $5;
      label = 8;
      break;
    }
   case 8:
    var $6;
    var $incdec_ptr29;
    var $ridgep_0_ph28;
    var $7 = $6;
    label = 9;
    break;
   case 9:
    var $7;
    var $top = $7 + 4 | 0;
    var $8 = HEAP32[$top >> 2];
    var $cmp5 = ($8 | 0) == ($facet1 | 0);
    if ($cmp5) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $bottom = $7 + 8 | 0;
    var $9 = HEAP32[$bottom >> 2];
    var $cmp6 = ($9 | 0) == ($facet1 | 0);
    if ($cmp6) {
      label = 11;
      break;
    } else {
      label = 7;
      break;
    }
   case 11:
    var $vertices = $7 | 0;
    var $10 = HEAP32[$vertices >> 2];
    var $tobool8 = ($10 | 0) == 0;
    if ($tobool8) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p13 = $10 + 4 | 0;
    var $11 = HEAP32[$p13 >> 2];
    var $tobool1622 = ($11 | 0) == 0;
    if ($tobool1622) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $12 = $11;
    var $13 = $p13;
    var $vertexp_023 = $13;
    var $14 = $12;
    label = 14;
    break;
   case 14:
    var $14;
    var $vertexp_023;
    var $incdec_ptr15 = $vertexp_023 + 4 | 0;
    var $15 = $14 + 20 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 | 536870912;
    HEAP32[$16 >> 2] = $18;
    var $19 = HEAP32[$incdec_ptr15 >> 2];
    var $tobool16 = ($19 | 0) == 0;
    if ($tobool16) {
      label = 15;
      break;
    } else {
      var $vertexp_023 = $incdec_ptr15;
      var $14 = $19;
      label = 14;
      break;
    }
   case 15:
    _qh_delridge($7);
    var $20 = HEAP32[$ridgep_0_ph28 >> 2];
    var $tobool4 = ($20 | 0) == 0;
    if ($tobool4) {
      label = 16;
      break;
    } else {
      var $7 = $20;
      label = 9;
      break;
    }
   case 16:
    var $ridges23 = $facet1 + 52 | 0;
    var $21 = HEAP32[$ridges23 >> 2];
    var $tobool24 = ($21 | 0) == 0;
    if ($tobool24) {
      label = 23;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p29 = $21 + 4 | 0;
    var $22 = HEAP32[$p29 >> 2];
    var $tobool3220 = ($22 | 0) == 0;
    if ($tobool3220) {
      label = 23;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $23 = $22;
    var $incdec_ptr311931 = $p29 + 4 | 0;
    var $incdec_ptr3119 = $incdec_ptr311931;
    var $incdec_ptr3121 = $incdec_ptr3119;
    var $24 = $23;
    label = 19;
    break;
   case 19:
    var $24;
    var $incdec_ptr3121;
    var $top34 = $24 + 4 | 0;
    var $25 = HEAP32[$top34 >> 2];
    var $cmp35 = ($25 | 0) == ($facet1 | 0);
    if ($cmp35) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAP32[$top34 >> 2] = $facet2;
    label = 22;
    break;
   case 21:
    var $bottom38 = $24 + 8 | 0;
    HEAP32[$bottom38 >> 2] = $facet2;
    label = 22;
    break;
   case 22:
    var $26 = $24;
    _qh_setappend($ridges, $26);
    var $incdec_ptr31 = $incdec_ptr3121 + 4 | 0;
    var $27 = HEAP32[$incdec_ptr3121 >> 2];
    var $tobool32 = ($27 | 0) == 0;
    if ($tobool32) {
      label = 23;
      break;
    } else {
      var $incdec_ptr3121 = $incdec_ptr31;
      var $24 = $27;
      label = 19;
      break;
    }
   case 23:
    return;
  }
}
_qh_mergeridges["X"] = 1;
function _qh_mergevertex_neighbors($facet1, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5250308);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248976 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5250140);
    var $2 = HEAP32[5248976 >> 2];
    _qh_errprint(0, 0, 0, $2);
    label = 6;
    break;
   case 6:
    var $vertices = $facet1 + 48 | 0;
    var $3 = HEAP32[$vertices >> 2];
    var $tobool6 = ($3 | 0) == 0;
    if ($tobool6) {
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p11 = $3 + 4 | 0;
    var $4 = HEAP32[$p11 >> 2];
    var $tobool1213 = ($4 | 0) == 0;
    if ($tobool1213) {
      label = 14;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $5 = $4;
    var $incdec_ptr1215 = $p11 + 4 | 0;
    var $incdec_ptr12 = $incdec_ptr1215;
    var $6 = $facet1;
    var $7 = $facet2;
    var $incdec_ptr14 = $incdec_ptr12;
    var $8 = $5;
    label = 9;
    break;
   case 9:
    var $8;
    var $incdec_ptr14;
    var $9 = $8 + 16 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $12 = HEAP32[5249156 >> 2];
    var $13 = $12 ^ $11;
    var $14 = $13 & 2147483647;
    var $cmp14 = ($14 | 0) == 0;
    var $neighbors16 = $8 + 12 | 0;
    var $15 = HEAP32[$neighbors16 >> 2];
    if ($cmp14) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_setreplace($15, $6, $7);
    label = 13;
    break;
   case 11:
    var $call = _qh_setdel($15, $6);
    var $16 = HEAP32[$neighbors16 >> 2];
    var $p21 = $16 + 8 | 0;
    var $17 = HEAP32[$p21 >> 2];
    var $tobool22 = ($17 | 0) == 0;
    if ($tobool22) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_mergevertex_del($8, $facet2);
    label = 13;
    break;
   case 13:
    var $incdec_ptr = $incdec_ptr14 + 4 | 0;
    var $18 = HEAP32[$incdec_ptr14 >> 2];
    var $tobool12 = ($18 | 0) == 0;
    if ($tobool12) {
      label = 14;
      break;
    } else {
      var $incdec_ptr14 = $incdec_ptr;
      var $8 = $18;
      label = 9;
      break;
    }
   case 14:
    var $19 = HEAP32[5248976 >> 2];
    var $tobool27 = ($19 | 0) == 0;
    if ($tobool27) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_errprint(0, 0, 0, $19);
    label = 16;
    break;
   case 16:
    return;
  }
}
_qh_mergevertex_neighbors["X"] = 1;
function _qh_mergevertex_del($vertex, $facet2) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5244040 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5244040 >> 2] = $inc;
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5250604);
    label = 4;
    break;
   case 4:
    var $vertices = $facet2 + 48 | 0;
    var $2 = HEAP32[$vertices >> 2];
    var $3 = $vertex;
    _qh_setdelsorted($2, $3);
    var $4 = $vertex + 20 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $7 = $6 | 1073741824;
    HEAP32[$5 >> 2] = $7;
    _qh_setappend(5249184, $3);
    return;
  }
}
function _qh_neighbor_intersections($vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $intersect = __stackBase__;
    var $neighbors = $vertex + 12 | 0;
    var $0 = HEAP32[$neighbors >> 2];
    var $tobool = ($0 | 0) == 0;
    var $p9_pre = $0 + 4 | 0;
    if ($tobool) {
      var $p9_pre_phi = $p9_pre;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = $p9_pre;
    var $neighborp_0 = $1;
    label = 4;
    break;
   case 4:
    var $neighborp_0;
    var $2 = HEAP32[$neighborp_0 >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      var $p9_pre_phi = $p9_pre;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $3 = $2 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 8192;
    var $tobool3 = ($bf_clear | 0) == 0;
    if ($tobool3) {
      var $neighborp_0 = $incdec_ptr;
      label = 4;
      break;
    } else {
      var $retval_0 = 0;
      label = 18;
      break;
    }
   case 6:
    var $p9_pre_phi;
    var $6 = HEAP32[$p9_pre_phi >> 2];
    var $p13 = $0 + 8 | 0;
    var $7 = HEAP32[$p13 >> 2];
    var $8 = HEAP32[5243848 >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[5243848 >> 2] = $inc;
    var $tobool14 = ($6 | 0) == 0;
    if ($tobool14) {
      var $retval_0 = 0;
      label = 18;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $tobool17 = ($7 | 0) == 0;
    var $vertices19 = $6 + 48 | 0;
    var $9 = $vertices19;
    var $10 = HEAP32[$9 >> 2];
    if ($tobool17) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $call = _qh_setcopy($10, 0);
    var $storemerge = $call;
    label = 10;
    break;
   case 9:
    var $vertices20 = $7 + 48 | 0;
    var $11 = $vertices20;
    var $12 = HEAP32[$11 >> 2];
    var $call21 = _qh_vertexintersect_new($10, $12);
    var $storemerge = $call21;
    label = 10;
    break;
   case 10:
    var $storemerge;
    HEAP32[$intersect >> 2] = $storemerge;
    _qh_settemppush($storemerge);
    var $13 = $vertex;
    _qh_setdelsorted($storemerge, $13);
    var $14 = HEAP32[$neighbors >> 2];
    var $tobool25 = ($14 | 0) == 0;
    if ($tobool25) {
      var $26 = $storemerge;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p30 = $14 + 4 | 0;
    var $15 = HEAP32[$p30 >> 2];
    var $call32 = _qh_setsize($14);
    var $cmp15 = ($call32 | 0) > 0;
    if ($cmp15) {
      var $neighbor_0_in16 = $15;
      var $neighbor_i_017 = 0;
      var $16 = $storemerge;
      label = 12;
      break;
    } else {
      var $26 = $storemerge;
      label = 16;
      break;
    }
   case 12:
    var $16;
    var $neighbor_i_017;
    var $neighbor_0_in16;
    var $cmp35 = ($neighbor_i_017 | 0) > 1;
    if ($cmp35) {
      label = 13;
      break;
    } else {
      var $23 = $16;
      label = 15;
      break;
    }
   case 13:
    var $17 = HEAP32[5243848 >> 2];
    var $inc37 = $17 + 1 | 0;
    HEAP32[5243848 >> 2] = $inc37;
    var $vertices38 = $neighbor_0_in16 + 48 | 0;
    var $18 = $vertices38;
    var $19 = HEAP32[$18 >> 2];
    _qh_vertexintersect($intersect, $19);
    var $20 = HEAP32[$intersect >> 2];
    var $p41 = $20 + 4 | 0;
    var $21 = HEAP32[$p41 >> 2];
    var $tobool42 = ($21 | 0) == 0;
    if ($tobool42) {
      label = 14;
      break;
    } else {
      var $23 = $20;
      label = 15;
      break;
    }
   case 14:
    var $22 = HEAP32[5243832 >> 2];
    var $inc44 = $22 + 1 | 0;
    HEAP32[5243832 >> 2] = $inc44;
    _qh_settempfree($intersect);
    var $retval_0 = 0;
    label = 18;
    break;
   case 15:
    var $23;
    var $inc47 = $neighbor_i_017 + 1 | 0;
    var $24 = HEAP32[$neighbors >> 2];
    var $p51 = $24 + 4 + ($inc47 << 2) | 0;
    var $25 = HEAP32[$p51 >> 2];
    var $cmp = ($inc47 | 0) < ($call32 | 0);
    if ($cmp) {
      var $neighbor_0_in16 = $25;
      var $neighbor_i_017 = $inc47;
      var $16 = $23;
      label = 12;
      break;
    } else {
      var $26 = $23;
      label = 16;
      break;
    }
   case 16:
    var $26;
    var $27 = HEAP32[5247036 >> 2];
    var $cmp54 = ($27 | 0) > 2;
    if ($cmp54) {
      label = 17;
      break;
    } else {
      var $retval_0 = $26;
      label = 18;
      break;
    }
   case 17:
    var $call56 = _qh_setsize($26);
    _qh_fprintf(5249388);
    var $retval_0 = $26;
    label = 18;
    break;
   case 18:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_neighbor_intersections["X"] = 1;
function _qh_remove_extravertices($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5301604);
    label = 4;
    break;
   case 4:
    var $vertices = $facet + 48 | 0;
    var $1 = HEAP32[$vertices >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool331 = ($2 | 0) == 0;
    if ($tobool331) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2;
    var $4 = $p;
    var $vertexp_032 = $4;
    var $5 = $3;
    label = 7;
    break;
   case 7:
    var $5;
    var $vertexp_032;
    var $incdec_ptr = $vertexp_032 + 4 | 0;
    var $6 = $5 + 20 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 & -268435457;
    HEAP32[$7 >> 2] = $9;
    var $10 = HEAP32[$incdec_ptr >> 2];
    var $tobool3 = ($10 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      var $vertexp_032 = $incdec_ptr;
      var $5 = $10;
      label = 7;
      break;
    }
   case 8:
    var $ridges = $facet + 52 | 0;
    var $11 = HEAP32[$ridges >> 2];
    var $tobool5 = ($11 | 0) == 0;
    if ($tobool5) {
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $p10 = $11 + 4 | 0;
    var $12 = HEAP32[$p10 >> 2];
    var $tobool1329 = ($12 | 0) == 0;
    if ($tobool1329) {
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $13 = $12;
    var $incdec_ptr122838 = $p10 + 4 | 0;
    var $incdec_ptr1228 = $incdec_ptr122838;
    var $incdec_ptr1230 = $incdec_ptr1228;
    var $14 = $13;
    label = 11;
    break;
   case 11:
    var $14;
    var $incdec_ptr1230;
    var $vertices15 = $14 | 0;
    var $15 = HEAP32[$vertices15 >> 2];
    var $tobool16 = ($15 | 0) == 0;
    if ($tobool16) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $incdec_ptr12 = $incdec_ptr1230 + 4 | 0;
    var $16 = HEAP32[$incdec_ptr1230 >> 2];
    var $tobool13 = ($16 | 0) == 0;
    if ($tobool13) {
      label = 16;
      break;
    } else {
      var $incdec_ptr1230 = $incdec_ptr12;
      var $14 = $16;
      label = 11;
      break;
    }
   case 13:
    var $p21 = $15 + 4 | 0;
    var $17 = HEAP32[$p21 >> 2];
    var $tobool2426 = ($17 | 0) == 0;
    if ($tobool2426) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $18 = $17;
    var $19 = $p21;
    var $vertexp_127 = $19;
    var $20 = $18;
    label = 15;
    break;
   case 15:
    var $20;
    var $vertexp_127;
    var $incdec_ptr23 = $vertexp_127 + 4 | 0;
    var $21 = $20 + 20 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 | 268435456;
    HEAP32[$22 >> 2] = $24;
    var $25 = HEAP32[$incdec_ptr23 >> 2];
    var $tobool24 = ($25 | 0) == 0;
    if ($tobool24) {
      label = 12;
      break;
    } else {
      var $vertexp_127 = $incdec_ptr23;
      var $20 = $25;
      label = 15;
      break;
    }
   case 16:
    var $26 = HEAP32[$vertices >> 2];
    var $tobool32 = ($26 | 0) == 0;
    if ($tobool32) {
      var $foundrem_1 = 0;
      label = 28;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $p37 = $26 + 4 | 0;
    var $27 = HEAP32[$p37 >> 2];
    var $tobool402434 = ($27 | 0) == 0;
    if ($tobool402434) {
      var $foundrem_1 = 0;
      label = 28;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $28 = $27;
    var $29 = $p37;
    var $30 = $facet;
    var $vertexp_2_ph35 = $29;
    var $foundrem_0_ph36 = 0;
    var $32 = $28;
    label = 20;
    break;
   case 19:
    var $31 = HEAP32[$incdec_ptr39 >> 2];
    var $tobool4024 = ($31 | 0) == 0;
    if ($tobool4024) {
      var $foundrem_1 = $foundrem_025;
      label = 28;
      break;
    } else {
      var $vertexp_2_ph35 = $incdec_ptr39;
      var $foundrem_0_ph36 = $foundrem_025;
      var $32 = $31;
      label = 20;
      break;
    }
   case 20:
    var $32;
    var $foundrem_0_ph36;
    var $vertexp_2_ph35;
    var $incdec_ptr39 = $vertexp_2_ph35 + 4 | 0;
    var $foundrem_025 = $foundrem_0_ph36;
    var $33 = $32;
    label = 21;
    break;
   case 21:
    var $33;
    var $foundrem_025;
    var $34 = $33;
    var $35 = $33 + 20 | 0;
    var $36 = $35;
    var $37 = HEAP32[$36 >> 2];
    var $bf_clear = $37 & 268435456;
    var $tobool43 = ($bf_clear | 0) == 0;
    if ($tobool43) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 22:
    var $38 = HEAP32[5244384 >> 2];
    var $inc = $38 + 1 | 0;
    HEAP32[5244384 >> 2] = $inc;
    var $39 = HEAP32[$vertices >> 2];
    _qh_setdelsorted($39, $34);
    var $neighbors = $33 + 12 | 0;
    var $40 = HEAP32[$neighbors >> 2];
    var $call46 = _qh_setdel($40, $30);
    var $41 = HEAP32[$neighbors >> 2];
    var $call48 = _qh_setsize($41);
    var $tobool49 = ($call48 | 0) == 0;
    if ($tobool49) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $42 = HEAP32[$36 >> 2];
    var $43 = $42 | 1073741824;
    HEAP32[$36 >> 2] = $43;
    _qh_setappend(5249184, $34);
    var $44 = HEAP32[5244392 >> 2];
    var $inc52 = $44 + 1 | 0;
    HEAP32[5244392 >> 2] = $inc52;
    var $45 = HEAP32[5247036 >> 2];
    var $cmp53 = ($45 | 0) > 1;
    if ($cmp53) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    _qh_fprintf(5301348);
    label = 26;
    break;
   case 25:
    var $46 = HEAP32[5247036 >> 2];
    var $cmp58 = ($46 | 0) > 2;
    if ($cmp58) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $47 = HEAP32[$vertexp_2_ph35 >> 2];
    var $tobool40 = ($47 | 0) == 0;
    if ($tobool40) {
      var $foundrem_1 = 1;
      label = 28;
      break;
    } else {
      var $foundrem_025 = 1;
      var $33 = $47;
      label = 21;
      break;
    }
   case 27:
    _qh_fprintf(5300996);
    label = 26;
    break;
   case 28:
    var $foundrem_1;
    return $foundrem_1;
  }
}
_qh_remove_extravertices["X"] = 1;
function _qh_rename_sharedvertex($vertex, $facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $ridges = __stackBase__ + 4;
    var $neighbors = $vertex + 12 | 0;
    var $0 = HEAP32[$neighbors >> 2];
    var $call = _qh_setsize($0);
    var $cmp = ($call | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $1 = HEAP32[$neighbors >> 2];
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $3 = $2;
    var $cmp2 = ($3 | 0) == ($facet | 0);
    if ($cmp2) {
      label = 4;
      break;
    } else {
      var $neighborA_2 = $3;
      label = 19;
      break;
    }
   case 4:
    var $p7 = $1 + 8 | 0;
    var $4 = HEAP32[$p7 >> 2];
    var $5 = $4;
    var $neighborA_2 = $5;
    label = 19;
    break;
   case 5:
    var $6 = HEAP32[5247504 >> 2];
    var $cmp8 = ($6 | 0) == 3;
    if ($cmp8) {
      var $retval_0 = 0;
      label = 24;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $7 = HEAP32[5249152 >> 2];
    var $inc = $7 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $neighbors11 = $facet + 56 | 0;
    var $8 = HEAP32[$neighbors11 >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p16 = $8 + 4 | 0;
    var $9 = HEAP32[$p16 >> 2];
    var $tobool1735 = ($9 | 0) == 0;
    if ($tobool1735) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $10 = $9;
    var $11 = $p16;
    var $neighborp_036 = $11;
    var $13 = $10;
    var $12 = $inc;
    label = 9;
    break;
   case 9:
    var $12;
    var $13;
    var $neighborp_036;
    var $incdec_ptr = $neighborp_036 + 4 | 0;
    var $visitid = $13 + 68 | 0;
    HEAP32[$visitid >> 2] = $12;
    var $14 = HEAP32[$incdec_ptr >> 2];
    var $tobool17 = ($14 | 0) == 0;
    if ($tobool17) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre1 = HEAP32[5249152 >> 2];
    var $neighborp_036 = $incdec_ptr;
    var $13 = $14;
    var $12 = $_pre1;
    label = 9;
    break;
   case 11:
    var $15 = HEAP32[$neighbors >> 2];
    var $tobool20 = ($15 | 0) == 0;
    if ($tobool20) {
      label = 18;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p25 = $15 + 4 | 0;
    var $16 = $p25;
    var $17 = HEAP32[5249152 >> 2];
    var $neighborA_0_ph = 0;
    var $neighborp_1_ph = $16;
    label = 13;
    break;
   case 13:
    var $neighborp_1_ph;
    var $neighborA_0_ph;
    var $neighborp_1 = $neighborp_1_ph;
    label = 14;
    break;
   case 14:
    var $neighborp_1;
    var $incdec_ptr27 = $neighborp_1 + 4 | 0;
    var $18 = HEAP32[$neighborp_1 >> 2];
    var $tobool28 = ($18 | 0) == 0;
    if ($tobool28) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $visitid30 = $18 + 68 | 0;
    var $19 = HEAP32[$visitid30 >> 2];
    var $cmp31 = ($19 | 0) == ($17 | 0);
    if ($cmp31) {
      label = 16;
      break;
    } else {
      var $neighborp_1 = $incdec_ptr27;
      label = 14;
      break;
    }
   case 16:
    var $tobool33 = ($neighborA_0_ph | 0) == 0;
    if ($tobool33) {
      var $neighborA_0_ph = $18;
      var $neighborp_1_ph = $incdec_ptr27;
      label = 13;
      break;
    } else {
      var $retval_0 = 0;
      label = 24;
      break;
    }
   case 17:
    var $tobool39 = ($neighborA_0_ph | 0) == 0;
    if ($tobool39) {
      label = 18;
      break;
    } else {
      var $neighborA_2 = $neighborA_0_ph;
      label = 19;
      break;
    }
   case 18:
    _qh_fprintf(5300800);
    _qh_errprint($facet, 0, 0, $vertex);
    _qh_errexit(5, 0, 0);
    var $neighborA_2 = 0;
    label = 19;
    break;
   case 19:
    var $neighborA_2;
    var $20 = HEAP32[5248936 >> 2];
    var $call44 = _qh_settemp($20);
    HEAP32[$ridges >> 2] = $call44;
    var $21 = HEAP32[5249152 >> 2];
    var $inc45 = $21 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc45;
    var $visitid46 = $neighborA_2 + 68 | 0;
    HEAP32[$visitid46 >> 2] = $inc45;
    _qh_vertexridges_facet($vertex, $facet, $ridges);
    var $22 = HEAP32[5247036 >> 2];
    var $cmp47 = ($22 | 0) > 1;
    var $23 = HEAP32[$ridges >> 2];
    if ($cmp47) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $call53 = _qh_setsize($23);
    _qh_fprintf(5300388);
    label = 21;
    break;
   case 21:
    var $24 = HEAP32[5243848 >> 2];
    var $inc56 = $24 + 1 | 0;
    HEAP32[5243848 >> 2] = $inc56;
    var $vertices57 = $facet + 48 | 0;
    var $25 = HEAP32[$vertices57 >> 2];
    var $vertices58 = $neighborA_2 + 48 | 0;
    var $26 = HEAP32[$vertices58 >> 2];
    var $call59 = _qh_vertexintersect_new($25, $26);
    HEAP32[$vertices >> 2] = $call59;
    var $27 = $vertex;
    var $call60 = _qh_setdel($call59, $27);
    _qh_settemppush($call59);
    var $call61 = _qh_find_newvertex($vertex, $call59, $23);
    var $tobool62 = ($call61 | 0) == 0;
    if ($tobool62) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _qh_renamevertex($vertex, $call61, $23, $facet, $neighborA_2);
    label = 23;
    break;
   case 23:
    _qh_settempfree($vertices);
    _qh_settempfree($ridges);
    var $retval_0 = $call61;
    label = 24;
    break;
   case 24:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_rename_sharedvertex["X"] = 1;
function _qh_redundant_vertex($vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $ridges = __stackBase__ + 4;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5301884);
    label = 4;
    break;
   case 4:
    var $call = _qh_neighbor_intersections($vertex);
    HEAP32[$vertices >> 2] = $call;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      var $newvertex_0 = 0;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call2 = _qh_vertexridges($vertex);
    HEAP32[$ridges >> 2] = $call2;
    var $call3 = _qh_find_newvertex($vertex, $call, $call2);
    var $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_renamevertex($vertex, $call3, $call2, 0, 0);
    label = 7;
    break;
   case 7:
    _qh_settempfree($ridges);
    _qh_settempfree($vertices);
    var $newvertex_0 = $call3;
    label = 8;
    break;
   case 8:
    var $newvertex_0;
    STACKTOP = __stackBase__;
    return $newvertex_0;
  }
}
function _qh_renamevertex($oldvertex, $newvertex, $ridges, $oldfacet, $neighborA) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 1;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = $oldvertex + 20 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 16777215;
    var $4 = HEAP32[5248972 >> 2];
    var $cmp1 = ($bf_clear | 0) == ($4 | 0);
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = $newvertex + 20 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $bf_clear4 = $7 & 16777215;
    var $cmp5 = ($bf_clear4 | 0) == ($4 | 0);
    if ($cmp5) {
      label = 5;
      break;
    } else {
      var $istrace_0 = 0;
      label = 6;
      break;
    }
   case 5:
    var $istrace_0 = 1;
    label = 6;
    break;
   case 6:
    var $istrace_0;
    var $tobool = ($ridges | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $ridges + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool740 = ($8 | 0) == 0;
    if ($tobool740) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $9 = $8;
    var $10 = $p;
    var $ridgep_041 = $10;
    var $11 = $9;
    label = 9;
    break;
   case 9:
    var $11;
    var $ridgep_041;
    var $incdec_ptr = $ridgep_041 + 4 | 0;
    _qh_renameridgevertex($11, $oldvertex, $newvertex);
    var $12 = HEAP32[$incdec_ptr >> 2];
    var $tobool7 = ($12 | 0) == 0;
    if ($tobool7) {
      label = 10;
      break;
    } else {
      var $ridgep_041 = $incdec_ptr;
      var $11 = $12;
      label = 9;
      break;
    }
   case 10:
    var $tobool9 = ($oldfacet | 0) == 0;
    if ($tobool9) {
      label = 11;
      break;
    } else {
      label = 19;
      break;
    }
   case 11:
    var $13 = HEAP32[5244400 >> 2];
    var $inc = $13 + 1 | 0;
    HEAP32[5244400 >> 2] = $inc;
    var $tobool11 = ($istrace_0 | 0) == 0;
    if ($tobool11) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5299816);
    label = 13;
    break;
   case 13:
    var $neighbors = $oldvertex + 12 | 0;
    var $14 = HEAP32[$neighbors >> 2];
    var $tobool18 = ($14 | 0) == 0;
    if ($tobool18) {
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p23 = $14 + 4 | 0;
    var $15 = HEAP32[$p23 >> 2];
    var $tobool2636 = ($15 | 0) == 0;
    if ($tobool2636) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $16 = $15;
    var $17 = $p23;
    var $18 = $oldvertex;
    var $neighborp_037 = $17;
    var $19 = $16;
    label = 16;
    break;
   case 16:
    var $19;
    var $neighborp_037;
    var $incdec_ptr25 = $neighborp_037 + 4 | 0;
    _qh_maydropneighbor($19);
    var $vertices = $19 + 48 | 0;
    var $20 = HEAP32[$vertices >> 2];
    _qh_setdelsorted($20, $18);
    var $call28 = _qh_remove_extravertices($19);
    var $tobool29 = ($call28 | 0) == 0;
    var $incdec_ptr25_neighborp_0 = $tobool29 ? $incdec_ptr25 : $neighborp_037;
    var $21 = HEAP32[$incdec_ptr25_neighborp_0 >> 2];
    var $tobool26 = ($21 | 0) == 0;
    if ($tobool26) {
      label = 17;
      break;
    } else {
      var $neighborp_037 = $incdec_ptr25_neighborp_0;
      var $19 = $21;
      label = 16;
      break;
    }
   case 17:
    var $22 = $oldvertex + 20 | 0;
    var $23 = $22;
    var $24 = HEAP32[$23 >> 2];
    var $bf_clear36 = $24 & 1073741824;
    var $tobool37 = ($bf_clear36 | 0) == 0;
    if ($tobool37) {
      label = 18;
      break;
    } else {
      label = 30;
      break;
    }
   case 18:
    var $25 = $oldvertex;
    var $26 = $24 | 1073741824;
    HEAP32[$23 >> 2] = $26;
    _qh_setappend(5249184, $25);
    label = 30;
    break;
   case 19:
    var $neighbors41 = $oldvertex + 12 | 0;
    var $27 = HEAP32[$neighbors41 >> 2];
    var $call42 = _qh_setsize($27);
    var $cmp43 = ($call42 | 0) == 2;
    if ($cmp43) {
      label = 20;
      break;
    } else {
      label = 27;
      break;
    }
   case 20:
    var $28 = HEAP32[5244416 >> 2];
    var $inc45 = $28 + 1 | 0;
    HEAP32[5244416 >> 2] = $inc45;
    var $tobool46 = ($istrace_0 | 0) == 0;
    if ($tobool46) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_fprintf(5299552);
    label = 22;
    break;
   case 22:
    var $29 = HEAP32[$neighbors41 >> 2];
    var $tobool54 = ($29 | 0) == 0;
    if ($tobool54) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $p59 = $29 + 4 | 0;
    var $30 = HEAP32[$p59 >> 2];
    var $tobool6238 = ($30 | 0) == 0;
    if ($tobool6238) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $31 = $30;
    var $32 = $p59;
    var $33 = $oldvertex;
    var $neighborp_139 = $32;
    var $34 = $31;
    label = 25;
    break;
   case 25:
    var $34;
    var $neighborp_139;
    var $incdec_ptr61 = $neighborp_139 + 4 | 0;
    var $vertices64 = $34 + 48 | 0;
    var $35 = HEAP32[$vertices64 >> 2];
    _qh_setdelsorted($35, $33);
    var $36 = HEAP32[$incdec_ptr61 >> 2];
    var $tobool62 = ($36 | 0) == 0;
    if ($tobool62) {
      label = 26;
      break;
    } else {
      var $neighborp_139 = $incdec_ptr61;
      var $34 = $36;
      label = 25;
      break;
    }
   case 26:
    var $37 = $oldvertex;
    var $38 = $oldvertex + 20 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $41 = $40 | 1073741824;
    HEAP32[$39 >> 2] = $41;
    _qh_setappend(5249184, $37);
    label = 30;
    break;
   case 27:
    var $42 = HEAP32[5244408 >> 2];
    var $inc70 = $42 + 1 | 0;
    HEAP32[5244408 >> 2] = $inc70;
    var $43 = HEAP32[5247036 >> 2];
    var $44 = $43 | $istrace_0;
    var $45 = ($44 | 0) == 0;
    if ($45) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    _qh_fprintf(5299276);
    label = 29;
    break;
   case 29:
    var $vertices82 = $oldfacet + 48 | 0;
    var $46 = HEAP32[$vertices82 >> 2];
    var $47 = $oldvertex;
    _qh_setdelsorted($46, $47);
    var $48 = HEAP32[$neighbors41 >> 2];
    var $49 = $oldfacet;
    var $call85 = _qh_setdel($48, $49);
    var $call86 = _qh_remove_extravertices($neighborA);
    label = 30;
    break;
   case 30:
    return;
  }
}
_qh_renamevertex["X"] = 1;
function _qh_vertexridges_facet($vertex, $facet, $ridges) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ridges1 = $facet + 52 | 0;
    var $0 = HEAP32[$ridges1 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool38 = ($1 | 0) == 0;
    if ($tobool38) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = $1;
    var $incdec_ptr710 = $p + 4 | 0;
    var $incdec_ptr7 = $incdec_ptr710;
    var $3 = $vertex;
    var $incdec_ptr9 = $incdec_ptr7;
    var $4 = $2;
    label = 5;
    break;
   case 5:
    var $4;
    var $incdec_ptr9;
    var $top = $4 + 4 | 0;
    var $5 = HEAP32[$top >> 2];
    var $cmp = ($5 | 0) == ($facet | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $cond = $5;
      label = 7;
      break;
    }
   case 6:
    var $bottom = $4 + 8 | 0;
    var $6 = HEAP32[$bottom >> 2];
    var $cond = $6;
    label = 7;
    break;
   case 7:
    var $cond;
    var $visitid = $cond + 68 | 0;
    var $7 = HEAP32[$visitid >> 2];
    var $8 = HEAP32[5249152 >> 2];
    var $cmp5 = ($7 | 0) == ($8 | 0);
    if ($cmp5) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    var $vertices = $4 | 0;
    var $9 = HEAP32[$vertices >> 2];
    var $call = _qh_setin($9, $3);
    var $tobool6 = ($call | 0) == 0;
    if ($tobool6) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $10 = $4;
    _qh_setappend($ridges, $10);
    label = 10;
    break;
   case 10:
    var $incdec_ptr = $incdec_ptr9 + 4 | 0;
    var $11 = HEAP32[$incdec_ptr9 >> 2];
    var $tobool3 = ($11 | 0) == 0;
    if ($tobool3) {
      label = 11;
      break;
    } else {
      var $incdec_ptr9 = $incdec_ptr;
      var $4 = $11;
      label = 5;
      break;
    }
   case 11:
    var $12 = HEAP32[5249152 >> 2];
    var $sub = $12 - 1 | 0;
    var $visitid9 = $facet + 68 | 0;
    HEAP32[$visitid9 >> 2] = $sub;
    return;
  }
}
function _qh_renameridgevertex($ridge, $oldvertex, $newvertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = $ridge | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $1 = $oldvertex;
    var $call = _qh_setindex($0, $1);
    _qh_setdelnthsorted($0, $call);
    var $2 = HEAP32[$vertices >> 2];
    var $tobool = ($2 | 0) == 0;
    if ($tobool) {
      var $nth_1 = 0;
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $2 + 4 | 0;
    var $3 = $p;
    var $4 = $newvertex + 20 | 0;
    var $5 = $4;
    var $vertexp_0 = $3;
    var $nth_0 = 0;
    label = 4;
    break;
   case 4:
    var $nth_0;
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $6 = HEAP32[$vertexp_0 >> 2];
    var $tobool5 = ($6 | 0) == 0;
    if ($tobool5) {
      var $nth_1 = $nth_0;
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $cmp = ($6 | 0) == ($newvertex | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 6:
    var $7 = HEAP32[5243368 >> 2];
    var $inc = $7 + 1 | 0;
    HEAP32[5243368 >> 2] = $inc;
    var $8 = $ridge + 12 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear = $10 & 67108864;
    var $tobool7 = ($bf_clear | 0) == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_copynonconvex($ridge);
    label = 8;
    break;
   case 8:
    _qh_delridge($ridge);
    var $11 = HEAP32[5247036 >> 2];
    var $cmp9 = ($11 | 0) > 1;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    _qh_fprintf(5300136);
    label = 15;
    break;
   case 10:
    var $12 = $6 + 20 | 0;
    var $13 = $12;
    var $14 = HEAP32[$13 >> 2];
    var $bf_clear20 = $14 & 16777215;
    var $15 = HEAP32[$5 >> 2];
    var $bf_clear22 = $15 & 16777215;
    var $cmp23 = $bf_clear20 >>> 0 < $bf_clear22 >>> 0;
    var $inc26 = $nth_0 + 1 | 0;
    if ($cmp23) {
      var $nth_1 = $nth_0;
      label = 11;
      break;
    } else {
      var $vertexp_0 = $incdec_ptr;
      var $nth_0 = $inc26;
      label = 4;
      break;
    }
   case 11:
    var $nth_1;
    var $16 = $newvertex;
    _qh_setaddnth($vertices, $nth_1, $16);
    var $sub = $call - $nth_1 | 0;
    var $ispos = ($sub | 0) > -1;
    var $neg = -$sub | 0;
    var $call29 = $ispos ? $sub : $neg;
    var $rem22 = $call29 & 1;
    var $tobool30 = ($rem22 | 0) == 0;
    if ($tobool30) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $17 = HEAP32[5247036 >> 2];
    var $cmp32 = ($17 | 0) > 2;
    if ($cmp32) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5300008);
    label = 14;
    break;
   case 14:
    var $top = $ridge + 4 | 0;
    var $18 = HEAP32[$top >> 2];
    var $bottom = $ridge + 8 | 0;
    var $19 = HEAP32[$bottom >> 2];
    HEAP32[$top >> 2] = $19;
    HEAP32[$bottom >> 2] = $18;
    label = 15;
    break;
   case 15:
    return;
  }
}
_qh_renameridgevertex["X"] = 1;
function _qh_appendfacet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248944 >> 2];
    var $1 = HEAP32[5248952 >> 2];
    var $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248952 >> 2] = $facet;
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5248948 >> 2];
    var $cmp1 = ($0 | 0) == ($2 | 0);
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5248948 >> 2] = $facet;
    label = 6;
    break;
   case 6:
    var $previous = $0 + 40 | 0;
    var $3 = HEAP32[$previous >> 2];
    var $previous4 = $facet + 40 | 0;
    HEAP32[$previous4 >> 2] = $3;
    var $next = $facet + 44 | 0;
    HEAP32[$next >> 2] = $0;
    var $4 = HEAP32[$previous >> 2];
    var $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $next8 = $4 + 44 | 0;
    HEAP32[$next8 >> 2] = $facet;
    label = 9;
    break;
   case 8:
    HEAP32[5248940 >> 2] = $facet;
    label = 9;
    break;
   case 9:
    HEAP32[$previous >> 2] = $facet;
    var $5 = HEAP32[5248992 >> 2];
    var $inc = $5 + 1 | 0;
    HEAP32[5248992 >> 2] = $inc;
    var $6 = HEAP32[5247036 >> 2];
    var $cmp11 = ($6 | 0) > 3;
    if ($cmp11) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5256768);
    label = 11;
    break;
   case 11:
    return;
  }
}
function _qh_appendvertex($vertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248984 >> 2];
    var $1 = HEAP32[5248988 >> 2];
    var $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248988 >> 2] = $vertex;
    label = 4;
    break;
   case 4:
    var $2 = $vertex + 20 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $5 = $4 | -2147483648;
    HEAP32[$3 >> 2] = $5;
    var $previous = $0 + 4 | 0;
    var $6 = HEAP32[$previous >> 2];
    var $previous1 = $vertex + 4 | 0;
    HEAP32[$previous1 >> 2] = $6;
    var $next = $vertex | 0;
    HEAP32[$next >> 2] = $0;
    var $7 = HEAP32[$previous >> 2];
    var $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $next5 = $7 | 0;
    HEAP32[$next5 >> 2] = $vertex;
    label = 7;
    break;
   case 6:
    HEAP32[5248980 >> 2] = $vertex;
    label = 7;
    break;
   case 7:
    HEAP32[$previous >> 2] = $vertex;
    var $8 = HEAP32[5248996 >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[5248996 >> 2] = $inc;
    var $9 = HEAP32[5247036 >> 2];
    var $cmp8 = ($9 | 0) > 3;
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5288508);
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_attachnewfacets() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[5249088 >> 2] = 1;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5275788);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5249152 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $visible_094 = HEAP32[5248956 >> 2];
    var $tobool95 = ($visible_094 | 0) == 0;
    if ($tobool95) {
      label = 21;
      break;
    } else {
      var $visible_096 = $visible_094;
      label = 5;
      break;
    }
   case 5:
    var $visible_096;
    var $2 = $visible_096 + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 2048;
    var $tobool1 = ($bf_clear | 0) == 0;
    if ($tobool1) {
      label = 21;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $5 = HEAP32[5249152 >> 2];
    var $visitid = $visible_096 + 68 | 0;
    HEAP32[$visitid >> 2] = $5;
    var $ridges = $visible_096 + 52 | 0;
    var $6 = HEAP32[$ridges >> 2];
    var $tobool2 = ($6 | 0) == 0;
    if ($tobool2) {
      label = 20;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool992 = ($7 | 0) == 0;
    if ($tobool992) {
      var $20 = $6;
      label = 19;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $8 = $7;
    var $incdec_ptr9199 = $p + 4 | 0;
    var $incdec_ptr91 = $incdec_ptr9199;
    var $incdec_ptr93 = $incdec_ptr91;
    var $9 = $8;
    label = 9;
    break;
   case 9:
    var $9;
    var $incdec_ptr93;
    var $top = $9 + 4 | 0;
    var $10 = HEAP32[$top >> 2];
    var $cmp11 = ($10 | 0) == ($visible_096 | 0);
    if ($cmp11) {
      label = 10;
      break;
    } else {
      var $cond = $10;
      label = 11;
      break;
    }
   case 10:
    var $bottom = $9 + 8 | 0;
    var $11 = HEAP32[$bottom >> 2];
    var $cond = $11;
    label = 11;
    break;
   case 11:
    var $cond;
    var $visitid13 = $cond + 68 | 0;
    var $12 = HEAP32[$visitid13 >> 2];
    var $13 = HEAP32[5249152 >> 2];
    var $cmp14 = ($12 | 0) == ($13 | 0);
    var $_phi_trans_insert = $cond + 76 | 0;
    var $_phi_trans_insert3 = $_phi_trans_insert;
    var $_pre4 = HEAP32[$_phi_trans_insert3 >> 2];
    if ($cmp14) {
      var $16 = $_pre4;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $14 = $_pre4 & 10240;
    var $15 = ($14 | 0) == 8192;
    if ($15) {
      var $16 = $_pre4;
      label = 13;
      break;
    } else {
      label = 17;
      break;
    }
   case 13:
    var $16;
    var $bf_clear23 = $16 & 2048;
    var $tobool24 = ($bf_clear23 | 0) == 0;
    if ($tobool24) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $_pre5 = $9;
    var $_pre_phi = $_pre5;
    label = 16;
    break;
   case 15:
    var $ridges26 = $cond + 52 | 0;
    var $17 = HEAP32[$ridges26 >> 2];
    var $18 = $9;
    var $call = _qh_setdel($17, $18);
    var $_pre_phi = $18;
    label = 16;
    break;
   case 16:
    var $_pre_phi;
    var $vertices = $9 | 0;
    _qh_setfree($vertices);
    _qh_memfree($_pre_phi, 16);
    label = 17;
    break;
   case 17:
    var $incdec_ptr = $incdec_ptr93 + 4 | 0;
    var $19 = HEAP32[$incdec_ptr93 >> 2];
    var $tobool9 = ($19 | 0) == 0;
    if ($tobool9) {
      label = 18;
      break;
    } else {
      var $incdec_ptr93 = $incdec_ptr;
      var $9 = $19;
      label = 9;
      break;
    }
   case 18:
    var $_pre = HEAP32[$ridges >> 2];
    var $20 = $_pre;
    label = 19;
    break;
   case 19:
    var $20;
    var $p33 = $20 + 4 | 0;
    HEAP32[$p33 >> 2] = 0;
    label = 20;
    break;
   case 20:
    var $neighbors = $visible_096 + 56 | 0;
    var $21 = HEAP32[$neighbors >> 2];
    var $p37 = $21 + 4 | 0;
    HEAP32[$p37 >> 2] = 0;
    var $next = $visible_096 + 44 | 0;
    var $visible_0 = HEAP32[$next >> 2];
    var $tobool = ($visible_0 | 0) == 0;
    if ($tobool) {
      label = 21;
      break;
    } else {
      var $visible_096 = $visible_0;
      label = 5;
      break;
    }
   case 21:
    var $22 = HEAP32[5247036 >> 2];
    var $cmp39 = ($22 | 0) > 0;
    if ($cmp39) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5270068);
    label = 23;
    break;
   case 23:
    var $newfacet_084 = HEAP32[5248952 >> 2];
    var $tobool4385 = ($newfacet_084 | 0) == 0;
    if ($tobool4385) {
      label = 49;
      break;
    } else {
      var $newfacet_086 = $newfacet_084;
      label = 24;
      break;
    }
   case 24:
    var $newfacet_086;
    var $next45 = $newfacet_086 + 44 | 0;
    var $23 = HEAP32[$next45 >> 2];
    var $tobool46 = ($23 | 0) == 0;
    if ($tobool46) {
      label = 49;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $neighbors49 = $newfacet_086 + 56 | 0;
    var $24 = HEAP32[$neighbors49 >> 2];
    var $p52 = $24 + 4 | 0;
    var $25 = HEAP32[$p52 >> 2];
    var $26 = $25;
    var $bf_field_offs53 = $25 + 76 | 0;
    var $27 = $bf_field_offs53;
    var $28 = HEAP32[$27 >> 2];
    var $bf_clear54 = $28 & 8192;
    var $tobool55 = ($bf_clear54 | 0) == 0;
    var $neighbors95 = $25 + 56 | 0;
    var $29 = $neighbors95;
    var $30 = HEAP32[$29 >> 2];
    var $tobool96 = ($30 | 0) == 0;
    if ($tobool55) {
      label = 39;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    if ($tobool96) {
      label = 37;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $p63 = $30 + 4 | 0;
    var $31 = HEAP32[$p63 >> 2];
    var $tobool666976 = ($31 | 0) == 0;
    if ($tobool666976) {
      label = 37;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $32 = $31;
    var $incdec_ptr656875100 = $p63 + 4 | 0;
    var $incdec_ptr656875 = $incdec_ptr656875100;
    var $vertices74 = $newfacet_086 + 48 | 0;
    var $vertices75 = $25 + 48 | 0;
    var $33 = $vertices75;
    var $visible_1_ph77 = 0;
    var $incdec_ptr656878 = $incdec_ptr656875;
    var $35 = $32;
    label = 30;
    break;
   case 29:
    var $incdec_ptr6568 = $incdec_ptr6570 + 4 | 0;
    var $34 = HEAP32[$incdec_ptr6570 >> 2];
    var $tobool6669 = ($34 | 0) == 0;
    if ($tobool6669) {
      var $visible_2 = $36;
      label = 35;
      break;
    } else {
      var $visible_1_ph77 = $36;
      var $incdec_ptr656878 = $incdec_ptr6568;
      var $35 = $34;
      label = 30;
      break;
    }
   case 30:
    var $35;
    var $incdec_ptr656878;
    var $visible_1_ph77;
    var $tobool72 = ($visible_1_ph77 | 0) == 0;
    var $incdec_ptr6570 = $incdec_ptr656878;
    var $36 = $35;
    label = 31;
    break;
   case 31:
    var $36;
    var $incdec_ptr6570;
    var $37 = $36 + 76 | 0;
    var $38 = $37;
    var $39 = HEAP32[$38 >> 2];
    var $bf_clear69 = $39 & 2048;
    var $tobool70 = ($bf_clear69 | 0) == 0;
    if ($tobool70) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $incdec_ptr65 = $incdec_ptr6570 + 4 | 0;
    var $40 = HEAP32[$incdec_ptr6570 >> 2];
    var $tobool66 = ($40 | 0) == 0;
    if ($tobool66) {
      var $visible_2 = $visible_1_ph77;
      label = 35;
      break;
    } else {
      var $incdec_ptr6570 = $incdec_ptr65;
      var $36 = $40;
      label = 31;
      break;
    }
   case 33:
    if ($tobool72) {
      label = 29;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $41 = HEAP32[$vertices74 >> 2];
    var $42 = HEAP32[$33 >> 2];
    var $p79 = $30 + 8 | 0;
    var $sub_ptr_lhs_cast = $incdec_ptr6570;
    var $sub_ptr_rhs_cast = $p79;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $call80 = _qh_setequal_skip($41, 0, $42, $sub_ptr_div);
    var $tobool81 = ($call80 | 0) == 0;
    if ($tobool81) {
      label = 32;
      break;
    } else {
      var $visible_2 = $36;
      label = 35;
      break;
    }
   case 35:
    var $visible_2;
    var $tobool88 = ($visible_2 | 0) == 0;
    if ($tobool88) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $f = $visible_2 + 28 | 0;
    var $replace = $f;
    HEAP32[$replace >> 2] = $newfacet_086;
    var $43 = HEAP32[$29 >> 2];
    var $44 = $visible_2;
    var $45 = $newfacet_086;
    _qh_setreplace($43, $44, $45);
    label = 38;
    break;
   case 37:
    _qh_fprintf(5265896);
    _qh_errexit2(5, $26, $newfacet_086);
    label = 38;
    break;
   case 38:
    var $newfacet_0 = HEAP32[$next45 >> 2];
    var $tobool43 = ($newfacet_0 | 0) == 0;
    if ($tobool43) {
      label = 49;
      break;
    } else {
      var $newfacet_086 = $newfacet_0;
      label = 24;
      break;
    }
   case 39:
    if ($tobool96) {
      label = 46;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $p101 = $30 + 4 | 0;
    var $46 = HEAP32[$p101 >> 2];
    var $tobool1047281 = ($46 | 0) == 0;
    if ($tobool1047281) {
      label = 46;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $47 = $46;
    var $48 = $p101;
    var $incdec_ptr10380101 = $p101 + 4 | 0;
    var $incdec_ptr10380 = $incdec_ptr10380101;
    var $neighborp_1_ph82 = $48;
    var $incdec_ptr10383 = $incdec_ptr10380;
    var $50 = $47;
    label = 43;
    break;
   case 42:
    var $incdec_ptr103 = $incdec_ptr10383 + 4 | 0;
    var $49 = HEAP32[$incdec_ptr10383 >> 2];
    var $tobool10472 = ($49 | 0) == 0;
    if ($tobool10472) {
      label = 46;
      break;
    } else {
      var $neighborp_1_ph82 = $incdec_ptr10383;
      var $incdec_ptr10383 = $incdec_ptr103;
      var $50 = $49;
      label = 43;
      break;
    }
   case 43:
    var $50;
    var $incdec_ptr10383;
    var $neighborp_1_ph82;
    var $sub_ptr_lhs_cast117 = $incdec_ptr10383;
    var $51 = $50;
    label = 44;
    break;
   case 44:
    var $51;
    var $52 = $51 + 76 | 0;
    var $53 = $52;
    var $54 = HEAP32[$53 >> 2];
    var $bf_clear107 = $54 & 2048;
    var $tobool108 = ($bf_clear107 | 0) == 0;
    if ($tobool108) {
      label = 42;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $f110 = $51 + 28 | 0;
    var $replace111 = $f110;
    HEAP32[$replace111 >> 2] = $newfacet_086;
    var $55 = HEAP32[$29 >> 2];
    var $p116 = $55 + 8 | 0;
    var $sub_ptr_rhs_cast118 = $p116;
    var $sub_ptr_sub119 = $sub_ptr_lhs_cast117 - $sub_ptr_rhs_cast118 | 0;
    var $sub_ptr_div120 = $sub_ptr_sub119 >> 2;
    var $call121 = _qh_setdelnth($55, $sub_ptr_div120);
    var $56 = HEAP32[$neighborp_1_ph82 >> 2];
    var $tobool104 = ($56 | 0) == 0;
    if ($tobool104) {
      label = 46;
      break;
    } else {
      var $51 = $56;
      label = 44;
      break;
    }
   case 46:
    var $57 = $newfacet_086;
    _qh_setappend($29, $57);
    var $ridges127 = $newfacet_086 + 52 | 0;
    var $58 = HEAP32[$ridges127 >> 2];
    var $p130 = $58 + 4 | 0;
    var $59 = HEAP32[$p130 >> 2];
    var $top131 = $59 + 4 | 0;
    var $60 = $top131;
    var $61 = HEAP32[$60 >> 2];
    var $cmp132 = ($61 | 0) == ($26 | 0);
    if ($cmp132) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $bottom134 = $59 + 8 | 0;
    var $62 = $bottom134;
    HEAP32[$62 >> 2] = $newfacet_086;
    label = 38;
    break;
   case 48:
    HEAP32[$60 >> 2] = $newfacet_086;
    label = 38;
    break;
   case 49:
    var $63 = HEAP32[5247312 >> 2];
    var $tobool142 = ($63 | 0) == 0;
    if ($tobool142) {
      label = 55;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $visible_363 = HEAP32[5248956 >> 2];
    var $tobool14564 = ($visible_363 | 0) == 0;
    if ($tobool14564) {
      label = 55;
      break;
    } else {
      var $visible_365 = $visible_363;
      label = 51;
      break;
    }
   case 51:
    var $visible_365;
    var $64 = $visible_365 + 76 | 0;
    var $65 = $64;
    var $66 = HEAP32[$65 >> 2];
    var $bf_clear148 = $66 & 2048;
    var $tobool149 = ($bf_clear148 | 0) == 0;
    if ($tobool149) {
      label = 55;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $f152 = $visible_365 + 28 | 0;
    var $replace153 = $f152;
    var $67 = HEAP32[$replace153 >> 2];
    var $tobool154 = ($67 | 0) == 0;
    if ($tobool154) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    var $68 = HEAP32[5243816 >> 2];
    var $inc156 = $68 + 1 | 0;
    HEAP32[5243816 >> 2] = $inc156;
    label = 54;
    break;
   case 54:
    var $next159 = $visible_365 + 44 | 0;
    var $visible_3 = HEAP32[$next159 >> 2];
    var $tobool145 = ($visible_3 | 0) == 0;
    if ($tobool145) {
      label = 55;
      break;
    } else {
      var $visible_365 = $visible_3;
      label = 51;
      break;
    }
   case 55:
    return;
  }
}
_qh_attachnewfacets["X"] = 1;
function _qh_checkflipped($facet, $distp, $allerror) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = $facet + 76 | 0;
    var $1 = $0;
    var $2 = HEAP32[$1 >> 2];
    var $bf_clear = $2 & 65536;
    var $tobool = ($bf_clear | 0) != 0;
    var $tobool1 = ($distp | 0) == 0;
    var $or_cond = $tobool & $tobool1;
    if ($or_cond) {
      var $retval_0 = 0;
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5243400 >> 2];
    var $inc = $3 + 1 | 0;
    HEAP32[5243400 >> 2] = $inc;
    var $4 = HEAP32[5248924 >> 2];
    _qh_distplane($4, $facet, $dist);
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    HEAPF64[tempDoublePtr >> 3] = $_pre, HEAP32[$distp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$distp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 5;
    break;
   case 5:
    var $tobool5 = ($allerror | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$5;
    var $cmp = $_pre > $sub;
    if ($cmp) {
      label = 8;
      break;
    } else {
      var $retval_0 = 1;
      label = 11;
      break;
    }
   case 7:
    var $cmp9 = $_pre < 0;
    if ($cmp9) {
      var $retval_0 = 1;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $6 = HEAP32[$1 >> 2];
    var $7 = $6 | 65536;
    HEAP32[$1 >> 2] = $7;
    var $8 = HEAP32[5243648 >> 2];
    var $inc12 = $8 + 1 | 0;
    HEAP32[5243648 >> 2] = $inc12;
    var $9 = HEAP32[5247036 >> 2];
    var $tobool13 = ($9 | 0) == 0;
    if ($tobool13) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _qh_fprintf(5261740);
    label = 10;
    break;
   case 10:
    _qh_precision();
    var $retval_0 = 0;
    label = 11;
    break;
   case 11:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _qh_delfacet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5255296);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248968 >> 2];
    var $cmp1 = ($1 | 0) == ($facet | 0);
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5248968 >> 2] = 0;
    label = 6;
    break;
   case 6:
    var $2 = HEAP32[5249040 >> 2];
    var $cmp4 = ($2 | 0) == ($facet | 0);
    if ($cmp4) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5249040 >> 2] = 0;
    label = 8;
    break;
   case 8:
    _qh_removefacet($facet);
    var $3 = $facet;
    var $4 = $facet + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $7 = $6 & 268435968;
    var $8 = ($7 | 0) == 512;
    if ($8) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $normal = $facet + 24 | 0;
    var $9 = HEAP32[$normal >> 2];
    var $10 = $9;
    var $11 = HEAP32[5248928 >> 2];
    _qh_memfree($10, $11);
    var $12 = HEAP32[5249032 >> 2];
    var $cmp11 = ($12 | 0) == 1;
    var $center = $facet + 36 | 0;
    var $13 = HEAP32[$center >> 2];
    var $14 = $13;
    if ($cmp11) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $15 = HEAP32[5248932 >> 2];
    _qh_memfree($14, $15);
    label = 12;
    break;
   case 11:
    var $16 = HEAP32[5248928 >> 2];
    _qh_memfree($14, $16);
    label = 12;
    break;
   case 12:
    var $neighbors = $facet + 56 | 0;
    _qh_setfree($neighbors);
    var $ridges = $facet + 52 | 0;
    var $17 = HEAP32[$ridges >> 2];
    var $tobool16 = ($17 | 0) == 0;
    if ($tobool16) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_setfree($ridges);
    label = 14;
    break;
   case 14:
    var $vertices = $facet + 48 | 0;
    _qh_setfree($vertices);
    var $outsideset = $facet + 60 | 0;
    var $18 = HEAP32[$outsideset >> 2];
    var $tobool20 = ($18 | 0) == 0;
    if ($tobool20) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_setfree($outsideset);
    label = 16;
    break;
   case 16:
    var $coplanarset = $facet + 64 | 0;
    var $19 = HEAP32[$coplanarset >> 2];
    var $tobool24 = ($19 | 0) == 0;
    if ($tobool24) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_setfree($coplanarset);
    label = 18;
    break;
   case 18:
    _qh_memfree($3, 80);
    return;
  }
}
_qh_delfacet["X"] = 1;
function _qh_removefacet($facet) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $next1 = $facet + 44 | 0;
    var $0 = HEAP32[$next1 >> 2];
    var $previous2 = $facet + 40 | 0;
    var $1 = HEAP32[$previous2 >> 2];
    var $2 = HEAP32[5248952 >> 2];
    var $cmp = ($2 | 0) == ($facet | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248952 >> 2] = $0;
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5248948 >> 2];
    var $cmp3 = ($3 | 0) == ($facet | 0);
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5248948 >> 2] = $0;
    label = 6;
    break;
   case 6:
    var $4 = HEAP32[5248956 >> 2];
    var $cmp6 = ($4 | 0) == ($facet | 0);
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5248956 >> 2] = $0;
    label = 8;
    break;
   case 8:
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $next10 = $1 + 44 | 0;
    HEAP32[$next10 >> 2] = $0;
    var $previous11 = $0 + 40 | 0;
    HEAP32[$previous11 >> 2] = $1;
    label = 11;
    break;
   case 10:
    HEAP32[5248940 >> 2] = $0;
    var $previous12 = $0 + 40 | 0;
    HEAP32[$previous12 >> 2] = 0;
    label = 11;
    break;
   case 11:
    var $5 = HEAP32[5248992 >> 2];
    var $dec = $5 - 1 | 0;
    HEAP32[5248992 >> 2] = $dec;
    var $6 = HEAP32[5247036 >> 2];
    var $cmp14 = ($6 | 0) > 3;
    if ($cmp14) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5273276);
    label = 13;
    break;
   case 13:
    return;
  }
}
function _qh_deletevisible() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249184 >> 2];
    var $call = _qh_setsize($0);
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5252660);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5248956 >> 2];
    var $tobool14 = ($2 | 0) == 0;
    if ($tobool14) {
      var $numvisible_0_lcssa = 0;
      label = 7;
      break;
    } else {
      var $numvisible_015 = 0;
      var $visible_016 = $2;
      label = 5;
      break;
    }
   case 5:
    var $visible_016;
    var $numvisible_015;
    var $3 = $visible_016 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 2048;
    var $tobool1 = ($bf_clear | 0) == 0;
    if ($tobool1) {
      var $numvisible_0_lcssa = $numvisible_015;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $next = $visible_016 + 44 | 0;
    var $6 = HEAP32[$next >> 2];
    var $inc = $numvisible_015 + 1 | 0;
    _qh_delfacet($visible_016);
    var $tobool = ($6 | 0) == 0;
    if ($tobool) {
      var $numvisible_0_lcssa = $inc;
      label = 7;
      break;
    } else {
      var $numvisible_015 = $inc;
      var $visible_016 = $6;
      label = 5;
      break;
    }
   case 7:
    var $numvisible_0_lcssa;
    var $7 = HEAP32[5248960 >> 2];
    var $cmp2 = ($numvisible_0_lcssa | 0) == ($7 | 0);
    if ($cmp2) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_fprintf(525e4);
    _qh_errexit(5, 0, 0);
    label = 9;
    break;
   case 9:
    HEAP32[5248960 >> 2] = 0;
    var $8 = HEAP32[5244720 >> 2];
    var $add = $8 + $numvisible_0_lcssa | 0;
    HEAP32[5244720 >> 2] = $add;
    var $9 = HEAP32[5244728 >> 2];
    var $cmp5 = ($9 | 0) < ($numvisible_0_lcssa | 0);
    if ($cmp5) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[5244728 >> 2] = $numvisible_0_lcssa;
    label = 11;
    break;
   case 11:
    var $10 = HEAP32[5243376 >> 2];
    var $add8 = $10 + $call | 0;
    HEAP32[5243376 >> 2] = $add8;
    var $11 = HEAP32[5243384 >> 2];
    var $cmp9 = ($11 | 0) < ($call | 0);
    if ($cmp9) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5243384 >> 2] = $call;
    label = 13;
    break;
   case 13:
    var $12 = HEAP32[5249184 >> 2];
    var $tobool12 = ($12 | 0) == 0;
    if ($tobool12) {
      var $18 = 0;
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p = $12 + 4 | 0;
    var $13 = HEAP32[$p >> 2];
    var $tobool1512 = ($13 | 0) == 0;
    if ($tobool1512) {
      var $18 = $12;
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $14 = $13;
    var $15 = $p;
    var $vertexp_013 = $15;
    var $16 = $14;
    label = 16;
    break;
   case 16:
    var $16;
    var $vertexp_013;
    var $incdec_ptr = $vertexp_013 + 4 | 0;
    _qh_delvertex($16);
    var $17 = HEAP32[$incdec_ptr >> 2];
    var $tobool15 = ($17 | 0) == 0;
    if ($tobool15) {
      label = 17;
      break;
    } else {
      var $vertexp_013 = $incdec_ptr;
      var $16 = $17;
      label = 16;
      break;
    }
   case 17:
    var $_pre = HEAP32[5249184 >> 2];
    var $18 = $_pre;
    label = 18;
    break;
   case 18:
    var $18;
    _qh_settruncate($18, 0);
    return;
  }
}
_qh_deletevisible["X"] = 1;
function _qh_facetintersect($facetA, $facetB, $skipA, $skipB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247504 >> 2];
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $p = $1 + 4 | 0;
    var $neighbors1 = $facetB + 56 | 0;
    var $2 = HEAP32[$neighbors1 >> 2];
    var $p4 = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $4 = $3;
    var $cmp = ($4 | 0) == ($facetB | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[$skipA >> 2] = 0;
    var $i_1 = 0;
    label = 13;
    break;
   case 4:
    var $incdec_ptr38 = $p + 4 | 0;
    var $incdec_ptr40 = HEAP32[$incdec_ptr38 >> 2];
    var $5 = $incdec_ptr40;
    var $cmp6 = ($5 | 0) == ($facetB | 0);
    if ($cmp6) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$skipA >> 2] = 1;
    var $i_1 = 0;
    label = 13;
    break;
   case 6:
    var $incdec_ptr539 = $p + 8 | 0;
    var $incdec_ptr542 = HEAP32[$incdec_ptr539 >> 2];
    var $6 = $incdec_ptr542;
    var $cmp10 = ($6 | 0) == ($facetB | 0);
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[$skipA >> 2] = 2;
    var $i_1 = 0;
    label = 13;
    break;
   case 8:
    var $cmp1353 = ($0 | 0) > 3;
    if ($cmp1353) {
      label = 9;
      break;
    } else {
      var $i_1 = 3;
      label = 13;
      break;
    }
   case 9:
    var $incdec_ptr941 = $p + 12 | 0;
    var $incdec_ptr9 = $incdec_ptr941;
    var $i_054 = 3;
    var $neighborsA_055 = $incdec_ptr9;
    label = 10;
    break;
   case 10:
    var $neighborsA_055;
    var $i_054;
    var $7 = HEAP32[$neighborsA_055 >> 2];
    var $cmp15 = ($7 | 0) == ($facetB | 0);
    if ($cmp15) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$skipA >> 2] = $i_054;
    var $i_1 = $i_054;
    label = 13;
    break;
   case 12:
    var $incdec_ptr14 = $neighborsA_055 + 4 | 0;
    var $inc = $i_054 + 1 | 0;
    var $cmp13 = ($inc | 0) < ($0 | 0);
    if ($cmp13) {
      var $i_054 = $inc;
      var $neighborsA_055 = $incdec_ptr14;
      label = 10;
      break;
    } else {
      var $i_1 = $inc;
      label = 13;
      break;
    }
   case 13:
    var $i_1;
    var $8 = HEAP32[$p4 >> 2];
    var $9 = $8;
    var $cmp21 = ($9 | 0) == ($facetA | 0);
    if ($cmp21) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[$skipB >> 2] = 0;
    var $j_1 = 0;
    label = 24;
    break;
   case 15:
    var $incdec_ptr2043 = $p4 + 4 | 0;
    var $incdec_ptr2045 = HEAP32[$incdec_ptr2043 >> 2];
    var $10 = $incdec_ptr2045;
    var $cmp25 = ($10 | 0) == ($facetA | 0);
    if ($cmp25) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    HEAP32[$skipB >> 2] = 1;
    var $j_1 = 0;
    label = 24;
    break;
   case 17:
    var $incdec_ptr2444 = $p4 + 8 | 0;
    var $incdec_ptr2447 = HEAP32[$incdec_ptr2444 >> 2];
    var $11 = $incdec_ptr2447;
    var $cmp29 = ($11 | 0) == ($facetA | 0);
    if ($cmp29) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAP32[$skipB >> 2] = 2;
    var $j_1 = 0;
    label = 24;
    break;
   case 19:
    var $cmp3349 = ($0 | 0) > 3;
    if ($cmp3349) {
      label = 20;
      break;
    } else {
      var $j_1 = 3;
      label = 24;
      break;
    }
   case 20:
    var $incdec_ptr2846 = $p4 + 12 | 0;
    var $incdec_ptr28 = $incdec_ptr2846;
    var $j_050 = 3;
    var $neighborsB_051 = $incdec_ptr28;
    label = 21;
    break;
   case 21:
    var $neighborsB_051;
    var $j_050;
    var $12 = HEAP32[$neighborsB_051 >> 2];
    var $cmp36 = ($12 | 0) == ($facetA | 0);
    if ($cmp36) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAP32[$skipB >> 2] = $j_050;
    var $j_1 = $j_050;
    label = 24;
    break;
   case 23:
    var $incdec_ptr35 = $neighborsB_051 + 4 | 0;
    var $inc40 = $j_050 + 1 | 0;
    var $cmp33 = ($inc40 | 0) < ($0 | 0);
    if ($cmp33) {
      var $j_050 = $inc40;
      var $neighborsB_051 = $incdec_ptr35;
      label = 21;
      break;
    } else {
      var $j_1 = $inc40;
      label = 24;
      break;
    }
   case 24:
    var $j_1;
    var $cmp45 = ($i_1 | 0) < ($0 | 0);
    var $cmp46 = ($j_1 | 0) < ($0 | 0);
    var $or_cond = $cmp45 & $cmp46;
    if ($or_cond) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _qh_fprintf(5300460);
    _qh_errexit2(5, $facetA, $facetB);
    label = 26;
    break;
   case 26:
    var $vertices = $facetA + 48 | 0;
    var $13 = HEAP32[$vertices >> 2];
    var $14 = HEAP32[5247504 >> 2];
    var $15 = HEAP32[$skipA >> 2];
    var $call = _qh_setnew_delnthsorted($13, $14, $15, 1);
    var $16 = HEAP32[5247036 >> 2];
    var $cmp50 = ($16 | 0) > 3;
    if ($cmp50) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    _qh_fprintf(5297936);
    label = 28;
    break;
   case 28:
    return $call;
  }
}
_qh_facetintersect["X"] = 1;
function _qh_gethash($hashsize, $set, $size, $firstindex, $skipelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $set + 4 + ($firstindex << 2) | 0;
    var $sub = $size - $firstindex | 0;
    if (($sub | 0) == 1) {
      label = 4;
      break;
    } else if (($sub | 0) == 2) {
      label = 5;
      break;
    } else if (($sub | 0) == 3) {
      label = 6;
      break;
    } else if (($sub | 0) == 4) {
      label = 7;
      break;
    } else if (($sub | 0) == 5) {
      label = 8;
      break;
    } else if (($sub | 0) == 6) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[$p >> 2];
    var $i_0 = 3;
    var $elemp_0 = $p;
    var $hash_0 = 0;
    var $48 = $_pre;
    label = 10;
    break;
   case 4:
    var $0 = HEAP32[$p >> 2];
    var $1 = $0;
    var $2 = $skipelem;
    var $sub1 = $1 - $2 | 0;
    var $hash_2 = $sub1;
    label = 13;
    break;
   case 5:
    var $3 = HEAP32[$p >> 2];
    var $4 = $3;
    var $arrayidx3 = $p + 4 | 0;
    var $5 = HEAP32[$arrayidx3 >> 2];
    var $6 = $5;
    var $7 = $skipelem;
    var $add = $4 - $7 | 0;
    var $sub4 = $add + $6 | 0;
    var $hash_2 = $sub4;
    label = 13;
    break;
   case 6:
    var $8 = HEAP32[$p >> 2];
    var $9 = $8;
    var $arrayidx6 = $p + 4 | 0;
    var $10 = HEAP32[$arrayidx6 >> 2];
    var $11 = $10;
    var $arrayidx8 = $p + 8 | 0;
    var $12 = HEAP32[$arrayidx8 >> 2];
    var $13 = $12;
    var $14 = $skipelem;
    var $add7 = $9 - $14 | 0;
    var $add9 = $add7 + $11 | 0;
    var $sub10 = $add9 + $13 | 0;
    var $hash_2 = $sub10;
    label = 13;
    break;
   case 7:
    var $15 = HEAP32[$p >> 2];
    var $16 = $15;
    var $arrayidx12 = $p + 4 | 0;
    var $17 = HEAP32[$arrayidx12 >> 2];
    var $18 = $17;
    var $arrayidx14 = $p + 8 | 0;
    var $19 = HEAP32[$arrayidx14 >> 2];
    var $20 = $19;
    var $arrayidx16 = $p + 12 | 0;
    var $21 = HEAP32[$arrayidx16 >> 2];
    var $22 = $21;
    var $23 = $skipelem;
    var $add13 = $16 - $23 | 0;
    var $add15 = $add13 + $18 | 0;
    var $add17 = $add15 + $20 | 0;
    var $sub18 = $add17 + $22 | 0;
    var $hash_2 = $sub18;
    label = 13;
    break;
   case 8:
    var $24 = HEAP32[$p >> 2];
    var $25 = $24;
    var $arrayidx20 = $p + 4 | 0;
    var $26 = HEAP32[$arrayidx20 >> 2];
    var $27 = $26;
    var $arrayidx22 = $p + 8 | 0;
    var $28 = HEAP32[$arrayidx22 >> 2];
    var $29 = $28;
    var $arrayidx24 = $p + 12 | 0;
    var $30 = HEAP32[$arrayidx24 >> 2];
    var $31 = $30;
    var $arrayidx26 = $p + 16 | 0;
    var $32 = HEAP32[$arrayidx26 >> 2];
    var $33 = $32;
    var $34 = $skipelem;
    var $add21 = $25 - $34 | 0;
    var $add23 = $add21 + $27 | 0;
    var $add25 = $add23 + $29 | 0;
    var $add27 = $add25 + $31 | 0;
    var $sub28 = $add27 + $33 | 0;
    var $hash_2 = $sub28;
    label = 13;
    break;
   case 9:
    var $35 = HEAP32[$p >> 2];
    var $36 = $35;
    var $arrayidx30 = $p + 4 | 0;
    var $37 = HEAP32[$arrayidx30 >> 2];
    var $38 = $37;
    var $arrayidx32 = $p + 8 | 0;
    var $39 = HEAP32[$arrayidx32 >> 2];
    var $40 = $39;
    var $arrayidx34 = $p + 12 | 0;
    var $41 = HEAP32[$arrayidx34 >> 2];
    var $42 = $41;
    var $arrayidx36 = $p + 16 | 0;
    var $43 = HEAP32[$arrayidx36 >> 2];
    var $44 = $43;
    var $arrayidx38 = $p + 20 | 0;
    var $45 = HEAP32[$arrayidx38 >> 2];
    var $46 = $45;
    var $47 = $skipelem;
    var $add31 = $36 - $47 | 0;
    var $add33 = $add31 + $38 | 0;
    var $add35 = $add33 + $40 | 0;
    var $add37 = $add35 + $42 | 0;
    var $add39 = $add37 + $44 | 0;
    var $sub40 = $add39 + $46 | 0;
    var $hash_2 = $sub40;
    label = 13;
    break;
   case 10:
    var $48;
    var $hash_0;
    var $elemp_0;
    var $i_0;
    var $incdec_ptr = $elemp_0 + 4 | 0;
    var $49 = $48;
    var $cmp = ($48 | 0) == ($skipelem | 0);
    if ($cmp) {
      var $i_1 = $i_0;
      var $hash_1 = $hash_0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $shl = $49 << $i_0;
    var $sub41 = 32 - $i_0 | 0;
    var $shr = $49 >> $sub41;
    var $add42 = $shl + $shr | 0;
    var $xor = $add42 ^ $hash_0;
    var $add43 = $i_0 + 3 | 0;
    var $cmp44 = ($add43 | 0) > 31;
    var $sub46 = $i_0 - 29 | 0;
    var $sub46_add43 = $cmp44 ? $sub46 : $add43;
    var $i_1 = $sub46_add43;
    var $hash_1 = $xor;
    label = 12;
    break;
   case 12:
    var $hash_1;
    var $i_1;
    var $50 = HEAP32[$incdec_ptr >> 2];
    var $tobool = ($50 | 0) == 0;
    if ($tobool) {
      var $hash_2 = $hash_1;
      label = 13;
      break;
    } else {
      var $i_0 = $i_1;
      var $elemp_0 = $incdec_ptr;
      var $hash_0 = $hash_1;
      var $48 = $50;
      label = 10;
      break;
    }
   case 13:
    var $hash_2;
    var $cmp48 = ($hashsize | 0) < 0;
    if ($cmp48) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5295804);
    _qh_errexit2(5, 0, 0);
    label = 15;
    break;
   case 15:
    var $rem = ($hash_2 >>> 0) % ($hashsize >>> 0);
    return $rem;
  }
}
_qh_gethash["X"] = 1;
function _qh_makenewfacet($vertices, $toporient, $horizon) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool111 = ($0 | 0) == 0;
    if ($tobool111) {
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $0;
    var $incdec_ptr1013 = $p + 4 | 0;
    var $incdec_ptr10 = $incdec_ptr1013;
    var $incdec_ptr12 = $incdec_ptr10;
    var $2 = $1;
    label = 5;
    break;
   case 5:
    var $2;
    var $incdec_ptr12;
    var $3 = $2 + 20 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $tobool2 = ($5 | 0) < 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_removevertex($2);
    _qh_appendvertex($2);
    label = 7;
    break;
   case 7:
    var $incdec_ptr = $incdec_ptr12 + 4 | 0;
    var $6 = HEAP32[$incdec_ptr12 >> 2];
    var $tobool1 = ($6 | 0) == 0;
    if ($tobool1) {
      label = 8;
      break;
    } else {
      var $incdec_ptr12 = $incdec_ptr;
      var $2 = $6;
      label = 5;
      break;
    }
   case 8:
    var $call = _qh_newfacet();
    var $vertices5 = $call + 48 | 0;
    HEAP32[$vertices5 >> 2] = $vertices;
    var $7 = $call + 76 | 0;
    var $8 = $7;
    var $bf_value = $toporient << 12;
    var $9 = $bf_value & 4096;
    var $10 = HEAP32[$8 >> 2];
    var $11 = $10 & -4097;
    var $12 = $11 | $9;
    HEAP32[$8 >> 2] = $12;
    var $tobool8 = ($horizon | 0) == 0;
    if ($tobool8) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $neighbors = $call + 56 | 0;
    var $13 = $horizon;
    _qh_setappend($neighbors, $13);
    label = 10;
    break;
   case 10:
    _qh_appendfacet($call);
    return $call;
  }
}
function _qh_removevertex($vertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $next1 = $vertex | 0;
    var $0 = HEAP32[$next1 >> 2];
    var $previous2 = $vertex + 4 | 0;
    var $1 = HEAP32[$previous2 >> 2];
    var $2 = HEAP32[5248988 >> 2];
    var $cmp = ($2 | 0) == ($vertex | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248988 >> 2] = $0;
    label = 4;
    break;
   case 4:
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $next4 = $1 | 0;
    HEAP32[$next4 >> 2] = $0;
    var $previous5 = $0 + 4 | 0;
    HEAP32[$previous5 >> 2] = $1;
    label = 7;
    break;
   case 6:
    var $3 = HEAP32[$next1 >> 2];
    HEAP32[5248980 >> 2] = $3;
    var $previous7 = $3 + 4 | 0;
    HEAP32[$previous7 >> 2] = 0;
    label = 7;
    break;
   case 7:
    var $4 = HEAP32[5248996 >> 2];
    var $dec = $4 - 1 | 0;
    HEAP32[5248996 >> 2] = $dec;
    var $5 = HEAP32[5247036 >> 2];
    var $cmp9 = ($5 | 0) > 3;
    if ($cmp9) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5272724);
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_newfacet() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _qh_memalloc(80);
    var $0 = $call;
    _memset($call, 0, 80);
    var $1 = HEAP32[5249008 >> 2];
    var $2 = HEAP32[5248964 >> 2];
    var $cmp = ($1 | 0) == ($2 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248968 >> 2] = $0;
    label = 4;
    break;
   case 4:
    var $inc = $1 + 1 | 0;
    HEAP32[5249008 >> 2] = $inc;
    var $id = $call + 72 | 0;
    var $3 = $id;
    HEAP32[$3 >> 2] = $1;
    var $4 = HEAP32[5247504 >> 2];
    var $call1 = _qh_setnew($4);
    var $neighbors = $call + 56 | 0;
    var $5 = $neighbors;
    HEAP32[$5 >> 2] = $call1;
    var $furthestdist = $call;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$furthestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$furthestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $6 = HEAP32[5247008 >> 2];
    var $tobool = ($6 | 0) != 0;
    var $7 = HEAP32[5246940 >> 2];
    var $tobool2 = ($7 | 0) != 0;
    var $or_cond = $tobool & $tobool2;
    if ($or_cond) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $maxoutside = $call + 8 | 0;
    var $9 = $maxoutside;
    HEAPF64[tempDoublePtr >> 3] = $8, HEAP32[$9 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 7;
    break;
   case 6:
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $maxoutside4 = $call + 8 | 0;
    var $11 = $maxoutside4;
    HEAPF64[tempDoublePtr >> 3] = $10, HEAP32[$11 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 7;
    break;
   case 7:
    var $bf_field_offs = $call + 76 | 0;
    var $12 = $bf_field_offs;
    var $13 = HEAP32[$12 >> 2];
    var $14 = $13 | 533504;
    HEAP32[$12 >> 2] = $14;
    var $15 = HEAP32[5247036 >> 2];
    var $cmp8 = ($15 | 0) > 3;
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5275300);
    label = 9;
    break;
   case 9:
    return $0;
  }
}
function _qh_makenewplanes() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $newfacet_05 = HEAP32[5248952 >> 2];
    var $tobool6 = ($newfacet_05 | 0) == 0;
    if ($tobool6) {
      label = 6;
      break;
    } else {
      var $newfacet_07 = $newfacet_05;
      label = 3;
      break;
    }
   case 3:
    var $newfacet_07;
    var $next = $newfacet_07 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $newfacet_07 + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 33554432;
    var $tobool2 = ($bf_clear | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      var $newfacet_07 = $0;
      label = 3;
      break;
    }
   case 5:
    _qh_setfacetplane($newfacet_07);
    var $newfacet_0_pre = HEAP32[$next >> 2];
    var $tobool = ($newfacet_0_pre | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      var $newfacet_07 = $newfacet_0_pre;
      label = 3;
      break;
    }
   case 6:
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $4 < 8.988465674311579e+307;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244144 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244148 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$6;
    var $cmp5 = $5 > $sub;
    if ($cmp5) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_makenew_nonsimplicial($visible, $apex, $numnew) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $ridges = $visible + 52 | 0;
    var $0 = HEAP32[$ridges >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      var $newfacet_2 = 0;
      label = 31;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool251 = ($1 | 0) == 0;
    if ($tobool251) {
      var $newfacet_2 = 0;
      label = 31;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $2 = $1;
    var $incdec_ptr5054 = $p + 4 | 0;
    var $incdec_ptr50 = $incdec_ptr5054;
    var $3 = $apex;
    var $4 = $visible;
    var $newfacet_052 = 0;
    var $incdec_ptr53 = $incdec_ptr50;
    var $5 = $2;
    label = 5;
    break;
   case 5:
    var $5;
    var $incdec_ptr53;
    var $newfacet_052;
    var $6 = $5;
    var $top = $5 + 4 | 0;
    var $7 = HEAP32[$top >> 2];
    var $cmp = ($7 | 0) == ($visible | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $cond = $7;
      label = 7;
      break;
    }
   case 6:
    var $bottom = $5 + 8 | 0;
    var $8 = HEAP32[$bottom >> 2];
    var $cond = $8;
    label = 7;
    break;
   case 7:
    var $cond;
    var $9 = $cond + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $bf_clear5 = $11 & 2048;
    var $tobool6 = ($bf_clear5 | 0) == 0;
    if ($tobool6) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $12 = HEAP32[5247124 >> 2];
    var $tobool8 = ($12 | 0) == 0;
    if ($tobool8) {
      label = 9;
      break;
    } else {
      var $newfacet_1 = $newfacet_052;
      label = 30;
      break;
    }
   case 9:
    var $visitid = $cond + 68 | 0;
    var $13 = HEAP32[$visitid >> 2];
    var $14 = HEAP32[5249152 >> 2];
    var $cmp10 = ($13 | 0) == ($14 | 0);
    if ($cmp10) {
      label = 10;
      break;
    } else {
      var $newfacet_1 = $newfacet_052;
      label = 30;
      break;
    }
   case 10:
    var $vertices12 = $5 | 0;
    _qh_setfree($vertices12);
    _qh_memfree($6, 16);
    var $newfacet_1 = $newfacet_052;
    label = 30;
    break;
   case 11:
    var $conv = $cmp & 1;
    var $15 = HEAP32[5247504 >> 2];
    var $call = _qh_setnew($15);
    HEAP32[$vertices >> 2] = $call;
    _qh_setappend($vertices, $3);
    var $vertices16 = $5 | 0;
    var $16 = HEAP32[$vertices16 >> 2];
    _qh_setappend_set($vertices, $16);
    var $17 = HEAP32[$vertices >> 2];
    var $call17 = _qh_makenewfacet($17, $conv, $cond);
    var $18 = HEAP32[$numnew >> 2];
    var $inc = $18 + 1 | 0;
    HEAP32[$numnew >> 2] = $inc;
    var $19 = HEAP32[$10 >> 2];
    var $bf_clear19 = $19 & 16777216;
    var $tobool20 = ($bf_clear19 | 0) == 0;
    if ($tobool20) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $20 = $call17 + 76 | 0;
    var $21 = $20;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22 | 33554432;
    HEAP32[$21 >> 2] = $23;
    var $24 = HEAP32[$10 >> 2];
    var $bf_clear24 = $24 & 16384;
    var $tobool25 = ($bf_clear24 | 0) == 0;
    if ($tobool25) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $f = $call17 + 28 | 0;
    var $samecycle27 = $f;
    HEAP32[$samecycle27 >> 2] = $call17;
    var $f28 = $cond + 28 | 0;
    var $newcycle = $f28;
    HEAP32[$newcycle >> 2] = $call17;
    label = 15;
    break;
   case 14:
    var $f30 = $cond + 28 | 0;
    var $newcycle31 = $f30;
    var $25 = HEAP32[$newcycle31 >> 2];
    var $f32 = $25 + 28 | 0;
    var $samecycle33 = $f32;
    var $26 = HEAP32[$samecycle33 >> 2];
    var $f34 = $call17 + 28 | 0;
    var $samecycle35 = $f34;
    HEAP32[$samecycle35 >> 2] = $26;
    HEAP32[$samecycle33 >> 2] = $call17;
    label = 15;
    break;
   case 15:
    var $27 = HEAP32[5247124 >> 2];
    var $tobool40 = ($27 | 0) == 0;
    var $28 = HEAP32[$10 >> 2];
    if ($tobool40) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $bf_clear43 = $28 & 8192;
    var $tobool44 = ($bf_clear43 | 0) == 0;
    if ($tobool44) {
      label = 17;
      break;
    } else {
      var $newfacet_1 = $call17;
      label = 30;
      break;
    }
   case 17:
    var $ridges46 = $call17 + 52 | 0;
    _qh_setappend($ridges46, $6);
    var $newfacet_1 = $call17;
    label = 30;
    break;
   case 18:
    var $bf_clear50 = $28 & 16384;
    var $tobool51 = ($bf_clear50 | 0) == 0;
    if ($tobool51) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $bf_clear54 = $28 & 8192;
    var $tobool55 = ($bf_clear54 | 0) == 0;
    if ($tobool55) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5294304);
    _qh_errexit2(5, $cond, $visible);
    label = 21;
    break;
   case 21:
    var $neighbors = $cond + 56 | 0;
    var $29 = $call17;
    _qh_setappend($neighbors, $29);
    label = 23;
    break;
   case 22:
    var $neighbors60 = $cond + 56 | 0;
    var $30 = HEAP32[$neighbors60 >> 2];
    var $31 = $call17;
    _qh_setreplace($30, $4, $31);
    label = 23;
    break;
   case 23:
    var $32 = HEAP32[$10 >> 2];
    var $bf_clear63 = $32 & 8192;
    var $tobool64 = ($bf_clear63 | 0) == 0;
    if ($tobool64) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $ridges66 = $cond + 52 | 0;
    var $33 = HEAP32[$ridges66 >> 2];
    var $call67 = _qh_setdel($33, $6);
    _qh_setfree($vertices16);
    _qh_memfree($6, 16);
    label = 28;
    break;
   case 25:
    var $ridges70 = $call17 + 52 | 0;
    _qh_setappend($ridges70, $6);
    if ($cmp) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP32[$top >> 2] = $call17;
    label = 28;
    break;
   case 27:
    var $bottom75 = $5 + 8 | 0;
    HEAP32[$bottom75 >> 2] = $call17;
    label = 28;
    break;
   case 28:
    var $34 = HEAP32[5247036 >> 2];
    var $cmp78 = ($34 | 0) > 3;
    if ($cmp78) {
      label = 29;
      break;
    } else {
      var $newfacet_1 = $call17;
      label = 30;
      break;
    }
   case 29:
    _qh_fprintf(5292376);
    var $newfacet_1 = $call17;
    label = 30;
    break;
   case 30:
    var $newfacet_1;
    var $35 = HEAP32[$10 >> 2];
    var $36 = $35 | 16384;
    HEAP32[$10 >> 2] = $36;
    var $incdec_ptr = $incdec_ptr53 + 4 | 0;
    var $37 = HEAP32[$incdec_ptr53 >> 2];
    var $tobool2 = ($37 | 0) == 0;
    if ($tobool2) {
      var $newfacet_2 = $newfacet_1;
      label = 31;
      break;
    } else {
      var $newfacet_052 = $newfacet_1;
      var $incdec_ptr53 = $incdec_ptr;
      var $5 = $37;
      label = 5;
      break;
    }
   case 31:
    var $newfacet_2;
    var $38 = HEAP32[5247124 >> 2];
    var $tobool90 = ($38 | 0) == 0;
    if ($tobool90) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $39 = HEAP32[$ridges >> 2];
    var $p95 = $39 + 4 | 0;
    HEAP32[$p95 >> 2] = 0;
    label = 33;
    break;
   case 33:
    STACKTOP = __stackBase__;
    return $newfacet_2;
  }
}
_qh_makenew_nonsimplicial["X"] = 1;
function _qh_makenew_simplicial($visible, $apex, $numnew) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $horizonskip = __stackBase__;
    var $visibleskip = __stackBase__ + 4;
    var $neighbors = $visible + 56 | 0;
    var $0 = HEAP32[$neighbors >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      var $newfacet_1 = 0;
      label = 14;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = $p;
    var $2 = $apex;
    var $neighborp_0_ph = $1;
    var $newfacet_0_ph = 0;
    label = 4;
    break;
   case 4:
    var $newfacet_0_ph;
    var $neighborp_0_ph;
    var $neighborp_0 = $neighborp_0_ph;
    label = 5;
    break;
   case 5:
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $3 = HEAP32[$neighborp_0 >> 2];
    var $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      var $newfacet_1 = $newfacet_0_ph;
      label = 14;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = $3 + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $7 = $6 & 18432;
    var $8 = ($7 | 0) == 0;
    if ($8) {
      label = 7;
      break;
    } else {
      var $neighborp_0 = $incdec_ptr;
      label = 5;
      break;
    }
   case 7:
    var $call = _qh_facetintersect($3, $visible, $horizonskip, $visibleskip);
    var $p10 = $call + 4 | 0;
    HEAP32[$p10 >> 2] = $2;
    var $9 = HEAP32[$horizonskip >> 2];
    var $and = $9 & 1;
    var $10 = HEAP32[$5 >> 2];
    var $bf_clear13 = $10 >>> 12;
    var $bf_clear13_lobit = $bf_clear13 & 1;
    var $11 = $and ^ 1;
    var $toporient_0 = $11 ^ $bf_clear13_lobit;
    var $call19 = _qh_makenewfacet($call, $toporient_0, $3);
    var $12 = HEAP32[$numnew >> 2];
    var $inc = $12 + 1 | 0;
    HEAP32[$numnew >> 2] = $inc;
    var $13 = HEAP32[$5 >> 2];
    var $bf_clear21 = $13 & 16777216;
    var $tobool22 = ($bf_clear21 | 0) == 0;
    if ($tobool22) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $14 = HEAP32[5247140 >> 2];
    var $15 = HEAP32[5247072 >> 2];
    var $16 = $15 | $14;
    var $17 = ($16 | 0) == 0;
    if ($17) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $f = $call19 + 28 | 0;
    var $samecycle = $f;
    HEAP32[$samecycle >> 2] = $call19;
    var $18 = $call19 + 76 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $20 | 33554432;
    HEAP32[$19 >> 2] = $21;
    label = 10;
    break;
   case 10:
    var $22 = HEAP32[5247124 >> 2];
    var $tobool29 = ($22 | 0) == 0;
    if ($tobool29) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $23 = $call19;
    var $neighbors31 = $3 + 56 | 0;
    var $24 = HEAP32[$neighbors31 >> 2];
    var $p34 = $24 + 4 + ($9 << 2) | 0;
    HEAP32[$p34 >> 2] = $23;
    label = 12;
    break;
   case 12:
    var $25 = HEAP32[5247036 >> 2];
    var $cmp = ($25 | 0) > 3;
    if ($cmp) {
      label = 13;
      break;
    } else {
      var $neighborp_0_ph = $incdec_ptr;
      var $newfacet_0_ph = $call19;
      label = 4;
      break;
    }
   case 13:
    _qh_fprintf(5290804);
    var $neighborp_0_ph = $incdec_ptr;
    var $newfacet_0_ph = $call19;
    label = 4;
    break;
   case 14:
    var $newfacet_1;
    STACKTOP = __stackBase__;
    return $newfacet_1;
  }
}
_qh_makenew_simplicial["X"] = 1;
function _qh_matchneighbor($newfacet, $newskip, $hashsize, $hashcount) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $same = __stackBase__;
    var $skip = __stackBase__ + 4;
    var $vertices = $newfacet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $1 = HEAP32[5247504 >> 2];
    var $p = $0 + 4 + ($newskip << 2) | 0;
    var $2 = HEAP32[$p >> 2];
    var $call = _qh_gethash($hashsize, $0, $1, 1, $2);
    var $3 = HEAP32[5247036 >> 2];
    var $cmp = ($3 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5289692);
    label = 4;
    break;
   case 4:
    var $4 = HEAP32[5243784 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5243784 >> 2] = $inc;
    var $5 = HEAP32[5249176 >> 2];
    var $p483 = $5 + 4 + ($call << 2) | 0;
    var $6 = HEAP32[$p483 >> 2];
    var $tobool84 = ($6 | 0) == 0;
    if ($tobool84) {
      var $p4_lcssa94 = $p483;
      label = 30;
      break;
    } else {
      var $scan_085 = $call;
      var $newfound_086 = 0;
      var $_in = $6;
      var $7 = $5;
      label = 5;
      break;
    }
   case 5:
    var $7;
    var $_in;
    var $newfound_086;
    var $scan_085;
    var $8 = $_in;
    var $cmp5 = ($8 | 0) == ($newfacet | 0);
    if ($cmp5) {
      var $newfound_1 = 1;
      var $59 = $7;
      label = 28;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $9 = HEAP32[5243808 >> 2];
    var $inc8 = $9 + 1 | 0;
    HEAP32[5243808 >> 2] = $inc8;
    var $10 = HEAP32[$vertices >> 2];
    var $vertices10 = $_in + 48 | 0;
    var $11 = $vertices10;
    var $12 = HEAP32[$11 >> 2];
    var $call11 = _qh_matchvertices($10, $newskip, $12, $skip, $same);
    var $tobool12 = ($call11 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $_pre = HEAP32[5249176 >> 2];
    var $newfound_1 = $newfound_086;
    var $59 = $_pre;
    label = 28;
    break;
   case 8:
    var $13 = HEAP32[$vertices >> 2];
    var $p17 = $13 + 4 + ($newskip << 2) | 0;
    var $14 = HEAP32[$p17 >> 2];
    var $15 = HEAP32[$skip >> 2];
    var $16 = HEAP32[$11 >> 2];
    var $p21 = $16 + 4 + ($15 << 2) | 0;
    var $17 = HEAP32[$p21 >> 2];
    var $cmp22 = ($14 | 0) == ($17 | 0);
    if ($cmp22) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_precision();
    _qh_fprintf(5285608);
    _qh_errexit2(3, $8, $newfacet);
    label = 10;
    break;
   case 10:
    var $18 = HEAP32[$same >> 2];
    var $19 = $newfacet;
    var $20 = $newfacet + 76 | 0;
    var $21 = $20;
    var $22 = HEAP32[$21 >> 2];
    var $bf_field_offs27 = $_in + 76 | 0;
    var $23 = $bf_field_offs27;
    var $24 = HEAP32[$23 >> 2];
    var $25 = $24 ^ $22;
    var $bf_clear78 = $25 >>> 12;
    var $xor = $bf_clear78 & 1;
    var $cmp29 = ($18 | 0) == ($xor | 0);
    var $neighbors = $_in + 56 | 0;
    var $26 = $neighbors;
    var $27 = HEAP32[$26 >> 2];
    var $p32 = $27 + 4 + ($15 << 2) | 0;
    var $28 = HEAP32[$p32 >> 2];
    var $29 = $28;
    var $tobool34 = ($28 | 0) == 0;
    var $or_cond = $cmp29 & $tobool34;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    HEAP32[$p32 >> 2] = $19;
    var $neighbors40 = $newfacet + 56 | 0;
    var $30 = HEAP32[$neighbors40 >> 2];
    var $p43 = $30 + 4 + ($newskip << 2) | 0;
    HEAP32[$p43 >> 2] = $_in;
    var $31 = HEAP32[$hashcount >> 2];
    var $dec = $31 - 1 | 0;
    HEAP32[$hashcount >> 2] = $dec;
    var $32 = HEAP32[5247036 >> 2];
    var $cmp44 = ($32 | 0) > 3;
    if ($cmp44) {
      label = 12;
      break;
    } else {
      label = 33;
      break;
    }
   case 12:
    _qh_fprintf(5283920);
    label = 33;
    break;
   case 13:
    var $33 = HEAP32[5247140 >> 2];
    var $34 = HEAP32[5247072 >> 2];
    var $35 = $34 | $33;
    var $36 = ($35 | 0) == 0;
    if ($36) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_precision();
    _qh_fprintf(5279728);
    _qh_errexit2(3, $8, $newfacet);
    label = 15;
    break;
   case 15:
    var $neighbors60 = $newfacet + 56 | 0;
    var $37 = HEAP32[$neighbors60 >> 2];
    var $p63 = $37 + 4 + ($newskip << 2) | 0;
    HEAP32[$p63 >> 2] = 1;
    var $38 = HEAP32[$21 >> 2];
    var $39 = $38 | 2097152;
    HEAP32[$21 >> 2] = $39;
    var $normal = $newfacet + 24 | 0;
    var $40 = HEAP32[$normal >> 2];
    var $tobool65 = ($40 | 0) == 0;
    if ($tobool65) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_setfacetplane($newfacet);
    label = 17;
    break;
   case 17:
    var $41 = HEAP32[5249176 >> 2];
    _qh_addhash($19, $41, $hashsize, $call);
    var $42 = HEAP32[$hashcount >> 2];
    var $inc68 = $42 + 1 | 0;
    HEAP32[$hashcount >> 2] = $inc68;
    var $normal69 = $_in + 24 | 0;
    var $43 = $normal69;
    var $44 = HEAP32[$43 >> 2];
    var $tobool70 = ($44 | 0) == 0;
    if ($tobool70) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    _qh_setfacetplane($8);
    label = 19;
    break;
   case 19:
    var $cmp73 = ($28 | 0) == 1;
    if ($cmp73) {
      label = 26;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $45 = HEAP32[$26 >> 2];
    var $p79 = $45 + 4 + ($15 << 2) | 0;
    HEAP32[$p79 >> 2] = 1;
    var $46 = HEAP32[$23 >> 2];
    var $47 = $46 | 2097152;
    HEAP32[$23 >> 2] = $47;
    var $48 = HEAP32[$43 >> 2];
    var $tobool82 = ($48 | 0) == 0;
    if ($tobool82) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_setfacetplane($8);
    label = 22;
    break;
   case 22:
    if ($tobool34) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $neighbors87 = $28 + 56 | 0;
    var $49 = $neighbors87;
    var $50 = HEAP32[$49 >> 2];
    var $call88 = _qh_setindex($50, $_in);
    var $p92 = $50 + 4 + ($call88 << 2) | 0;
    HEAP32[$p92 >> 2] = 1;
    var $bf_field_offs93 = $28 + 76 | 0;
    var $51 = $bf_field_offs93;
    var $52 = HEAP32[$51 >> 2];
    var $53 = $52 | 2097152;
    HEAP32[$51 >> 2] = $53;
    var $normal94 = $28 + 24 | 0;
    var $54 = $normal94;
    var $55 = HEAP32[$54 >> 2];
    var $tobool95 = ($55 | 0) == 0;
    if ($tobool95) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    _qh_setfacetplane($29);
    label = 25;
    break;
   case 25:
    var $56 = HEAP32[5249176 >> 2];
    _qh_addhash($28, $56, $hashsize, $call);
    var $57 = HEAP32[$hashcount >> 2];
    var $add = $57 + 2 | 0;
    HEAP32[$hashcount >> 2] = $add;
    label = 26;
    break;
   case 26:
    var $58 = HEAP32[5247036 >> 2];
    var $cmp100 = ($58 | 0) > 3;
    if ($cmp100) {
      label = 27;
      break;
    } else {
      label = 33;
      break;
    }
   case 27:
    _qh_fprintf(5279004);
    label = 33;
    break;
   case 28:
    var $59;
    var $newfound_1;
    var $inc119 = $scan_085 + 1 | 0;
    var $cmp120 = ($inc119 | 0) >= ($hashsize | 0);
    var $cond125 = $cmp120 ? 0 : $inc119;
    var $p4 = $59 + 4 + ($cond125 << 2) | 0;
    var $60 = HEAP32[$p4 >> 2];
    var $tobool = ($60 | 0) == 0;
    if ($tobool) {
      label = 29;
      break;
    } else {
      var $scan_085 = $cond125;
      var $newfound_086 = $newfound_1;
      var $_in = $60;
      var $7 = $59;
      label = 5;
      break;
    }
   case 29:
    var $tobool126 = ($newfound_1 | 0) == 0;
    if ($tobool126) {
      var $p4_lcssa94 = $p4;
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $p4_lcssa94;
    var $61 = $newfacet;
    HEAP32[$p4_lcssa94 >> 2] = $61;
    label = 31;
    break;
   case 31:
    var $62 = HEAP32[$hashcount >> 2];
    var $inc132 = $62 + 1 | 0;
    HEAP32[$hashcount >> 2] = $inc132;
    var $63 = HEAP32[5247036 >> 2];
    var $cmp133 = ($63 | 0) > 3;
    if ($cmp133) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5278416);
    label = 33;
    break;
   case 33:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_matchneighbor["X"] = 1;
function _qh_addhash($newelem, $hashtable, $hashsize, $hash) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p7 = $hashtable + 4 + ($hash << 2) | 0;
    var $0 = HEAP32[$p7 >> 2];
    var $tobool8 = ($0 | 0) != 0;
    var $tobool_not9 = $tobool8 ^ 1;
    var $cmp10 = ($0 | 0) == ($newelem | 0);
    var $or_cond11 = $cmp10 | $tobool_not9;
    if ($or_cond11) {
      var $p_lcssa = $p7;
      var $tobool_lcssa = $tobool8;
      label = 4;
      break;
    } else {
      var $scan_012 = $hash;
      label = 3;
      break;
    }
   case 3:
    var $scan_012;
    var $inc = $scan_012 + 1 | 0;
    var $cmp1 = ($inc | 0) >= ($hashsize | 0);
    var $cond = $cmp1 ? 0 : $inc;
    var $p = $hashtable + 4 + ($cond << 2) | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool = ($1 | 0) != 0;
    var $tobool_not = $tobool ^ 1;
    var $cmp = ($1 | 0) == ($newelem | 0);
    var $or_cond = $cmp | $tobool_not;
    if ($or_cond) {
      var $p_lcssa = $p;
      var $tobool_lcssa = $tobool;
      label = 4;
      break;
    } else {
      var $scan_012 = $cond;
      label = 3;
      break;
    }
   case 4:
    var $tobool_lcssa;
    var $p_lcssa;
    if ($tobool_lcssa) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[$p_lcssa >> 2] = $newelem;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _qh_matchvertices($verticesA, $skipA, $verticesB, $skipB, $same) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $verticesA + 8 | 0;
    var $0 = $p;
    var $p3 = $verticesB + 8 | 0;
    var $1 = $p3;
    var $p6 = $verticesA + 4 + ($skipA << 2) | 0;
    var $2 = $p6;
    var $skipBp_0 = 0;
    var $elemBp_0 = $1;
    var $elemAp_0 = $0;
    label = 3;
    break;
   case 3:
    var $elemAp_0;
    var $elemBp_0;
    var $skipBp_0;
    var $cmp = ($elemAp_0 | 0) == ($2 | 0);
    if ($cmp) {
      var $skipBp_2 = $skipBp_0;
      var $elemBp_2 = $elemBp_0;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = HEAP32[$elemAp_0 >> 2];
    var $skipBp_1 = $skipBp_0;
    var $elemBp_1 = $elemBp_0;
    label = 5;
    break;
   case 5:
    var $elemBp_1;
    var $skipBp_1;
    var $incdec_ptr = $elemBp_1 + 4 | 0;
    var $4 = HEAP32[$elemBp_1 >> 2];
    var $cmp7 = ($3 | 0) == ($4 | 0);
    if ($cmp7) {
      var $skipBp_2 = $skipBp_1;
      var $elemBp_2 = $incdec_ptr;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $tobool = ($skipBp_1 | 0) == 0;
    if ($tobool) {
      var $skipBp_1 = $incdec_ptr;
      var $elemBp_1 = $incdec_ptr;
      label = 5;
      break;
    } else {
      var $retval_0 = 0;
      label = 10;
      break;
    }
   case 7:
    var $elemBp_2;
    var $skipBp_2;
    var $incdec_ptr10 = $elemAp_0 + 4 | 0;
    var $5 = HEAP32[$incdec_ptr10 >> 2];
    var $tobool11 = ($5 | 0) == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      var $skipBp_0 = $skipBp_2;
      var $elemBp_0 = $elemBp_2;
      var $elemAp_0 = $incdec_ptr10;
      label = 3;
      break;
    }
   case 8:
    var $tobool12 = ($skipBp_2 | 0) == 0;
    var $incdec_ptr14 = $elemBp_2 + 4 | 0;
    var $incdec_ptr14_skipBp_2 = $tobool12 ? $incdec_ptr14 : $skipBp_2;
    var $sub_ptr_lhs_cast = $incdec_ptr14_skipBp_2;
    var $sub_ptr_rhs_cast = $p3;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    HEAP32[$skipB >> 2] = $sub_ptr_div;
    var $and17 = $sub_ptr_div ^ $skipA;
    var $xor = $and17 & 1;
    var $6 = $xor ^ 1;
    HEAP32[$same >> 2] = $6;
    var $7 = HEAP32[5247036 >> 2];
    var $cmp21 = ($7 | 0) > 3;
    if ($cmp21) {
      label = 9;
      break;
    } else {
      var $retval_0 = 1;
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5275660);
    var $retval_0 = 1;
    label = 10;
    break;
   case 10:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_matchnewfacets() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $hashcount = __stackBase__;
    HEAP32[$hashcount >> 2] = 0;
    var $0 = HEAP32[5247504 >> 2];
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5277424);
    label = 4;
    break;
   case 4:
    var $newfacet_051 = HEAP32[5248952 >> 2];
    var $tobool52 = ($newfacet_051 | 0) == 0;
    if ($tobool52) {
      var $numnew_0_lcssa = 0;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $add = $0 + 1 | 0;
    var $add_c = $add;
    var $mul = $0 << 2;
    var $numnew_053 = 0;
    var $newfacet_054 = $newfacet_051;
    label = 6;
    break;
   case 6:
    var $newfacet_054;
    var $numnew_053;
    var $next = $newfacet_054 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      var $numnew_0_lcssa = $numnew_053;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $inc = $numnew_053 + 1 | 0;
    var $neighbors2 = $newfacet_054 + 56 | 0;
    var $3 = HEAP32[$neighbors2 >> 2];
    var $maxsize = $3 | 0;
    var $4 = HEAP32[$maxsize >> 2];
    var $5 = $3 + 4 + ($4 << 2) | 0;
    HEAP32[$5 >> 2] = $add_c;
    var $p = $3 + 8 | 0;
    var $6 = $p;
    _memset($6, 0, $mul);
    var $newfacet_0 = HEAP32[$next >> 2];
    var $tobool = ($newfacet_0 | 0) == 0;
    if ($tobool) {
      var $numnew_0_lcssa = $inc;
      label = 8;
      break;
    } else {
      var $numnew_053 = $inc;
      var $newfacet_054 = $newfacet_0;
      label = 6;
      break;
    }
   case 8:
    var $numnew_0_lcssa;
    var $7 = HEAP32[5247504 >> 2];
    var $sub = $7 - 1 | 0;
    var $mul6 = $sub * $numnew_0_lcssa & -1;
    var $call = _qh_newhashtable($mul6);
    var $8 = HEAP32[5249176 >> 2];
    var $call7 = _qh_setsize($8);
    var $newfacet_148 = HEAP32[5248952 >> 2];
    var $tobool949 = ($newfacet_148 | 0) == 0;
    if ($tobool949) {
      label = 25;
      break;
    } else {
      var $newfacet_150 = $newfacet_148;
      label = 10;
      break;
    }
   case 9:
    var $newfacet_1_pre = HEAP32[$next11 >> 2];
    var $tobool9 = ($newfacet_1_pre | 0) == 0;
    if ($tobool9) {
      label = 13;
      break;
    } else {
      var $newfacet_150 = $newfacet_1_pre;
      label = 10;
      break;
    }
   case 10:
    var $newfacet_150;
    var $next11 = $newfacet_150 + 44 | 0;
    var $9 = HEAP32[$next11 >> 2];
    var $tobool12 = ($9 | 0) == 0;
    if ($tobool12) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $10 = HEAP32[5247504 >> 2];
    var $cmp1646 = ($10 | 0) > 1;
    if ($cmp1646) {
      var $newskip_047 = 1;
      label = 12;
      break;
    } else {
      var $newfacet_150 = $9;
      label = 10;
      break;
    }
   case 12:
    var $newskip_047;
    _qh_matchneighbor($newfacet_150, $newskip_047, $call7, $hashcount);
    var $inc19 = $newskip_047 + 1 | 0;
    var $11 = HEAP32[5247504 >> 2];
    var $cmp16 = ($inc19 | 0) < ($11 | 0);
    if ($cmp16) {
      var $newskip_047 = $inc19;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 13:
    var $_pre = HEAP32[$hashcount >> 2];
    var $tobool24 = ($_pre | 0) == 0;
    if ($tobool24) {
      label = 25;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $newfacet_243 = HEAP32[5248952 >> 2];
    var $tobool2744 = ($newfacet_243 | 0) == 0;
    if ($tobool2744) {
      label = 24;
      break;
    } else {
      var $newfacet_245 = $newfacet_243;
      label = 15;
      break;
    }
   case 15:
    var $newfacet_245;
    var $next29 = $newfacet_245 + 44 | 0;
    var $12 = HEAP32[$next29 >> 2];
    var $tobool30 = ($12 | 0) == 0;
    if ($tobool30) {
      label = 23;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $13 = $newfacet_245 + 76 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear = $15 & 2097152;
    var $tobool33 = ($bf_clear | 0) == 0;
    if ($tobool33) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $neighbors35 = $newfacet_245 + 56 | 0;
    var $16 = HEAP32[$neighbors35 >> 2];
    var $tobool36 = ($16 | 0) == 0;
    if ($tobool36) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $newfacet_2 = HEAP32[$next29 >> 2];
    var $tobool27 = ($newfacet_2 | 0) == 0;
    if ($tobool27) {
      label = 23;
      break;
    } else {
      var $newfacet_245 = $newfacet_2;
      label = 15;
      break;
    }
   case 19:
    var $p41 = $16 + 4 | 0;
    var $17 = HEAP32[$p41 >> 2];
    var $call43 = _qh_setsize($16);
    var $cmp4540 = ($call43 | 0) > 0;
    if ($cmp4540) {
      var $neighbor_0_in41 = $17;
      var $neighbor_i_042 = 0;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 20:
    var $neighbor_i_042;
    var $neighbor_0_in41;
    var $cmp47 = ($neighbor_0_in41 | 0) == 1;
    if ($cmp47) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_matchduplicates($newfacet_245, $neighbor_i_042, $call7, $hashcount);
    label = 22;
    break;
   case 22:
    var $inc51 = $neighbor_i_042 + 1 | 0;
    var $18 = HEAP32[$neighbors35 >> 2];
    var $p55 = $18 + 4 + ($inc51 << 2) | 0;
    var $19 = HEAP32[$p55 >> 2];
    var $exitcond56 = ($inc51 | 0) == ($call43 | 0);
    if ($exitcond56) {
      label = 18;
      break;
    } else {
      var $neighbor_0_in41 = $19;
      var $neighbor_i_042 = $inc51;
      label = 20;
      break;
    }
   case 23:
    var $_pr_pre = HEAP32[$hashcount >> 2];
    var $tobool63 = ($_pr_pre | 0) == 0;
    if ($tobool63) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_fprintf(5276724);
    _qh_printhashtable();
    _qh_errexit(5, 0, 0);
    label = 25;
    break;
   case 25:
    var $20 = HEAP32[5247036 >> 2];
    var $cmp66 = ($20 | 0) > 1;
    if ($cmp66) {
      label = 26;
      break;
    } else {
      label = 30;
      break;
    }
   case 26:
    var $21 = HEAP32[5249176 >> 2];
    var $tobool68 = ($21 | 0) == 0;
    if ($tobool68) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call73 = _qh_setsize($21);
    var $cmp7536 = ($call73 | 0) > 0;
    if ($cmp7536) {
      var $facet_i_037 = 0;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $facet_i_037;
    var $inc82 = $facet_i_037 + 1 | 0;
    var $exitcond = ($inc82 | 0) == ($call73 | 0);
    if ($exitcond) {
      label = 29;
      break;
    } else {
      var $facet_i_037 = $inc82;
      label = 28;
      break;
    }
   case 29:
    var $22 = HEAP32[5249176 >> 2];
    var $call88 = _qh_setsize($22);
    _qh_fprintf(5276068);
    label = 30;
    break;
   case 30:
    _qh_setfree(5249176);
    var $23 = HEAP32[5247140 >> 2];
    var $24 = HEAP32[5247072 >> 2];
    var $25 = $24 | $23;
    var $26 = ($25 | 0) == 0;
    if ($26) {
      label = 37;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $27 = HEAP32[5247036 >> 2];
    var $cmp93 = ($27 | 0) > 3;
    if ($cmp93) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $28 = HEAP32[5248952 >> 2];
    _qh_printfacetlist($28);
    label = 33;
    break;
   case 33:
    var $newfacet_333 = HEAP32[5248952 >> 2];
    var $tobool9734 = ($newfacet_333 | 0) == 0;
    if ($tobool9734) {
      label = 39;
      break;
    } else {
      var $newfacet_335 = $newfacet_333;
      label = 34;
      break;
    }
   case 34:
    var $newfacet_335;
    var $next99 = $newfacet_335 + 44 | 0;
    var $29 = HEAP32[$next99 >> 2];
    var $tobool100 = ($29 | 0) == 0;
    if ($tobool100) {
      label = 39;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $normal = $newfacet_335 + 24 | 0;
    var $30 = HEAP32[$normal >> 2];
    var $tobool103 = ($30 | 0) == 0;
    if ($tobool103) {
      var $newfacet_335 = $29;
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $call105 = _qh_checkflipped($newfacet_335, 0, 1);
    var $newfacet_3_pre = HEAP32[$next99 >> 2];
    var $tobool97 = ($newfacet_3_pre | 0) == 0;
    if ($tobool97) {
      label = 39;
      break;
    } else {
      var $newfacet_335 = $newfacet_3_pre;
      label = 34;
      break;
    }
   case 37:
    var $31 = HEAP32[5247008 >> 2];
    var $tobool110 = ($31 | 0) == 0;
    if ($tobool110) {
      label = 39;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $32 = HEAP32[5248952 >> 2];
    _qh_checkflipped_all($32);
    label = 39;
    break;
   case 39:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_matchnewfacets["X"] = 1;
function _qh_newridge() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _qh_memalloc(16);
    var $0 = $call;
    for (var $$dest = $call, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
      HEAP8[$$dest] = 0;
    }
    var $1 = HEAP32[5244600 >> 2];
    var $inc = $1 + 1 | 0;
    HEAP32[5244600 >> 2] = $inc;
    var $2 = HEAP32[5249012 >> 2];
    var $bf_clear = $2 & 16777215;
    var $cmp = ($bf_clear | 0) == 16777215;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $3 = $2;
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5274484);
    var $_pre = HEAP32[5249012 >> 2];
    var $3 = $_pre;
    label = 4;
    break;
   case 4:
    var $3;
    var $bf_clear1 = $3 & 16777215;
    var $inc2 = $3 + 1 | 0;
    var $bf_value = $inc2 & 16777215;
    var $4 = $3 & -16777216;
    var $5 = $bf_value | $4;
    HEAP32[5249012 >> 2] = $5;
    var $bf_field_offs = $call + 12 | 0;
    var $6 = $bf_field_offs;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 & -16777216;
    var $9 = $8 | $bf_clear1;
    HEAP32[$6 >> 2] = $9;
    var $10 = HEAP32[5247036 >> 2];
    var $cmp4 = ($10 | 0) > 3;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5273884);
    label = 6;
    break;
   case 6:
    return $0;
  }
}
function _qh_pointid($point) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($point | 0) == 0;
    if ($tobool) {
      var $retval_0 = -3;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5248924 >> 2];
    var $cmp = ($0 | 0) == ($point | 0);
    if ($cmp) {
      var $retval_0 = -2;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[5247516 >> 2];
    var $cmp3 = $1 >>> 0 > $point >>> 0;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[5247512 >> 2];
    var $3 = HEAP32[5247504 >> 2];
    var $mul = $3 * $2 & -1;
    var $add_ptr = $1 + ($mul << 3) | 0;
    var $cmp4 = $add_ptr >>> 0 > $point >>> 0;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $sub_ptr_lhs_cast = $point;
    var $sub_ptr_rhs_cast = $1;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 3;
    var $div = ($sub_ptr_div | 0) / ($3 | 0) & -1;
    var $retval_0 = $div;
    label = 9;
    break;
   case 7:
    var $4 = HEAP32[5249180 >> 2];
    var $5 = $point;
    var $call = _qh_setindex($4, $5);
    var $cmp7 = ($call | 0) == -1;
    if ($cmp7) {
      var $retval_0 = -1;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $6 = HEAP32[5247512 >> 2];
    var $add = $6 + $call | 0;
    var $retval_0 = $add;
    label = 9;
    break;
   case 9:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_updatevertices() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5272212);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248576 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $vertex_070 = HEAP32[5248988 >> 2];
    var $tobool271 = ($vertex_070 | 0) == 0;
    if ($tobool271) {
      label = 7;
      break;
    } else {
      var $vertex_072 = $vertex_070;
      label = 8;
      break;
    }
   case 6:
    var $visible_151 = HEAP32[5248956 >> 2];
    var $tobool10452 = ($visible_151 | 0) == 0;
    if ($tobool10452) {
      label = 48;
      break;
    } else {
      var $visible_153 = $visible_151;
      label = 39;
      break;
    }
   case 7:
    var $newfacet_063 = HEAP32[5248952 >> 2];
    var $tobool1964 = ($newfacet_063 | 0) == 0;
    if ($tobool1964) {
      label = 17;
      break;
    } else {
      var $newfacet_065 = $newfacet_063;
      label = 18;
      break;
    }
   case 8:
    var $vertex_072;
    var $next = $vertex_072 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $neighbors = $vertex_072 + 12 | 0;
    var $3 = HEAP32[$neighbors >> 2];
    var $tobool4 = ($3 | 0) == 0;
    if ($tobool4) {
      var $12 = 0;
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $3 + 4 | 0;
    var $4 = HEAP32[$p >> 2];
    var $tobool867 = ($4 | 0) == 0;
    if ($tobool867) {
      var $12 = $3;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $5 = $4;
    var $6 = $p;
    var $incdec_ptr6673 = $p + 4 | 0;
    var $incdec_ptr66 = $incdec_ptr6673;
    var $neighborp_068 = $6;
    var $incdec_ptr69 = $incdec_ptr66;
    var $7 = $5;
    label = 12;
    break;
   case 12:
    var $7;
    var $incdec_ptr69;
    var $neighborp_068;
    var $8 = $7 + 76 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $bf_clear = $10 & 2048;
    var $tobool10 = ($bf_clear | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAP32[$neighborp_068 >> 2] = 0;
    label = 14;
    break;
   case 14:
    var $incdec_ptr = $incdec_ptr69 + 4 | 0;
    var $11 = HEAP32[$incdec_ptr69 >> 2];
    var $tobool8 = ($11 | 0) == 0;
    if ($tobool8) {
      label = 15;
      break;
    } else {
      var $neighborp_068 = $incdec_ptr69;
      var $incdec_ptr69 = $incdec_ptr;
      var $7 = $11;
      label = 12;
      break;
    }
   case 15:
    var $_pre = HEAP32[$neighbors >> 2];
    var $12 = $_pre;
    label = 16;
    break;
   case 16:
    var $12;
    _qh_setcompact($12);
    var $vertex_0 = HEAP32[$next >> 2];
    var $tobool2 = ($vertex_0 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      var $vertex_072 = $vertex_0;
      label = 8;
      break;
    }
   case 17:
    var $visible_058 = HEAP32[5248956 >> 2];
    var $tobool4259 = ($visible_058 | 0) == 0;
    if ($tobool4259) {
      label = 48;
      break;
    } else {
      var $visible_060 = $visible_058;
      label = 25;
      break;
    }
   case 18:
    var $newfacet_065;
    var $next21 = $newfacet_065 + 44 | 0;
    var $13 = HEAP32[$next21 >> 2];
    var $tobool22 = ($13 | 0) == 0;
    if ($tobool22) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $vertices = $newfacet_065 + 48 | 0;
    var $14 = HEAP32[$vertices >> 2];
    var $tobool25 = ($14 | 0) == 0;
    if ($tobool25) {
      var $newfacet_065 = $13;
      label = 18;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    var $newfacet_0_pre = HEAP32[$next21 >> 2];
    var $newfacet_0 = $newfacet_0_pre;
    label = 21;
    break;
   case 21:
    var $newfacet_0;
    var $tobool19 = ($newfacet_0 | 0) == 0;
    if ($tobool19) {
      label = 17;
      break;
    } else {
      var $newfacet_065 = $newfacet_0;
      label = 18;
      break;
    }
   case 22:
    var $p30 = $14 + 4 | 0;
    var $15 = HEAP32[$p30 >> 2];
    var $tobool3361 = ($15 | 0) == 0;
    if ($tobool3361) {
      var $newfacet_0 = $13;
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $16 = $15;
    var $17 = $p30;
    var $18 = $newfacet_065;
    var $vertexp_062 = $17;
    var $19 = $16;
    label = 24;
    break;
   case 24:
    var $19;
    var $vertexp_062;
    var $incdec_ptr32 = $vertexp_062 + 4 | 0;
    var $neighbors35 = $19 + 12 | 0;
    _qh_setappend($neighbors35, $18);
    var $20 = HEAP32[$incdec_ptr32 >> 2];
    var $tobool33 = ($20 | 0) == 0;
    if ($tobool33) {
      label = 20;
      break;
    } else {
      var $vertexp_062 = $incdec_ptr32;
      var $19 = $20;
      label = 24;
      break;
    }
   case 25:
    var $visible_060;
    var $21 = $visible_060;
    var $22 = $visible_060 + 76 | 0;
    var $23 = $22;
    var $24 = HEAP32[$23 >> 2];
    var $bf_clear45 = $24 & 2048;
    var $tobool46 = ($bf_clear45 | 0) == 0;
    if ($tobool46) {
      label = 48;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $vertices49 = $visible_060 + 48 | 0;
    var $25 = HEAP32[$vertices49 >> 2];
    var $tobool50 = ($25 | 0) == 0;
    if ($tobool50) {
      label = 38;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $p55 = $25 + 4 | 0;
    var $26 = HEAP32[$p55 >> 2];
    var $tobool5855 = ($26 | 0) == 0;
    if ($tobool5855) {
      label = 38;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $27 = $26;
    var $incdec_ptr575474 = $p55 + 4 | 0;
    var $incdec_ptr5754 = $incdec_ptr575474;
    var $incdec_ptr5756 = $incdec_ptr5754;
    var $28 = $27;
    label = 29;
    break;
   case 29:
    var $28;
    var $incdec_ptr5756;
    var $29 = $28;
    var $30 = $28 + 20 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $33 = $32 >>> 0 < 1073741824;
    if ($33) {
      label = 30;
      break;
    } else {
      label = 35;
      break;
    }
   case 30:
    var $neighbors67 = $28 + 12 | 0;
    var $34 = HEAP32[$neighbors67 >> 2];
    var $tobool68 = ($34 | 0) == 0;
    if ($tobool68) {
      label = 36;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $p73 = $34 + 4 | 0;
    var $35 = $p73;
    var $neighborp_1 = $35;
    label = 32;
    break;
   case 32:
    var $neighborp_1;
    var $36 = HEAP32[$neighborp_1 >> 2];
    var $tobool76 = ($36 | 0) == 0;
    if ($tobool76) {
      label = 36;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $incdec_ptr75 = $neighborp_1 + 4 | 0;
    var $37 = $36 + 76 | 0;
    var $38 = $37;
    var $39 = HEAP32[$38 >> 2];
    var $bf_clear79 = $39 & 2048;
    var $tobool80 = ($bf_clear79 | 0) == 0;
    if ($tobool80) {
      label = 34;
      break;
    } else {
      var $neighborp_1 = $incdec_ptr75;
      label = 32;
      break;
    }
   case 34:
    var $call = _qh_setdel($34, $21);
    label = 35;
    break;
   case 35:
    var $incdec_ptr57 = $incdec_ptr5756 + 4 | 0;
    var $40 = HEAP32[$incdec_ptr5756 >> 2];
    var $tobool58 = ($40 | 0) == 0;
    if ($tobool58) {
      label = 38;
      break;
    } else {
      var $incdec_ptr5756 = $incdec_ptr57;
      var $28 = $40;
      label = 29;
      break;
    }
   case 36:
    var $41 = $32 | 1073741824;
    HEAP32[$31 >> 2] = $41;
    _qh_setappend(5249184, $29);
    var $42 = HEAP32[5247036 >> 2];
    var $cmp89 = ($42 | 0) > 1;
    if ($cmp89) {
      label = 37;
      break;
    } else {
      label = 35;
      break;
    }
   case 37:
    _qh_fprintf(5271720);
    label = 35;
    break;
   case 38:
    var $next100 = $visible_060 + 44 | 0;
    var $visible_0 = HEAP32[$next100 >> 2];
    var $tobool42 = ($visible_0 | 0) == 0;
    if ($tobool42) {
      label = 48;
      break;
    } else {
      var $visible_060 = $visible_0;
      label = 25;
      break;
    }
   case 39:
    var $visible_153;
    var $43 = $visible_153 + 76 | 0;
    var $44 = $43;
    var $45 = HEAP32[$44 >> 2];
    var $bf_clear107 = $45 & 2048;
    var $tobool108 = ($bf_clear107 | 0) == 0;
    if ($tobool108) {
      label = 48;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $vertices111 = $visible_153 + 48 | 0;
    var $46 = HEAP32[$vertices111 >> 2];
    var $tobool112 = ($46 | 0) == 0;
    if ($tobool112) {
      label = 47;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $p117 = $46 + 4 | 0;
    var $47 = HEAP32[$p117 >> 2];
    var $tobool12049 = ($47 | 0) == 0;
    if ($tobool12049) {
      label = 47;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $48 = $47;
    var $incdec_ptr1194875 = $p117 + 4 | 0;
    var $incdec_ptr11948 = $incdec_ptr1194875;
    var $incdec_ptr11950 = $incdec_ptr11948;
    var $49 = $48;
    label = 43;
    break;
   case 43:
    var $49;
    var $incdec_ptr11950;
    var $50 = $49 + 20 | 0;
    var $51 = $50;
    var $52 = HEAP32[$51 >> 2];
    var $53 = $52 >>> 0 < 1073741824;
    if ($53) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    var $54 = $49;
    var $55 = $52 | 1073741824;
    HEAP32[$51 >> 2] = $55;
    _qh_setappend(5249184, $54);
    var $56 = HEAP32[5247036 >> 2];
    var $cmp131 = ($56 | 0) > 1;
    if ($cmp131) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $incdec_ptr119 = $incdec_ptr11950 + 4 | 0;
    var $57 = HEAP32[$incdec_ptr11950 >> 2];
    var $tobool120 = ($57 | 0) == 0;
    if ($tobool120) {
      label = 47;
      break;
    } else {
      var $incdec_ptr11950 = $incdec_ptr119;
      var $49 = $57;
      label = 43;
      break;
    }
   case 46:
    _qh_fprintf(5271720);
    label = 45;
    break;
   case 47:
    var $next143 = $visible_153 + 44 | 0;
    var $visible_1 = HEAP32[$next143 >> 2];
    var $tobool104 = ($visible_1 | 0) == 0;
    if ($tobool104) {
      label = 48;
      break;
    } else {
      var $visible_153 = $visible_1;
      label = 39;
      break;
    }
   case 48:
    return;
  }
}
_qh_updatevertices["X"] = 1;
function _qh_pointfacet() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($1);
    var $add = $call + $0 | 0;
    var $call1 = _qh_settemp($add);
    _qh_setzero($call1, $add);
    var $2 = HEAP32[5249156 >> 2];
    var $inc = $2 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $3 = $2 & -2147483648;
    var $4 = $bf_value | $3;
    HEAP32[5249156 >> 2] = $4;
    var $facet_029 = HEAP32[5248940 >> 2];
    var $tobool30 = ($facet_029 | 0) == 0;
    if ($tobool30) {
      label = 20;
      break;
    } else {
      var $facet_031 = $facet_029;
      label = 3;
      break;
    }
   case 3:
    var $facet_031;
    var $next = $facet_031 + 44 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool2 = ($5 | 0) == 0;
    if ($tobool2) {
      label = 20;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $vertices = $facet_031 + 48 | 0;
    var $6 = HEAP32[$vertices >> 2];
    var $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $6 + 4 | 0;
    var $7 = HEAP32[$p >> 2];
    var $tobool622 = ($7 | 0) == 0;
    if ($tobool622) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $8 = $7;
    var $incdec_ptr2132 = $p + 4 | 0;
    var $incdec_ptr21 = $incdec_ptr2132;
    var $9 = $facet_031;
    var $incdec_ptr24 = $incdec_ptr21;
    var $10 = $8;
    label = 7;
    break;
   case 7:
    var $10;
    var $incdec_ptr24;
    var $11 = $10 + 16 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear8 = $13 & 2147483647;
    var $14 = HEAP32[5249156 >> 2];
    var $bf_clear9 = $14 & 2147483647;
    var $cmp = ($bf_clear8 | 0) == ($bf_clear9 | 0);
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $15 = $13 & -2147483648;
    var $16 = $bf_clear9 | $15;
    HEAP32[$12 >> 2] = $16;
    var $point14 = $10 + 8 | 0;
    var $17 = HEAP32[$point14 >> 2];
    _qh_point_add($call1, $17, $9);
    label = 9;
    break;
   case 9:
    var $18 = HEAP32[$incdec_ptr24 >> 2];
    var $tobool6 = ($18 | 0) == 0;
    if ($tobool6) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $incdec_ptr = $incdec_ptr24 + 4 | 0;
    var $incdec_ptr24 = $incdec_ptr;
    var $10 = $18;
    label = 7;
    break;
   case 11:
    var $coplanarset = $facet_031 + 64 | 0;
    var $19 = HEAP32[$coplanarset >> 2];
    var $tobool16 = ($19 | 0) == 0;
    if ($tobool16) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p21 = $19 + 4 | 0;
    var $20 = HEAP32[$p21 >> 2];
    var $tobool2425 = ($20 | 0) == 0;
    if ($tobool2425) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $21 = $20;
    var $22 = $p21;
    var $23 = $facet_031;
    var $pointp_026 = $22;
    var $24 = $21;
    label = 14;
    break;
   case 14:
    var $24;
    var $pointp_026;
    var $incdec_ptr23 = $pointp_026 + 4 | 0;
    _qh_point_add($call1, $24, $23);
    var $25 = HEAP32[$incdec_ptr23 >> 2];
    var $tobool24 = ($25 | 0) == 0;
    if ($tobool24) {
      label = 15;
      break;
    } else {
      var $pointp_026 = $incdec_ptr23;
      var $24 = $25;
      label = 14;
      break;
    }
   case 15:
    var $outsideset = $facet_031 + 60 | 0;
    var $26 = HEAP32[$outsideset >> 2];
    var $tobool28 = ($26 | 0) == 0;
    if ($tobool28) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 20;
      break;
    } else {
      var $facet_031 = $facet_0;
      label = 3;
      break;
    }
   case 17:
    var $p33 = $26 + 4 | 0;
    var $27 = HEAP32[$p33 >> 2];
    var $tobool3627 = ($27 | 0) == 0;
    if ($tobool3627) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $28 = $27;
    var $29 = $p33;
    var $30 = $facet_031;
    var $pointp_128 = $29;
    var $31 = $28;
    label = 19;
    break;
   case 19:
    var $31;
    var $pointp_128;
    var $incdec_ptr35 = $pointp_128 + 4 | 0;
    _qh_point_add($call1, $31, $30);
    var $32 = HEAP32[$incdec_ptr35 >> 2];
    var $tobool36 = ($32 | 0) == 0;
    if ($tobool36) {
      label = 16;
      break;
    } else {
      var $pointp_128 = $incdec_ptr35;
      var $31 = $32;
      label = 19;
      break;
    }
   case 20:
    return $call1;
  }
}
_qh_pointfacet["X"] = 1;
function _qh_point($id) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($id | 0) < 0;
    if ($cmp) {
      var $retval_0 = 0;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[5247512 >> 2];
    var $cmp1 = ($0 | 0) > ($id | 0);
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[5247516 >> 2];
    var $2 = HEAP32[5247504 >> 2];
    var $mul = $2 * $id & -1;
    var $add_ptr = $1 + ($mul << 3) | 0;
    var $retval_0 = $add_ptr;
    label = 7;
    break;
   case 5:
    var $sub = $id - $0 | 0;
    var $3 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($3);
    var $cmp4 = ($sub | 0) < ($call | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      var $retval_0 = 0;
      label = 7;
      break;
    }
   case 6:
    var $4 = HEAP32[5249180 >> 2];
    var $p = $4 + 4 + ($sub << 2) | 0;
    var $5 = HEAP32[$p >> 2];
    var $6 = $5;
    var $retval_0 = $6;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_check_maxout() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $facetlist = __stackBase__;
    var $dist = __stackBase__ + 4;
    var $numpart = __stackBase__ + 12;
    var $facets = __stackBase__ + 16;
    var $vertices = __stackBase__ + 20;
    HEAP32[$numpart >> 2] = 0;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5249772);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248576 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 23;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[5247316 >> 2];
    var $3 = HEAP32[5247048 >> 2];
    var $4 = $3 | $2;
    var $5 = HEAP32[5247044 >> 2];
    var $6 = $4 | $5;
    var $7 = HEAP32[5247424 >> 2];
    var $8 = $6 | $7;
    var $9 = HEAP32[5247312 >> 2];
    var $10 = $8 | $9;
    var $11 = ($10 | 0) == 0;
    if ($11) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $12 = HEAP32[5247188 >> 2];
    if (($12 | 0) == 24 | ($12 | 0) == 0) {
      label = 7;
      break;
    } else {
      label = 23;
      break;
    }
   case 7:
    var $13 = HEAP32[5247036 >> 2];
    var $cmp14 = ($13 | 0) > 0;
    if ($cmp14) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5300272);
    label = 9;
    break;
   case 9:
    var $call = _qh_pointvertex();
    HEAP32[$vertices >> 2] = $call;
    var $vertex_0_in_ph_ph = 5248980;
    var $minvertex_0_ph_ph = 0;
    label = 10;
    break;
   case 10:
    var $minvertex_0_ph_ph;
    var $vertex_0_in_ph_ph;
    var $vertex_0_pre_pre = HEAP32[$vertex_0_in_ph_ph >> 2];
    var $vertex_0 = $vertex_0_pre_pre;
    label = 11;
    break;
   case 11:
    var $vertex_0;
    var $tobool17 = ($vertex_0 | 0) == 0;
    if ($tobool17) {
      label = 19;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $next = $vertex_0 | 0;
    var $14 = HEAP32[$next >> 2];
    var $tobool18 = ($14 | 0) == 0;
    if ($tobool18) {
      label = 19;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $neighbors = $vertex_0 + 12 | 0;
    var $15 = HEAP32[$neighbors >> 2];
    var $tobool19 = ($15 | 0) == 0;
    if ($tobool19) {
      var $vertex_0 = $14;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p = $15 + 4 | 0;
    var $16 = HEAP32[$p >> 2];
    var $tobool2352 = ($16 | 0) == 0;
    if ($tobool2352) {
      var $vertex_0 = $14;
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $17 = $16;
    var $incdec_ptr5157 = $p + 4 | 0;
    var $incdec_ptr51 = $incdec_ptr5157;
    var $point25 = $vertex_0 + 8 | 0;
    var $minvertex_153 = $minvertex_0_ph_ph;
    var $incdec_ptr54 = $incdec_ptr51;
    var $18 = $17;
    label = 16;
    break;
   case 16:
    var $18;
    var $incdec_ptr54;
    var $minvertex_153;
    var $19 = HEAP32[5243448 >> 2];
    var $inc = $19 + 1 | 0;
    HEAP32[5243448 >> 2] = $inc;
    var $20 = HEAP32[$point25 >> 2];
    _qh_distplane($20, $18, $dist);
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp26 = $minvertex_153 > $21;
    var $minvertex_2 = $cmp26 ? $21 : $minvertex_153;
    var $sub = -$21;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp29 = $22 < $sub;
    var $cmp31 = $21 > $22;
    var $or_cond = $cmp29 | $cmp31;
    var $23 = HEAP32[5248968 >> 2];
    var $cmp33 = ($18 | 0) == ($23 | 0);
    var $or_cond38 = $or_cond | $cmp33;
    var $24 = HEAP32[5248976 >> 2];
    var $cmp35 = ($vertex_0 | 0) == ($24 | 0);
    var $or_cond39 = $or_cond38 | $cmp35;
    if ($or_cond39) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _qh_fprintf(5297752);
    label = 18;
    break;
   case 18:
    var $incdec_ptr = $incdec_ptr54 + 4 | 0;
    var $25 = HEAP32[$incdec_ptr54 >> 2];
    var $tobool23 = ($25 | 0) == 0;
    if ($tobool23) {
      var $vertex_0_in_ph_ph = $next;
      var $minvertex_0_ph_ph = $minvertex_2;
      label = 10;
      break;
    } else {
      var $minvertex_153 = $minvertex_2;
      var $incdec_ptr54 = $incdec_ptr;
      var $18 = $25;
      label = 16;
      break;
    }
   case 19:
    var $26 = HEAP32[5247080 >> 2];
    var $tobool43 = ($26 | 0) == 0;
    if ($tobool43) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp45 = $27 > $28;
    if ($cmp45) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAPF64[tempDoublePtr >> 3] = $28, HEAP32[5244056 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244060 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 22;
    break;
   case 22:
    HEAPF64[tempDoublePtr >> 3] = $minvertex_0_ph_ph, HEAP32[5249080 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249084 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_settempfree($vertices);
    label = 23;
    break;
   case 23:
    var $call50 = _qh_pointfacet();
    HEAP32[$facets >> 2] = $call50;
    var $notgood_0 = 0;
    var $maxoutside_0 = 0;
    label = 24;
    break;
   case 24:
    var $maxoutside_0;
    var $notgood_0;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp51 = $29 < $maxoutside_0;
    var $cond = $cmp51 ? $maxoutside_0 : $29;
    var $tobool52 = ($call50 | 0) == 0;
    if ($tobool52) {
      var $notgood_4 = $notgood_0;
      var $maxoutside_4 = $maxoutside_0;
      label = 36;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $p56 = $call50 + 4 | 0;
    var $30 = HEAP32[$p56 >> 2];
    var $call57 = _qh_setsize($call50);
    var $cmp5944 = ($call57 | 0) > 0;
    if ($cmp5944) {
      var $maxoutside_145 = $maxoutside_0;
      var $facet_i_046 = 0;
      var $notgood_148 = $notgood_0;
      var $facet_049_in = $30;
      label = 26;
      break;
    } else {
      var $notgood_4 = $notgood_0;
      var $maxoutside_4 = $maxoutside_0;
      label = 36;
      break;
    }
   case 26:
    var $facet_049_in;
    var $notgood_148;
    var $facet_i_046;
    var $maxoutside_145;
    var $facet_049 = $facet_049_in;
    var $tobool61 = ($facet_049_in | 0) == 0;
    if ($tobool61) {
      var $notgood_3 = $notgood_148;
      var $maxoutside_3 = $maxoutside_145;
      label = 35;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call63 = _qh_point($facet_i_046);
    var $31 = HEAP32[5247016 >> 2];
    var $cmp64 = ($call63 | 0) == ($31 | 0);
    if ($cmp64) {
      var $notgood_3 = $notgood_148;
      var $maxoutside_3 = $maxoutside_145;
      label = 35;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $32 = HEAP32[5244560 >> 2];
    var $inc67 = $32 + 1 | 0;
    HEAP32[5244560 >> 2] = $inc67;
    _qh_distplane($call63, $facet_049, $dist);
    var $33 = HEAP32[$numpart >> 2];
    var $inc68 = $33 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc68;
    var $call69 = _qh_findbesthorizon(1, $call63, $facet_049, 0, $dist, $numpart);
    var $tobool70 = ($call69 | 0) != 0;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp72 = $34 > $maxoutside_145;
    var $or_cond40 = $tobool70 & $cmp72;
    if ($or_cond40) {
      label = 29;
      break;
    } else {
      var $notgood_2 = $notgood_148;
      var $bestfacet_1 = $call69;
      var $maxoutside_2 = $maxoutside_145;
      var $40 = $34;
      label = 32;
      break;
    }
   case 29:
    var $35 = HEAP32[5247124 >> 2];
    var $tobool74 = ($35 | 0) == 0;
    if ($tobool74) {
      var $notgood_2 = $notgood_148;
      var $bestfacet_1 = $call69;
      var $maxoutside_2 = $34;
      var $40 = $34;
      label = 32;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $36 = $call69 + 76 | 0;
    var $37 = $36;
    var $38 = HEAP32[$37 >> 2];
    var $bf_clear77 = $38 & 524288;
    var $tobool78 = ($bf_clear77 | 0) == 0;
    if ($tobool78) {
      label = 31;
      break;
    } else {
      var $notgood_2 = $notgood_148;
      var $bestfacet_1 = $call69;
      var $maxoutside_2 = $34;
      var $40 = $34;
      label = 32;
      break;
    }
   case 31:
    var $call80 = _qh_findgooddist($call63, $call69, $dist, $facetlist);
    var $tobool81 = ($call80 | 0) != 0;
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp83 = $39 > $maxoutside_145;
    var $or_cond41 = $tobool81 & $cmp83;
    var $inc85 = $notgood_148 + 1 | 0;
    var $_maxoutside_145 = $or_cond41 ? $39 : $maxoutside_145;
    var $notgood_148_inc85 = $or_cond41 ? $notgood_148 : $inc85;
    var $notgood_2 = $notgood_148_inc85;
    var $bestfacet_1 = $call80;
    var $maxoutside_2 = $_maxoutside_145;
    var $40 = $39;
    label = 32;
    break;
   case 32:
    var $40;
    var $maxoutside_2;
    var $bestfacet_1;
    var $notgood_2;
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247436 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247440 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp88 = $40 > $41;
    if ($cmp88) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $tobool90 = ($bestfacet_1 | 0) != 0;
    var $42 = HEAP32[5248968 >> 2];
    var $cmp92 = ($bestfacet_1 | 0) == ($42 | 0);
    var $or_cond42 = $tobool90 & $cmp92;
    if ($or_cond42) {
      label = 34;
      break;
    } else {
      var $notgood_3 = $notgood_2;
      var $maxoutside_3 = $maxoutside_2;
      label = 35;
      break;
    }
   case 34:
    _qh_fprintf(5295696);
    var $notgood_3 = $notgood_2;
    var $maxoutside_3 = $maxoutside_2;
    label = 35;
    break;
   case 35:
    var $maxoutside_3;
    var $notgood_3;
    var $inc99 = $facet_i_046 + 1 | 0;
    var $p102 = $call50 + 4 + ($inc99 << 2) | 0;
    var $43 = HEAP32[$p102 >> 2];
    var $exitcond = ($inc99 | 0) == ($call57 | 0);
    if ($exitcond) {
      var $notgood_4 = $notgood_3;
      var $maxoutside_4 = $maxoutside_3;
      label = 36;
      break;
    } else {
      var $maxoutside_145 = $maxoutside_3;
      var $facet_i_046 = $inc99;
      var $notgood_148 = $notgood_3;
      var $facet_049_in = $43;
      label = 26;
      break;
    }
   case 36:
    var $maxoutside_4;
    var $notgood_4;
    var $mul = $cond * 2;
    var $cmp105 = $maxoutside_4 > $mul;
    if ($cmp105) {
      var $notgood_0 = $notgood_4;
      var $maxoutside_0 = $maxoutside_4;
      label = 24;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $44 = HEAP32[$numpart >> 2];
    var $45 = HEAP32[5243160 >> 2];
    var $add = $45 + $44 | 0;
    HEAP32[5243160 >> 2] = $add;
    _qh_settempfree($facets);
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub106 = $maxoutside_4 - $46;
    HEAPF64[tempDoublePtr >> 3] = $sub106, HEAP32[5243872 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243876 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243880 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243884 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp107 = $47 < $46;
    if ($cmp107) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    HEAPF64[tempDoublePtr >> 3] = $46, HEAP32[5243880 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243884 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 39;
    break;
   case 39:
    HEAPF64[tempDoublePtr >> 3] = $maxoutside_4, HEAP32[5249064 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5249068 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_nearcoplanar();
    HEAP32[5249060 >> 2] = 1;
    var $48 = HEAP32[5247036 >> 2];
    var $cmp110 = ($48 | 0) > 0;
    if ($cmp110) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    _qh_fprintf(5294148);
    label = 41;
    break;
   case 41:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_check_maxout["X"] = 1;
function _qh_pointvertex() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5249180 >> 2];
    var $call = _qh_setsize($1);
    var $add = $call + $0 | 0;
    var $call1 = _qh_settemp($add);
    _qh_setzero($call1, $add);
    var $vertex_07 = HEAP32[5248980 >> 2];
    var $tobool8 = ($vertex_07 | 0) == 0;
    if ($tobool8) {
      label = 5;
      break;
    } else {
      var $vertex_09 = $vertex_07;
      label = 3;
      break;
    }
   case 3:
    var $vertex_09;
    var $next = $vertex_09 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $point = $vertex_09 + 8 | 0;
    var $3 = HEAP32[$point >> 2];
    var $4 = $vertex_09;
    _qh_point_add($call1, $3, $4);
    var $vertex_0 = HEAP32[$next >> 2];
    var $tobool = ($vertex_0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $vertex_09 = $vertex_0;
      label = 3;
      break;
    }
   case 5:
    return $call1;
  }
}
function _qh_nearcoplanar() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $innerplane = __stackBase__ + 8;
    var $0 = HEAP32[5247044 >> 2];
    var $1 = HEAP32[5247048 >> 2];
    var $2 = $1 | $0;
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $facet_017 = HEAP32[5248940 >> 2];
    var $tobool218 = ($facet_017 | 0) == 0;
    if ($tobool218) {
      label = 25;
      break;
    } else {
      var $facet_019 = $facet_017;
      label = 4;
      break;
    }
   case 4:
    var $facet_019;
    var $next = $facet_019 + 44 | 0;
    var $4 = HEAP32[$next >> 2];
    var $tobool3 = ($4 | 0) == 0;
    if ($tobool3) {
      label = 25;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $coplanarset = $facet_019 + 64 | 0;
    var $5 = HEAP32[$coplanarset >> 2];
    var $tobool4 = ($5 | 0) == 0;
    if ($tobool4) {
      var $facet_019 = $4;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_setfree($coplanarset);
    var $facet_0_pre = HEAP32[$next >> 2];
    var $tobool2 = ($facet_0_pre | 0) == 0;
    if ($tobool2) {
      label = 25;
      break;
    } else {
      var $facet_019 = $facet_0_pre;
      label = 4;
      break;
    }
   case 7:
    var $tobool = ($0 | 0) != 0;
    var $tobool1 = ($1 | 0) != 0;
    var $or_cond1 = $tobool & $tobool1;
    if ($or_cond1) {
      label = 25;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_outerinner(0, 0, $innerplane);
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $6 < 8.988465674311579e+307;
    if ($cmp) {
      label = 9;
      break;
    } else {
      var $numpart_0_ph = 0;
      var $facet_1_in_ph = 5248940;
      label = 10;
      break;
    }
   case 9:
    var $7 = HEAP32[5247504 >> 2];
    var $conv = $7 | 0;
    var $call = Math.sqrt($conv);
    var $mul = $6 * $call;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $8 - $mul;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$innerplane >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$innerplane + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $numpart_0_ph = 0;
    var $facet_1_in_ph = 5248940;
    label = 10;
    break;
   case 10:
    var $facet_1_in_ph;
    var $numpart_0_ph;
    var $facet_1_pre = HEAP32[$facet_1_in_ph >> 2];
    var $facet_1 = $facet_1_pre;
    label = 11;
    break;
   case 11:
    var $facet_1;
    var $tobool14 = ($facet_1 | 0) == 0;
    if ($tobool14) {
      label = 24;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $next16 = $facet_1 + 44 | 0;
    var $9 = HEAP32[$next16 >> 2];
    var $tobool17 = ($9 | 0) == 0;
    if ($tobool17) {
      label = 24;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $coplanarset20 = $facet_1 + 64 | 0;
    var $10 = HEAP32[$coplanarset20 >> 2];
    var $tobool21 = ($10 | 0) == 0;
    if ($tobool21) {
      var $facet_1 = $9;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $p = $10 + 4 | 0;
    var $11 = HEAP32[$p >> 2];
    var $tobool2821 = ($11 | 0) == 0;
    if ($tobool2821) {
      var $numpart_1_lcssa = $numpart_0_ph;
      var $20 = $10;
      label = 23;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $12 = $11;
    var $13 = $p;
    var $incdec_ptr2026 = $p + 4 | 0;
    var $incdec_ptr20 = $incdec_ptr2026;
    var $pointp_022 = $13;
    var $numpart_123 = $numpart_0_ph;
    var $incdec_ptr24 = $incdec_ptr20;
    var $14 = $12;
    label = 16;
    break;
   case 16:
    var $14;
    var $incdec_ptr24;
    var $numpart_123;
    var $pointp_022;
    var $inc = $numpart_123 + 1 | 0;
    _qh_distplane($14, $facet_1, $dist);
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$innerplane >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$innerplane + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp30 = $15 < $16;
    if ($cmp30) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $17 = HEAP32[5247048 >> 2];
    var $tobool33 = ($17 | 0) == 0;
    if ($tobool33) {
      label = 18;
      break;
    } else {
      label = 21;
      break;
    }
   case 18:
    HEAP32[$pointp_022 >> 2] = 0;
    label = 21;
    break;
   case 19:
    var $18 = HEAP32[5247044 >> 2];
    var $tobool38 = ($18 | 0) == 0;
    if ($tobool38) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAP32[$pointp_022 >> 2] = 0;
    label = 21;
    break;
   case 21:
    var $incdec_ptr = $incdec_ptr24 + 4 | 0;
    var $19 = HEAP32[$incdec_ptr24 >> 2];
    var $tobool28 = ($19 | 0) == 0;
    if ($tobool28) {
      label = 22;
      break;
    } else {
      var $pointp_022 = $incdec_ptr24;
      var $numpart_123 = $inc;
      var $incdec_ptr24 = $incdec_ptr;
      var $14 = $19;
      label = 16;
      break;
    }
   case 22:
    var $_pre = HEAP32[$coplanarset20 >> 2];
    var $numpart_1_lcssa = $inc;
    var $20 = $_pre;
    label = 23;
    break;
   case 23:
    var $20;
    var $numpart_1_lcssa;
    _qh_setcompact($20);
    var $numpart_0_ph = $numpart_1_lcssa;
    var $facet_1_in_ph = $next16;
    label = 10;
    break;
   case 24:
    var $21 = HEAP32[5243160 >> 2];
    var $add = $21 + $numpart_0_ph | 0;
    HEAP32[5243160 >> 2] = $add;
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_nearcoplanar["X"] = 1;
function _qh_checkpolygon($facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $waserror = __stackBase__;
    HEAP32[$waserror >> 2] = 0;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5259344);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5248940 >> 2];
    var $tobool4 = ($facetlist | 0) != 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      var $visibleseen_2 = 0;
      var $numfacets_2 = 0;
      var $13 = $1;
      label = 16;
      break;
    }
   case 5:
    var $2 = HEAP32[5247124 >> 2];
    var $tobool = ($2 | 0) != 0;
    var $cmp1 = ($1 | 0) != ($facetlist | 0);
    var $or_cond = $cmp1 | $tobool;
    var $_ = $or_cond & 1;
    var $facet_090 = $facetlist;
    var $numfacets_092 = 0;
    var $nextseen_193 = $_;
    var $visibleseen_094 = 0;
    label = 6;
    break;
   case 6:
    var $visibleseen_094;
    var $nextseen_193;
    var $numfacets_092;
    var $facet_090;
    var $next = $facet_090 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool7 = ($3 | 0) == 0;
    if ($tobool7) {
      var $visibleseen_2_ph = $visibleseen_094;
      var $numfacets_2_ph = $numfacets_092;
      label = 15;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $4 = HEAP32[5248956 >> 2];
    var $cmp8 = ($facet_090 | 0) == ($4 | 0);
    var $_visibleseen_0 = $cmp8 ? 1 : $visibleseen_094;
    var $5 = $facet_090 + 76 | 0;
    var $6 = $5;
    var $7 = HEAP32[$6 >> 2];
    var $bf_clear = $7 & 2048;
    var $tobool11 = ($bf_clear | 0) == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      var $facet_090 = $3;
      var $numfacets_092 = $numfacets_092;
      var $nextseen_193 = $nextseen_193;
      var $visibleseen_094 = $_visibleseen_0;
      label = 6;
      break;
    }
   case 8:
    var $tobool13 = ($nextseen_193 | 0) == 0;
    if ($tobool13) {
      label = 9;
      break;
    } else {
      var $nextseen_2 = $nextseen_193;
      label = 14;
      break;
    }
   case 9:
    var $8 = HEAP32[5248948 >> 2];
    var $cmp15 = ($facet_090 | 0) == ($8 | 0);
    if ($cmp15) {
      var $nextseen_2 = 1;
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $outsideset = $facet_090 + 60 | 0;
    var $9 = HEAP32[$outsideset >> 2];
    var $call = _qh_setsize($9);
    var $tobool17 = ($call | 0) == 0;
    if ($tobool17) {
      var $nextseen_2 = 0;
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $10 = HEAP32[5248704 >> 2];
    var $tobool19 = ($10 | 0) == 0;
    if ($tobool19) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $furthestdist = $facet_090 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$furthestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$furthestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246944 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246948 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp21 = $11 < $12;
    if ($cmp21) {
      var $nextseen_2 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_fprintf(5258984);
    _qh_errexit(5, $facet_090, 0);
    var $nextseen_2 = 0;
    label = 14;
    break;
   case 14:
    var $nextseen_2;
    var $inc = $numfacets_092 + 1 | 0;
    _qh_checkfacet($facet_090, 0, $waserror);
    var $_pre3 = HEAP32[$next >> 2];
    var $tobool6 = ($_pre3 | 0) == 0;
    if ($tobool6) {
      var $visibleseen_2_ph = $_visibleseen_0;
      var $numfacets_2_ph = $inc;
      label = 15;
      break;
    } else {
      var $facet_090 = $_pre3;
      var $numfacets_092 = $inc;
      var $nextseen_193 = $nextseen_2;
      var $visibleseen_094 = $_visibleseen_0;
      label = 6;
      break;
    }
   case 15:
    var $numfacets_2_ph;
    var $visibleseen_2_ph;
    var $_pre = HEAP32[5248940 >> 2];
    var $visibleseen_2 = $visibleseen_2_ph;
    var $numfacets_2 = $numfacets_2_ph;
    var $13 = $_pre;
    label = 16;
    break;
   case 16:
    var $13;
    var $numfacets_2;
    var $visibleseen_2;
    var $14 = HEAP32[5248956 >> 2];
    var $tobool31 = ($14 | 0) != 0;
    var $tobool32 = ($visibleseen_2 | 0) == 0;
    var $or_cond71 = $tobool31 & $tobool32;
    var $cmp34 = ($13 | 0) == ($facetlist | 0);
    var $or_cond72 = $or_cond71 & $cmp34;
    if ($or_cond72) {
      label = 17;
      break;
    } else {
      var $16 = $13;
      label = 18;
      break;
    }
   case 17:
    _qh_fprintf(5258636);
    _qh_printlists();
    var $15 = HEAP32[5248956 >> 2];
    _qh_errexit(5, $15, 0);
    var $_pre1 = HEAP32[5248940 >> 2];
    var $16 = $_pre1;
    label = 18;
    break;
   case 18:
    var $16;
    var $cmp38 = ($16 | 0) == ($facetlist | 0);
    if ($cmp38) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $17 = HEAP32[5248980 >> 2];
    var $vertex_0_ph = $17;
    label = 21;
    break;
   case 20:
    var $18 = HEAP32[5248952 >> 2];
    var $cmp41 = ($18 | 0) == ($facetlist | 0);
    var $19 = HEAP32[5248988 >> 2];
    var $_74 = $cmp41 ? $19 : 0;
    var $vertex_0_ph = $_74;
    label = 21;
    break;
   case 21:
    var $vertex_0_ph;
    var $tobool4787 = ($vertex_0_ph | 0) == 0;
    if ($tobool4787) {
      label = 24;
      break;
    } else {
      var $vertex_088 = $vertex_0_ph;
      label = 22;
      break;
    }
   case 22:
    var $vertex_088;
    var $next49 = $vertex_088 | 0;
    var $20 = HEAP32[$next49 >> 2];
    var $tobool50 = ($20 | 0) == 0;
    if ($tobool50) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $21 = $vertex_088 + 20 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 & -268435457;
    HEAP32[$22 >> 2] = $24;
    var $25 = $vertex_088 + 16 | 0;
    var $26 = $25;
    var $27 = HEAP32[$26 >> 2];
    var $28 = $27 & -2147483648;
    HEAP32[$26 >> 2] = $28;
    var $vertex_088 = $20;
    label = 22;
    break;
   case 24:
    if ($tobool4) {
      var $facet_182 = $facetlist;
      var $numvertices_083 = 0;
      var $numridges_084 = 0;
      label = 25;
      break;
    } else {
      var $numridges_3 = 0;
      var $numvertices_3 = 0;
      label = 38;
      break;
    }
   case 25:
    var $numridges_084;
    var $numvertices_083;
    var $facet_182;
    var $next63 = $facet_182 + 44 | 0;
    var $29 = HEAP32[$next63 >> 2];
    var $tobool64 = ($29 | 0) == 0;
    if ($tobool64) {
      var $numridges_3 = $numridges_084;
      var $numvertices_3 = $numvertices_083;
      label = 38;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $30 = $facet_182 + 76 | 0;
    var $31 = $30;
    var $32 = HEAP32[$31 >> 2];
    var $bf_clear68 = $32 & 2048;
    var $tobool69 = ($bf_clear68 | 0) == 0;
    if ($tobool69) {
      label = 27;
      break;
    } else {
      var $numridges_2 = $numridges_084;
      var $numvertices_2 = $numvertices_083;
      label = 37;
      break;
    }
   case 27:
    var $bf_clear73 = $32 & 8192;
    var $tobool74 = ($bf_clear73 | 0) == 0;
    if ($tobool74) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $33 = HEAP32[5247504 >> 2];
    var $_pn = $33;
    label = 30;
    break;
   case 29:
    var $ridges = $facet_182 + 52 | 0;
    var $34 = HEAP32[$ridges >> 2];
    var $call77 = _qh_setsize($34);
    var $_pn = $call77;
    label = 30;
    break;
   case 30:
    var $_pn;
    var $numridges_1 = $_pn + $numridges_084 | 0;
    var $vertices = $facet_182 + 48 | 0;
    var $35 = HEAP32[$vertices >> 2];
    var $tobool80 = ($35 | 0) == 0;
    if ($tobool80) {
      var $numridges_2 = $numridges_1;
      var $numvertices_2 = $numvertices_083;
      label = 37;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $p = $35 + 4 | 0;
    var $36 = $p;
    var $numvertices_1_ph = $numvertices_083;
    var $vertexp_0_ph = $36;
    label = 32;
    break;
   case 32:
    var $vertexp_0_ph;
    var $numvertices_1_ph;
    var $vertexp_0 = $vertexp_0_ph;
    label = 33;
    break;
   case 33:
    var $vertexp_0;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $37 = HEAP32[$vertexp_0 >> 2];
    var $tobool84 = ($37 | 0) == 0;
    if ($tobool84) {
      var $numridges_2 = $numridges_1;
      var $numvertices_2 = $numvertices_1_ph;
      label = 37;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $38 = $37 + 16 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $inc88 = $40 + 1 | 0;
    var $bf_value = $inc88 & 2147483647;
    var $41 = $40 & -2147483648;
    var $42 = $bf_value | $41;
    HEAP32[$39 >> 2] = $42;
    var $43 = $37 + 20 | 0;
    var $44 = $43;
    var $45 = HEAP32[$44 >> 2];
    var $bf_clear91 = $45 & 268435456;
    var $tobool92 = ($bf_clear91 | 0) == 0;
    if ($tobool92) {
      label = 35;
      break;
    } else {
      var $vertexp_0 = $incdec_ptr;
      label = 33;
      break;
    }
   case 35:
    var $46 = $45 | 268435456;
    HEAP32[$44 >> 2] = $46;
    var $inc95 = $numvertices_1_ph + 1 | 0;
    var $point = $37 + 8 | 0;
    var $47 = HEAP32[$point >> 2];
    var $call96 = _qh_pointid($47);
    var $cmp97 = ($call96 | 0) == -1;
    if ($cmp97) {
      label = 36;
      break;
    } else {
      var $numvertices_1_ph = $inc95;
      var $vertexp_0_ph = $incdec_ptr;
      label = 32;
      break;
    }
   case 36:
    _qh_fprintf(5258344);
    HEAP32[$waserror >> 2] = 1;
    var $numvertices_1_ph = $inc95;
    var $vertexp_0_ph = $incdec_ptr;
    label = 32;
    break;
   case 37:
    var $numvertices_2;
    var $numridges_2;
    var $48 = HEAP32[$next63 >> 2];
    var $tobool61 = ($48 | 0) == 0;
    if ($tobool61) {
      var $numridges_3 = $numridges_2;
      var $numvertices_3 = $numvertices_2;
      label = 38;
      break;
    } else {
      var $facet_182 = $48;
      var $numvertices_083 = $numvertices_2;
      var $numridges_084 = $numridges_2;
      label = 25;
      break;
    }
   case 38:
    var $numvertices_3;
    var $numridges_3;
    var $49 = HEAP32[5249156 >> 2];
    var $add111 = $49 + $numfacets_2 | 0;
    var $bf_value112 = $add111 & 2147483647;
    var $50 = $49 & -2147483648;
    var $51 = $bf_value112 | $50;
    HEAP32[5249156 >> 2] = $51;
    var $52 = HEAP32[5248940 >> 2];
    var $cmp113 = ($52 | 0) == ($facetlist | 0);
    if ($cmp113) {
      label = 39;
      break;
    } else {
      label = 59;
      break;
    }
   case 39:
    var $53 = HEAP32[5248992 >> 2];
    var $54 = HEAP32[5248960 >> 2];
    var $sub = $53 - $54 | 0;
    var $cmp115 = ($numfacets_2 | 0) == ($sub | 0);
    if ($cmp115) {
      var $55 = $51;
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    _qh_fprintf(5258096);
    HEAP32[$waserror >> 2] = 1;
    var $_pre2 = HEAP32[5249156 >> 2];
    var $55 = $_pre2;
    label = 41;
    break;
   case 41:
    var $55;
    var $inc119 = $55 + 1 | 0;
    var $bf_value120 = $inc119 & 2147483647;
    var $56 = $55 & -2147483648;
    var $57 = $bf_value120 | $56;
    HEAP32[5249156 >> 2] = $57;
    var $58 = HEAP32[5248576 >> 2];
    var $tobool121 = ($58 | 0) == 0;
    if ($tobool121) {
      label = 52;
      break;
    } else {
      var $totvneighbors_0_ph = 0;
      var $vertex_1_in_ph = 5248980;
      label = 42;
      break;
    }
   case 42:
    var $vertex_1_in_ph;
    var $totvneighbors_0_ph;
    var $vertex_1_in = $vertex_1_in_ph;
    label = 43;
    break;
   case 43:
    var $vertex_1_in;
    var $vertex_1 = HEAP32[$vertex_1_in >> 2];
    var $tobool124 = ($vertex_1 | 0) == 0;
    if ($tobool124) {
      label = 47;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $next126 = $vertex_1 | 0;
    var $59 = HEAP32[$next126 >> 2];
    var $tobool127 = ($59 | 0) == 0;
    if ($tobool127) {
      label = 47;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $neighbors = $vertex_1 + 12 | 0;
    var $60 = HEAP32[$neighbors >> 2];
    var $61 = $vertex_1 + 20 | 0;
    var $62 = $61;
    _qh_setcheck($60);
    var $63 = HEAP32[$62 >> 2];
    var $bf_clear133 = $63 & 1073741824;
    var $tobool134 = ($bf_clear133 | 0) == 0;
    if ($tobool134) {
      label = 46;
      break;
    } else {
      var $vertex_1_in = $next126;
      label = 43;
      break;
    }
   case 46:
    var $64 = HEAP32[$neighbors >> 2];
    var $call138 = _qh_setsize($64);
    var $add139 = $call138 + $totvneighbors_0_ph | 0;
    var $totvneighbors_0_ph = $add139;
    var $vertex_1_in_ph = $next126;
    label = 42;
    break;
   case 47:
    if ($tobool4) {
      var $facet_276 = $facetlist;
      var $totvertices_077 = 0;
      label = 48;
      break;
    } else {
      var $totvertices_1 = 0;
      label = 50;
      break;
    }
   case 48:
    var $totvertices_077;
    var $facet_276;
    var $next148 = $facet_276 + 44 | 0;
    var $65 = HEAP32[$next148 >> 2];
    var $tobool149 = ($65 | 0) == 0;
    if ($tobool149) {
      var $totvertices_1 = $totvertices_077;
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $vertices152 = $facet_276 + 48 | 0;
    var $66 = HEAP32[$vertices152 >> 2];
    var $call153 = _qh_setsize($66);
    var $add154 = $call153 + $totvertices_077 | 0;
    var $67 = HEAP32[$next148 >> 2];
    var $tobool146 = ($67 | 0) == 0;
    if ($tobool146) {
      var $totvertices_1 = $add154;
      label = 50;
      break;
    } else {
      var $facet_276 = $67;
      var $totvertices_077 = $add154;
      label = 48;
      break;
    }
   case 50:
    var $totvertices_1;
    var $cmp159 = ($totvneighbors_0_ph | 0) == ($totvertices_1 | 0);
    if ($cmp159) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    _qh_fprintf(5257672);
    HEAP32[$waserror >> 2] = 1;
    label = 52;
    break;
   case 52:
    var $68 = HEAP32[5248996 >> 2];
    var $69 = HEAP32[5249184 >> 2];
    var $call163 = _qh_setsize($69);
    var $sub164 = $68 - $call163 | 0;
    var $cmp165 = ($numvertices_3 | 0) == ($sub164 | 0);
    if ($cmp165) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $70 = HEAP32[5249184 >> 2];
    var $call167 = _qh_setsize($70);
    _qh_fprintf(5257340);
    HEAP32[$waserror >> 2] = 1;
    label = 54;
    break;
   case 54:
    var $71 = HEAP32[5247504 >> 2];
    var $cmp170 = ($71 | 0) != 2;
    var $cmp172 = ($numvertices_3 | 0) == ($numfacets_2 | 0);
    var $or_cond73 = $cmp170 | $cmp172;
    if ($or_cond73) {
      var $72 = $71;
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    _qh_fprintf(5256976);
    HEAP32[$waserror >> 2] = 1;
    var $_pr = HEAP32[5247504 >> 2];
    var $72 = $_pr;
    label = 56;
    break;
   case 56:
    var $72;
    var $cmp175 = ($72 | 0) == 3;
    if ($cmp175) {
      label = 57;
      break;
    } else {
      label = 59;
      break;
    }
   case 57:
    var $add177 = $numvertices_3 + $numfacets_2 | 0;
    var $div = ($numridges_3 | 0) / 2 & -1;
    var $sub178 = $add177 - $div | 0;
    var $cmp179 = ($sub178 | 0) == 2;
    if ($cmp179) {
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    _qh_fprintf(5256588);
    label = 59;
    break;
   case 59:
    var $73 = HEAP32[$waserror >> 2];
    var $tobool184 = ($73 | 0) == 0;
    if ($tobool184) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    _qh_errexit(5, 0, 0);
    label = 61;
    break;
   case 61:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_checkpolygon["X"] = 1;
function _qh_checkflipped_all($facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5248940 >> 2];
    var $cmp = ($0 | 0) == ($facetlist | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5243648 >> 2] = 0;
    label = 4;
    break;
   case 4:
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      var $facet_011 = $facetlist;
      var $waserror_012 = 0;
      label = 5;
      break;
    }
   case 5:
    var $waserror_012;
    var $facet_011;
    var $next = $facet_011 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool3 = ($1 | 0) == 0;
    if ($tobool3) {
      var $waserror_0_lcssa = $waserror_012;
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $normal = $facet_011 + 24 | 0;
    var $2 = HEAP32[$normal >> 2];
    var $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      var $waserror_1 = $waserror_012;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $call = _qh_checkflipped($facet_011, $dist, 0);
    var $tobool5 = ($call | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      var $waserror_1 = $waserror_012;
      label = 10;
      break;
    }
   case 8:
    _qh_fprintf(5259868);
    var $3 = HEAP32[5247008 >> 2];
    var $tobool7 = ($3 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      var $waserror_1 = $waserror_012;
      label = 10;
      break;
    }
   case 9:
    _qh_errprint($facet_011, 0, 0, 0);
    var $waserror_1 = 1;
    label = 10;
    break;
   case 10:
    var $waserror_1;
    var $4 = HEAP32[$next >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      var $waserror_0_lcssa = $waserror_1;
      label = 11;
      break;
    } else {
      var $facet_011 = $4;
      var $waserror_012 = $waserror_1;
      label = 5;
      break;
    }
   case 11:
    var $waserror_0_lcssa;
    var $tobool13 = ($waserror_0_lcssa | 0) == 0;
    if ($tobool13) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5259568);
    _qh_errexit(3, 0, 0);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_checkconvex($facetlist, $fault) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5278368);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5247376 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5243200 >> 2] = 0;
    HEAP32[5243280 >> 2] = 0;
    label = 6;
    break;
   case 6:
    var $tobool3 = ($facetlist | 0) == 0;
    if ($tobool3) {
      label = 62;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $cmp40 = ($fault | 0) == 1;
    var $errfacet1_0148 = 0;
    var $errfacet2_0149 = 0;
    var $facet_0150 = $facetlist;
    var $waserror_0151 = 0;
    var $centrum_warning_0152 = 0;
    var $tempcentrum_0154 = 0;
    label = 8;
    break;
   case 8:
    var $tempcentrum_0154;
    var $centrum_warning_0152;
    var $waserror_0151;
    var $facet_0150;
    var $errfacet2_0149;
    var $errfacet1_0148;
    var $next = $facet_0150 + 44 | 0;
    var $2 = HEAP32[$next >> 2];
    var $tobool6 = ($2 | 0) == 0;
    if ($tobool6) {
      var $errfacet1_0_lcssa = $errfacet1_0148;
      var $errfacet2_0_lcssa = $errfacet2_0149;
      var $waserror_0_lcssa = $waserror_0151;
      label = 60;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $3 = $facet_0150 + 76 | 0;
    var $4 = $3;
    var $5 = HEAP32[$4 >> 2];
    var $bf_clear = $5 & 65536;
    var $tobool7 = ($bf_clear | 0) == 0;
    if ($tobool7) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_precision();
    _qh_fprintf(5276656);
    var $tempcentrum_2 = $tempcentrum_0154;
    var $centrum_warning_3 = $centrum_warning_0152;
    var $waserror_5 = 1;
    var $errfacet2_5 = $errfacet2_0149;
    var $errfacet1_5 = $facet_0150;
    label = 59;
    break;
   case 11:
    var $6 = HEAP32[5247080 >> 2];
    var $tobool10 = ($6 | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $7 = HEAP32[5248580 >> 2];
    var $tobool11 = ($7 | 0) == 0;
    if ($tobool11) {
      var $errfacet1_262 = $errfacet1_0148;
      var $errfacet2_263 = $errfacet2_0149;
      var $waserror_264 = $waserror_0151;
      label = 34;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $8 = $5 & 8704;
    var $9 = ($8 | 0) == 8192;
    if ($9) {
      label = 14;
      break;
    } else {
      var $errfacet1_262 = $errfacet1_0148;
      var $errfacet2_263 = $errfacet2_0149;
      var $waserror_264 = $waserror_0151;
      label = 34;
      break;
    }
   case 14:
    var $neighbors = $facet_0150 + 56 | 0;
    var $10 = HEAP32[$neighbors >> 2];
    var $tobool20 = ($10 | 0) == 0;
    if ($tobool20) {
      var $tempcentrum_2 = $tempcentrum_0154;
      var $centrum_warning_3 = $centrum_warning_0152;
      var $waserror_5 = $waserror_0151;
      var $errfacet2_5 = $errfacet2_0149;
      var $errfacet1_5 = $errfacet1_0148;
      label = 59;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $p = $10 + 4 | 0;
    var $11 = HEAP32[$p >> 2];
    var $tobool2486102121 = ($11 | 0) == 0;
    if ($tobool2486102121) {
      var $tempcentrum_2 = $tempcentrum_0154;
      var $centrum_warning_3 = $centrum_warning_0152;
      var $waserror_5 = $waserror_0151;
      var $errfacet2_5 = $errfacet2_0149;
      var $errfacet1_5 = $errfacet1_0148;
      label = 59;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $12 = $11;
    var $incdec_ptr85101120160 = $p + 4 | 0;
    var $incdec_ptr85101120 = $incdec_ptr85101120160;
    var $vertices = $facet_0150 + 48 | 0;
    var $errfacet1_1_ph122 = $errfacet1_0148;
    var $errfacet2_1_ph123 = $errfacet2_0149;
    var $waserror_1_ph124 = $waserror_0151;
    var $allsimplicial_0_ph125 = 1;
    var $neighbor_i_0_ph126 = 0;
    var $incdec_ptr85101127 = $incdec_ptr85101120;
    var $13 = $12;
    label = 17;
    break;
   case 17:
    var $13;
    var $incdec_ptr85101127;
    var $neighbor_i_0_ph126;
    var $allsimplicial_0_ph125;
    var $waserror_1_ph124;
    var $errfacet2_1_ph123;
    var $errfacet1_1_ph122;
    var $allsimplicial_0_ph72103 = $allsimplicial_0_ph125;
    var $neighbor_i_0_ph73104 = $neighbor_i_0_ph126;
    var $incdec_ptr85105 = $incdec_ptr85101127;
    var $15 = $13;
    label = 19;
    break;
   case 18:
    var $incdec_ptr85 = $incdec_ptr88 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr88 >> 2];
    var $tobool2486 = ($14 | 0) == 0;
    if ($tobool2486) {
      var $errfacet1_262 = $errfacet1_1_ph122;
      var $errfacet2_263 = $errfacet2_1_ph123;
      var $waserror_264 = $waserror_1_ph124;
      label = 34;
      break;
    } else {
      var $allsimplicial_0_ph72103 = 0;
      var $neighbor_i_0_ph73104 = $inc;
      var $incdec_ptr85105 = $incdec_ptr85;
      var $15 = $14;
      label = 19;
      break;
    }
   case 19:
    var $15;
    var $incdec_ptr85105;
    var $neighbor_i_0_ph73104;
    var $allsimplicial_0_ph72103;
    var $neighbor_i_087 = $neighbor_i_0_ph73104;
    var $incdec_ptr88 = $incdec_ptr85105;
    var $16 = $15;
    label = 20;
    break;
   case 20:
    var $16;
    var $incdec_ptr88;
    var $neighbor_i_087;
    var $inc = $neighbor_i_087 + 1 | 0;
    var $17 = $16 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $20 = $19 & 8704;
    var $21 = ($20 | 0) == 8192;
    if ($21) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 21:
    var $22 = HEAP32[$vertices >> 2];
    var $p28 = $22 + 4 + ($neighbor_i_087 << 2) | 0;
    var $23 = HEAP32[$p28 >> 2];
    var $point = $23 + 8 | 0;
    var $24 = $point;
    var $25 = HEAP32[$24 >> 2];
    _qh_distplane($25, $16, $dist);
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = -$27;
    var $cmp38 = $26 > $sub;
    if ($cmp38) {
      label = 22;
      break;
    } else {
      label = 32;
      break;
    }
   case 22:
    if ($cmp40) {
      label = 23;
      break;
    } else {
      var $28 = $27;
      label = 24;
      break;
    }
   case 23:
    _qh_precision();
    _qh_fprintf(5275588);
    _qh_errexit(2, 0, 0);
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $28 = $_pre;
    label = 24;
    break;
   case 24:
    var $28;
    var $cmp43 = $26 > $28;
    if ($cmp43) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    var $29 = HEAP32[5243200 >> 2];
    var $inc45 = $29 + 1 | 0;
    HEAP32[5243200 >> 2] = $inc45;
    _qh_precision();
    _qh_fprintf(5274404);
    label = 26;
    break;
   case 26:
    var $incdec_ptr85101 = $incdec_ptr88 + 4 | 0;
    var $30 = HEAP32[$incdec_ptr88 >> 2];
    var $tobool2486102 = ($30 | 0) == 0;
    if ($tobool2486102) {
      var $errfacet1_1_ph108 = $facet_0150;
      var $errfacet2_1_ph112 = $16;
      var $waserror_1_ph116 = 1;
      label = 33;
      break;
    } else {
      var $errfacet1_1_ph122 = $facet_0150;
      var $errfacet2_1_ph123 = $16;
      var $waserror_1_ph124 = 1;
      var $allsimplicial_0_ph125 = $allsimplicial_0_ph72103;
      var $neighbor_i_0_ph126 = $inc;
      var $incdec_ptr85101127 = $incdec_ptr85101;
      var $13 = $30;
      label = 17;
      break;
    }
   case 27:
    var $31 = HEAP32[5248580 >> 2];
    var $tobool52 = ($31 | 0) == 0;
    if ($tobool52) {
      label = 30;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $cmp54 = $26 > 0;
    if ($cmp54) {
      label = 29;
      break;
    } else {
      label = 32;
      break;
    }
   case 29:
    var $32 = HEAP32[5243280 >> 2];
    var $inc56 = $32 + 1 | 0;
    HEAP32[5243280 >> 2] = $inc56;
    _qh_precision();
    _qh_fprintf(5273188);
    label = 26;
    break;
   case 30:
    var $33 = HEAP32[5243280 >> 2];
    var $inc65 = $33 + 1 | 0;
    HEAP32[5243280 >> 2] = $inc65;
    _qh_precision();
    var $34 = HEAP32[5247036 >> 2];
    var $tobool66 = ($34 | 0) == 0;
    if ($tobool66) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _qh_fprintf(5272628);
    label = 32;
    break;
   case 32:
    var $incdec_ptr = $incdec_ptr88 + 4 | 0;
    var $35 = HEAP32[$incdec_ptr88 >> 2];
    var $tobool24 = ($35 | 0) == 0;
    if ($tobool24) {
      var $errfacet1_1_ph108 = $errfacet1_1_ph122;
      var $errfacet2_1_ph112 = $errfacet2_1_ph123;
      var $waserror_1_ph116 = $waserror_1_ph124;
      label = 33;
      break;
    } else {
      var $neighbor_i_087 = $inc;
      var $incdec_ptr88 = $incdec_ptr;
      var $16 = $35;
      label = 20;
      break;
    }
   case 33:
    var $waserror_1_ph116;
    var $errfacet2_1_ph112;
    var $errfacet1_1_ph108;
    var $tobool80 = ($allsimplicial_0_ph72103 | 0) == 0;
    if ($tobool80) {
      var $errfacet1_262 = $errfacet1_1_ph108;
      var $errfacet2_263 = $errfacet2_1_ph112;
      var $waserror_264 = $waserror_1_ph116;
      label = 34;
      break;
    } else {
      var $tempcentrum_2 = $tempcentrum_0154;
      var $centrum_warning_3 = $centrum_warning_0152;
      var $waserror_5 = $waserror_1_ph116;
      var $errfacet2_5 = $errfacet2_1_ph112;
      var $errfacet1_5 = $errfacet1_1_ph108;
      label = 59;
      break;
    }
   case 34:
    var $waserror_264;
    var $errfacet2_263;
    var $errfacet1_262;
    var $36 = HEAP32[5249032 >> 2];
    var $cmp82 = ($36 | 0) == 2;
    if ($cmp82) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    var $center = $facet_0150 + 36 | 0;
    var $37 = HEAP32[$center >> 2];
    var $tobool84 = ($37 | 0) == 0;
    if ($tobool84) {
      label = 36;
      break;
    } else {
      var $tempcentrum_1 = $tempcentrum_0154;
      var $centrum_warning_2 = $centrum_warning_0152;
      var $centrum_0 = $37;
      label = 41;
      break;
    }
   case 36:
    var $call86 = _qh_getcentrum($facet_0150);
    HEAP32[$center >> 2] = $call86;
    var $tempcentrum_1 = $tempcentrum_0154;
    var $centrum_warning_2 = $centrum_warning_0152;
    var $centrum_0 = $call86;
    label = 41;
    break;
   case 37:
    var $tobool91 = ($centrum_warning_0152 | 0) == 0;
    if ($tobool91) {
      label = 38;
      break;
    } else {
      var $centrum_warning_1 = $centrum_warning_0152;
      label = 40;
      break;
    }
   case 38:
    var $38 = HEAP32[$4 >> 2];
    var $39 = $38 & 8704;
    var $40 = ($39 | 0) == 8192;
    if ($40) {
      var $centrum_warning_1 = 0;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    _qh_fprintf(5272112);
    var $centrum_warning_1 = 1;
    label = 40;
    break;
   case 40:
    var $centrum_warning_1;
    var $call102 = _qh_getcentrum($facet_0150);
    var $tempcentrum_1 = 1;
    var $centrum_warning_2 = $centrum_warning_1;
    var $centrum_0 = $call102;
    label = 41;
    break;
   case 41:
    var $centrum_0;
    var $centrum_warning_2;
    var $tempcentrum_1;
    var $neighbors104 = $facet_0150 + 56 | 0;
    var $41 = HEAP32[$neighbors104 >> 2];
    var $tobool105 = ($41 | 0) == 0;
    if ($tobool105) {
      var $waserror_4 = $waserror_264;
      var $errfacet2_4 = $errfacet2_263;
      var $errfacet1_4 = $errfacet1_262;
      label = 57;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $p110 = $41 + 4 | 0;
    var $42 = HEAP32[$p110 >> 2];
    var $tobool11395139 = ($42 | 0) == 0;
    if ($tobool11395139) {
      var $waserror_4 = $waserror_264;
      var $errfacet2_4 = $errfacet2_263;
      var $errfacet1_4 = $errfacet1_262;
      label = 57;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $43 = $42;
    var $incdec_ptr11294138159 = $p110 + 4 | 0;
    var $incdec_ptr11294138 = $incdec_ptr11294138159;
    var $errfacet1_3_ph140 = $errfacet1_262;
    var $errfacet2_3_ph141 = $errfacet2_263;
    var $waserror_3_ph142 = $waserror_264;
    var $incdec_ptr11294143 = $incdec_ptr11294138;
    var $44 = $43;
    label = 44;
    break;
   case 44:
    var $44;
    var $incdec_ptr11294143;
    var $waserror_3_ph142;
    var $errfacet2_3_ph141;
    var $errfacet1_3_ph140;
    var $incdec_ptr11296 = $incdec_ptr11294143;
    var $45 = $44;
    label = 45;
    break;
   case 45:
    var $45;
    var $incdec_ptr11296;
    var $46 = HEAP32[5248580 >> 2];
    var $tobool115 = ($46 | 0) == 0;
    var $_pre3 = HEAP32[$4 >> 2];
    if ($tobool115) {
      var $50 = $_pre3;
      label = 48;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $bf_clear118 = $_pre3 & 8192;
    var $tobool119 = ($bf_clear118 | 0) == 0;
    if ($tobool119) {
      var $50 = $_pre3;
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $47 = $45 + 76 | 0;
    var $48 = $47;
    var $49 = HEAP32[$48 >> 2];
    var $bf_clear122 = $49 & 8192;
    var $tobool123 = ($bf_clear122 | 0) == 0;
    if ($tobool123) {
      var $50 = $_pre3;
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    var $50;
    var $bf_clear127 = $50 & 512;
    var $tobool128 = ($bf_clear127 | 0) == 0;
    if ($tobool128) {
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $51 = HEAP32[$incdec_ptr11296 >> 2];
    var $tobool113 = ($51 | 0) == 0;
    if ($tobool113) {
      var $waserror_4 = $waserror_3_ph142;
      var $errfacet2_4 = $errfacet2_3_ph141;
      var $errfacet1_4 = $errfacet1_3_ph140;
      label = 57;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $incdec_ptr112 = $incdec_ptr11296 + 4 | 0;
    var $incdec_ptr11296 = $incdec_ptr112;
    var $45 = $51;
    label = 45;
    break;
   case 51:
    var $52 = $45 + 76 | 0;
    var $53 = $52;
    var $54 = HEAP32[$53 >> 2];
    var $bf_clear131 = $54 & 512;
    var $tobool132 = ($bf_clear131 | 0) == 0;
    if ($tobool132) {
      label = 52;
      break;
    } else {
      label = 49;
      break;
    }
   case 52:
    var $55 = HEAP32[5243408 >> 2];
    var $inc135 = $55 + 1 | 0;
    HEAP32[5243408 >> 2] = $inc135;
    _qh_distplane($centrum_0, $45, $dist);
    var $56 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248624 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248628 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp136 = $56 > $57;
    if ($cmp136) {
      label = 53;
      break;
    } else {
      label = 55;
      break;
    }
   case 53:
    var $58 = HEAP32[5243200 >> 2];
    var $inc138 = $58 + 1 | 0;
    HEAP32[5243200 >> 2] = $inc138;
    _qh_precision();
    _qh_fprintf(5271636);
    label = 54;
    break;
   case 54:
    var $incdec_ptr11294 = $incdec_ptr11296 + 4 | 0;
    var $59 = HEAP32[$incdec_ptr11296 >> 2];
    var $tobool11395 = ($59 | 0) == 0;
    if ($tobool11395) {
      var $waserror_4 = 1;
      var $errfacet2_4 = $45;
      var $errfacet1_4 = $facet_0150;
      label = 57;
      break;
    } else {
      var $errfacet1_3_ph140 = $facet_0150;
      var $errfacet2_3_ph141 = $45;
      var $waserror_3_ph142 = 1;
      var $incdec_ptr11294143 = $incdec_ptr11294;
      var $44 = $59;
      label = 44;
      break;
    }
   case 55:
    var $cmp144 = $56 < 0;
    if ($cmp144) {
      label = 49;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $60 = HEAP32[5243280 >> 2];
    var $inc146 = $60 + 1 | 0;
    HEAP32[5243280 >> 2] = $inc146;
    _qh_precision();
    _qh_fprintf(5270960);
    label = 54;
    break;
   case 57:
    var $errfacet1_4;
    var $errfacet2_4;
    var $waserror_4;
    var $tobool155 = ($tempcentrum_1 | 0) == 0;
    if ($tobool155) {
      var $tempcentrum_2 = 0;
      var $centrum_warning_3 = $centrum_warning_2;
      var $waserror_5 = $waserror_4;
      var $errfacet2_5 = $errfacet2_4;
      var $errfacet1_5 = $errfacet1_4;
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    var $61 = $centrum_0;
    var $62 = HEAP32[5248928 >> 2];
    _qh_memfree($61, $62);
    var $tempcentrum_2 = $tempcentrum_1;
    var $centrum_warning_3 = $centrum_warning_2;
    var $waserror_5 = $waserror_4;
    var $errfacet2_5 = $errfacet2_4;
    var $errfacet1_5 = $errfacet1_4;
    label = 59;
    break;
   case 59:
    var $errfacet1_5;
    var $errfacet2_5;
    var $waserror_5;
    var $centrum_warning_3;
    var $tempcentrum_2;
    var $63 = HEAP32[$next >> 2];
    var $tobool5 = ($63 | 0) == 0;
    if ($tobool5) {
      var $errfacet1_0_lcssa = $errfacet1_5;
      var $errfacet2_0_lcssa = $errfacet2_5;
      var $waserror_0_lcssa = $waserror_5;
      label = 60;
      break;
    } else {
      var $errfacet1_0148 = $errfacet1_5;
      var $errfacet2_0149 = $errfacet2_5;
      var $facet_0150 = $63;
      var $waserror_0151 = $waserror_5;
      var $centrum_warning_0152 = $centrum_warning_3;
      var $tempcentrum_0154 = $tempcentrum_2;
      label = 8;
      break;
    }
   case 60:
    var $waserror_0_lcssa;
    var $errfacet2_0_lcssa;
    var $errfacet1_0_lcssa;
    var $tobool162 = ($waserror_0_lcssa | 0) == 0;
    var $64 = HEAP32[5247008 >> 2];
    var $tobool164 = ($64 | 0) != 0;
    var $or_cond = $tobool162 | $tobool164;
    if ($or_cond) {
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    _qh_errexit2(3, $errfacet1_0_lcssa, $errfacet2_0_lcssa);
    label = 62;
    break;
   case 62:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_checkconvex["X"] = 1;
function _qh_checkfacet($facet, $newmerge, $waserrorp) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $intersection = __stackBase__;
    var $0 = $facet;
    var $1 = $facet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 2048;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5270348);
    _qh_errexit(5, $facet, 0);
    label = 4;
    break;
   case 4:
    var $normal = $facet + 24 | 0;
    var $4 = HEAP32[$normal >> 2];
    var $tobool1 = ($4 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      var $waserror_0 = 0;
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5269720);
    var $waserror_0 = 1;
    label = 6;
    break;
   case 6:
    var $waserror_0;
    var $vertices = $facet + 48 | 0;
    var $5 = HEAP32[$vertices >> 2];
    _qh_setcheck($5);
    var $ridges = $facet + 52 | 0;
    var $6 = HEAP32[$ridges >> 2];
    _qh_setcheck($6);
    var $outsideset = $facet + 60 | 0;
    var $7 = HEAP32[$outsideset >> 2];
    _qh_setcheck($7);
    var $coplanarset = $facet + 64 | 0;
    var $8 = HEAP32[$coplanarset >> 2];
    _qh_setcheck($8);
    var $neighbors = $facet + 56 | 0;
    var $9 = HEAP32[$neighbors >> 2];
    _qh_setcheck($9);
    var $10 = HEAP32[$vertices >> 2];
    var $tobool11 = ($10 | 0) == 0;
    if ($tobool11) {
      var $waserror_3 = $waserror_0;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $10 + 4 | 0;
    var $11 = $p;
    var $waserror_1 = $waserror_0;
    var $previousid_0 = 2147483647;
    var $vertexp_0 = $11;
    label = 8;
    break;
   case 8:
    var $vertexp_0;
    var $previousid_0;
    var $waserror_1;
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $12 = HEAP32[$vertexp_0 >> 2];
    var $tobool14 = ($12 | 0) == 0;
    if ($tobool14) {
      var $waserror_3 = $waserror_1;
      label = 13;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $13 = $12 + 20 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear16 = $15 & 1073741824;
    var $tobool17 = ($bf_clear16 | 0) == 0;
    if ($tobool17) {
      var $waserror_2 = $waserror_1;
      var $16 = $15;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5267156);
    _qh_errprint(0, 0, 0, $12);
    var $_pre8 = HEAP32[$14 >> 2];
    var $waserror_2 = 1;
    var $16 = $_pre8;
    label = 11;
    break;
   case 11:
    var $16;
    var $waserror_2;
    var $bf_clear24 = $16 & 16777215;
    var $cmp = $bf_clear24 >>> 0 < $previousid_0 >>> 0;
    if ($cmp) {
      var $waserror_1 = $waserror_2;
      var $previousid_0 = $bf_clear24;
      var $vertexp_0 = $incdec_ptr;
      label = 8;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5266480);
    var $waserror_3 = 1;
    label = 13;
    break;
   case 13:
    var $waserror_3;
    var $17 = HEAP32[$neighbors >> 2];
    var $call = _qh_setsize($17);
    var $18 = HEAP32[$vertices >> 2];
    var $call35 = _qh_setsize($18);
    var $19 = HEAP32[$ridges >> 2];
    var $call37 = _qh_setsize($19);
    var $20 = HEAP32[$2 >> 2];
    var $bf_clear39 = $20 & 8192;
    var $tobool40 = ($bf_clear39 | 0) == 0;
    if ($tobool40) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $add = $call35 + $call | 0;
    var $21 = HEAP32[5247504 >> 2];
    var $mul = $21 << 1;
    var $cmp42 = ($add | 0) == ($mul | 0);
    var $22 = $20 >>> 0 > 1073741823;
    var $or_cond186 = $cmp42 | $22;
    if ($or_cond186) {
      var $waserror_5 = $waserror_3;
      label = 25;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _qh_fprintf(5266124);
    var $23 = HEAP32[$neighbors >> 2];
    _qh_setprint($23);
    var $waserror_5 = 1;
    label = 25;
    break;
   case 16:
    var $tobool54 = ($newmerge | 0) == 0;
    if ($tobool54) {
      label = 17;
      break;
    } else {
      var $waserror_4 = $waserror_3;
      label = 19;
      break;
    }
   case 17:
    var $24 = HEAP32[5247504 >> 2];
    var $notlhs = ($call35 | 0) >= ($24 | 0);
    var $notrhs = ($call | 0) >= ($24 | 0);
    var $or_cond179_not = $notrhs & $notlhs;
    var $25 = $20 >>> 0 > 1073741823;
    var $or_cond187 = $or_cond179_not | $25;
    if ($or_cond187) {
      var $waserror_4 = $waserror_3;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _qh_fprintf(5265644);
    var $waserror_4 = 1;
    label = 19;
    break;
   case 19:
    var $waserror_4;
    var $cmp69 = ($call37 | 0) < ($call | 0);
    if ($cmp69) {
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $26 = HEAP32[5247504 >> 2];
    if (($26 | 0) == 3) {
      label = 21;
      break;
    } else if (($26 | 0) == 2) {
      label = 22;
      break;
    } else {
      var $waserror_5 = $waserror_4;
      label = 25;
      break;
    }
   case 21:
    var $cmp73 = ($call35 | 0) <= ($call37 | 0);
    var $27 = HEAP32[5249088 >> 2];
    var $tobool75 = ($27 | 0) != 0;
    var $or_cond = $cmp73 | $tobool75;
    if ($or_cond) {
      var $waserror_5 = $waserror_4;
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $add79 = $call35 + $call | 0;
    var $add80 = $add79 + $call37 | 0;
    var $cmp81 = ($add80 | 0) == 6;
    if ($cmp81) {
      var $waserror_5 = $waserror_4;
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $28 = HEAP32[$2 >> 2];
    var $29 = $28 >>> 0 > 1073741823;
    if ($29) {
      var $waserror_5 = $waserror_4;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _qh_fprintf(5265308);
    var $waserror_5 = 1;
    label = 25;
    break;
   case 25:
    var $waserror_5;
    var $30 = HEAP32[$neighbors >> 2];
    var $tobool96 = ($30 | 0) == 0;
    if ($tobool96) {
      var $errother_3 = 0;
      var $waserror_9 = $waserror_5;
      label = 39;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $p101 = $30 + 4 | 0;
    var $31 = HEAP32[$p101 >> 2];
    var $tobool104247 = ($31 | 0) == 0;
    if ($tobool104247) {
      var $_pr18211 = $30;
      label = 32;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $32 = $31;
    var $incdec_ptr103246261 = $p101 + 4 | 0;
    var $incdec_ptr103246 = $incdec_ptr103246261;
    var $incdec_ptr103248 = $incdec_ptr103246;
    var $33 = $32;
    label = 28;
    break;
   case 28:
    var $33;
    var $incdec_ptr103248;
    var $magicptr = $33;
    var $magicptr_off = $magicptr - 1 | 0;
    var $switch = $magicptr_off >>> 0 < 2;
    if ($switch) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_fprintf(5264964);
    _qh_errexit(5, $facet, 0);
    label = 30;
    break;
   case 30:
    var $34 = $33 + 76 | 0;
    var $35 = $34;
    var $36 = HEAP32[$35 >> 2];
    var $37 = $36 | 16384;
    HEAP32[$35 >> 2] = $37;
    var $incdec_ptr103 = $incdec_ptr103248 + 4 | 0;
    var $38 = HEAP32[$incdec_ptr103248 >> 2];
    var $tobool104 = ($38 | 0) == 0;
    if ($tobool104) {
      label = 31;
      break;
    } else {
      var $incdec_ptr103248 = $incdec_ptr103;
      var $33 = $38;
      label = 28;
      break;
    }
   case 31:
    var $_pr182_pre = HEAP32[$neighbors >> 2];
    var $tobool116 = ($_pr182_pre | 0) == 0;
    if ($tobool116) {
      var $errother_3 = 0;
      var $waserror_9 = $waserror_5;
      label = 39;
      break;
    } else {
      var $_pr18211 = $_pr182_pre;
      label = 32;
      break;
    }
   case 32:
    var $_pr18211;
    var $p121 = $_pr18211 + 4 | 0;
    var $39 = HEAP32[$p121 >> 2];
    var $tobool124240 = ($39 | 0) == 0;
    if ($tobool124240) {
      var $errother_3 = 0;
      var $waserror_9 = $waserror_5;
      label = 39;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $40 = $39;
    var $incdec_ptr123239262 = $p121 + 4 | 0;
    var $incdec_ptr123239 = $incdec_ptr123239262;
    var $waserror_6241 = $waserror_5;
    var $errother_0242 = 0;
    var $incdec_ptr123243 = $incdec_ptr123239;
    var $41 = $40;
    label = 34;
    break;
   case 34:
    var $41;
    var $incdec_ptr123243;
    var $errother_0242;
    var $waserror_6241;
    var $neighbors126 = $41 + 56 | 0;
    var $42 = HEAP32[$neighbors126 >> 2];
    var $call127 = _qh_setin($42, $0);
    var $tobool128 = ($call127 | 0) == 0;
    if ($tobool128) {
      label = 35;
      break;
    } else {
      var $errother_1 = $errother_0242;
      var $waserror_7 = $waserror_6241;
      label = 36;
      break;
    }
   case 35:
    _qh_fprintf(5264560);
    var $errother_1 = $41;
    var $waserror_7 = 1;
    label = 36;
    break;
   case 36:
    var $waserror_7;
    var $errother_1;
    var $43 = $41 + 76 | 0;
    var $44 = $43;
    var $45 = HEAP32[$44 >> 2];
    var $bf_clear136 = $45 & 16384;
    var $tobool137 = ($bf_clear136 | 0) == 0;
    if ($tobool137) {
      label = 37;
      break;
    } else {
      var $errother_2 = $errother_1;
      var $waserror_8 = $waserror_7;
      var $46 = $45;
      label = 38;
      break;
    }
   case 37:
    _qh_fprintf(5264192);
    var $_pre7 = HEAP32[$44 >> 2];
    var $errother_2 = $41;
    var $waserror_8 = 1;
    var $46 = $_pre7;
    label = 38;
    break;
   case 38:
    var $46;
    var $waserror_8;
    var $errother_2;
    var $47 = $46 & -16385;
    HEAP32[$44 >> 2] = $47;
    var $incdec_ptr123 = $incdec_ptr123243 + 4 | 0;
    var $48 = HEAP32[$incdec_ptr123243 >> 2];
    var $tobool124 = ($48 | 0) == 0;
    if ($tobool124) {
      var $errother_3 = $errother_2;
      var $waserror_9 = $waserror_8;
      label = 39;
      break;
    } else {
      var $waserror_6241 = $waserror_8;
      var $errother_0242 = $errother_2;
      var $incdec_ptr123243 = $incdec_ptr123;
      var $41 = $48;
      label = 34;
      break;
    }
   case 39:
    var $waserror_9;
    var $errother_3;
    var $49 = HEAP32[$ridges >> 2];
    var $tobool146 = ($49 | 0) == 0;
    if ($tobool146) {
      var $waserror_13 = $waserror_9;
      var $errridge_3 = 0;
      label = 55;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $p151 = $49 + 4 | 0;
    var $50 = HEAP32[$p151 >> 2];
    var $tobool154237 = ($50 | 0) == 0;
    if ($tobool154237) {
      var $_pr18413 = $49;
      label = 44;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $51 = $50;
    var $52 = $p151;
    var $ridgep_0238 = $52;
    var $53 = $51;
    label = 42;
    break;
   case 42:
    var $53;
    var $ridgep_0238;
    var $incdec_ptr153 = $ridgep_0238 + 4 | 0;
    var $vertices156 = $53 | 0;
    var $54 = HEAP32[$vertices156 >> 2];
    var $55 = $53 + 12 | 0;
    var $56 = $55;
    _qh_setcheck($54);
    var $57 = HEAP32[$56 >> 2];
    var $58 = $57 & -16777217;
    HEAP32[$56 >> 2] = $58;
    var $59 = HEAP32[$incdec_ptr153 >> 2];
    var $tobool154 = ($59 | 0) == 0;
    if ($tobool154) {
      label = 43;
      break;
    } else {
      var $ridgep_0238 = $incdec_ptr153;
      var $53 = $59;
      label = 42;
      break;
    }
   case 43:
    var $_pr184_pre = HEAP32[$ridges >> 2];
    var $tobool163 = ($_pr184_pre | 0) == 0;
    if ($tobool163) {
      var $waserror_13 = $waserror_9;
      var $errridge_3 = 0;
      label = 55;
      break;
    } else {
      var $_pr18413 = $_pr184_pre;
      label = 44;
      break;
    }
   case 44:
    var $_pr18413;
    var $p168 = $_pr18413 + 4 | 0;
    var $60 = HEAP32[$p168 >> 2];
    var $tobool171231 = ($60 | 0) == 0;
    if ($tobool171231) {
      var $waserror_13 = $waserror_9;
      var $errridge_3 = 0;
      label = 55;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $61 = $60;
    var $incdec_ptr170230263 = $p168 + 4 | 0;
    var $incdec_ptr170230 = $incdec_ptr170230263;
    var $errridge_0232 = 0;
    var $waserror_10233 = $waserror_9;
    var $incdec_ptr170234 = $incdec_ptr170230;
    var $62 = $61;
    label = 46;
    break;
   case 46:
    var $62;
    var $incdec_ptr170234;
    var $waserror_10233;
    var $errridge_0232;
    var $63 = $62 + 12 | 0;
    var $64 = $63;
    var $65 = HEAP32[$64 >> 2];
    var $bf_clear174 = $65 & 16777216;
    var $tobool175 = ($bf_clear174 | 0) == 0;
    if ($tobool175) {
      var $waserror_11 = $waserror_10233;
      var $errridge_1 = $errridge_0232;
      var $66 = $65;
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    _qh_fprintf(5263348);
    var $_pre5 = HEAP32[$64 >> 2];
    var $waserror_11 = 1;
    var $errridge_1 = $62;
    var $66 = $_pre5;
    label = 48;
    break;
   case 48:
    var $66;
    var $errridge_1;
    var $waserror_11;
    var $67 = $66 | 16777216;
    HEAP32[$64 >> 2] = $67;
    var $vertices182 = $62 | 0;
    var $68 = HEAP32[$vertices182 >> 2];
    var $call183 = _qh_setsize($68);
    var $69 = HEAP32[5247504 >> 2];
    var $sub = $69 - 1 | 0;
    var $cmp184 = ($call183 | 0) == ($sub | 0);
    if ($cmp184) {
      var $waserror_12 = $waserror_11;
      var $errridge_2 = $errridge_1;
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    _qh_fprintf(5262984);
    var $waserror_12 = 1;
    var $errridge_2 = $62;
    label = 50;
    break;
   case 50:
    var $errridge_2;
    var $waserror_12;
    var $top189 = $62 + 4 | 0;
    var $70 = HEAP32[$top189 >> 2];
    var $cmp190 = ($70 | 0) == ($facet | 0);
    if ($cmp190) {
      label = 51;
      break;
    } else {
      var $cond = $70;
      label = 52;
      break;
    }
   case 51:
    var $bottom191 = $62 + 8 | 0;
    var $71 = HEAP32[$bottom191 >> 2];
    var $cond = $71;
    label = 52;
    break;
   case 52:
    var $cond;
    var $72 = $cond;
    var $73 = $cond + 76 | 0;
    var $74 = $73;
    var $75 = HEAP32[$74 >> 2];
    var $76 = $75 | 16384;
    HEAP32[$74 >> 2] = $76;
    var $77 = HEAP32[$neighbors >> 2];
    var $call195 = _qh_setin($77, $72);
    var $tobool196 = ($call195 | 0) == 0;
    if ($tobool196) {
      label = 53;
      break;
    } else {
      var $waserror_10_be = $waserror_12;
      var $errridge_0_be = $errridge_2;
      label = 54;
      break;
    }
   case 53:
    _qh_fprintf(5262552);
    var $waserror_10_be = 1;
    var $errridge_0_be = $62;
    label = 54;
    break;
   case 54:
    var $errridge_0_be;
    var $waserror_10_be;
    var $incdec_ptr170 = $incdec_ptr170234 + 4 | 0;
    var $78 = HEAP32[$incdec_ptr170234 >> 2];
    var $tobool171 = ($78 | 0) == 0;
    if ($tobool171) {
      var $waserror_13 = $waserror_10_be;
      var $errridge_3 = $errridge_0_be;
      label = 55;
      break;
    } else {
      var $errridge_0232 = $errridge_0_be;
      var $waserror_10233 = $waserror_10_be;
      var $incdec_ptr170234 = $incdec_ptr170;
      var $62 = $78;
      label = 46;
      break;
    }
   case 55:
    var $errridge_3;
    var $waserror_13;
    var $79 = HEAP32[$2 >> 2];
    var $bf_clear206 = $79 & 8192;
    var $tobool207 = ($bf_clear206 | 0) == 0;
    var $80 = HEAP32[$neighbors >> 2];
    var $tobool346 = ($80 | 0) != 0;
    if ($tobool207) {
      label = 56;
      break;
    } else {
      label = 92;
      break;
    }
   case 56:
    if ($tobool346) {
      label = 57;
      break;
    } else {
      var $errother_7 = $errother_3;
      var $waserror_17 = $waserror_13;
      label = 100;
      break;
    }
   case 57:
    var $p215 = $80 + 4 | 0;
    var $81 = HEAP32[$p215 >> 2];
    var $tobool218217 = ($81 | 0) == 0;
    if ($tobool218217) {
      var $errother_7 = $errother_3;
      var $waserror_17 = $waserror_13;
      label = 100;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    var $82 = $81;
    var $incdec_ptr217216265 = $p215 + 4 | 0;
    var $incdec_ptr217216 = $incdec_ptr217216265;
    var $tobool306 = ($newmerge | 0) == 0;
    var $waserror_14218 = $waserror_13;
    var $errother_4219 = $errother_3;
    var $incdec_ptr217220 = $incdec_ptr217216;
    var $83 = $82;
    label = 59;
    break;
   case 59:
    var $83;
    var $incdec_ptr217220;
    var $errother_4219;
    var $waserror_14218;
    var $84 = $83 + 76 | 0;
    var $85 = $84;
    var $86 = HEAP32[$85 >> 2];
    var $bf_clear221 = $86 & 16384;
    var $tobool222 = ($bf_clear221 | 0) == 0;
    if ($tobool222) {
      label = 60;
      break;
    } else {
      var $errother_5 = $errother_4219;
      var $waserror_15 = $waserror_14218;
      label = 61;
      break;
    }
   case 60:
    _qh_fprintf(5262004);
    var $errother_5 = $83;
    var $waserror_15 = 1;
    label = 61;
    break;
   case 61:
    var $waserror_15;
    var $errother_5;
    var $87 = HEAP32[$vertices >> 2];
    var $vertices228 = $83 + 48 | 0;
    var $88 = HEAP32[$vertices228 >> 2];
    var $call229 = _qh_vertexintersect_new($87, $88);
    HEAP32[$intersection >> 2] = $call229;
    _qh_settemppush($call229);
    var $89 = HEAP32[$vertices >> 2];
    var $tobool231 = ($89 | 0) == 0;
    if ($tobool231) {
      label = 65;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $p236 = $89 + 4 | 0;
    var $90 = HEAP32[$p236 >> 2];
    var $tobool239203 = ($90 | 0) == 0;
    if ($tobool239203) {
      label = 65;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $91 = $90;
    var $92 = $p236;
    var $vertexp_1204 = $92;
    var $93 = $91;
    label = 64;
    break;
   case 64:
    var $93;
    var $vertexp_1204;
    var $incdec_ptr238 = $vertexp_1204 + 4 | 0;
    var $94 = $93 + 20 | 0;
    var $95 = $94;
    var $96 = HEAP32[$95 >> 2];
    var $97 = $96 & -268435457;
    HEAP32[$95 >> 2] = $97;
    var $98 = $93 + 16 | 0;
    var $99 = $98;
    var $100 = HEAP32[$99 >> 2];
    var $101 = $100 & 2147483647;
    HEAP32[$99 >> 2] = $101;
    var $102 = HEAP32[$incdec_ptr238 >> 2];
    var $tobool239 = ($102 | 0) == 0;
    if ($tobool239) {
      label = 65;
      break;
    } else {
      var $vertexp_1204 = $incdec_ptr238;
      var $93 = $102;
      label = 64;
      break;
    }
   case 65:
    var $tobool245 = ($call229 | 0) == 0;
    if ($tobool245) {
      label = 69;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $p249 = $call229 + 4 | 0;
    var $103 = HEAP32[$p249 >> 2];
    var $tobool252205 = ($103 | 0) == 0;
    if ($tobool252205) {
      label = 69;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $104 = $103;
    var $105 = $p249;
    var $vertexp_2206 = $105;
    var $106 = $104;
    label = 68;
    break;
   case 68:
    var $106;
    var $vertexp_2206;
    var $incdec_ptr251 = $vertexp_2206 + 4 | 0;
    var $107 = $106 + 20 | 0;
    var $108 = $107;
    var $109 = HEAP32[$108 >> 2];
    var $110 = $109 | 268435456;
    HEAP32[$108 >> 2] = $110;
    var $111 = HEAP32[$incdec_ptr251 >> 2];
    var $tobool252 = ($111 | 0) == 0;
    if ($tobool252) {
      label = 69;
      break;
    } else {
      var $vertexp_2206 = $incdec_ptr251;
      var $106 = $111;
      label = 68;
      break;
    }
   case 69:
    var $112 = HEAP32[$ridges >> 2];
    var $tobool258 = ($112 | 0) == 0;
    if ($tobool258) {
      label = 82;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $p263 = $112 + 4 | 0;
    var $113 = HEAP32[$p263 >> 2];
    var $tobool266211 = ($113 | 0) == 0;
    if ($tobool266211) {
      label = 82;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $114 = $113;
    var $incdec_ptr265210266 = $p263 + 4 | 0;
    var $incdec_ptr265210 = $incdec_ptr265210266;
    var $incdec_ptr265212 = $incdec_ptr265210;
    var $115 = $114;
    label = 72;
    break;
   case 72:
    var $115;
    var $incdec_ptr265212;
    var $top268 = $115 + 4 | 0;
    var $116 = HEAP32[$top268 >> 2];
    var $cmp269 = ($116 | 0) == ($facet | 0);
    if ($cmp269) {
      label = 73;
      break;
    } else {
      var $cond275 = $116;
      label = 74;
      break;
    }
   case 73:
    var $bottom271 = $115 + 8 | 0;
    var $117 = HEAP32[$bottom271 >> 2];
    var $cond275 = $117;
    label = 74;
    break;
   case 74:
    var $cond275;
    var $cmp276 = ($83 | 0) == ($cond275 | 0);
    if ($cmp276) {
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    var $incdec_ptr265 = $incdec_ptr265212 + 4 | 0;
    var $118 = HEAP32[$incdec_ptr265212 >> 2];
    var $tobool266 = ($118 | 0) == 0;
    if ($tobool266) {
      label = 82;
      break;
    } else {
      var $incdec_ptr265212 = $incdec_ptr265;
      var $115 = $118;
      label = 72;
      break;
    }
   case 76:
    var $vertices279 = $115 | 0;
    var $119 = HEAP32[$vertices279 >> 2];
    var $tobool280 = ($119 | 0) == 0;
    if ($tobool280) {
      label = 75;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    var $p285 = $119 + 4 | 0;
    var $120 = HEAP32[$p285 >> 2];
    var $tobool288208 = ($120 | 0) == 0;
    if ($tobool288208) {
      label = 75;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    var $121 = $120;
    var $incdec_ptr287207268 = $p285 + 4 | 0;
    var $incdec_ptr287207 = $incdec_ptr287207268;
    var $incdec_ptr287209 = $incdec_ptr287207;
    var $122 = $121;
    label = 79;
    break;
   case 79:
    var $122;
    var $incdec_ptr287209;
    var $123 = $122 + 20 | 0;
    var $124 = $123;
    var $125 = HEAP32[$124 >> 2];
    var $bf_clear291 = $125 & 268435456;
    var $tobool292 = ($bf_clear291 | 0) == 0;
    if ($tobool292) {
      label = 80;
      break;
    } else {
      label = 81;
      break;
    }
   case 80:
    _qh_fprintf(5261524);
    _qh_errexit(5, $facet, $115);
    label = 81;
    break;
   case 81:
    var $126 = $122 + 16 | 0;
    var $127 = $126;
    var $128 = HEAP32[$127 >> 2];
    var $129 = $128 | -2147483648;
    HEAP32[$127 >> 2] = $129;
    var $incdec_ptr287 = $incdec_ptr287209 + 4 | 0;
    var $130 = HEAP32[$incdec_ptr287209 >> 2];
    var $tobool288 = ($130 | 0) == 0;
    if ($tobool288) {
      label = 75;
      break;
    } else {
      var $incdec_ptr287209 = $incdec_ptr287;
      var $122 = $130;
      label = 79;
      break;
    }
   case 82:
    var $tobool306_not = $tobool306 ^ 1;
    var $brmerge = $tobool306_not | $tobool245;
    if ($brmerge) {
      label = 91;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $p312 = $call229 + 4 | 0;
    var $131 = HEAP32[$p312 >> 2];
    var $tobool315214 = ($131 | 0) == 0;
    if ($tobool315214) {
      label = 91;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    var $132 = $131;
    var $incdec_ptr314213267 = $p312 + 4 | 0;
    var $incdec_ptr314213 = $incdec_ptr314213267;
    var $incdec_ptr314215 = $incdec_ptr314213;
    var $133 = $132;
    label = 85;
    break;
   case 85:
    var $133;
    var $incdec_ptr314215;
    var $134 = $133 + 16 | 0;
    var $135 = $134;
    var $136 = HEAP32[$135 >> 2];
    var $tobool319 = ($136 | 0) < 0;
    if ($tobool319) {
      label = 87;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    var $137 = HEAP32[5247036 >> 2];
    var $cmp321 = ($137 | 0) < 3;
    var $138 = HEAP32[5247080 >> 2];
    var $tobool323 = ($138 | 0) != 0;
    var $or_cond2 = $cmp321 & $tobool323;
    if ($or_cond2) {
      label = 87;
      break;
    } else {
      label = 88;
      break;
    }
   case 87:
    var $incdec_ptr314 = $incdec_ptr314215 + 4 | 0;
    var $139 = HEAP32[$incdec_ptr314215 >> 2];
    var $tobool315 = ($139 | 0) == 0;
    if ($tobool315) {
      label = 91;
      break;
    } else {
      var $incdec_ptr314215 = $incdec_ptr314;
      var $133 = $139;
      label = 85;
      break;
    }
   case 88:
    _qh_fprintf(5260992);
    var $140 = HEAP32[5247008 >> 2];
    var $141 = HEAP32[5247080 >> 2];
    var $142 = $141 | $140;
    var $143 = ($142 | 0) == 0;
    if ($143) {
      label = 89;
      break;
    } else {
      label = 87;
      break;
    }
   case 89:
    _qh_errprint($facet, $83, 0, $133);
    var $144 = HEAP32[5247080 >> 2];
    var $tobool333 = ($144 | 0) == 0;
    if ($tobool333) {
      label = 90;
      break;
    } else {
      label = 87;
      break;
    }
   case 90:
    _qh_errexit(5, 0, 0);
    label = 87;
    break;
   case 91:
    _qh_settempfree($intersection);
    var $incdec_ptr217 = $incdec_ptr217220 + 4 | 0;
    var $145 = HEAP32[$incdec_ptr217220 >> 2];
    var $tobool218 = ($145 | 0) == 0;
    if ($tobool218) {
      var $errother_7 = $errother_5;
      var $waserror_17 = $waserror_15;
      label = 100;
      break;
    } else {
      var $waserror_14218 = $waserror_15;
      var $errother_4219 = $errother_5;
      var $incdec_ptr217220 = $incdec_ptr217;
      var $83 = $145;
      label = 59;
      break;
    }
   case 92:
    if ($tobool346) {
      label = 93;
      break;
    } else {
      var $errother_7 = $errother_3;
      var $waserror_17 = $waserror_13;
      label = 100;
      break;
    }
   case 93:
    var $p351 = $80 + 4 | 0;
    var $146 = HEAP32[$p351 >> 2];
    var $tobool354228255 = ($146 | 0) == 0;
    if ($tobool354228255) {
      var $errother_7 = $errother_3;
      var $waserror_17 = $waserror_13;
      label = 100;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    var $147 = $146;
    var $incdec_ptr353227254264 = $p351 + 4 | 0;
    var $incdec_ptr353227254 = $incdec_ptr353227254264;
    var $waserror_16_ph256 = $waserror_13;
    var $errother_6_ph257 = $errother_3;
    var $incdec_ptr353227258 = $incdec_ptr353227254;
    var $148 = $147;
    label = 95;
    break;
   case 95:
    var $148;
    var $incdec_ptr353227258;
    var $errother_6_ph257;
    var $waserror_16_ph256;
    var $incdec_ptr353229 = $incdec_ptr353227258;
    var $149 = $148;
    label = 96;
    break;
   case 96:
    var $149;
    var $incdec_ptr353229;
    var $150 = $149 + 76 | 0;
    var $151 = $150;
    var $152 = HEAP32[$151 >> 2];
    var $bf_clear357 = $152 & 8192;
    var $tobool358 = ($bf_clear357 | 0) == 0;
    if ($tobool358) {
      label = 97;
      break;
    } else {
      label = 98;
      break;
    }
   case 97:
    var $incdec_ptr353 = $incdec_ptr353229 + 4 | 0;
    var $153 = HEAP32[$incdec_ptr353229 >> 2];
    var $tobool354 = ($153 | 0) == 0;
    if ($tobool354) {
      var $errother_7 = $errother_6_ph257;
      var $waserror_17 = $waserror_16_ph256;
      label = 100;
      break;
    } else {
      var $incdec_ptr353229 = $incdec_ptr353;
      var $149 = $153;
      label = 96;
      break;
    }
   case 98:
    var $154 = HEAP32[$neighbors >> 2];
    var $p363 = $154 + 8 | 0;
    var $sub_ptr_lhs_cast = $incdec_ptr353229;
    var $sub_ptr_rhs_cast = $p363;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $neighbors364 = $149 + 56 | 0;
    var $155 = HEAP32[$neighbors364 >> 2];
    var $call365 = _qh_setindex($155, $0);
    var $156 = HEAP32[$vertices >> 2];
    var $vertices367 = $149 + 48 | 0;
    var $157 = HEAP32[$vertices367 >> 2];
    var $call368 = _qh_setequal_skip($156, $sub_ptr_div, $157, $call365);
    var $tobool369 = ($call368 | 0) == 0;
    if ($tobool369) {
      label = 99;
      break;
    } else {
      label = 97;
      break;
    }
   case 99:
    _qh_fprintf(5260604);
    var $incdec_ptr353227 = $incdec_ptr353229 + 4 | 0;
    var $158 = HEAP32[$incdec_ptr353229 >> 2];
    var $tobool354228 = ($158 | 0) == 0;
    if ($tobool354228) {
      var $errother_7 = $149;
      var $waserror_17 = 1;
      label = 100;
      break;
    } else {
      var $waserror_16_ph256 = 1;
      var $errother_6_ph257 = $149;
      var $incdec_ptr353227258 = $incdec_ptr353227;
      var $148 = $158;
      label = 95;
      break;
    }
   case 100:
    var $waserror_17;
    var $errother_7;
    var $159 = HEAP32[5247504 >> 2];
    var $cmp378 = ($159 | 0) < 5;
    if ($cmp378) {
      label = 101;
      break;
    } else {
      var $waserror_21 = $waserror_17;
      var $errridge_7 = $errridge_3;
      label = 111;
      break;
    }
   case 101:
    var $160 = HEAP32[5247036 >> 2];
    var $cmp380 = ($160 | 0) > 2;
    var $161 = HEAP32[5246976 >> 2];
    var $tobool382 = ($161 | 0) != 0;
    var $or_cond4 = $cmp380 | $tobool382;
    if ($or_cond4) {
      label = 102;
      break;
    } else {
      var $waserror_21 = $waserror_17;
      var $errridge_7 = $errridge_3;
      label = 111;
      break;
    }
   case 102:
    var $162 = HEAP32[$ridges >> 2];
    var $tobool385 = ($162 | 0) == 0;
    if ($tobool385) {
      var $waserror_21 = $waserror_17;
      var $errridge_7 = $errridge_3;
      label = 111;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    var $p390 = $162 + 4 | 0;
    var $163 = HEAP32[$p390 >> 2];
    var $call392 = _qh_setsize($162);
    var $cmp394195 = ($call392 | 0) > 0;
    if ($cmp394195) {
      label = 104;
      break;
    } else {
      var $waserror_21 = $waserror_17;
      var $errridge_7 = $errridge_3;
      label = 111;
      break;
    }
   case 104:
    var $_pre = HEAP32[$ridges >> 2];
    var $errridge_4196 = $errridge_3;
    var $waserror_18198 = $waserror_17;
    var $ridge_i_0199 = 0;
    var $ridge_0200_in = $163;
    var $164 = $_pre;
    label = 105;
    break;
   case 105:
    var $164;
    var $ridge_0200_in;
    var $ridge_i_0199;
    var $waserror_18198;
    var $errridge_4196;
    var $ridge_0200 = $ridge_0200_in;
    var $add396 = $ridge_i_0199 + 1 | 0;
    var $cmp398188 = ($add396 | 0) < ($call392 | 0);
    if ($cmp398188) {
      label = 106;
      break;
    } else {
      var $errridge_5_lcssa = $errridge_4196;
      var $waserror_19_lcssa = $waserror_18198;
      var $_lcssa = $164;
      label = 110;
      break;
    }
   case 106:
    var $vertices404 = $ridge_0200_in;
    var $errridge_5189 = $errridge_4196;
    var $waserror_19190 = $waserror_18198;
    var $i_0191 = $add396;
    var $165 = $164;
    label = 107;
    break;
   case 107:
    var $165;
    var $i_0191;
    var $waserror_19190;
    var $errridge_5189;
    var $p403 = $165 + 4 + ($i_0191 << 2) | 0;
    var $166 = HEAP32[$p403 >> 2];
    var $167 = HEAP32[$vertices404 >> 2];
    var $vertices405 = $166;
    var $168 = HEAP32[$vertices405 >> 2];
    var $call406 = _qh_setequal($167, $168);
    var $tobool407 = ($call406 | 0) == 0;
    if ($tobool407) {
      var $waserror_20 = $waserror_19190;
      var $errridge_6 = $errridge_5189;
      var $169 = $165;
      label = 109;
      break;
    } else {
      label = 108;
      break;
    }
   case 108:
    _qh_fprintf(5260268);
    var $_pre3 = HEAP32[$ridges >> 2];
    var $waserror_20 = 1;
    var $errridge_6 = $ridge_0200;
    var $169 = $_pre3;
    label = 109;
    break;
   case 109:
    var $169;
    var $errridge_6;
    var $waserror_20;
    var $inc = $i_0191 + 1 | 0;
    var $exitcond = ($inc | 0) == ($call392 | 0);
    if ($exitcond) {
      var $errridge_5_lcssa = $errridge_6;
      var $waserror_19_lcssa = $waserror_20;
      var $_lcssa = $169;
      label = 110;
      break;
    } else {
      var $errridge_5189 = $errridge_6;
      var $waserror_19190 = $waserror_20;
      var $i_0191 = $inc;
      var $165 = $169;
      label = 107;
      break;
    }
   case 110:
    var $_lcssa;
    var $waserror_19_lcssa;
    var $errridge_5_lcssa;
    var $p420 = $_lcssa + 4 + ($add396 << 2) | 0;
    var $170 = HEAP32[$p420 >> 2];
    var $exitcond270 = ($add396 | 0) == ($call392 | 0);
    if ($exitcond270) {
      var $waserror_21 = $waserror_19_lcssa;
      var $errridge_7 = $errridge_5_lcssa;
      label = 111;
      break;
    } else {
      var $errridge_4196 = $errridge_5_lcssa;
      var $waserror_18198 = $waserror_19_lcssa;
      var $ridge_i_0199 = $add396;
      var $ridge_0200_in = $170;
      var $164 = $_lcssa;
      label = 105;
      break;
    }
   case 111:
    var $errridge_7;
    var $waserror_21;
    var $tobool424 = ($waserror_21 | 0) == 0;
    if ($tobool424) {
      label = 113;
      break;
    } else {
      label = 112;
      break;
    }
   case 112:
    _qh_errprint($facet, $errother_7, $errridge_7, 0);
    HEAP32[$waserrorp >> 2] = 1;
    label = 113;
    break;
   case 113:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_checkfacet["X"] = 1;
function _qh_vertexintersect_new($vertexsetA, $vertexsetB) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $intersection = __stackBase__;
    var $0 = HEAP32[5247504 >> 2];
    var $sub = $0 - 1 | 0;
    var $call = _qh_setnew($sub);
    HEAP32[$intersection >> 2] = $call;
    var $p = $vertexsetA + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $tobool13 = ($1 | 0) == 0;
    if ($tobool13) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p3 = $vertexsetB + 4 | 0;
    var $2 = $1 + 20 | 0;
    var $3 = $1;
    var $4 = $p;
    var $5 = $p3;
    var $vertexA_0_ph14 = $4;
    var $vertexB_0_ph15 = $5;
    var $6 = $3;
    var $_in = $2;
    label = 4;
    break;
   case 4:
    var $_in;
    var $6;
    var $vertexB_0_ph15;
    var $vertexA_0_ph14;
    var $7 = $_in;
    var $vertexB_0 = $vertexB_0_ph15;
    label = 5;
    break;
   case 5:
    var $vertexB_0;
    var $8 = HEAP32[$vertexB_0 >> 2];
    var $tobool4 = ($8 | 0) == 0;
    if ($tobool4) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp = ($6 | 0) == ($8 | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $9 = $6;
    _qh_setappend($intersection, $9);
    var $incdec_ptr5 = $vertexB_0 + 4 | 0;
    var $vertexB_0_ph_be = $incdec_ptr5;
    label = 8;
    break;
   case 8:
    var $vertexB_0_ph_be;
    var $vertexA_0_ph_be = $vertexA_0_ph14 + 4 | 0;
    var $10 = HEAP32[$vertexA_0_ph_be >> 2];
    var $tobool = ($10 | 0) == 0;
    var $11 = $10 + 20 | 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      var $vertexA_0_ph14 = $vertexA_0_ph_be;
      var $vertexB_0_ph15 = $vertexB_0_ph_be;
      var $6 = $10;
      var $_in = $11;
      label = 4;
      break;
    }
   case 9:
    var $12 = HEAP32[$7 >> 2];
    var $bf_clear = $12 & 16777215;
    var $13 = $8 + 20 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $bf_clear7 = $15 & 16777215;
    var $cmp8 = $bf_clear >>> 0 > $bf_clear7 >>> 0;
    var $incdec_ptr12 = $vertexB_0 + 4 | 0;
    if ($cmp8) {
      var $vertexB_0_ph_be = $vertexB_0;
      label = 8;
      break;
    } else {
      var $vertexB_0 = $incdec_ptr12;
      label = 5;
      break;
    }
   case 10:
    var $16 = HEAP32[$intersection >> 2];
    STACKTOP = __stackBase__;
    return $16;
  }
}
function _qh_printlists() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_fprintf(5294944);
    var $facet_013 = HEAP32[5248940 >> 2];
    var $tobool14 = ($facet_013 | 0) == 0;
    if ($tobool14) {
      label = 7;
      break;
    } else {
      var $count_015 = 1;
      var $facet_016 = $facet_013;
      label = 3;
      break;
    }
   case 3:
    var $facet_016;
    var $count_015;
    var $next = $facet_016 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $rem = ($count_015 | 0) % 100;
    var $cmp = ($rem | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5294784);
    label = 6;
    break;
   case 6:
    _qh_fprintf(5295004);
    var $phitmp8 = $count_015 + 1 | 0;
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      var $count_015 = $phitmp8;
      var $facet_016 = $facet_0;
      label = 3;
      break;
    }
   case 7:
    _qh_fprintf(5294520);
    var $vertex_09 = HEAP32[5248980 >> 2];
    var $tobool2310 = ($vertex_09 | 0) == 0;
    if ($tobool2310) {
      label = 12;
      break;
    } else {
      var $count_111 = 1;
      var $vertex_012 = $vertex_09;
      label = 8;
      break;
    }
   case 8:
    var $vertex_012;
    var $count_111;
    var $next25 = $vertex_012 | 0;
    var $1 = HEAP32[$next25 >> 2];
    var $tobool26 = ($1 | 0) == 0;
    if ($tobool26) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $rem30 = ($count_111 | 0) % 100;
    var $cmp31 = ($rem30 | 0) == 0;
    if ($cmp31) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5294784);
    label = 11;
    break;
   case 11:
    _qh_fprintf(5295004);
    var $phitmp = $count_111 + 1 | 0;
    var $vertex_0 = HEAP32[$next25 >> 2];
    var $tobool23 = ($vertex_0 | 0) == 0;
    if ($tobool23) {
      label = 12;
      break;
    } else {
      var $count_111 = $phitmp;
      var $vertex_012 = $vertex_0;
      label = 8;
      break;
    }
   case 12:
    _qh_fprintf(5299656);
    return;
  }
}
function _qh_nextridge3d($atridge, $facet, $vertexp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $top = $atridge + 4 | 0;
    var $0 = HEAP32[$top >> 2];
    var $cmp = ($0 | 0) == ($facet | 0);
    var $vertices = $atridge | 0;
    var $1 = HEAP32[$vertices >> 2];
    var $p = $1 + 8 | 0;
    var $p4 = $1 + 4 | 0;
    var $atvertex_0_in_in = $cmp ? $p : $p4;
    var $atvertex_0_in = HEAP32[$atvertex_0_in_in >> 2];
    var $atvertex_0 = $atvertex_0_in;
    var $ridges = $facet + 52 | 0;
    var $2 = HEAP32[$ridges >> 2];
    var $tobool5 = ($2 | 0) == 0;
    if ($tobool5) {
      var $retval_0 = 0;
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p10 = $2 + 4 | 0;
    var $3 = HEAP32[$p10 >> 2];
    var $tobool1115 = ($3 | 0) == 0;
    if ($tobool1115) {
      var $retval_0 = 0;
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $4 = $3;
    var $incdec_ptr1417 = $p10 + 4 | 0;
    var $incdec_ptr14 = $incdec_ptr1417;
    var $incdec_ptr16 = $incdec_ptr14;
    var $5 = $4;
    label = 5;
    break;
   case 5:
    var $5;
    var $incdec_ptr16;
    var $cmp12 = ($5 | 0) == ($atridge | 0);
    if ($cmp12) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $incdec_ptr = $incdec_ptr16 + 4 | 0;
    var $6 = HEAP32[$incdec_ptr16 >> 2];
    var $tobool11 = ($6 | 0) == 0;
    if ($tobool11) {
      var $retval_0 = 0;
      label = 10;
      break;
    } else {
      var $incdec_ptr16 = $incdec_ptr;
      var $5 = $6;
      label = 5;
      break;
    }
   case 7:
    var $top16 = $5 + 4 | 0;
    var $7 = HEAP32[$top16 >> 2];
    var $cmp17 = ($7 | 0) == ($facet | 0);
    var $vertices22 = $5 | 0;
    var $8 = HEAP32[$vertices22 >> 2];
    var $p25 = $8 + 8 | 0;
    var $9 = HEAP32[$p25 >> 2];
    var $10 = $9;
    var $p29 = $8 + 4 | 0;
    var $11 = HEAP32[$p29 >> 2];
    var $12 = $11;
    var $_ = $cmp17 ? $12 : $10;
    var $cmp40 = ($_ | 0) == ($atvertex_0 | 0);
    if ($cmp40) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 8:
    var $tobool43 = ($vertexp | 0) == 0;
    if ($tobool43) {
      var $retval_0 = $5;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_12 = $cmp17 ? $10 : $12;
    HEAP32[$vertexp >> 2] = $_12;
    var $retval_0 = $5;
    label = 10;
    break;
   case 10:
    var $retval_0;
    return $retval_0;
  }
}
_qh_nextridge3d["X"] = 1;
function _qh_checkvertex($vertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $point = $vertex + 8 | 0;
    var $0 = HEAP32[$point >> 2];
    var $call = _qh_pointid($0);
    var $cmp = ($call | 0) == -1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $waserror_0 = 0;
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5256304);
    var $waserror_0 = 1;
    label = 4;
    break;
   case 4:
    var $waserror_0;
    var $1 = $vertex;
    var $2 = $vertex + 20 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 16777215;
    var $5 = HEAP32[5249016 >> 2];
    var $bf_clear2 = $5 & 16777215;
    var $cmp3 = $bf_clear >>> 0 < $bf_clear2 >>> 0;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5255944);
    var $errfacet_119 = 0;
    label = 16;
    break;
   case 6:
    var $tobool = ($waserror_0 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      var $errfacet_119 = 0;
      label = 16;
      break;
    }
   case 7:
    var $bf_clear9 = $4 & 1073741824;
    var $tobool10 = ($bf_clear9 | 0) == 0;
    if ($tobool10) {
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 8:
    var $neighbors = $vertex + 12 | 0;
    var $6 = HEAP32[$neighbors >> 2];
    var $call12 = _qh_setsize($6);
    var $tobool13 = ($call12 | 0) == 0;
    if ($tobool13) {
      label = 17;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $7 = HEAP32[$neighbors >> 2];
    var $tobool16 = ($7 | 0) == 0;
    if ($tobool16) {
      label = 17;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $7 + 4 | 0;
    var $8 = $p;
    var $errfacet_0_ph = 0;
    var $neighborp_0_ph = $8;
    var $waserror_2_ph = 0;
    label = 11;
    break;
   case 11:
    var $waserror_2_ph;
    var $neighborp_0_ph;
    var $errfacet_0_ph;
    var $neighborp_0 = $neighborp_0_ph;
    label = 12;
    break;
   case 12:
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $9 = HEAP32[$neighborp_0 >> 2];
    var $tobool19 = ($9 | 0) == 0;
    if ($tobool19) {
      var $errfacet_1 = $errfacet_0_ph;
      var $waserror_3 = $waserror_2_ph;
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $vertices = $9 + 48 | 0;
    var $10 = HEAP32[$vertices >> 2];
    var $call20 = _qh_setin($10, $1);
    var $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      label = 14;
      break;
    } else {
      var $neighborp_0 = $incdec_ptr;
      label = 12;
      break;
    }
   case 14:
    _qh_fprintf(5255644);
    var $errfacet_0_ph = $9;
    var $neighborp_0_ph = $incdec_ptr;
    var $waserror_2_ph = 1;
    label = 11;
    break;
   case 15:
    var $waserror_3;
    var $errfacet_1;
    var $tobool29 = ($waserror_3 | 0) == 0;
    if ($tobool29) {
      label = 17;
      break;
    } else {
      var $errfacet_119 = $errfacet_1;
      label = 16;
      break;
    }
   case 16:
    var $errfacet_119;
    _qh_errprint(0, 0, 0, $vertex);
    _qh_errexit(5, $errfacet_119, 0);
    label = 17;
    break;
   case 17:
    return;
  }
}
_qh_checkvertex["X"] = 1;
function _qh_clearcenters($type) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249032 >> 2];
    var $cmp = ($0 | 0) == ($type | 0);
    if ($cmp) {
      label = 14;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $facet_013 = HEAP32[5248940 >> 2];
    var $tobool14 = ($facet_013 | 0) == 0;
    if ($tobool14) {
      label = 13;
      break;
    } else {
      var $facet_015 = $facet_013;
      label = 4;
      break;
    }
   case 4:
    var $facet_015;
    var $next = $facet_015 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = $facet_015 + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $5 = $4 & 268435968;
    var $6 = ($5 | 0) == 512;
    if ($6) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $center = $facet_015 + 36 | 0;
    HEAP32[$center >> 2] = 0;
    label = 7;
    break;
   case 7:
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      var $facet_015 = $facet_0;
      label = 4;
      break;
    }
   case 8:
    var $7 = HEAP32[5249032 >> 2];
    var $cmp7 = ($7 | 0) == 1;
    var $center9 = $facet_015 + 36 | 0;
    var $8 = HEAP32[$center9 >> 2];
    var $tobool10 = ($8 | 0) != 0;
    if ($cmp7) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 10:
    var $9 = $8;
    var $10 = HEAP32[5248932 >> 2];
    _qh_memfree($9, $10);
    HEAP32[$center9 >> 2] = 0;
    label = 7;
    break;
   case 11:
    if ($tobool10) {
      label = 12;
      break;
    } else {
      label = 7;
      break;
    }
   case 12:
    var $11 = $8;
    var $12 = HEAP32[5248928 >> 2];
    _qh_memfree($11, $12);
    HEAP32[$center9 >> 2] = 0;
    label = 7;
    break;
   case 13:
    HEAP32[5249032 >> 2] = $type;
    label = 14;
    break;
   case 14:
    var $13 = HEAP32[5247036 >> 2];
    var $cmp25 = ($13 | 0) > 1;
    if ($cmp25) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5255404);
    label = 16;
    break;
   case 16:
    return;
  }
}
function _qh_createsimplex($vertices) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $newfacets = __stackBase__;
    var $0 = HEAP32[5247504 >> 2];
    var $add = $0 + 1 | 0;
    var $call = _qh_settemp($add);
    HEAP32[$newfacets >> 2] = $call;
    var $call1 = _qh_newfacet();
    HEAP32[5248944 >> 2] = $call1;
    HEAP32[5248952 >> 2] = $call1;
    HEAP32[5248940 >> 2] = $call1;
    HEAP32[5248960 >> 2] = 0;
    HEAP32[5248996 >> 2] = 0;
    HEAP32[5248992 >> 2] = 0;
    var $call2 = _qh_newvertex(0);
    HEAP32[5248984 >> 2] = $call2;
    HEAP32[5248988 >> 2] = $call2;
    HEAP32[5248980 >> 2] = $call2;
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $call3 = _qh_setsize($vertices);
    var $cmp31 = ($call3 | 0) > 0;
    if ($cmp31) {
      var $toporient_032 = 1;
      var $vertex_i_033 = 0;
      var $vertex_0_in34 = $1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $newfacet_026 = HEAP32[5248952 >> 2];
    var $tobool1327 = ($newfacet_026 | 0) == 0;
    if ($tobool1327) {
      label = 12;
      break;
    } else {
      var $newfacet_028 = $newfacet_026;
      label = 6;
      break;
    }
   case 5:
    var $vertex_0_in34;
    var $vertex_i_033;
    var $toporient_032;
    var $vertex_0 = $vertex_0_in34;
    var $call4 = _qh_newfacet();
    var $call5 = _qh_setnew_delnthsorted($vertices, $call3, $vertex_i_033, 0);
    var $vertices6 = $call4 + 48 | 0;
    HEAP32[$vertices6 >> 2] = $call5;
    var $2 = $call4;
    var $3 = $call4 + 76 | 0;
    var $4 = $3;
    var $bf_value = $toporient_032 << 12;
    var $5 = $bf_value & 4096;
    var $6 = HEAP32[$4 >> 2];
    var $7 = $6 & -4097;
    var $8 = $7 | $5;
    HEAP32[$4 >> 2] = $8;
    _qh_appendfacet($call4);
    var $9 = HEAP32[$4 >> 2];
    var $10 = $9 | 1024;
    HEAP32[$4 >> 2] = $10;
    _qh_appendvertex($vertex_0);
    _qh_setappend($newfacets, $2);
    var $xor = $toporient_032 ^ 1;
    var $inc = $vertex_i_033 + 1 | 0;
    var $p11 = $vertices + 4 + ($inc << 2) | 0;
    var $11 = HEAP32[$p11 >> 2];
    var $exitcond = ($inc | 0) == ($call3 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $toporient_032 = $xor;
      var $vertex_i_033 = $inc;
      var $vertex_0_in34 = $11;
      label = 5;
      break;
    }
   case 6:
    var $newfacet_028;
    var $next = $newfacet_028 + 44 | 0;
    var $12 = HEAP32[$next >> 2];
    var $tobool14 = ($12 | 0) == 0;
    if ($tobool14) {
      label = 12;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $13 = HEAP32[5248952 >> 2];
    var $tobool16 = ($13 | 0) == 0;
    var $neighbors37_pre = $newfacet_028 + 56 | 0;
    if ($tobool16) {
      var $neighbors37_pre_phi = $neighbors37_pre;
      label = 11;
      break;
    } else {
      var $facet_024 = $13;
      var $nth_025 = 0;
      label = 8;
      break;
    }
   case 8:
    var $nth_025;
    var $facet_024;
    var $next21 = $facet_024 + 44 | 0;
    var $14 = HEAP32[$next21 >> 2];
    var $tobool22 = ($14 | 0) == 0;
    if ($tobool22) {
      var $neighbors37_pre_phi = $neighbors37_pre;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $cmp25 = ($facet_024 | 0) == ($newfacet_028 | 0);
    if ($cmp25) {
      var $facet_024 = $14;
      var $nth_025 = $nth_025;
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $15 = $facet_024;
    var $inc28 = $nth_025 + 1 | 0;
    var $16 = HEAP32[$neighbors37_pre >> 2];
    var $p31 = $16 + 4 + ($nth_025 << 2) | 0;
    HEAP32[$p31 >> 2] = $15;
    var $_pre = HEAP32[$next21 >> 2];
    var $tobool19 = ($_pre | 0) == 0;
    if ($tobool19) {
      var $neighbors37_pre_phi = $neighbors37_pre;
      label = 11;
      break;
    } else {
      var $facet_024 = $_pre;
      var $nth_025 = $inc28;
      label = 8;
      break;
    }
   case 11:
    var $neighbors37_pre_phi;
    var $17 = HEAP32[$neighbors37_pre_phi >> 2];
    var $18 = HEAP32[5247504 >> 2];
    _qh_settruncate($17, $18);
    var $newfacet_0 = HEAP32[$next >> 2];
    var $tobool13 = ($newfacet_0 | 0) == 0;
    if ($tobool13) {
      label = 12;
      break;
    } else {
      var $newfacet_028 = $newfacet_0;
      label = 6;
      break;
    }
   case 12:
    _qh_settempfree($newfacets);
    var $19 = HEAP32[5247036 >> 2];
    var $cmp41 = ($19 | 0) > 0;
    if ($cmp41) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5255192);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_createsimplex["X"] = 1;
function _qh_newvertex($point) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5244608 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5244608 >> 2] = $inc;
    var $call = _qh_memalloc(24);
    var $1 = $call;
    _memset($call, 0, 24);
    var $2 = HEAP32[5249016 >> 2];
    var $bf_clear = $2 & 16777215;
    var $cmp = ($bf_clear | 0) == 16777215;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $3 = $2;
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5296412);
    _qh_errexit(5, 0, 0);
    var $_pre = HEAP32[5249016 >> 2];
    var $3 = $_pre;
    label = 4;
    break;
   case 4:
    var $3;
    var $bf_clear1 = $3 & 16777215;
    var $4 = HEAP32[5248972 >> 2];
    var $cmp2 = ($bf_clear1 | 0) == ($4 | 0);
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5248976 >> 2] = $1;
    label = 6;
    break;
   case 6:
    var $inc6 = $3 + 1 | 0;
    var $bf_value = $inc6 & 16777215;
    var $5 = $3 & -16777216;
    var $6 = $bf_value | $5;
    HEAP32[5249016 >> 2] = $6;
    var $bf_field_offs = $call + 20 | 0;
    var $7 = $bf_field_offs;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 & -16777216;
    var $10 = $9 | $bf_clear1;
    HEAP32[$7 >> 2] = $10;
    var $point8 = $call + 8 | 0;
    var $11 = $point8;
    HEAP32[$11 >> 2] = $point;
    var $12 = HEAP32[5247504 >> 2];
    var $cmp9 = ($12 | 0) < 16;
    var $_op = $12 << 24;
    var $_op_op = $_op & 251658240;
    var $13 = $cmp9 ? $_op_op : 0;
    var $14 = $10 & -251658241;
    var $15 = $13 | $14;
    HEAP32[$7 >> 2] = $15;
    var $16 = HEAP32[5247036 >> 2];
    var $cmp13 = ($16 | 0) > 3;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _qh_fprintf(5296264);
    label = 8;
    break;
   case 8:
    return $1;
  }
}
function _qh_delridge($ridge) {
  var $2 = $ridge;
  _qh_setdel(HEAP32[HEAP32[$ridge + 4 >> 2] + 52 >> 2], $2);
  _qh_setdel(HEAP32[HEAP32[$ridge + 8 >> 2] + 52 >> 2], $2);
  _qh_setfree($ridge | 0);
  _qh_memfree($2, 16);
  return;
}
function _qh_delvertex($vertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248976 >> 2];
    var $cmp = ($0 | 0) == ($vertex | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5248976 >> 2] = 0;
    label = 4;
    break;
   case 4:
    _qh_removevertex($vertex);
    var $neighbors = $vertex + 12 | 0;
    _qh_setfree($neighbors);
    var $1 = $vertex;
    _qh_memfree($1, 24);
    return;
  }
}
function _qh_facet3vertex($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertex = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $vertices1 = $facet + 48 | 0;
    var $0 = HEAP32[$vertices1 >> 2];
    var $call = _qh_setsize($0);
    var $call2 = _qh_settemp($call);
    HEAP32[$vertices >> 2] = $call2;
    var $1 = $facet + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 & 8192;
    var $tobool = ($bf_clear | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp = ($call | 0) == 3;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5254944);
    _qh_errexit(5, $facet, 0);
    label = 5;
    break;
   case 5:
    var $4 = HEAP32[$vertices1 >> 2];
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    _qh_setappend($vertices, $5);
    var $6 = HEAP32[$2 >> 2];
    var $bf_clear6 = $6 & 4096;
    var $tobool7 = ($bf_clear6 | 0) == 0;
    var $7 = HEAP32[$vertices1 >> 2];
    var $p12 = $7 + 8 | 0;
    var $8 = HEAP32[$p12 >> 2];
    if ($tobool7) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_setappend($vertices, $8);
    label = 8;
    break;
   case 7:
    _qh_setaddnth($vertices, 0, $8);
    label = 8;
    break;
   case 8:
    var $9 = HEAP32[$vertices1 >> 2];
    var $p21 = $9 + 12 | 0;
    var $10 = HEAP32[$p21 >> 2];
    _qh_setappend($vertices, $10);
    label = 14;
    break;
   case 9:
    var $ridges = $facet + 52 | 0;
    var $11 = HEAP32[$ridges >> 2];
    var $p25 = $11 + 4 | 0;
    var $12 = HEAP32[$p25 >> 2];
    var $13 = $12;
    var $cntprojected_0 = 0;
    var $ridge_0 = $13;
    label = 10;
    break;
   case 10:
    var $ridge_0;
    var $cntprojected_0;
    var $call26 = _qh_nextridge3d($ridge_0, $facet, $vertex);
    var $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $14 = HEAP32[$vertex >> 2];
    var $15 = $14;
    _qh_setappend($vertices, $15);
    var $inc = $cntprojected_0 + 1 | 0;
    var $cmp28 = ($inc | 0) > ($call | 0);
    var $cmp29 = ($call26 | 0) == ($13 | 0);
    var $or_cond = $cmp28 | $cmp29;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $cntprojected_0 = $inc;
      var $ridge_0 = $call26;
      label = 10;
      break;
    }
   case 12:
    var $cmp34 = ($inc | 0) == ($call | 0);
    if ($cmp34) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _qh_fprintf(5254672);
    _qh_errexit(5, $facet, $call26);
    label = 14;
    break;
   case 14:
    var $16 = HEAP32[$vertices >> 2];
    STACKTOP = __stackBase__;
    return $16;
  }
}
_qh_facet3vertex["X"] = 1;
function _qh_findbestlower($upperfacet, $point, $bestdistp, $numpart) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5243136 >> 2];
    var $inc = $0 + 1 | 0;
    HEAP32[5243136 >> 2] = $inc;
    var $neighbors = $upperfacet + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      var $bestdist_128 = -8.988465674311579e+307;
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool24663 = ($2 | 0) == 0;
    if ($tobool24663) {
      var $bestdist_128 = -8.988465674311579e+307;
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $2;
    var $incdec_ptr456269 = $p + 4 | 0;
    var $incdec_ptr4562 = $incdec_ptr456269;
    var $bestfacet_0_ph64 = 0;
    var $bestdist_0_ph65 = -8.988465674311579e+307;
    var $incdec_ptr4566 = $incdec_ptr4562;
    var $4 = $3;
    label = 5;
    break;
   case 5:
    var $4;
    var $incdec_ptr4566;
    var $bestdist_0_ph65;
    var $bestfacet_0_ph64;
    var $incdec_ptr47 = $incdec_ptr4566;
    var $5 = $4;
    label = 6;
    break;
   case 6:
    var $5;
    var $incdec_ptr47;
    var $6 = $5 + 76 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 & 196608;
    var $10 = ($9 | 0) == 0;
    if ($10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $11 = HEAP32[$numpart >> 2];
    var $inc8 = $11 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc8;
    _qh_distplane($point, $5, $dist);
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $12 > $bestdist_0_ph65;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $incdec_ptr = $incdec_ptr47 + 4 | 0;
    var $13 = HEAP32[$incdec_ptr47 >> 2];
    var $tobool2 = ($13 | 0) == 0;
    if ($tobool2) {
      var $bestfacet_0_ph59 = $bestfacet_0_ph64;
      var $bestdist_0_ph61 = $bestdist_0_ph65;
      label = 10;
      break;
    } else {
      var $incdec_ptr47 = $incdec_ptr;
      var $5 = $13;
      label = 6;
      break;
    }
   case 9:
    var $incdec_ptr45 = $incdec_ptr47 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr47 >> 2];
    var $tobool246 = ($14 | 0) == 0;
    if ($tobool246) {
      var $bestfacet_0_ph59 = $5;
      var $bestdist_0_ph61 = $12;
      label = 10;
      break;
    } else {
      var $bestfacet_0_ph64 = $5;
      var $bestdist_0_ph65 = $12;
      var $incdec_ptr4566 = $incdec_ptr45;
      var $4 = $14;
      label = 5;
      break;
    }
   case 10:
    var $bestdist_0_ph61;
    var $bestfacet_0_ph59;
    var $tobool12 = ($bestfacet_0_ph59 | 0) == 0;
    if ($tobool12) {
      var $bestdist_128 = $bestdist_0_ph61;
      label = 11;
      break;
    } else {
      var $bestfacet_330 = $bestfacet_0_ph59;
      var $bestdist_332 = $bestdist_0_ph61;
      label = 21;
      break;
    }
   case 11:
    var $bestdist_128;
    var $15 = HEAP32[5243144 >> 2];
    var $inc14 = $15 + 1 | 0;
    HEAP32[5243144 >> 2] = $inc14;
    var $call = _qh_nearvertex($upperfacet, $point, $dist);
    _qh_vertexneighbors();
    var $neighbors15 = $call + 12 | 0;
    var $16 = HEAP32[$neighbors15 >> 2];
    var $tobool16 = ($16 | 0) == 0;
    if ($tobool16) {
      var $bestdist_333 = $bestdist_128;
      label = 20;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p21 = $16 + 4 | 0;
    var $17 = HEAP32[$p21 >> 2];
    var $tobool243953 = ($17 | 0) == 0;
    if ($tobool243953) {
      var $bestdist_333 = $bestdist_128;
      label = 20;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $18 = $17;
    var $incdec_ptr23385270 = $p21 + 4 | 0;
    var $incdec_ptr233852 = $incdec_ptr23385270;
    var $bestfacet_2_ph54 = 0;
    var $bestdist_2_ph55 = $bestdist_128;
    var $incdec_ptr233856 = $incdec_ptr233852;
    var $19 = $18;
    label = 14;
    break;
   case 14:
    var $19;
    var $incdec_ptr233856;
    var $bestdist_2_ph55;
    var $bestfacet_2_ph54;
    var $incdec_ptr2340 = $incdec_ptr233856;
    var $20 = $19;
    label = 15;
    break;
   case 15:
    var $20;
    var $incdec_ptr2340;
    var $21 = $20 + 76 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 & 196608;
    var $25 = ($24 | 0) == 0;
    if ($25) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $26 = HEAP32[$numpart >> 2];
    var $inc35 = $26 + 1 | 0;
    HEAP32[$numpart >> 2] = $inc35;
    _qh_distplane($point, $20, $dist);
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp36 = $27 > $bestdist_2_ph55;
    if ($cmp36) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $incdec_ptr23 = $incdec_ptr2340 + 4 | 0;
    var $28 = HEAP32[$incdec_ptr2340 >> 2];
    var $tobool24 = ($28 | 0) == 0;
    if ($tobool24) {
      var $bestfacet_2_ph49 = $bestfacet_2_ph54;
      var $bestdist_2_ph51 = $bestdist_2_ph55;
      label = 19;
      break;
    } else {
      var $incdec_ptr2340 = $incdec_ptr23;
      var $20 = $28;
      label = 15;
      break;
    }
   case 18:
    var $incdec_ptr2338 = $incdec_ptr2340 + 4 | 0;
    var $29 = HEAP32[$incdec_ptr2340 >> 2];
    var $tobool2439 = ($29 | 0) == 0;
    if ($tobool2439) {
      var $bestfacet_2_ph49 = $20;
      var $bestdist_2_ph51 = $27;
      label = 19;
      break;
    } else {
      var $bestfacet_2_ph54 = $20;
      var $bestdist_2_ph55 = $27;
      var $incdec_ptr233856 = $incdec_ptr2338;
      var $19 = $29;
      label = 14;
      break;
    }
   case 19:
    var $bestdist_2_ph51;
    var $bestfacet_2_ph49;
    var $tobool42 = ($bestfacet_2_ph49 | 0) == 0;
    if ($tobool42) {
      var $bestdist_333 = $bestdist_2_ph51;
      label = 20;
      break;
    } else {
      var $bestfacet_330 = $bestfacet_2_ph49;
      var $bestdist_332 = $bestdist_2_ph51;
      label = 21;
      break;
    }
   case 20:
    var $bestdist_333;
    _qh_fprintf(5253992);
    _qh_errexit(5, $upperfacet, 0);
    var $bestfacet_330 = 0;
    var $bestdist_332 = $bestdist_333;
    label = 21;
    break;
   case 21:
    var $bestdist_332;
    var $bestfacet_330;
    HEAPF64[tempDoublePtr >> 3] = $bestdist_332, HEAP32[$bestdistp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdistp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $30 = HEAP32[5247036 >> 2];
    var $cmp45 = ($30 | 0) > 2;
    if ($cmp45) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _qh_fprintf(5253708);
    label = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return $bestfacet_330;
  }
}
_qh_findbestlower["X"] = 1;
function _qh_nearvertex($facet, $point, $bestdistp) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $0 = HEAP32[5247504 >> 2];
    var $1 = HEAP32[5246996 >> 2];
    var $not_tobool = ($1 | 0) != 0;
    var $dec = $not_tobool << 31 >> 31;
    var $dim_0 = $0 + $dec | 0;
    var $2 = $facet + 76 | 0;
    var $3 = $2;
    var $4 = HEAP32[$3 >> 2];
    var $bf_clear = $4 & 512;
    var $tobool1 = ($bf_clear | 0) == 0;
    if ($tobool1) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = HEAP32[5248576 >> 2];
    var $tobool3 = ($5 | 0) == 0;
    var $center9_pre_pre = $facet + 36 | 0;
    if ($tobool3) {
      var $center9_pre_pre_phi = $center9_pre_pre;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[$center9_pre_pre >> 2];
    var $tobool5 = ($6 | 0) == 0;
    if ($tobool5) {
      var $center9_pre_pre_phi = $center9_pre_pre;
      label = 5;
      break;
    } else {
      var $center9_pre_phi = $center9_pre_pre;
      label = 6;
      break;
    }
   case 5:
    var $center9_pre_pre_phi;
    _qh_fprintf(5297260);
    _qh_errexit(5, $facet, 0);
    var $center9_pre_phi = $center9_pre_pre_phi;
    label = 6;
    break;
   case 6:
    var $center9_pre_phi;
    var $7 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($7);
    HEAP32[$vertices >> 2] = $call;
    var $vertices8 = $facet + 48 | 0;
    var $8 = HEAP32[$vertices8 >> 2];
    var $p = $8 + 4 | 0;
    var $9 = HEAP32[$p >> 2];
    var $10 = HEAP32[$center9_pre_phi >> 2];
    var $neighbors = $9 + 12 | 0;
    var $11 = $neighbors;
    var $12 = HEAP32[$11 >> 2];
    var $tobool10 = ($12 | 0) == 0;
    if ($tobool10) {
      var $26 = $call;
      label = 17;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p15 = $12 + 4 | 0;
    var $13 = HEAP32[$p15 >> 2];
    var $tobool1625 = ($13 | 0) == 0;
    if ($tobool1625) {
      var $26 = $call;
      label = 17;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $14 = $13;
    var $incdec_ptr2427 = $p15 + 4 | 0;
    var $incdec_ptr24 = $incdec_ptr2427;
    var $incdec_ptr26 = $incdec_ptr24;
    var $15 = $14;
    label = 9;
    break;
   case 9:
    var $15;
    var $incdec_ptr26;
    var $center17 = $15 + 36 | 0;
    var $16 = HEAP32[$center17 >> 2];
    var $cmp = ($16 | 0) == ($10 | 0);
    if ($cmp) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $incdec_ptr = $incdec_ptr26 + 4 | 0;
    var $17 = HEAP32[$incdec_ptr26 >> 2];
    var $tobool16 = ($17 | 0) == 0;
    if ($tobool16) {
      label = 16;
      break;
    } else {
      var $incdec_ptr26 = $incdec_ptr;
      var $15 = $17;
      label = 9;
      break;
    }
   case 11:
    var $vertices19 = $15 + 48 | 0;
    var $18 = HEAP32[$vertices19 >> 2];
    var $tobool20 = ($18 | 0) == 0;
    if ($tobool20) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $p25 = $18 + 4 | 0;
    var $19 = HEAP32[$p25 >> 2];
    var $tobool2822 = ($19 | 0) == 0;
    if ($tobool2822) {
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $20 = $19;
    var $21 = $p25;
    var $vertexp_023 = $21;
    var $22 = $20;
    label = 14;
    break;
   case 14:
    var $22;
    var $vertexp_023;
    var $incdec_ptr27 = $vertexp_023 + 4 | 0;
    var $23 = $22;
    _qh_setappend($vertices, $23);
    var $24 = HEAP32[$incdec_ptr27 >> 2];
    var $tobool28 = ($24 | 0) == 0;
    if ($tobool28) {
      label = 10;
      break;
    } else {
      var $vertexp_023 = $incdec_ptr27;
      var $22 = $24;
      label = 14;
      break;
    }
   case 15:
    var $vertices34 = $facet + 48 | 0;
    var $25 = HEAP32[$vertices34 >> 2];
    HEAP32[$vertices >> 2] = $25;
    var $26 = $25;
    label = 17;
    break;
   case 16:
    var $_pr_pre = HEAP32[$vertices >> 2];
    var $26 = $_pr_pre;
    label = 17;
    break;
   case 17:
    var $26;
    var $tobool36 = ($26 | 0) == 0;
    if ($tobool36) {
      var $bestdist_1 = 1.7976931348623157e+308;
      var $bestvertex_1 = 0;
      label = 22;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $p40 = $26 + 4 | 0;
    var $27 = $p40;
    var $sub = -$dim_0 | 0;
    var $bestdist_0_ph = 1.7976931348623157e+308;
    var $bestvertex_0_ph = 0;
    var $vertexp_1_ph = $27;
    label = 19;
    break;
   case 19:
    var $vertexp_1_ph;
    var $bestvertex_0_ph;
    var $bestdist_0_ph;
    var $vertexp_1 = $vertexp_1_ph;
    label = 20;
    break;
   case 20:
    var $vertexp_1;
    var $incdec_ptr42 = $vertexp_1 + 4 | 0;
    var $28 = HEAP32[$vertexp_1 >> 2];
    var $tobool43 = ($28 | 0) == 0;
    if ($tobool43) {
      var $bestdist_1 = $bestdist_0_ph;
      var $bestvertex_1 = $bestvertex_0_ph;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $point45 = $28 + 8 | 0;
    var $29 = HEAP32[$point45 >> 2];
    var $call46 = _qh_pointdist($29, $point, $sub);
    var $cmp47 = $call46 < $bestdist_0_ph;
    if ($cmp47) {
      var $bestdist_0_ph = $call46;
      var $bestvertex_0_ph = $28;
      var $vertexp_1_ph = $incdec_ptr42;
      label = 19;
      break;
    } else {
      var $vertexp_1 = $incdec_ptr42;
      label = 20;
      break;
    }
   case 22:
    var $bestvertex_1;
    var $bestdist_1;
    var $30 = HEAP32[$3 >> 2];
    var $bf_clear53 = $30 & 512;
    var $tobool54 = ($bf_clear53 | 0) == 0;
    if ($tobool54) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    _qh_settempfree($vertices);
    label = 24;
    break;
   case 24:
    var $call57 = Math.sqrt($bestdist_1);
    HEAPF64[tempDoublePtr >> 3] = $call57, HEAP32[$bestdistp >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$bestdistp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $31 = HEAP32[5247036 >> 2];
    var $cmp58 = ($31 | 0) > 2;
    if ($cmp58) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _qh_fprintf(5296912);
    label = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return $bestvertex_1;
  }
}
_qh_nearvertex["X"] = 1;
function _qh_vertexneighbors() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5248576 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 19;
      break;
    }
   case 3:
    var $1 = HEAP32[5247036 >> 2];
    var $cmp = ($1 | 0) > 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5291480);
    label = 5;
    break;
   case 5:
    var $2 = HEAP32[5249156 >> 2];
    var $inc = $2 + 1 | 0;
    var $bf_value = $inc & 2147483647;
    var $3 = $2 & -2147483648;
    var $4 = $bf_value | $3;
    HEAP32[5249156 >> 2] = $4;
    var $facet_013 = HEAP32[5248940 >> 2];
    var $tobool314 = ($facet_013 | 0) == 0;
    if ($tobool314) {
      label = 18;
      break;
    } else {
      var $facet_015 = $facet_013;
      label = 6;
      break;
    }
   case 6:
    var $facet_015;
    var $next = $facet_015 + 44 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool4 = ($5 | 0) == 0;
    if ($tobool4) {
      label = 18;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $6 = $facet_015;
    var $7 = $facet_015 + 76 | 0;
    var $8 = $7;
    var $9 = HEAP32[$8 >> 2];
    var $bf_clear5 = $9 & 2048;
    var $tobool6 = ($bf_clear5 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      var $facet_015 = $5;
      label = 6;
      break;
    }
   case 8:
    var $vertices = $facet_015 + 48 | 0;
    var $10 = HEAP32[$vertices >> 2];
    var $tobool9 = ($10 | 0) == 0;
    if ($tobool9) {
      var $facet_0 = $5;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $facet_0_pre = HEAP32[$next >> 2];
    var $facet_0 = $facet_0_pre;
    label = 10;
    break;
   case 10:
    var $facet_0;
    var $tobool3 = ($facet_0 | 0) == 0;
    if ($tobool3) {
      label = 18;
      break;
    } else {
      var $facet_015 = $facet_0;
      label = 6;
      break;
    }
   case 11:
    var $p = $10 + 4 | 0;
    var $11 = HEAP32[$p >> 2];
    var $tobool1311 = ($11 | 0) == 0;
    if ($tobool1311) {
      var $facet_0 = $5;
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $12 = $11;
    var $incdec_ptr1016 = $p + 4 | 0;
    var $incdec_ptr10 = $incdec_ptr1016;
    var $incdec_ptr12 = $incdec_ptr10;
    var $13 = $12;
    label = 13;
    break;
   case 13:
    var $13;
    var $incdec_ptr12;
    var $14 = $13 + 16 | 0;
    var $15 = $14;
    var $16 = HEAP32[$15 >> 2];
    var $bf_clear16 = $16 & 2147483647;
    var $17 = HEAP32[5249156 >> 2];
    var $bf_clear17 = $17 & 2147483647;
    var $cmp18 = ($bf_clear16 | 0) == ($bf_clear17 | 0);
    if ($cmp18) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $neighbors24_pre = $13 + 12 | 0;
    var $neighbors24_pre_phi = $neighbors24_pre;
    label = 16;
    break;
   case 15:
    var $18 = $16 & -2147483648;
    var $19 = $bf_clear17 | $18;
    HEAP32[$15 >> 2] = $19;
    var $20 = HEAP32[5247504 >> 2];
    var $call = _qh_setnew($20);
    var $neighbors = $13 + 12 | 0;
    HEAP32[$neighbors >> 2] = $call;
    var $neighbors24_pre_phi = $neighbors;
    label = 16;
    break;
   case 16:
    var $neighbors24_pre_phi;
    _qh_setappend($neighbors24_pre_phi, $6);
    var $21 = HEAP32[$incdec_ptr12 >> 2];
    var $tobool13 = ($21 | 0) == 0;
    if ($tobool13) {
      label = 9;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $incdec_ptr = $incdec_ptr12 + 4 | 0;
    var $incdec_ptr12 = $incdec_ptr;
    var $13 = $21;
    label = 13;
    break;
   case 18:
    HEAP32[5248576 >> 2] = 1;
    label = 19;
    break;
   case 19:
    return;
  }
}
_qh_vertexneighbors["X"] = 1;
function _qh_isvertex($point, $vertices) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($vertices | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $vertices + 4 | 0;
    var $0 = $p;
    var $vertexp_0 = $0;
    label = 4;
    break;
   case 4:
    var $vertexp_0;
    var $1 = HEAP32[$vertexp_0 >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $incdec_ptr = $vertexp_0 + 4 | 0;
    var $point2 = $1 + 8 | 0;
    var $2 = HEAP32[$point2 >> 2];
    var $cmp = ($2 | 0) == ($point | 0);
    if ($cmp) {
      var $retval_0 = $1;
      label = 6;
      break;
    } else {
      var $vertexp_0 = $incdec_ptr;
      label = 4;
      break;
    }
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_findgood($facetlist, $goodhorizon) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $angle = __stackBase__;
    var $dist = __stackBase__ + 8;
    var $tobool = ($facetlist | 0) != 0;
    if ($tobool) {
      var $facet_076 = $facetlist;
      var $numgood_077 = 0;
      label = 3;
      break;
    } else {
      var $numgood_2 = 0;
      label = 5;
      break;
    }
   case 3:
    var $numgood_077;
    var $facet_076;
    var $next = $facet_076 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      var $numgood_2 = $numgood_077;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = $facet_076 + 76 | 0;
    var $2 = $1;
    var $3 = HEAP32[$2 >> 2];
    var $bf_clear = $3 >>> 19;
    var $bf_clear_lobit = $bf_clear & 1;
    var $numgood_0_inc = $bf_clear_lobit + $numgood_077 | 0;
    var $facet_076 = $0;
    var $numgood_077 = $numgood_0_inc;
    label = 3;
    break;
   case 5:
    var $numgood_2;
    var $4 = HEAP32[5247024 >> 2];
    var $cmp = ($4 | 0) < 1;
    var $5 = HEAP32[5247080 >> 2];
    var $tobool7 = ($5 | 0) != 0;
    var $or_cond = $cmp | $tobool7;
    var $tobool_not = $tobool ^ 1;
    var $brmerge = $or_cond | $tobool_not;
    var $tobool1271 = ($facetlist | 0) == 0;
    var $or_cond85 = $brmerge | $tobool1271;
    if ($or_cond85) {
      var $numgood_5 = $numgood_2;
      label = 9;
      break;
    } else {
      var $facet_172 = $facetlist;
      var $numgood_373 = $numgood_2;
      label = 6;
      break;
    }
   case 6:
    var $numgood_373;
    var $facet_172;
    var $next14 = $facet_172 + 44 | 0;
    var $6 = HEAP32[$next14 >> 2];
    var $tobool15 = ($6 | 0) == 0;
    if ($tobool15) {
      var $numgood_5 = $numgood_373;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $7 = HEAP32[5247028 >> 2];
    var $vertices = $facet_172 + 48 | 0;
    var $8 = HEAP32[$vertices >> 2];
    var $call = _qh_isvertex($7, $8);
    var $tobool18 = ($call | 0) == 0;
    if ($tobool18) {
      label = 8;
      break;
    } else {
      var $facet_172 = $6;
      var $numgood_373 = $numgood_373;
      label = 6;
      break;
    }
   case 8:
    var $9 = $facet_172 + 76 | 0;
    var $10 = $9;
    var $11 = HEAP32[$10 >> 2];
    var $12 = $11 & -524289;
    HEAP32[$10 >> 2] = $12;
    var $dec = $numgood_373 - 1 | 0;
    var $facet_172 = $6;
    var $numgood_373 = $dec;
    label = 6;
    break;
   case 9:
    var $numgood_5;
    var $13 = HEAP32[5247012 >> 2];
    var $tobool27 = ($13 | 0) == 0;
    var $tobool29 = ($numgood_5 | 0) == 0;
    var $or_cond57 = $tobool27 | $tobool29;
    var $brmerge59 = $or_cond57 | $tobool_not;
    var $or_cond86 = $brmerge59 | $tobool1271;
    if ($or_cond86) {
      var $numgood_8 = $numgood_5;
      label = 16;
      break;
    } else {
      var $facet_268 = $facetlist;
      var $numgood_669 = $numgood_5;
      label = 10;
      break;
    }
   case 10:
    var $numgood_669;
    var $facet_268;
    var $next36 = $facet_268 + 44 | 0;
    var $14 = HEAP32[$next36 >> 2];
    var $tobool37 = ($14 | 0) == 0;
    if ($tobool37) {
      var $numgood_8 = $numgood_669;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $15 = $facet_268 + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $bf_clear41 = $17 & 524288;
    var $tobool42 = ($bf_clear41 | 0) == 0;
    if ($tobool42) {
      var $numgood_7 = $numgood_669;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $normal = $facet_268 + 24 | 0;
    var $18 = HEAP32[$normal >> 2];
    var $tobool44 = ($18 | 0) == 0;
    if ($tobool44) {
      var $numgood_7 = $numgood_669;
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $19 = HEAP32[5243416 >> 2];
    var $inc46 = $19 + 1 | 0;
    HEAP32[5243416 >> 2] = $inc46;
    var $20 = HEAP32[5247016 >> 2];
    _qh_distplane($20, $facet_268, $dist);
    var $21 = HEAP32[5247012 >> 2];
    var $cmp47 = ($21 | 0) > 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp48 = $22 > 0;
    var $xor56 = $cmp47 ^ $cmp48;
    if ($xor56) {
      label = 14;
      break;
    } else {
      var $numgood_7 = $numgood_669;
      label = 15;
      break;
    }
   case 14:
    var $23 = HEAP32[$16 >> 2];
    var $24 = $23 & -524289;
    HEAP32[$16 >> 2] = $24;
    var $dec53 = $numgood_669 - 1 | 0;
    var $numgood_7 = $dec53;
    label = 15;
    break;
   case 15:
    var $numgood_7;
    var $25 = HEAP32[$next36 >> 2];
    var $tobool34 = ($25 | 0) == 0;
    if ($tobool34) {
      var $numgood_8 = $numgood_7;
      label = 16;
      break;
    } else {
      var $facet_268 = $25;
      var $numgood_669 = $numgood_7;
      label = 10;
      break;
    }
   case 16:
    var $numgood_8;
    var $26 = HEAP32[5247020 >> 2];
    var $tobool61 = ($26 | 0) == 0;
    if ($tobool61) {
      var $numgood_12 = $numgood_8;
      label = 42;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $tobool63 = ($numgood_8 | 0) == 0;
    if ($tobool63) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $tobool64 = ($goodhorizon | 0) != 0;
    var $27 = HEAP32[5249040 >> 2];
    var $tobool66 = ($27 | 0) != 0;
    var $or_cond1 = $tobool64 | $tobool66;
    if ($or_cond1) {
      label = 19;
      break;
    } else {
      var $numgood_12 = 0;
      label = 42;
      break;
    }
   case 19:
    if ($tobool) {
      var $facet_361 = $facetlist;
      var $bestfacet_062 = 0;
      var $bestangle_063 = 1.7976931348623157e+308;
      var $numgood_964 = $numgood_8;
      label = 20;
      break;
    } else {
      var $numgood_11 = $numgood_8;
      var $bestangle_2 = 1.7976931348623157e+308;
      var $bestfacet_2 = 0;
      label = 27;
      break;
    }
   case 20:
    var $numgood_964;
    var $bestangle_063;
    var $bestfacet_062;
    var $facet_361;
    var $next73 = $facet_361 + 44 | 0;
    var $28 = HEAP32[$next73 >> 2];
    var $tobool74 = ($28 | 0) == 0;
    if ($tobool74) {
      var $numgood_11 = $numgood_964;
      var $bestangle_2 = $bestangle_063;
      var $bestfacet_2 = $bestfacet_062;
      label = 27;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $29 = $facet_361 + 76 | 0;
    var $30 = $29;
    var $31 = HEAP32[$30 >> 2];
    var $bf_clear78 = $31 & 524288;
    var $tobool79 = ($bf_clear78 | 0) == 0;
    if ($tobool79) {
      var $numgood_10 = $numgood_964;
      var $bestangle_1 = $bestangle_063;
      var $bestfacet_1 = $bestfacet_062;
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $normal81 = $facet_361 + 24 | 0;
    var $32 = HEAP32[$normal81 >> 2];
    var $tobool82 = ($32 | 0) == 0;
    if ($tobool82) {
      var $numgood_10 = $numgood_964;
      var $bestangle_1 = $bestangle_063;
      var $bestfacet_1 = $bestfacet_062;
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $call85 = _qh_inthresholds($32, $angle);
    var $tobool86 = ($call85 | 0) == 0;
    if ($tobool86) {
      label = 24;
      break;
    } else {
      var $numgood_10 = $numgood_964;
      var $bestangle_1 = $bestangle_063;
      var $bestfacet_1 = $bestfacet_062;
      label = 26;
      break;
    }
   case 24:
    var $33 = HEAP32[$30 >> 2];
    var $34 = $33 & -524289;
    HEAP32[$30 >> 2] = $34;
    var $dec89 = $numgood_964 - 1 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp90 = $35 < $bestangle_063;
    if ($cmp90) {
      label = 25;
      break;
    } else {
      var $numgood_10 = $dec89;
      var $bestangle_1 = $bestangle_063;
      var $bestfacet_1 = $bestfacet_062;
      label = 26;
      break;
    }
   case 25:
    var $numgood_10 = $dec89;
    var $bestangle_1 = $35;
    var $bestfacet_1 = $facet_361;
    label = 26;
    break;
   case 26:
    var $bestfacet_1;
    var $bestangle_1;
    var $numgood_10;
    var $36 = HEAP32[$next73 >> 2];
    var $tobool71 = ($36 | 0) == 0;
    if ($tobool71) {
      var $numgood_11 = $numgood_10;
      var $bestangle_2 = $bestangle_1;
      var $bestfacet_2 = $bestfacet_1;
      label = 27;
      break;
    } else {
      var $facet_361 = $36;
      var $bestfacet_062 = $bestfacet_1;
      var $bestangle_063 = $bestangle_1;
      var $numgood_964 = $numgood_10;
      label = 20;
      break;
    }
   case 27:
    var $bestfacet_2;
    var $bestangle_2;
    var $numgood_11;
    var $tobool100 = ($numgood_11 | 0) == 0;
    if ($tobool100) {
      label = 28;
      break;
    } else {
      label = 40;
      break;
    }
   case 28:
    var $tobool102 = ($goodhorizon | 0) == 0;
    var $37 = HEAP32[5249040 >> 2];
    var $tobool104 = ($37 | 0) != 0;
    var $or_cond2 = $tobool102 | $tobool104;
    if ($or_cond2) {
      label = 29;
      break;
    } else {
      var $numgood_12 = $numgood_11;
      label = 42;
      break;
    }
   case 29:
    if ($tobool104) {
      label = 30;
      break;
    } else {
      var $bestfacet_3 = $bestfacet_2;
      label = 34;
      break;
    }
   case 30:
    var $38 = $37 + 76 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $bf_clear109 = $40 & 2048;
    var $tobool110 = ($bf_clear109 | 0) == 0;
    if ($tobool110) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    HEAP32[5249040 >> 2] = 0;
    var $bestfacet_3 = $bestfacet_2;
    label = 34;
    break;
   case 32:
    var $normal112 = $37 + 24 | 0;
    var $41 = HEAP32[$normal112 >> 2];
    var $call113 = _qh_inthresholds($41, $angle);
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp114 = $42 < $bestangle_2;
    if ($cmp114) {
      label = 33;
      break;
    } else {
      var $bestfacet_3 = $bestfacet_2;
      label = 34;
      break;
    }
   case 33:
    var $43 = HEAP32[5249040 >> 2];
    var $bestfacet_3 = $43;
    label = 34;
    break;
   case 34:
    var $bestfacet_3;
    var $tobool120 = ($bestfacet_3 | 0) == 0;
    if ($tobool120) {
      var $numgood_12 = 0;
      label = 42;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $44 = HEAP32[5249040 >> 2];
    var $cmp122 = ($bestfacet_3 | 0) == ($44 | 0);
    if ($cmp122) {
      var $numgood_12 = 0;
      label = 42;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $tobool125 = ($44 | 0) == 0;
    if ($tobool125) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $45 = $44 + 76 | 0;
    var $46 = $45;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 & -524289;
    HEAP32[$46 >> 2] = $48;
    label = 38;
    break;
   case 38:
    HEAP32[5249040 >> 2] = $bestfacet_3;
    var $49 = $bestfacet_3 + 76 | 0;
    var $50 = $49;
    var $51 = HEAP32[$50 >> 2];
    var $52 = $51 | 524288;
    HEAP32[$50 >> 2] = $52;
    var $53 = HEAP32[5247036 >> 2];
    var $cmp131 = ($53 | 0) > 1;
    if ($cmp131) {
      label = 39;
      break;
    } else {
      var $retval_0 = 1;
      label = 45;
      break;
    }
   case 39:
    _qh_fprintf(5253212);
    var $retval_0 = 1;
    label = 45;
    break;
   case 40:
    var $_pr = HEAP32[5249040 >> 2];
    var $tobool137 = ($_pr | 0) == 0;
    if ($tobool137) {
      var $numgood_12 = $numgood_11;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $54 = $_pr + 76 | 0;
    var $55 = $54;
    var $56 = HEAP32[$55 >> 2];
    var $57 = $56 & -524289;
    HEAP32[$55 >> 2] = $57;
    HEAP32[5249040 >> 2] = 0;
    var $numgood_12 = $numgood_11;
    label = 42;
    break;
   case 42:
    var $numgood_12;
    var $58 = HEAP32[5243776 >> 2];
    var $add = $58 + $numgood_12 | 0;
    HEAP32[5243776 >> 2] = $add;
    var $59 = HEAP32[5247036 >> 2];
    var $cmp143 = ($59 | 0) > 1;
    if ($cmp143) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _qh_fprintf(5253040);
    label = 44;
    break;
   case 44:
    var $60 = HEAP32[5247024 >> 2];
    var $notlhs = ($numgood_12 | 0) != 0;
    var $notrhs = ($60 | 0) < 1;
    var $or_cond3_not = $notrhs | $notlhs;
    var $61 = HEAP32[5247080 >> 2];
    var $tobool152 = ($61 | 0) != 0;
    var $or_cond4 = $or_cond3_not | $tobool152;
    var $numgood_12_goodhorizon = $or_cond4 ? $numgood_12 : $goodhorizon;
    var $retval_0 = $numgood_12_goodhorizon;
    label = 45;
    break;
   case 45:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_qh_findgood["X"] = 1;
function _qh_findgood_all($facetlist) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $angle = __stackBase__;
    var $0 = HEAP32[5247024 >> 2];
    var $1 = HEAP32[5247020 >> 2];
    var $2 = $1 | $0;
    var $3 = HEAP32[5247012 >> 2];
    var $4 = $2 | $3;
    var $5 = HEAP32[5247404 >> 2];
    var $6 = $4 | $5;
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 35;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $8 = HEAP32[5247124 >> 2];
    var $tobool6 = ($8 | 0) == 0;
    if ($tobool6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $9 = HEAP32[5248940 >> 2];
    var $call = _qh_findgood($9, 0);
    label = 5;
    break;
   case 5:
    var $tobool9 = ($facetlist | 0) != 0;
    if ($tobool9) {
      var $numgood_056 = 0;
      var $facet_057 = $facetlist;
      label = 6;
      break;
    } else {
      var $numgood_2 = 0;
      label = 8;
      break;
    }
   case 6:
    var $facet_057;
    var $numgood_056;
    var $next = $facet_057 + 44 | 0;
    var $10 = HEAP32[$next >> 2];
    var $tobool12 = ($10 | 0) == 0;
    if ($tobool12) {
      var $numgood_2 = $numgood_056;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $11 = $facet_057 + 76 | 0;
    var $12 = $11;
    var $13 = HEAP32[$12 >> 2];
    var $bf_clear = $13 >>> 19;
    var $bf_clear_lobit = $bf_clear & 1;
    var $numgood_0_inc = $bf_clear_lobit + $numgood_056 | 0;
    var $numgood_056 = $numgood_0_inc;
    var $facet_057 = $10;
    label = 6;
    break;
   case 8:
    var $numgood_2;
    var $14 = HEAP32[5247024 >> 2];
    var $cmp = ($14 | 0) < 0;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $15 = HEAP32[5247080 >> 2];
    var $notlhs = ($14 | 0) < 1;
    var $notrhs = ($15 | 0) == 0;
    var $or_cond3_not = $notrhs | $notlhs;
    var $tobool9_not = $tobool9 ^ 1;
    var $brmerge = $or_cond3_not | $tobool9_not;
    var $tobool2551 = ($facetlist | 0) == 0;
    var $or_cond75 = $brmerge | $tobool2551;
    if ($or_cond75) {
      var $numgood_5 = $numgood_2;
      var $tobool9_not40_pre_phi = $tobool9_not;
      label = 23;
      break;
    } else {
      var $numgood_352 = $numgood_2;
      var $facet_153 = $facetlist;
      label = 11;
      break;
    }
   case 10:
    if ($tobool9) {
      var $numgood_352 = $numgood_2;
      var $facet_153 = $facetlist;
      label = 11;
      break;
    } else {
      var $numgood_9 = $numgood_2;
      label = 33;
      break;
    }
   case 11:
    var $facet_153;
    var $numgood_352;
    var $next27 = $facet_153 + 44 | 0;
    var $16 = HEAP32[$next27 >> 2];
    var $tobool28 = ($16 | 0) == 0;
    if ($tobool28) {
      var $numgood_5_ph = $numgood_352;
      label = 22;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $17 = $facet_153 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $bf_clear32 = $19 & 524288;
    var $tobool33 = ($bf_clear32 | 0) == 0;
    if ($tobool33) {
      var $numgood_352 = $numgood_352;
      var $facet_153 = $16;
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $20 = HEAP32[5247024 >> 2];
    var $cmp35 = ($20 | 0) > 0;
    var $21 = HEAP32[5247028 >> 2];
    var $vertices = $facet_153 + 48 | 0;
    var $22 = HEAP32[$vertices >> 2];
    var $call36 = _qh_isvertex($21, $22);
    var $tobool37 = ($call36 | 0) != 0;
    var $xor36 = $cmp35 ^ $tobool37;
    if ($xor36) {
      label = 14;
      break;
    } else {
      var $numgood_4 = $numgood_352;
      var $26 = $16;
      label = 21;
      break;
    }
   case 14:
    var $dec = $numgood_352 - 1 | 0;
    var $tobool41 = ($dec | 0) == 0;
    if ($tobool41) {
      label = 15;
      break;
    } else {
      label = 20;
      break;
    }
   case 15:
    var $23 = HEAP32[5247124 >> 2];
    var $tobool43 = ($23 | 0) == 0;
    if ($tobool43) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _qh_fprintf(5252784);
    label = 35;
    break;
   case 17:
    if ($cmp35) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    _qh_fprintf(5252504);
    label = 20;
    break;
   case 19:
    _qh_fprintf(5252280);
    label = 20;
    break;
   case 20:
    var $24 = HEAP32[$18 >> 2];
    var $25 = $24 & -524289;
    HEAP32[$18 >> 2] = $25;
    var $_pre = HEAP32[$next27 >> 2];
    var $numgood_4 = $dec;
    var $26 = $_pre;
    label = 21;
    break;
   case 21:
    var $26;
    var $numgood_4;
    var $tobool25 = ($26 | 0) == 0;
    if ($tobool25) {
      var $numgood_5_ph = $numgood_4;
      label = 22;
      break;
    } else {
      var $numgood_352 = $numgood_4;
      var $facet_153 = $26;
      label = 11;
      break;
    }
   case 22:
    var $numgood_5_ph;
    var $tobool9_not40_pre = $tobool9 ^ 1;
    var $numgood_5 = $numgood_5_ph;
    var $tobool9_not40_pre_phi = $tobool9_not40_pre;
    label = 23;
    break;
   case 23:
    var $tobool9_not40_pre_phi;
    var $numgood_5;
    var $27 = HEAP32[5247404 >> 2];
    var $tobool65 = ($27 | 0) == 0;
    var $brmerge41 = $tobool65 | $tobool9_not40_pre_phi;
    var $tobool7042 = ($facetlist | 0) == 0;
    var $or_cond76 = $brmerge41 | $tobool7042;
    if ($or_cond76) {
      var $numgood_9 = $numgood_5;
      label = 33;
      break;
    } else {
      var $bestfacet_043 = 0;
      var $bestangle_044 = 1.7976931348623157e+308;
      var $numgood_645 = $numgood_5;
      var $facet_246 = $facetlist;
      label = 24;
      break;
    }
   case 24:
    var $facet_246;
    var $numgood_645;
    var $bestangle_044;
    var $bestfacet_043;
    var $next72 = $facet_246 + 44 | 0;
    var $28 = HEAP32[$next72 >> 2];
    var $tobool73 = ($28 | 0) == 0;
    if ($tobool73) {
      var $bestfacet_0_lcssa = $bestfacet_043;
      var $numgood_6_lcssa = $numgood_645;
      label = 30;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $29 = $facet_246 + 76 | 0;
    var $30 = $29;
    var $31 = HEAP32[$30 >> 2];
    var $bf_clear77 = $31 & 524288;
    var $tobool78 = ($bf_clear77 | 0) == 0;
    if ($tobool78) {
      var $numgood_7 = $numgood_645;
      var $bestangle_1 = $bestangle_044;
      var $bestfacet_1 = $bestfacet_043;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $normal = $facet_246 + 24 | 0;
    var $32 = HEAP32[$normal >> 2];
    var $call80 = _qh_inthresholds($32, $angle);
    var $tobool81 = ($call80 | 0) == 0;
    if ($tobool81) {
      label = 27;
      break;
    } else {
      var $numgood_7 = $numgood_645;
      var $bestangle_1 = $bestangle_044;
      var $bestfacet_1 = $bestfacet_043;
      label = 29;
      break;
    }
   case 27:
    var $33 = HEAP32[$30 >> 2];
    var $34 = $33 & -524289;
    HEAP32[$30 >> 2] = $34;
    var $dec84 = $numgood_645 - 1 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$angle >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$angle + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp85 = $35 < $bestangle_044;
    if ($cmp85) {
      label = 28;
      break;
    } else {
      var $numgood_7 = $dec84;
      var $bestangle_1 = $bestangle_044;
      var $bestfacet_1 = $bestfacet_043;
      label = 29;
      break;
    }
   case 28:
    var $numgood_7 = $dec84;
    var $bestangle_1 = $35;
    var $bestfacet_1 = $facet_246;
    label = 29;
    break;
   case 29:
    var $bestfacet_1;
    var $bestangle_1;
    var $numgood_7;
    var $36 = HEAP32[$next72 >> 2];
    var $tobool70 = ($36 | 0) == 0;
    if ($tobool70) {
      var $bestfacet_0_lcssa = $bestfacet_1;
      var $numgood_6_lcssa = $numgood_7;
      label = 30;
      break;
    } else {
      var $bestfacet_043 = $bestfacet_1;
      var $bestangle_044 = $bestangle_1;
      var $numgood_645 = $numgood_7;
      var $facet_246 = $36;
      label = 24;
      break;
    }
   case 30:
    var $numgood_6_lcssa;
    var $bestfacet_0_lcssa;
    var $tobool95 = ($numgood_6_lcssa | 0) != 0;
    var $tobool97 = ($bestfacet_0_lcssa | 0) == 0;
    var $or_cond = $tobool95 | $tobool97;
    if ($or_cond) {
      var $numgood_9 = $numgood_6_lcssa;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $37 = $bestfacet_0_lcssa + 76 | 0;
    var $38 = $37;
    var $39 = HEAP32[$38 >> 2];
    var $40 = $39 | 524288;
    HEAP32[$38 >> 2] = $40;
    var $41 = HEAP32[5247036 >> 2];
    var $tobool101 = ($41 | 0) == 0;
    if ($tobool101) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _qh_fprintf(5252104);
    label = 35;
    break;
   case 33:
    var $numgood_9;
    HEAP32[5249004 >> 2] = $numgood_9;
    var $42 = HEAP32[5247036 >> 2];
    var $tobool107 = ($42 | 0) == 0;
    if ($tobool107) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    _qh_fprintf(5251772);
    label = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_findgood_all["X"] = 1;
function _qh_furthestnext() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $facet_01221 = HEAP32[5248940 >> 2];
    var $tobool1322 = ($facet_01221 | 0) == 0;
    if ($tobool1322) {
      label = 10;
      break;
    } else {
      var $bestfacet_0_ph23 = 0;
      var $bestdist_0_ph24 = -1.7976931348623157e+308;
      var $facet_01225 = $facet_01221;
      label = 3;
      break;
    }
   case 3:
    var $facet_01225;
    var $bestdist_0_ph24;
    var $bestfacet_0_ph23;
    var $facet_014 = $facet_01225;
    label = 4;
    break;
   case 4:
    var $facet_014;
    var $next = $facet_014 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $outsideset = $facet_014 + 60 | 0;
    var $1 = HEAP32[$outsideset >> 2];
    var $tobool2 = ($1 | 0) == 0;
    if ($tobool2) {
      var $facet_014 = $0;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $furthestdist = $facet_014 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$furthestdist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$furthestdist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $2 > $bestdist_0_ph24;
    if ($cmp) {
      var $bestfacet_0_ph23 = $facet_014;
      var $bestdist_0_ph24 = $2;
      var $facet_01225 = $0;
      label = 3;
      break;
    } else {
      var $facet_014 = $0;
      label = 4;
      break;
    }
   case 7:
    var $tobool6 = ($bestfacet_0_ph23 | 0) == 0;
    if ($tobool6) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_removefacet($bestfacet_0_ph23);
    _qh_prependfacet($bestfacet_0_ph23, 5248948);
    var $3 = HEAP32[5247036 >> 2];
    var $cmp8 = ($3 | 0) > 0;
    if ($cmp8) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _qh_fprintf(5251424);
    label = 10;
    break;
   case 10:
    return;
  }
}
function _qh_prependfacet($facet, $facetlist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5295584);
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[$facetlist >> 2];
    var $tobool2 = ($1 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      var $3 = $1;
      label = 6;
      break;
    }
   case 5:
    var $2 = HEAP32[5248944 >> 2];
    HEAP32[$facetlist >> 2] = $2;
    var $3 = $2;
    label = 6;
    break;
   case 6:
    var $3;
    var $previous = $3 + 40 | 0;
    var $4 = HEAP32[$previous >> 2];
    var $previous5 = $facet + 40 | 0;
    HEAP32[$previous5 >> 2] = $4;
    var $tobool6 = ($4 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $next = $4 + 44 | 0;
    HEAP32[$next >> 2] = $facet;
    label = 8;
    break;
   case 8:
    HEAP32[$previous >> 2] = $facet;
    var $5 = HEAP32[$facetlist >> 2];
    var $next10 = $facet + 44 | 0;
    HEAP32[$next10 >> 2] = $5;
    var $6 = HEAP32[5248940 >> 2];
    var $cmp11 = ($6 | 0) == ($3 | 0);
    if ($cmp11) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[5248940 >> 2] = $facet;
    label = 10;
    break;
   case 10:
    var $7 = HEAP32[5248948 >> 2];
    var $cmp14 = ($7 | 0) == ($3 | 0);
    if ($cmp14) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[5248948 >> 2] = $facet;
    label = 12;
    break;
   case 12:
    HEAP32[$facetlist >> 2] = $facet;
    var $8 = HEAP32[5248992 >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[5248992 >> 2] = $inc;
    return;
  }
}
function _qh_furthestout($facet) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $outsideset = $facet + 60 | 0;
    var $0 = HEAP32[$outsideset >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = $p;
    var $bestdist_0_ph = -1.7976931348623157e+308;
    var $bestpoint_0_ph = 0;
    var $pointp_0_ph = $1;
    label = 4;
    break;
   case 4:
    var $pointp_0_ph;
    var $bestpoint_0_ph;
    var $bestdist_0_ph;
    var $pointp_0 = $pointp_0_ph;
    label = 5;
    break;
   case 5:
    var $pointp_0;
    var $incdec_ptr = $pointp_0 + 4 | 0;
    var $2 = HEAP32[$pointp_0 >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_distplane($2, $facet, $dist);
    var $3 = HEAP32[5243168 >> 2];
    var $inc = $3 + 1 | 0;
    HEAP32[5243168 >> 2] = $inc;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $4 > $bestdist_0_ph;
    if ($cmp) {
      var $bestdist_0_ph = $4;
      var $bestpoint_0_ph = $2;
      var $pointp_0_ph = $incdec_ptr;
      label = 4;
      break;
    } else {
      var $pointp_0 = $incdec_ptr;
      label = 5;
      break;
    }
   case 7:
    var $tobool5 = ($bestpoint_0_ph | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $5 = HEAP32[$outsideset >> 2];
    var $call = _qh_setdel($5, 0);
    _qh_setappend($outsideset, 0);
    var $furthestdist = $facet | 0;
    HEAPF64[tempDoublePtr >> 3] = $bestdist_0_ph, HEAP32[$furthestdist >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$furthestdist + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 9;
    break;
   case 9:
    var $6 = $facet + 76 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 & -262145;
    HEAP32[$7 >> 2] = $9;
    var $10 = HEAP32[5247036 >> 2];
    var $cmp10 = ($10 | 0) > 2;
    if ($cmp10) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5251184);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_infiniteloop($facet) {
  _qh_fprintf(5250948);
  _qh_errexit(5, $facet, 0);
  return;
}
function _qh_initbuild() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $maxpoints = __stackBase__;
    var $vertices = __stackBase__ + 4;
    var $numpart = __stackBase__ + 8;
    var $dist = __stackBase__ + 12;
    var $isoutside = __stackBase__ + 20;
    HEAP32[5249036 >> 2] = -1;
    HEAP32[5249252 >> 2] = 0;
    var $0 = HEAP32[5249012 >> 2];
    var $1 = $0 & -16777216;
    HEAP32[5249012 >> 2] = $1;
    var $2 = HEAP32[5249016 >> 2];
    var $3 = $2 & -16777216;
    HEAP32[5249016 >> 2] = $3;
    HEAP32[5249008 >> 2] = 0;
    var $4 = HEAP32[5249156 >> 2];
    var $5 = $4 & -2147483648;
    HEAP32[5249156 >> 2] = $5;
    HEAP32[5249152 >> 2] = 0;
    HEAP32[5249060 >> 2] = 0;
    var $6 = HEAP32[5247012 >> 2];
    var $cmp = ($6 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $sub = $6 - 1 | 0;
    var $call = _qh_point($sub);
    HEAP32[5247016 >> 2] = $call;
    label = 6;
    break;
   case 4:
    var $cmp1 = ($6 | 0) < 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $sub4 = $6 ^ -1;
    var $call5 = _qh_point($sub4);
    HEAP32[5247016 >> 2] = $call5;
    label = 6;
    break;
   case 6:
    var $7 = HEAP32[5247024 >> 2];
    var $cmp7 = ($7 | 0) > 0;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $sub9 = $7 - 1 | 0;
    var $call10 = _qh_point($sub9);
    HEAP32[5247028 >> 2] = $call10;
    label = 10;
    break;
   case 8:
    var $cmp12 = ($7 | 0) < 0;
    if ($cmp12) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $sub15 = $7 ^ -1;
    var $call16 = _qh_point($sub15);
    HEAP32[5247028 >> 2] = $call16;
    label = 10;
    break;
   case 10:
    var $8 = HEAP32[5247012 >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $9 = HEAP32[5247016 >> 2];
    var $10 = HEAP32[5247516 >> 2];
    var $cmp19 = $9 >>> 0 < $10 >>> 0;
    if ($cmp19) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $11 = HEAP32[5247512 >> 2];
    var $sub20 = $11 - 1 | 0;
    var $call21 = _qh_point($sub20);
    var $cmp22 = $9 >>> 0 > $call21 >>> 0;
    if ($cmp22) {
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $12 = HEAP32[5247024 >> 2];
    var $tobool24 = ($12 | 0) == 0;
    if ($tobool24) {
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $13 = HEAP32[5247028 >> 2];
    var $14 = HEAP32[5247516 >> 2];
    var $cmp26 = $13 >>> 0 < $14 >>> 0;
    if ($cmp26) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $15 = HEAP32[5247512 >> 2];
    var $sub28 = $15 - 1 | 0;
    var $call29 = _qh_point($sub28);
    var $cmp30 = $13 >>> 0 > $call29 >>> 0;
    if ($cmp30) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5250536);
    _qh_errexit(1, 0, 0);
    label = 17;
    break;
   case 17:
    var $16 = HEAP32[5247516 >> 2];
    var $17 = HEAP32[5247512 >> 2];
    var $18 = HEAP32[5247504 >> 2];
    var $call34 = _qh_maxmin($16, $17, $18);
    HEAP32[$maxpoints >> 2] = $call34;
    var $19 = HEAP32[5247388 >> 2];
    var $tobool35 = ($19 | 0) == 0;
    if ($tobool35) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $20 = HEAP32[5247516 >> 2];
    var $21 = HEAP32[5247512 >> 2];
    var $22 = HEAP32[5247504 >> 2];
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248696 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248700 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248640 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248644 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _qh_scalelast($20, $21, $22, $23, $24, $25);
    label = 19;
    break;
   case 19:
    _qh_detroundoff();
    var $26 = HEAP32[5246996 >> 2];
    var $tobool38 = ($26 | 0) == 0;
    if ($tobool38) {
      label = 30;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $27 = HEAP32[5247504 >> 2];
    var $sub40 = $27 - 1 | 0;
    var $28 = HEAP32[5248584 >> 2];
    var $arrayidx = $28 + ($sub40 << 3) | 0;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp41 = $29 > 8.988465674311579e+307;
    if ($cmp41) {
      label = 21;
      break;
    } else {
      label = 30;
      break;
    }
   case 21:
    var $30 = HEAP32[5248588 >> 2];
    var $arrayidx44 = $30 + ($sub40 << 3) | 0;
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx44 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx44 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp45 = $31 < -8.988465674311579e+307;
    if ($cmp45) {
      label = 22;
      break;
    } else {
      label = 30;
      break;
    }
   case 22:
    var $32 = HEAP32[5247004 >> 2];
    var $notrhs = ($32 | 0) > -1;
    var $33 = HEAP32[5247020 >> 2];
    var $tobool53 = ($33 | 0) != 0;
    var $34 = HEAP32[5247404 >> 2];
    var $tobool55 = ($34 | 0) != 0;
    var $i_0 = 29;
    label = 23;
    break;
   case 23:
    var $i_0;
    var $dec = $i_0 - 1 | 0;
    var $tobool47 = ($i_0 | 0) == 0;
    if ($tobool47) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $arrayidx48 = 5247188 + ($dec << 2) | 0;
    var $35 = HEAP32[$arrayidx48 >> 2];
    var $notlhs = ($35 | 0) != 7;
    var $or_cond_not = $notrhs | $notlhs;
    var $or_cond1 = $or_cond_not | $tobool53;
    var $or_cond2 = $or_cond1 | $tobool55;
    if ($or_cond2) {
      var $i_0 = $dec;
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $cmp58 = ($dec | 0) < 0;
    if ($cmp58) {
      label = 26;
      break;
    } else {
      label = 30;
      break;
    }
   case 26:
    var $36 = HEAP32[5247456 >> 2];
    var $tobool60 = ($36 | 0) == 0;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248600 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248604 >> 2], HEAPF64[tempDoublePtr >> 3]);
    if ($tobool60) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $mul = $37 * 2;
    HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$arrayidx44 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx44 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5247020 >> 2] = 1;
    label = 30;
    break;
   case 28:
    var $mul66 = $37 * -2;
    HEAPF64[tempDoublePtr >> 3] = $mul66, HEAP32[$arrayidx >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $38 = HEAP32[5247020 >> 2];
    var $tobool69 = ($38 | 0) == 0;
    if ($tobool69) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    HEAP32[5247404 >> 2] = 1;
    label = 30;
    break;
   case 30:
    var $39 = HEAP32[5247504 >> 2];
    var $40 = HEAP32[5247516 >> 2];
    var $41 = HEAP32[5247512 >> 2];
    var $call75 = _qh_initialvertices($39, $call34, $40, $41);
    HEAP32[$vertices >> 2] = $call75;
    _qh_initialhull($call75);
    var $42 = HEAP32[5247516 >> 2];
    var $43 = HEAP32[5247512 >> 2];
    _qh_partitionall($call75, $42, $43);
    var $44 = HEAP32[5247176 >> 2];
    var $45 = HEAP32[5247424 >> 2];
    var $46 = $45 | $44;
    var $47 = HEAP32[5247036 >> 2];
    var $48 = $46 | $47;
    var $49 = ($48 | 0) == 0;
    if ($49) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $50 = $47 | $45;
    var $51 = ($50 | 0) == 0;
    if ($51) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _qh_fprintf(5250276);
    label = 33;
    break;
   case 33:
    _qh_fprintf(5259968);
    label = 34;
    break;
   case 34:
    _qh_resetlists(0, 1);
    var $52 = HEAP32[5248940 >> 2];
    HEAP32[5248948 >> 2] = $52;
    _qh_furthestnext();
    var $53 = HEAP32[5247140 >> 2];
    var $tobool89 = ($53 | 0) == 0;
    if ($tobool89) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $54, HEAP32[5248616 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248620 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5247084 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5247088 >> 2], HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $55, HEAP32[5248608 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5248612 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 36;
    break;
   case 36:
    var $56 = HEAP32[5247124 >> 2];
    var $tobool92 = ($56 | 0) == 0;
    if ($tobool92) {
      label = 49;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $57 = HEAP32[5247024 >> 2];
    var $cmp94 = ($57 | 0) > 0;
    var $58 = HEAP32[5247080 >> 2];
    var $tobool96 = ($58 | 0) != 0;
    var $or_cond6 = $cmp94 & $tobool96;
    if ($or_cond6) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    _qh_fprintf(5249836);
    _qh_errexit(1, 0, 0);
    label = 39;
    break;
   case 39:
    var $59 = HEAP32[5247020 >> 2];
    var $60 = HEAP32[5247012 >> 2];
    var $61 = $60 | $59;
    var $62 = ($61 | 0) == 0;
    if ($62) {
      label = 40;
      break;
    } else {
      label = 42;
      break;
    }
   case 40:
    var $63 = HEAP32[5247072 >> 2];
    var $64 = HEAP32[5247140 >> 2];
    var $65 = $64 | $63;
    var $or_cond8_not = ($65 | 0) == 0;
    var $66 = HEAP32[5247028 >> 2];
    var $tobool107 = ($66 | 0) != 0;
    var $or_cond9 = $or_cond8_not & $tobool107;
    if ($or_cond9) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    _qh_fprintf(5249508);
    _qh_errexit(1, 0, 0);
    label = 42;
    break;
   case 42:
    var $67 = HEAP32[5247024 >> 2];
    var $cmp110 = ($67 | 0) < 1;
    var $68 = HEAP32[5247080 >> 2];
    var $tobool112 = ($68 | 0) != 0;
    var $or_cond10 = $cmp110 | $tobool112;
    if ($or_cond10) {
      label = 48;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $69 = HEAP32[5247028 >> 2];
    var $call114 = _qh_isvertex($69, $call75);
    var $tobool115 = ($call114 | 0) == 0;
    if ($tobool115) {
      label = 44;
      break;
    } else {
      label = 48;
      break;
    }
   case 44:
    var $70 = HEAP32[5248940 >> 2];
    var $call117 = _qh_findbestnew($69, $70, $dist, 0, $isoutside, $numpart);
    var $71 = HEAP32[$numpart >> 2];
    var $72 = HEAP32[5243416 >> 2];
    var $add = $72 + $71 | 0;
    HEAP32[5243416 >> 2] = $add;
    var $73 = HEAP32[$isoutside >> 2];
    var $tobool118 = ($73 | 0) == 0;
    if ($tobool118) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _qh_fprintf(5249296);
    _qh_errexit(1, 0, 0);
    label = 46;
    break;
   case 46:
    var $74 = HEAP32[5247028 >> 2];
    var $call122 = _qh_addpoint($74, $call117, 0);
    var $tobool123 = ($call122 | 0) == 0;
    if ($tobool123) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    _qh_settempfree($vertices);
    _qh_settempfree($maxpoints);
    label = 51;
    break;
   case 48:
    var $75 = HEAP32[5248940 >> 2];
    var $call127 = _qh_findgood($75, 0);
    label = 49;
    break;
   case 49:
    _qh_settempfree($vertices);
    _qh_settempfree($maxpoints);
    var $76 = HEAP32[5247036 >> 2];
    var $cmp129 = ($76 | 0) > 0;
    if ($cmp129) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    _qh_fprintf(5302180);
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_initbuild["X"] = 1;
function _qh_initialvertices($dim, $maxpoints, $points, $numpoints) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vertices = __stackBase__;
    var $simplex = __stackBase__ + 4;
    var $tested = __stackBase__ + 8;
    var $nearzero = __stackBase__ + 12;
    HEAP32[$nearzero >> 2] = 0;
    var $add = $dim + 1 | 0;
    var $call = _qh_settemp($add);
    HEAP32[$vertices >> 2] = $call;
    var $call2 = _qh_settemp($add);
    HEAP32[$simplex >> 2] = $call2;
    var $0 = HEAP32[5246932 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_maxsimplex($dim, 0, $points, $numpoints, $simplex);
    label = 37;
    break;
   case 4:
    var $1 = HEAP32[5247364 >> 2];
    var $tobool3 = ($1 | 0) == 0;
    if ($tobool3) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call567 = _qh_setsize($call2);
    var $cmp69 = ($call567 | 0) == ($add | 0);
    if ($cmp69) {
      label = 37;
      break;
    } else {
      var $2 = $call2;
      label = 6;
      break;
    }
   case 6:
    var $2;
    var $call7 = _qh_rand();
    var $conv = $call7 | 0;
    var $div = $conv / 2147483647;
    var $3 = HEAP32[5247512 >> 2];
    var $conv8 = $3 | 0;
    var $mul = $div * $conv8;
    var $call9 = Math.floor($mul);
    var $conv10 = $call9 & -1;
    var $call1262 = _qh_point($conv10);
    var $4 = $call1262;
    var $call1363 = _qh_setin($2, $4);
    var $tobool1464 = ($call1363 | 0) == 0;
    if ($tobool1464) {
      var $idx_0_lcssa = $conv10;
      label = 8;
      break;
    } else {
      var $idx_065 = $conv10;
      label = 7;
      break;
    }
   case 7:
    var $idx_065;
    var $inc = $idx_065 + 1 | 0;
    var $5 = HEAP32[5247512 >> 2];
    var $cmp16 = ($inc | 0) < ($5 | 0);
    var $cond = $cmp16 ? $inc : 0;
    var $call12 = _qh_point($cond);
    var $6 = $call12;
    var $call13 = _qh_setin($2, $6);
    var $tobool14 = ($call13 | 0) == 0;
    if ($tobool14) {
      var $idx_0_lcssa = $cond;
      label = 8;
      break;
    } else {
      var $idx_065 = $cond;
      label = 7;
      break;
    }
   case 8:
    var $idx_0_lcssa;
    var $call18 = _qh_point($idx_0_lcssa);
    var $7 = $call18;
    _qh_setappend($simplex, $7);
    var $8 = HEAP32[$simplex >> 2];
    var $call5 = _qh_setsize($8);
    var $cmp = ($call5 | 0) == ($add | 0);
    if ($cmp) {
      label = 37;
      break;
    } else {
      var $2 = $8;
      label = 6;
      break;
    }
   case 9:
    var $9 = HEAP32[5247504 >> 2];
    var $cmp21 = ($9 | 0) > 7;
    if ($cmp21) {
      label = 10;
      break;
    } else {
      label = 36;
      break;
    }
   case 10:
    var $call25 = _qh_settemp($add);
    HEAP32[$tested >> 2] = $call25;
    var $p = $maxpoints + 4 | 0;
    var $10 = HEAP32[$p >> 2];
    _qh_setappend($simplex, $10);
    var $p28 = $maxpoints + 8 | 0;
    var $11 = HEAP32[$p28 >> 2];
    _qh_setappend($simplex, $11);
    var $cmp29 = ($dim | 0) < 6;
    var $cond34 = $cmp29 ? $dim : 6;
    _qh_maxsimplex($cond34, $maxpoints, $points, $numpoints, $simplex);
    var $12 = HEAP32[$simplex >> 2];
    var $call35 = _qh_setsize($12);
    var $tobool36 = ($maxpoints | 0) == 0;
    if ($tobool36) {
      var $k_2_ph = $call35;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $k_2_ph;
    var $cmp6877 = ($k_2_ph | 0) == ($dim | 0);
    if ($cmp6877) {
      label = 35;
      break;
    } else {
      var $k_2_ph5578 = $k_2_ph;
      label = 28;
      break;
    }
   case 12:
    var $13 = HEAP32[$p >> 2];
    var $call41 = _qh_setsize($maxpoints);
    var $cmp4257 = ($call41 | 0) > 0;
    if ($cmp4257) {
      var $point_i_058 = 0;
      var $k_060 = $call35;
      var $point_061_in = $13;
      label = 13;
      break;
    } else {
      var $k_2_ph = $call35;
      label = 11;
      break;
    }
   case 13:
    var $point_061_in;
    var $k_060;
    var $point_i_058;
    var $point_061 = $point_061_in;
    var $and = $point_i_058 & 1;
    var $tobool44 = ($and | 0) == 0;
    if ($tobool44) {
      var $k_1 = $k_060;
      label = 19;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $14 = HEAP32[$simplex >> 2];
    var $call46 = _qh_setin($14, $point_061_in);
    var $tobool47 = ($call46 | 0) == 0;
    if ($tobool47) {
      label = 15;
      break;
    } else {
      var $k_1 = $k_060;
      label = 19;
      break;
    }
   case 15:
    var $15 = HEAP32[$tested >> 2];
    var $call48 = _qh_setin($15, $point_061_in);
    var $tobool49 = ($call48 | 0) == 0;
    if ($tobool49) {
      label = 16;
      break;
    } else {
      var $k_1 = $k_060;
      label = 19;
      break;
    }
   case 16:
    var $call51 = _qh_detsimplex($point_061, $14, $k_060, $nearzero);
    var $16 = HEAP32[$nearzero >> 2];
    var $tobool52 = ($16 | 0) == 0;
    if ($tobool52) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_setappend($tested, $point_061_in);
    var $k_1 = $k_060;
    label = 19;
    break;
   case 18:
    _qh_setappend($simplex, $point_061_in);
    var $inc55 = $k_060 + 1 | 0;
    var $cmp56 = ($inc55 | 0) == ($dim | 0);
    if ($cmp56) {
      label = 35;
      break;
    } else {
      var $k_1 = $inc55;
      label = 19;
      break;
    }
   case 19:
    var $k_1;
    var $inc62 = $point_i_058 + 1 | 0;
    var $p65 = $maxpoints + 4 + ($inc62 << 2) | 0;
    var $17 = HEAP32[$p65 >> 2];
    var $cmp42 = ($inc62 | 0) < ($call41 | 0);
    if ($cmp42) {
      var $point_i_058 = $inc62;
      var $k_060 = $k_1;
      var $point_061_in = $17;
      label = 13;
      break;
    } else {
      var $k_2_ph = $k_1;
      label = 11;
      break;
    }
   case 20:
    var $k_2_ph5576;
    var $cmp8870 = ($k_2_ph5576 | 0) == ($dim | 0);
    if ($cmp8870) {
      label = 35;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $18 = HEAP32[$tested >> 2];
    var $idx_1_ph71 = 0;
    var $k_3_ph72 = $k_2_ph5576;
    label = 34;
    break;
   case 22:
    var $call70 = _qh_setdellast($maxpoints);
    var $19 = $call70;
    var $tobool71 = ($call70 | 0) == 0;
    if ($tobool71) {
      var $k_2_ph5576 = $k_2_ph5578;
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $20 = HEAP32[$simplex >> 2];
    var $call73 = _qh_setin($20, $call70);
    var $tobool74 = ($call73 | 0) == 0;
    if ($tobool74) {
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 24:
    var $21 = HEAP32[$tested >> 2];
    var $call76 = _qh_setin($21, $call70);
    var $tobool77 = ($call76 | 0) == 0;
    if ($tobool77) {
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
   case 25:
    var $call79 = _qh_detsimplex($19, $20, $k_2_ph5578, $nearzero);
    var $22 = HEAP32[$nearzero >> 2];
    var $tobool80 = ($22 | 0) == 0;
    if ($tobool80) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    _qh_setappend($tested, $call70);
    label = 22;
    break;
   case 27:
    _qh_setappend($simplex, $call70);
    var $inc83 = $k_2_ph5578 + 1 | 0;
    var $cmp68 = ($inc83 | 0) == ($dim | 0);
    if ($cmp68) {
      label = 35;
      break;
    } else {
      var $k_2_ph5578 = $inc83;
      label = 28;
      break;
    }
   case 28:
    var $k_2_ph5578;
    label = 22;
    break;
   case 29:
    var $idx_154;
    var $inc91 = $idx_154 + 1 | 0;
    var $call92 = _qh_point($idx_154);
    var $tobool93 = ($call92 | 0) == 0;
    if ($tobool93) {
      label = 35;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $23 = HEAP32[$simplex >> 2];
    var $24 = $call92;
    var $call96 = _qh_setin($23, $24);
    var $tobool97 = ($call96 | 0) == 0;
    if ($tobool97) {
      label = 31;
      break;
    } else {
      var $idx_154 = $inc91;
      label = 29;
      break;
    }
   case 31:
    var $call99 = _qh_setin($18, $24);
    var $tobool100 = ($call99 | 0) == 0;
    if ($tobool100) {
      label = 32;
      break;
    } else {
      var $idx_154 = $inc91;
      label = 29;
      break;
    }
   case 32:
    var $call102 = _qh_detsimplex($call92, $23, $k_3_ph72, $nearzero);
    var $25 = HEAP32[$nearzero >> 2];
    var $tobool103 = ($25 | 0) == 0;
    if ($tobool103) {
      label = 33;
      break;
    } else {
      var $idx_154 = $inc91;
      label = 29;
      break;
    }
   case 33:
    _qh_setappend($simplex, $24);
    var $inc105 = $k_3_ph72 + 1 | 0;
    var $cmp88 = ($inc105 | 0) == ($dim | 0);
    if ($cmp88) {
      label = 35;
      break;
    } else {
      var $idx_1_ph71 = $inc91;
      var $k_3_ph72 = $inc105;
      label = 34;
      break;
    }
   case 34:
    var $k_3_ph72;
    var $idx_1_ph71;
    var $idx_154 = $idx_1_ph71;
    label = 29;
    break;
   case 35:
    _qh_settempfree($tested);
    _qh_maxsimplex($dim, $maxpoints, $points, $numpoints, $simplex);
    label = 37;
    break;
   case 36:
    _qh_maxsimplex($dim, $maxpoints, $points, $numpoints, $simplex);
    label = 37;
    break;
   case 37:
    var $26 = HEAP32[$simplex >> 2];
    var $tobool113 = ($26 | 0) == 0;
    if ($tobool113) {
      var $33 = $call;
      label = 42;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $p117 = $26 + 4 | 0;
    var $27 = HEAP32[$p117 >> 2];
    var $tobool11952 = ($27 | 0) == 0;
    if ($tobool11952) {
      var $33 = $call;
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $28 = $27;
    var $29 = $p117;
    var $pointp_053 = $29;
    var $30 = $28;
    label = 40;
    break;
   case 40:
    var $30;
    var $pointp_053;
    var $incdec_ptr = $pointp_053 + 4 | 0;
    var $call121 = _qh_newvertex($30);
    var $31 = $call121;
    _qh_setaddnth($vertices, 0, $31);
    var $32 = HEAP32[$incdec_ptr >> 2];
    var $tobool119 = ($32 | 0) == 0;
    if ($tobool119) {
      label = 41;
      break;
    } else {
      var $pointp_053 = $incdec_ptr;
      var $30 = $32;
      label = 40;
      break;
    }
   case 41:
    var $_pre = HEAP32[$vertices >> 2];
    var $33 = $_pre;
    label = 42;
    break;
   case 42:
    var $33;
    _qh_settempfree($simplex);
    STACKTOP = __stackBase__;
    return $33;
  }
}
_qh_initialvertices["X"] = 1;
function _qh_initialhull($vertices) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $diff = __stackBase__ + 8;
    _qh_createsimplex($vertices);
    _qh_resetlists(0, 1);
    var $0 = HEAP32[5248940 >> 2];
    HEAP32[5248948 >> 2] = $0;
    var $call = _qh_getcenter($vertices);
    HEAP32[5248924 >> 2] = $call;
    var $1 = HEAP32[5248940 >> 2];
    _qh_setfacetplane($1);
    var $2 = HEAP32[5244248 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5244248 >> 2] = $inc;
    var $3 = HEAP32[5248924 >> 2];
    _qh_distplane($3, $1, $dist);
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $4 > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $facet_051 = HEAP32[5248940 >> 2];
    var $tobool53 = ($facet_051 | 0) == 0;
    if ($tobool53) {
      var $facet_2_in = 5248940;
      label = 9;
      break;
    } else {
      var $facet_054 = $facet_051;
      label = 5;
      break;
    }
   case 4:
    var $facet_148_pr = HEAP32[5248940 >> 2];
    var $tobool549 = ($facet_148_pr | 0) == 0;
    if ($tobool549) {
      var $facet_2_in = 5248940;
      label = 9;
      break;
    } else {
      var $facet_150 = $facet_148_pr;
      label = 7;
      break;
    }
   case 5:
    var $facet_054;
    var $next = $facet_054 + 44 | 0;
    var $5 = HEAP32[$next >> 2];
    var $tobool1 = ($5 | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $6 = $facet_054 + 76 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 ^ 4096;
    HEAP32[$7 >> 2] = $9;
    var $facet_054 = $5;
    label = 5;
    break;
   case 7:
    var $facet_150;
    var $next7 = $facet_150 + 44 | 0;
    var $10 = HEAP32[$next7 >> 2];
    var $tobool8 = ($10 | 0) == 0;
    if ($tobool8) {
      var $facet_2_in = 5248940;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_setfacetplane($facet_150);
    var $facet_1 = HEAP32[$next7 >> 2];
    var $tobool5 = ($facet_1 | 0) == 0;
    if ($tobool5) {
      var $facet_2_in = 5248940;
      label = 9;
      break;
    } else {
      var $facet_150 = $facet_1;
      label = 7;
      break;
    }
   case 9:
    var $facet_2_in;
    var $facet_2 = HEAP32[$facet_2_in >> 2];
    var $tobool15 = ($facet_2 | 0) == 0;
    if ($tobool15) {
      var $minangle_0_ph = 1.7976931348623157e+308;
      var $facet_4_in_ph = 5248940;
      label = 17;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $next17 = $facet_2 + 44 | 0;
    var $11 = HEAP32[$next17 >> 2];
    var $tobool18 = ($11 | 0) == 0;
    if ($tobool18) {
      var $minangle_0_ph = 1.7976931348623157e+308;
      var $facet_4_in_ph = 5248940;
      label = 17;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $call21 = _qh_checkflipped($facet_2, 0, 1);
    var $tobool22 = ($call21 | 0) == 0;
    if ($tobool22) {
      label = 12;
      break;
    } else {
      var $facet_2_in = $next17;
      label = 9;
      break;
    }
   case 12:
    var $12 = HEAP32[5247036 >> 2];
    var $cmp24 = ($12 | 0) > 0;
    if ($cmp24) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _qh_fprintf(5301816);
    label = 14;
    break;
   case 14:
    var $13 = $facet_2 + 76 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & -65537;
    HEAP32[$14 >> 2] = $16;
    var $facet_343 = HEAP32[5248940 >> 2];
    var $tobool2944 = ($facet_343 | 0) == 0;
    if ($tobool2944) {
      var $minangle_0_ph = 1.7976931348623157e+308;
      var $facet_4_in_ph = 5248940;
      label = 17;
      break;
    } else {
      var $facet_345 = $facet_343;
      label = 15;
      break;
    }
   case 15:
    var $facet_345;
    var $next31 = $facet_345 + 44 | 0;
    var $17 = HEAP32[$next31 >> 2];
    var $tobool32 = ($17 | 0) == 0;
    if ($tobool32) {
      var $minangle_0_ph = 1.7976931348623157e+308;
      var $facet_4_in_ph = 5248940;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $18 = $facet_345 + 76 | 0;
    var $19 = $18;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $20 ^ 4096;
    HEAP32[$19 >> 2] = $21;
    var $call40 = _qh_orientoutside($facet_345);
    var $facet_3 = HEAP32[$next31 >> 2];
    var $tobool29 = ($facet_3 | 0) == 0;
    if ($tobool29) {
      var $minangle_0_ph = 1.7976931348623157e+308;
      var $facet_4_in_ph = 5248940;
      label = 17;
      break;
    } else {
      var $facet_345 = $facet_3;
      label = 15;
      break;
    }
   case 17:
    var $facet_4_in_ph;
    var $minangle_0_ph;
    var $facet_4_in = $facet_4_in_ph;
    label = 18;
    break;
   case 18:
    var $facet_4_in;
    var $facet_4 = HEAP32[$facet_4_in >> 2];
    var $tobool49 = ($facet_4 | 0) == 0;
    if ($tobool49) {
      label = 32;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $next51 = $facet_4 + 44 | 0;
    var $22 = HEAP32[$next51 >> 2];
    var $tobool52 = ($22 | 0) == 0;
    if ($tobool52) {
      label = 32;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $call55 = _qh_checkflipped($facet_4, 0, 0);
    var $tobool56 = ($call55 | 0) == 0;
    if ($tobool56) {
      label = 21;
      break;
    } else {
      label = 27;
      break;
    }
   case 21:
    var $23 = HEAP32[5246996 >> 2];
    var $tobool58 = ($23 | 0) == 0;
    var $24 = HEAP32[5246956 >> 2];
    var $tobool59 = ($24 | 0) != 0;
    var $or_cond = $tobool58 | $tobool59;
    if ($or_cond) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $25 = HEAP32[5247456 >> 2];
    var $tobool61 = ($25 | 0) == 0;
    if ($tobool61) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    _qh_fprintf(5301476);
    label = 25;
    break;
   case 24:
    _qh_fprintf(5301148);
    label = 25;
    break;
   case 25:
    _qh_errexit(1, 0, 0);
    label = 26;
    break;
   case 26:
    _qh_precision();
    _qh_fprintf(5300720);
    _qh_errexit(2, $facet_4, 0);
    label = 27;
    break;
   case 27:
    var $neighbors = $facet_4 + 56 | 0;
    var $26 = HEAP32[$neighbors >> 2];
    var $tobool66 = ($26 | 0) == 0;
    if ($tobool66) {
      var $facet_4_in = $next51;
      label = 18;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $p = $26 + 4 | 0;
    var $27 = $p;
    var $normal = $facet_4 + 24 | 0;
    var $minangle_1_ph = $minangle_0_ph;
    var $neighborp_0_ph = $27;
    label = 29;
    break;
   case 29:
    var $neighborp_0_ph;
    var $minangle_1_ph;
    var $neighborp_0 = $neighborp_0_ph;
    label = 30;
    break;
   case 30:
    var $neighborp_0;
    var $incdec_ptr = $neighborp_0 + 4 | 0;
    var $28 = HEAP32[$neighborp_0 >> 2];
    var $tobool70 = ($28 | 0) == 0;
    if ($tobool70) {
      var $minangle_0_ph = $minangle_1_ph;
      var $facet_4_in_ph = $next51;
      label = 17;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $29 = HEAP32[$normal >> 2];
    var $normal72 = $28 + 24 | 0;
    var $30 = HEAP32[$normal72 >> 2];
    var $call73 = _qh_getangle($29, $30);
    var $cmp74 = $minangle_1_ph > $call73;
    if ($cmp74) {
      var $minangle_1_ph = $call73;
      var $neighborp_0_ph = $incdec_ptr;
      label = 29;
      break;
    } else {
      var $neighborp_0 = $incdec_ptr;
      label = 30;
      break;
    }
   case 32:
    var $cmp82 = $minangle_0_ph >= -.99999999;
    var $31 = HEAP32[5247112 >> 2];
    var $tobool84 = ($31 | 0) != 0;
    var $or_cond1 = $cmp82 | $tobool84;
    if ($or_cond1) {
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $add = $minangle_0_ph + 1;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$diff >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$diff + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5248704 >> 2] = 1;
    _qh_option(5300588, 0, $diff);
    var $32 = HEAP32[5247376 >> 2];
    var $notlhs = $minangle_0_ph < -.999999999999999;
    var $notrhs = ($32 | 0) == 0;
    var $or_cond2_not = $notrhs & $notlhs;
    var $33 = HEAP32[5247184 >> 2];
    var $tobool90 = ($33 | 0) != 0;
    var $or_cond3 = $or_cond2_not & $tobool90;
    if ($or_cond3) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    _qh_printhelp_narrowhull($minangle_0_ph);
    label = 35;
    break;
   case 35:
    var $34 = HEAP32[5247504 >> 2];
    var $add94 = $34 + 1 | 0;
    HEAP32[5244376 >> 2] = $add94;
    var $35 = HEAP32[5248940 >> 2];
    _qh_checkpolygon($35);
    var $36 = HEAP32[5248940 >> 2];
    _qh_checkconvex($36, 1);
    var $37 = HEAP32[5247036 >> 2];
    var $cmp95 = ($37 | 0) > 0;
    if ($cmp95) {
      label = 36;
      break;
    } else {
      label = 39;
      break;
    }
   case 36:
    _qh_fprintf(5300332);
    var $38 = HEAP32[5247504 >> 2];
    var $cmp9839 = ($38 | 0) > 0;
    if ($cmp9839) {
      var $k_040 = 0;
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $k_040;
    _qh_fprintf(5300128);
    var $inc102 = $k_040 + 1 | 0;
    var $39 = HEAP32[5247504 >> 2];
    var $cmp98 = ($inc102 | 0) < ($39 | 0);
    if ($cmp98) {
      var $k_040 = $inc102;
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    _qh_fprintf(5299656);
    label = 39;
    break;
   case 39:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_initialhull["X"] = 1;
function _qh_resetlists($stats, $resetVisible) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($stats | 0) == 0;
    var $vertex_129_pre = HEAP32[5248988 >> 2];
    if ($tobool) {
      var $vertex_129 = $vertex_129_pre;
      label = 12;
      break;
    } else {
      var $totver_0 = 0;
      var $vertex_0 = $vertex_129_pre;
      label = 3;
      break;
    }
   case 3:
    var $vertex_0;
    var $totver_0;
    var $tobool1 = ($vertex_0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $next = $vertex_0 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool2 = ($0 | 0) == 0;
    var $inc = $totver_0 + 1 | 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      var $totver_0 = $inc;
      var $vertex_0 = $0;
      label = 3;
      break;
    }
   case 5:
    var $1 = HEAP32[5248952 >> 2];
    var $totnew_0 = 0;
    var $newfacet_0 = $1;
    label = 6;
    break;
   case 6:
    var $newfacet_0;
    var $totnew_0;
    var $tobool5 = ($newfacet_0 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $next7 = $newfacet_0 + 44 | 0;
    var $2 = HEAP32[$next7 >> 2];
    var $tobool8 = ($2 | 0) == 0;
    var $inc11 = $totnew_0 + 1 | 0;
    if ($tobool8) {
      label = 8;
      break;
    } else {
      var $totnew_0 = $inc11;
      var $newfacet_0 = $2;
      label = 6;
      break;
    }
   case 8:
    var $3 = HEAP32[5244752 >> 2];
    var $add = $3 + $totver_0 | 0;
    HEAP32[5244752 >> 2] = $add;
    var $4 = HEAP32[5244760 >> 2];
    var $cmp = ($4 | 0) < ($totver_0 | 0);
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[5244760 >> 2] = $totver_0;
    label = 10;
    break;
   case 10:
    var $5 = HEAP32[5244112 >> 2];
    var $add16 = $5 + $totnew_0 | 0;
    HEAP32[5244112 >> 2] = $add16;
    var $6 = HEAP32[5244120 >> 2];
    var $cmp17 = ($6 | 0) < ($totnew_0 | 0);
    if ($cmp17) {
      label = 11;
      break;
    } else {
      var $vertex_129 = $vertex_129_pre;
      label = 12;
      break;
    }
   case 11:
    HEAP32[5244120 >> 2] = $totnew_0;
    var $vertex_129 = $vertex_129_pre;
    label = 12;
    break;
   case 12:
    var $vertex_129;
    var $tobool2230 = ($vertex_129 | 0) == 0;
    if ($tobool2230) {
      label = 15;
      break;
    } else {
      var $vertex_131 = $vertex_129;
      label = 13;
      break;
    }
   case 13:
    var $vertex_131;
    var $next24 = $vertex_131 | 0;
    var $7 = HEAP32[$next24 >> 2];
    var $tobool25 = ($7 | 0) == 0;
    if ($tobool25) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $8 = $vertex_131 + 20 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $11 = $10 & 2147483647;
    HEAP32[$9 >> 2] = $11;
    var $vertex_131 = $7;
    label = 13;
    break;
   case 15:
    HEAP32[5248988 >> 2] = 0;
    var $newfacet_126 = HEAP32[5248952 >> 2];
    var $tobool3227 = ($newfacet_126 | 0) == 0;
    if ($tobool3227) {
      label = 18;
      break;
    } else {
      var $newfacet_128 = $newfacet_126;
      label = 16;
      break;
    }
   case 16:
    var $newfacet_128;
    var $next34 = $newfacet_128 + 44 | 0;
    var $12 = HEAP32[$next34 >> 2];
    var $tobool35 = ($12 | 0) == 0;
    if ($tobool35) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $13 = $newfacet_128 + 76 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & -1025;
    HEAP32[$14 >> 2] = $16;
    var $newfacet_128 = $12;
    label = 16;
    break;
   case 18:
    HEAP32[5248952 >> 2] = 0;
    var $tobool42 = ($resetVisible | 0) == 0;
    if ($tobool42) {
      label = 23;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $visible_023 = HEAP32[5248956 >> 2];
    var $tobool4524 = ($visible_023 | 0) == 0;
    if ($tobool4524) {
      label = 22;
      break;
    } else {
      var $visible_025 = $visible_023;
      label = 20;
      break;
    }
   case 20:
    var $visible_025;
    var $17 = $visible_025 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $bf_clear = $19 & 2048;
    var $tobool48 = ($bf_clear | 0) == 0;
    if ($tobool48) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $f = $visible_025 + 28 | 0;
    var $replace = $f;
    HEAP32[$replace >> 2] = 0;
    var $20 = $19 & -2049;
    HEAP32[$18 >> 2] = $20;
    var $next53 = $visible_025 + 44 | 0;
    var $visible_0 = HEAP32[$next53 >> 2];
    var $tobool45 = ($visible_0 | 0) == 0;
    if ($tobool45) {
      label = 22;
      break;
    } else {
      var $visible_025 = $visible_0;
      label = 20;
      break;
    }
   case 22:
    HEAP32[5248960 >> 2] = 0;
    label = 23;
    break;
   case 23:
    HEAP32[5248956 >> 2] = 0;
    HEAP32[5249088 >> 2] = 0;
    return;
  }
}
_qh_resetlists["X"] = 1;
function _qh_makenewfacets($point) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numnew = __stackBase__;
    HEAP32[$numnew >> 2] = 0;
    var $0 = HEAP32[5248944 >> 2];
    HEAP32[5248952 >> 2] = $0;
    var $1 = HEAP32[5248984 >> 2];
    HEAP32[5248988 >> 2] = $1;
    var $call = _qh_newvertex($point);
    _qh_appendvertex($call);
    var $2 = HEAP32[5249152 >> 2];
    var $inc = $2 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    var $3 = HEAP32[5247124 >> 2];
    var $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5249088 >> 2] = 1;
    label = 4;
    break;
   case 4:
    var $visible_021 = HEAP32[5248956 >> 2];
    var $tobool122 = ($visible_021 | 0) == 0;
    if ($tobool122) {
      label = 20;
      break;
    } else {
      var $newfacet_023 = 0;
      var $newfacet2_024 = 0;
      var $visible_025 = $visible_021;
      label = 5;
      break;
    }
   case 5:
    var $visible_025;
    var $newfacet2_024;
    var $newfacet_023;
    var $4 = $visible_025 + 76 | 0;
    var $5 = $4;
    var $6 = HEAP32[$5 >> 2];
    var $bf_clear = $6 & 2048;
    var $tobool2 = ($bf_clear | 0) == 0;
    if ($tobool2) {
      label = 20;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $neighbors = $visible_025 + 56 | 0;
    var $7 = HEAP32[$neighbors >> 2];
    var $tobool3 = ($7 | 0) == 0;
    if ($tobool3) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $7 + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $tobool719 = ($8 | 0) == 0;
    if ($tobool719) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $9 = $8;
    var $10 = $p;
    var $neighborp_020 = $10;
    var $11 = $9;
    label = 9;
    break;
   case 9:
    var $11;
    var $neighborp_020;
    var $incdec_ptr = $neighborp_020 + 4 | 0;
    var $12 = $11 + 76 | 0;
    var $13 = $12;
    var $14 = HEAP32[$13 >> 2];
    var $15 = $14 & -16385;
    HEAP32[$13 >> 2] = $15;
    var $16 = HEAP32[$incdec_ptr >> 2];
    var $tobool7 = ($16 | 0) == 0;
    if ($tobool7) {
      label = 10;
      break;
    } else {
      var $neighborp_020 = $incdec_ptr;
      var $11 = $16;
      label = 9;
      break;
    }
   case 10:
    var $ridges = $visible_025 + 52 | 0;
    var $17 = HEAP32[$ridges >> 2];
    var $tobool11 = ($17 | 0) == 0;
    if ($tobool11) {
      var $newfacet2_1 = $newfacet2_024;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $18 = HEAP32[5249152 >> 2];
    var $visitid = $visible_025 + 68 | 0;
    HEAP32[$visitid >> 2] = $18;
    var $call13 = _qh_makenew_nonsimplicial($visible_025, $call, $numnew);
    var $newfacet2_1 = $call13;
    label = 12;
    break;
   case 12:
    var $newfacet2_1;
    var $19 = HEAP32[$5 >> 2];
    var $bf_clear16 = $19 & 8192;
    var $tobool17 = ($bf_clear16 | 0) == 0;
    if ($tobool17) {
      var $newfacet_1 = $newfacet_023;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $call19 = _qh_makenew_simplicial($visible_025, $call, $numnew);
    var $newfacet_1 = $call19;
    label = 14;
    break;
   case 14:
    var $newfacet_1;
    var $20 = HEAP32[5247124 >> 2];
    var $tobool21 = ($20 | 0) == 0;
    if ($tobool21) {
      label = 15;
      break;
    } else {
      var $newfacet_3 = $newfacet_1;
      label = 19;
      break;
    }
   case 15:
    var $tobool23 = ($newfacet2_1 | 0) == 0;
    var $newfacet_1_newfacet2_1 = $tobool23 ? $newfacet_1 : $newfacet2_1;
    var $tobool26 = ($newfacet_1_newfacet2_1 | 0) == 0;
    if ($tobool26) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $f = $visible_025 + 28 | 0;
    var $replace = $f;
    HEAP32[$replace >> 2] = $newfacet_1_newfacet2_1;
    label = 18;
    break;
   case 17:
    var $21 = HEAP32[5243816 >> 2];
    var $inc28 = $21 + 1 | 0;
    HEAP32[5243816 >> 2] = $inc28;
    label = 18;
    break;
   case 18:
    var $22 = HEAP32[$neighbors >> 2];
    var $p33 = $22 + 4 | 0;
    HEAP32[$p33 >> 2] = 0;
    var $newfacet_3 = $newfacet_1_newfacet2_1;
    label = 19;
    break;
   case 19:
    var $newfacet_3;
    var $next = $visible_025 + 44 | 0;
    var $visible_0 = HEAP32[$next >> 2];
    var $tobool1 = ($visible_0 | 0) == 0;
    if ($tobool1) {
      label = 20;
      break;
    } else {
      var $newfacet_023 = $newfacet_3;
      var $newfacet2_024 = $newfacet2_1;
      var $visible_025 = $visible_0;
      label = 5;
      break;
    }
   case 20:
    var $23 = HEAP32[5247036 >> 2];
    var $cmp = ($23 | 0) > 0;
    if ($cmp) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    _qh_fprintf(5299748);
    var $_pr = HEAP32[5247036 >> 2];
    var $cmp39 = ($_pr | 0) > 3;
    if ($cmp39) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $24 = HEAP32[5248952 >> 2];
    _qh_printfacetlist($24);
    label = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return $call;
  }
}
_qh_makenewfacets["X"] = 1;
function _qh_matchduplicates($atfacet, $atskip, $hashsize, $hashcount) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $same = __stackBase__;
    var $skip = __stackBase__ + 4;
    var $low = __stackBase__ + 8;
    var $high = __stackBase__ + 16;
    var $vertices = $atfacet + 48 | 0;
    var $0 = HEAP32[$vertices >> 2];
    var $1 = HEAP32[5247504 >> 2];
    var $p = $0 + 4 + ($atskip << 2) | 0;
    var $2 = HEAP32[$p >> 2];
    var $call = _qh_gethash($hashsize, $0, $1, 1, $2);
    var $3 = HEAP32[5247036 >> 2];
    var $cmp = ($3 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5299468);
    label = 4;
    break;
   case 4:
    var $tobool107 = ($atfacet | 0) == 0;
    var $maxmatch_0122 = 0;
    var $maxmatch2_0123 = 0;
    var $nextskip_0124 = 0;
    var $maxskip_0125 = 0;
    var $maxskip2_0126 = 0;
    var $makematch_0127 = 0;
    var $maxdist_0128 = -1.7976931348623157e+308;
    label = 5;
    break;
   case 5:
    var $maxdist_0128;
    var $makematch_0127;
    var $maxskip2_0126;
    var $maxskip_0125;
    var $nextskip_0124;
    var $maxmatch2_0123;
    var $maxmatch_0122;
    var $4 = HEAP32[5249152 >> 2];
    var $inc = $4 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    if ($tobool107) {
      var $maxmatch_1_lcssa = $maxmatch_0122;
      var $maxmatch2_1_lcssa = $maxmatch2_0123;
      var $nextskip_1_lcssa = $nextskip_0124;
      var $maxskip_1_lcssa = $maxskip_0125;
      var $maxskip2_1_lcssa = $maxskip2_0126;
      var $maxdist_1_lcssa = $maxdist_0128;
      label = 27;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $tobool40 = ($makematch_0127 | 0) == 0;
    var $newfacet_0108 = $atfacet;
    var $maxmatch_1109 = $maxmatch_0122;
    var $maxmatch2_1110 = $maxmatch2_0123;
    var $newskip_0111 = $atskip;
    var $nextskip_1112 = $nextskip_0124;
    var $maxskip_1113 = $maxskip_0125;
    var $maxskip2_1114 = $maxskip2_0126;
    var $maxdist_1115 = $maxdist_0128;
    var $5 = $inc;
    label = 9;
    break;
   case 7:
    var $tobool = ($nextfacet_2 | 0) == 0;
    if ($tobool) {
      var $maxmatch_1_lcssa = $maxmatch_5;
      var $maxmatch2_1_lcssa = $maxmatch2_5;
      var $nextskip_1_lcssa = $nextskip_4;
      var $maxskip_1_lcssa = $maxskip_5;
      var $maxskip2_1_lcssa = $maxskip2_5;
      var $maxdist_1_lcssa = $maxdist_5;
      label = 27;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre = HEAP32[5249152 >> 2];
    var $newfacet_0108 = $nextfacet_2;
    var $maxmatch_1109 = $maxmatch_5;
    var $maxmatch2_1110 = $maxmatch2_5;
    var $newskip_0111 = $nextskip_4;
    var $nextskip_1112 = $nextskip_4;
    var $maxskip_1113 = $maxskip_5;
    var $maxskip2_1114 = $maxskip2_5;
    var $maxdist_1115 = $maxdist_5;
    var $5 = $_pre;
    label = 9;
    break;
   case 9:
    var $5;
    var $maxdist_1115;
    var $maxskip2_1114;
    var $maxskip_1113;
    var $nextskip_1112;
    var $newskip_0111;
    var $maxmatch2_1110;
    var $maxmatch_1109;
    var $newfacet_0108;
    var $6 = HEAP32[5243784 >> 2];
    var $inc5 = $6 + 1 | 0;
    HEAP32[5243784 >> 2] = $inc5;
    var $visitid = $newfacet_0108 + 68 | 0;
    HEAP32[$visitid >> 2] = $5;
    var $7 = HEAP32[5249176 >> 2];
    var $p990 = $7 + 4 + ($call << 2) | 0;
    var $8 = HEAP32[$p990 >> 2];
    var $tobool1091 = ($8 | 0) == 0;
    if ($tobool1091) {
      var $maxmatch_1_lcssa = $maxmatch_1109;
      var $maxmatch2_1_lcssa = $maxmatch2_1110;
      var $nextskip_1_lcssa = $nextskip_1112;
      var $maxskip_1_lcssa = $maxskip_1113;
      var $maxskip2_1_lcssa = $maxskip2_1114;
      var $maxdist_1_lcssa = $maxdist_1115;
      label = 27;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $vertices18 = $newfacet_0108 + 48 | 0;
    var $9 = $newfacet_0108;
    var $10 = $newfacet_0108 + 76 | 0;
    var $11 = $10;
    var $neighbors42 = $newfacet_0108 + 56 | 0;
    var $maxmatch_292 = $maxmatch_1109;
    var $maxmatch2_293 = $maxmatch2_1110;
    var $nextfacet_094 = 0;
    var $nextskip_295 = $nextskip_1112;
    var $maxskip_296 = $maxskip_1113;
    var $maxskip2_297 = $maxskip2_1114;
    var $maxdist_298 = $maxdist_1115;
    var $scan_099 = $call;
    var $_in = $8;
    label = 11;
    break;
   case 11:
    var $_in;
    var $scan_099;
    var $maxdist_298;
    var $maxskip2_297;
    var $maxskip_296;
    var $nextskip_295;
    var $nextfacet_094;
    var $maxmatch2_293;
    var $maxmatch_292;
    var $12 = $_in;
    var $bf_field_offs = $_in + 76 | 0;
    var $13 = $bf_field_offs;
    var $14 = HEAP32[$13 >> 2];
    var $bf_clear = $14 & 2097152;
    var $tobool12 = ($bf_clear | 0) == 0;
    if ($tobool12) {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $visitid13 = $_in + 68 | 0;
    var $15 = $visitid13;
    var $16 = HEAP32[$15 >> 2];
    var $17 = HEAP32[5249152 >> 2];
    var $cmp14 = ($16 | 0) == ($17 | 0);
    if ($cmp14) {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $18 = HEAP32[5243808 >> 2];
    var $inc17 = $18 + 1 | 0;
    HEAP32[5243808 >> 2] = $inc17;
    var $19 = HEAP32[$vertices18 >> 2];
    var $vertices19 = $_in + 48 | 0;
    var $20 = $vertices19;
    var $21 = HEAP32[$20 >> 2];
    var $call20 = _qh_matchvertices($19, $newskip_0111, $21, $skip, $same);
    var $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $22 = HEAP32[$same >> 2];
    var $23 = HEAP32[$11 >> 2];
    var $24 = HEAP32[$13 >> 2];
    var $25 = $24 ^ $23;
    var $bf_clear2479 = $25 >>> 12;
    var $xor = $bf_clear2479 & 1;
    var $cmp27 = ($22 | 0) == ($xor | 0);
    var $26 = HEAP32[$skip >> 2];
    var $neighbors = $_in + 56 | 0;
    var $27 = $neighbors;
    var $28 = HEAP32[$27 >> 2];
    var $p30 = $28 + 4 + ($26 << 2) | 0;
    var $29 = HEAP32[$p30 >> 2];
    var $cmp31 = ($29 | 0) == 1;
    if ($cmp31) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    if ($tobool40) {
      label = 16;
      break;
    } else {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    }
   case 16:
    _qh_fprintf(5299172);
    _qh_errexit2(5, $12, $newfacet_0108);
    var $maxdist_5 = $maxdist_298;
    var $maxskip2_5 = $maxskip2_297;
    var $maxskip_5 = $maxskip_296;
    var $nextskip_4 = $nextskip_295;
    var $nextfacet_2 = $nextfacet_094;
    var $maxmatch2_5 = $maxmatch2_293;
    var $maxmatch_5 = $maxmatch_292;
    label = 26;
    break;
   case 17:
    var $cmp27_not = $cmp27 ^ 1;
    var $or_cond = $tobool40 | $cmp27_not;
    if ($or_cond) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $30 = HEAP32[$neighbors42 >> 2];
    var $p45 = $30 + 4 + ($newskip_0111 << 2) | 0;
    var $31 = HEAP32[$p45 >> 2];
    var $cmp46 = ($31 | 0) == 1;
    if ($cmp46) {
      label = 19;
      break;
    } else {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    }
   case 19:
    HEAP32[$p30 >> 2] = $9;
    var $32 = HEAP32[$11 >> 2];
    var $bf_clear54 = $32 & 512;
    var $tobool55 = ($bf_clear54 | 0) == 0;
    var $33 = HEAP32[$neighbors42 >> 2];
    var $p65 = $33 + 4 + ($newskip_0111 << 2) | 0;
    var $_ = $tobool55 ? 2 : $_in;
    HEAP32[$p65 >> 2] = $_;
    var $34 = HEAP32[$hashcount >> 2];
    var $sub = $34 - 2 | 0;
    HEAP32[$hashcount >> 2] = $sub;
    var $35 = HEAP32[5247036 >> 2];
    var $cmp67 = ($35 | 0) > 3;
    if ($cmp67) {
      label = 20;
      break;
    } else {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    }
   case 20:
    _qh_fprintf(5298968);
    var $maxdist_5 = $maxdist_298;
    var $maxskip2_5 = $maxskip2_297;
    var $maxskip_5 = $maxskip_296;
    var $nextskip_4 = $nextskip_295;
    var $nextfacet_2 = $nextfacet_094;
    var $maxmatch2_5 = $maxmatch2_293;
    var $maxmatch_5 = $maxmatch_292;
    label = 26;
    break;
   case 21:
    if ($cmp27) {
      label = 22;
      break;
    } else {
      var $maxdist_5 = $maxdist_298;
      var $maxskip2_5 = $maxskip2_297;
      var $maxskip_5 = $maxskip_296;
      var $nextskip_4 = $26;
      var $nextfacet_2 = $12;
      var $maxmatch2_5 = $maxmatch2_293;
      var $maxmatch_5 = $maxmatch_292;
      label = 26;
      break;
    }
   case 22:
    var $call77 = _qh_getdistance($12, $newfacet_0108, $low, $high);
    var $call78 = _qh_getdistance($newfacet_0108, $12, $low, $high);
    var $cmp79 = $call77 > $call78;
    var $mindist_0 = $cmp79 ? $call78 : $call77;
    var $cmp83 = $mindist_0 > $maxdist_298;
    if ($cmp83) {
      label = 23;
      break;
    } else {
      var $maxdist_3 = $maxdist_298;
      var $maxskip2_3 = $maxskip2_297;
      var $maxskip_3 = $maxskip_296;
      var $maxmatch2_3 = $maxmatch2_293;
      var $maxmatch_3 = $maxmatch_292;
      label = 24;
      break;
    }
   case 23:
    var $36 = HEAP32[$skip >> 2];
    var $maxdist_3 = $mindist_0;
    var $maxskip2_3 = $newskip_0111;
    var $maxskip_3 = $36;
    var $maxmatch2_3 = $newfacet_0108;
    var $maxmatch_3 = $12;
    label = 24;
    break;
   case 24:
    var $maxmatch_3;
    var $maxmatch2_3;
    var $maxskip_3;
    var $maxskip2_3;
    var $maxdist_3;
    var $37 = HEAP32[5247036 >> 2];
    var $cmp87 = ($37 | 0) > 2;
    if ($cmp87) {
      label = 25;
      break;
    } else {
      var $maxdist_5 = $maxdist_3;
      var $maxskip2_5 = $maxskip2_3;
      var $maxskip_5 = $maxskip_3;
      var $nextskip_4 = $nextskip_295;
      var $nextfacet_2 = $nextfacet_094;
      var $maxmatch2_5 = $maxmatch2_3;
      var $maxmatch_5 = $maxmatch_3;
      label = 26;
      break;
    }
   case 25:
    _qh_fprintf(5298680);
    var $maxdist_5 = $maxdist_3;
    var $maxskip2_5 = $maxskip2_3;
    var $maxskip_5 = $maxskip_3;
    var $nextskip_4 = $nextskip_295;
    var $nextfacet_2 = $nextfacet_094;
    var $maxmatch2_5 = $maxmatch2_3;
    var $maxmatch_5 = $maxmatch_3;
    label = 26;
    break;
   case 26:
    var $maxmatch_5;
    var $maxmatch2_5;
    var $nextfacet_2;
    var $nextskip_4;
    var $maxskip_5;
    var $maxskip2_5;
    var $maxdist_5;
    var $inc113 = $scan_099 + 1 | 0;
    var $cmp114 = ($inc113 | 0) >= ($hashsize | 0);
    var $cond = $cmp114 ? 0 : $inc113;
    var $38 = HEAP32[5249176 >> 2];
    var $p9 = $38 + 4 + ($cond << 2) | 0;
    var $39 = HEAP32[$p9 >> 2];
    var $tobool10 = ($39 | 0) == 0;
    if ($tobool10) {
      label = 7;
      break;
    } else {
      var $maxmatch_292 = $maxmatch_5;
      var $maxmatch2_293 = $maxmatch2_5;
      var $nextfacet_094 = $nextfacet_2;
      var $nextskip_295 = $nextskip_4;
      var $maxskip_296 = $maxskip_5;
      var $maxskip2_297 = $maxskip2_5;
      var $maxdist_298 = $maxdist_5;
      var $scan_099 = $cond;
      var $_in = $39;
      label = 11;
      break;
    }
   case 27:
    var $maxdist_1_lcssa;
    var $maxskip2_1_lcssa;
    var $maxskip_1_lcssa;
    var $nextskip_1_lcssa;
    var $maxmatch2_1_lcssa;
    var $maxmatch_1_lcssa;
    var $tobool118 = ($makematch_0127 | 0) == 0;
    if ($tobool118) {
      label = 28;
      break;
    } else {
      label = 34;
      break;
    }
   case 28:
    var $tobool120 = ($maxmatch_1_lcssa | 0) == 0;
    if ($tobool120) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    _qh_fprintf(5298048);
    _qh_errexit(5, $atfacet, 0);
    label = 30;
    break;
   case 30:
    var $40 = $maxmatch2_1_lcssa;
    var $neighbors124 = $maxmatch_1_lcssa + 56 | 0;
    var $41 = HEAP32[$neighbors124 >> 2];
    var $p127 = $41 + 4 + ($maxskip_1_lcssa << 2) | 0;
    HEAP32[$p127 >> 2] = $40;
    var $42 = $maxmatch_1_lcssa;
    var $neighbors128 = $maxmatch2_1_lcssa + 56 | 0;
    var $43 = HEAP32[$neighbors128 >> 2];
    var $p131 = $43 + 4 + ($maxskip2_1_lcssa << 2) | 0;
    HEAP32[$p131 >> 2] = $42;
    var $44 = HEAP32[$hashcount >> 2];
    var $sub132 = $44 - 2 | 0;
    HEAP32[$hashcount >> 2] = $sub132;
    var $45 = HEAP32[5244072 >> 2];
    var $inc133 = $45 + 1 | 0;
    HEAP32[5244072 >> 2] = $inc133;
    var $46 = HEAP32[5247036 >> 2];
    var $tobool134 = ($46 | 0) == 0;
    if ($tobool134) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _qh_fprintf(5297796);
    label = 32;
    break;
   case 32:
    _qh_precision();
    var $47 = HEAP32[5247036 >> 2];
    var $cmp139 = ($47 | 0) > 3;
    if ($cmp139) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    _qh_errprint($maxmatch_1_lcssa, $maxmatch2_1_lcssa, 0, 0);
    label = 34;
    break;
   case 34:
    var $inc145 = $makematch_0127 + 1 | 0;
    var $exitcond = ($inc145 | 0) == 2;
    if ($exitcond) {
      label = 35;
      break;
    } else {
      var $maxmatch_0122 = $maxmatch_1_lcssa;
      var $maxmatch2_0123 = $maxmatch2_1_lcssa;
      var $nextskip_0124 = $nextskip_1_lcssa;
      var $maxskip_0125 = $maxskip_1_lcssa;
      var $maxskip2_0126 = $maxskip2_1_lcssa;
      var $makematch_0127 = $inc145;
      var $maxdist_0128 = $maxdist_1_lcssa;
      label = 5;
      break;
    }
   case 35:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_matchduplicates["X"] = 1;
function _qh_newhashtable($newsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $add = $newsize << 1;
    var $mul = $add + 2 | 0;
    var $or = $mul | 1;
    var $size_0 = $or;
    label = 3;
    break;
   case 3:
    var $size_0;
    var $0 = $size_0 | $newsize;
    var $1 = ($0 | 0) < 0;
    if ($1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5296616);
    _qh_errexit(4, 0, 0);
    label = 5;
    break;
   case 5:
    var $rem = ($size_0 | 0) % 3;
    var $tobool = ($rem | 0) == 0;
    var $rem2 = ($size_0 | 0) % 5;
    var $tobool3 = ($rem2 | 0) == 0;
    var $or_cond10 = $tobool | $tobool3;
    var $add6 = $size_0 + 2 | 0;
    if ($or_cond10) {
      var $size_0 = $add6;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $call = _qh_setnew($size_0);
    HEAP32[5249176 >> 2] = $call;
    _qh_setzero($call, $size_0);
    return $size_0;
  }
}
function _qh_outcoplanar() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5296048);
    label = 4;
    break;
   case 4:
    var $facet_012 = HEAP32[5248940 >> 2];
    var $tobool13 = ($facet_012 | 0) == 0;
    if ($tobool13) {
      label = 14;
      break;
    } else {
      var $facet_014 = $facet_012;
      label = 5;
      break;
    }
   case 5:
    var $facet_014;
    var $next = $facet_014 + 44 | 0;
    var $1 = HEAP32[$next >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 14;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $outsideset = $facet_014 + 60 | 0;
    var $2 = HEAP32[$outsideset >> 2];
    var $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $p = $2 + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $tobool610 = ($3 | 0) == 0;
    if ($tobool610) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $4 = $3;
    var $incdec_ptr915 = $p + 4 | 0;
    var $incdec_ptr9 = $incdec_ptr915;
    var $incdec_ptr11 = $incdec_ptr9;
    var $5 = $4;
    label = 9;
    break;
   case 9:
    var $5;
    var $incdec_ptr11;
    var $6 = HEAP32[5249e3 >> 2];
    var $dec = $6 - 1 | 0;
    HEAP32[5249e3 >> 2] = $dec;
    var $7 = HEAP32[5247044 >> 2];
    var $8 = HEAP32[5247500 >> 2];
    var $9 = $8 | $7;
    var $10 = ($9 | 0) == 0;
    if ($10) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_distplane($5, $facet_014, $dist);
    var $11 = HEAP32[5244312 >> 2];
    var $inc = $11 + 1 | 0;
    HEAP32[5244312 >> 2] = $inc;
    _qh_partitioncoplanar($5, $facet_014, $dist);
    label = 11;
    break;
   case 11:
    var $12 = HEAP32[$incdec_ptr11 >> 2];
    var $tobool6 = ($12 | 0) == 0;
    if ($tobool6) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $incdec_ptr = $incdec_ptr11 + 4 | 0;
    var $incdec_ptr11 = $incdec_ptr;
    var $5 = $12;
    label = 9;
    break;
   case 13:
    _qh_setfree($outsideset);
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 14;
      break;
    } else {
      var $facet_014 = $facet_0;
      label = 5;
      break;
    }
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_outcoplanar["X"] = 1;
function _qh_point_add($set, $point, $elem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $call = _qh_pointid($point);
    var $cmp = ($call | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5295944);
    label = 7;
    break;
   case 4:
    var $dec = $1 - 1 | 0;
    var $tobool = ($1 | 0) == 0;
    var $size_0 = $tobool ? $0 : $dec;
    var $cmp2 = ($call | 0) < ($size_0 | 0);
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5295736);
    _qh_errexit(5, 0, 0);
    label = 7;
    break;
   case 6:
    var $p = $set + 4 + ($call << 2) | 0;
    HEAP32[$p >> 2] = $elem;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _qh_printhashtable() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249176 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 19;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $call = _qh_setsize($0);
    var $cmp43 = ($call | 0) > 0;
    if ($cmp43) {
      var $facet_i_044 = 0;
      var $facet_0_in46 = $1;
      var $neighbor_i_047 = 0;
      var $neighbor_n_048 = 0;
      label = 4;
      break;
    } else {
      label = 19;
      break;
    }
   case 4:
    var $neighbor_n_048;
    var $neighbor_i_047;
    var $facet_0_in46;
    var $facet_i_044;
    var $tobool1 = ($facet_0_in46 | 0) == 0;
    if ($tobool1) {
      var $neighbor_n_3 = $neighbor_n_048;
      var $neighbor_i_5 = $neighbor_i_047;
      label = 18;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $neighbors = $facet_0_in46 + 56 | 0;
    var $2 = $neighbors;
    var $3 = HEAP32[$2 >> 2];
    var $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      var $neighbor_n_1 = $neighbor_n_048;
      var $neighbor_i_2 = $neighbor_i_047;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p8 = $3 + 4 | 0;
    var $4 = HEAP32[$p8 >> 2];
    var $call10 = _qh_setsize($3);
    var $cmp1233 = ($call10 | 0) < 1;
    var $switch34 = $4 >>> 0 < 3;
    var $or_cond35 = $cmp1233 | $switch34;
    if ($or_cond35) {
      var $neighbor_n_1 = $call10;
      var $neighbor_i_2 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $5 = HEAP32[$2 >> 2];
    var $neighbor_i_136 = 0;
    label = 8;
    break;
   case 8:
    var $neighbor_i_136;
    var $inc = $neighbor_i_136 + 1 | 0;
    var $p22 = $5 + 4 + ($inc << 2) | 0;
    var $6 = HEAP32[$p22 >> 2];
    var $cmp12 = ($inc | 0) >= ($call10 | 0);
    var $switch = $6 >>> 0 < 3;
    var $or_cond = $cmp12 | $switch;
    if ($or_cond) {
      var $neighbor_n_1 = $call10;
      var $neighbor_i_2 = $inc;
      label = 9;
      break;
    } else {
      var $neighbor_i_136 = $inc;
      label = 8;
      break;
    }
   case 9:
    var $neighbor_i_2;
    var $neighbor_n_1;
    var $cmp24 = ($neighbor_i_2 | 0) == ($neighbor_n_1 | 0);
    if ($cmp24) {
      var $neighbor_n_3 = $neighbor_i_2;
      var $neighbor_i_5 = $neighbor_i_2;
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5295488);
    var $vertices = $facet_0_in46 + 48 | 0;
    var $7 = $vertices;
    var $8 = HEAP32[$7 >> 2];
    var $tobool28 = ($8 | 0) == 0;
    if ($tobool28) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $p33 = $8 + 4 | 0;
    var $9 = HEAP32[$p33 >> 2];
    var $tobool3537 = ($9 | 0) == 0;
    if ($tobool3537) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $10 = $p33;
    var $vertexp_038 = $10;
    label = 13;
    break;
   case 13:
    var $vertexp_038;
    var $incdec_ptr = $vertexp_038 + 4 | 0;
    _qh_fprintf(5295392);
    var $11 = HEAP32[$incdec_ptr >> 2];
    var $tobool35 = ($11 | 0) == 0;
    if ($tobool35) {
      label = 14;
      break;
    } else {
      var $vertexp_038 = $incdec_ptr;
      label = 13;
      break;
    }
   case 14:
    _qh_fprintf(5295140);
    var $12 = HEAP32[$2 >> 2];
    var $tobool40 = ($12 | 0) == 0;
    if ($tobool40) {
      var $neighbor_n_2 = $neighbor_n_1;
      var $neighbor_i_4 = $neighbor_i_2;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $call47 = _qh_setsize($12);
    var $cmp4939 = ($call47 | 0) > 0;
    if ($cmp4939) {
      var $neighbor_i_341 = 0;
      label = 16;
      break;
    } else {
      var $neighbor_n_2 = $call47;
      var $neighbor_i_4 = 0;
      label = 17;
      break;
    }
   case 16:
    var $neighbor_i_341;
    _qh_fprintf(5295004);
    var $inc61 = $neighbor_i_341 + 1 | 0;
    var $exitcond = ($inc61 | 0) == ($call47 | 0);
    if ($exitcond) {
      var $neighbor_n_2 = $call47;
      var $neighbor_i_4 = $call47;
      label = 17;
      break;
    } else {
      var $neighbor_i_341 = $inc61;
      label = 16;
      break;
    }
   case 17:
    var $neighbor_i_4;
    var $neighbor_n_2;
    _qh_fprintf(5299656);
    var $neighbor_n_3 = $neighbor_n_2;
    var $neighbor_i_5 = $neighbor_i_4;
    label = 18;
    break;
   case 18:
    var $neighbor_i_5;
    var $neighbor_n_3;
    var $inc70 = $facet_i_044 + 1 | 0;
    var $13 = HEAP32[5249176 >> 2];
    var $p73 = $13 + 4 + ($inc70 << 2) | 0;
    var $14 = HEAP32[$p73 >> 2];
    var $exitcond49 = ($inc70 | 0) == ($call | 0);
    if ($exitcond49) {
      label = 19;
      break;
    } else {
      var $facet_i_044 = $inc70;
      var $facet_0_in46 = $14;
      var $neighbor_i_047 = $neighbor_i_5;
      var $neighbor_n_048 = $neighbor_n_3;
      label = 4;
      break;
    }
   case 19:
    return;
  }
}
_qh_printhashtable["X"] = 1;
function _qh_triangulate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $new_vertex_list = __stackBase__;
    var $0 = HEAP32[5247124 >> 2];
    HEAP32[$new_vertex_list >> 2] = 0;
    var $1 = HEAP32[5249048 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 80;
      break;
    }
   case 3:
    var $2 = HEAP32[5247036 >> 2];
    var $cmp = ($2 | 0) > 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _qh_fprintf(5294440);
    label = 5;
    break;
   case 5:
    var $3 = HEAP32[5247504 >> 2];
    var $cmp3 = ($3 | 0) == 2;
    if ($cmp3) {
      label = 80;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $4 = HEAP32[5247472 >> 2];
    var $tobool6 = ($4 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_clearcenters(1);
    _qh_vertexneighbors();
    label = 8;
    break;
   case 8:
    HEAP32[5247124 >> 2] = 0;
    var $5 = HEAP32[5249152 >> 2];
    var $inc = $5 + 1 | 0;
    HEAP32[5249152 >> 2] = $inc;
    HEAP32[5249088 >> 2] = 1;
    var $6 = HEAP32[5248936 >> 2];
    var $call = _qh_settemp($6);
    HEAP32[5249172 >> 2] = $call;
    var $7 = HEAP32[5248984 >> 2];
    HEAP32[5248988 >> 2] = $7;
    var $8 = HEAP32[5248940 >> 2];
    var $facet_0_ph = $8;
    var $new_facet_list_0_ph = 0;
    label = 9;
    break;
   case 9:
    var $new_facet_list_0_ph;
    var $facet_0_ph;
    var $facet_0 = $facet_0_ph;
    label = 10;
    break;
   case 10:
    var $facet_0;
    var $tobool9 = ($facet_0 | 0) == 0;
    if ($tobool9) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $next = $facet_0 + 44 | 0;
    var $9 = HEAP32[$next >> 2];
    var $tobool10 = ($9 | 0) == 0;
    if ($tobool10) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $10 = $facet_0 + 76 | 0;
    var $11 = $10;
    var $12 = HEAP32[$11 >> 2];
    var $13 = $12 & 10240;
    var $14 = ($13 | 0) == 0;
    if ($14) {
      label = 13;
      break;
    } else {
      var $facet_0 = $9;
      label = 10;
      break;
    }
   case 13:
    var $tobool18 = ($new_facet_list_0_ph | 0) == 0;
    var $facet_0_new_facet_list_0 = $tobool18 ? $facet_0 : $new_facet_list_0_ph;
    _qh_triangulate_facet($facet_0, $new_vertex_list);
    var $facet_0_ph = $9;
    var $new_facet_list_0_ph = $facet_0_new_facet_list_0;
    label = 9;
    break;
   case 14:
    var $15 = HEAP32[5247036 >> 2];
    var $cmp21 = ($15 | 0) > 1;
    if ($cmp21) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _qh_fprintf(5294228);
    label = 16;
    break;
   case 16:
    var $tobool26107 = ($new_facet_list_0_ph | 0) == 0;
    if ($tobool26107) {
      label = 25;
      break;
    } else {
      var $facet_1108 = $new_facet_list_0_ph;
      label = 17;
      break;
    }
   case 17:
    var $facet_1108;
    var $next28 = $facet_1108 + 44 | 0;
    var $16 = HEAP32[$next28 >> 2];
    var $tobool29 = ($16 | 0) == 0;
    if ($tobool29) {
      label = 25;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $17 = $facet_1108 + 76 | 0;
    var $18 = $17;
    var $19 = HEAP32[$18 >> 2];
    var $bf_clear34 = $19 & 2048;
    var $tobool35 = ($bf_clear34 | 0) == 0;
    if ($tobool35) {
      label = 19;
      break;
    } else {
      var $facet_1108 = $16;
      label = 17;
      break;
    }
   case 19:
    var $ridges = $facet_1108 + 52 | 0;
    var $20 = HEAP32[$ridges >> 2];
    var $tobool38 = ($20 | 0) == 0;
    if ($tobool38) {
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $call41 = _qh_setsize($20);
    var $cmp42 = ($call41 | 0) > 0;
    if ($cmp42) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _qh_fprintf(5294004);
    _qh_errexit(5, $facet_1108, 0);
    label = 22;
    break;
   case 22:
    _qh_setfree($ridges);
    label = 23;
    break;
   case 23:
    var $vertices = $facet_1108 + 48 | 0;
    var $21 = HEAP32[$vertices >> 2];
    var $p = $21 + 4 | 0;
    var $22 = HEAP32[$p >> 2];
    var $p51 = $21 + 8 | 0;
    var $23 = HEAP32[$p51 >> 2];
    var $cmp52 = ($22 | 0) == ($23 | 0);
    if ($cmp52) {
      label = 24;
      break;
    } else {
      var $facet_1108 = $16;
      label = 17;
      break;
    }
   case 24:
    var $24 = HEAP32[5244664 >> 2];
    var $inc54 = $24 + 1 | 0;
    HEAP32[5244664 >> 2] = $inc54;
    _qh_triangulate_null($facet_1108);
    var $facet_1108 = $16;
    label = 17;
    break;
   case 25:
    var $25 = HEAP32[5247036 >> 2];
    var $cmp58 = ($25 | 0) > 1;
    if ($cmp58) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $26 = HEAP32[5249172 >> 2];
    var $call60 = _qh_setsize($26);
    _qh_fprintf(5293892);
    label = 27;
    break;
   case 27:
    var $27 = HEAP32[5248944 >> 2];
    HEAP32[5248956 >> 2] = $27;
    var $28 = HEAP32[5249172 >> 2];
    var $call62104 = _qh_setdellast($28);
    var $tobool63105 = ($call62104 | 0) == 0;
    if ($tobool63105) {
      label = 31;
      break;
    } else {
      var $call62106 = $call62104;
      label = 28;
      break;
    }
   case 28:
    var $call62106;
    var $facet164 = $call62106 + 8 | 0;
    var $29 = $facet164;
    var $30 = HEAP32[$29 >> 2];
    var $facet265 = $call62106 + 12 | 0;
    var $31 = $facet265;
    var $32 = HEAP32[$31 >> 2];
    var $type = $call62106 + 16 | 0;
    var $33 = $type;
    var $34 = HEAP32[$33 >> 2];
    _qh_memfree($call62106, 20);
    var $cmp66 = ($34 | 0) == 8;
    if ($cmp66) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $35 = HEAP32[5244656 >> 2];
    var $inc68 = $35 + 1 | 0;
    HEAP32[5244656 >> 2] = $inc68;
    _qh_triangulate_mirror($30, $32);
    label = 30;
    break;
   case 30:
    var $36 = HEAP32[5249172 >> 2];
    var $call62 = _qh_setdellast($36);
    var $tobool63 = ($call62 | 0) == 0;
    if ($tobool63) {
      label = 31;
      break;
    } else {
      var $call62106 = $call62;
      label = 28;
      break;
    }
   case 31:
    _qh_settempfree(5249172);
    var $37 = HEAP32[5247036 >> 2];
    var $cmp70 = ($37 | 0) > 1;
    if ($cmp70) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _qh_fprintf(5293696);
    label = 33;
    break;
   case 33:
    var $38 = HEAP32[$new_vertex_list >> 2];
    HEAP32[5248988 >> 2] = $38;
    HEAP32[5248956 >> 2] = 0;
    _qh_updatevertices();
    _qh_resetlists(0, 0);
    var $39 = HEAP32[5247036 >> 2];
    var $cmp80 = ($39 | 0) > 1;
    if ($cmp80) {
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 34:
    _qh_fprintf(5293484);
    var $_pr = HEAP32[5247036 >> 2];
    var $cmp89 = ($_pr | 0) > 1;
    if ($cmp89) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    _qh_fprintf(5293196);
    label = 36;
    break;
   case 36:
    if ($tobool26107) {
      label = 50;
      break;
    } else {
      var $orig_neighbor_0102 = 0;
      var $facet_2103 = $new_facet_list_0_ph;
      label = 37;
      break;
    }
   case 37:
    var $facet_2103;
    var $orig_neighbor_0102;
    var $next97 = $facet_2103 + 44 | 0;
    var $40 = HEAP32[$next97 >> 2];
    var $tobool98 = ($40 | 0) == 0;
    if ($tobool98) {
      label = 50;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $41 = $facet_2103 + 76 | 0;
    var $42 = $41;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $43 & 2560;
    var $45 = ($44 | 0) == 512;
    if ($45) {
      label = 39;
      break;
    } else {
      var $orig_neighbor_3 = $orig_neighbor_0102;
      label = 49;
      break;
    }
   case 39:
    var $neighbors = $facet_2103 + 56 | 0;
    var $46 = HEAP32[$neighbors >> 2];
    var $tobool108 = ($46 | 0) == 0;
    if ($tobool108) {
      var $orig_neighbor_3 = $orig_neighbor_0102;
      label = 49;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $p113 = $46 + 4 | 0;
    var $47 = HEAP32[$p113 >> 2];
    var $call115 = _qh_setsize($46);
    var $cmp11796 = ($call115 | 0) > 0;
    if ($cmp11796) {
      var $orig_neighbor_198 = $orig_neighbor_0102;
      var $neighbor_i_099 = 0;
      var $neighbor_0100_in = $47;
      label = 41;
      break;
    } else {
      var $orig_neighbor_3 = $orig_neighbor_0102;
      label = 49;
      break;
    }
   case 41:
    var $neighbor_0100_in;
    var $neighbor_i_099;
    var $orig_neighbor_198;
    var $neighbor_0100 = $neighbor_0100_in;
    var $cmp119 = ($neighbor_i_099 | 0) == 0;
    var $bf_field_offs121 = $neighbor_0100_in + 76 | 0;
    var $48 = $bf_field_offs121;
    var $49 = HEAP32[$48 >> 2];
    var $bf_clear122 = $49 & 512;
    var $tobool123 = ($bf_clear122 | 0) != 0;
    if ($cmp119) {
      label = 42;
      break;
    } else {
      label = 44;
      break;
    }
   case 42:
    if ($tobool123) {
      label = 43;
      break;
    } else {
      var $orig_neighbor_2 = $neighbor_0100;
      label = 48;
      break;
    }
   case 43:
    var $f = $neighbor_0100_in + 28 | 0;
    var $triowner = $f;
    var $50 = HEAP32[$triowner >> 2];
    var $orig_neighbor_2 = $50;
    label = 48;
    break;
   case 44:
    if ($tobool123) {
      label = 45;
      break;
    } else {
      var $otherfacet_0 = $neighbor_0100;
      label = 46;
      break;
    }
   case 45:
    var $f131 = $neighbor_0100_in + 28 | 0;
    var $triowner132 = $f131;
    var $51 = HEAP32[$triowner132 >> 2];
    var $otherfacet_0 = $51;
    label = 46;
    break;
   case 46:
    var $otherfacet_0;
    var $cmp135 = ($orig_neighbor_198 | 0) == ($otherfacet_0 | 0);
    if ($cmp135) {
      label = 47;
      break;
    } else {
      var $orig_neighbor_2 = $orig_neighbor_198;
      label = 48;
      break;
    }
   case 47:
    var $52 = HEAP32[5244648 >> 2];
    var $inc137 = $52 + 1 | 0;
    HEAP32[5244648 >> 2] = $inc137;
    var $53 = HEAP32[$42 >> 2];
    var $54 = $53 | 1073741824;
    HEAP32[$42 >> 2] = $54;
    var $orig_neighbor_3 = $orig_neighbor_198;
    label = 49;
    break;
   case 48:
    var $orig_neighbor_2;
    var $inc142 = $neighbor_i_099 + 1 | 0;
    var $55 = HEAP32[$neighbors >> 2];
    var $p146 = $55 + 4 + ($inc142 << 2) | 0;
    var $56 = HEAP32[$p146 >> 2];
    var $cmp117 = ($inc142 | 0) < ($call115 | 0);
    if ($cmp117) {
      var $orig_neighbor_198 = $orig_neighbor_2;
      var $neighbor_i_099 = $inc142;
      var $neighbor_0100_in = $56;
      label = 41;
      break;
    } else {
      var $orig_neighbor_3 = $orig_neighbor_2;
      label = 49;
      break;
    }
   case 49:
    var $orig_neighbor_3;
    var $57 = HEAP32[$next97 >> 2];
    var $tobool95 = ($57 | 0) == 0;
    if ($tobool95) {
      label = 50;
      break;
    } else {
      var $orig_neighbor_0102 = $orig_neighbor_3;
      var $facet_2103 = $57;
      label = 37;
      break;
    }
   case 50:
    var $58 = HEAP32[5247036 >> 2];
    var $cmp154 = ($58 | 0) > 1;
    if ($cmp154) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    _qh_fprintf(5293064);
    label = 52;
    break;
   case 52:
    if ($tobool26107) {
      label = 77;
      break;
    } else {
      var $visible_0_ph125 = 0;
      var $facet_3_ph126 = $new_facet_list_0_ph;
      label = 53;
      break;
    }
   case 53:
    var $facet_3_ph126;
    var $visible_0_ph125;
    var $next211 = $visible_0_ph125 + 44 | 0;
    var $coplanarset = $visible_0_ph125 + 64 | 0;
    var $outsideset = $visible_0_ph125 + 60 | 0;
    var $center = $visible_0_ph125 + 36 | 0;
    var $normal = $visible_0_ph125 + 24 | 0;
    var $owner_0_ph116 = 0;
    var $facet_3_ph86117 = $facet_3_ph126;
    label = 54;
    break;
   case 54:
    var $facet_3_ph86117;
    var $owner_0_ph116;
    var $tobool202 = ($owner_0_ph116 | 0) == 0;
    var $facet_393 = $facet_3_ph86117;
    label = 55;
    break;
   case 55:
    var $facet_393;
    var $next160 = $facet_393 + 44 | 0;
    var $59 = HEAP32[$next160 >> 2];
    var $tobool161 = ($59 | 0) == 0;
    if ($tobool161) {
      var $owner_0_ph114 = $owner_0_ph116;
      label = 73;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $60 = $facet_393 + 76 | 0;
    var $61 = $60;
    var $62 = HEAP32[$61 >> 2];
    var $bf_clear166 = $62 & 2048;
    var $tobool167 = ($bf_clear166 | 0) == 0;
    var $bf_clear170 = $62 & 512;
    var $tobool171 = ($bf_clear170 | 0) != 0;
    if ($tobool167) {
      label = 63;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    if ($tobool171) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    _qh_delfacet($facet_393);
    var $63 = HEAP32[5248960 >> 2];
    var $dec = $63 - 1 | 0;
    HEAP32[5248960 >> 2] = $dec;
    var $facet_393 = $59;
    label = 55;
    break;
   case 59:
    var $tobool174 = ($visible_0_ph125 | 0) != 0;
    var $or_cond82 = $tobool174 & $tobool202;
    if ($or_cond82) {
      label = 61;
      break;
    } else {
      var $visible_0_ph125 = $facet_393;
      var $facet_3_ph126 = $59;
      label = 53;
      break;
    }
   case 60:
    _qh_delfacet($visible_0_ph125);
    var $64 = HEAP32[5248960 >> 2];
    var $dec182 = $64 - 1 | 0;
    HEAP32[5248960 >> 2] = $dec182;
    var $visible_0_ph125 = $facet_393;
    var $facet_3_ph126 = $59;
    label = 53;
    break;
   case 61:
    var $65 = HEAP32[5247036 >> 2];
    var $cmp178 = ($65 | 0) > 1;
    if ($cmp178) {
      label = 62;
      break;
    } else {
      label = 60;
      break;
    }
   case 62:
    _qh_fprintf(5292956);
    label = 60;
    break;
   case 63:
    if ($tobool171) {
      label = 64;
      break;
    } else {
      var $facet_393 = $59;
      label = 55;
      break;
    }
   case 64:
    var $f190 = $facet_393 + 28 | 0;
    var $triowner191 = $f190;
    var $66 = HEAP32[$triowner191 >> 2];
    var $cmp192 = ($66 | 0) == ($visible_0_ph125 | 0);
    if ($cmp192) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    _qh_fprintf(5292724);
    _qh_errexit2(5, $facet_393, $visible_0_ph125);
    label = 66;
    break;
   case 66:
    if ($tobool202) {
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    HEAP32[$triowner191 >> 2] = $owner_0_ph116;
    var $facet_393 = $59;
    label = 55;
    break;
   case 68:
    var $67 = HEAP32[$61 >> 2];
    var $bf_clear208 = $67 & 1073741824;
    var $tobool209 = ($bf_clear208 | 0) == 0;
    if ($tobool209) {
      label = 70;
      break;
    } else {
      var $facet_3_ph86_be = $59;
      var $owner_0_ph_be = 0;
      label = 69;
      break;
    }
   case 69:
    var $owner_0_ph_be;
    var $facet_3_ph86_be;
    var $tobool15892 = ($facet_3_ph86_be | 0) == 0;
    if ($tobool15892) {
      var $owner_0_ph114 = $owner_0_ph_be;
      label = 73;
      break;
    } else {
      var $owner_0_ph116 = $owner_0_ph_be;
      var $facet_3_ph86117 = $facet_3_ph86_be;
      label = 54;
      break;
    }
   case 70:
    var $68 = HEAP32[$next211 >> 2];
    var $69 = $67 | 268435456;
    HEAP32[$61 >> 2] = $69;
    var $70 = HEAP32[$coplanarset >> 2];
    var $coplanarset213 = $facet_393 + 64 | 0;
    HEAP32[$coplanarset213 >> 2] = $70;
    var $71 = HEAP32[$outsideset >> 2];
    var $outsideset214 = $facet_393 + 60 | 0;
    HEAP32[$outsideset214 >> 2] = $71;
    HEAP32[$coplanarset >> 2] = 0;
    HEAP32[$outsideset >> 2] = 0;
    var $72 = HEAP32[5247452 >> 2];
    var $tobool217 = ($72 | 0) == 0;
    if ($tobool217) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    HEAP32[$center >> 2] = 0;
    HEAP32[$normal >> 2] = 0;
    label = 72;
    break;
   case 72:
    _qh_delfacet($visible_0_ph125);
    var $73 = HEAP32[5248960 >> 2];
    var $dec220 = $73 - 1 | 0;
    HEAP32[5248960 >> 2] = $dec220;
    var $facet_3_ph86_be = $68;
    var $owner_0_ph_be = $facet_393;
    label = 69;
    break;
   case 73:
    var $owner_0_ph114;
    var $tobool227 = ($visible_0_ph125 | 0) != 0;
    var $tobool229 = ($owner_0_ph114 | 0) == 0;
    var $or_cond83 = $tobool227 & $tobool229;
    if ($or_cond83) {
      label = 74;
      break;
    } else {
      label = 77;
      break;
    }
   case 74:
    var $74 = HEAP32[5247036 >> 2];
    var $cmp231 = ($74 | 0) > 1;
    if ($cmp231) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    _qh_fprintf(5292544);
    label = 76;
    break;
   case 76:
    _qh_delfacet($visible_0_ph125);
    var $75 = HEAP32[5248960 >> 2];
    var $dec235 = $75 - 1 | 0;
    HEAP32[5248960 >> 2] = $dec235;
    label = 77;
    break;
   case 77:
    HEAP32[5249088 >> 2] = 0;
    HEAP32[5247124 >> 2] = $0;
    var $76 = HEAP32[5246976 >> 2];
    var $tobool237 = ($76 | 0) == 0;
    if ($tobool237) {
      label = 79;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    var $77 = HEAP32[5248940 >> 2];
    _qh_checkpolygon($77);
    label = 79;
    break;
   case 79:
    HEAP32[5249048 >> 2] = 1;
    label = 80;
    break;
   case 80:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_triangulate["X"] = 1;
function _qh_triangulate_facet($facetA, $first_vertex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $numnew = __stackBase__;
    HEAP32[$numnew >> 2] = 0;
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    _qh_fprintf(5292328);
    var $_pr = HEAP32[5247036 >> 2];
    var $cmp1 = ($_pr | 0) > 3;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _qh_printfacet($facetA);
    label = 5;
    break;
   case 5:
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool645 = ($2 | 0) == 0;
    if ($tobool645) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $3 = $2;
    var $4 = $p;
    var $neighborp_046 = $4;
    var $5 = $3;
    label = 8;
    break;
   case 8:
    var $5;
    var $neighborp_046;
    var $incdec_ptr = $neighborp_046 + 4 | 0;
    var $6 = $5 + 76 | 0;
    var $7 = $6;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 & -16793601;
    HEAP32[$7 >> 2] = $9;
    var $10 = HEAP32[$incdec_ptr >> 2];
    var $tobool6 = ($10 | 0) == 0;
    if ($tobool6) {
      label = 9;
      break;
    } else {
      var $neighborp_046 = $incdec_ptr;
      var $5 = $10;
      label = 8;
      break;
    }
   case 9:
    var $11 = HEAP32[5249032 >> 2];
    var $cmp9 = ($11 | 0) == 1;
    if ($cmp9) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 10:
    var $center = $facetA + 36 | 0;
    var $12 = HEAP32[$center >> 2];
    var $tobool10 = ($12 | 0) == 0;
    if ($tobool10) {
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    var $13 = HEAP32[5247504 >> 2];
    var $sub = $13 - 1 | 0;
    var $normal = $facetA + 24 | 0;
    var $14 = HEAP32[$normal >> 2];
    var $arrayidx12 = $14 + ($sub << 3) | 0;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx12 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx12 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp13 = $15 < 0;
    if ($cmp13) {
      label = 12;
      break;
    } else {
      var $cond = $15;
      label = 13;
      break;
    }
   case 12:
    var $sub17 = -$15;
    var $cond = $sub17;
    label = 13;
    break;
   case 13:
    var $cond;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248600 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248604 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $16 * 2;
    var $cmp21 = $cond < $mul;
    if ($cmp21) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $vertices = $facetA + 48 | 0;
    var $17 = HEAP32[$vertices >> 2];
    var $call = _qh_facetcenter($17);
    HEAP32[$center >> 2] = $call;
    label = 15;
    break;
   case 15:
    _qh_willdelete($facetA, 0);
    var $18 = HEAP32[5248944 >> 2];
    HEAP32[5248952 >> 2] = $18;
    var $19 = HEAP32[5249152 >> 2];
    var $visitid = $facetA + 68 | 0;
    HEAP32[$visitid >> 2] = $19;
    var $vertices25 = $facetA + 48 | 0;
    var $20 = HEAP32[$vertices25 >> 2];
    var $p28 = $20 + 4 | 0;
    var $21 = HEAP32[$p28 >> 2];
    var $22 = $21;
    var $call29 = _qh_makenew_nonsimplicial($facetA, $22, $numnew);
    var $23 = HEAP32[$neighbors >> 2];
    var $p33 = $23 + 4 | 0;
    HEAP32[$p33 >> 2] = 0;
    var $newfacet_042 = HEAP32[5248952 >> 2];
    var $tobool3543 = ($newfacet_042 | 0) == 0;
    if ($tobool3543) {
      label = 24;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $24 = $facetA + 76 | 0;
    var $25 = $24;
    var $normal62 = $facetA + 24 | 0;
    var $center64 = $facetA + 36 | 0;
    var $offset = $facetA + 16 | 0;
    var $maxoutside = $facetA + 8 | 0;
    var $newfacet_044 = $newfacet_042;
    label = 17;
    break;
   case 17:
    var $newfacet_044;
    var $next = $newfacet_044 + 44 | 0;
    var $26 = HEAP32[$next >> 2];
    var $tobool36 = ($26 | 0) == 0;
    if ($tobool36) {
      label = 24;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $27 = $newfacet_044 + 76 | 0;
    var $28 = $27;
    var $29 = HEAP32[$28 >> 2];
    var $30 = $29 | 512;
    var $f = $newfacet_044 + 28 | 0;
    var $trivisible = $f;
    HEAP32[$trivisible >> 2] = $facetA;
    var $31 = $30 & -1073741825;
    HEAP32[$28 >> 2] = $31;
    var $32 = HEAP32[$25 >> 2];
    var $bf_clear = $32 & 131072;
    var $33 = $30 & -1073872897;
    var $34 = $bf_clear | $33;
    HEAP32[$28 >> 2] = $34;
    var $35 = HEAP32[$25 >> 2];
    var $bf_clear43 = $35 & 524288;
    var $36 = $34 & -1074266113;
    var $37 = $36 | $bf_clear43;
    HEAP32[$28 >> 2] = $37;
    var $38 = HEAP32[5247452 >> 2];
    var $tobool46 = ($38 | 0) == 0;
    if ($tobool46) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $39 = $37 | 268435456;
    HEAP32[$28 >> 2] = $39;
    var $40 = HEAP32[$normal62 >> 2];
    var $41 = HEAP32[5247504 >> 2];
    var $call50 = _qh_copypoints($40, 1, $41);
    var $normal51 = $newfacet_044 + 24 | 0;
    HEAP32[$normal51 >> 2] = $call50;
    var $42 = HEAP32[5249032 >> 2];
    var $cmp52 = ($42 | 0) == 2;
    if ($cmp52) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $call54 = _qh_getcentrum($newfacet_044);
    var $center55 = $newfacet_044 + 36 | 0;
    HEAP32[$center55 >> 2] = $call54;
    label = 23;
    break;
   case 21:
    var $43 = HEAP32[$center64 >> 2];
    var $44 = HEAP32[5247504 >> 2];
    var $call57 = _qh_copypoints($43, 1, $44);
    var $center58 = $newfacet_044 + 36 | 0;
    HEAP32[$center58 >> 2] = $call57;
    label = 23;
    break;
   case 22:
    var $45 = $37 & -1342177281;
    HEAP32[$28 >> 2] = $45;
    var $46 = HEAP32[$normal62 >> 2];
    var $normal63 = $newfacet_044 + 24 | 0;
    HEAP32[$normal63 >> 2] = $46;
    var $47 = HEAP32[$center64 >> 2];
    var $center65 = $newfacet_044 + 36 | 0;
    HEAP32[$center65 >> 2] = $47;
    label = 23;
    break;
   case 23:
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$offset >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$offset + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $offset67 = $newfacet_044 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $48, HEAP32[$offset67 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$offset67 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$maxoutside >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$maxoutside + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $maxoutside68 = $newfacet_044 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $49, HEAP32[$maxoutside68 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$maxoutside68 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $newfacet_0 = HEAP32[$next >> 2];
    var $tobool35 = ($newfacet_0 | 0) == 0;
    if ($tobool35) {
      label = 24;
      break;
    } else {
      var $newfacet_044 = $newfacet_0;
      label = 17;
      break;
    }
   case 24:
    _qh_matchnewfacets();
    var $50 = HEAP32[5244624 >> 2];
    var $inc = $50 + 1 | 0;
    HEAP32[5244624 >> 2] = $inc;
    var $51 = HEAP32[$numnew >> 2];
    var $52 = HEAP32[5244640 >> 2];
    var $add = $52 + $51 | 0;
    HEAP32[5244640 >> 2] = $add;
    var $53 = HEAP32[5244632 >> 2];
    var $cmp71 = ($53 | 0) < ($51 | 0);
    if ($cmp71) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[5244632 >> 2] = $51;
    label = 26;
    break;
   case 26:
    HEAP32[5248956 >> 2] = 0;
    var $54 = HEAP32[$first_vertex >> 2];
    var $tobool74 = ($54 | 0) == 0;
    if ($tobool74) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $55 = HEAP32[5248988 >> 2];
    HEAP32[$first_vertex >> 2] = $55;
    label = 28;
    break;
   case 28:
    HEAP32[5248988 >> 2] = 0;
    _qh_updatevertices();
    _qh_resetlists(0, 0);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_triangulate_facet["X"] = 1;
function _qh_triangulate_null($facetA) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5291680);
    label = 4;
    break;
   case 4:
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $3 = $2;
    var $p4 = $1 + 8 | 0;
    var $4 = HEAP32[$p4 >> 2];
    var $5 = $4;
    _qh_triangulate_link($facetA, $3, $facetA, $5);
    _qh_willdelete($facetA, 0);
    return;
  }
}
function _qh_triangulate_mirror($facetA, $facetB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5291884);
    label = 4;
    break;
   case 4:
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $1 + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $call = _qh_setsize($1);
    var $cmp515 = ($call | 0) > 0;
    if ($cmp515) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $neighbors6 = $facetB + 56 | 0;
    var $neighbor_i_016 = 0;
    var $neighbor_018_in = $2;
    label = 7;
    break;
   case 7:
    var $neighbor_018_in;
    var $neighbor_i_016;
    var $3 = HEAP32[$neighbors6 >> 2];
    var $p9 = $3 + 4 + ($neighbor_i_016 << 2) | 0;
    var $4 = HEAP32[$p9 >> 2];
    var $cmp10 = ($neighbor_018_in | 0) == ($4 | 0);
    if ($cmp10) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $neighbor_018 = $neighbor_018_in;
    var $5 = $4;
    _qh_triangulate_link($facetA, $neighbor_018, $facetB, $5);
    label = 9;
    break;
   case 9:
    var $inc = $neighbor_i_016 + 1 | 0;
    var $exitcond = ($inc | 0) == ($call | 0);
    if ($exitcond) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $6 = HEAP32[$neighbors >> 2];
    var $p16 = $6 + 4 + ($inc << 2) | 0;
    var $7 = HEAP32[$p16 >> 2];
    var $neighbor_i_016 = $inc;
    var $neighbor_018_in = $7;
    label = 7;
    break;
   case 11:
    _qh_willdelete($facetA, 0);
    _qh_willdelete($facetB, 0);
    return;
  }
}
function _qh_triangulate_link($oldfacetA, $facetA, $oldfacetB, $facetB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247036 >> 2];
    var $cmp = ($0 | 0) > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5292192);
    label = 4;
    break;
   case 4:
    var $neighbors = $facetA + 56 | 0;
    var $1 = HEAP32[$neighbors >> 2];
    var $2 = $facetB;
    var $call = _qh_setin($1, $2);
    var $tobool = ($call | 0) == 0;
    var $neighbors5 = $facetB + 56 | 0;
    var $3 = HEAP32[$neighbors5 >> 2];
    var $4 = $facetA;
    var $call6 = _qh_setin($3, $4);
    var $tobool7 = ($call6 | 0) != 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    if ($tobool7) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    _qh_appendmergeset($facetA, $facetB, 8, 0);
    label = 9;
    break;
   case 7:
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5292040);
    _qh_errexit2(5, $facetA, $facetB);
    label = 9;
    break;
   case 9:
    var $5 = HEAP32[$neighbors5 >> 2];
    var $6 = $oldfacetB;
    _qh_setreplace($5, $6, $4);
    var $7 = HEAP32[$neighbors >> 2];
    var $8 = $oldfacetA;
    _qh_setreplace($7, $8, $2);
    return;
  }
}
function _qh_vertexintersect($vertexsetA, $vertexsetB) {
  var $call = _qh_vertexintersect_new(HEAP32[$vertexsetA >> 2], $vertexsetB);
  _qh_settempfree($vertexsetA);
  HEAP32[$vertexsetA >> 2] = $call;
  _qh_settemppush($call);
  return;
}
function _qh_setaddnth($setp, $nth, $newelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$setp >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $0 | 0;
    var $1 = HEAP32[$maxsize >> 2];
    var $arrayidx = $0 + 4 + ($1 << 2) | 0;
    var $i1 = $arrayidx;
    var $2 = HEAP32[$i1 >> 2];
    var $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $sizep_0 = $arrayidx;
      var $5 = $2;
      label = 5;
      break;
    }
   case 4:
    _qh_setlarger($setp);
    var $3 = HEAP32[$setp >> 2];
    var $maxsize2 = $3 | 0;
    var $4 = HEAP32[$maxsize2 >> 2];
    var $arrayidx4 = $3 + 4 + ($4 << 2) | 0;
    var $i5_phi_trans_insert = $arrayidx4;
    var $_pre = HEAP32[$i5_phi_trans_insert >> 2];
    var $sizep_0 = $arrayidx4;
    var $5 = $_pre;
    label = 5;
    break;
   case 5:
    var $5;
    var $sizep_0;
    var $sub = $5 - 1 | 0;
    var $cmp6 = ($nth | 0) < 0;
    var $cmp8 = ($sub | 0) < ($nth | 0);
    var $or_cond = $cmp6 | $cmp8;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      var $7 = $5;
      label = 7;
      break;
    }
   case 6:
    var $i5 = $sizep_0;
    _qh_fprintf(5302108);
    var $6 = HEAP32[$setp >> 2];
    _qh_setprint($6);
    _qh_errexit(5, 0, 0);
    var $_pre1 = HEAP32[$i5 >> 2];
    var $7 = $_pre1;
    label = 7;
    break;
   case 7:
    var $7;
    var $inc = $7 + 1 | 0;
    var $8 = $sizep_0 | 0;
    var $inc_c = $inc;
    HEAP32[$8 >> 2] = $inc_c;
    var $9 = HEAP32[$setp >> 2];
    var $p = $9 + 4 + ($sub << 2) | 0;
    var $add_ptr16 = $p + 4 | 0;
    var $add_ptr = $add_ptr16;
    var $sub14 = 1 - $nth | 0;
    var $add = $sub14 + $sub | 0;
    var $tobool1517 = ($add | 0) == 0;
    if ($tobool1517) {
      var $newp_0_lcssa = $add_ptr;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $10 = $9;
    var $11 = $p;
    var $12 = $nth << 2;
    var $13 = $12 + 4 | 0;
    var $uglygep = $10 + $13 | 0;
    var $i_018 = $add;
    var $oldp_019 = $11;
    var $newp_020 = $add_ptr;
    label = 9;
    break;
   case 9:
    var $newp_020;
    var $oldp_019;
    var $i_018;
    var $dec = $i_018 - 1 | 0;
    var $incdec_ptr = $oldp_019 - 4 | 0;
    var $p16 = $oldp_019 | 0;
    var $14 = HEAP32[$p16 >> 2];
    var $incdec_ptr17 = $newp_020 - 4 | 0;
    var $p18 = $newp_020 | 0;
    HEAP32[$p18 >> 2] = $14;
    var $tobool15 = ($dec | 0) == 0;
    if ($tobool15) {
      label = 10;
      break;
    } else {
      var $i_018 = $dec;
      var $oldp_019 = $incdec_ptr;
      var $newp_020 = $incdec_ptr17;
      label = 9;
      break;
    }
   case 10:
    var $uglygep21 = $uglygep;
    var $newp_0_lcssa = $uglygep21;
    label = 11;
    break;
   case 11:
    var $newp_0_lcssa;
    var $p19 = $newp_0_lcssa | 0;
    HEAP32[$p19 >> 2] = $newelem;
    return;
  }
}
_qh_setaddnth["X"] = 1;
function _qh_setdel($set, $oldelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = $set + 4 | 0;
    var $elemp_0 = $0;
    label = 4;
    break;
   case 4:
    var $elemp_0;
    var $p1 = $elemp_0 | 0;
    var $1 = HEAP32[$p1 >> 2];
    var $tobool3 = ($1 | 0) != 0;
    var $not_cmp = ($1 | 0) != ($oldelem | 0);
    var $_tobool3 = $tobool3 & $not_cmp;
    var $incdec_ptr = $elemp_0 + 4 | 0;
    if ($_tobool3) {
      var $elemp_0 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $tobool5 = ($1 | 0) == 0;
    if ($tobool5) {
      var $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $maxsize = $set | 0;
    var $2 = HEAP32[$maxsize >> 2];
    var $arrayidx8 = $set + 4 + ($2 << 2) | 0;
    var $i = $arrayidx8;
    var $3 = HEAP32[$i >> 2];
    var $dec = $3 - 1 | 0;
    var $4 = $arrayidx8 | 0;
    var $dec_c = $dec;
    HEAP32[$4 >> 2] = $dec_c;
    var $tobool9 = ($3 | 0) == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      var $6 = $dec;
      label = 8;
      break;
    }
   case 7:
    var $5 = HEAP32[$maxsize >> 2];
    var $_c = $5;
    HEAP32[$4 >> 2] = $_c;
    var $6 = $5;
    label = 8;
    break;
   case 8:
    var $6;
    var $sub = $6 - 1 | 0;
    var $p17 = $set + 4 + ($sub << 2) | 0;
    var $7 = HEAP32[$p17 >> 2];
    HEAP32[$p1 >> 2] = $7;
    HEAP32[$p17 >> 2] = 0;
    var $retval_0 = $oldelem;
    label = 9;
    break;
   case 9:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setdellast($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $set + 4 | 0;
    var $0 = HEAP32[$p >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      var $retval_0 = 0;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $maxsize2 = $set | 0;
    var $1 = HEAP32[$maxsize2 >> 2];
    var $arrayidx4 = $set + 4 + ($1 << 2) | 0;
    var $i = $arrayidx4;
    var $2 = HEAP32[$i >> 2];
    var $tobool5 = ($2 | 0) == 0;
    if ($tobool5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $sub = $2 - 2 | 0;
    var $p9 = $set + 4 + ($sub << 2) | 0;
    var $3 = HEAP32[$p9 >> 2];
    HEAP32[$p9 >> 2] = 0;
    var $4 = HEAP32[$i >> 2];
    var $dec = $4 - 1 | 0;
    var $5 = $arrayidx4 | 0;
    var $dec_c = $dec;
    HEAP32[$5 >> 2] = $dec_c;
    var $retval_0 = $3;
    label = 7;
    break;
   case 6:
    var $sub16 = $1 - 1 | 0;
    var $p19 = $set + 4 + ($sub16 << 2) | 0;
    var $6 = HEAP32[$p19 >> 2];
    HEAP32[$p19 >> 2] = 0;
    var $7 = $arrayidx4 | 0;
    var $_c = $1;
    HEAP32[$7 >> 2] = $_c;
    var $retval_0 = $6;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setdelsorted($set, $oldelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = $set + 4 | 0;
    var $newp_0 = $0;
    label = 4;
    break;
   case 4:
    var $newp_0;
    var $p1 = $newp_0 | 0;
    var $1 = HEAP32[$p1 >> 2];
    var $tobool3 = ($1 | 0) != 0;
    var $not_cmp = ($1 | 0) != ($oldelem | 0);
    var $_tobool3 = $tobool3 & $not_cmp;
    var $incdec_ptr = $newp_0 + 4 | 0;
    if ($_tobool3) {
      var $newp_0 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $tobool5 = ($1 | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      var $newp_1 = $newp_0;
      label = 6;
      break;
    }
   case 6:
    var $newp_1;
    var $incdec_ptr10 = $newp_1 + 4 | 0;
    var $p9 = $incdec_ptr10 | 0;
    var $2 = HEAP32[$p9 >> 2];
    var $p11 = $newp_1 | 0;
    HEAP32[$p11 >> 2] = $2;
    var $tobool12 = ($2 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      var $newp_1 = $incdec_ptr10;
      label = 6;
      break;
    }
   case 7:
    var $maxsize = $set | 0;
    var $3 = HEAP32[$maxsize >> 2];
    var $arrayidx16 = $set + 4 + ($3 << 2) | 0;
    var $i = $arrayidx16;
    var $4 = HEAP32[$i >> 2];
    var $dec = $4 - 1 | 0;
    var $5 = $arrayidx16 | 0;
    var $dec_c = $dec;
    HEAP32[$5 >> 2] = $dec_c;
    var $cmp17 = ($4 | 0) == 0;
    if ($cmp17) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $6 = HEAP32[$maxsize >> 2];
    var $_c = $6;
    HEAP32[$5 >> 2] = $_c;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_setequal_except($setA, $skipelemA, $setB, $skipelemB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $setA + 4 | 0;
    var $p3 = $setB + 4 | 0;
    var $skip_0 = 0;
    var $elemB_0 = $p3;
    var $elemA_0 = $p;
    var $skipelemB_addr_0 = $skipelemB;
    label = 3;
    break;
   case 3:
    var $skipelemB_addr_0;
    var $elemA_0;
    var $elemB_0;
    var $skip_0;
    var $0 = HEAP32[$elemA_0 >> 2];
    var $cmp = ($0 | 0) == ($skipelemA | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $skip_1 = $skip_0;
      var $elemA_1 = $elemA_0;
      label = 5;
      break;
    }
   case 4:
    var $inc = $skip_0 + 1 | 0;
    var $incdec_ptr = $elemA_0 + 4 | 0;
    var $skip_1 = $inc;
    var $elemA_1 = $incdec_ptr;
    label = 5;
    break;
   case 5:
    var $elemA_1;
    var $skip_1;
    var $tobool = ($skipelemB_addr_0 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $1 = HEAP32[$elemB_0 >> 2];
    var $cmp5 = ($1 | 0) == ($skipelemB_addr_0 | 0);
    if ($cmp5) {
      label = 7;
      break;
    } else {
      var $skip_2_ph = $skip_1;
      var $elemB_1_ph = $elemB_0;
      var $skipelemB_addr_1_ph = $skipelemB_addr_0;
      label = 10;
      break;
    }
   case 7:
    var $inc7 = $skip_1 + 1 | 0;
    var $incdec_ptr8 = $elemB_0 + 4 | 0;
    var $skip_2_ph = $inc7;
    var $elemB_1_ph = $incdec_ptr8;
    var $skipelemB_addr_1_ph = $skipelemB_addr_0;
    label = 10;
    break;
   case 8:
    var $2 = HEAP32[$elemA_1 >> 2];
    var $3 = HEAP32[$elemB_0 >> 2];
    var $cmp10 = ($2 | 0) == ($3 | 0);
    if ($cmp10) {
      var $skip_2 = $skip_1;
      var $elemB_1 = $elemB_0;
      var $skipelemB_addr_1 = 0;
      var $4 = $2;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $inc12 = $skip_1 + 1 | 0;
    var $incdec_ptr13 = $elemB_0 + 4 | 0;
    var $tobool14 = ($3 | 0) == 0;
    if ($tobool14) {
      label = 15;
      break;
    } else {
      var $skip_2_ph = $inc12;
      var $elemB_1_ph = $incdec_ptr13;
      var $skipelemB_addr_1_ph = $3;
      label = 10;
      break;
    }
   case 10:
    var $skipelemB_addr_1_ph;
    var $elemB_1_ph;
    var $skip_2_ph;
    var $_pr = HEAP32[$elemA_1 >> 2];
    var $skip_2 = $skip_2_ph;
    var $elemB_1 = $elemB_1_ph;
    var $skipelemB_addr_1 = $skipelemB_addr_1_ph;
    var $4 = $_pr;
    label = 11;
    break;
   case 11:
    var $4;
    var $skipelemB_addr_1;
    var $elemB_1;
    var $skip_2;
    var $tobool19 = ($4 | 0) == 0;
    if ($tobool19) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $incdec_ptr22 = $elemA_1 + 4 | 0;
    var $incdec_ptr23 = $elemB_1 + 4 | 0;
    var $5 = HEAP32[$elemB_1 >> 2];
    var $cmp24 = ($4 | 0) == ($5 | 0);
    if ($cmp24) {
      var $skip_0 = $skip_2;
      var $elemB_0 = $incdec_ptr23;
      var $elemA_0 = $incdec_ptr22;
      var $skipelemB_addr_0 = $skipelemB_addr_1;
      label = 3;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    var $cmp27 = ($skip_2 | 0) == 2;
    if ($cmp27) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $6 = HEAP32[$elemB_1 >> 2];
    var $tobool28 = ($6 | 0) == 0;
    var $_ = $tobool28 & 1;
    return $_;
   case 15:
    return 0;
  }
}
_qh_setequal_except["X"] = 1;
function _qh_setequal_skip($setA, $skipA, $setB, $skipB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $setA + 4 | 0;
    var $p3 = $setB + 4 | 0;
    var $p6 = $setA + 4 + ($skipA << 2) | 0;
    var $p9 = $setB + 4 + ($skipB << 2) | 0;
    var $elemA_0 = $p;
    var $elemB_0 = $p3;
    label = 3;
    break;
   case 3:
    var $elemB_0;
    var $elemA_0;
    var $cmp = ($elemA_0 | 0) == ($p6 | 0);
    var $incdec_ptr = $elemA_0 + 4 | 0;
    var $incdec_ptr_elemA_0 = $cmp ? $incdec_ptr : $elemA_0;
    var $cmp10 = ($elemB_0 | 0) == ($p9 | 0);
    var $incdec_ptr12 = $elemB_0 + 4 | 0;
    var $elemB_1 = $cmp10 ? $incdec_ptr12 : $elemB_0;
    var $0 = HEAP32[$incdec_ptr_elemA_0 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $incdec_ptr16 = $incdec_ptr_elemA_0 + 4 | 0;
    var $incdec_ptr17 = $elemB_1 + 4 | 0;
    var $1 = HEAP32[$elemB_1 >> 2];
    var $cmp18 = ($0 | 0) == ($1 | 0);
    if ($cmp18) {
      var $elemA_0 = $incdec_ptr16;
      var $elemB_0 = $incdec_ptr17;
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 6;
      break;
    }
   case 5:
    var $2 = HEAP32[$elemB_1 >> 2];
    var $tobool21 = ($2 | 0) == 0;
    var $_ = $tobool21 & 1;
    var $retval_0 = $_;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setin($set, $setelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $set + 4 | 0;
    var $elemp_0 = $p;
    label = 4;
    break;
   case 4:
    var $elemp_0;
    var $0 = HEAP32[$elemp_0 >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $incdec_ptr = $elemp_0 + 4 | 0;
    var $cmp = ($0 | 0) == ($setelem | 0);
    if ($cmp) {
      var $retval_0 = 1;
      label = 6;
      break;
    } else {
      var $elemp_0 = $incdec_ptr;
      label = 4;
      break;
    }
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setlarger($oldsetp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$oldsetp >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $0 | 0;
    var $1 = HEAP32[$maxsize >> 2];
    var $arrayidx = $0 + 4 + ($1 << 2) | 0;
    var $i = $arrayidx;
    var $2 = HEAP32[$i >> 2];
    var $tobool1 = ($2 | 0) == 0;
    var $dec = $2 - 1 | 0;
    var $size_0 = $tobool1 ? $1 : $dec;
    var $3 = HEAP32[5242988 >> 2];
    var $inc = $3 + 1 | 0;
    HEAP32[5242988 >> 2] = $inc;
    var $add = $size_0 + 1 | 0;
    var $4 = HEAP32[5242992 >> 2];
    var $add3 = $add + $4 | 0;
    HEAP32[5242992 >> 2] = $add3;
    var $mul = $size_0 << 1;
    var $call = _qh_setnew($mul);
    var $p = $0 + 4 | 0;
    var $e6 = $call + 4 | 0;
    var $5 = $e6;
    var $6 = $p;
    var $mul10 = $add << 2;
    _memcpy($5, $6, $mul10);
    var $maxsize11 = $call | 0;
    var $7 = HEAP32[$maxsize11 >> 2];
    var $8 = $call + 4 + ($7 << 2) | 0;
    var $add_c = $add;
    HEAP32[$8 >> 2] = $add_c;
    var $9 = HEAP32[5242928 >> 2];
    var $tobool16 = ($9 | 0) == 0;
    if ($tobool16) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $p20 = $9 + 4 | 0;
    var $10 = HEAP32[$p20 >> 2];
    var $tobool2118 = ($10 | 0) == 0;
    if ($tobool2118) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $11 = $10;
    var $12 = $p20;
    var $incdec_ptr1721 = $p20 + 4 | 0;
    var $incdec_ptr17 = $incdec_ptr1721;
    var $setp_019 = $12;
    var $incdec_ptr20 = $incdec_ptr17;
    var $13 = $11;
    label = 6;
    break;
   case 6:
    var $13;
    var $incdec_ptr20;
    var $setp_019;
    var $cmp = ($13 | 0) == ($0 | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[$setp_019 >> 2] = $call;
    label = 8;
    break;
   case 8:
    var $incdec_ptr = $incdec_ptr20 + 4 | 0;
    var $14 = HEAP32[$incdec_ptr20 >> 2];
    var $tobool21 = ($14 | 0) == 0;
    if ($tobool21) {
      label = 9;
      break;
    } else {
      var $setp_019 = $incdec_ptr20;
      var $incdec_ptr20 = $incdec_ptr;
      var $13 = $14;
      label = 6;
      break;
    }
   case 9:
    _qh_setfree($oldsetp);
    var $newset_0 = $call;
    label = 11;
    break;
   case 10:
    var $call24 = _qh_setnew(3);
    var $newset_0 = $call24;
    label = 11;
    break;
   case 11:
    var $newset_0;
    HEAP32[$oldsetp >> 2] = $newset_0;
    return;
  }
}
_qh_setlarger["X"] = 1;
function _qh_setprint($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5254380);
    label = 7;
    break;
   case 4:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    var $dec = $1 - 1 | 0;
    var $size_0 = $tobool1 ? $0 : $dec;
    _qh_fprintf(5251700);
    var $2 = HEAP32[$maxsize >> 2];
    var $cmp = ($size_0 | 0) > ($2 | 0);
    var $add = $2 + 1 | 0;
    var $add_size_0 = $cmp ? $add : $size_0;
    var $cmp717 = ($add_size_0 | 0) > 0;
    if ($cmp717) {
      var $k_018 = 0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $k_018;
    _qh_fprintf(5302104);
    var $inc = $k_018 + 1 | 0;
    var $exitcond = ($inc | 0) == ($add_size_0 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $k_018 = $inc;
      label = 5;
      break;
    }
   case 6:
    _qh_fprintf(5299656);
    label = 7;
    break;
   case 7:
    return;
  }
}
function _qh_setappend($setp, $newelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($newelem | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[$setp >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $maxsize = $0 | 0;
    var $1 = HEAP32[$maxsize >> 2];
    var $arrayidx = $0 + 4 + ($1 << 2) | 0;
    var $i = $arrayidx;
    var $2 = HEAP32[$i >> 2];
    var $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      var $sizep_0 = $arrayidx;
      var $5 = $2;
      label = 6;
      break;
    }
   case 5:
    _qh_setlarger($setp);
    var $3 = HEAP32[$setp >> 2];
    var $maxsize3 = $3 | 0;
    var $4 = HEAP32[$maxsize3 >> 2];
    var $arrayidx5 = $3 + 4 + ($4 << 2) | 0;
    var $i7_phi_trans_insert = $arrayidx5;
    var $_pre = HEAP32[$i7_phi_trans_insert >> 2];
    var $sizep_0 = $arrayidx5;
    var $5 = $_pre;
    label = 6;
    break;
   case 6:
    var $5;
    var $sizep_0;
    var $inc = $5 + 1 | 0;
    var $6 = $sizep_0 | 0;
    var $inc_c = $inc;
    HEAP32[$6 >> 2] = $inc_c;
    var $sub = $5 - 1 | 0;
    var $7 = HEAP32[$setp >> 2];
    var $p = $7 + 4 + ($sub << 2) | 0;
    var $incdec_ptr9 = $p + 4 | 0;
    HEAP32[$p >> 2] = $newelem;
    HEAP32[$incdec_ptr9 >> 2] = 0;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _qh_setappend_set($setp, $setA) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $oldset = __stackBase__;
    var $tobool = ($setA | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $setA | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $setA + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    var $dec = $1 - 1 | 0;
    var $sizeA_0 = $tobool1 ? $0 : $dec;
    var $2 = HEAP32[$setp >> 2];
    var $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      var $3 = $2;
      label = 5;
      break;
    }
   case 4:
    var $call = _qh_setnew($sizeA_0);
    HEAP32[$setp >> 2] = $call;
    var $3 = $call;
    label = 5;
    break;
   case 5:
    var $3;
    var $maxsize6 = $3 | 0;
    var $4 = HEAP32[$maxsize6 >> 2];
    var $arrayidx8 = $3 + 4 + ($4 << 2) | 0;
    var $i9 = $arrayidx8;
    var $5 = HEAP32[$i9 >> 2];
    var $tobool10 = ($5 | 0) == 0;
    var $dec13 = $5 - 1 | 0;
    var $size_0 = $tobool10 ? $4 : $dec13;
    var $add = $size_0 + $sizeA_0 | 0;
    var $cmp = ($add | 0) > ($4 | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $sizep_0 = $arrayidx8;
      label = 7;
      break;
    }
   case 6:
    HEAP32[$oldset >> 2] = $3;
    var $call17 = _qh_setcopy($3, $sizeA_0);
    HEAP32[$setp >> 2] = $call17;
    _qh_setfree($oldset);
    var $6 = HEAP32[$setp >> 2];
    var $maxsize18 = $6 | 0;
    var $7 = HEAP32[$maxsize18 >> 2];
    var $arrayidx20 = $6 + 4 + ($7 << 2) | 0;
    var $sizep_0 = $arrayidx20;
    label = 7;
    break;
   case 7:
    var $sizep_0;
    var $cmp22 = ($sizeA_0 | 0) > 0;
    if ($cmp22) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $add25 = $add + 1 | 0;
    var $8 = $sizep_0 | 0;
    var $add25_c = $add25;
    HEAP32[$8 >> 2] = $add25_c;
    var $9 = HEAP32[$setp >> 2];
    var $p = $9 + 4 + ($size_0 << 2) | 0;
    var $10 = $p;
    var $p31 = $setA + 4 | 0;
    var $11 = $p31;
    var $add32 = $sizeA_0 << 2;
    var $mul = $add32 + 4 | 0;
    _memcpy($10, $11, $mul);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_setappend_set["X"] = 1;
function _qh_setnew($setsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($setsize | 0) == 0;
    var $inc = $tobool & 1;
    var $inc_setsize = $inc + $setsize | 0;
    var $mul = $inc_setsize << 2;
    var $add = $mul + 8 | 0;
    var $cmp = ($add | 0) < 1;
    var $0 = HEAP32[5242896 >> 2];
    var $cmp1 = ($add | 0) > ($0 | 0);
    var $or_cond = $cmp | $cmp1;
    var $call8 = _qh_memalloc($add);
    var $1 = $call8;
    if ($or_cond) {
      var $setsize_addr_1 = $inc_setsize;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = HEAP32[5242912 >> 2];
    var $arrayidx = $2 + ($add << 2) | 0;
    var $3 = HEAP32[$arrayidx >> 2];
    var $4 = HEAP32[5242908 >> 2];
    var $arrayidx3 = $4 + ($3 << 2) | 0;
    var $5 = HEAP32[$arrayidx3 >> 2];
    var $cmp4 = ($5 | 0) > ($add | 0);
    if ($cmp4) {
      label = 4;
      break;
    } else {
      var $setsize_addr_1 = $inc_setsize;
      label = 5;
      break;
    }
   case 4:
    var $sub = $5 - $add | 0;
    var $div = ($sub | 0) / 4 & -1;
    var $add6 = $div + $inc_setsize | 0;
    var $setsize_addr_1 = $add6;
    label = 5;
    break;
   case 5:
    var $setsize_addr_1;
    var $maxsize = $call8;
    HEAP32[$maxsize >> 2] = $setsize_addr_1;
    var $6 = $1 + 4 + ($setsize_addr_1 << 2) | 0;
    HEAP32[$6 >> 2] = 1;
    var $p = $call8 + 4 | 0;
    var $7 = $p;
    HEAP32[$7 >> 2] = 0;
    return $1;
  }
}
function _qh_setcopy($set, $extra) {
  var $0 = HEAP32[$set >> 2];
  var $1 = HEAP32[$set + 4 + ($0 << 2) >> 2];
  var $size_0 = ($1 | 0) == 0 ? $0 : $1 - 1 | 0;
  var $call = _qh_setnew($size_0 + (($extra | 0) < 0 ? 0 : $extra) | 0);
  var $add2 = $size_0 + 1 | 0;
  HEAP32[$call + 4 + (HEAP32[$call >> 2] << 2) >> 2] = $add2;
  _memcpy($call + 4 | 0, $set + 4 | 0, $add2 << 2);
  return $call;
}
function _qh_setfree($setp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$setp >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $0 | 0;
    var $1 = HEAP32[$maxsize >> 2];
    var $mul = $1 << 2;
    var $add = $mul + 8 | 0;
    var $2 = $0;
    _qh_memfree($2, $add);
    HEAP32[$setp >> 2] = 0;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _qh_setappend2ndlast($setp, $newelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$setp >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $0 | 0;
    var $1 = HEAP32[$maxsize >> 2];
    var $arrayidx = $0 + 4 + ($1 << 2) | 0;
    var $i = $arrayidx;
    var $2 = HEAP32[$i >> 2];
    var $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $sizep_0 = $arrayidx;
      var $5 = $2;
      label = 5;
      break;
    }
   case 4:
    _qh_setlarger($setp);
    var $3 = HEAP32[$setp >> 2];
    var $maxsize1 = $3 | 0;
    var $4 = HEAP32[$maxsize1 >> 2];
    var $arrayidx3 = $3 + 4 + ($4 << 2) | 0;
    var $i4_phi_trans_insert = $arrayidx3;
    var $_pre = HEAP32[$i4_phi_trans_insert >> 2];
    var $sizep_0 = $arrayidx3;
    var $5 = $_pre;
    label = 5;
    break;
   case 5:
    var $5;
    var $sizep_0;
    var $inc = $5 + 1 | 0;
    var $6 = $sizep_0 | 0;
    var $inc_c = $inc;
    HEAP32[$6 >> 2] = $inc_c;
    var $sub = $5 - 1 | 0;
    var $7 = HEAP32[$setp >> 2];
    var $p = $7 + 4 + ($sub << 2) | 0;
    var $add_ptr10 = $p - 4 | 0;
    var $incdec_ptr11 = $p + 4 | 0;
    var $8 = HEAP32[$add_ptr10 >> 2];
    HEAP32[$p >> 2] = $8;
    HEAP32[$incdec_ptr11 >> 2] = 0;
    HEAP32[$add_ptr10 >> 2] = $newelem;
    return;
  }
}
function _qh_setcheck($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize1 = $set | 0;
    var $0 = HEAP32[$maxsize1 >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool2 = ($1 | 0) == 0;
    var $dec = $1 - 1 | 0;
    var $size_0 = $tobool2 ? $0 : $dec;
    var $cmp = ($size_0 | 0) <= ($0 | 0);
    var $tobool5 = ($0 | 0) != 0;
    var $or_cond = $cmp & $tobool5;
    if ($or_cond) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5281404);
    label = 7;
    break;
   case 5:
    var $p = $set + 4 + ($size_0 << 2) | 0;
    var $2 = HEAP32[$p >> 2];
    var $tobool9 = ($2 | 0) == 0;
    if ($tobool9) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_fprintf(5273700);
    label = 7;
    break;
   case 7:
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    label = 8;
    break;
   case 8:
    return;
  }
}
function _qh_setcompact($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    var $dec = $1 - 1 | 0;
    var $size_0 = $tobool1 ? $0 : $dec;
    var $p = $set + 4 | 0;
    var $add_ptr = $p + ($size_0 << 2) | 0;
    var $destp_0_ph = $p;
    var $elemp_0_ph = $p;
    label = 4;
    break;
   case 4:
    var $elemp_0_ph;
    var $destp_0_ph;
    var $incdec_ptr5 = $destp_0_ph + 4 | 0;
    var $elemp_0 = $elemp_0_ph;
    label = 5;
    break;
   case 5:
    var $elemp_0;
    var $incdec_ptr = $elemp_0 + 4 | 0;
    var $2 = HEAP32[$elemp_0 >> 2];
    HEAP32[$destp_0_ph >> 2] = $2;
    var $tobool6 = ($2 | 0) == 0;
    if ($tobool6) {
      label = 6;
      break;
    } else {
      var $destp_0_ph = $incdec_ptr5;
      var $elemp_0_ph = $incdec_ptr;
      label = 4;
      break;
    }
   case 6:
    var $cmp = $incdec_ptr >>> 0 > $add_ptr >>> 0;
    if ($cmp) {
      label = 7;
      break;
    } else {
      var $elemp_0 = $incdec_ptr;
      label = 5;
      break;
    }
   case 7:
    var $sub_ptr_lhs_cast = $destp_0_ph;
    var $sub_ptr_rhs_cast = $p;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    _qh_settruncate($set, $sub_ptr_div);
    label = 8;
    break;
   case 8:
    return;
  }
}
function _qh_settruncate($set, $size) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($size | 0) < 0;
    var $maxsize2_phi_trans_insert_pre = $set | 0;
    if ($cmp) {
      var $maxsize2_phi_trans_insert_pre_phi = $maxsize2_phi_trans_insert_pre;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $0 = HEAP32[$maxsize2_phi_trans_insert_pre >> 2];
    var $cmp1 = ($0 | 0) < ($size | 0);
    if ($cmp1) {
      var $maxsize2_phi_trans_insert_pre_phi = $maxsize2_phi_trans_insert_pre;
      label = 4;
      break;
    } else {
      var $1 = $0;
      label = 5;
      break;
    }
   case 4:
    var $maxsize2_phi_trans_insert_pre_phi;
    _qh_fprintf(5281248);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    var $_pre = HEAP32[$maxsize2_phi_trans_insert_pre_phi >> 2];
    var $1 = $_pre;
    label = 5;
    break;
   case 5:
    var $1;
    var $add = $size + 1 | 0;
    var $2 = $set + 4 + ($1 << 2) | 0;
    var $add_c = $add;
    HEAP32[$2 >> 2] = $add_c;
    var $p = $set + 4 + ($size << 2) | 0;
    HEAP32[$p >> 2] = 0;
    return;
  }
}
function _qh_setdelnth($set, $nth) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $set + 4 + ($nth << 2) | 0;
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx2 = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx2;
    var $1 = HEAP32[$i >> 2];
    var $dec = $1 - 1 | 0;
    var $2 = $arrayidx2 | 0;
    var $dec_c = $dec;
    HEAP32[$2 >> 2] = $dec_c;
    var $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $4 = $dec;
      label = 4;
      break;
    }
   case 3:
    var $3 = HEAP32[$maxsize >> 2];
    var $_c = $3;
    HEAP32[$2 >> 2] = $_c;
    var $4 = $3;
    label = 4;
    break;
   case 4:
    var $4;
    var $cmp5 = ($nth | 0) >= 0;
    var $cmp7 = ($4 | 0) > ($nth | 0);
    var $or_cond = $cmp5 & $cmp7;
    if ($or_cond) {
      var $5 = $4;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _qh_fprintf(5264424);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    var $_pre = HEAP32[$i >> 2];
    var $5 = $_pre;
    label = 6;
    break;
   case 6:
    var $5;
    var $sub = $5 - 1 | 0;
    var $p13 = $set + 4 + ($sub << 2) | 0;
    var $6 = HEAP32[$p >> 2];
    var $7 = HEAP32[$p13 >> 2];
    HEAP32[$p >> 2] = $7;
    HEAP32[$p13 >> 2] = 0;
    return $6;
  }
}
function _qh_setdelnthsorted($set, $nth) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $cmp = ($nth | 0) < 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool = ($1 | 0) == 0;
    var $sub = $1 - 1 | 0;
    var $cmp2 = ($sub | 0) > ($nth | 0);
    var $or_cond = $tobool | $cmp2;
    var $cmp5 = ($0 | 0) > ($nth | 0);
    var $or_cond16 = $or_cond & $cmp5;
    if ($or_cond16) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5260112);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    label = 5;
    break;
   case 5:
    var $p = $set + 4 + ($nth << 2) | 0;
    var $2 = $p;
    var $add_ptr15 = $p + 4 | 0;
    var $add_ptr = $add_ptr15;
    var $oldp_0 = $add_ptr;
    var $newp_0 = $2;
    label = 6;
    break;
   case 6:
    var $newp_0;
    var $oldp_0;
    var $incdec_ptr = $oldp_0 + 4 | 0;
    var $p9 = $oldp_0 | 0;
    var $3 = HEAP32[$p9 >> 2];
    var $incdec_ptr10 = $newp_0 + 4 | 0;
    var $p11 = $newp_0 | 0;
    HEAP32[$p11 >> 2] = $3;
    var $tobool12 = ($3 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      var $oldp_0 = $incdec_ptr;
      var $newp_0 = $incdec_ptr10;
      label = 6;
      break;
    }
   case 7:
    var $i13 = $arrayidx;
    var $4 = HEAP32[$i13 >> 2];
    var $dec = $4 - 1 | 0;
    var $5 = $arrayidx | 0;
    var $dec_c = $dec;
    HEAP32[$5 >> 2] = $dec_c;
    var $cmp14 = ($4 | 0) == 0;
    if ($cmp14) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $6 = HEAP32[$maxsize >> 2];
    var $_c = $6;
    HEAP32[$5 >> 2] = $_c;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_setsize($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      var $retval_0 = $0;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $dec = $1 - 1 | 0;
    var $cmp = ($dec | 0) > ($0 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      var $retval_0 = $dec;
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5295304);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    var $retval_0 = $dec;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setequal($setA, $setB) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($setA | 0) == 0;
    if ($tobool) {
      var $sizeA_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $setA | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $setA + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      var $sizeA_0 = $0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $dec = $1 - 1 | 0;
    var $sizeA_0 = $dec;
    label = 5;
    break;
   case 5:
    var $sizeA_0;
    var $tobool3 = ($setB | 0) == 0;
    if ($tobool3) {
      var $sizeB_0 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $maxsize5 = $setB | 0;
    var $2 = HEAP32[$maxsize5 >> 2];
    var $arrayidx7 = $setB + 4 + ($2 << 2) | 0;
    var $i8 = $arrayidx7;
    var $3 = HEAP32[$i8 >> 2];
    var $tobool9 = ($3 | 0) == 0;
    if ($tobool9) {
      var $sizeB_0 = $2;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $dec11 = $3 - 1 | 0;
    var $sizeB_0 = $dec11;
    label = 8;
    break;
   case 8:
    var $sizeB_0;
    var $cmp = ($sizeA_0 | 0) == ($sizeB_0 | 0);
    if ($cmp) {
      label = 9;
      break;
    } else {
      var $retval_0 = 0;
      label = 11;
      break;
    }
   case 9:
    var $tobool19 = ($sizeA_0 | 0) == 0;
    if ($tobool19) {
      var $retval_0 = 1;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $p = $setA + 4 | 0;
    var $p26 = $setB + 4 | 0;
    var $4 = $p;
    var $5 = $p26;
    var $mul = $sizeA_0 << 2;
    var $call = _memcmp($4, $5, $mul);
    var $tobool27 = ($call | 0) == 0;
    var $_ = $tobool27 & 1;
    var $retval_0 = $_;
    label = 11;
    break;
   case 11:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_argv_to_command() {
  HEAP8[5247532] = 0;
  return;
}
function _qh_rand() {
  var $0 = HEAP32[5242996 >> 2];
  var $sub = (($0 | 0) % 127773 * 16807 & -1) + ((($0 | 0) / 127773 & -1) * -2836 & -1) | 0;
  var $seed_0 = ($sub | 0) > 0 ? $sub : $sub + 2147483647 | 0;
  HEAP32[5242996 >> 2] = $seed_0;
  return $seed_0;
}
function _qh_srand($seed) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($seed | 0) < 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5242996 >> 2] = 1;
    label = 7;
    break;
   case 4:
    var $cmp1 = ($seed | 0) == 2147483647;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5242996 >> 2] = 2147483646;
    label = 7;
    break;
   case 6:
    HEAP32[5242996 >> 2] = $seed;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _qh_setindex($set, $atelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = -1;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i1 = $arrayidx;
    var $1 = HEAP32[$i1 >> 2];
    var $tobool2 = ($1 | 0) == 0;
    var $dec = $1 - 1 | 0;
    var $size_0 = $tobool2 ? $0 : $dec;
    var $cmp = ($size_0 | 0) <= ($0 | 0);
    var $cmp99 = ($size_0 | 0) > 0;
    var $or_cond = $cmp & $cmp99;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      var $retval_0 = -1;
      label = 7;
      break;
    }
   case 4:
    var $p = $set + 4 | 0;
    var $elem_010 = $p;
    var $i_011 = 0;
    label = 5;
    break;
   case 5:
    var $i_011;
    var $elem_010;
    var $2 = HEAP32[$elem_010 >> 2];
    var $cmp10 = ($2 | 0) == ($atelem | 0);
    if ($cmp10) {
      var $retval_0 = $i_011;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $incdec_ptr = $elem_010 + 4 | 0;
    var $inc = $i_011 + 1 | 0;
    var $cmp9 = ($inc | 0) < ($size_0 | 0);
    if ($cmp9) {
      var $elem_010 = $incdec_ptr;
      var $i_011 = $inc;
      label = 5;
      break;
    } else {
      var $retval_0 = -1;
      label = 7;
      break;
    }
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setlast($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $maxsize = $set | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $arrayidx = $set + 4 + ($0 << 2) | 0;
    var $i = $arrayidx;
    var $1 = HEAP32[$i >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $sub = $0 - 1 | 0;
    var $p = $set + 4 + ($sub << 2) | 0;
    var $2 = HEAP32[$p >> 2];
    var $retval_0 = $2;
    label = 7;
    break;
   case 5:
    var $cmp = ($1 | 0) > 1;
    if ($cmp) {
      label = 6;
      break;
    } else {
      var $retval_0 = 0;
      label = 7;
      break;
    }
   case 6:
    var $sub7 = $1 - 2 | 0;
    var $p10 = $set + 4 + ($sub7 << 2) | 0;
    var $3 = HEAP32[$p10 >> 2];
    var $retval_0 = $3;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_allstatA() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 59;
  HEAP32[5245272 >> 2] = 5298564;
  HEAP16[5246054 >> 1] = -1;
  HEAP8[5246445] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -115;
  HEAP32[5245600 >> 2] = 0;
  HEAP16[5246218 >> 1] = -1;
  HEAP8[5246527] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -114;
  HEAP32[5245604 >> 2] = 5299608;
  HEAP16[5246220 >> 1] = 141;
  HEAP8[5246528] = 6;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -113;
  HEAP32[5245608 >> 2] = 5280384;
  HEAP16[5246222 >> 1] = -1;
  HEAP8[5246529] = 7;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = -47;
  HEAP32[5245872 >> 2] = 5273616;
  HEAP16[5246354 >> 1] = -1;
  HEAP8[5246595] = 7;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = -46;
  HEAP32[5245876 >> 2] = 5267784;
  HEAP16[5246356 >> 1] = -1;
  HEAP8[5246596] = 8;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = -125;
  HEAP32[5245560 >> 2] = 5264368;
  HEAP16[5246198 >> 1] = -1;
  HEAP8[5246517] = 8;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246912 >> 2] = $7;
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 60;
  HEAP32[5245276 >> 2] = 5260012;
  HEAP16[5246056 >> 1] = -1;
  HEAP8[5246446] = 0;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 35;
  HEAP32[5245176 >> 2] = 5257204;
  HEAP16[5246006 >> 1] = -1;
  HEAP8[5246421] = 1;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 25;
  HEAP32[5245136 >> 2] = 5254324;
  HEAP16[5245986 >> 1] = -1;
  HEAP8[5246411] = 1;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = 81;
  HEAP32[5245360 >> 2] = 5251636;
  HEAP16[5246098 >> 1] = -1;
  HEAP8[5246467] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 32;
  HEAP32[5245164 >> 2] = 5302032;
  HEAP16[5246e3 >> 1] = -1;
  HEAP8[5246418] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 34;
  HEAP32[5245172 >> 2] = 5299672;
  HEAP16[5246004 >> 1] = -1;
  HEAP8[5246420] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = -123;
  HEAP32[5245568 >> 2] = 5297100;
  HEAP16[5246202 >> 1] = -1;
  HEAP8[5246519] = 1;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = -121;
  HEAP32[5245576 >> 2] = 5295188;
  HEAP16[5246206 >> 1] = -1;
  HEAP8[5246521] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 14;
  HEAP32[5245092 >> 2] = 5293624;
  HEAP16[5245964 >> 1] = -1;
  HEAP8[5246400] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = 96;
  HEAP32[5245420 >> 2] = 5291760;
  HEAP16[5246128 >> 1] = -1;
  HEAP8[5246482] = 1;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = -122;
  HEAP32[5245572 >> 2] = 5290428;
  HEAP16[5246204 >> 1] = -1;
  HEAP8[5246520] = 1;
  return;
}
_qh_allstatA["X"] = 1;
function _qh_allstatB() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 58;
  HEAP32[5245268 >> 2] = 5288688;
  HEAP16[5246052 >> 1] = -1;
  HEAP8[5246444] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -42;
  HEAP32[5245892 >> 2] = 5287252;
  HEAP16[5246364 >> 1] = -1;
  HEAP8[5246600] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -106;
  HEAP32[5245636 >> 2] = 5284996;
  HEAP16[5246236 >> 1] = -1;
  HEAP8[5246536] = 1;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -111;
  HEAP32[5245616 >> 2] = 5283280;
  HEAP16[5246226 >> 1] = -1;
  HEAP8[5246531] = 1;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = -110;
  HEAP32[5245620 >> 2] = 5281196;
  HEAP16[5246228 >> 1] = -1;
  HEAP8[5246532] = 1;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = -102;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = -102;
  HEAP32[5245652 >> 2] = 5278904;
  HEAP16[5246244 >> 1] = 150;
  HEAP8[5246540] = 2;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 111;
  HEAP32[5245480 >> 2] = 5278244;
  HEAP16[5246158 >> 1] = -1;
  HEAP8[5246497] = 3;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = -103;
  HEAP32[5245648 >> 2] = 5277336;
  HEAP16[5246242 >> 1] = 150;
  HEAP8[5246539] = 2;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 108;
  HEAP32[5245468 >> 2] = 5276556;
  HEAP16[5246152 >> 1] = -1;
  HEAP8[5246494] = 3;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = -101;
  HEAP32[5245656 >> 2] = 5275992;
  HEAP16[5246246 >> 1] = 150;
  HEAP8[5246541] = 2;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 113;
  HEAP32[5245488 >> 2] = 5275560;
  HEAP16[5246162 >> 1] = -1;
  HEAP8[5246499] = 3;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = -99;
  HEAP32[5245664 >> 2] = 5275236;
  HEAP16[5246250 >> 1] = 214;
  HEAP8[5246543] = 2;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 114;
  HEAP32[5245492 >> 2] = 5276556;
  HEAP16[5246164 >> 1] = -1;
  HEAP8[5246500] = 3;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 36;
  HEAP32[5245180 >> 2] = 5274204;
  HEAP16[5246008 >> 1] = -1;
  HEAP8[5246422] = 6;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = -55;
  HEAP32[5245840 >> 2] = 5273672;
  HEAP16[5246338 >> 1] = -1;
  HEAP8[5246587] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = -63;
  HEAP32[5245808 >> 2] = 5273160;
  HEAP16[5246322 >> 1] = -1;
  HEAP8[5246579] = 1;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = -56;
  HEAP32[5245836 >> 2] = 5272556;
  HEAP16[5246336 >> 1] = -1;
  HEAP8[5246586] = 1;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = -86;
  HEAP32[5245716 >> 2] = 5272076;
  HEAP16[5246276 >> 1] = -1;
  HEAP8[5246556] = 1;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = -104;
  HEAP32[5245644 >> 2] = 5271596;
  HEAP16[5246240 >> 1] = 150;
  HEAP8[5246538] = 2;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = -105;
  HEAP32[5245640 >> 2] = 5270816;
  HEAP16[5246238 >> 1] = -1;
  HEAP8[5246537] = 3;
  var $21 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $21 + 1 | 0;
  HEAP8[$21 + 5244800 | 0] = 3;
  HEAP32[5245048 >> 2] = 0;
  HEAP16[5245942 >> 1] = -1;
  HEAP8[5246389] = 1;
  var $22 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $22 + 1 | 0;
  HEAP8[$22 + 5244800 | 0] = 4;
  HEAP32[5245052 >> 2] = 5270208;
  HEAP16[5245944 >> 1] = 3;
  HEAP8[5246390] = 6;
  var $23 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $23 + 1 | 0;
  HEAP8[$23 + 5244800 | 0] = 5;
  HEAP32[5245056 >> 2] = 5269572;
  HEAP16[5245946 >> 1] = -1;
  HEAP8[5246391] = 7;
  var $24 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $24 + 1 | 0;
  HEAP8[$24 + 5244800 | 0] = 6;
  HEAP32[5245060 >> 2] = 5269228;
  HEAP16[5245948 >> 1] = -1;
  HEAP8[5246392] = 8;
  var $25 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $25 + 1 | 0;
  HEAP8[$25 + 5244800 | 0] = 8;
  HEAP32[5245068 >> 2] = 5268364;
  HEAP16[5245952 >> 1] = -1;
  HEAP8[5246394] = 6;
  var $26 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $26 + 1 | 0;
  HEAP8[$26 + 5244800 | 0] = 9;
  HEAP32[5245072 >> 2] = 5267832;
  HEAP16[5245954 >> 1] = -1;
  HEAP8[5246395] = 7;
  var $27 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $27 + 1 | 0;
  HEAP8[$27 + 5244800 | 0] = 10;
  HEAP32[5245076 >> 2] = 5267632;
  HEAP16[5245956 >> 1] = -1;
  HEAP8[5246396] = 8;
  return;
}
_qh_allstatB["X"] = 1;
function _qh_setnew_delnthsorted($set, $size, $nth, $prepend) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sub = $size - $nth | 0;
    var $sub1 = $sub - 1 | 0;
    var $cmp = ($sub1 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5257256);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    var $sub2 = $size - 1 | 0;
    var $add = $sub2 + $prepend | 0;
    var $call = _qh_setnew($add);
    var $add3 = $prepend + $size | 0;
    var $maxsize = $call | 0;
    var $0 = HEAP32[$maxsize >> 2];
    var $1 = $call + 4 + ($0 << 2) | 0;
    var $add3_c = $add3;
    HEAP32[$1 >> 2] = $add3_c;
    var $p = $set + 4 | 0;
    var $p8 = $call + 4 | 0;
    var $add_ptr = $p8 + ($prepend << 2) | 0;
    if (($nth | 0) == 1) {
      label = 5;
      break;
    } else if (($nth | 0) == 2) {
      label = 6;
      break;
    } else if (($nth | 0) == 3) {
      label = 7;
      break;
    } else if (($nth | 0) == 4) {
      label = 8;
      break;
    } else if (($nth | 0) == 0) {
      var $oldp_0 = $p;
      var $newp_0 = $add_ptr;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $incdec_ptr = $p + 4 | 0;
    var $2 = HEAP32[$p >> 2];
    var $add_ptr_sum65 = $prepend + 1 | 0;
    var $incdec_ptr10 = $p8 + ($add_ptr_sum65 << 2) | 0;
    HEAP32[$add_ptr >> 2] = $2;
    var $oldp_0 = $incdec_ptr;
    var $newp_0 = $incdec_ptr10;
    label = 10;
    break;
   case 6:
    var $incdec_ptr12 = $p + 4 | 0;
    var $3 = HEAP32[$p >> 2];
    var $add_ptr_sum64 = $prepend + 1 | 0;
    var $incdec_ptr13 = $p8 + ($add_ptr_sum64 << 2) | 0;
    HEAP32[$add_ptr >> 2] = $3;
    var $incdec_ptr14 = $p + 8 | 0;
    var $4 = HEAP32[$incdec_ptr12 >> 2];
    var $incdec_ptr13_sum = $prepend + 2 | 0;
    var $incdec_ptr15 = $p8 + ($incdec_ptr13_sum << 2) | 0;
    HEAP32[$incdec_ptr13 >> 2] = $4;
    var $oldp_0 = $incdec_ptr14;
    var $newp_0 = $incdec_ptr15;
    label = 10;
    break;
   case 7:
    var $incdec_ptr17 = $p + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $add_ptr_sum63 = $prepend + 1 | 0;
    var $incdec_ptr18 = $p8 + ($add_ptr_sum63 << 2) | 0;
    HEAP32[$add_ptr >> 2] = $5;
    var $incdec_ptr19 = $p + 8 | 0;
    var $6 = HEAP32[$incdec_ptr17 >> 2];
    var $incdec_ptr18_sum = $prepend + 2 | 0;
    var $incdec_ptr20 = $p8 + ($incdec_ptr18_sum << 2) | 0;
    HEAP32[$incdec_ptr18 >> 2] = $6;
    var $incdec_ptr21 = $p + 12 | 0;
    var $7 = HEAP32[$incdec_ptr19 >> 2];
    var $incdec_ptr20_sum = $prepend + 3 | 0;
    var $incdec_ptr22 = $p8 + ($incdec_ptr20_sum << 2) | 0;
    HEAP32[$incdec_ptr20 >> 2] = $7;
    var $oldp_0 = $incdec_ptr21;
    var $newp_0 = $incdec_ptr22;
    label = 10;
    break;
   case 8:
    var $incdec_ptr24 = $p + 4 | 0;
    var $8 = HEAP32[$p >> 2];
    var $add_ptr_sum = $prepend + 1 | 0;
    var $incdec_ptr25 = $p8 + ($add_ptr_sum << 2) | 0;
    HEAP32[$add_ptr >> 2] = $8;
    var $incdec_ptr26 = $p + 8 | 0;
    var $9 = HEAP32[$incdec_ptr24 >> 2];
    var $incdec_ptr25_sum = $prepend + 2 | 0;
    var $incdec_ptr27 = $p8 + ($incdec_ptr25_sum << 2) | 0;
    HEAP32[$incdec_ptr25 >> 2] = $9;
    var $incdec_ptr28 = $p + 12 | 0;
    var $10 = HEAP32[$incdec_ptr26 >> 2];
    var $incdec_ptr27_sum = $prepend + 3 | 0;
    var $incdec_ptr29 = $p8 + ($incdec_ptr27_sum << 2) | 0;
    HEAP32[$incdec_ptr27 >> 2] = $10;
    var $incdec_ptr30 = $p + 16 | 0;
    var $11 = HEAP32[$incdec_ptr28 >> 2];
    var $incdec_ptr29_sum = $prepend + 4 | 0;
    var $incdec_ptr31 = $p8 + ($incdec_ptr29_sum << 2) | 0;
    HEAP32[$incdec_ptr29 >> 2] = $11;
    var $oldp_0 = $incdec_ptr30;
    var $newp_0 = $incdec_ptr31;
    label = 10;
    break;
   case 9:
    var $12 = $add_ptr;
    var $13 = $p;
    var $mul = $nth << 2;
    _memcpy($12, $13, $mul);
    var $add_ptr_sum66 = $prepend + $nth | 0;
    var $add_ptr32 = $p8 + ($add_ptr_sum66 << 2) | 0;
    var $add_ptr33 = $p + ($nth << 2) | 0;
    var $oldp_0 = $add_ptr33;
    var $newp_0 = $add_ptr32;
    label = 10;
    break;
   case 10:
    var $newp_0;
    var $oldp_0;
    var $incdec_ptr34 = $oldp_0 + 4 | 0;
    if (($sub | 0) == 2) {
      label = 11;
      break;
    } else if (($sub | 0) == 3) {
      label = 12;
      break;
    } else if (($sub | 0) == 4) {
      label = 13;
      break;
    } else if (($sub | 0) == 5) {
      label = 14;
      break;
    } else if (($sub | 0) == 1) {
      var $newp_1 = $newp_0;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    var $14 = HEAP32[$incdec_ptr34 >> 2];
    var $incdec_ptr38 = $newp_0 + 4 | 0;
    HEAP32[$newp_0 >> 2] = $14;
    var $newp_1 = $incdec_ptr38;
    label = 16;
    break;
   case 12:
    var $incdec_ptr40 = $oldp_0 + 8 | 0;
    var $15 = HEAP32[$incdec_ptr34 >> 2];
    var $incdec_ptr41 = $newp_0 + 4 | 0;
    HEAP32[$newp_0 >> 2] = $15;
    var $16 = HEAP32[$incdec_ptr40 >> 2];
    var $incdec_ptr43 = $newp_0 + 8 | 0;
    HEAP32[$incdec_ptr41 >> 2] = $16;
    var $newp_1 = $incdec_ptr43;
    label = 16;
    break;
   case 13:
    var $incdec_ptr45 = $oldp_0 + 8 | 0;
    var $17 = HEAP32[$incdec_ptr34 >> 2];
    var $incdec_ptr46 = $newp_0 + 4 | 0;
    HEAP32[$newp_0 >> 2] = $17;
    var $incdec_ptr47 = $oldp_0 + 12 | 0;
    var $18 = HEAP32[$incdec_ptr45 >> 2];
    var $incdec_ptr48 = $newp_0 + 8 | 0;
    HEAP32[$incdec_ptr46 >> 2] = $18;
    var $19 = HEAP32[$incdec_ptr47 >> 2];
    var $incdec_ptr50 = $newp_0 + 12 | 0;
    HEAP32[$incdec_ptr48 >> 2] = $19;
    var $newp_1 = $incdec_ptr50;
    label = 16;
    break;
   case 14:
    var $incdec_ptr52 = $oldp_0 + 8 | 0;
    var $20 = HEAP32[$incdec_ptr34 >> 2];
    var $incdec_ptr53 = $newp_0 + 4 | 0;
    HEAP32[$newp_0 >> 2] = $20;
    var $incdec_ptr54 = $oldp_0 + 12 | 0;
    var $21 = HEAP32[$incdec_ptr52 >> 2];
    var $incdec_ptr55 = $newp_0 + 8 | 0;
    HEAP32[$incdec_ptr53 >> 2] = $21;
    var $incdec_ptr56 = $oldp_0 + 16 | 0;
    var $22 = HEAP32[$incdec_ptr54 >> 2];
    var $incdec_ptr57 = $newp_0 + 12 | 0;
    HEAP32[$incdec_ptr55 >> 2] = $22;
    var $23 = HEAP32[$incdec_ptr56 >> 2];
    var $incdec_ptr59 = $newp_0 + 16 | 0;
    HEAP32[$incdec_ptr57 >> 2] = $23;
    var $newp_1 = $incdec_ptr59;
    label = 16;
    break;
   case 15:
    var $24 = $newp_0;
    var $25 = $incdec_ptr34;
    var $mul61 = $sub1 << 2;
    _memcpy($24, $25, $mul61);
    var $add_ptr62 = $newp_0 + ($sub1 << 2) | 0;
    var $newp_1 = $add_ptr62;
    label = 16;
    break;
   case 16:
    var $newp_1;
    HEAP32[$newp_1 >> 2] = 0;
    return $call;
  }
}
_qh_setnew_delnthsorted["X"] = 1;
function _qh_setreplace($set, $oldelem, $newelem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $p = $set + 4 | 0;
    var $elemp_0 = $p;
    label = 3;
    break;
   case 3:
    var $elemp_0;
    var $0 = HEAP32[$elemp_0 >> 2];
    var $tobool = ($0 | 0) != 0;
    var $not_cmp = ($0 | 0) != ($oldelem | 0);
    var $_tobool = $tobool & $not_cmp;
    var $incdec_ptr = $elemp_0 + 4 | 0;
    if ($_tobool) {
      var $elemp_0 = $incdec_ptr;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[$elemp_0 >> 2] = $newelem;
    label = 7;
    break;
   case 6:
    _qh_fprintf(5297196);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    label = 7;
    break;
   case 7:
    return;
  }
}
function _qh_settemp($setsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _qh_setnew($setsize);
    var $0 = $call;
    _qh_setappend(5242928, $0);
    var $1 = HEAP32[5242936 >> 2];
    var $cmp = ($1 | 0) > 4;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[5242928 >> 2];
    var $call1 = _qh_setsize($2);
    _qh_fprintf(5291832);
    label = 4;
    break;
   case 4:
    return $call;
  }
}
function _qh_settempfree($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$set >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call = _qh_settemppop();
    var $1 = HEAP32[$set >> 2];
    var $cmp = ($call | 0) == ($1 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_settemppush($call);
    var $2 = HEAP32[$set >> 2];
    var $call2 = _qh_setsize($2);
    var $3 = HEAP32[5242928 >> 2];
    var $call3 = _qh_setsize($3);
    var $call4 = _qh_setsize($call);
    _qh_fprintf(5290496);
    _qh_errexit(5, 0, 0);
    label = 5;
    break;
   case 5:
    _qh_setfree($set);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _qh_settemppop() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5242928 >> 2];
    var $call = _qh_setdellast($0);
    var $1 = $call;
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5288764);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5242936 >> 2];
    var $cmp = ($2 | 0) > 4;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $3 = HEAP32[5242928 >> 2];
    var $call2 = _qh_setsize($3);
    var $call3 = _qh_setsize($1);
    _qh_fprintf(5287332);
    label = 6;
    break;
   case 6:
    return $1;
  }
}
function _qh_settemppush($set) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($set | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[5242932 >> 2];
    var $1 = _fwrite(5285048, 55, 1, $0);
    _qh_errexit(5, 0, 0);
    label = 4;
    break;
   case 4:
    var $2 = $set;
    _qh_setappend(5242928, $2);
    var $3 = HEAP32[5242936 >> 2];
    var $cmp = ($3 | 0) > 4;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $4 = HEAP32[5242928 >> 2];
    var $call2 = _qh_setsize($4);
    var $call3 = _qh_setsize($set);
    _qh_fprintf(5283444);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _qh_settempfree_all() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $set = __stackBase__;
    HEAP32[$set >> 2] = 0;
    var $0 = HEAP32[5242928 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $p = $0 + 4 | 0;
    var $1 = HEAP32[$p >> 2];
    var $2 = $1;
    HEAP32[$set >> 2] = $2;
    var $tobool11 = ($1 | 0) == 0;
    if ($tobool11) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $p;
    var $setp_02 = $3;
    label = 5;
    break;
   case 5:
    var $setp_02;
    var $incdec_ptr = $setp_02 + 4 | 0;
    _qh_setfree($set);
    var $4 = HEAP32[$incdec_ptr >> 2];
    HEAP32[$set >> 2] = $4;
    var $tobool1 = ($4 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      var $setp_02 = $incdec_ptr;
      label = 5;
      break;
    }
   case 6:
    _qh_setfree(5242928);
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_setunique($set, $elem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$set >> 2];
    var $call = _qh_setin($0, $elem);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 4;
      break;
    }
   case 3:
    _qh_setappend($set, $elem);
    var $retval_0 = 1;
    label = 4;
    break;
   case 4:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_setzero($set, $size) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp1 = ($size | 0) > 0;
    var $maxsize = $set | 0;
    if ($cmp1) {
      label = 3;
      break;
    } else {
      var $maxsize4_phi_trans_insert_pre_phi = $maxsize;
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[$maxsize >> 2];
    var $cmp3 = ($0 | 0) < ($size | 0);
    if ($cmp3) {
      var $maxsize4_phi_trans_insert_pre_phi = $maxsize;
      label = 4;
      break;
    } else {
      var $1 = $0;
      label = 5;
      break;
    }
   case 4:
    var $maxsize4_phi_trans_insert_pre_phi;
    _qh_fprintf(5279548);
    _qh_setprint($set);
    _qh_errexit(5, 0, 0);
    var $_pre = HEAP32[$maxsize4_phi_trans_insert_pre_phi >> 2];
    var $1 = $_pre;
    label = 5;
    break;
   case 5:
    var $1;
    var $add = $size + 1 | 0;
    var $2 = $set + 4 + ($1 << 2) | 0;
    var $add_c = $add;
    HEAP32[$2 >> 2] = $add_c;
    var $p = $set + 4 | 0;
    var $3 = $p;
    var $add5 = $size << 2;
    var $mul = $add5 + 4 | 0;
    _memset($3, 0, $mul);
    return;
  }
}
function _qh_randomfactor($scale, $offset) {
  return (_qh_rand() | 0) * $scale + $offset;
}
function _qh_randommatrix($buffer, $dim, $rows) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp8 = ($dim | 0) > 0;
    if ($cmp8) {
      var $rowi_09 = $rows;
      var $coord_010 = $buffer;
      var $i_011 = 0;
      label = 3;
      break;
    } else {
      var $rowi_0_lcssa = $rows;
      var $coord_0_lcssa = $buffer;
      label = 7;
      break;
    }
   case 3:
    var $i_011;
    var $coord_010;
    var $rowi_09;
    var $incdec_ptr = $rowi_09 + 4 | 0;
    HEAP32[$rowi_09 >> 2] = $coord_010;
    var $k_06 = 0;
    var $coord_17 = $coord_010;
    label = 4;
    break;
   case 4:
    var $coord_17;
    var $k_06;
    var $call = _qh_rand();
    var $conv = $call | 0;
    var $mul = $conv * 2;
    var $div = $mul / 2147483647;
    var $sub = $div - 1;
    var $incdec_ptr4 = $coord_17 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$coord_17 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$coord_17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc = $k_06 + 1 | 0;
    var $exitcond = ($inc | 0) == ($dim | 0);
    if ($exitcond) {
      label = 5;
      break;
    } else {
      var $k_06 = $inc;
      var $coord_17 = $incdec_ptr4;
      label = 4;
      break;
    }
   case 5:
    var $scevgep = $coord_010 + ($dim << 3) | 0;
    var $inc6 = $i_011 + 1 | 0;
    var $exitcond15 = ($inc6 | 0) == ($dim | 0);
    if ($exitcond15) {
      label = 6;
      break;
    } else {
      var $rowi_09 = $incdec_ptr;
      var $coord_010 = $scevgep;
      var $i_011 = $inc6;
      label = 3;
      break;
    }
   case 6:
    var $scevgep14 = $rows + ($dim << 2) | 0;
    var $rowi_0_lcssa = $scevgep14;
    var $coord_0_lcssa = $scevgep;
    label = 7;
    break;
   case 7:
    var $coord_0_lcssa;
    var $rowi_0_lcssa;
    HEAP32[$rowi_0_lcssa >> 2] = $coord_0_lcssa;
    return;
  }
}
function _qh_strtod($s, $endp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _strtod($s, $endp);
    var $0 = HEAP32[$endp >> 2];
    var $cmp = $0 >>> 0 > $s >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $arrayidx = $0 - 1 | 0;
    var $1 = HEAP8[$arrayidx];
    var $cmp1 = $1 << 24 >> 24 == 32;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$endp >> 2] = $arrayidx;
    label = 5;
    break;
   case 5:
    return $call;
  }
}
function _qh_strtol($s, $endp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _strtol($s, $endp, 10);
    var $0 = HEAP32[$endp >> 2];
    var $cmp = $0 >>> 0 > $s >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $arrayidx = $0 - 1 | 0;
    var $1 = HEAP8[$arrayidx];
    var $cmp1 = $1 << 24 >> 24 == 32;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$endp >> 2] = $arrayidx;
    label = 5;
    break;
   case 5:
    return $call;
  }
}
function _qh_allstatC() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 66;
  HEAP32[5245300 >> 2] = 5267412;
  HEAP16[5246068 >> 1] = -1;
  HEAP8[5246452] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -84;
  HEAP32[5245724 >> 2] = 5267136;
  HEAP16[5246280 >> 1] = -1;
  HEAP8[5246558] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -78;
  HEAP32[5245748 >> 2] = 5266740;
  HEAP16[5246292 >> 1] = -1;
  HEAP8[5246564] = 1;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -77;
  HEAP32[5245752 >> 2] = 5266396;
  HEAP16[5246294 >> 1] = -1;
  HEAP8[5246565] = 7;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 112;
  HEAP32[5245484 >> 2] = 5266004;
  HEAP16[5246160 >> 1] = -1;
  HEAP8[5246498] = 3;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = -54;
  HEAP32[5245844 >> 2] = 5265552;
  HEAP16[5246340 >> 1] = 172;
  HEAP8[5246588] = 1;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 102;
  HEAP32[5245444 >> 2] = 5265204;
  HEAP16[5246140 >> 1] = 172;
  HEAP8[5246488] = 1;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = -41;
  HEAP32[5245896 >> 2] = 5264812;
  HEAP16[5246366 >> 1] = 172;
  HEAP8[5246601] = 2;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = -40;
  HEAP32[5245900 >> 2] = 5264412;
  HEAP16[5246368 >> 1] = -1;
  HEAP8[5246602] = 3;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = -37;
  HEAP32[5245912 >> 2] = 5264072;
  HEAP16[5246374 >> 1] = 172;
  HEAP8[5246605] = 2;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = -36;
  HEAP32[5245916 >> 2] = 5264412;
  HEAP16[5246376 >> 1] = -1;
  HEAP8[5246606] = 3;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = -60;
  HEAP32[5245820 >> 2] = 5263720;
  HEAP16[5246328 >> 1] = 172;
  HEAP8[5246582] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = -117;
  HEAP32[5245592 >> 2] = 5263308;
  HEAP16[5246214 >> 1] = 172;
  HEAP8[5246525] = 2;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = -116;
  HEAP32[5245596 >> 2] = 5262872;
  HEAP16[5246216 >> 1] = -1;
  HEAP8[5246526] = 3;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = -119;
  HEAP32[5245584 >> 2] = 5262196;
  HEAP16[5246210 >> 1] = 172;
  HEAP8[5246523] = 6;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = -118;
  HEAP32[5245588 >> 2] = 5261844;
  HEAP16[5246212 >> 1] = -1;
  HEAP8[5246524] = 6;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = -88;
  HEAP32[5245708 >> 2] = 5261400;
  HEAP16[5246272 >> 1] = 167;
  HEAP8[5246554] = 6;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = -87;
  HEAP32[5245712 >> 2] = 5261844;
  HEAP16[5246274 >> 1] = -1;
  HEAP8[5246555] = 6;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = -89;
  HEAP32[5245704 >> 2] = 5260864;
  HEAP16[5246270 >> 1] = -1;
  HEAP8[5246553] = 1;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = -64;
  HEAP32[5245804 >> 2] = 5260400;
  HEAP16[5246320 >> 1] = -1;
  HEAP8[5246578] = 1;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = 49;
  HEAP32[5245232 >> 2] = 5260068;
  HEAP16[5246034 >> 1] = -1;
  HEAP8[5246435] = 1;
  var $21 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $21 + 1 | 0;
  HEAP8[$21 + 5244800 | 0] = -112;
  HEAP32[5245612 >> 2] = 5259816;
  HEAP16[5246224 >> 1] = -1;
  HEAP8[5246530] = 1;
  var $22 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $22 + 1 | 0;
  HEAP8[$22 + 5244800 | 0] = -107;
  HEAP32[5245632 >> 2] = 5259532;
  HEAP16[5246234 >> 1] = -1;
  HEAP8[5246535] = 1;
  var $23 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $23 + 1 | 0;
  HEAP8[$23 + 5244800 | 0] = -109;
  HEAP32[5245624 >> 2] = 5259308;
  HEAP16[5246230 >> 1] = -1;
  HEAP8[5246533] = 1;
  var $24 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $24 + 1 | 0;
  HEAP8[$24 + 5244800 | 0] = -108;
  HEAP32[5245628 >> 2] = 5258936;
  HEAP16[5246232 >> 1] = -1;
  HEAP8[5246534] = 1;
  var $25 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $25 + 1 | 0;
  HEAP8[$25 + 5244800 | 0] = 97;
  HEAP32[5245424 >> 2] = 5258536;
  HEAP16[5246130 >> 1] = -1;
  HEAP8[5246483] = 1;
  var $26 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $26 + 1 | 0;
  HEAP8[$26 + 5244800 | 0] = -100;
  HEAP32[5245660 >> 2] = 5258308;
  HEAP16[5246248 >> 1] = -1;
  HEAP8[5246542] = 1;
  var $27 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $27 + 1 | 0;
  HEAP8[$27 + 5244800 | 0] = 56;
  HEAP32[5245260 >> 2] = 5258056;
  HEAP16[5246048 >> 1] = -1;
  HEAP8[5246442] = 1;
  var $28 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $28 + 1 | 0;
  HEAP8[$28 + 5244800 | 0] = -61;
  HEAP32[5245816 >> 2] = 5257948;
  HEAP16[5246326 >> 1] = -1;
  HEAP8[5246581] = 1;
  var $29 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $29 + 1 | 0;
  HEAP8[$29 + 5244800 | 0] = 20;
  HEAP32[5245116 >> 2] = 5257588;
  HEAP16[5245976 >> 1] = 195;
  HEAP8[5246406] = 1;
  return;
}
_qh_allstatC["X"] = 1;
function _qh_allstatD() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = -39;
  HEAP32[5245904 >> 2] = 5257236;
  HEAP16[5246370 >> 1] = -1;
  HEAP8[5246603] = 1;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -35;
  HEAP32[5245920 >> 2] = 5256924;
  HEAP16[5246378 >> 1] = -1;
  HEAP8[5246607] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -38;
  HEAP32[5245908 >> 2] = 5256468;
  HEAP16[5246372 >> 1] = -1;
  HEAP8[5246604] = 3;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -34;
  HEAP32[5245924 >> 2] = 5256244;
  HEAP16[5246380 >> 1] = -1;
  HEAP8[5246608] = 3;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 61;
  HEAP32[5245280 >> 2] = 5255844;
  HEAP16[5246058 >> 1] = -1;
  HEAP8[5246447] = 0;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 47;
  HEAP32[5245224 >> 2] = 5255528;
  HEAP16[5246030 >> 1] = -1;
  HEAP8[5246433] = 2;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 48;
  HEAP32[5245228 >> 2] = 5255352;
  HEAP16[5246032 >> 1] = -1;
  HEAP8[5246434] = 3;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 82;
  HEAP32[5245364 >> 2] = 5255156;
  HEAP16[5246100 >> 1] = -1;
  HEAP8[5246468] = 1;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 84;
  HEAP32[5245372 >> 2] = 5254924;
  HEAP16[5246104 >> 1] = 82;
  HEAP8[5246470] = 2;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 83;
  HEAP32[5245368 >> 2] = 5254532;
  HEAP16[5246102 >> 1] = -1;
  HEAP8[5246469] = 3;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = 85;
  HEAP32[5245376 >> 2] = 5254356;
  HEAP16[5246106 >> 1] = 82;
  HEAP8[5246471] = 2;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 91;
  HEAP32[5245400 >> 2] = 5253968;
  HEAP16[5246118 >> 1] = -1;
  HEAP8[5246477] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 93;
  HEAP32[5245408 >> 2] = 5254924;
  HEAP16[5246122 >> 1] = 91;
  HEAP8[5246479] = 2;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 92;
  HEAP32[5245404 >> 2] = 5254532;
  HEAP16[5246120 >> 1] = -1;
  HEAP8[5246478] = 3;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 94;
  HEAP32[5245412 >> 2] = 5253684;
  HEAP16[5246124 >> 1] = 91;
  HEAP8[5246480] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 95;
  HEAP32[5245416 >> 2] = 5253448;
  HEAP16[5246126 >> 1] = -1;
  HEAP8[5246481] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = 87;
  HEAP32[5245384 >> 2] = 5253188;
  HEAP16[5246110 >> 1] = -1;
  HEAP8[5246473] = 1;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = 89;
  HEAP32[5245392 >> 2] = 5254924;
  HEAP16[5246114 >> 1] = 87;
  HEAP8[5246475] = 2;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = 88;
  HEAP32[5245388 >> 2] = 5254532;
  HEAP16[5246112 >> 1] = -1;
  HEAP8[5246474] = 3;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = 90;
  HEAP32[5245396 >> 2] = 5253684;
  HEAP16[5246116 >> 1] = 87;
  HEAP8[5246476] = 1;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = -94;
  HEAP32[5245684 >> 2] = 5252964;
  HEAP16[5246260 >> 1] = -1;
  HEAP8[5246548] = 1;
  var $21 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $21 + 1 | 0;
  HEAP8[$21 + 5244800 | 0] = -97;
  HEAP32[5245672 >> 2] = 5252736;
  HEAP16[5246254 >> 1] = -1;
  HEAP8[5246545] = 1;
  var $22 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $22 + 1 | 0;
  HEAP8[$22 + 5244800 | 0] = -95;
  HEAP32[5245680 >> 2] = 5252448;
  HEAP16[5246258 >> 1] = -1;
  HEAP8[5246547] = 1;
  return;
}
_qh_allstatD["X"] = 1;
function _qh_allstatE() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = -93;
  HEAP32[5245688 >> 2] = 5252264;
  HEAP16[5246262 >> 1] = -1;
  HEAP8[5246549] = 1;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -90;
  HEAP32[5245700 >> 2] = 5251940;
  HEAP16[5246268 >> 1] = -1;
  HEAP8[5246552] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = 33;
  HEAP32[5245168 >> 2] = 5251652;
  HEAP16[5246002 >> 1] = -1;
  HEAP8[5246419] = 1;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = 17;
  HEAP32[5245104 >> 2] = 5251400;
  HEAP16[5245970 >> 1] = -1;
  HEAP8[5246403] = 1;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 18;
  HEAP32[5245108 >> 2] = 5251148;
  HEAP16[5245972 >> 1] = -1;
  HEAP8[5246404] = 1;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 109;
  HEAP32[5245472 >> 2] = 5250904;
  HEAP16[5246154 >> 1] = -1;
  HEAP8[5246495] = 6;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = -91;
  HEAP32[5245696 >> 2] = 5250496;
  HEAP16[5246266 >> 1] = -1;
  HEAP8[5246551] = 1;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = -57;
  HEAP32[5245832 >> 2] = 5250252;
  HEAP16[5246334 >> 1] = -1;
  HEAP8[5246585] = 1;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = -92;
  HEAP32[5245692 >> 2] = 5250108;
  HEAP16[5246264 >> 1] = -1;
  HEAP8[5246550] = 1;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 50;
  HEAP32[5245236 >> 2] = 5249728;
  HEAP16[5246036 >> 1] = -1;
  HEAP8[5246436] = 1;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = 51;
  HEAP32[5245240 >> 2] = 5249468;
  HEAP16[5246038 >> 1] = -1;
  HEAP8[5246437] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 52;
  HEAP32[5245244 >> 2] = 5302360;
  HEAP16[5246040 >> 1] = -1;
  HEAP8[5246438] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 53;
  HEAP32[5245248 >> 2] = 5302076;
  HEAP16[5246042 >> 1] = -1;
  HEAP8[5246439] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 55;
  HEAP32[5245256 >> 2] = 5301768;
  HEAP16[5246046 >> 1] = -1;
  HEAP8[5246441] = 1;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 54;
  HEAP32[5245252 >> 2] = 5301444;
  HEAP16[5246044 >> 1] = -1;
  HEAP8[5246440] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = -58;
  HEAP32[5245828 >> 2] = 5301096;
  HEAP16[5246332 >> 1] = -1;
  HEAP8[5246584] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = -96;
  HEAP32[5245676 >> 2] = 5300940;
  HEAP16[5246256 >> 1] = -1;
  HEAP8[5246546] = 1;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = 21;
  HEAP32[5245120 >> 2] = 5300620;
  HEAP16[5245978 >> 1] = -1;
  HEAP8[5246407] = 1;
  return;
}
_qh_allstatE["X"] = 1;
function _qh_allstatE2() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 62;
  HEAP32[5245284 >> 2] = 5300556;
  HEAP16[5246060 >> 1] = -1;
  HEAP8[5246448] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = 98;
  HEAP32[5245428 >> 2] = 5300224;
  HEAP16[5246132 >> 1] = -1;
  HEAP8[5246484] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = 101;
  HEAP32[5245440 >> 2] = 5300084;
  HEAP16[5246138 >> 1] = 98;
  HEAP8[5246487] = 1;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = 99;
  HEAP32[5245432 >> 2] = 5299888;
  HEAP16[5246134 >> 1] = -1;
  HEAP8[5246485] = 1;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 100;
  HEAP32[5245436 >> 2] = 5299708;
  HEAP16[5246136 >> 1] = 99;
  HEAP8[5246486] = 1;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 77;
  HEAP32[5245344 >> 2] = 5299428;
  HEAP16[5246090 >> 1] = -1;
  HEAP8[5246463] = 1;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 72;
  HEAP32[5245324 >> 2] = 5299132;
  HEAP16[5246080 >> 1] = -1;
  HEAP8[5246458] = 1;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 63;
  HEAP32[5245288 >> 2] = 5298932;
  HEAP16[5246062 >> 1] = -1;
  HEAP8[5246449] = 0;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 7;
  HEAP32[5245064 >> 2] = 5298528;
  HEAP16[5245950 >> 1] = -1;
  HEAP8[5246393] = 1;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 15;
  HEAP32[5245096 >> 2] = 5298256;
  HEAP16[5245966 >> 1] = -1;
  HEAP8[5246401] = 1;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = 16;
  HEAP32[5245100 >> 2] = 5298016;
  HEAP16[5245968 >> 1] = -1;
  HEAP8[5246402] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 19;
  HEAP32[5245112 >> 2] = 5297712;
  HEAP16[5245974 >> 1] = -1;
  HEAP8[5246405] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 57;
  HEAP32[5245264 >> 2] = 5297640;
  HEAP16[5246050 >> 1] = -1;
  HEAP8[5246443] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 30;
  HEAP32[5245156 >> 2] = 5297448;
  HEAP16[5245996 >> 1] = -1;
  HEAP8[5246416] = 1;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 31;
  HEAP32[5245160 >> 2] = 5297160;
  HEAP16[5245998 >> 1] = -1;
  HEAP8[5246417] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 26;
  HEAP32[5245140 >> 2] = 5296880;
  HEAP16[5245988 >> 1] = -1;
  HEAP8[5246412] = 1;
  return;
}
_qh_allstatE2["X"] = 1;
function _qh_allstatF() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 64;
  HEAP32[5245292 >> 2] = 5296592;
  HEAP16[5246064 >> 1] = -1;
  HEAP8[5246450] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -85;
  HEAP32[5245720 >> 2] = 5296392;
  HEAP16[5246278 >> 1] = -1;
  HEAP8[5246557] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = 121;
  HEAP32[5245520 >> 2] = 5296196;
  HEAP16[5246178 >> 1] = 171;
  HEAP8[5246507] = 2;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = 122;
  HEAP32[5245524 >> 2] = 5296036;
  HEAP16[5246180 >> 1] = -1;
  HEAP8[5246508] = 2;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 126;
  HEAP32[5245540 >> 2] = 5295892;
  HEAP16[5246188 >> 1] = 171;
  HEAP8[5246512] = 2;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 127;
  HEAP32[5245544 >> 2] = 5295660;
  HEAP16[5246190 >> 1] = -1;
  HEAP8[5246513] = 2;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 123;
  HEAP32[5245528 >> 2] = 5295540;
  HEAP16[5246182 >> 1] = -1;
  HEAP8[5246509] = 2;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = -128;
  HEAP32[5245548 >> 2] = 5295420;
  HEAP16[5246192 >> 1] = -1;
  HEAP8[5246514] = 2;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 110;
  HEAP32[5245476 >> 2] = 5295236;
  HEAP16[5246156 >> 1] = -1;
  HEAP8[5246496] = 7;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = -124;
  HEAP32[5245564 >> 2] = 5295084;
  HEAP16[5246200 >> 1] = -1;
  HEAP8[5246518] = 8;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = -33;
  HEAP32[5245928 >> 2] = 5294968;
  HEAP16[5246382 >> 1] = -1;
  HEAP8[5246609] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = -32;
  HEAP32[5245932 >> 2] = 5294888;
  HEAP16[5246384 >> 1] = -1;
  HEAP8[5246610] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = -59;
  HEAP32[5245824 >> 2] = 5294732;
  HEAP16[5246330 >> 1] = -1;
  HEAP8[5246583] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = -127;
  HEAP32[5245552 >> 2] = 5294500;
  HEAP16[5246194 >> 1] = -1;
  HEAP8[5246515] = 1;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = -98;
  HEAP32[5245668 >> 2] = 5294400;
  HEAP16[5246252 >> 1] = -1;
  HEAP8[5246544] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 39;
  HEAP32[5245192 >> 2] = 5294100;
  HEAP16[5246014 >> 1] = -1;
  HEAP8[5246425] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = 38;
  HEAP32[5245188 >> 2] = 5293980;
  HEAP16[5246012 >> 1] = 39;
  HEAP8[5246424] = 2;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = 37;
  HEAP32[5245184 >> 2] = 5293776;
  HEAP16[5246010 >> 1] = -1;
  HEAP8[5246423] = 3;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = 124;
  HEAP32[5245532 >> 2] = 5293664;
  HEAP16[5246184 >> 1] = -1;
  HEAP8[5246510] = 1;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = 125;
  HEAP32[5245536 >> 2] = 5293464;
  HEAP16[5246186 >> 1] = -1;
  HEAP8[5246511] = 1;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = 120;
  HEAP32[5245516 >> 2] = 5293156;
  HEAP16[5246176 >> 1] = -1;
  HEAP8[5246506] = 1;
  var $21 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $21 + 1 | 0;
  HEAP8[$21 + 5244800 | 0] = -126;
  HEAP32[5245556 >> 2] = 5293036;
  HEAP16[5246196 >> 1] = -1;
  HEAP8[5246516] = 1;
  var $22 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $22 + 1 | 0;
  HEAP8[$22 + 5244800 | 0] = 40;
  HEAP32[5245196 >> 2] = 5292904;
  HEAP16[5246016 >> 1] = -1;
  HEAP8[5246426] = 1;
  var $23 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $23 + 1 | 0;
  HEAP8[$23 + 5244800 | 0] = 44;
  HEAP32[5245212 >> 2] = 5292640;
  HEAP16[5246024 >> 1] = -1;
  HEAP8[5246430] = 1;
  var $24 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $24 + 1 | 0;
  HEAP8[$24 + 5244800 | 0] = 119;
  HEAP32[5245512 >> 2] = 5292492;
  HEAP16[5246174 >> 1] = -1;
  HEAP8[5246505] = 1;
  var $25 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $25 + 1 | 0;
  HEAP8[$25 + 5244800 | 0] = -120;
  HEAP32[5245580 >> 2] = 5292292;
  HEAP16[5246208 >> 1] = -1;
  HEAP8[5246522] = 1;
  var $26 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $26 + 1 | 0;
  HEAP8[$26 + 5244800 | 0] = -62;
  HEAP32[5245812 >> 2] = 5292164;
  HEAP16[5246324 >> 1] = -1;
  HEAP8[5246580] = 2;
  return;
}
_qh_allstatF["X"] = 1;
function _qh_allstatG() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 0;
  HEAP32[5245036 >> 2] = 5291956;
  HEAP16[5245936 >> 1] = -1;
  HEAP8[5246386] = 1;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = 2;
  HEAP32[5245044 >> 2] = 5291804;
  HEAP16[5245940 >> 1] = 0;
  HEAP8[5246388] = 6;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = 1;
  HEAP32[5245040 >> 2] = 5291652;
  HEAP16[5245938 >> 1] = -1;
  HEAP8[5246387] = 7;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = 27;
  HEAP32[5245144 >> 2] = 5291448;
  HEAP16[5245990 >> 1] = -1;
  HEAP8[5246413] = 1;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 29;
  HEAP32[5245152 >> 2] = 5291804;
  HEAP16[5245994 >> 1] = 27;
  HEAP8[5246415] = 6;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 28;
  HEAP32[5245148 >> 2] = 5291652;
  HEAP16[5245992 >> 1] = -1;
  HEAP8[5246414] = 7;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 22;
  HEAP32[5245124 >> 2] = 5291388;
  HEAP16[5245980 >> 1] = -1;
  HEAP8[5246408] = 1;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 24;
  HEAP32[5245132 >> 2] = 5291804;
  HEAP16[5245984 >> 1] = 22;
  HEAP8[5246410] = 6;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 23;
  HEAP32[5245128 >> 2] = 5291652;
  HEAP16[5245982 >> 1] = -1;
  HEAP8[5246409] = 7;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 11;
  HEAP32[5245080 >> 2] = 5291256;
  HEAP16[5245958 >> 1] = -1;
  HEAP8[5246397] = 1;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = 13;
  HEAP32[5245088 >> 2] = 5291804;
  HEAP16[5245962 >> 1] = 11;
  HEAP8[5246399] = 6;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = 12;
  HEAP32[5245084 >> 2] = 5291652;
  HEAP16[5245960 >> 1] = -1;
  HEAP8[5246398] = 7;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 41;
  HEAP32[5245200 >> 2] = 5291016;
  HEAP16[5246018 >> 1] = -1;
  HEAP8[5246427] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 43;
  HEAP32[5245208 >> 2] = 5291804;
  HEAP16[5246022 >> 1] = 41;
  HEAP8[5246429] = 6;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 42;
  HEAP32[5245204 >> 2] = 5291652;
  HEAP16[5246020 >> 1] = -1;
  HEAP8[5246428] = 7;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 78;
  HEAP32[5245348 >> 2] = 5290944;
  HEAP16[5246092 >> 1] = -1;
  HEAP8[5246464] = 1;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = 80;
  HEAP32[5245356 >> 2] = 5291804;
  HEAP16[5246096 >> 1] = 78;
  HEAP8[5246466] = 6;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = 79;
  HEAP32[5245352 >> 2] = 5291652;
  HEAP16[5246094 >> 1] = -1;
  HEAP8[5246465] = 7;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = 73;
  HEAP32[5245328 >> 2] = 5290772;
  HEAP16[5246082 >> 1] = -1;
  HEAP8[5246459] = 1;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = 75;
  HEAP32[5245336 >> 2] = 5291804;
  HEAP16[5246086 >> 1] = 73;
  HEAP8[5246461] = 6;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = 74;
  HEAP32[5245332 >> 2] = 5291652;
  HEAP16[5246084 >> 1] = -1;
  HEAP8[5246460] = 7;
  return;
}
_qh_allstatG["X"] = 1;
function _qh_allstatH() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 65;
  HEAP32[5245296 >> 2] = 5290736;
  HEAP16[5246066 >> 1] = -1;
  HEAP8[5246451] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -79;
  HEAP32[5245744 >> 2] = 5290636;
  HEAP16[5246290 >> 1] = -1;
  HEAP8[5246563] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -80;
  HEAP32[5245740 >> 2] = 5290460;
  HEAP16[5246288 >> 1] = -1;
  HEAP8[5246562] = 1;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -81;
  HEAP32[5245736 >> 2] = 5290360;
  HEAP16[5246286 >> 1] = -1;
  HEAP8[5246561] = 1;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = 86;
  HEAP32[5245380 >> 2] = 5290300;
  HEAP16[5246108 >> 1] = -1;
  HEAP8[5246472] = 1;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = 76;
  HEAP32[5245340 >> 2] = 5290264;
  HEAP16[5246088 >> 1] = -1;
  HEAP8[5246462] = 1;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = 46;
  HEAP32[5245220 >> 2] = 5290132;
  HEAP16[5246028 >> 1] = -1;
  HEAP8[5246432] = 1;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = 71;
  HEAP32[5245320 >> 2] = 5289832;
  HEAP16[5246078 >> 1] = -1;
  HEAP8[5246457] = 1;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = 70;
  HEAP32[5245316 >> 2] = 5289788;
  HEAP16[5246076 >> 1] = -1;
  HEAP8[5246456] = 1;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = 45;
  HEAP32[5245216 >> 2] = 5289648;
  HEAP16[5246026 >> 1] = -1;
  HEAP8[5246431] = 1;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = -83;
  HEAP32[5245728 >> 2] = 5288896;
  HEAP16[5246282 >> 1] = -1;
  HEAP8[5246559] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = -82;
  HEAP32[5245732 >> 2] = 5288840;
  HEAP16[5246284 >> 1] = -1;
  HEAP8[5246560] = 1;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = 106;
  HEAP32[5245460 >> 2] = 5288708;
  HEAP16[5246148 >> 1] = -1;
  HEAP8[5246492] = 1;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 104;
  HEAP32[5245452 >> 2] = 5288620;
  HEAP16[5246144 >> 1] = -1;
  HEAP8[5246490] = 1;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = 103;
  HEAP32[5245448 >> 2] = 5288432;
  HEAP16[5246142 >> 1] = -1;
  HEAP8[5246489] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = 107;
  HEAP32[5245464 >> 2] = 5288372;
  HEAP16[5246150 >> 1] = 103;
  HEAP8[5246493] = 2;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = 105;
  HEAP32[5245456 >> 2] = 5288272;
  HEAP16[5246146 >> 1] = -1;
  HEAP8[5246491] = 3;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = -45;
  HEAP32[5245880 >> 2] = 0;
  HEAP16[5246358 >> 1] = -1;
  HEAP8[5246597] = 1;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = -44;
  HEAP32[5245884 >> 2] = 5287968;
  HEAP16[5246360 >> 1] = 211;
  HEAP8[5246598] = 2;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = -43;
  HEAP32[5245888 >> 2] = 5287832;
  HEAP16[5246362 >> 1] = -1;
  HEAP8[5246599] = 3;
  var $20 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $20 + 1 | 0;
  HEAP8[$20 + 5244800 | 0] = 67;
  HEAP32[5245304 >> 2] = 5287764;
  HEAP16[5246070 >> 1] = -1;
  HEAP8[5246453] = 0;
  var $21 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $21 + 1 | 0;
  HEAP8[$21 + 5244800 | 0] = 115;
  HEAP32[5245496 >> 2] = 5287692;
  HEAP16[5246166 >> 1] = -1;
  HEAP8[5246501] = 2;
  var $22 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $22 + 1 | 0;
  HEAP8[$22 + 5244800 | 0] = 118;
  HEAP32[5245508 >> 2] = 5287500;
  HEAP16[5246172 >> 1] = -1;
  HEAP8[5246504] = 2;
  var $23 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $23 + 1 | 0;
  HEAP8[$23 + 5244800 | 0] = 116;
  HEAP32[5245500 >> 2] = 5287284;
  HEAP16[5246168 >> 1] = -1;
  HEAP8[5246502] = 2;
  var $24 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $24 + 1 | 0;
  HEAP8[$24 + 5244800 | 0] = 117;
  HEAP32[5245504 >> 2] = 5287116;
  HEAP16[5246170 >> 1] = -1;
  HEAP8[5246503] = 2;
  return;
}
_qh_allstatH["X"] = 1;
function _qh_allstatI() {
  var $0 = HEAP32[5246908 >> 2];
  HEAP32[5246916 >> 2] = $0;
  HEAP32[5246908 >> 2] = $0 + 1 | 0;
  HEAP8[$0 + 5244800 | 0] = 68;
  HEAP32[5245308 >> 2] = 5286924;
  HEAP16[5246072 >> 1] = -1;
  HEAP8[5246454] = 0;
  var $1 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $1 + 1 | 0;
  HEAP8[$1 + 5244800 | 0] = -76;
  HEAP32[5245756 >> 2] = 5286792;
  HEAP16[5246296 >> 1] = -1;
  HEAP8[5246566] = 1;
  var $2 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $2 + 1 | 0;
  HEAP8[$2 + 5244800 | 0] = -75;
  HEAP32[5245760 >> 2] = 5286544;
  HEAP16[5246298 >> 1] = 180;
  HEAP8[5246567] = 6;
  var $3 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $3 + 1 | 0;
  HEAP8[$3 + 5244800 | 0] = -74;
  HEAP32[5245764 >> 2] = 5285856;
  HEAP16[5246300 >> 1] = -1;
  HEAP8[5246568] = 7;
  var $4 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $4 + 1 | 0;
  HEAP8[$4 + 5244800 | 0] = -70;
  HEAP32[5245780 >> 2] = 5285732;
  HEAP16[5246308 >> 1] = -1;
  HEAP8[5246572] = 1;
  var $5 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $5 + 1 | 0;
  HEAP8[$5 + 5244800 | 0] = -69;
  HEAP32[5245784 >> 2] = 5285552;
  HEAP16[5246310 >> 1] = 186;
  HEAP8[5246573] = 6;
  var $6 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $6 + 1 | 0;
  HEAP8[$6 + 5244800 | 0] = -68;
  HEAP32[5245788 >> 2] = 5285404;
  HEAP16[5246312 >> 1] = -1;
  HEAP8[5246574] = 7;
  var $7 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $7 + 1 | 0;
  HEAP8[$7 + 5244800 | 0] = -67;
  HEAP32[5245792 >> 2] = 5285188;
  HEAP16[5246314 >> 1] = -1;
  HEAP8[5246575] = 1;
  var $8 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $8 + 1 | 0;
  HEAP8[$8 + 5244800 | 0] = -66;
  HEAP32[5245796 >> 2] = 5285024;
  HEAP16[5246316 >> 1] = 189;
  HEAP8[5246576] = 6;
  var $9 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $9 + 1 | 0;
  HEAP8[$9 + 5244800 | 0] = -65;
  HEAP32[5245800 >> 2] = 5284928;
  HEAP16[5246318 >> 1] = -1;
  HEAP8[5246577] = 7;
  var $10 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $10 + 1 | 0;
  HEAP8[$10 + 5244800 | 0] = -73;
  HEAP32[5245768 >> 2] = 5284844;
  HEAP16[5246302 >> 1] = -1;
  HEAP8[5246569] = 1;
  var $11 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $11 + 1 | 0;
  HEAP8[$11 + 5244800 | 0] = -72;
  HEAP32[5245772 >> 2] = 5285024;
  HEAP16[5246304 >> 1] = 183;
  HEAP8[5246570] = 6;
  var $12 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $12 + 1 | 0;
  HEAP8[$12 + 5244800 | 0] = -71;
  HEAP32[5245776 >> 2] = 5284928;
  HEAP16[5246306 >> 1] = -1;
  HEAP8[5246571] = 7;
  var $13 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $13 + 1 | 0;
  HEAP8[$13 + 5244800 | 0] = 69;
  HEAP32[5245312 >> 2] = 5284728;
  HEAP16[5246074 >> 1] = -1;
  HEAP8[5246455] = 0;
  var $14 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $14 + 1 | 0;
  HEAP8[$14 + 5244800 | 0] = -53;
  HEAP32[5245848 >> 2] = 5284400;
  HEAP16[5246342 >> 1] = -1;
  HEAP8[5246589] = 1;
  var $15 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $15 + 1 | 0;
  HEAP8[$15 + 5244800 | 0] = -51;
  HEAP32[5245856 >> 2] = 5284136;
  HEAP16[5246346 >> 1] = 203;
  HEAP8[5246591] = 2;
  var $16 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $16 + 1 | 0;
  HEAP8[$16 + 5244800 | 0] = -52;
  HEAP32[5245852 >> 2] = 5283980;
  HEAP16[5246344 >> 1] = -1;
  HEAP8[5246590] = 3;
  var $17 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $17 + 1 | 0;
  HEAP8[$17 + 5244800 | 0] = -48;
  HEAP32[5245868 >> 2] = 5283864;
  HEAP16[5246352 >> 1] = -1;
  HEAP8[5246594] = 1;
  var $18 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $18 + 1 | 0;
  HEAP8[$18 + 5244800 | 0] = -49;
  HEAP32[5245864 >> 2] = 5283800;
  HEAP16[5246350 >> 1] = -1;
  HEAP8[5246593] = 1;
  var $19 = HEAP32[5246908 >> 2];
  HEAP32[5246908 >> 2] = $19 + 1 | 0;
  HEAP8[$19 + 5244800 | 0] = -50;
  HEAP32[5245860 >> 2] = 5283628;
  HEAP16[5246348 >> 1] = -1;
  HEAP8[5246592] = 1;
  return;
}
_qh_allstatI["X"] = 1;
function _qh_allstatistics() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dec2 = 224;
    label = 3;
    break;
   case 3:
    var $dec2;
    var $arrayidx = $dec2 + 5246611 | 0;
    HEAP8[$arrayidx] = 0;
    var $dec = $dec2 - 1 | 0;
    var $tobool = ($dec2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $dec2 = $dec;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _qh_nostatistic($i) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $arrayidx = $i + 5246386 | 0;
    var $0 = HEAP8[$arrayidx];
    var $cmp = $0 << 24 >> 24 > 5;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $r = 5243e3 + ($i << 3) | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$r >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$r + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $idxprom = $0 & 255;
    var $r5 = 5246836 + ($idxprom << 3) | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$r5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$r5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp6 = $1 == $2;
    if ($cmp6) {
      var $retval_0 = 1;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $cmp10 = $0 << 24 >> 24 < 5;
    if ($cmp10) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $arrayidx13 = 5243e3 + ($i << 3) | 0;
    var $i14 = $arrayidx13;
    var $3 = HEAP32[$i14 >> 2];
    var $idxprom16 = $0 & 255;
    var $arrayidx17 = 5246836 + ($idxprom16 << 3) | 0;
    var $i18 = $arrayidx17;
    var $4 = HEAP32[$i18 >> 2];
    var $cmp19 = ($3 | 0) == ($4 | 0);
    if ($cmp19) {
      var $retval_0 = 1;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $retval_0 = 0;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _qh_collectstatistics() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    var $0 = HEAP32[5247336 >> 2];
    HEAP32[5249220 >> 2] = $0;
    HEAP32[5247336 >> 2] = 0;
    var $1 = HEAP32[5247512 >> 2];
    var $2 = HEAP32[5248928 >> 2];
    var $mul = $2 * $1 & -1;
    var $add1 = $mul + 6272 | 0;
    HEAP32[5243928 >> 2] = $add1;
    HEAP32[5243920 >> 2] = 0;
    HEAP32[5243936 >> 2] = 0;
    HEAP32[5243944 >> 2] = 0;
    HEAP32[5243024 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5243032 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243036 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5244232 >> 2] = 0;
    HEAP32[5244200 >> 2] = 0;
    HEAP32[5244224 >> 2] = 0;
    HEAP32[5244240 >> 2] = 0;
    HEAP32[5244256 >> 2] = 0;
    HEAP32[5244216 >> 2] = 0;
    HEAP32[5244208 >> 2] = 0;
    var $3 = HEAP32[5248996 >> 2];
    var $4 = HEAP32[5249184 >> 2];
    var $call = _qh_setsize($4);
    var $sub = $3 - $call | 0;
    HEAP32[5244712 >> 2] = $sub;
    var $5 = HEAP32[5247080 >> 2];
    var $6 = HEAP32[5246940 >> 2];
    var $7 = $6 | $5;
    var $8 = ($7 | 0) != 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $9 < 8.988465674311579e+307;
    var $or_cond1 = $8 | $cmp;
    if ($or_cond1) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243880 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243884 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249064 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249068 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp4 = $10 < $11;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAPF64[tempDoublePtr >> 3] = $11, HEAP32[5243880 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243884 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 5;
    break;
   case 5:
    var $tobool7 = ($5 | 0) == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244056 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244060 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249080 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249084 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp9 = $12 > $13;
    if ($cmp9) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAPF64[tempDoublePtr >> 3] = $13, HEAP32[5244056 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244060 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $facet_083 = HEAP32[5248940 >> 2];
    var $tobool1384 = ($facet_083 | 0) == 0;
    if ($tobool1384) {
      label = 11;
      break;
    } else {
      var $facet_085 = $facet_083;
      label = 9;
      break;
    }
   case 9:
    var $facet_085;
    var $next = $facet_085 + 44 | 0;
    var $14 = HEAP32[$next >> 2];
    var $tobool14 = ($14 | 0) == 0;
    if ($tobool14) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $15 = $facet_085 + 76 | 0;
    var $16 = $15;
    var $17 = HEAP32[$16 >> 2];
    var $18 = $17 & -16385;
    HEAP32[$16 >> 2] = $18;
    var $facet_085 = $14;
    label = 9;
    break;
   case 11:
    var $19 = HEAP32[5246996 >> 2];
    var $tobool16 = ($19 | 0) == 0;
    if ($tobool16) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $facet_180 = HEAP32[5248940 >> 2];
    var $tobool1981 = ($facet_180 | 0) == 0;
    if ($tobool1981) {
      label = 17;
      break;
    } else {
      var $facet_182 = $facet_180;
      label = 14;
      break;
    }
   case 13:
    var $facet_277_pr = HEAP32[5248940 >> 2];
    var $tobool3578 = ($facet_277_pr | 0) == 0;
    if ($tobool3578) {
      label = 17;
      break;
    } else {
      var $facet_279 = $facet_277_pr;
      label = 18;
      break;
    }
   case 14:
    var $facet_182;
    var $next21 = $facet_182 + 44 | 0;
    var $20 = HEAP32[$next21 >> 2];
    var $tobool22 = ($20 | 0) == 0;
    if ($tobool22) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $21 = $facet_182 + 76 | 0;
    var $22 = $21;
    var $23 = HEAP32[$22 >> 2];
    var $24 = $23 >>> 17;
    var $bf_clear = $24 & 1;
    var $25 = HEAP32[5247456 >> 2];
    var $cmp26 = ($bf_clear | 0) == ($25 | 0);
    if ($cmp26) {
      var $facet_182 = $20;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $26 = $23 | 16384;
    HEAP32[$22 >> 2] = $26;
    var $facet_182 = $20;
    label = 14;
    break;
   case 17:
    var $vertex_068 = HEAP32[5248980 >> 2];
    var $tobool18569 = ($vertex_068 | 0) == 0;
    if ($tobool18569) {
      label = 69;
      break;
    } else {
      var $vertex_070 = $vertex_068;
      label = 62;
      break;
    }
   case 18:
    var $facet_279;
    var $next37 = $facet_279 + 44 | 0;
    var $27 = HEAP32[$next37 >> 2];
    var $tobool38 = ($27 | 0) == 0;
    if ($tobool38) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $28 = $facet_279 + 76 | 0;
    var $29 = $28;
    var $30 = HEAP32[$29 >> 2];
    var $bf_clear42 = $30 & 2048;
    var $tobool43 = ($bf_clear42 | 0) != 0;
    var $31 = HEAP32[5249088 >> 2];
    var $tobool44 = ($31 | 0) != 0;
    var $or_cond2 = $tobool43 & $tobool44;
    if ($or_cond2) {
      label = 54;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $vertices = $facet_279 + 48 | 0;
    var $32 = HEAP32[$vertices >> 2];
    var $call47 = _qh_setsize($32);
    var $neighbors = $facet_279 + 56 | 0;
    var $33 = HEAP32[$neighbors >> 2];
    var $call48 = _qh_setsize($33);
    var $ridges = $facet_279 + 52 | 0;
    var $34 = HEAP32[$ridges >> 2];
    var $call49 = _qh_setsize($34);
    var $35 = HEAP32[5244200 >> 2];
    var $inc = $35 + 1 | 0;
    HEAP32[5244200 >> 2] = $inc;
    var $36 = HEAP32[5244240 >> 2];
    var $add50 = $36 + $call47 | 0;
    HEAP32[5244240 >> 2] = $add50;
    var $37 = HEAP32[5243904 >> 2];
    var $cmp51 = ($37 | 0) < ($call47 | 0);
    if ($cmp51) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[5243904 >> 2] = $call47;
    label = 22;
    break;
   case 22:
    var $38 = HEAP32[5244224 >> 2];
    var $add54 = $38 + $call48 | 0;
    HEAP32[5244224 >> 2] = $add54;
    var $39 = HEAP32[5243864 >> 2];
    var $cmp55 = ($39 | 0) < ($call48 | 0);
    if ($cmp55) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    HEAP32[5243864 >> 2] = $call48;
    label = 24;
    break;
   case 24:
    var $40 = HEAP32[$29 >> 2];
    var $bf_clear59 = $40 & 511;
    var $41 = HEAP32[5244216 >> 2];
    var $add60 = $41 + $bf_clear59 | 0;
    HEAP32[5244216 >> 2] = $add60;
    var $42 = HEAP32[5244208 >> 2];
    var $cmp63 = ($42 | 0) < ($bf_clear59 | 0);
    if ($cmp63) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[5244208 >> 2] = $bf_clear59;
    label = 26;
    break;
   case 26:
    var $bf_clear67 = $40 & 8192;
    var $tobool68 = ($bf_clear67 | 0) == 0;
    if ($tobool68) {
      label = 27;
      break;
    } else {
      label = 30;
      break;
    }
   case 27:
    var $43 = HEAP32[5247504 >> 2];
    var $cmp70 = ($call47 | 0) == ($43 | 0);
    if ($cmp70) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $44 = HEAP32[5244168 >> 2];
    var $inc72 = $44 + 1 | 0;
    HEAP32[5244168 >> 2] = $inc72;
    label = 30;
    break;
   case 29:
    var $45 = HEAP32[5244160 >> 2];
    var $inc73 = $45 + 1 | 0;
    HEAP32[5244160 >> 2] = $inc73;
    label = 30;
    break;
   case 30:
    var $tobool76 = ($call49 | 0) == 0;
    if ($tobool76) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $46 = HEAP32[5244232 >> 2];
    var $add78 = $46 + $call49 | 0;
    HEAP32[5244232 >> 2] = $add78;
    var $47 = HEAP32[5243888 >> 2];
    var $cmp79 = ($47 | 0) < ($call49 | 0);
    if ($cmp79) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    HEAP32[5243888 >> 2] = $call49;
    label = 33;
    break;
   case 33:
    var $48 = HEAP32[5248928 >> 2];
    var $add85 = $call48 + $call47 | 0;
    var $mul86 = $add85 << 2;
    var $49 = HEAP32[5243920 >> 2];
    var $add84 = $mul86 + 96 | 0;
    var $add87 = $add84 + $48 | 0;
    var $add88 = $add87 + $49 | 0;
    HEAP32[5243920 >> 2] = $add88;
    var $50 = HEAP32[$ridges >> 2];
    var $tobool90 = ($50 | 0) == 0;
    if ($tobool90) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $mul92 = $call49 << 2;
    var $add93 = $mul92 + 8 | 0;
    var $51 = HEAP32[5247504 >> 2];
    var $sub94 = $51 << 2;
    var $add96 = $sub94 + 20 | 0;
    var $mul97 = $add96 * $call49 & -1;
    var $div = $mul97 >>> 1;
    var $52 = HEAP32[5243936 >> 2];
    var $add98 = $add93 + $52 | 0;
    var $add99 = $add98 + $div | 0;
    HEAP32[5243936 >> 2] = $add99;
    label = 35;
    break;
   case 35:
    var $outsideset = $facet_279 + 60 | 0;
    var $53 = HEAP32[$outsideset >> 2];
    var $tobool101 = ($53 | 0) == 0;
    if ($tobool101) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $call104 = _qh_setsize($53);
    var $mul105 = $call104 << 2;
    var $add106 = $mul105 + 8 | 0;
    var $54 = HEAP32[5243928 >> 2];
    var $add107 = $add106 + $54 | 0;
    HEAP32[5243928 >> 2] = $add107;
    label = 37;
    break;
   case 37:
    var $coplanarset = $facet_279 + 64 | 0;
    var $55 = HEAP32[$coplanarset >> 2];
    var $tobool109 = ($55 | 0) == 0;
    if ($tobool109) {
      label = 39;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $call112 = _qh_setsize($55);
    var $mul113 = $call112 << 2;
    var $add114 = $mul113 + 8 | 0;
    var $56 = HEAP32[5243928 >> 2];
    var $add115 = $add114 + $56 | 0;
    HEAP32[5243928 >> 2] = $add115;
    label = 39;
    break;
   case 39:
    var $57 = HEAP32[$29 >> 2];
    var $bf_clear118 = $57 & 16384;
    var $tobool119 = ($bf_clear118 | 0) == 0;
    if ($tobool119) {
      label = 40;
      break;
    } else {
      label = 54;
      break;
    }
   case 40:
    var $58 = $57 | 16384;
    HEAP32[$29 >> 2] = $58;
    var $59 = HEAP32[$neighbors >> 2];
    var $tobool124 = ($59 | 0) == 0;
    if ($tobool124) {
      label = 52;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $p = $59 + 4 | 0;
    var $60 = HEAP32[$p >> 2];
    var $tobool12872 = ($60 | 0) == 0;
    if ($tobool12872) {
      label = 52;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $61 = $60;
    var $incdec_ptr7186 = $p + 4 | 0;
    var $incdec_ptr71 = $incdec_ptr7186;
    var $normal = $facet_279 + 24 | 0;
    var $incdec_ptr73 = $incdec_ptr71;
    var $62 = $61;
    label = 43;
    break;
   case 43:
    var $62;
    var $incdec_ptr73;
    var $magicptr = $62;
    var $magicptr_off = $magicptr - 1 | 0;
    var $switch = $magicptr_off >>> 0 < 2;
    if ($switch) {
      label = 51;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $63 = $62 + 76 | 0;
    var $64 = $63;
    var $65 = HEAP32[$64 >> 2];
    var $bf_clear135 = $65 & 16384;
    var $tobool136 = ($bf_clear135 | 0) == 0;
    if ($tobool136) {
      label = 45;
      break;
    } else {
      label = 51;
      break;
    }
   case 45:
    var $66 = HEAP32[$normal >> 2];
    var $tobool138 = ($66 | 0) == 0;
    if ($tobool138) {
      label = 51;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $normal140 = $62 + 24 | 0;
    var $67 = HEAP32[$normal140 >> 2];
    var $tobool141 = ($67 | 0) == 0;
    if ($tobool141) {
      label = 51;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $call146 = _qh_getangle($66, $67);
    var $68 = HEAP32[5243024 >> 2];
    var $inc147 = $68 + 1 | 0;
    HEAP32[5243024 >> 2] = $inc147;
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243032 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243036 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add148 = $call146 + $69;
    HEAPF64[tempDoublePtr >> 3] = $add148, HEAP32[5243032 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243036 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $70 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243040 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243044 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp149 = $70 < $call146;
    if ($cmp149) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    HEAPF64[tempDoublePtr >> 3] = $call146, HEAP32[5243040 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243044 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 49;
    break;
   case 49:
    var $71 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5243048 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5243052 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp152 = $71 > $call146;
    if ($cmp152) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    HEAPF64[tempDoublePtr >> 3] = $call146, HEAP32[5243048 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5243052 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 51;
    break;
   case 51:
    var $incdec_ptr = $incdec_ptr73 + 4 | 0;
    var $72 = HEAP32[$incdec_ptr73 >> 2];
    var $tobool128 = ($72 | 0) == 0;
    if ($tobool128) {
      label = 52;
      break;
    } else {
      var $incdec_ptr73 = $incdec_ptr;
      var $62 = $72;
      label = 43;
      break;
    }
   case 52:
    var $normal157 = $facet_279 + 24 | 0;
    var $73 = HEAP32[$normal157 >> 2];
    var $tobool158 = ($73 | 0) == 0;
    if ($tobool158) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $74 = HEAP32[$vertices >> 2];
    var $tobool161 = ($74 | 0) == 0;
    if ($tobool161) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $facet_2 = HEAP32[$next37 >> 2];
    var $tobool35 = ($facet_2 | 0) == 0;
    if ($tobool35) {
      label = 17;
      break;
    } else {
      var $facet_279 = $facet_2;
      label = 18;
      break;
    }
   case 55:
    var $p166 = $74 + 4 | 0;
    var $75 = HEAP32[$p166 >> 2];
    var $tobool16975 = ($75 | 0) == 0;
    if ($tobool16975) {
      label = 54;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $76 = $75;
    var $incdec_ptr1687487 = $p166 + 4 | 0;
    var $incdec_ptr16874 = $incdec_ptr1687487;
    var $incdec_ptr16876 = $incdec_ptr16874;
    var $77 = $76;
    label = 57;
    break;
   case 57:
    var $77;
    var $incdec_ptr16876;
    var $78 = HEAP32[5243440 >> 2];
    var $inc171 = $78 + 1 | 0;
    HEAP32[5243440 >> 2] = $inc171;
    var $point = $77 + 8 | 0;
    var $79 = HEAP32[$point >> 2];
    _qh_distplane($79, $facet_279, $dist);
    var $80 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244672 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244676 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $81 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$dist >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$dist + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp172 = $80 < $81;
    if ($cmp172) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    HEAPF64[tempDoublePtr >> 3] = $81, HEAP32[5244672 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244676 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 59;
    break;
   case 59:
    var $82 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244680 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244684 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp175 = $82 > $81;
    if ($cmp175) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    HEAPF64[tempDoublePtr >> 3] = $81, HEAP32[5244680 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244684 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 61;
    break;
   case 61:
    var $incdec_ptr168 = $incdec_ptr16876 + 4 | 0;
    var $83 = HEAP32[$incdec_ptr16876 >> 2];
    var $tobool169 = ($83 | 0) == 0;
    if ($tobool169) {
      label = 54;
      break;
    } else {
      var $incdec_ptr16876 = $incdec_ptr168;
      var $77 = $83;
      label = 57;
      break;
    }
   case 62:
    var $vertex_070;
    var $next187 = $vertex_070 | 0;
    var $84 = HEAP32[$next187 >> 2];
    var $tobool188 = ($84 | 0) == 0;
    if ($tobool188) {
      label = 69;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $85 = $vertex_070 + 20 | 0;
    var $86 = $85;
    var $87 = HEAP32[$86 >> 2];
    var $bf_clear192 = $87 & 1073741824;
    var $tobool193 = ($bf_clear192 | 0) == 0;
    if ($tobool193) {
      label = 64;
      break;
    } else {
      var $vertex_070 = $84;
      label = 62;
      break;
    }
   case 64:
    var $88 = HEAP32[5243944 >> 2];
    var $add196 = $88 + 24 | 0;
    HEAP32[5243944 >> 2] = $add196;
    var $neighbors197 = $vertex_070 + 12 | 0;
    var $89 = HEAP32[$neighbors197 >> 2];
    var $tobool198 = ($89 | 0) == 0;
    if ($tobool198) {
      var $vertex_0 = $84;
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 65:
    var $vertex_0;
    var $tobool185 = ($vertex_0 | 0) == 0;
    if ($tobool185) {
      label = 69;
      break;
    } else {
      var $vertex_070 = $vertex_0;
      label = 62;
      break;
    }
   case 66:
    var $call201 = _qh_setsize($89);
    var $90 = HEAP32[5244256 >> 2];
    var $add202 = $90 + $call201 | 0;
    HEAP32[5244256 >> 2] = $add202;
    var $91 = HEAP32[5243912 >> 2];
    var $cmp203 = ($91 | 0) < ($call201 | 0);
    if ($cmp203) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    HEAP32[5243912 >> 2] = $call201;
    label = 68;
    break;
   case 68:
    var $mul206 = $call201 << 2;
    var $add207 = $mul206 + 24 | 0;
    var $92 = HEAP32[5243944 >> 2];
    var $add208 = $add207 + $92 | 0;
    HEAP32[5243944 >> 2] = $add208;
    var $vertex_0_pre = HEAP32[$next187 >> 2];
    var $vertex_0 = $vertex_0_pre;
    label = 65;
    break;
   case 69:
    var $93 = HEAP32[5249220 >> 2];
    HEAP32[5247336 >> 2] = $93;
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_collectstatistics["X"] = 1;
function _qh_newstats($idx, $nextindex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $arrayidx = $idx + 5244800 | 0;
    var $0 = HEAP8[$arrayidx];
    var $idxprom = $0 & 255;
    var $arrayidx1 = $idxprom + 5246386 | 0;
    var $1 = HEAP8[$arrayidx1];
    var $cmp = $1 << 24 >> 24 == 0;
    var $add = $cmp & 1;
    var $start_0 = $add + $idx | 0;
    var $2 = HEAP32[5246908 >> 2];
    var $cmp36 = ($start_0 | 0) < ($2 | 0);
    if ($cmp36) {
      var $isnew_07 = 0;
      var $i_08 = $start_0;
      label = 3;
      break;
    } else {
      var $isnew_0_lcssa = 0;
      var $i_0_lcssa = $start_0;
      label = 7;
      break;
    }
   case 3:
    var $i_08;
    var $isnew_07;
    var $arrayidx5 = $i_08 + 5244800 | 0;
    var $3 = HEAP8[$arrayidx5];
    var $idxprom6 = $3 & 255;
    var $arrayidx7 = $idxprom6 + 5246386 | 0;
    var $4 = HEAP8[$arrayidx7];
    var $cmp9 = $4 << 24 >> 24 == 0;
    if ($cmp9) {
      var $isnew_0_lcssa = $isnew_07;
      var $i_0_lcssa = $i_08;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _qh_nostatistic($idxprom6);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $isnew_1 = $isnew_07;
      label = 6;
      break;
    }
   case 5:
    var $arrayidx15 = $idxprom6 + 5246611 | 0;
    var $5 = HEAP8[$arrayidx15];
    var $tobool16 = $5 << 24 >> 24 == 0;
    var $_isnew_0 = $tobool16 ? 1 : $isnew_07;
    var $isnew_1 = $_isnew_0;
    label = 6;
    break;
   case 6:
    var $isnew_1;
    var $inc = $i_08 + 1 | 0;
    var $cmp3 = ($inc | 0) < ($2 | 0);
    if ($cmp3) {
      var $isnew_07 = $isnew_1;
      var $i_08 = $inc;
      label = 3;
      break;
    } else {
      var $isnew_0_lcssa = $isnew_1;
      var $i_0_lcssa = $inc;
      label = 7;
      break;
    }
   case 7:
    var $i_0_lcssa;
    var $isnew_0_lcssa;
    HEAP32[$nextindex >> 2] = $i_0_lcssa;
    return $isnew_0_lcssa;
  }
}
function _qh_printallstatistics() {
  _qh_allstatistics();
  _qh_collectstatistics();
  _qh_printstatistics();
  _qh_memstatistics();
  return;
}
function _qh_printstatistics() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $i = __stackBase__;
    var $ave = __stackBase__ + 4;
    var $0 = HEAP32[5247512 >> 2];
    var $1 = HEAP32[5248996 >> 2];
    var $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5244344 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244348 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $storemerge = 0;
    label = 5;
    break;
   case 4:
    var $2 = HEAP32[5244336 >> 2];
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244344 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244348 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244352 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244356 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call = _qh_stddev($2, $3, $4, $ave);
    var $storemerge = $call;
    label = 5;
    break;
   case 5:
    var $storemerge;
    HEAPF64[tempDoublePtr >> 3] = $storemerge, HEAP32[5244352 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244356 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $5 = HEAP32[5244376 >> 2];
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244096 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244100 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5244104 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5244108 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $call1 = _qh_stddev($5, $6, $7, $ave);
    HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[5244104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5244108 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    _qh_fprintf(5282996);
    _qh_fprintf(5282544);
    var $8 = HEAP32[5247500 >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _qh_fprintf(5282424);
    label = 7;
    break;
   case 7:
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246980 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246984 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp4 = $9 < 8.988465674311579e+307;
    if ($cmp4) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _qh_fprintf(5282136);
    label = 9;
    break;
   case 9:
    var $10 = HEAP32[5247140 >> 2];
    var $tobool7 = ($10 | 0) == 0;
    if ($tobool7) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5281936);
    label = 11;
    break;
   case 11:
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5246988 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5246992 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp10 = $11 < 8.988465674311579e+307;
    if ($cmp10) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5281808);
    label = 13;
    break;
   case 13:
    var $12 = HEAP32[5247136 >> 2];
    var $tobool13 = ($12 | 0) == 0;
    if ($tobool13) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _qh_fprintf(5281684);
    label = 15;
    break;
   case 15:
    _qh_fprintf(5281500);
    var $13 = HEAP32[5247504 >> 2];
    var $cmp1613 = ($13 | 0) > 0;
    if ($cmp1613) {
      var $k_014 = 0;
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $k_014;
    _qh_fprintf(5281396);
    var $inc = $k_014 + 1 | 0;
    var $14 = HEAP32[5247504 >> 2];
    var $cmp16 = ($inc | 0) < ($14 | 0);
    if ($cmp16) {
      var $k_014 = $inc;
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_fprintf(5281244);
    HEAP32[$i >> 2] = 0;
    var $15 = HEAP32[5246908 >> 2];
    var $cmp1812 = ($15 | 0) > 0;
    if ($cmp1812) {
      var $16 = 0;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $16;
    _qh_printstats($16, $i);
    var $17 = HEAP32[$i >> 2];
    var $18 = HEAP32[5246908 >> 2];
    var $cmp18 = ($17 | 0) < ($18 | 0);
    if ($cmp18) {
      var $16 = $17;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printstatistics["X"] = 1;
function _qh_stddev($num, $tot, $tot2, $ave) {
  var $conv = $num | 0;
  var $div = $tot / $conv;
  HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$ave >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$ave + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  return Math.sqrt($tot2 / $conv - $div * $div);
}
function _qh_printstats($idx, $nextindex) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $nexti = __stackBase__;
    var $call = _qh_newstats($idx, $nexti);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5299656);
    var $0 = HEAP32[$nexti >> 2];
    var $cmp6 = ($0 | 0) > ($idx | 0);
    if ($cmp6) {
      var $j_07 = $idx;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $j_07;
    var $arrayidx = $j_07 + 5244800 | 0;
    var $1 = HEAP8[$arrayidx];
    var $conv = $1 & 255;
    _qh_printstatlevel($conv);
    var $inc = $j_07 + 1 | 0;
    var $cmp = ($inc | 0) < ($0 | 0);
    if ($cmp) {
      var $j_07 = $inc;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $tobool1 = ($nextindex | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $2 = HEAP32[$nexti >> 2];
    HEAP32[$nextindex >> 2] = $2;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _qh_printstatlevel($id) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($id | 0) > 224;
    if ($cmp) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arrayidx = $id + 5246611 | 0;
    var $0 = HEAP8[$arrayidx];
    var $tobool = $0 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 4:
    var $arrayidx1 = $id + 5246386 | 0;
    var $1 = HEAP8[$arrayidx1];
    var $cmp3 = $1 << 24 >> 24 == 0;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5280308);
    label = 18;
    break;
   case 6:
    var $call = _qh_nostatistic($id);
    var $tobool8 = ($call | 0) == 0;
    if ($tobool8) {
      label = 7;
      break;
    } else {
      label = 18;
      break;
    }
   case 7:
    var $arrayidx10 = 5245036 + ($id << 2) | 0;
    var $2 = HEAP32[$arrayidx10 >> 2];
    var $tobool11 = ($2 | 0) == 0;
    if ($tobool11) {
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    HEAP8[$arrayidx] = 1;
    var $arrayidx15 = 5245936 + ($id << 1) | 0;
    var $3 = HEAP16[$arrayidx15 >> 1];
    var $cmp17 = $3 << 16 >> 16 == -1;
    if ($cmp17) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $conv20 = $3 & 65535;
    var $idxprom = $conv20 & 255;
    var $arrayidx21 = 5243e3 + ($idxprom << 3) | 0;
    var $i = $arrayidx21;
    var $4 = HEAP32[$i >> 2];
    var $cmp22 = ($4 | 0) == 0;
    if ($cmp22) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _qh_fprintf(5280216);
    label = 17;
    break;
   case 11:
    var $cmp27 = $1 << 24 >> 24 > 4;
    if ($cmp27) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5280140);
    label = 17;
    break;
   case 13:
    if ($cmp17) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    _qh_fprintf(5280012);
    label = 17;
    break;
   case 15:
    var $cmp71 = $1 << 24 >> 24 < 5;
    if ($cmp71) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _qh_fprintf(5279916);
    label = 17;
    break;
   case 17:
    _qh_fprintf(5279840);
    label = 18;
    break;
   case 18:
    return;
  }
}
function _qh_initstatistics() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[5246908 >> 2] = 0;
    _qh_allstatA();
    _qh_allstatB();
    _qh_allstatC();
    _qh_allstatD();
    _qh_allstatE();
    _qh_allstatE2();
    _qh_allstatF();
    _qh_allstatG();
    _qh_allstatH();
    _qh_allstatI();
    var $0 = HEAP32[5246908 >> 2];
    var $cmp = ($0 | 0) > 235;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5283324);
    _qh_exit();
   case 4:
    HEAP32[5246844 >> 2] = 0;
    HEAP32[5246852 >> 2] = 0;
    HEAP32[5246868 >> 2] = 2147483647;
    HEAP32[5246860 >> 2] = -2147483648;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[5246884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = 1.7976931348623157e+308, HEAP32[5246900 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246904 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = -1.7976931348623157e+308, HEAP32[5246892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5246896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_07 = 0;
    label = 5;
    break;
   case 5:
    var $i_07;
    var $arrayidx = $i_07 + 5246386 | 0;
    var $1 = HEAP8[$arrayidx];
    var $cmp2 = $1 << 24 >> 24 > 5;
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $idxprom = $1 & 255;
    var $r = 5246836 + ($idxprom << 3) | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$r >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$r + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $r8 = 5243e3 + ($i_07 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $2, HEAP32[$r8 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$r8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 9;
    break;
   case 7:
    var $cmp11 = $1 << 24 >> 24 == 0;
    if ($cmp11) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $idxprom15 = $1 & 255;
    var $arrayidx16 = 5246836 + ($idxprom15 << 3) | 0;
    var $i17 = $arrayidx16;
    var $3 = HEAP32[$i17 >> 2];
    var $arrayidx18 = 5243e3 + ($i_07 << 3) | 0;
    var $i19 = $arrayidx18;
    HEAP32[$i19 >> 2] = $3;
    label = 9;
    break;
   case 9:
    var $inc = $i_07 + 1 | 0;
    var $exitcond = ($inc | 0) == 225;
    if ($exitcond) {
      label = 10;
      break;
    } else {
      var $i_07 = $inc;
      label = 5;
      break;
    }
   case 10:
    return;
  }
}
_qh_initstatistics["X"] = 1;
function _qh_errprint($atfacet, $otherfacet, $atridge, $atvertex) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($atfacet | 0) != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5291724);
    _qh_printfacet($atfacet);
    label = 4;
    break;
   case 4:
    var $tobool1 = ($otherfacet | 0) != 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5290404);
    _qh_printfacet($otherfacet);
    label = 6;
    break;
   case 6:
    var $tobool4 = ($atridge | 0) == 0;
    if ($tobool4) {
      var $atfacet_addr_1 = $atfacet;
      var $otherfacet_addr_0 = $otherfacet;
      label = 16;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_fprintf(5288668);
    _qh_printridge($atridge);
    var $top = $atridge + 4 | 0;
    var $0 = HEAP32[$top >> 2];
    var $tobool6 = ($0 | 0) == 0;
    var $cmp = ($0 | 0) == ($atfacet | 0);
    var $or_cond33 = $tobool6 | $cmp;
    var $cmp10 = ($0 | 0) == ($otherfacet | 0);
    var $or_cond34 = $or_cond33 | $cmp10;
    if ($or_cond34) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_printfacet($0);
    label = 9;
    break;
   case 9:
    var $bottom = $atridge + 8 | 0;
    var $1 = HEAP32[$bottom >> 2];
    var $tobool14 = ($1 | 0) == 0;
    var $cmp17 = ($1 | 0) == ($atfacet | 0);
    var $or_cond35 = $tobool14 | $cmp17;
    var $cmp20 = ($1 | 0) == ($otherfacet | 0);
    var $or_cond36 = $or_cond35 | $cmp20;
    if ($or_cond36) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_printfacet($1);
    label = 11;
    break;
   case 11:
    if ($tobool) {
      var $atfacet_addr_0 = $atfacet;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $2 = HEAP32[$top >> 2];
    var $atfacet_addr_0 = $2;
    label = 13;
    break;
   case 13:
    var $atfacet_addr_0;
    if ($tobool1) {
      var $atfacet_addr_1 = $atfacet_addr_0;
      var $otherfacet_addr_0 = $otherfacet;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $3 = HEAP32[$top >> 2];
    var $cmp31 = ($3 | 0) == ($atfacet_addr_0 | 0);
    if ($cmp31) {
      label = 15;
      break;
    } else {
      var $atfacet_addr_1 = $atfacet_addr_0;
      var $otherfacet_addr_0 = $3;
      label = 16;
      break;
    }
   case 15:
    var $4 = HEAP32[$bottom >> 2];
    var $atfacet_addr_1 = $atfacet_addr_0;
    var $otherfacet_addr_0 = $4;
    label = 16;
    break;
   case 16:
    var $otherfacet_addr_0;
    var $atfacet_addr_1;
    var $tobool36 = ($atvertex | 0) == 0;
    if ($tobool36) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _qh_fprintf(5287232);
    _qh_printvertex($atvertex);
    label = 18;
    break;
   case 18:
    var $5 = HEAP32[5248916 >> 2];
    var $tobool39 = ($5 | 0) != 0;
    var $6 = HEAP32[5247008 >> 2];
    var $tobool41 = ($6 | 0) != 0;
    var $or_cond = $tobool39 & $tobool41;
    if ($or_cond) {
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    var $tobool43 = ($atfacet_addr_1 | 0) == 0;
    var $7 = HEAP32[5249132 >> 2];
    var $tobool45 = ($7 | 0) != 0;
    var $or_cond1 = $tobool43 | $tobool45;
    var $8 = HEAP32[5247036 >> 2];
    var $tobool47 = ($8 | 0) != 0;
    var $or_cond2 = $or_cond1 | $tobool47;
    if ($or_cond2) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _qh_fprintf(5284952);
    var $i_037 = 0;
    label = 21;
    break;
   case 21:
    var $i_037;
    var $9 = HEAP32[5248916 >> 2];
    var $arrayidx = 5247188 + ($i_037 << 2) | 0;
    var $10 = HEAP32[$arrayidx >> 2];
    _qh_printneighborhood($9, $10, $atfacet_addr_1, $otherfacet_addr_0);
    var $inc = $i_037 + 1 | 0;
    var $exitcond = ($inc | 0) == 29;
    if ($exitcond) {
      label = 22;
      break;
    } else {
      var $i_037 = $inc;
      label = 21;
      break;
    }
   case 22:
    return;
  }
}
_qh_errprint["X"] = 1;
function _qh_printhelp_singular() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dist = __stackBase__;
    _qh_fprintf(5275832);
    var $0 = HEAP32[5248940 >> 2];
    _qh_printvertexlist($0, 0, 1);
    _qh_fprintf(5275e3);
    var $1 = HEAP32[5247504 >> 2];
    var $2 = HEAP32[5248924 >> 2];
    _qh_printpointid(5274188, $1, $2, -1);
    _qh_fprintf(5299656);
    var $facet_041 = HEAP32[5248940 >> 2];
    var $tobool42 = ($facet_041 | 0) == 0;
    if ($tobool42) {
      label = 9;
      break;
    } else {
      var $facet_043 = $facet_041;
      label = 3;
      break;
    }
   case 3:
    var $facet_043;
    var $next = $facet_043 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_fprintf(5273664);
    var $vertices = $facet_043 + 48 | 0;
    var $4 = HEAP32[$vertices >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool539 = ($5 | 0) == 0;
    if ($tobool539) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $6 = $p;
    var $vertexp_040 = $6;
    label = 7;
    break;
   case 7:
    var $vertexp_040;
    var $incdec_ptr = $vertexp_040 + 4 | 0;
    _qh_fprintf(5273152);
    var $7 = HEAP32[$incdec_ptr >> 2];
    var $tobool5 = ($7 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      var $vertexp_040 = $incdec_ptr;
      label = 7;
      break;
    }
   case 8:
    var $8 = HEAP32[5243424 >> 2];
    var $inc = $8 + 1 | 0;
    HEAP32[5243424 >> 2] = $inc;
    var $9 = HEAP32[5248924 >> 2];
    _qh_distplane($9, $facet_043, $dist);
    _qh_fprintf(5272536);
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      var $facet_043 = $facet_0;
      label = 3;
      break;
    }
   case 9:
    var $10 = HEAP32[5247032 >> 2];
    var $tobool9 = ($10 | 0) == 0;
    if ($tobool9) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5271968);
    label = 11;
    break;
   case 11:
    _qh_fprintf(5271408);
    var $11 = HEAP32[5247504 >> 2];
    var $cmp = ($11 | 0) > 7;
    if ($cmp) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _qh_fprintf(5270552);
    label = 13;
    break;
   case 13:
    _qh_fprintf(5270152);
    var $12 = HEAP32[5247504 >> 2];
    var $cmp1537 = ($12 | 0) > 0;
    if ($cmp1537) {
      var $k_038 = 0;
      var $13 = $12;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    var $13;
    var $k_038;
    var $14 = HEAP32[5247512 >> 2];
    var $tobool1831 = ($14 | 0) == 0;
    if ($tobool1831) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $15 = HEAP32[5247516 >> 2];
    var $add_ptr = $15 + ($k_038 << 3) | 0;
    var $min_032 = 1.7976931348623157e+308;
    var $max_033 = -2.2250738585072014e-308;
    var $coord_034 = $add_ptr;
    var $i_035 = $14;
    label = 16;
    break;
   case 16:
    var $i_035;
    var $coord_034;
    var $max_033;
    var $min_032;
    var $dec = $i_035 - 1 | 0;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$coord_034 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$coord_034 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp20 = $max_033 < $16;
    var $max_1 = $cmp20 ? $16 : $max_033;
    var $cmp23 = $min_032 > $16;
    var $min_1 = $cmp23 ? $16 : $min_032;
    var $add_ptr27 = $coord_034 + ($13 << 3) | 0;
    var $tobool18 = ($dec | 0) == 0;
    if ($tobool18) {
      label = 17;
      break;
    } else {
      var $min_032 = $min_1;
      var $max_033 = $max_1;
      var $coord_034 = $add_ptr27;
      var $i_035 = $dec;
      label = 16;
      break;
    }
   case 17:
    _qh_fprintf(5269532);
    var $inc30 = $k_038 + 1 | 0;
    var $17 = HEAP32[5247504 >> 2];
    var $cmp15 = ($inc30 | 0) < ($17 | 0);
    if ($cmp15) {
      var $k_038 = $inc30;
      var $13 = $17;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _qh_fprintf(5268740);
    _qh_fprintf(5267912);
    STACKTOP = __stackBase__;
    return;
  }
}
_qh_printhelp_singular["X"] = 1;
function _qh_printhelp_degenerate() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5247072 >> 2];
    var $1 = HEAP32[5247140 >> 2];
    var $2 = $1 | $0;
    var $3 = ($2 | 0) != 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5249052 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5249056 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $4 < 8.988465674311579e+307;
    var $or_cond1 = $3 | $cmp;
    if ($or_cond1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _qh_fprintf(5283124);
    label = 9;
    break;
   case 4:
    _qh_fprintf(5280428);
    var $5 = HEAP32[5246996 >> 2];
    var $6 = HEAP32[5247388 >> 2];
    var $notlhs = ($5 | 0) != 0;
    var $notrhs = ($6 | 0) == 0;
    var $or_cond2_not = $notrhs & $notlhs;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5248632 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5248636 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp6 = $7 > 1e4;
    var $or_cond3 = $or_cond2_not & $cmp6;
    if ($or_cond3) {
      label = 5;
      break;
    } else {
      var $8 = $5;
      label = 6;
      break;
    }
   case 5:
    _qh_fprintf(5279404);
    var $_pre = HEAP32[5246996 >> 2];
    var $8 = $_pre;
    label = 6;
    break;
   case 6:
    var $8;
    var $tobool8 = ($8 | 0) == 0;
    var $9 = HEAP32[5246956 >> 2];
    var $tobool10 = ($9 | 0) != 0;
    var $or_cond4 = $tobool8 | $tobool10;
    if ($or_cond4) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _qh_fprintf(5278784);
    label = 8;
    break;
   case 8:
    _qh_fprintf(5277600);
    _qh_fprintf(5277048);
    label = 9;
    break;
   case 9:
    return;
  }
}
function _qh_printfacetlist($facetlist) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    _qh_printbegin(5, $facetlist, 0, 1);
    var $tobool = ($facetlist | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $facet_017 = $facetlist;
      label = 3;
      break;
    }
   case 3:
    var $facet_017;
    var $next = $facet_017 + 44 | 0;
    var $0 = HEAP32[$next >> 2];
    var $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _qh_printafacet(5, $facet_017, 1);
    var $1 = HEAP32[$next >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      var $facet_017 = $1;
      label = 3;
      break;
    }
   case 5:
    var $2 = HEAP32[5248920 >> 2];
    _qh_printend($2, 5, $facetlist, 0, 1);
    return;
  }
}
function _qh_printhelp_narrowhull($minangle) {
  _qh_fprintf(5276216);
  return;
}
function _qh_free($mem) {
  _free($mem);
  return;
}
function _qh_malloc($size) {
  return _malloc($size);
}
function _qh_fprintf($fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  _fprintf(HEAP32[_stdout >> 2], $fmt, undef);
  STACKTOP = __stackBase__;
  return;
}
function _appendIndex($i) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5303e3 >> 2];
    var $cmp = ($0 | 0) > ($i | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $_pre = HEAP32[5303008 >> 2];
    var $4 = $_pre;
    label = 5;
    break;
   case 4:
    var $mul = $0 << 1;
    HEAP32[5303e3 >> 2] = $mul;
    var $1 = HEAP32[5303008 >> 2];
    var $2 = $1;
    var $mul1 = $0 << 3;
    var $call = _realloc($2, $mul1);
    var $3 = $call;
    HEAP32[5303008 >> 2] = $3;
    var $4 = $3;
    label = 5;
    break;
   case 5:
    var $4;
    var $5 = HEAP32[5303004 >> 2];
    var $inc = $5 + 1 | 0;
    HEAP32[5303004 >> 2] = $inc;
    var $arrayidx = $4 + ($5 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $i;
    return;
  }
}
function _run_qhull($points, $count, $dimension, $facet_count) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $curlong = __stackBase__;
    var $totlong = __stackBase__ + 4;
    var $0 = HEAP32[_stdin >> 2];
    var $1 = HEAP32[_stdout >> 2];
    var $2 = HEAP32[_stderr >> 2];
    _qh_init_A($0, $1, $2);
    HEAP32[5249100 >> 2] = 1;
    _qh_init_B($points, $count, $dimension);
    _qh_qhull();
    HEAP32[5303004 >> 2] = 0;
    var $facet_010 = HEAP32[5248940 >> 2];
    var $tobool11 = ($facet_010 | 0) == 0;
    if ($tobool11) {
      var $r_facet_count_0_lcssa = 0;
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $sub_ptr_rhs_cast = $points;
    var $r_facet_count_012 = 0;
    var $facet_013 = $facet_010;
    label = 4;
    break;
   case 4:
    var $facet_013;
    var $r_facet_count_012;
    var $next = $facet_013 + 44 | 0;
    var $3 = HEAP32[$next >> 2];
    var $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      var $r_facet_count_0_lcssa = $r_facet_count_012;
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $inc = $r_facet_count_012 + 1 | 0;
    var $vertices = $facet_013 + 48 | 0;
    var $4 = HEAP32[$vertices >> 2];
    var $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $p = $4 + 4 | 0;
    var $5 = HEAP32[$p >> 2];
    var $tobool58 = ($5 | 0) == 0;
    if ($tobool58) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $6 = $5;
    var $7 = $p;
    var $vertexp_09 = $7;
    var $8 = $6;
    label = 8;
    break;
   case 8:
    var $8;
    var $vertexp_09;
    var $incdec_ptr = $vertexp_09 + 4 | 0;
    var $point = $8 + 8 | 0;
    var $9 = HEAP32[$point >> 2];
    var $sub_ptr_lhs_cast = $9;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 3;
    var $div = ($sub_ptr_div | 0) / ($dimension | 0) & -1;
    _appendIndex($div);
    var $10 = HEAP32[$incdec_ptr >> 2];
    var $tobool5 = ($10 | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      var $vertexp_09 = $incdec_ptr;
      var $8 = $10;
      label = 8;
      break;
    }
   case 9:
    _appendIndex(-1);
    var $facet_0 = HEAP32[$next >> 2];
    var $tobool = ($facet_0 | 0) == 0;
    if ($tobool) {
      var $r_facet_count_0_lcssa = $inc;
      label = 10;
      break;
    } else {
      var $r_facet_count_012 = $inc;
      var $facet_013 = $facet_0;
      label = 4;
      break;
    }
   case 10:
    var $r_facet_count_0_lcssa;
    _qh_freeqhull();
    _qh_memfreeshort($curlong, $totlong);
    HEAP32[$facet_count >> 2] = $r_facet_count_0_lcssa;
    var $11 = HEAP32[5303008 >> 2];
    STACKTOP = __stackBase__;
    return $11;
  }
}
Module["_run_qhull"] = _run_qhull;
_run_qhull["X"] = 1;
function _qh_errexit($exitcode, $facet, $ridge) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249212 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _qh_fprintf(5273500);
    _qh_exit();
   case 4:
    HEAP32[5249212 >> 2] = 1;
    var $1 = HEAP32[5249132 >> 2];
    var $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $call = _clock();
    var $2 = HEAP32[5249020 >> 2];
    var $sub = $call - $2 | 0;
    HEAP32[5249020 >> 2] = $sub;
    label = 6;
    break;
   case 6:
    _qh_errprint($facet, 0, $ridge, 0);
    _qh_fprintf(5264336);
    _qh_fprintf(5259968);
    var $3 = HEAP32[5249036 >> 2];
    var $cmp = ($3 | 0) > -1;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 14;
      break;
    }
   case 7:
    _qh_fprintf(5257148);
    var $4 = HEAP32[5244576 >> 2];
    var $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _qh_fprintf(5254296);
    label = 9;
    break;
   case 9:
    var $5 = HEAP32[5249132 >> 2];
    var $tobool8 = ($5 | 0) == 0;
    if ($tobool8) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _qh_fprintf(5251576);
    label = 13;
    break;
   case 11:
    var $6 = HEAP32[5249120 >> 2];
    var $tobool10 = ($6 | 0) == 0;
    if ($tobool10) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _qh_fprintf(5301988);
    label = 13;
    break;
   case 13:
    _qh_fprintf(5299656);
    label = 14;
    break;
   case 14:
    var $7 = HEAP32[5247008 >> 2];
    var $tobool15 = ($7 | 0) == 0;
    if ($tobool15) {
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $8 = HEAP32[5249132 >> 2];
    var $tobool16 = ($8 | 0) == 0;
    if ($tobool16) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $tobool17 = ($facet | 0) == 0;
    var $tobool19 = ($ridge | 0) == 0;
    var $or_cond8 = $tobool17 & $tobool19;
    if ($or_cond8) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _qh_produce_output();
    label = 24;
    break;
   case 18:
    if (($exitcode | 0) == 2) {
      label = 22;
      break;
    } else if (($exitcode | 0) == 1) {
      var $exitcode_addr_0 = 1;
      label = 28;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $9 = HEAP32[5244544 >> 2];
    var $10 = HEAP32[5247504 >> 2];
    var $add = $10 + 1 | 0;
    var $cmp26 = ($9 | 0) > ($add | 0);
    if ($cmp26) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    _qh_fprintf(5297064);
    _qh_printsummary();
    var $11 = HEAP32[5247312 >> 2];
    var $tobool28 = ($11 | 0) == 0;
    if ($tobool28) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _qh_collectstatistics();
    _qh_printstatistics();
    _qh_memstatistics();
    label = 22;
    break;
   case 22:
    var $12 = HEAP32[5247184 >> 2];
    var $tobool32 = ($12 | 0) == 0;
    if ($tobool32) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $13 = HEAP32[5246912 >> 2];
    _qh_printstats($13, 0);
    label = 24;
    break;
   case 24:
    if (($exitcode | 0) == 2) {
      label = 25;
      break;
    } else if (($exitcode | 0) == 0) {
      var $exitcode_addr_0 = 5;
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _qh_printhelp_singular();
    var $exitcode_addr_0 = 2;
    label = 28;
    break;
   case 26:
    var $cmp43 = ($exitcode | 0) != 3;
    var $14 = HEAP32[5247140 >> 2];
    var $tobool45 = ($14 | 0) != 0;
    var $or_cond = $cmp43 | $tobool45;
    if ($or_cond) {
      var $exitcode_addr_0 = $exitcode;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    _qh_printhelp_degenerate();
    var $exitcode_addr_0 = 3;
    label = 28;
    break;
   case 28:
    var $exitcode_addr_0;
    var $15 = HEAP32[5249100 >> 2];
    var $tobool50 = ($15 | 0) == 0;
    if ($tobool50) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    _qh_fprintf(5293552);
    _qh_exit();
   case 30:
    HEAP32[5249212 >> 2] = 0;
    HEAP32[5249100 >> 2] = 1;
    _longjmp(5248750, $exitcode_addr_0);
  }
}
_qh_errexit["X"] = 1;
function _qh_exit() {
  _exit(5);
}
function _malloc($bytes) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = $bytes >>> 0 < 245;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 28;
      break;
    }
   case 3:
    var $cmp1 = $bytes >>> 0 < 11;
    if ($cmp1) {
      var $cond = 16;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $add2 = $bytes + 11 | 0;
    var $and = $add2 & -8;
    var $cond = $and;
    label = 5;
    break;
   case 5:
    var $cond;
    var $shr = $cond >>> 3;
    var $0 = HEAP32[5302532 >> 2];
    var $shr3 = $0 >>> ($shr >>> 0);
    var $and4 = $shr3 & 3;
    var $cmp5 = ($and4 | 0) == 0;
    if ($cmp5) {
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $neg = $shr3 & 1;
    var $and7 = $neg ^ 1;
    var $add8 = $and7 + $shr | 0;
    var $shl = $add8 << 1;
    var $arrayidx = 5302572 + ($shl << 2) | 0;
    var $1 = $arrayidx;
    var $arrayidx_sum = $shl + 2 | 0;
    var $2 = 5302572 + ($arrayidx_sum << 2) | 0;
    var $3 = HEAP32[$2 >> 2];
    var $fd9 = $3 + 8 | 0;
    var $4 = HEAP32[$fd9 >> 2];
    var $cmp10 = ($1 | 0) == ($4 | 0);
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $shl12 = 1 << $add8;
    var $neg13 = $shl12 ^ -1;
    var $and14 = $0 & $neg13;
    HEAP32[5302532 >> 2] = $and14;
    label = 11;
    break;
   case 8:
    var $5 = $4;
    var $6 = HEAP32[5302548 >> 2];
    var $cmp15 = $5 >>> 0 < $6 >>> 0;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[$2 >> 2] = $4;
    var $bk = $4 + 12 | 0;
    HEAP32[$bk >> 2] = $1;
    label = 11;
    break;
   case 10:
    _abort();
   case 11:
    var $shl20 = $add8 << 3;
    var $or21 = $shl20 | 3;
    var $head = $3 + 4 | 0;
    HEAP32[$head >> 2] = $or21;
    var $7 = $3;
    var $add_ptr_sum100 = $shl20 | 4;
    var $head23 = $7 + $add_ptr_sum100 | 0;
    var $8 = $head23;
    var $9 = HEAP32[$8 >> 2];
    var $or24 = $9 | 1;
    HEAP32[$8 >> 2] = $or24;
    var $10 = $fd9;
    var $mem_0 = $10;
    label = 39;
    break;
   case 12:
    var $11 = HEAP32[5302540 >> 2];
    var $cmp27 = $cond >>> 0 > $11 >>> 0;
    if ($cmp27) {
      label = 13;
      break;
    } else {
      var $nb_0 = $cond;
      label = 31;
      break;
    }
   case 13:
    var $cmp30 = ($shr3 | 0) == 0;
    if ($cmp30) {
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $shl35 = $shr3 << $shr;
    var $shl37 = 2 << $shr;
    var $sub = -$shl37 | 0;
    var $or40 = $shl37 | $sub;
    var $and41 = $shl35 & $or40;
    var $sub42 = -$and41 | 0;
    var $and43 = $and41 & $sub42;
    var $sub44 = $and43 - 1 | 0;
    var $shr45 = $sub44 >>> 12;
    var $and46 = $shr45 & 16;
    var $shr47 = $sub44 >>> ($and46 >>> 0);
    var $shr48 = $shr47 >>> 5;
    var $and49 = $shr48 & 8;
    var $add50 = $and49 | $and46;
    var $shr51 = $shr47 >>> ($and49 >>> 0);
    var $shr52 = $shr51 >>> 2;
    var $and53 = $shr52 & 4;
    var $add54 = $add50 | $and53;
    var $shr55 = $shr51 >>> ($and53 >>> 0);
    var $shr56 = $shr55 >>> 1;
    var $and57 = $shr56 & 2;
    var $add58 = $add54 | $and57;
    var $shr59 = $shr55 >>> ($and57 >>> 0);
    var $shr60 = $shr59 >>> 1;
    var $and61 = $shr60 & 1;
    var $add62 = $add58 | $and61;
    var $shr63 = $shr59 >>> ($and61 >>> 0);
    var $add64 = $add62 + $shr63 | 0;
    var $shl65 = $add64 << 1;
    var $arrayidx66 = 5302572 + ($shl65 << 2) | 0;
    var $12 = $arrayidx66;
    var $arrayidx66_sum = $shl65 + 2 | 0;
    var $13 = 5302572 + ($arrayidx66_sum << 2) | 0;
    var $14 = HEAP32[$13 >> 2];
    var $fd69 = $14 + 8 | 0;
    var $15 = HEAP32[$fd69 >> 2];
    var $cmp70 = ($12 | 0) == ($15 | 0);
    if ($cmp70) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $shl73 = 1 << $add64;
    var $neg74 = $shl73 ^ -1;
    var $and75 = $0 & $neg74;
    HEAP32[5302532 >> 2] = $and75;
    label = 19;
    break;
   case 16:
    var $16 = $15;
    var $17 = HEAP32[5302548 >> 2];
    var $cmp77 = $16 >>> 0 < $17 >>> 0;
    if ($cmp77) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$13 >> 2] = $15;
    var $bk83 = $15 + 12 | 0;
    HEAP32[$bk83 >> 2] = $12;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $shl87 = $add64 << 3;
    var $sub88 = $shl87 - $cond | 0;
    var $or90 = $cond | 3;
    var $head91 = $14 + 4 | 0;
    HEAP32[$head91 >> 2] = $or90;
    var $18 = $14;
    var $add_ptr92 = $18 + $cond | 0;
    var $19 = $add_ptr92;
    var $or93 = $sub88 | 1;
    var $add_ptr92_sum98 = $cond | 4;
    var $head94 = $18 + $add_ptr92_sum98 | 0;
    var $20 = $head94;
    HEAP32[$20 >> 2] = $or93;
    var $add_ptr95 = $18 + $shl87 | 0;
    var $prev_foot = $add_ptr95;
    HEAP32[$prev_foot >> 2] = $sub88;
    var $21 = HEAP32[5302540 >> 2];
    var $cmp96 = ($21 | 0) == 0;
    if ($cmp96) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $22 = HEAP32[5302552 >> 2];
    var $shr99 = $21 >>> 3;
    var $shl100 = $shr99 << 1;
    var $arrayidx101 = 5302572 + ($shl100 << 2) | 0;
    var $23 = $arrayidx101;
    var $24 = HEAP32[5302532 >> 2];
    var $shl103 = 1 << $shr99;
    var $and104 = $24 & $shl103;
    var $tobool105 = ($and104 | 0) == 0;
    if ($tobool105) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    var $or108 = $24 | $shl103;
    HEAP32[5302532 >> 2] = $or108;
    var $arrayidx101_sum_pre = $shl100 + 2 | 0;
    var $_pre = 5302572 + ($arrayidx101_sum_pre << 2) | 0;
    var $F102_0 = $23;
    var $_pre_phi = $_pre;
    label = 24;
    break;
   case 22:
    var $arrayidx101_sum99 = $shl100 + 2 | 0;
    var $25 = 5302572 + ($arrayidx101_sum99 << 2) | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26;
    var $28 = HEAP32[5302548 >> 2];
    var $cmp111 = $27 >>> 0 < $28 >>> 0;
    if ($cmp111) {
      label = 23;
      break;
    } else {
      var $F102_0 = $26;
      var $_pre_phi = $25;
      label = 24;
      break;
    }
   case 23:
    _abort();
   case 24:
    var $_pre_phi;
    var $F102_0;
    HEAP32[$_pre_phi >> 2] = $22;
    var $bk121 = $F102_0 + 12 | 0;
    HEAP32[$bk121 >> 2] = $22;
    var $fd122 = $22 + 8 | 0;
    HEAP32[$fd122 >> 2] = $F102_0;
    var $bk123 = $22 + 12 | 0;
    HEAP32[$bk123 >> 2] = $23;
    label = 25;
    break;
   case 25:
    HEAP32[5302540 >> 2] = $sub88;
    HEAP32[5302552 >> 2] = $19;
    var $29 = $fd69;
    var $mem_0 = $29;
    label = 39;
    break;
   case 26:
    var $30 = HEAP32[5302536 >> 2];
    var $cmp127 = ($30 | 0) == 0;
    if ($cmp127) {
      var $nb_0 = $cond;
      label = 31;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call = _tmalloc_small($cond);
    var $cmp129 = ($call | 0) == 0;
    if ($cmp129) {
      var $nb_0 = $cond;
      label = 31;
      break;
    } else {
      var $mem_0 = $call;
      label = 39;
      break;
    }
   case 28:
    var $cmp137 = $bytes >>> 0 > 4294967231;
    if ($cmp137) {
      var $nb_0 = -1;
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $add142 = $bytes + 11 | 0;
    var $and143 = $add142 & -8;
    var $31 = HEAP32[5302536 >> 2];
    var $cmp144 = ($31 | 0) == 0;
    if ($cmp144) {
      var $nb_0 = $and143;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $call147 = _tmalloc_large($and143);
    var $cmp148 = ($call147 | 0) == 0;
    if ($cmp148) {
      var $nb_0 = $and143;
      label = 31;
      break;
    } else {
      var $mem_0 = $call147;
      label = 39;
      break;
    }
   case 31:
    var $nb_0;
    var $32 = HEAP32[5302540 >> 2];
    var $cmp154 = $nb_0 >>> 0 > $32 >>> 0;
    if ($cmp154) {
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $sub158 = $32 - $nb_0 | 0;
    var $33 = HEAP32[5302552 >> 2];
    var $cmp160 = $sub158 >>> 0 > 15;
    if ($cmp160) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $34 = $33;
    var $add_ptr164 = $34 + $nb_0 | 0;
    var $35 = $add_ptr164;
    HEAP32[5302552 >> 2] = $35;
    HEAP32[5302540 >> 2] = $sub158;
    var $or165 = $sub158 | 1;
    var $add_ptr164_sum = $nb_0 + 4 | 0;
    var $head166 = $34 + $add_ptr164_sum | 0;
    var $36 = $head166;
    HEAP32[$36 >> 2] = $or165;
    var $add_ptr167 = $34 + $32 | 0;
    var $prev_foot168 = $add_ptr167;
    HEAP32[$prev_foot168 >> 2] = $sub158;
    var $or170 = $nb_0 | 3;
    var $head171 = $33 + 4 | 0;
    HEAP32[$head171 >> 2] = $or170;
    label = 35;
    break;
   case 34:
    HEAP32[5302540 >> 2] = 0;
    HEAP32[5302552 >> 2] = 0;
    var $or174 = $32 | 3;
    var $head175 = $33 + 4 | 0;
    HEAP32[$head175 >> 2] = $or174;
    var $37 = $33;
    var $add_ptr176_sum = $32 + 4 | 0;
    var $head177 = $37 + $add_ptr176_sum | 0;
    var $38 = $head177;
    var $39 = HEAP32[$38 >> 2];
    var $or178 = $39 | 1;
    HEAP32[$38 >> 2] = $or178;
    label = 35;
    break;
   case 35:
    var $add_ptr180 = $33 + 8 | 0;
    var $40 = $add_ptr180;
    var $mem_0 = $40;
    label = 39;
    break;
   case 36:
    var $41 = HEAP32[5302544 >> 2];
    var $cmp182 = $nb_0 >>> 0 < $41 >>> 0;
    if ($cmp182) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $sub186 = $41 - $nb_0 | 0;
    HEAP32[5302544 >> 2] = $sub186;
    var $42 = HEAP32[5302556 >> 2];
    var $43 = $42;
    var $add_ptr189 = $43 + $nb_0 | 0;
    var $44 = $add_ptr189;
    HEAP32[5302556 >> 2] = $44;
    var $or190 = $sub186 | 1;
    var $add_ptr189_sum = $nb_0 + 4 | 0;
    var $head191 = $43 + $add_ptr189_sum | 0;
    var $45 = $head191;
    HEAP32[$45 >> 2] = $or190;
    var $or193 = $nb_0 | 3;
    var $head194 = $42 + 4 | 0;
    HEAP32[$head194 >> 2] = $or193;
    var $add_ptr195 = $42 + 8 | 0;
    var $46 = $add_ptr195;
    var $mem_0 = $46;
    label = 39;
    break;
   case 38:
    var $call198 = _sys_alloc($nb_0);
    var $mem_0 = $call198;
    label = 39;
    break;
   case 39:
    var $mem_0;
    return $mem_0;
  }
}
_malloc["X"] = 1;
function _tmalloc_small($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5302536 >> 2];
    var $sub = -$0 | 0;
    var $and = $0 & $sub;
    var $sub2 = $and - 1 | 0;
    var $shr = $sub2 >>> 12;
    var $and3 = $shr & 16;
    var $shr4 = $sub2 >>> ($and3 >>> 0);
    var $shr5 = $shr4 >>> 5;
    var $and6 = $shr5 & 8;
    var $add = $and6 | $and3;
    var $shr7 = $shr4 >>> ($and6 >>> 0);
    var $shr8 = $shr7 >>> 2;
    var $and9 = $shr8 & 4;
    var $add10 = $add | $and9;
    var $shr11 = $shr7 >>> ($and9 >>> 0);
    var $shr12 = $shr11 >>> 1;
    var $and13 = $shr12 & 2;
    var $add14 = $add10 | $and13;
    var $shr15 = $shr11 >>> ($and13 >>> 0);
    var $shr16 = $shr15 >>> 1;
    var $and17 = $shr16 & 1;
    var $add18 = $add14 | $and17;
    var $shr19 = $shr15 >>> ($and17 >>> 0);
    var $add20 = $add18 + $shr19 | 0;
    var $arrayidx = 5302836 + ($add20 << 2) | 0;
    var $1 = HEAP32[$arrayidx >> 2];
    var $head = $1 + 4 | 0;
    var $2 = HEAP32[$head >> 2];
    var $and21 = $2 & -8;
    var $sub22 = $and21 - $nb | 0;
    var $t_0 = $1;
    var $v_0 = $1;
    var $rsize_0 = $sub22;
    label = 3;
    break;
   case 3:
    var $rsize_0;
    var $v_0;
    var $t_0;
    var $arrayidx23 = $t_0 + 16 | 0;
    var $3 = HEAP32[$arrayidx23 >> 2];
    var $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $cond5 = $3;
      label = 5;
      break;
    }
   case 4:
    var $arrayidx27 = $t_0 + 20 | 0;
    var $4 = HEAP32[$arrayidx27 >> 2];
    var $cmp28 = ($4 | 0) == 0;
    if ($cmp28) {
      label = 6;
      break;
    } else {
      var $cond5 = $4;
      label = 5;
      break;
    }
   case 5:
    var $cond5;
    var $head29 = $cond5 + 4 | 0;
    var $5 = HEAP32[$head29 >> 2];
    var $and30 = $5 & -8;
    var $sub31 = $and30 - $nb | 0;
    var $cmp32 = $sub31 >>> 0 < $rsize_0 >>> 0;
    var $sub31_rsize_0 = $cmp32 ? $sub31 : $rsize_0;
    var $cond_v_0 = $cmp32 ? $cond5 : $v_0;
    var $t_0 = $cond5;
    var $v_0 = $cond_v_0;
    var $rsize_0 = $sub31_rsize_0;
    label = 3;
    break;
   case 6:
    var $6 = $v_0;
    var $7 = HEAP32[5302548 >> 2];
    var $cmp33 = $6 >>> 0 < $7 >>> 0;
    if ($cmp33) {
      label = 49;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $add_ptr = $6 + $nb | 0;
    var $8 = $add_ptr;
    var $cmp35 = $6 >>> 0 < $add_ptr >>> 0;
    if ($cmp35) {
      label = 8;
      break;
    } else {
      label = 49;
      break;
    }
   case 8:
    var $parent = $v_0 + 24 | 0;
    var $9 = HEAP32[$parent >> 2];
    var $bk = $v_0 + 12 | 0;
    var $10 = HEAP32[$bk >> 2];
    var $cmp40 = ($10 | 0) == ($v_0 | 0);
    if ($cmp40) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $fd = $v_0 + 8 | 0;
    var $11 = HEAP32[$fd >> 2];
    var $12 = $11;
    var $cmp45 = $12 >>> 0 < $7 >>> 0;
    if ($cmp45) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $bk50 = $11 + 12 | 0;
    HEAP32[$bk50 >> 2] = $10;
    var $fd51 = $10 + 8 | 0;
    HEAP32[$fd51 >> 2] = $11;
    var $R_1 = $10;
    label = 19;
    break;
   case 11:
    _abort();
   case 12:
    var $arrayidx55 = $v_0 + 20 | 0;
    var $13 = HEAP32[$arrayidx55 >> 2];
    var $cmp56 = ($13 | 0) == 0;
    if ($cmp56) {
      label = 13;
      break;
    } else {
      var $R_0 = $13;
      var $RP_0 = $arrayidx55;
      label = 14;
      break;
    }
   case 13:
    var $arrayidx59 = $v_0 + 16 | 0;
    var $14 = HEAP32[$arrayidx59 >> 2];
    var $cmp60 = ($14 | 0) == 0;
    if ($cmp60) {
      var $R_1 = 0;
      label = 19;
      break;
    } else {
      var $R_0 = $14;
      var $RP_0 = $arrayidx59;
      label = 14;
      break;
    }
   case 14:
    var $RP_0;
    var $R_0;
    var $arrayidx65 = $R_0 + 20 | 0;
    var $15 = HEAP32[$arrayidx65 >> 2];
    var $cmp66 = ($15 | 0) == 0;
    if ($cmp66) {
      label = 15;
      break;
    } else {
      var $R_0 = $15;
      var $RP_0 = $arrayidx65;
      label = 14;
      break;
    }
   case 15:
    var $arrayidx69 = $R_0 + 16 | 0;
    var $16 = HEAP32[$arrayidx69 >> 2];
    var $cmp70 = ($16 | 0) == 0;
    if ($cmp70) {
      label = 16;
      break;
    } else {
      var $R_0 = $16;
      var $RP_0 = $arrayidx69;
      label = 14;
      break;
    }
   case 16:
    var $17 = $RP_0;
    var $cmp75 = $17 >>> 0 < $7 >>> 0;
    if ($cmp75) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $R_1;
    var $cmp84 = ($9 | 0) == 0;
    if ($cmp84) {
      label = 39;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $index = $v_0 + 28 | 0;
    var $18 = HEAP32[$index >> 2];
    var $arrayidx88 = 5302836 + ($18 << 2) | 0;
    var $19 = HEAP32[$arrayidx88 >> 2];
    var $cmp89 = ($v_0 | 0) == ($19 | 0);
    if ($cmp89) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    HEAP32[$arrayidx88 >> 2] = $R_1;
    var $cond3 = ($R_1 | 0) == 0;
    if ($cond3) {
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 22:
    var $20 = HEAP32[$index >> 2];
    var $shl = 1 << $20;
    var $neg = $shl ^ -1;
    var $21 = HEAP32[5302536 >> 2];
    var $and97 = $21 & $neg;
    HEAP32[5302536 >> 2] = $and97;
    label = 39;
    break;
   case 23:
    var $22 = $9;
    var $23 = HEAP32[5302548 >> 2];
    var $cmp101 = $22 >>> 0 < $23 >>> 0;
    if ($cmp101) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $arrayidx107 = $9 + 16 | 0;
    var $24 = HEAP32[$arrayidx107 >> 2];
    var $cmp108 = ($24 | 0) == ($v_0 | 0);
    if ($cmp108) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[$arrayidx107 >> 2] = $R_1;
    label = 28;
    break;
   case 26:
    var $arrayidx115 = $9 + 20 | 0;
    HEAP32[$arrayidx115 >> 2] = $R_1;
    label = 28;
    break;
   case 27:
    _abort();
   case 28:
    var $cmp120 = ($R_1 | 0) == 0;
    if ($cmp120) {
      label = 39;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $25 = $R_1;
    var $26 = HEAP32[5302548 >> 2];
    var $cmp124 = $25 >>> 0 < $26 >>> 0;
    if ($cmp124) {
      label = 38;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $parent129 = $R_1 + 24 | 0;
    HEAP32[$parent129 >> 2] = $9;
    var $arrayidx131 = $v_0 + 16 | 0;
    var $27 = HEAP32[$arrayidx131 >> 2];
    var $cmp132 = ($27 | 0) == 0;
    if ($cmp132) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $28 = $27;
    var $29 = HEAP32[5302548 >> 2];
    var $cmp136 = $28 >>> 0 < $29 >>> 0;
    if ($cmp136) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $arrayidx142 = $R_1 + 16 | 0;
    HEAP32[$arrayidx142 >> 2] = $27;
    var $parent143 = $27 + 24 | 0;
    HEAP32[$parent143 >> 2] = $R_1;
    label = 34;
    break;
   case 33:
    _abort();
   case 34:
    var $arrayidx148 = $v_0 + 20 | 0;
    var $30 = HEAP32[$arrayidx148 >> 2];
    var $cmp149 = ($30 | 0) == 0;
    if ($cmp149) {
      label = 39;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $31 = $30;
    var $32 = HEAP32[5302548 >> 2];
    var $cmp153 = $31 >>> 0 < $32 >>> 0;
    if ($cmp153) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $arrayidx159 = $R_1 + 20 | 0;
    HEAP32[$arrayidx159 >> 2] = $30;
    var $parent160 = $30 + 24 | 0;
    HEAP32[$parent160 >> 2] = $R_1;
    label = 39;
    break;
   case 37:
    _abort();
   case 38:
    _abort();
   case 39:
    var $cmp168 = $rsize_0 >>> 0 < 16;
    if ($cmp168) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $add171 = $rsize_0 + $nb | 0;
    var $or172 = $add171 | 3;
    var $head173 = $v_0 + 4 | 0;
    HEAP32[$head173 >> 2] = $or172;
    var $add_ptr175_sum = $add171 + 4 | 0;
    var $head176 = $6 + $add_ptr175_sum | 0;
    var $33 = $head176;
    var $34 = HEAP32[$33 >> 2];
    var $or177 = $34 | 1;
    HEAP32[$33 >> 2] = $or177;
    label = 48;
    break;
   case 41:
    var $or180 = $nb | 3;
    var $head181 = $v_0 + 4 | 0;
    HEAP32[$head181 >> 2] = $or180;
    var $or182 = $rsize_0 | 1;
    var $add_ptr_sum = $nb + 4 | 0;
    var $head183 = $6 + $add_ptr_sum | 0;
    var $35 = $head183;
    HEAP32[$35 >> 2] = $or182;
    var $add_ptr_sum1 = $rsize_0 + $nb | 0;
    var $add_ptr184 = $6 + $add_ptr_sum1 | 0;
    var $prev_foot = $add_ptr184;
    HEAP32[$prev_foot >> 2] = $rsize_0;
    var $36 = HEAP32[5302540 >> 2];
    var $cmp185 = ($36 | 0) == 0;
    if ($cmp185) {
      label = 47;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $37 = HEAP32[5302552 >> 2];
    var $shr188 = $36 >>> 3;
    var $shl189 = $shr188 << 1;
    var $arrayidx190 = 5302572 + ($shl189 << 2) | 0;
    var $38 = $arrayidx190;
    var $39 = HEAP32[5302532 >> 2];
    var $shl192 = 1 << $shr188;
    var $and193 = $39 & $shl192;
    var $tobool194 = ($and193 | 0) == 0;
    if ($tobool194) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $or198 = $39 | $shl192;
    HEAP32[5302532 >> 2] = $or198;
    var $arrayidx190_sum_pre = $shl189 + 2 | 0;
    var $_pre = 5302572 + ($arrayidx190_sum_pre << 2) | 0;
    var $F191_0 = $38;
    var $_pre_phi = $_pre;
    label = 46;
    break;
   case 44:
    var $arrayidx190_sum2 = $shl189 + 2 | 0;
    var $40 = 5302572 + ($arrayidx190_sum2 << 2) | 0;
    var $41 = HEAP32[$40 >> 2];
    var $42 = $41;
    var $43 = HEAP32[5302548 >> 2];
    var $cmp202 = $42 >>> 0 < $43 >>> 0;
    if ($cmp202) {
      label = 45;
      break;
    } else {
      var $F191_0 = $41;
      var $_pre_phi = $40;
      label = 46;
      break;
    }
   case 45:
    _abort();
   case 46:
    var $_pre_phi;
    var $F191_0;
    HEAP32[$_pre_phi >> 2] = $37;
    var $bk212 = $F191_0 + 12 | 0;
    HEAP32[$bk212 >> 2] = $37;
    var $fd213 = $37 + 8 | 0;
    HEAP32[$fd213 >> 2] = $F191_0;
    var $bk214 = $37 + 12 | 0;
    HEAP32[$bk214 >> 2] = $38;
    label = 47;
    break;
   case 47:
    HEAP32[5302540 >> 2] = $rsize_0;
    HEAP32[5302552 >> 2] = $8;
    label = 48;
    break;
   case 48:
    var $add_ptr219 = $v_0 + 8 | 0;
    var $44 = $add_ptr219;
    return $44;
   case 49:
    _abort();
  }
}
_tmalloc_small["X"] = 1;
function _tmalloc_large($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sub = -$nb | 0;
    var $shr = $nb >>> 8;
    var $cmp = ($shr | 0) == 0;
    if ($cmp) {
      var $idx_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp1 = $nb >>> 0 > 16777215;
    if ($cmp1) {
      var $idx_0 = 31;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $sub4 = $shr + 1048320 | 0;
    var $shr5 = $sub4 >>> 16;
    var $and = $shr5 & 8;
    var $shl = $shr << $and;
    var $sub6 = $shl + 520192 | 0;
    var $shr7 = $sub6 >>> 16;
    var $and8 = $shr7 & 4;
    var $add = $and8 | $and;
    var $shl9 = $shl << $and8;
    var $sub10 = $shl9 + 245760 | 0;
    var $shr11 = $sub10 >>> 16;
    var $and12 = $shr11 & 2;
    var $add13 = $add | $and12;
    var $sub14 = 14 - $add13 | 0;
    var $shl15 = $shl9 << $and12;
    var $shr16 = $shl15 >>> 15;
    var $add17 = $sub14 + $shr16 | 0;
    var $shl18 = $add17 << 1;
    var $add19 = $add17 + 7 | 0;
    var $shr20 = $nb >>> ($add19 >>> 0);
    var $and21 = $shr20 & 1;
    var $add22 = $and21 | $shl18;
    var $idx_0 = $add22;
    label = 5;
    break;
   case 5:
    var $idx_0;
    var $arrayidx = 5302836 + ($idx_0 << 2) | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $cmp24 = ($0 | 0) == 0;
    if ($cmp24) {
      var $v_2 = 0;
      var $rsize_2 = $sub;
      var $t_1 = 0;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp26 = ($idx_0 | 0) == 31;
    if ($cmp26) {
      var $cond = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $shr27 = $idx_0 >>> 1;
    var $sub30 = 25 - $shr27 | 0;
    var $cond = $sub30;
    label = 8;
    break;
   case 8:
    var $cond;
    var $shl31 = $nb << $cond;
    var $v_0 = 0;
    var $rsize_0 = $sub;
    var $t_0 = $0;
    var $sizebits_0 = $shl31;
    var $rst_0 = 0;
    label = 9;
    break;
   case 9:
    var $rst_0;
    var $sizebits_0;
    var $t_0;
    var $rsize_0;
    var $v_0;
    var $head = $t_0 + 4 | 0;
    var $1 = HEAP32[$head >> 2];
    var $and32 = $1 & -8;
    var $sub33 = $and32 - $nb | 0;
    var $cmp34 = $sub33 >>> 0 < $rsize_0 >>> 0;
    if ($cmp34) {
      label = 10;
      break;
    } else {
      var $v_1 = $v_0;
      var $rsize_1 = $rsize_0;
      label = 11;
      break;
    }
   case 10:
    var $cmp36 = ($and32 | 0) == ($nb | 0);
    if ($cmp36) {
      var $v_2 = $t_0;
      var $rsize_2 = $sub33;
      var $t_1 = $t_0;
      label = 12;
      break;
    } else {
      var $v_1 = $t_0;
      var $rsize_1 = $sub33;
      label = 11;
      break;
    }
   case 11:
    var $rsize_1;
    var $v_1;
    var $arrayidx40 = $t_0 + 20 | 0;
    var $2 = HEAP32[$arrayidx40 >> 2];
    var $shr41 = $sizebits_0 >>> 31;
    var $arrayidx44 = $t_0 + 16 + ($shr41 << 2) | 0;
    var $3 = HEAP32[$arrayidx44 >> 2];
    var $cmp45 = ($2 | 0) == 0;
    var $cmp46 = ($2 | 0) == ($3 | 0);
    var $or_cond = $cmp45 | $cmp46;
    var $rst_1 = $or_cond ? $rst_0 : $2;
    var $cmp49 = ($3 | 0) == 0;
    var $shl52 = $sizebits_0 << 1;
    if ($cmp49) {
      var $v_2 = $v_1;
      var $rsize_2 = $rsize_1;
      var $t_1 = $rst_1;
      label = 12;
      break;
    } else {
      var $v_0 = $v_1;
      var $rsize_0 = $rsize_1;
      var $t_0 = $3;
      var $sizebits_0 = $shl52;
      var $rst_0 = $rst_1;
      label = 9;
      break;
    }
   case 12:
    var $t_1;
    var $rsize_2;
    var $v_2;
    var $cmp54 = ($t_1 | 0) == 0;
    var $cmp56 = ($v_2 | 0) == 0;
    var $or_cond16 = $cmp54 & $cmp56;
    if ($or_cond16) {
      label = 13;
      break;
    } else {
      var $t_2_ph = $t_1;
      label = 15;
      break;
    }
   case 13:
    var $shl59 = 2 << $idx_0;
    var $sub62 = -$shl59 | 0;
    var $or = $shl59 | $sub62;
    var $4 = HEAP32[5302536 >> 2];
    var $and63 = $4 & $or;
    var $cmp64 = ($and63 | 0) == 0;
    if ($cmp64) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $sub66 = -$and63 | 0;
    var $and67 = $and63 & $sub66;
    var $sub69 = $and67 - 1 | 0;
    var $shr71 = $sub69 >>> 12;
    var $and72 = $shr71 & 16;
    var $shr74 = $sub69 >>> ($and72 >>> 0);
    var $shr75 = $shr74 >>> 5;
    var $and76 = $shr75 & 8;
    var $add77 = $and76 | $and72;
    var $shr78 = $shr74 >>> ($and76 >>> 0);
    var $shr79 = $shr78 >>> 2;
    var $and80 = $shr79 & 4;
    var $add81 = $add77 | $and80;
    var $shr82 = $shr78 >>> ($and80 >>> 0);
    var $shr83 = $shr82 >>> 1;
    var $and84 = $shr83 & 2;
    var $add85 = $add81 | $and84;
    var $shr86 = $shr82 >>> ($and84 >>> 0);
    var $shr87 = $shr86 >>> 1;
    var $and88 = $shr87 & 1;
    var $add89 = $add85 | $and88;
    var $shr90 = $shr86 >>> ($and88 >>> 0);
    var $add91 = $add89 + $shr90 | 0;
    var $arrayidx93 = 5302836 + ($add91 << 2) | 0;
    var $5 = HEAP32[$arrayidx93 >> 2];
    var $t_2_ph = $5;
    label = 15;
    break;
   case 15:
    var $t_2_ph;
    var $cmp9620 = ($t_2_ph | 0) == 0;
    if ($cmp9620) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      var $t_221 = $t_2_ph;
      var $rsize_322 = $rsize_2;
      var $v_323 = $v_2;
      label = 16;
      break;
    }
   case 16:
    var $v_323;
    var $rsize_322;
    var $t_221;
    var $head98 = $t_221 + 4 | 0;
    var $6 = HEAP32[$head98 >> 2];
    var $and99 = $6 & -8;
    var $sub100 = $and99 - $nb | 0;
    var $cmp101 = $sub100 >>> 0 < $rsize_322 >>> 0;
    var $sub100_rsize_3 = $cmp101 ? $sub100 : $rsize_322;
    var $t_2_v_3 = $cmp101 ? $t_221 : $v_323;
    var $arrayidx105 = $t_221 + 16 | 0;
    var $7 = HEAP32[$arrayidx105 >> 2];
    var $cmp106 = ($7 | 0) == 0;
    if ($cmp106) {
      label = 17;
      break;
    } else {
      var $t_221 = $7;
      var $rsize_322 = $sub100_rsize_3;
      var $v_323 = $t_2_v_3;
      label = 16;
      break;
    }
   case 17:
    var $arrayidx112 = $t_221 + 20 | 0;
    var $8 = HEAP32[$arrayidx112 >> 2];
    var $cmp96 = ($8 | 0) == 0;
    if ($cmp96) {
      var $rsize_3_lcssa = $sub100_rsize_3;
      var $v_3_lcssa = $t_2_v_3;
      label = 18;
      break;
    } else {
      var $t_221 = $8;
      var $rsize_322 = $sub100_rsize_3;
      var $v_323 = $t_2_v_3;
      label = 16;
      break;
    }
   case 18:
    var $v_3_lcssa;
    var $rsize_3_lcssa;
    var $cmp115 = ($v_3_lcssa | 0) == 0;
    if ($cmp115) {
      var $retval_0 = 0;
      label = 80;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $9 = HEAP32[5302540 >> 2];
    var $sub117 = $9 - $nb | 0;
    var $cmp118 = $rsize_3_lcssa >>> 0 < $sub117 >>> 0;
    if ($cmp118) {
      label = 20;
      break;
    } else {
      var $retval_0 = 0;
      label = 80;
      break;
    }
   case 20:
    var $10 = $v_3_lcssa;
    var $11 = HEAP32[5302548 >> 2];
    var $cmp120 = $10 >>> 0 < $11 >>> 0;
    if ($cmp120) {
      label = 79;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $add_ptr = $10 + $nb | 0;
    var $12 = $add_ptr;
    var $cmp122 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp122) {
      label = 22;
      break;
    } else {
      label = 79;
      break;
    }
   case 22:
    var $parent = $v_3_lcssa + 24 | 0;
    var $13 = HEAP32[$parent >> 2];
    var $bk = $v_3_lcssa + 12 | 0;
    var $14 = HEAP32[$bk >> 2];
    var $cmp127 = ($14 | 0) == ($v_3_lcssa | 0);
    if ($cmp127) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $fd = $v_3_lcssa + 8 | 0;
    var $15 = HEAP32[$fd >> 2];
    var $16 = $15;
    var $cmp132 = $16 >>> 0 < $11 >>> 0;
    if ($cmp132) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $bk137 = $15 + 12 | 0;
    HEAP32[$bk137 >> 2] = $14;
    var $fd138 = $14 + 8 | 0;
    HEAP32[$fd138 >> 2] = $15;
    var $R_1 = $14;
    label = 33;
    break;
   case 25:
    _abort();
   case 26:
    var $arrayidx143 = $v_3_lcssa + 20 | 0;
    var $17 = HEAP32[$arrayidx143 >> 2];
    var $cmp144 = ($17 | 0) == 0;
    if ($cmp144) {
      label = 27;
      break;
    } else {
      var $R_0 = $17;
      var $RP_0 = $arrayidx143;
      label = 28;
      break;
    }
   case 27:
    var $arrayidx147 = $v_3_lcssa + 16 | 0;
    var $18 = HEAP32[$arrayidx147 >> 2];
    var $cmp148 = ($18 | 0) == 0;
    if ($cmp148) {
      var $R_1 = 0;
      label = 33;
      break;
    } else {
      var $R_0 = $18;
      var $RP_0 = $arrayidx147;
      label = 28;
      break;
    }
   case 28:
    var $RP_0;
    var $R_0;
    var $arrayidx153 = $R_0 + 20 | 0;
    var $19 = HEAP32[$arrayidx153 >> 2];
    var $cmp154 = ($19 | 0) == 0;
    if ($cmp154) {
      label = 29;
      break;
    } else {
      var $R_0 = $19;
      var $RP_0 = $arrayidx153;
      label = 28;
      break;
    }
   case 29:
    var $arrayidx157 = $R_0 + 16 | 0;
    var $20 = HEAP32[$arrayidx157 >> 2];
    var $cmp158 = ($20 | 0) == 0;
    if ($cmp158) {
      label = 30;
      break;
    } else {
      var $R_0 = $20;
      var $RP_0 = $arrayidx157;
      label = 28;
      break;
    }
   case 30:
    var $21 = $RP_0;
    var $cmp163 = $21 >>> 0 < $11 >>> 0;
    if ($cmp163) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 33;
    break;
   case 32:
    _abort();
   case 33:
    var $R_1;
    var $cmp172 = ($13 | 0) == 0;
    if ($cmp172) {
      label = 53;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $index = $v_3_lcssa + 28 | 0;
    var $22 = HEAP32[$index >> 2];
    var $arrayidx176 = 5302836 + ($22 << 2) | 0;
    var $23 = HEAP32[$arrayidx176 >> 2];
    var $cmp177 = ($v_3_lcssa | 0) == ($23 | 0);
    if ($cmp177) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    HEAP32[$arrayidx176 >> 2] = $R_1;
    var $cond17 = ($R_1 | 0) == 0;
    if ($cond17) {
      label = 36;
      break;
    } else {
      label = 43;
      break;
    }
   case 36:
    var $24 = HEAP32[$index >> 2];
    var $shl184 = 1 << $24;
    var $neg = $shl184 ^ -1;
    var $25 = HEAP32[5302536 >> 2];
    var $and186 = $25 & $neg;
    HEAP32[5302536 >> 2] = $and186;
    label = 53;
    break;
   case 37:
    var $26 = $13;
    var $27 = HEAP32[5302548 >> 2];
    var $cmp190 = $26 >>> 0 < $27 >>> 0;
    if ($cmp190) {
      label = 41;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $arrayidx196 = $13 + 16 | 0;
    var $28 = HEAP32[$arrayidx196 >> 2];
    var $cmp197 = ($28 | 0) == ($v_3_lcssa | 0);
    if ($cmp197) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[$arrayidx196 >> 2] = $R_1;
    label = 42;
    break;
   case 40:
    var $arrayidx204 = $13 + 20 | 0;
    HEAP32[$arrayidx204 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $cmp209 = ($R_1 | 0) == 0;
    if ($cmp209) {
      label = 53;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $29 = $R_1;
    var $30 = HEAP32[5302548 >> 2];
    var $cmp213 = $29 >>> 0 < $30 >>> 0;
    if ($cmp213) {
      label = 52;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $parent218 = $R_1 + 24 | 0;
    HEAP32[$parent218 >> 2] = $13;
    var $arrayidx220 = $v_3_lcssa + 16 | 0;
    var $31 = HEAP32[$arrayidx220 >> 2];
    var $cmp221 = ($31 | 0) == 0;
    if ($cmp221) {
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $32 = $31;
    var $33 = HEAP32[5302548 >> 2];
    var $cmp225 = $32 >>> 0 < $33 >>> 0;
    if ($cmp225) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $arrayidx231 = $R_1 + 16 | 0;
    HEAP32[$arrayidx231 >> 2] = $31;
    var $parent232 = $31 + 24 | 0;
    HEAP32[$parent232 >> 2] = $R_1;
    label = 48;
    break;
   case 47:
    _abort();
   case 48:
    var $arrayidx237 = $v_3_lcssa + 20 | 0;
    var $34 = HEAP32[$arrayidx237 >> 2];
    var $cmp238 = ($34 | 0) == 0;
    if ($cmp238) {
      label = 53;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $35 = $34;
    var $36 = HEAP32[5302548 >> 2];
    var $cmp242 = $35 >>> 0 < $36 >>> 0;
    if ($cmp242) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $arrayidx248 = $R_1 + 20 | 0;
    HEAP32[$arrayidx248 >> 2] = $34;
    var $parent249 = $34 + 24 | 0;
    HEAP32[$parent249 >> 2] = $R_1;
    label = 53;
    break;
   case 51:
    _abort();
   case 52:
    _abort();
   case 53:
    var $cmp257 = $rsize_3_lcssa >>> 0 < 16;
    if ($cmp257) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $add260 = $rsize_3_lcssa + $nb | 0;
    var $or262 = $add260 | 3;
    var $head263 = $v_3_lcssa + 4 | 0;
    HEAP32[$head263 >> 2] = $or262;
    var $add_ptr265_sum = $add260 + 4 | 0;
    var $head266 = $10 + $add_ptr265_sum | 0;
    var $37 = $head266;
    var $38 = HEAP32[$37 >> 2];
    var $or267 = $38 | 1;
    HEAP32[$37 >> 2] = $or267;
    label = 78;
    break;
   case 55:
    var $or270 = $nb | 3;
    var $head271 = $v_3_lcssa + 4 | 0;
    HEAP32[$head271 >> 2] = $or270;
    var $or272 = $rsize_3_lcssa | 1;
    var $add_ptr_sum = $nb + 4 | 0;
    var $head273 = $10 + $add_ptr_sum | 0;
    var $39 = $head273;
    HEAP32[$39 >> 2] = $or272;
    var $add_ptr_sum1 = $rsize_3_lcssa + $nb | 0;
    var $add_ptr274 = $10 + $add_ptr_sum1 | 0;
    var $prev_foot = $add_ptr274;
    HEAP32[$prev_foot >> 2] = $rsize_3_lcssa;
    var $shr275 = $rsize_3_lcssa >>> 3;
    var $cmp276 = $rsize_3_lcssa >>> 0 < 256;
    if ($cmp276) {
      label = 56;
      break;
    } else {
      label = 61;
      break;
    }
   case 56:
    var $shl280 = $shr275 << 1;
    var $arrayidx281 = 5302572 + ($shl280 << 2) | 0;
    var $40 = $arrayidx281;
    var $41 = HEAP32[5302532 >> 2];
    var $shl283 = 1 << $shr275;
    var $and284 = $41 & $shl283;
    var $tobool285 = ($and284 | 0) == 0;
    if ($tobool285) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    var $or289 = $41 | $shl283;
    HEAP32[5302532 >> 2] = $or289;
    var $arrayidx281_sum_pre = $shl280 + 2 | 0;
    var $_pre = 5302572 + ($arrayidx281_sum_pre << 2) | 0;
    var $F282_0 = $40;
    var $_pre_phi = $_pre;
    label = 60;
    break;
   case 58:
    var $arrayidx281_sum15 = $shl280 + 2 | 0;
    var $42 = 5302572 + ($arrayidx281_sum15 << 2) | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $43;
    var $45 = HEAP32[5302548 >> 2];
    var $cmp293 = $44 >>> 0 < $45 >>> 0;
    if ($cmp293) {
      label = 59;
      break;
    } else {
      var $F282_0 = $43;
      var $_pre_phi = $42;
      label = 60;
      break;
    }
   case 59:
    _abort();
   case 60:
    var $_pre_phi;
    var $F282_0;
    HEAP32[$_pre_phi >> 2] = $12;
    var $bk303 = $F282_0 + 12 | 0;
    HEAP32[$bk303 >> 2] = $12;
    var $add_ptr_sum13 = $nb + 8 | 0;
    var $fd304 = $10 + $add_ptr_sum13 | 0;
    var $46 = $fd304;
    HEAP32[$46 >> 2] = $F282_0;
    var $add_ptr_sum14 = $nb + 12 | 0;
    var $bk305 = $10 + $add_ptr_sum14 | 0;
    var $47 = $bk305;
    HEAP32[$47 >> 2] = $40;
    label = 78;
    break;
   case 61:
    var $48 = $add_ptr;
    var $shr310 = $rsize_3_lcssa >>> 8;
    var $cmp311 = ($shr310 | 0) == 0;
    if ($cmp311) {
      var $I308_0 = 0;
      label = 64;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $cmp315 = $rsize_3_lcssa >>> 0 > 16777215;
    if ($cmp315) {
      var $I308_0 = 31;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $sub321 = $shr310 + 1048320 | 0;
    var $shr322 = $sub321 >>> 16;
    var $and323 = $shr322 & 8;
    var $shl325 = $shr310 << $and323;
    var $sub326 = $shl325 + 520192 | 0;
    var $shr327 = $sub326 >>> 16;
    var $and328 = $shr327 & 4;
    var $add329 = $and328 | $and323;
    var $shl330 = $shl325 << $and328;
    var $sub331 = $shl330 + 245760 | 0;
    var $shr332 = $sub331 >>> 16;
    var $and333 = $shr332 & 2;
    var $add334 = $add329 | $and333;
    var $sub335 = 14 - $add334 | 0;
    var $shl336 = $shl330 << $and333;
    var $shr337 = $shl336 >>> 15;
    var $add338 = $sub335 + $shr337 | 0;
    var $shl339 = $add338 << 1;
    var $add340 = $add338 + 7 | 0;
    var $shr341 = $rsize_3_lcssa >>> ($add340 >>> 0);
    var $and342 = $shr341 & 1;
    var $add343 = $and342 | $shl339;
    var $I308_0 = $add343;
    label = 64;
    break;
   case 64:
    var $I308_0;
    var $arrayidx347 = 5302836 + ($I308_0 << 2) | 0;
    var $add_ptr_sum2 = $nb + 28 | 0;
    var $index348 = $10 + $add_ptr_sum2 | 0;
    var $49 = $index348;
    HEAP32[$49 >> 2] = $I308_0;
    var $add_ptr_sum3 = $nb + 16 | 0;
    var $child349 = $10 + $add_ptr_sum3 | 0;
    var $child349_sum = $nb + 20 | 0;
    var $arrayidx350 = $10 + $child349_sum | 0;
    var $50 = $arrayidx350;
    HEAP32[$50 >> 2] = 0;
    var $arrayidx352 = $child349;
    HEAP32[$arrayidx352 >> 2] = 0;
    var $51 = HEAP32[5302536 >> 2];
    var $shl354 = 1 << $I308_0;
    var $and355 = $51 & $shl354;
    var $tobool356 = ($and355 | 0) == 0;
    if ($tobool356) {
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 65:
    var $or360 = $51 | $shl354;
    HEAP32[5302536 >> 2] = $or360;
    HEAP32[$arrayidx347 >> 2] = $48;
    var $52 = $arrayidx347;
    var $add_ptr_sum4 = $nb + 24 | 0;
    var $parent361 = $10 + $add_ptr_sum4 | 0;
    var $53 = $parent361;
    HEAP32[$53 >> 2] = $52;
    var $add_ptr_sum5 = $nb + 12 | 0;
    var $bk362 = $10 + $add_ptr_sum5 | 0;
    var $54 = $bk362;
    HEAP32[$54 >> 2] = $48;
    var $add_ptr_sum6 = $nb + 8 | 0;
    var $fd363 = $10 + $add_ptr_sum6 | 0;
    var $55 = $fd363;
    HEAP32[$55 >> 2] = $48;
    label = 78;
    break;
   case 66:
    var $56 = HEAP32[$arrayidx347 >> 2];
    var $cmp366 = ($I308_0 | 0) == 31;
    if ($cmp366) {
      var $cond375 = 0;
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $shr370 = $I308_0 >>> 1;
    var $sub373 = 25 - $shr370 | 0;
    var $cond375 = $sub373;
    label = 68;
    break;
   case 68:
    var $cond375;
    var $shl376 = $rsize_3_lcssa << $cond375;
    var $K365_0 = $shl376;
    var $T_0 = $56;
    label = 69;
    break;
   case 69:
    var $T_0;
    var $K365_0;
    var $head378 = $T_0 + 4 | 0;
    var $57 = HEAP32[$head378 >> 2];
    var $and379 = $57 & -8;
    var $cmp380 = ($and379 | 0) == ($rsize_3_lcssa | 0);
    if ($cmp380) {
      label = 74;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $shr383 = $K365_0 >>> 31;
    var $arrayidx386 = $T_0 + 16 + ($shr383 << 2) | 0;
    var $58 = HEAP32[$arrayidx386 >> 2];
    var $cmp388 = ($58 | 0) == 0;
    var $shl387 = $K365_0 << 1;
    if ($cmp388) {
      label = 71;
      break;
    } else {
      var $K365_0 = $shl387;
      var $T_0 = $58;
      label = 69;
      break;
    }
   case 71:
    var $59 = $arrayidx386;
    var $60 = HEAP32[5302548 >> 2];
    var $cmp393 = $59 >>> 0 < $60 >>> 0;
    if ($cmp393) {
      label = 73;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    HEAP32[$arrayidx386 >> 2] = $48;
    var $add_ptr_sum10 = $nb + 24 | 0;
    var $parent398 = $10 + $add_ptr_sum10 | 0;
    var $61 = $parent398;
    HEAP32[$61 >> 2] = $T_0;
    var $add_ptr_sum11 = $nb + 12 | 0;
    var $bk399 = $10 + $add_ptr_sum11 | 0;
    var $62 = $bk399;
    HEAP32[$62 >> 2] = $48;
    var $add_ptr_sum12 = $nb + 8 | 0;
    var $fd400 = $10 + $add_ptr_sum12 | 0;
    var $63 = $fd400;
    HEAP32[$63 >> 2] = $48;
    label = 78;
    break;
   case 73:
    _abort();
   case 74:
    var $fd405 = $T_0 + 8 | 0;
    var $64 = HEAP32[$fd405 >> 2];
    var $65 = $T_0;
    var $66 = HEAP32[5302548 >> 2];
    var $cmp407 = $65 >>> 0 < $66 >>> 0;
    if ($cmp407) {
      label = 77;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    var $67 = $64;
    var $cmp410 = $67 >>> 0 < $66 >>> 0;
    if ($cmp410) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $bk415 = $64 + 12 | 0;
    HEAP32[$bk415 >> 2] = $48;
    HEAP32[$fd405 >> 2] = $48;
    var $add_ptr_sum7 = $nb + 8 | 0;
    var $fd417 = $10 + $add_ptr_sum7 | 0;
    var $68 = $fd417;
    HEAP32[$68 >> 2] = $64;
    var $add_ptr_sum8 = $nb + 12 | 0;
    var $bk418 = $10 + $add_ptr_sum8 | 0;
    var $69 = $bk418;
    HEAP32[$69 >> 2] = $T_0;
    var $add_ptr_sum9 = $nb + 24 | 0;
    var $parent419 = $10 + $add_ptr_sum9 | 0;
    var $70 = $parent419;
    HEAP32[$70 >> 2] = 0;
    label = 78;
    break;
   case 77:
    _abort();
   case 78:
    var $add_ptr426 = $v_3_lcssa + 8 | 0;
    var $71 = $add_ptr426;
    var $retval_0 = $71;
    label = 80;
    break;
   case 79:
    _abort();
   case 80:
    var $retval_0;
    return $retval_0;
  }
}
_tmalloc_large["X"] = 1;
function _sys_alloc($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249272 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5302972 >> 2];
    var $and10 = $1 & 4;
    var $tobool11 = ($and10 | 0) == 0;
    if ($tobool11) {
      label = 5;
      break;
    } else {
      var $tsize_122 = 0;
      label = 24;
      break;
    }
   case 5:
    var $2 = HEAP32[5302556 >> 2];
    var $cmp13 = ($2 | 0) == 0;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2;
    var $call15 = _segment_holding($3);
    var $cmp16 = ($call15 | 0) == 0;
    if ($cmp16) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $call18 = _sbrk(0);
    var $cmp19 = ($call18 | 0) == -1;
    if ($cmp19) {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $4 = HEAP32[5249280 >> 2];
    var $sub = $nb + 47 | 0;
    var $add21 = $sub + $4 | 0;
    var $neg = -$4 | 0;
    var $and23 = $add21 & $neg;
    var $5 = $call18;
    var $6 = HEAP32[5249276 >> 2];
    var $sub24 = $6 - 1 | 0;
    var $and25 = $sub24 & $5;
    var $cmp26 = ($and25 | 0) == 0;
    if ($cmp26) {
      var $asize_0 = $and23;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $add29 = $sub24 + $5 | 0;
    var $neg31 = -$6 | 0;
    var $and32 = $add29 & $neg31;
    var $sub33 = $and23 - $5 | 0;
    var $add34 = $sub33 + $and32 | 0;
    var $asize_0 = $add34;
    label = 10;
    break;
   case 10:
    var $asize_0;
    var $cmp36 = $asize_0 >>> 0 < 2147483647;
    if ($cmp36) {
      label = 11;
      break;
    } else {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    }
   case 11:
    var $call38 = _sbrk($asize_0);
    var $cmp39 = ($call38 | 0) == ($call18 | 0);
    var $asize_0_ = $cmp39 ? $asize_0 : 0;
    var $call18_ = $cmp39 ? $call18 : -1;
    var $tbase_0 = $call18_;
    var $tsize_0 = $asize_0_;
    var $br_0 = $call38;
    var $asize_1 = $asize_0;
    label = 14;
    break;
   case 12:
    var $7 = HEAP32[5302544 >> 2];
    var $8 = HEAP32[5249280 >> 2];
    var $sub44 = $nb + 47 | 0;
    var $sub46 = $sub44 - $7 | 0;
    var $add47 = $sub46 + $8 | 0;
    var $neg49 = -$8 | 0;
    var $and50 = $add47 & $neg49;
    var $cmp51 = $and50 >>> 0 < 2147483647;
    if ($cmp51) {
      label = 13;
      break;
    } else {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    }
   case 13:
    var $call53 = _sbrk($and50);
    var $base54 = $call15 | 0;
    var $9 = HEAP32[$base54 >> 2];
    var $size = $call15 + 4 | 0;
    var $10 = HEAP32[$size >> 2];
    var $add_ptr = $9 + $10 | 0;
    var $cmp55 = ($call53 | 0) == ($add_ptr | 0);
    var $and50_ = $cmp55 ? $and50 : 0;
    var $call53_ = $cmp55 ? $call53 : -1;
    var $tbase_0 = $call53_;
    var $tsize_0 = $and50_;
    var $br_0 = $call53;
    var $asize_1 = $and50;
    label = 14;
    break;
   case 14:
    var $asize_1;
    var $br_0;
    var $tsize_0;
    var $tbase_0;
    var $sub82 = -$asize_1 | 0;
    var $cmp59 = ($tbase_0 | 0) == -1;
    if ($cmp59) {
      label = 15;
      break;
    } else {
      var $tsize_227 = $tsize_0;
      var $tbase_228 = $tbase_0;
      label = 27;
      break;
    }
   case 15:
    var $cmp61 = ($br_0 | 0) != -1;
    var $cmp63 = $asize_1 >>> 0 < 2147483647;
    var $or_cond = $cmp61 & $cmp63;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 16:
    var $add65 = $nb + 48 | 0;
    var $cmp66 = $asize_1 >>> 0 < $add65 >>> 0;
    if ($cmp66) {
      label = 17;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 17:
    var $11 = HEAP32[5249280 >> 2];
    var $sub70 = $nb + 47 | 0;
    var $sub69 = $sub70 - $asize_1 | 0;
    var $add71 = $sub69 + $11 | 0;
    var $neg73 = -$11 | 0;
    var $and74 = $add71 & $neg73;
    var $cmp75 = $and74 >>> 0 < 2147483647;
    if ($cmp75) {
      label = 18;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 18:
    var $call77 = _sbrk($and74);
    var $cmp78 = ($call77 | 0) == -1;
    if ($cmp78) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $add80 = $and74 + $asize_1 | 0;
    var $asize_2 = $add80;
    label = 21;
    break;
   case 20:
    var $call83 = _sbrk($sub82);
    var $tsize_091517_ph = $tsize_0;
    label = 22;
    break;
   case 21:
    var $asize_2;
    var $cmp88 = ($br_0 | 0) == -1;
    if ($cmp88) {
      label = 23;
      break;
    } else {
      var $tsize_227 = $asize_2;
      var $tbase_228 = $br_0;
      label = 27;
      break;
    }
   case 22:
    var $tsize_091517_ph;
    var $12 = HEAP32[5302972 >> 2];
    var $or29 = $12 | 4;
    HEAP32[5302972 >> 2] = $or29;
    var $tsize_122 = $tsize_091517_ph;
    label = 24;
    break;
   case 23:
    var $13 = HEAP32[5302972 >> 2];
    var $or = $13 | 4;
    HEAP32[5302972 >> 2] = $or;
    var $tsize_122 = $tsize_0;
    label = 24;
    break;
   case 24:
    var $tsize_122;
    var $14 = HEAP32[5249280 >> 2];
    var $sub99 = $nb + 47 | 0;
    var $add100 = $sub99 + $14 | 0;
    var $neg102 = -$14 | 0;
    var $and103 = $add100 & $neg102;
    var $cmp104 = $and103 >>> 0 < 2147483647;
    if ($cmp104) {
      label = 25;
      break;
    } else {
      label = 48;
      break;
    }
   case 25:
    var $call108 = _sbrk($and103);
    var $call109 = _sbrk(0);
    var $notlhs = ($call108 | 0) != -1;
    var $notrhs = ($call109 | 0) != -1;
    var $or_cond1_not = $notrhs & $notlhs;
    var $cmp114 = $call108 >>> 0 < $call109 >>> 0;
    var $or_cond2 = $or_cond1_not & $cmp114;
    if ($or_cond2) {
      label = 26;
      break;
    } else {
      label = 48;
      break;
    }
   case 26:
    var $sub_ptr_lhs_cast = $call109;
    var $sub_ptr_rhs_cast = $call108;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add116 = $nb + 40 | 0;
    var $cmp117 = $sub_ptr_sub >>> 0 > $add116 >>> 0;
    var $sub_ptr_sub_tsize_1 = $cmp117 ? $sub_ptr_sub : $tsize_122;
    var $call108_tbase_1 = $cmp117 ? $call108 : -1;
    var $cmp123 = ($call108_tbase_1 | 0) == -1;
    if ($cmp123) {
      label = 48;
      break;
    } else {
      var $tsize_227 = $sub_ptr_sub_tsize_1;
      var $tbase_228 = $call108_tbase_1;
      label = 27;
      break;
    }
   case 27:
    var $tbase_228;
    var $tsize_227;
    var $15 = HEAP32[5302964 >> 2];
    var $add125 = $15 + $tsize_227 | 0;
    HEAP32[5302964 >> 2] = $add125;
    var $16 = HEAP32[5302968 >> 2];
    var $cmp126 = $add125 >>> 0 > $16 >>> 0;
    if ($cmp126) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[5302968 >> 2] = $add125;
    label = 29;
    break;
   case 29:
    var $17 = HEAP32[5302556 >> 2];
    var $cmp132 = ($17 | 0) == 0;
    if ($cmp132) {
      label = 30;
      break;
    } else {
      var $sp_039 = 5302976;
      label = 33;
      break;
    }
   case 30:
    var $18 = HEAP32[5302548 >> 2];
    var $cmp134 = ($18 | 0) == 0;
    var $cmp136 = $tbase_228 >>> 0 < $18 >>> 0;
    var $or_cond3 = $cmp134 | $cmp136;
    if ($or_cond3) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    HEAP32[5302548 >> 2] = $tbase_228;
    label = 32;
    break;
   case 32:
    HEAP32[5302976 >> 2] = $tbase_228;
    HEAP32[5302980 >> 2] = $tsize_227;
    HEAP32[5302988 >> 2] = 0;
    var $19 = HEAP32[5249272 >> 2];
    HEAP32[5302568 >> 2] = $19;
    HEAP32[5302564 >> 2] = -1;
    _init_bins();
    var $20 = $tbase_228;
    var $sub146 = $tsize_227 - 40 | 0;
    _init_top($20, $sub146);
    label = 46;
    break;
   case 33:
    var $sp_039;
    var $base161 = $sp_039 | 0;
    var $21 = HEAP32[$base161 >> 2];
    var $size162 = $sp_039 + 4 | 0;
    var $22 = HEAP32[$size162 >> 2];
    var $add_ptr163 = $21 + $22 | 0;
    var $cmp164 = ($tbase_228 | 0) == ($add_ptr163 | 0);
    if ($cmp164) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $next = $sp_039 + 8 | 0;
    var $23 = HEAP32[$next >> 2];
    var $cmp160 = ($23 | 0) == 0;
    if ($cmp160) {
      label = 38;
      break;
    } else {
      var $sp_039 = $23;
      label = 33;
      break;
    }
   case 35:
    var $sflags167 = $sp_039 + 12 | 0;
    var $24 = HEAP32[$sflags167 >> 2];
    var $and168 = $24 & 8;
    var $tobool169 = ($and168 | 0) == 0;
    if ($tobool169) {
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 36:
    var $25 = $17;
    var $cmp177 = $25 >>> 0 >= $21 >>> 0;
    var $cmp183 = $25 >>> 0 < $tbase_228 >>> 0;
    var $or_cond32 = $cmp177 & $cmp183;
    if ($or_cond32) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $add186 = $22 + $tsize_227 | 0;
    HEAP32[$size162 >> 2] = $add186;
    var $26 = HEAP32[5302556 >> 2];
    var $27 = HEAP32[5302544 >> 2];
    var $add189 = $27 + $tsize_227 | 0;
    _init_top($26, $add189);
    label = 46;
    break;
   case 38:
    var $28 = HEAP32[5302548 >> 2];
    var $cmp192 = $tbase_228 >>> 0 < $28 >>> 0;
    if ($cmp192) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[5302548 >> 2] = $tbase_228;
    label = 40;
    break;
   case 40:
    var $add_ptr201 = $tbase_228 + $tsize_227 | 0;
    var $sp_135 = 5302976;
    label = 41;
    break;
   case 41:
    var $sp_135;
    var $base200 = $sp_135 | 0;
    var $29 = HEAP32[$base200 >> 2];
    var $cmp202 = ($29 | 0) == ($add_ptr201 | 0);
    if ($cmp202) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $next205 = $sp_135 + 8 | 0;
    var $30 = HEAP32[$next205 >> 2];
    var $cmp198 = ($30 | 0) == 0;
    if ($cmp198) {
      label = 45;
      break;
    } else {
      var $sp_135 = $30;
      label = 41;
      break;
    }
   case 43:
    var $sflags209 = $sp_135 + 12 | 0;
    var $31 = HEAP32[$sflags209 >> 2];
    var $and210 = $31 & 8;
    var $tobool211 = ($and210 | 0) == 0;
    if ($tobool211) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    HEAP32[$base200 >> 2] = $tbase_228;
    var $size219 = $sp_135 + 4 | 0;
    var $32 = HEAP32[$size219 >> 2];
    var $add220 = $32 + $tsize_227 | 0;
    HEAP32[$size219 >> 2] = $add220;
    var $call221 = _prepend_alloc($tbase_228, $add_ptr201, $nb);
    var $retval_0 = $call221;
    label = 49;
    break;
   case 45:
    _add_segment($tbase_228, $tsize_227);
    label = 46;
    break;
   case 46:
    var $33 = HEAP32[5302544 >> 2];
    var $cmp227 = $33 >>> 0 > $nb >>> 0;
    if ($cmp227) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $sub230 = $33 - $nb | 0;
    HEAP32[5302544 >> 2] = $sub230;
    var $34 = HEAP32[5302556 >> 2];
    var $35 = $34;
    var $add_ptr232 = $35 + $nb | 0;
    var $36 = $add_ptr232;
    HEAP32[5302556 >> 2] = $36;
    var $or234 = $sub230 | 1;
    var $add_ptr232_sum = $nb + 4 | 0;
    var $head235 = $35 + $add_ptr232_sum | 0;
    var $37 = $head235;
    HEAP32[$37 >> 2] = $or234;
    var $or237 = $nb | 3;
    var $head238 = $34 + 4 | 0;
    HEAP32[$head238 >> 2] = $or237;
    var $add_ptr239 = $34 + 8 | 0;
    var $38 = $add_ptr239;
    var $retval_0 = $38;
    label = 49;
    break;
   case 48:
    var $call242 = ___errno_location();
    HEAP32[$call242 >> 2] = 12;
    var $retval_0 = 0;
    label = 49;
    break;
   case 49:
    var $retval_0;
    return $retval_0;
  }
}
_sys_alloc["X"] = 1;
function _release_unused_segments() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0_in = 5302984;
    label = 3;
    break;
   case 3:
    var $sp_0_in;
    var $sp_0 = HEAP32[$sp_0_in >> 2];
    var $cmp = ($sp_0 | 0) == 0;
    var $next4 = $sp_0 + 8 | 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $sp_0_in = $next4;
      label = 3;
      break;
    }
   case 4:
    HEAP32[5302564 >> 2] = -1;
    return;
  }
}
function _sys_trim() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249272 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5302556 >> 2];
    var $cmp2 = ($1 | 0) == 0;
    if ($cmp2) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[5302544 >> 2];
    var $cmp3 = $2 >>> 0 > 40;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $3 = HEAP32[5249280 >> 2];
    var $sub = $2 - 41 | 0;
    var $add7 = $sub + $3 | 0;
    var $div = Math.floor(($add7 >>> 0) / ($3 >>> 0));
    var $sub8 = $div - 1 | 0;
    var $mul = $sub8 * $3 & -1;
    var $4 = $1;
    var $call10 = _segment_holding($4);
    var $sflags = $call10 + 12 | 0;
    var $5 = HEAP32[$sflags >> 2];
    var $and = $5 & 8;
    var $tobool11 = ($and | 0) == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $call20 = _sbrk(0);
    var $base = $call10 | 0;
    var $6 = HEAP32[$base >> 2];
    var $size = $call10 + 4 | 0;
    var $7 = HEAP32[$size >> 2];
    var $add_ptr = $6 + $7 | 0;
    var $cmp21 = ($call20 | 0) == ($add_ptr | 0);
    if ($cmp21) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    var $sub19 = -2147483648 - $3 | 0;
    var $cmp17 = $mul >>> 0 > 2147483646;
    var $sub19_mul = $cmp17 ? $sub19 : $mul;
    var $sub23 = -$sub19_mul | 0;
    var $call24 = _sbrk($sub23);
    var $call25 = _sbrk(0);
    var $cmp26 = ($call24 | 0) != -1;
    var $cmp28 = $call25 >>> 0 < $call20 >>> 0;
    var $or_cond = $cmp26 & $cmp28;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $sub_ptr_lhs_cast = $call20;
    var $sub_ptr_rhs_cast = $call25;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $cmp34 = ($call20 | 0) == ($call25 | 0);
    if ($cmp34) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $8 = HEAP32[$size >> 2];
    var $sub37 = $8 - $sub_ptr_sub | 0;
    HEAP32[$size >> 2] = $sub37;
    var $9 = HEAP32[5302964 >> 2];
    var $sub38 = $9 - $sub_ptr_sub | 0;
    HEAP32[5302964 >> 2] = $sub38;
    var $10 = HEAP32[5302556 >> 2];
    var $11 = HEAP32[5302544 >> 2];
    var $sub41 = $11 - $sub_ptr_sub | 0;
    _init_top($10, $sub41);
    label = 13;
    break;
   case 11:
    var $12 = HEAP32[5302544 >> 2];
    var $13 = HEAP32[5302560 >> 2];
    var $cmp47 = $12 >>> 0 > $13 >>> 0;
    if ($cmp47) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5302560 >> 2] = -1;
    label = 13;
    break;
   case 13:
    return;
  }
}
_sys_trim["X"] = 1;
function _free($mem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($mem | 0) == 0;
    if ($cmp) {
      label = 128;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $add_ptr = $mem - 8 | 0;
    var $0 = $add_ptr;
    var $1 = HEAP32[5302548 >> 2];
    var $cmp1 = $add_ptr >>> 0 < $1 >>> 0;
    if ($cmp1) {
      label = 127;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $head = $mem - 4 | 0;
    var $2 = $head;
    var $3 = HEAP32[$2 >> 2];
    var $and = $3 & 3;
    var $cmp2 = ($and | 0) == 1;
    if ($cmp2) {
      label = 127;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $and5 = $3 & -8;
    var $add_ptr_sum = $and5 - 8 | 0;
    var $add_ptr6 = $mem + $add_ptr_sum | 0;
    var $4 = $add_ptr6;
    var $and8 = $3 & 1;
    var $tobool9 = ($and8 | 0) == 0;
    if ($tobool9) {
      label = 6;
      break;
    } else {
      var $p_0 = $0;
      var $psize_0 = $and5;
      label = 49;
      break;
    }
   case 6:
    var $prev_foot = $add_ptr;
    var $5 = HEAP32[$prev_foot >> 2];
    var $cmp13 = ($and | 0) == 0;
    if ($cmp13) {
      label = 128;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $add_ptr_sum215 = -8 - $5 | 0;
    var $add_ptr16 = $mem + $add_ptr_sum215 | 0;
    var $6 = $add_ptr16;
    var $add17 = $5 + $and5 | 0;
    var $cmp18 = $add_ptr16 >>> 0 < $1 >>> 0;
    if ($cmp18) {
      label = 127;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = HEAP32[5302552 >> 2];
    var $cmp22 = ($6 | 0) == ($7 | 0);
    if ($cmp22) {
      label = 47;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $shr = $5 >>> 3;
    var $cmp25 = $5 >>> 0 < 256;
    if ($cmp25) {
      label = 10;
      break;
    } else {
      label = 16;
      break;
    }
   case 10:
    var $add_ptr16_sum242 = $add_ptr_sum215 + 8 | 0;
    var $fd = $mem + $add_ptr16_sum242 | 0;
    var $8 = $fd;
    var $9 = HEAP32[$8 >> 2];
    var $add_ptr16_sum243 = $add_ptr_sum215 + 12 | 0;
    var $bk = $mem + $add_ptr16_sum243 | 0;
    var $10 = $bk;
    var $11 = HEAP32[$10 >> 2];
    var $cmp29 = ($9 | 0) == ($11 | 0);
    if ($cmp29) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $shl = 1 << $shr;
    var $neg = $shl ^ -1;
    var $12 = HEAP32[5302532 >> 2];
    var $and32 = $12 & $neg;
    HEAP32[5302532 >> 2] = $and32;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 12:
    var $shl34 = $shr << 1;
    var $arrayidx = 5302572 + ($shl34 << 2) | 0;
    var $13 = $arrayidx;
    var $cmp35 = ($9 | 0) != ($13 | 0);
    var $14 = $9;
    var $cmp37 = $14 >>> 0 < $1 >>> 0;
    var $or_cond = $cmp35 & $cmp37;
    if ($or_cond) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $cmp42 = ($11 | 0) == ($13 | 0);
    var $15 = $11;
    var $cmp44 = $15 >>> 0 >= $1 >>> 0;
    var $or_cond248 = $cmp42 | $cmp44;
    if ($or_cond248) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $bk51 = $9 + 12 | 0;
    HEAP32[$bk51 >> 2] = $11;
    var $fd52 = $11 + 8 | 0;
    HEAP32[$fd52 >> 2] = $9;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 15:
    _abort();
   case 16:
    var $16 = $add_ptr16;
    var $add_ptr16_sum236 = $add_ptr_sum215 + 24 | 0;
    var $parent = $mem + $add_ptr16_sum236 | 0;
    var $17 = $parent;
    var $18 = HEAP32[$17 >> 2];
    var $add_ptr16_sum237 = $add_ptr_sum215 + 12 | 0;
    var $bk56 = $mem + $add_ptr16_sum237 | 0;
    var $19 = $bk56;
    var $20 = HEAP32[$19 >> 2];
    var $cmp57 = ($20 | 0) == ($16 | 0);
    if ($cmp57) {
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $add_ptr16_sum241 = $add_ptr_sum215 + 8 | 0;
    var $fd61 = $mem + $add_ptr16_sum241 | 0;
    var $21 = $fd61;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22;
    var $cmp63 = $23 >>> 0 < $1 >>> 0;
    if ($cmp63) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $bk68 = $22 + 12 | 0;
    HEAP32[$bk68 >> 2] = $20;
    var $fd69 = $20 + 8 | 0;
    HEAP32[$fd69 >> 2] = $22;
    var $R_1 = $20;
    label = 27;
    break;
   case 19:
    _abort();
   case 20:
    var $child_sum = $add_ptr_sum215 + 20 | 0;
    var $arrayidx73 = $mem + $child_sum | 0;
    var $24 = $arrayidx73;
    var $25 = HEAP32[$24 >> 2];
    var $cmp74 = ($25 | 0) == 0;
    if ($cmp74) {
      label = 21;
      break;
    } else {
      var $R_0 = $25;
      var $RP_0 = $24;
      label = 22;
      break;
    }
   case 21:
    var $add_ptr16_sum238 = $add_ptr_sum215 + 16 | 0;
    var $child = $mem + $add_ptr16_sum238 | 0;
    var $arrayidx78 = $child;
    var $26 = HEAP32[$arrayidx78 >> 2];
    var $cmp79 = ($26 | 0) == 0;
    if ($cmp79) {
      var $R_1 = 0;
      label = 27;
      break;
    } else {
      var $R_0 = $26;
      var $RP_0 = $arrayidx78;
      label = 22;
      break;
    }
   case 22:
    var $RP_0;
    var $R_0;
    var $arrayidx83 = $R_0 + 20 | 0;
    var $27 = HEAP32[$arrayidx83 >> 2];
    var $cmp84 = ($27 | 0) == 0;
    if ($cmp84) {
      label = 23;
      break;
    } else {
      var $R_0 = $27;
      var $RP_0 = $arrayidx83;
      label = 22;
      break;
    }
   case 23:
    var $arrayidx88 = $R_0 + 16 | 0;
    var $28 = HEAP32[$arrayidx88 >> 2];
    var $cmp89 = ($28 | 0) == 0;
    if ($cmp89) {
      label = 24;
      break;
    } else {
      var $R_0 = $28;
      var $RP_0 = $arrayidx88;
      label = 22;
      break;
    }
   case 24:
    var $29 = $RP_0;
    var $cmp92 = $29 >>> 0 < $1 >>> 0;
    if ($cmp92) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 27;
    break;
   case 26:
    _abort();
   case 27:
    var $R_1;
    var $cmp101 = ($18 | 0) == 0;
    if ($cmp101) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $add_ptr16_sum239 = $add_ptr_sum215 + 28 | 0;
    var $index = $mem + $add_ptr16_sum239 | 0;
    var $30 = $index;
    var $31 = HEAP32[$30 >> 2];
    var $arrayidx104 = 5302836 + ($31 << 2) | 0;
    var $32 = HEAP32[$arrayidx104 >> 2];
    var $cmp105 = ($16 | 0) == ($32 | 0);
    if ($cmp105) {
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 29:
    HEAP32[$arrayidx104 >> 2] = $R_1;
    var $cond246 = ($R_1 | 0) == 0;
    if ($cond246) {
      label = 30;
      break;
    } else {
      label = 37;
      break;
    }
   case 30:
    var $33 = HEAP32[$30 >> 2];
    var $shl112 = 1 << $33;
    var $neg113 = $shl112 ^ -1;
    var $34 = HEAP32[5302536 >> 2];
    var $and114 = $34 & $neg113;
    HEAP32[5302536 >> 2] = $and114;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 31:
    var $35 = $18;
    var $36 = HEAP32[5302548 >> 2];
    var $cmp117 = $35 >>> 0 < $36 >>> 0;
    if ($cmp117) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $arrayidx123 = $18 + 16 | 0;
    var $37 = HEAP32[$arrayidx123 >> 2];
    var $cmp124 = ($37 | 0) == ($16 | 0);
    if ($cmp124) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$arrayidx123 >> 2] = $R_1;
    label = 36;
    break;
   case 34:
    var $arrayidx131 = $18 + 20 | 0;
    HEAP32[$arrayidx131 >> 2] = $R_1;
    label = 36;
    break;
   case 35:
    _abort();
   case 36:
    var $cmp136 = ($R_1 | 0) == 0;
    if ($cmp136) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $38 = $R_1;
    var $39 = HEAP32[5302548 >> 2];
    var $cmp139 = $38 >>> 0 < $39 >>> 0;
    if ($cmp139) {
      label = 46;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $parent144 = $R_1 + 24 | 0;
    HEAP32[$parent144 >> 2] = $18;
    var $add_ptr16_sum240 = $add_ptr_sum215 + 16 | 0;
    var $child145 = $mem + $add_ptr16_sum240 | 0;
    var $arrayidx146 = $child145;
    var $40 = HEAP32[$arrayidx146 >> 2];
    var $cmp147 = ($40 | 0) == 0;
    if ($cmp147) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $41 = $40;
    var $42 = HEAP32[5302548 >> 2];
    var $cmp150 = $41 >>> 0 < $42 >>> 0;
    if ($cmp150) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $arrayidx156 = $R_1 + 16 | 0;
    HEAP32[$arrayidx156 >> 2] = $40;
    var $parent157 = $40 + 24 | 0;
    HEAP32[$parent157 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $child145_sum = $add_ptr_sum215 + 20 | 0;
    var $arrayidx162 = $mem + $child145_sum | 0;
    var $43 = $arrayidx162;
    var $44 = HEAP32[$43 >> 2];
    var $cmp163 = ($44 | 0) == 0;
    if ($cmp163) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $45 = $44;
    var $46 = HEAP32[5302548 >> 2];
    var $cmp166 = $45 >>> 0 < $46 >>> 0;
    if ($cmp166) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $arrayidx172 = $R_1 + 20 | 0;
    HEAP32[$arrayidx172 >> 2] = $44;
    var $parent173 = $44 + 24 | 0;
    HEAP32[$parent173 >> 2] = $R_1;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 45:
    _abort();
   case 46:
    _abort();
   case 47:
    var $add_ptr6_sum = $and5 - 4 | 0;
    var $head183 = $mem + $add_ptr6_sum | 0;
    var $47 = $head183;
    var $48 = HEAP32[$47 >> 2];
    var $and184 = $48 & 3;
    var $cmp185 = ($and184 | 0) == 3;
    if ($cmp185) {
      label = 48;
      break;
    } else {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    }
   case 48:
    HEAP32[5302540 >> 2] = $add17;
    var $49 = HEAP32[$47 >> 2];
    var $and189 = $49 & -2;
    HEAP32[$47 >> 2] = $and189;
    var $or = $add17 | 1;
    var $add_ptr16_sum = $add_ptr_sum215 + 4 | 0;
    var $head190 = $mem + $add_ptr16_sum | 0;
    var $50 = $head190;
    HEAP32[$50 >> 2] = $or;
    var $prev_foot192 = $add_ptr6;
    HEAP32[$prev_foot192 >> 2] = $add17;
    label = 128;
    break;
   case 49:
    var $psize_0;
    var $p_0;
    var $51 = $p_0;
    var $cmp199 = $51 >>> 0 < $add_ptr6 >>> 0;
    if ($cmp199) {
      label = 50;
      break;
    } else {
      label = 127;
      break;
    }
   case 50:
    var $add_ptr6_sum234 = $and5 - 4 | 0;
    var $head202 = $mem + $add_ptr6_sum234 | 0;
    var $52 = $head202;
    var $53 = HEAP32[$52 >> 2];
    var $and203 = $53 & 1;
    var $tobool204 = ($and203 | 0) == 0;
    if ($tobool204) {
      label = 127;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $and211 = $53 & 2;
    var $tobool212 = ($and211 | 0) == 0;
    if ($tobool212) {
      label = 52;
      break;
    } else {
      label = 101;
      break;
    }
   case 52:
    var $54 = HEAP32[5302556 >> 2];
    var $cmp214 = ($4 | 0) == ($54 | 0);
    if ($cmp214) {
      label = 53;
      break;
    } else {
      label = 57;
      break;
    }
   case 53:
    var $55 = HEAP32[5302544 >> 2];
    var $add217 = $55 + $psize_0 | 0;
    HEAP32[5302544 >> 2] = $add217;
    HEAP32[5302556 >> 2] = $p_0;
    var $or218 = $add217 | 1;
    var $head219 = $p_0 + 4 | 0;
    HEAP32[$head219 >> 2] = $or218;
    var $56 = HEAP32[5302552 >> 2];
    var $cmp220 = ($p_0 | 0) == ($56 | 0);
    if ($cmp220) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    HEAP32[5302552 >> 2] = 0;
    HEAP32[5302540 >> 2] = 0;
    label = 55;
    break;
   case 55:
    var $57 = HEAP32[5302560 >> 2];
    var $cmp224 = $add217 >>> 0 > $57 >>> 0;
    if ($cmp224) {
      label = 56;
      break;
    } else {
      label = 128;
      break;
    }
   case 56:
    _sys_trim();
    label = 128;
    break;
   case 57:
    var $58 = HEAP32[5302552 >> 2];
    var $cmp229 = ($4 | 0) == ($58 | 0);
    if ($cmp229) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $59 = HEAP32[5302540 >> 2];
    var $add232 = $59 + $psize_0 | 0;
    HEAP32[5302540 >> 2] = $add232;
    HEAP32[5302552 >> 2] = $p_0;
    var $or233 = $add232 | 1;
    var $head234 = $p_0 + 4 | 0;
    HEAP32[$head234 >> 2] = $or233;
    var $add_ptr235 = $51 + $add232 | 0;
    var $prev_foot236 = $add_ptr235;
    HEAP32[$prev_foot236 >> 2] = $add232;
    label = 128;
    break;
   case 59:
    var $and239 = $53 & -8;
    var $add240 = $and239 + $psize_0 | 0;
    var $shr241 = $53 >>> 3;
    var $cmp242 = $53 >>> 0 < 256;
    if ($cmp242) {
      label = 60;
      break;
    } else {
      label = 68;
      break;
    }
   case 60:
    var $fd246 = $mem + $and5 | 0;
    var $60 = $fd246;
    var $61 = HEAP32[$60 >> 2];
    var $add_ptr6_sum232233 = $and5 | 4;
    var $bk248 = $mem + $add_ptr6_sum232233 | 0;
    var $62 = $bk248;
    var $63 = HEAP32[$62 >> 2];
    var $cmp251 = ($61 | 0) == ($63 | 0);
    if ($cmp251) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    var $shl254 = 1 << $shr241;
    var $neg255 = $shl254 ^ -1;
    var $64 = HEAP32[5302532 >> 2];
    var $and256 = $64 & $neg255;
    HEAP32[5302532 >> 2] = $and256;
    label = 99;
    break;
   case 62:
    var $shl258 = $shr241 << 1;
    var $arrayidx259 = 5302572 + ($shl258 << 2) | 0;
    var $65 = $arrayidx259;
    var $cmp260 = ($61 | 0) == ($65 | 0);
    if ($cmp260) {
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $66 = $61;
    var $67 = HEAP32[5302548 >> 2];
    var $cmp263 = $66 >>> 0 < $67 >>> 0;
    if ($cmp263) {
      label = 67;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $cmp268 = ($63 | 0) == ($65 | 0);
    if ($cmp268) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $68 = $63;
    var $69 = HEAP32[5302548 >> 2];
    var $cmp271 = $68 >>> 0 < $69 >>> 0;
    if ($cmp271) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $bk279 = $61 + 12 | 0;
    HEAP32[$bk279 >> 2] = $63;
    var $fd280 = $63 + 8 | 0;
    HEAP32[$fd280 >> 2] = $61;
    label = 99;
    break;
   case 67:
    _abort();
   case 68:
    var $70 = $add_ptr6;
    var $add_ptr6_sum217 = $and5 + 16 | 0;
    var $parent287 = $mem + $add_ptr6_sum217 | 0;
    var $71 = $parent287;
    var $72 = HEAP32[$71 >> 2];
    var $add_ptr6_sum218219 = $and5 | 4;
    var $bk289 = $mem + $add_ptr6_sum218219 | 0;
    var $73 = $bk289;
    var $74 = HEAP32[$73 >> 2];
    var $cmp290 = ($74 | 0) == ($70 | 0);
    if ($cmp290) {
      label = 72;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $fd294 = $mem + $and5 | 0;
    var $75 = $fd294;
    var $76 = HEAP32[$75 >> 2];
    var $77 = $76;
    var $78 = HEAP32[5302548 >> 2];
    var $cmp296 = $77 >>> 0 < $78 >>> 0;
    if ($cmp296) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $bk301 = $76 + 12 | 0;
    HEAP32[$bk301 >> 2] = $74;
    var $fd302 = $74 + 8 | 0;
    HEAP32[$fd302 >> 2] = $76;
    var $R288_1 = $74;
    label = 79;
    break;
   case 71:
    _abort();
   case 72:
    var $child307_sum = $and5 + 12 | 0;
    var $arrayidx308 = $mem + $child307_sum | 0;
    var $79 = $arrayidx308;
    var $80 = HEAP32[$79 >> 2];
    var $cmp309 = ($80 | 0) == 0;
    if ($cmp309) {
      label = 73;
      break;
    } else {
      var $R288_0 = $80;
      var $RP306_0 = $79;
      label = 74;
      break;
    }
   case 73:
    var $add_ptr6_sum220 = $and5 + 8 | 0;
    var $child307 = $mem + $add_ptr6_sum220 | 0;
    var $arrayidx313 = $child307;
    var $81 = HEAP32[$arrayidx313 >> 2];
    var $cmp314 = ($81 | 0) == 0;
    if ($cmp314) {
      var $R288_1 = 0;
      label = 79;
      break;
    } else {
      var $R288_0 = $81;
      var $RP306_0 = $arrayidx313;
      label = 74;
      break;
    }
   case 74:
    var $RP306_0;
    var $R288_0;
    var $arrayidx320 = $R288_0 + 20 | 0;
    var $82 = HEAP32[$arrayidx320 >> 2];
    var $cmp321 = ($82 | 0) == 0;
    if ($cmp321) {
      label = 75;
      break;
    } else {
      var $R288_0 = $82;
      var $RP306_0 = $arrayidx320;
      label = 74;
      break;
    }
   case 75:
    var $arrayidx325 = $R288_0 + 16 | 0;
    var $83 = HEAP32[$arrayidx325 >> 2];
    var $cmp326 = ($83 | 0) == 0;
    if ($cmp326) {
      label = 76;
      break;
    } else {
      var $R288_0 = $83;
      var $RP306_0 = $arrayidx325;
      label = 74;
      break;
    }
   case 76:
    var $84 = $RP306_0;
    var $85 = HEAP32[5302548 >> 2];
    var $cmp331 = $84 >>> 0 < $85 >>> 0;
    if ($cmp331) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    HEAP32[$RP306_0 >> 2] = 0;
    var $R288_1 = $R288_0;
    label = 79;
    break;
   case 78:
    _abort();
   case 79:
    var $R288_1;
    var $cmp340 = ($72 | 0) == 0;
    if ($cmp340) {
      label = 99;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $add_ptr6_sum228 = $and5 + 20 | 0;
    var $index344 = $mem + $add_ptr6_sum228 | 0;
    var $86 = $index344;
    var $87 = HEAP32[$86 >> 2];
    var $arrayidx345 = 5302836 + ($87 << 2) | 0;
    var $88 = HEAP32[$arrayidx345 >> 2];
    var $cmp346 = ($70 | 0) == ($88 | 0);
    if ($cmp346) {
      label = 81;
      break;
    } else {
      label = 83;
      break;
    }
   case 81:
    HEAP32[$arrayidx345 >> 2] = $R288_1;
    var $cond247 = ($R288_1 | 0) == 0;
    if ($cond247) {
      label = 82;
      break;
    } else {
      label = 89;
      break;
    }
   case 82:
    var $89 = HEAP32[$86 >> 2];
    var $shl353 = 1 << $89;
    var $neg354 = $shl353 ^ -1;
    var $90 = HEAP32[5302536 >> 2];
    var $and355 = $90 & $neg354;
    HEAP32[5302536 >> 2] = $and355;
    label = 99;
    break;
   case 83:
    var $91 = $72;
    var $92 = HEAP32[5302548 >> 2];
    var $cmp358 = $91 >>> 0 < $92 >>> 0;
    if ($cmp358) {
      label = 87;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    var $arrayidx364 = $72 + 16 | 0;
    var $93 = HEAP32[$arrayidx364 >> 2];
    var $cmp365 = ($93 | 0) == ($70 | 0);
    if ($cmp365) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    HEAP32[$arrayidx364 >> 2] = $R288_1;
    label = 88;
    break;
   case 86:
    var $arrayidx372 = $72 + 20 | 0;
    HEAP32[$arrayidx372 >> 2] = $R288_1;
    label = 88;
    break;
   case 87:
    _abort();
   case 88:
    var $cmp377 = ($R288_1 | 0) == 0;
    if ($cmp377) {
      label = 99;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $94 = $R288_1;
    var $95 = HEAP32[5302548 >> 2];
    var $cmp380 = $94 >>> 0 < $95 >>> 0;
    if ($cmp380) {
      label = 98;
      break;
    } else {
      label = 90;
      break;
    }
   case 90:
    var $parent387 = $R288_1 + 24 | 0;
    HEAP32[$parent387 >> 2] = $72;
    var $add_ptr6_sum229 = $and5 + 8 | 0;
    var $child388 = $mem + $add_ptr6_sum229 | 0;
    var $arrayidx389 = $child388;
    var $96 = HEAP32[$arrayidx389 >> 2];
    var $cmp390 = ($96 | 0) == 0;
    if ($cmp390) {
      label = 94;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $97 = $96;
    var $98 = HEAP32[5302548 >> 2];
    var $cmp393 = $97 >>> 0 < $98 >>> 0;
    if ($cmp393) {
      label = 93;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    var $arrayidx399 = $R288_1 + 16 | 0;
    HEAP32[$arrayidx399 >> 2] = $96;
    var $parent400 = $96 + 24 | 0;
    HEAP32[$parent400 >> 2] = $R288_1;
    label = 94;
    break;
   case 93:
    _abort();
   case 94:
    var $child388_sum = $and5 + 12 | 0;
    var $arrayidx405 = $mem + $child388_sum | 0;
    var $99 = $arrayidx405;
    var $100 = HEAP32[$99 >> 2];
    var $cmp406 = ($100 | 0) == 0;
    if ($cmp406) {
      label = 99;
      break;
    } else {
      label = 95;
      break;
    }
   case 95:
    var $101 = $100;
    var $102 = HEAP32[5302548 >> 2];
    var $cmp409 = $101 >>> 0 < $102 >>> 0;
    if ($cmp409) {
      label = 97;
      break;
    } else {
      label = 96;
      break;
    }
   case 96:
    var $arrayidx415 = $R288_1 + 20 | 0;
    HEAP32[$arrayidx415 >> 2] = $100;
    var $parent416 = $100 + 24 | 0;
    HEAP32[$parent416 >> 2] = $R288_1;
    label = 99;
    break;
   case 97:
    _abort();
   case 98:
    _abort();
   case 99:
    var $or425 = $add240 | 1;
    var $head426 = $p_0 + 4 | 0;
    HEAP32[$head426 >> 2] = $or425;
    var $add_ptr427 = $51 + $add240 | 0;
    var $prev_foot428 = $add_ptr427;
    HEAP32[$prev_foot428 >> 2] = $add240;
    var $103 = HEAP32[5302552 >> 2];
    var $cmp429 = ($p_0 | 0) == ($103 | 0);
    if ($cmp429) {
      label = 100;
      break;
    } else {
      var $psize_1 = $add240;
      label = 102;
      break;
    }
   case 100:
    HEAP32[5302540 >> 2] = $add240;
    label = 128;
    break;
   case 101:
    var $and437 = $53 & -2;
    HEAP32[$52 >> 2] = $and437;
    var $or438 = $psize_0 | 1;
    var $head439 = $p_0 + 4 | 0;
    HEAP32[$head439 >> 2] = $or438;
    var $add_ptr440 = $51 + $psize_0 | 0;
    var $prev_foot441 = $add_ptr440;
    HEAP32[$prev_foot441 >> 2] = $psize_0;
    var $psize_1 = $psize_0;
    label = 102;
    break;
   case 102:
    var $psize_1;
    var $shr443 = $psize_1 >>> 3;
    var $cmp444 = $psize_1 >>> 0 < 256;
    if ($cmp444) {
      label = 103;
      break;
    } else {
      label = 108;
      break;
    }
   case 103:
    var $shl450 = $shr443 << 1;
    var $arrayidx451 = 5302572 + ($shl450 << 2) | 0;
    var $104 = $arrayidx451;
    var $105 = HEAP32[5302532 >> 2];
    var $shl453 = 1 << $shr443;
    var $and454 = $105 & $shl453;
    var $tobool455 = ($and454 | 0) == 0;
    if ($tobool455) {
      label = 104;
      break;
    } else {
      label = 105;
      break;
    }
   case 104:
    var $or458 = $105 | $shl453;
    HEAP32[5302532 >> 2] = $or458;
    var $arrayidx451_sum_pre = $shl450 + 2 | 0;
    var $_pre = 5302572 + ($arrayidx451_sum_pre << 2) | 0;
    var $F452_0 = $104;
    var $_pre_phi = $_pre;
    label = 107;
    break;
   case 105:
    var $arrayidx451_sum227 = $shl450 + 2 | 0;
    var $106 = 5302572 + ($arrayidx451_sum227 << 2) | 0;
    var $107 = HEAP32[$106 >> 2];
    var $108 = $107;
    var $109 = HEAP32[5302548 >> 2];
    var $cmp461 = $108 >>> 0 < $109 >>> 0;
    if ($cmp461) {
      label = 106;
      break;
    } else {
      var $F452_0 = $107;
      var $_pre_phi = $106;
      label = 107;
      break;
    }
   case 106:
    _abort();
   case 107:
    var $_pre_phi;
    var $F452_0;
    HEAP32[$_pre_phi >> 2] = $p_0;
    var $bk471 = $F452_0 + 12 | 0;
    HEAP32[$bk471 >> 2] = $p_0;
    var $fd472 = $p_0 + 8 | 0;
    HEAP32[$fd472 >> 2] = $F452_0;
    var $bk473 = $p_0 + 12 | 0;
    HEAP32[$bk473 >> 2] = $104;
    label = 128;
    break;
   case 108:
    var $110 = $p_0;
    var $shr477 = $psize_1 >>> 8;
    var $cmp478 = ($shr477 | 0) == 0;
    if ($cmp478) {
      var $I476_0 = 0;
      label = 111;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    var $cmp482 = $psize_1 >>> 0 > 16777215;
    if ($cmp482) {
      var $I476_0 = 31;
      label = 111;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    var $sub = $shr477 + 1048320 | 0;
    var $shr486 = $sub >>> 16;
    var $and487 = $shr486 & 8;
    var $shl488 = $shr477 << $and487;
    var $sub489 = $shl488 + 520192 | 0;
    var $shr490 = $sub489 >>> 16;
    var $and491 = $shr490 & 4;
    var $add492 = $and491 | $and487;
    var $shl493 = $shl488 << $and491;
    var $sub494 = $shl493 + 245760 | 0;
    var $shr495 = $sub494 >>> 16;
    var $and496 = $shr495 & 2;
    var $add497 = $add492 | $and496;
    var $sub498 = 14 - $add497 | 0;
    var $shl499 = $shl493 << $and496;
    var $shr500 = $shl499 >>> 15;
    var $add501 = $sub498 + $shr500 | 0;
    var $shl502 = $add501 << 1;
    var $add503 = $add501 + 7 | 0;
    var $shr504 = $psize_1 >>> ($add503 >>> 0);
    var $and505 = $shr504 & 1;
    var $add506 = $and505 | $shl502;
    var $I476_0 = $add506;
    label = 111;
    break;
   case 111:
    var $I476_0;
    var $arrayidx509 = 5302836 + ($I476_0 << 2) | 0;
    var $index510 = $p_0 + 28 | 0;
    var $I476_0_c = $I476_0;
    HEAP32[$index510 >> 2] = $I476_0_c;
    var $arrayidx512 = $p_0 + 20 | 0;
    HEAP32[$arrayidx512 >> 2] = 0;
    var $111 = $p_0 + 16 | 0;
    HEAP32[$111 >> 2] = 0;
    var $112 = HEAP32[5302536 >> 2];
    var $shl515 = 1 << $I476_0;
    var $and516 = $112 & $shl515;
    var $tobool517 = ($and516 | 0) == 0;
    if ($tobool517) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    var $or520 = $112 | $shl515;
    HEAP32[5302536 >> 2] = $or520;
    HEAP32[$arrayidx509 >> 2] = $110;
    var $parent521 = $p_0 + 24 | 0;
    var $_c = $arrayidx509;
    HEAP32[$parent521 >> 2] = $_c;
    var $bk522 = $p_0 + 12 | 0;
    HEAP32[$bk522 >> 2] = $p_0;
    var $fd523 = $p_0 + 8 | 0;
    HEAP32[$fd523 >> 2] = $p_0;
    label = 125;
    break;
   case 113:
    var $113 = HEAP32[$arrayidx509 >> 2];
    var $cmp526 = ($I476_0 | 0) == 31;
    if ($cmp526) {
      var $cond = 0;
      label = 115;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    var $shr528 = $I476_0 >>> 1;
    var $sub531 = 25 - $shr528 | 0;
    var $cond = $sub531;
    label = 115;
    break;
   case 115:
    var $cond;
    var $shl532 = $psize_1 << $cond;
    var $K525_0 = $shl532;
    var $T_0 = $113;
    label = 116;
    break;
   case 116:
    var $T_0;
    var $K525_0;
    var $head533 = $T_0 + 4 | 0;
    var $114 = HEAP32[$head533 >> 2];
    var $and534 = $114 & -8;
    var $cmp535 = ($and534 | 0) == ($psize_1 | 0);
    if ($cmp535) {
      label = 121;
      break;
    } else {
      label = 117;
      break;
    }
   case 117:
    var $shr538 = $K525_0 >>> 31;
    var $arrayidx541 = $T_0 + 16 + ($shr538 << 2) | 0;
    var $115 = HEAP32[$arrayidx541 >> 2];
    var $cmp543 = ($115 | 0) == 0;
    var $shl542 = $K525_0 << 1;
    if ($cmp543) {
      label = 118;
      break;
    } else {
      var $K525_0 = $shl542;
      var $T_0 = $115;
      label = 116;
      break;
    }
   case 118:
    var $116 = $arrayidx541;
    var $117 = HEAP32[5302548 >> 2];
    var $cmp547 = $116 >>> 0 < $117 >>> 0;
    if ($cmp547) {
      label = 120;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    HEAP32[$arrayidx541 >> 2] = $110;
    var $parent552 = $p_0 + 24 | 0;
    var $T_0_c224 = $T_0;
    HEAP32[$parent552 >> 2] = $T_0_c224;
    var $bk553 = $p_0 + 12 | 0;
    HEAP32[$bk553 >> 2] = $p_0;
    var $fd554 = $p_0 + 8 | 0;
    HEAP32[$fd554 >> 2] = $p_0;
    label = 125;
    break;
   case 120:
    _abort();
   case 121:
    var $fd559 = $T_0 + 8 | 0;
    var $118 = HEAP32[$fd559 >> 2];
    var $119 = $T_0;
    var $120 = HEAP32[5302548 >> 2];
    var $cmp560 = $119 >>> 0 < $120 >>> 0;
    if ($cmp560) {
      label = 124;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    var $121 = $118;
    var $cmp563 = $121 >>> 0 < $120 >>> 0;
    if ($cmp563) {
      label = 124;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    var $bk570 = $118 + 12 | 0;
    HEAP32[$bk570 >> 2] = $110;
    HEAP32[$fd559 >> 2] = $110;
    var $fd572 = $p_0 + 8 | 0;
    var $_c223 = $118;
    HEAP32[$fd572 >> 2] = $_c223;
    var $bk573 = $p_0 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$bk573 >> 2] = $T_0_c;
    var $parent574 = $p_0 + 24 | 0;
    HEAP32[$parent574 >> 2] = 0;
    label = 125;
    break;
   case 124:
    _abort();
   case 125:
    var $122 = HEAP32[5302564 >> 2];
    var $dec = $122 - 1 | 0;
    HEAP32[5302564 >> 2] = $dec;
    var $cmp578 = ($dec | 0) == 0;
    if ($cmp578) {
      label = 126;
      break;
    } else {
      label = 128;
      break;
    }
   case 126:
    _release_unused_segments();
    label = 128;
    break;
   case 127:
    _abort();
   case 128:
    return;
  }
}
_free["X"] = 1;
function _mmap_resize($oldp, $nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head = $oldp + 4 | 0;
    var $0 = HEAP32[$head >> 2];
    var $and = $0 & -8;
    var $cmp = $nb >>> 0 < 256;
    if ($cmp) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $add = $nb + 4 | 0;
    var $cmp1 = $and >>> 0 < $add >>> 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $sub = $and - $nb | 0;
    var $1 = HEAP32[5249280 >> 2];
    var $shl = $1 << 1;
    var $cmp2 = $sub >>> 0 > $shl >>> 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      var $retval_0 = $oldp;
      label = 6;
      break;
    }
   case 5:
    var $retval_0 = 0;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _segment_holding($addr) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0 = 5302976;
    label = 3;
    break;
   case 3:
    var $sp_0;
    var $base = $sp_0 | 0;
    var $0 = HEAP32[$base >> 2];
    var $cmp = $0 >>> 0 > $addr >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $size = $sp_0 + 4 | 0;
    var $1 = HEAP32[$size >> 2];
    var $add_ptr = $0 + $1 | 0;
    var $cmp2 = $add_ptr >>> 0 > $addr >>> 0;
    if ($cmp2) {
      var $retval_0 = $sp_0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $next = $sp_0 + 8 | 0;
    var $2 = HEAP32[$next >> 2];
    var $cmp3 = ($2 | 0) == 0;
    if ($cmp3) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      var $sp_0 = $2;
      label = 3;
      break;
    }
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _init_top($p, $psize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $p;
    var $add_ptr = $p + 8 | 0;
    var $1 = $add_ptr;
    var $and = $1 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = -$1 | 0;
    var $and3 = $2 & 7;
    var $cond = $and3;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr4 = $0 + $cond | 0;
    var $3 = $add_ptr4;
    var $sub5 = $psize - $cond | 0;
    HEAP32[5302556 >> 2] = $3;
    HEAP32[5302544 >> 2] = $sub5;
    var $or = $sub5 | 1;
    var $add_ptr4_sum = $cond + 4 | 0;
    var $head = $0 + $add_ptr4_sum | 0;
    var $4 = $head;
    HEAP32[$4 >> 2] = $or;
    var $add_ptr6_sum = $psize + 4 | 0;
    var $head7 = $0 + $add_ptr6_sum | 0;
    var $5 = $head7;
    HEAP32[$5 >> 2] = 40;
    var $6 = HEAP32[5249288 >> 2];
    HEAP32[5302560 >> 2] = $6;
    return;
  }
}
function _init_bins() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $i_02 = 0;
    label = 3;
    break;
   case 3:
    var $i_02;
    var $shl = $i_02 << 1;
    var $arrayidx = 5302572 + ($shl << 2) | 0;
    var $0 = $arrayidx;
    var $arrayidx_sum = $shl + 3 | 0;
    var $1 = 5302572 + ($arrayidx_sum << 2) | 0;
    HEAP32[$1 >> 2] = $0;
    var $arrayidx_sum1 = $shl + 2 | 0;
    var $2 = 5302572 + ($arrayidx_sum1 << 2) | 0;
    HEAP32[$2 >> 2] = $0;
    var $inc = $i_02 + 1 | 0;
    var $exitcond = ($inc | 0) == 32;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_02 = $inc;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _calloc() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _malloc(72);
    var $cmp4 = ($call | 0) == 0;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $head = $call - 4 | 0;
    var $0 = $head;
    var $1 = HEAP32[$0 >> 2];
    var $and6 = $1 & 3;
    var $cmp7 = ($and6 | 0) == 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _memset($call, 0, 72);
    label = 5;
    break;
   case 5:
    return $call;
  }
}
Module["_calloc"] = _calloc;
function _realloc($oldmem, $bytes) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($oldmem | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _malloc($bytes);
    var $retval_0 = $call;
    label = 5;
    break;
   case 4:
    var $call1 = _internal_realloc($oldmem, $bytes);
    var $retval_0 = $call1;
    label = 5;
    break;
   case 5:
    var $retval_0;
    return $retval_0;
  }
}
Module["_realloc"] = _realloc;
function _internal_realloc($oldmem, $bytes) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = $bytes >>> 0 > 4294967231;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = ___errno_location();
    HEAP32[$call >> 2] = 12;
    var $retval_0 = 0;
    label = 24;
    break;
   case 4:
    var $add_ptr = $oldmem - 8 | 0;
    var $0 = $add_ptr;
    var $head = $oldmem - 4 | 0;
    var $1 = $head;
    var $2 = HEAP32[$1 >> 2];
    var $and = $2 & -8;
    var $add_ptr_sum = $and - 8 | 0;
    var $add_ptr1 = $oldmem + $add_ptr_sum | 0;
    var $3 = $add_ptr1;
    var $4 = HEAP32[5302548 >> 2];
    var $cmp2 = $add_ptr >>> 0 < $4 >>> 0;
    if ($cmp2) {
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $and4 = $2 & 3;
    var $cmp5 = ($and4 | 0) != 1;
    var $cmp7 = ($add_ptr_sum | 0) > -8;
    var $or_cond = $cmp5 & $cmp7;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    var $add_ptr1_sum = $and - 4 | 0;
    var $head8 = $oldmem + $add_ptr1_sum | 0;
    var $5 = $head8;
    var $6 = HEAP32[$5 >> 2];
    var $and9 = $6 & 1;
    var $tobool = ($and9 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $cmp12 = $bytes >>> 0 < 11;
    if ($cmp12) {
      var $cond = 16;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $add13 = $bytes + 11 | 0;
    var $and14 = $add13 & -8;
    var $cond = $and14;
    label = 9;
    break;
   case 9:
    var $cond;
    var $cmp17 = ($and4 | 0) == 0;
    if ($cmp17) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $call19 = _mmap_resize($0, $cond);
    var $newp_0 = $call19;
    var $extra_0 = 0;
    label = 18;
    break;
   case 11:
    var $cmp20 = $and >>> 0 < $cond >>> 0;
    if ($cmp20) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $sub = $and - $cond | 0;
    var $cmp22 = $sub >>> 0 > 15;
    if ($cmp22) {
      label = 13;
      break;
    } else {
      var $newp_0 = $0;
      var $extra_0 = 0;
      label = 18;
      break;
    }
   case 13:
    var $and26 = $2 & 1;
    var $or = $cond | $and26;
    var $or27 = $or | 2;
    HEAP32[$1 >> 2] = $or27;
    var $add_ptr24_sum = $cond - 4 | 0;
    var $head30 = $oldmem + $add_ptr24_sum | 0;
    var $7 = $head30;
    var $or33 = $sub | 3;
    HEAP32[$7 >> 2] = $or33;
    var $8 = HEAP32[$5 >> 2];
    var $or37 = $8 | 1;
    HEAP32[$5 >> 2] = $or37;
    var $add_ptr38 = $oldmem + $cond | 0;
    var $newp_0 = $0;
    var $extra_0 = $add_ptr38;
    label = 18;
    break;
   case 14:
    var $9 = HEAP32[5302556 >> 2];
    var $cmp41 = ($3 | 0) == ($9 | 0);
    if ($cmp41) {
      label = 15;
      break;
    } else {
      label = 22;
      break;
    }
   case 15:
    var $10 = HEAP32[5302544 >> 2];
    var $add43 = $10 + $and | 0;
    var $cmp44 = $add43 >>> 0 > $cond >>> 0;
    if ($cmp44) {
      label = 16;
      break;
    } else {
      label = 22;
      break;
    }
   case 16:
    var $sub48 = $add43 - $cond | 0;
    var $add_ptr_sum1 = $cond - 8 | 0;
    var $add_ptr49 = $oldmem + $add_ptr_sum1 | 0;
    var $11 = $add_ptr49;
    var $and51 = $2 & 1;
    var $or52 = $cond | $and51;
    var $or53 = $or52 | 2;
    HEAP32[$1 >> 2] = $or53;
    var $add_ptr49_sum = $cond - 4 | 0;
    var $head56 = $oldmem + $add_ptr49_sum | 0;
    var $12 = $head56;
    var $or58 = $sub48 | 1;
    HEAP32[$12 >> 2] = $or58;
    HEAP32[5302556 >> 2] = $11;
    HEAP32[5302544 >> 2] = $sub48;
    var $newp_0 = $0;
    var $extra_0 = 0;
    label = 18;
    break;
   case 17:
    _abort();
   case 18:
    var $extra_0;
    var $newp_0;
    var $cmp67 = ($newp_0 | 0) == 0;
    if ($cmp67) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $cmp69 = ($extra_0 | 0) == 0;
    if ($cmp69) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _free($extra_0);
    label = 21;
    break;
   case 21:
    var $add_ptr72 = $newp_0 + 8 | 0;
    var $13 = $add_ptr72;
    var $retval_0 = $13;
    label = 24;
    break;
   case 22:
    var $call74 = _malloc($bytes);
    var $cmp75 = ($call74 | 0) == 0;
    if ($cmp75) {
      var $retval_0 = 0;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $14 = HEAP32[$1 >> 2];
    var $and78 = $14 & 3;
    var $cmp79 = ($and78 | 0) == 0;
    var $cond80 = $cmp79 ? 8 : 4;
    var $sub81 = $and - $cond80 | 0;
    var $cmp82 = $sub81 >>> 0 < $bytes >>> 0;
    var $cond86 = $cmp82 ? $sub81 : $bytes;
    _memcpy($call74, $oldmem, $cond86);
    _free($oldmem);
    var $retval_0 = $call74;
    label = 24;
    break;
   case 24:
    var $retval_0;
    return $retval_0;
  }
}
_internal_realloc["X"] = 1;
function _init_mparams() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5249272 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $call = _sysconf(8);
    var $sub = $call - 1 | 0;
    var $and = $sub & $call;
    var $cmp1 = ($and | 0) == 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _abort();
   case 5:
    HEAP32[5249280 >> 2] = $call;
    HEAP32[5249276 >> 2] = $call;
    HEAP32[5249284 >> 2] = -1;
    HEAP32[5249288 >> 2] = 2097152;
    HEAP32[5249292 >> 2] = 0;
    HEAP32[5302972 >> 2] = 0;
    var $call6 = _time(0);
    var $xor = $call6 & -16;
    var $and7 = $xor ^ 1431655768;
    HEAP32[5249272 >> 2] = $and7;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $add_ptr = $newbase + 8 | 0;
    var $0 = $add_ptr;
    var $and = $0 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = -$0 | 0;
    var $and3 = $1 & 7;
    var $cond = $and3;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr4 = $newbase + $cond | 0;
    var $add_ptr5 = $oldbase + 8 | 0;
    var $2 = $add_ptr5;
    var $and6 = $2 & 7;
    var $cmp7 = ($and6 | 0) == 0;
    if ($cmp7) {
      var $cond15 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $3 = -$2 | 0;
    var $and13 = $3 & 7;
    var $cond15 = $and13;
    label = 6;
    break;
   case 6:
    var $cond15;
    var $add_ptr16 = $oldbase + $cond15 | 0;
    var $4 = $add_ptr16;
    var $sub_ptr_lhs_cast = $add_ptr16;
    var $sub_ptr_rhs_cast = $add_ptr4;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add_ptr4_sum = $cond + $nb | 0;
    var $add_ptr17 = $newbase + $add_ptr4_sum | 0;
    var $5 = $add_ptr17;
    var $sub18 = $sub_ptr_sub - $nb | 0;
    var $or19 = $nb | 3;
    var $add_ptr4_sum1 = $cond + 4 | 0;
    var $head = $newbase + $add_ptr4_sum1 | 0;
    var $6 = $head;
    HEAP32[$6 >> 2] = $or19;
    var $7 = HEAP32[5302556 >> 2];
    var $cmp20 = ($4 | 0) == ($7 | 0);
    if ($cmp20) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $8 = HEAP32[5302544 >> 2];
    var $add = $8 + $sub18 | 0;
    HEAP32[5302544 >> 2] = $add;
    HEAP32[5302556 >> 2] = $5;
    var $or22 = $add | 1;
    var $add_ptr17_sum35 = $add_ptr4_sum + 4 | 0;
    var $head23 = $newbase + $add_ptr17_sum35 | 0;
    var $9 = $head23;
    HEAP32[$9 >> 2] = $or22;
    label = 75;
    break;
   case 8:
    var $10 = HEAP32[5302552 >> 2];
    var $cmp24 = ($4 | 0) == ($10 | 0);
    if ($cmp24) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $11 = HEAP32[5302540 >> 2];
    var $add26 = $11 + $sub18 | 0;
    HEAP32[5302540 >> 2] = $add26;
    HEAP32[5302552 >> 2] = $5;
    var $or28 = $add26 | 1;
    var $add_ptr17_sum33 = $add_ptr4_sum + 4 | 0;
    var $head29 = $newbase + $add_ptr17_sum33 | 0;
    var $12 = $head29;
    HEAP32[$12 >> 2] = $or28;
    var $add_ptr17_sum34 = $add26 + $add_ptr4_sum | 0;
    var $add_ptr30 = $newbase + $add_ptr17_sum34 | 0;
    var $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $add26;
    label = 75;
    break;
   case 10:
    var $add_ptr16_sum = $cond15 + 4 | 0;
    var $head32 = $oldbase + $add_ptr16_sum | 0;
    var $13 = $head32;
    var $14 = HEAP32[$13 >> 2];
    var $and33 = $14 & 3;
    var $cmp34 = ($and33 | 0) == 1;
    if ($cmp34) {
      label = 11;
      break;
    } else {
      var $oldfirst_0 = $4;
      var $qsize_0 = $sub18;
      label = 52;
      break;
    }
   case 11:
    var $and37 = $14 & -8;
    var $shr = $14 >>> 3;
    var $cmp38 = $14 >>> 0 < 256;
    if ($cmp38) {
      label = 12;
      break;
    } else {
      label = 20;
      break;
    }
   case 12:
    var $add_ptr16_sum3031 = $cond15 | 8;
    var $fd = $oldbase + $add_ptr16_sum3031 | 0;
    var $15 = $fd;
    var $16 = HEAP32[$15 >> 2];
    var $add_ptr16_sum32 = $cond15 + 12 | 0;
    var $bk = $oldbase + $add_ptr16_sum32 | 0;
    var $17 = $bk;
    var $18 = HEAP32[$17 >> 2];
    var $cmp41 = ($16 | 0) == ($18 | 0);
    if ($cmp41) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $shl = 1 << $shr;
    var $neg = $shl ^ -1;
    var $19 = HEAP32[5302532 >> 2];
    var $and43 = $19 & $neg;
    HEAP32[5302532 >> 2] = $and43;
    label = 51;
    break;
   case 14:
    var $shl45 = $shr << 1;
    var $arrayidx = 5302572 + ($shl45 << 2) | 0;
    var $20 = $arrayidx;
    var $cmp46 = ($16 | 0) == ($20 | 0);
    if ($cmp46) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $21 = $16;
    var $22 = HEAP32[5302548 >> 2];
    var $cmp47 = $21 >>> 0 < $22 >>> 0;
    if ($cmp47) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $cmp51 = ($18 | 0) == ($20 | 0);
    if ($cmp51) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $23 = $18;
    var $24 = HEAP32[5302548 >> 2];
    var $cmp53 = $23 >>> 0 < $24 >>> 0;
    if ($cmp53) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $bk55 = $16 + 12 | 0;
    HEAP32[$bk55 >> 2] = $18;
    var $fd56 = $18 + 8 | 0;
    HEAP32[$fd56 >> 2] = $16;
    label = 51;
    break;
   case 19:
    _abort();
   case 20:
    var $25 = $add_ptr16;
    var $add_ptr16_sum23 = $cond15 | 24;
    var $parent = $oldbase + $add_ptr16_sum23 | 0;
    var $26 = $parent;
    var $27 = HEAP32[$26 >> 2];
    var $add_ptr16_sum4 = $cond15 + 12 | 0;
    var $bk60 = $oldbase + $add_ptr16_sum4 | 0;
    var $28 = $bk60;
    var $29 = HEAP32[$28 >> 2];
    var $cmp61 = ($29 | 0) == ($25 | 0);
    if ($cmp61) {
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $add_ptr16_sum2829 = $cond15 | 8;
    var $fd64 = $oldbase + $add_ptr16_sum2829 | 0;
    var $30 = $fd64;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31;
    var $33 = HEAP32[5302548 >> 2];
    var $cmp67 = $32 >>> 0 < $33 >>> 0;
    if ($cmp67) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $bk71 = $31 + 12 | 0;
    HEAP32[$bk71 >> 2] = $29;
    var $fd72 = $29 + 8 | 0;
    HEAP32[$fd72 >> 2] = $31;
    var $R_1 = $29;
    label = 31;
    break;
   case 23:
    _abort();
   case 24:
    var $add_ptr16_sum56 = $cond15 | 16;
    var $child_sum = $add_ptr16_sum56 + 4 | 0;
    var $arrayidx76 = $oldbase + $child_sum | 0;
    var $34 = $arrayidx76;
    var $35 = HEAP32[$34 >> 2];
    var $cmp77 = ($35 | 0) == 0;
    if ($cmp77) {
      label = 25;
      break;
    } else {
      var $R_0 = $35;
      var $RP_0 = $34;
      label = 26;
      break;
    }
   case 25:
    var $child = $oldbase + $add_ptr16_sum56 | 0;
    var $arrayidx81 = $child;
    var $36 = HEAP32[$arrayidx81 >> 2];
    var $cmp82 = ($36 | 0) == 0;
    if ($cmp82) {
      var $R_1 = 0;
      label = 31;
      break;
    } else {
      var $R_0 = $36;
      var $RP_0 = $arrayidx81;
      label = 26;
      break;
    }
   case 26:
    var $RP_0;
    var $R_0;
    var $arrayidx86 = $R_0 + 20 | 0;
    var $37 = HEAP32[$arrayidx86 >> 2];
    var $cmp87 = ($37 | 0) == 0;
    if ($cmp87) {
      label = 27;
      break;
    } else {
      var $R_0 = $37;
      var $RP_0 = $arrayidx86;
      label = 26;
      break;
    }
   case 27:
    var $arrayidx91 = $R_0 + 16 | 0;
    var $38 = HEAP32[$arrayidx91 >> 2];
    var $cmp92 = ($38 | 0) == 0;
    if ($cmp92) {
      label = 28;
      break;
    } else {
      var $R_0 = $38;
      var $RP_0 = $arrayidx91;
      label = 26;
      break;
    }
   case 28:
    var $39 = $RP_0;
    var $40 = HEAP32[5302548 >> 2];
    var $cmp96 = $39 >>> 0 < $40 >>> 0;
    if ($cmp96) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 31;
    break;
   case 30:
    _abort();
   case 31:
    var $R_1;
    var $cmp105 = ($27 | 0) == 0;
    if ($cmp105) {
      label = 51;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $add_ptr16_sum25 = $cond15 + 28 | 0;
    var $index = $oldbase + $add_ptr16_sum25 | 0;
    var $41 = $index;
    var $42 = HEAP32[$41 >> 2];
    var $arrayidx108 = 5302836 + ($42 << 2) | 0;
    var $43 = HEAP32[$arrayidx108 >> 2];
    var $cmp109 = ($25 | 0) == ($43 | 0);
    if ($cmp109) {
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 33:
    HEAP32[$arrayidx108 >> 2] = $R_1;
    var $cond36 = ($R_1 | 0) == 0;
    if ($cond36) {
      label = 34;
      break;
    } else {
      label = 41;
      break;
    }
   case 34:
    var $44 = HEAP32[$41 >> 2];
    var $shl116 = 1 << $44;
    var $neg117 = $shl116 ^ -1;
    var $45 = HEAP32[5302536 >> 2];
    var $and118 = $45 & $neg117;
    HEAP32[5302536 >> 2] = $and118;
    label = 51;
    break;
   case 35:
    var $46 = $27;
    var $47 = HEAP32[5302548 >> 2];
    var $cmp122 = $46 >>> 0 < $47 >>> 0;
    if ($cmp122) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $arrayidx128 = $27 + 16 | 0;
    var $48 = HEAP32[$arrayidx128 >> 2];
    var $cmp129 = ($48 | 0) == ($25 | 0);
    if ($cmp129) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[$arrayidx128 >> 2] = $R_1;
    label = 40;
    break;
   case 38:
    var $arrayidx136 = $27 + 20 | 0;
    HEAP32[$arrayidx136 >> 2] = $R_1;
    label = 40;
    break;
   case 39:
    _abort();
   case 40:
    var $cmp141 = ($R_1 | 0) == 0;
    if ($cmp141) {
      label = 51;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $49 = $R_1;
    var $50 = HEAP32[5302548 >> 2];
    var $cmp145 = $49 >>> 0 < $50 >>> 0;
    if ($cmp145) {
      label = 50;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $parent150 = $R_1 + 24 | 0;
    HEAP32[$parent150 >> 2] = $27;
    var $add_ptr16_sum2627 = $cond15 | 16;
    var $child151 = $oldbase + $add_ptr16_sum2627 | 0;
    var $arrayidx152 = $child151;
    var $51 = HEAP32[$arrayidx152 >> 2];
    var $cmp153 = ($51 | 0) == 0;
    if ($cmp153) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $52 = $51;
    var $53 = HEAP32[5302548 >> 2];
    var $cmp157 = $52 >>> 0 < $53 >>> 0;
    if ($cmp157) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $arrayidx163 = $R_1 + 16 | 0;
    HEAP32[$arrayidx163 >> 2] = $51;
    var $parent164 = $51 + 24 | 0;
    HEAP32[$parent164 >> 2] = $R_1;
    label = 46;
    break;
   case 45:
    _abort();
   case 46:
    var $child151_sum = $add_ptr16_sum2627 + 4 | 0;
    var $arrayidx169 = $oldbase + $child151_sum | 0;
    var $54 = $arrayidx169;
    var $55 = HEAP32[$54 >> 2];
    var $cmp170 = ($55 | 0) == 0;
    if ($cmp170) {
      label = 51;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $56 = $55;
    var $57 = HEAP32[5302548 >> 2];
    var $cmp174 = $56 >>> 0 < $57 >>> 0;
    if ($cmp174) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $arrayidx180 = $R_1 + 20 | 0;
    HEAP32[$arrayidx180 >> 2] = $55;
    var $parent181 = $55 + 24 | 0;
    HEAP32[$parent181 >> 2] = $R_1;
    label = 51;
    break;
   case 49:
    _abort();
   case 50:
    _abort();
   case 51:
    var $add_ptr16_sum7 = $and37 | $cond15;
    var $add_ptr190 = $oldbase + $add_ptr16_sum7 | 0;
    var $58 = $add_ptr190;
    var $add191 = $and37 + $sub18 | 0;
    var $oldfirst_0 = $58;
    var $qsize_0 = $add191;
    label = 52;
    break;
   case 52:
    var $qsize_0;
    var $oldfirst_0;
    var $head193 = $oldfirst_0 + 4 | 0;
    var $59 = HEAP32[$head193 >> 2];
    var $and194 = $59 & -2;
    HEAP32[$head193 >> 2] = $and194;
    var $or195 = $qsize_0 | 1;
    var $add_ptr17_sum = $add_ptr4_sum + 4 | 0;
    var $head196 = $newbase + $add_ptr17_sum | 0;
    var $60 = $head196;
    HEAP32[$60 >> 2] = $or195;
    var $add_ptr17_sum8 = $qsize_0 + $add_ptr4_sum | 0;
    var $add_ptr197 = $newbase + $add_ptr17_sum8 | 0;
    var $prev_foot198 = $add_ptr197;
    HEAP32[$prev_foot198 >> 2] = $qsize_0;
    var $shr199 = $qsize_0 >>> 3;
    var $cmp200 = $qsize_0 >>> 0 < 256;
    if ($cmp200) {
      label = 53;
      break;
    } else {
      label = 58;
      break;
    }
   case 53:
    var $shl206 = $shr199 << 1;
    var $arrayidx208 = 5302572 + ($shl206 << 2) | 0;
    var $61 = $arrayidx208;
    var $62 = HEAP32[5302532 >> 2];
    var $shl211 = 1 << $shr199;
    var $and212 = $62 & $shl211;
    var $tobool213 = ($and212 | 0) == 0;
    if ($tobool213) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $or217 = $62 | $shl211;
    HEAP32[5302532 >> 2] = $or217;
    var $arrayidx208_sum_pre = $shl206 + 2 | 0;
    var $_pre = 5302572 + ($arrayidx208_sum_pre << 2) | 0;
    var $F209_0 = $61;
    var $_pre_phi = $_pre;
    label = 57;
    break;
   case 55:
    var $arrayidx208_sum24 = $shl206 + 2 | 0;
    var $63 = 5302572 + ($arrayidx208_sum24 << 2) | 0;
    var $64 = HEAP32[$63 >> 2];
    var $65 = $64;
    var $66 = HEAP32[5302548 >> 2];
    var $cmp221 = $65 >>> 0 < $66 >>> 0;
    if ($cmp221) {
      label = 56;
      break;
    } else {
      var $F209_0 = $64;
      var $_pre_phi = $63;
      label = 57;
      break;
    }
   case 56:
    _abort();
   case 57:
    var $_pre_phi;
    var $F209_0;
    HEAP32[$_pre_phi >> 2] = $5;
    var $bk231 = $F209_0 + 12 | 0;
    HEAP32[$bk231 >> 2] = $5;
    var $add_ptr17_sum22 = $add_ptr4_sum + 8 | 0;
    var $fd232 = $newbase + $add_ptr17_sum22 | 0;
    var $67 = $fd232;
    HEAP32[$67 >> 2] = $F209_0;
    var $add_ptr17_sum23 = $add_ptr4_sum + 12 | 0;
    var $bk233 = $newbase + $add_ptr17_sum23 | 0;
    var $68 = $bk233;
    HEAP32[$68 >> 2] = $61;
    label = 75;
    break;
   case 58:
    var $69 = $add_ptr17;
    var $shr238 = $qsize_0 >>> 8;
    var $cmp239 = ($shr238 | 0) == 0;
    if ($cmp239) {
      var $I237_0 = 0;
      label = 61;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $cmp243 = $qsize_0 >>> 0 > 16777215;
    if ($cmp243) {
      var $I237_0 = 31;
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $sub247 = $shr238 + 1048320 | 0;
    var $shr248 = $sub247 >>> 16;
    var $and249 = $shr248 & 8;
    var $shl250 = $shr238 << $and249;
    var $sub251 = $shl250 + 520192 | 0;
    var $shr252 = $sub251 >>> 16;
    var $and253 = $shr252 & 4;
    var $add254 = $and253 | $and249;
    var $shl255 = $shl250 << $and253;
    var $sub256 = $shl255 + 245760 | 0;
    var $shr257 = $sub256 >>> 16;
    var $and258 = $shr257 & 2;
    var $add259 = $add254 | $and258;
    var $sub260 = 14 - $add259 | 0;
    var $shl261 = $shl255 << $and258;
    var $shr262 = $shl261 >>> 15;
    var $add263 = $sub260 + $shr262 | 0;
    var $shl264 = $add263 << 1;
    var $add265 = $add263 + 7 | 0;
    var $shr266 = $qsize_0 >>> ($add265 >>> 0);
    var $and267 = $shr266 & 1;
    var $add268 = $and267 | $shl264;
    var $I237_0 = $add268;
    label = 61;
    break;
   case 61:
    var $I237_0;
    var $arrayidx272 = 5302836 + ($I237_0 << 2) | 0;
    var $add_ptr17_sum9 = $add_ptr4_sum + 28 | 0;
    var $index273 = $newbase + $add_ptr17_sum9 | 0;
    var $70 = $index273;
    HEAP32[$70 >> 2] = $I237_0;
    var $add_ptr17_sum10 = $add_ptr4_sum + 16 | 0;
    var $child274 = $newbase + $add_ptr17_sum10 | 0;
    var $child274_sum = $add_ptr4_sum + 20 | 0;
    var $arrayidx275 = $newbase + $child274_sum | 0;
    var $71 = $arrayidx275;
    HEAP32[$71 >> 2] = 0;
    var $arrayidx277 = $child274;
    HEAP32[$arrayidx277 >> 2] = 0;
    var $72 = HEAP32[5302536 >> 2];
    var $shl279 = 1 << $I237_0;
    var $and280 = $72 & $shl279;
    var $tobool281 = ($and280 | 0) == 0;
    if ($tobool281) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    var $or285 = $72 | $shl279;
    HEAP32[5302536 >> 2] = $or285;
    HEAP32[$arrayidx272 >> 2] = $69;
    var $73 = $arrayidx272;
    var $add_ptr17_sum11 = $add_ptr4_sum + 24 | 0;
    var $parent286 = $newbase + $add_ptr17_sum11 | 0;
    var $74 = $parent286;
    HEAP32[$74 >> 2] = $73;
    var $add_ptr17_sum12 = $add_ptr4_sum + 12 | 0;
    var $bk287 = $newbase + $add_ptr17_sum12 | 0;
    var $75 = $bk287;
    HEAP32[$75 >> 2] = $69;
    var $add_ptr17_sum13 = $add_ptr4_sum + 8 | 0;
    var $fd288 = $newbase + $add_ptr17_sum13 | 0;
    var $76 = $fd288;
    HEAP32[$76 >> 2] = $69;
    label = 75;
    break;
   case 63:
    var $77 = HEAP32[$arrayidx272 >> 2];
    var $cmp291 = ($I237_0 | 0) == 31;
    if ($cmp291) {
      var $cond300 = 0;
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $shr295 = $I237_0 >>> 1;
    var $sub298 = 25 - $shr295 | 0;
    var $cond300 = $sub298;
    label = 65;
    break;
   case 65:
    var $cond300;
    var $shl301 = $qsize_0 << $cond300;
    var $K290_0 = $shl301;
    var $T_0 = $77;
    label = 66;
    break;
   case 66:
    var $T_0;
    var $K290_0;
    var $head302 = $T_0 + 4 | 0;
    var $78 = HEAP32[$head302 >> 2];
    var $and303 = $78 & -8;
    var $cmp304 = ($and303 | 0) == ($qsize_0 | 0);
    if ($cmp304) {
      label = 71;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $shr307 = $K290_0 >>> 31;
    var $arrayidx310 = $T_0 + 16 + ($shr307 << 2) | 0;
    var $79 = HEAP32[$arrayidx310 >> 2];
    var $cmp312 = ($79 | 0) == 0;
    var $shl311 = $K290_0 << 1;
    if ($cmp312) {
      label = 68;
      break;
    } else {
      var $K290_0 = $shl311;
      var $T_0 = $79;
      label = 66;
      break;
    }
   case 68:
    var $80 = $arrayidx310;
    var $81 = HEAP32[5302548 >> 2];
    var $cmp317 = $80 >>> 0 < $81 >>> 0;
    if ($cmp317) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    HEAP32[$arrayidx310 >> 2] = $69;
    var $add_ptr17_sum19 = $add_ptr4_sum + 24 | 0;
    var $parent322 = $newbase + $add_ptr17_sum19 | 0;
    var $82 = $parent322;
    HEAP32[$82 >> 2] = $T_0;
    var $add_ptr17_sum20 = $add_ptr4_sum + 12 | 0;
    var $bk323 = $newbase + $add_ptr17_sum20 | 0;
    var $83 = $bk323;
    HEAP32[$83 >> 2] = $69;
    var $add_ptr17_sum21 = $add_ptr4_sum + 8 | 0;
    var $fd324 = $newbase + $add_ptr17_sum21 | 0;
    var $84 = $fd324;
    HEAP32[$84 >> 2] = $69;
    label = 75;
    break;
   case 70:
    _abort();
   case 71:
    var $fd329 = $T_0 + 8 | 0;
    var $85 = HEAP32[$fd329 >> 2];
    var $86 = $T_0;
    var $87 = HEAP32[5302548 >> 2];
    var $cmp331 = $86 >>> 0 < $87 >>> 0;
    if ($cmp331) {
      label = 74;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $88 = $85;
    var $cmp335 = $88 >>> 0 < $87 >>> 0;
    if ($cmp335) {
      label = 74;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $bk342 = $85 + 12 | 0;
    HEAP32[$bk342 >> 2] = $69;
    HEAP32[$fd329 >> 2] = $69;
    var $add_ptr17_sum16 = $add_ptr4_sum + 8 | 0;
    var $fd344 = $newbase + $add_ptr17_sum16 | 0;
    var $89 = $fd344;
    HEAP32[$89 >> 2] = $85;
    var $add_ptr17_sum17 = $add_ptr4_sum + 12 | 0;
    var $bk345 = $newbase + $add_ptr17_sum17 | 0;
    var $90 = $bk345;
    HEAP32[$90 >> 2] = $T_0;
    var $add_ptr17_sum18 = $add_ptr4_sum + 24 | 0;
    var $parent346 = $newbase + $add_ptr17_sum18 | 0;
    var $91 = $parent346;
    HEAP32[$91 >> 2] = 0;
    label = 75;
    break;
   case 74:
    _abort();
   case 75:
    var $add_ptr4_sum1415 = $cond | 8;
    var $add_ptr353 = $newbase + $add_ptr4_sum1415 | 0;
    return $add_ptr353;
  }
}
_prepend_alloc["X"] = 1;
function _add_segment($tbase, $tsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5302556 >> 2];
    var $1 = $0;
    var $call = _segment_holding($1);
    var $base = $call | 0;
    var $2 = HEAP32[$base >> 2];
    var $size = $call + 4 | 0;
    var $3 = HEAP32[$size >> 2];
    var $add_ptr = $2 + $3 | 0;
    var $add_ptr_sum = $3 - 47 | 0;
    var $add_ptr2_sum = $3 - 39 | 0;
    var $add_ptr3 = $2 + $add_ptr2_sum | 0;
    var $4 = $add_ptr3;
    var $and = $4 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = -$4 | 0;
    var $and6 = $5 & 7;
    var $cond = $and6;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr2_sum1 = $add_ptr_sum + $cond | 0;
    var $add_ptr7 = $2 + $add_ptr2_sum1 | 0;
    var $add_ptr82 = $0 + 16 | 0;
    var $add_ptr8 = $add_ptr82;
    var $cmp9 = $add_ptr7 >>> 0 < $add_ptr8 >>> 0;
    var $cond13 = $cmp9 ? $1 : $add_ptr7;
    var $add_ptr14 = $cond13 + 8 | 0;
    var $6 = $add_ptr14;
    var $7 = $tbase;
    var $sub16 = $tsize - 40 | 0;
    _init_top($7, $sub16);
    var $head = $cond13 + 4 | 0;
    var $8 = $head;
    HEAP32[$8 >> 2] = 27;
    HEAP32[$add_ptr14 >> 2] = HEAP32[5302976 >> 2];
    HEAP32[$add_ptr14 + 4 >> 2] = HEAP32[5302980 >> 2];
    HEAP32[$add_ptr14 + 8 >> 2] = HEAP32[5302984 >> 2];
    HEAP32[$add_ptr14 + 12 >> 2] = HEAP32[5302988 >> 2];
    HEAP32[5302976 >> 2] = $tbase;
    HEAP32[5302980 >> 2] = $tsize;
    HEAP32[5302988 >> 2] = 0;
    HEAP32[5302984 >> 2] = $6;
    var $add_ptr2411 = $cond13 + 28 | 0;
    var $9 = $add_ptr2411;
    HEAP32[$9 >> 2] = 7;
    var $10 = $cond13 + 32 | 0;
    var $cmp2712 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp2712) {
      var $add_ptr2413 = $9;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $add_ptr2413;
    var $11 = $add_ptr2413 + 4 | 0;
    HEAP32[$11 >> 2] = 7;
    var $12 = $add_ptr2413 + 8 | 0;
    var $13 = $12;
    var $cmp27 = $13 >>> 0 < $add_ptr >>> 0;
    if ($cmp27) {
      var $add_ptr2413 = $11;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp28 = ($cond13 | 0) == ($1 | 0);
    if ($cmp28) {
      label = 30;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $sub_ptr_lhs_cast = $cond13;
    var $sub_ptr_rhs_cast = $0;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add_ptr30 = $1 + $sub_ptr_sub | 0;
    var $add_ptr30_sum = $sub_ptr_sub + 4 | 0;
    var $head31 = $1 + $add_ptr30_sum | 0;
    var $14 = $head31;
    var $15 = HEAP32[$14 >> 2];
    var $and32 = $15 & -2;
    HEAP32[$14 >> 2] = $and32;
    var $or33 = $sub_ptr_sub | 1;
    var $head34 = $0 + 4 | 0;
    HEAP32[$head34 >> 2] = $or33;
    var $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $sub_ptr_sub;
    var $shr = $sub_ptr_sub >>> 3;
    var $cmp36 = $sub_ptr_sub >>> 0 < 256;
    if ($cmp36) {
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 8:
    var $shl = $shr << 1;
    var $arrayidx = 5302572 + ($shl << 2) | 0;
    var $16 = $arrayidx;
    var $17 = HEAP32[5302532 >> 2];
    var $shl39 = 1 << $shr;
    var $and40 = $17 & $shl39;
    var $tobool = ($and40 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $or44 = $17 | $shl39;
    HEAP32[5302532 >> 2] = $or44;
    var $arrayidx_sum_pre = $shl + 2 | 0;
    var $_pre = 5302572 + ($arrayidx_sum_pre << 2) | 0;
    var $F_0 = $16;
    var $_pre_phi = $_pre;
    label = 12;
    break;
   case 10:
    var $arrayidx_sum9 = $shl + 2 | 0;
    var $18 = 5302572 + ($arrayidx_sum9 << 2) | 0;
    var $19 = HEAP32[$18 >> 2];
    var $20 = $19;
    var $21 = HEAP32[5302548 >> 2];
    var $cmp46 = $20 >>> 0 < $21 >>> 0;
    if ($cmp46) {
      label = 11;
      break;
    } else {
      var $F_0 = $19;
      var $_pre_phi = $18;
      label = 12;
      break;
    }
   case 11:
    _abort();
   case 12:
    var $_pre_phi;
    var $F_0;
    HEAP32[$_pre_phi >> 2] = $0;
    var $bk = $F_0 + 12 | 0;
    HEAP32[$bk >> 2] = $0;
    var $fd54 = $0 + 8 | 0;
    HEAP32[$fd54 >> 2] = $F_0;
    var $bk55 = $0 + 12 | 0;
    HEAP32[$bk55 >> 2] = $16;
    label = 30;
    break;
   case 13:
    var $22 = $0;
    var $shr58 = $sub_ptr_sub >>> 8;
    var $cmp59 = ($shr58 | 0) == 0;
    if ($cmp59) {
      var $I57_0 = 0;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $cmp63 = $sub_ptr_sub >>> 0 > 16777215;
    if ($cmp63) {
      var $I57_0 = 31;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $sub67 = $shr58 + 1048320 | 0;
    var $shr68 = $sub67 >>> 16;
    var $and69 = $shr68 & 8;
    var $shl70 = $shr58 << $and69;
    var $sub71 = $shl70 + 520192 | 0;
    var $shr72 = $sub71 >>> 16;
    var $and73 = $shr72 & 4;
    var $add74 = $and73 | $and69;
    var $shl75 = $shl70 << $and73;
    var $sub76 = $shl75 + 245760 | 0;
    var $shr77 = $sub76 >>> 16;
    var $and78 = $shr77 & 2;
    var $add79 = $add74 | $and78;
    var $sub80 = 14 - $add79 | 0;
    var $shl81 = $shl75 << $and78;
    var $shr82 = $shl81 >>> 15;
    var $add83 = $sub80 + $shr82 | 0;
    var $shl84 = $add83 << 1;
    var $add85 = $add83 + 7 | 0;
    var $shr86 = $sub_ptr_sub >>> ($add85 >>> 0);
    var $and87 = $shr86 & 1;
    var $add88 = $and87 | $shl84;
    var $I57_0 = $add88;
    label = 16;
    break;
   case 16:
    var $I57_0;
    var $arrayidx91 = 5302836 + ($I57_0 << 2) | 0;
    var $index = $0 + 28 | 0;
    var $I57_0_c = $I57_0;
    HEAP32[$index >> 2] = $I57_0_c;
    var $arrayidx92 = $0 + 20 | 0;
    HEAP32[$arrayidx92 >> 2] = 0;
    var $23 = $0 + 16 | 0;
    HEAP32[$23 >> 2] = 0;
    var $24 = HEAP32[5302536 >> 2];
    var $shl95 = 1 << $I57_0;
    var $and96 = $24 & $shl95;
    var $tobool97 = ($and96 | 0) == 0;
    if ($tobool97) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $or101 = $24 | $shl95;
    HEAP32[5302536 >> 2] = $or101;
    HEAP32[$arrayidx91 >> 2] = $22;
    var $parent = $0 + 24 | 0;
    var $_c = $arrayidx91;
    HEAP32[$parent >> 2] = $_c;
    var $bk102 = $0 + 12 | 0;
    HEAP32[$bk102 >> 2] = $0;
    var $fd103 = $0 + 8 | 0;
    HEAP32[$fd103 >> 2] = $0;
    label = 30;
    break;
   case 18:
    var $25 = HEAP32[$arrayidx91 >> 2];
    var $cmp106 = ($I57_0 | 0) == 31;
    if ($cmp106) {
      var $cond115 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $shr110 = $I57_0 >>> 1;
    var $sub113 = 25 - $shr110 | 0;
    var $cond115 = $sub113;
    label = 20;
    break;
   case 20:
    var $cond115;
    var $shl116 = $sub_ptr_sub << $cond115;
    var $K105_0 = $shl116;
    var $T_0 = $25;
    label = 21;
    break;
   case 21:
    var $T_0;
    var $K105_0;
    var $head118 = $T_0 + 4 | 0;
    var $26 = HEAP32[$head118 >> 2];
    var $and119 = $26 & -8;
    var $cmp120 = ($and119 | 0) == ($sub_ptr_sub | 0);
    if ($cmp120) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $shr123 = $K105_0 >>> 31;
    var $arrayidx126 = $T_0 + 16 + ($shr123 << 2) | 0;
    var $27 = HEAP32[$arrayidx126 >> 2];
    var $cmp128 = ($27 | 0) == 0;
    var $shl127 = $K105_0 << 1;
    if ($cmp128) {
      label = 23;
      break;
    } else {
      var $K105_0 = $shl127;
      var $T_0 = $27;
      label = 21;
      break;
    }
   case 23:
    var $28 = $arrayidx126;
    var $29 = HEAP32[5302548 >> 2];
    var $cmp133 = $28 >>> 0 < $29 >>> 0;
    if ($cmp133) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[$arrayidx126 >> 2] = $22;
    var $parent138 = $0 + 24 | 0;
    var $T_0_c6 = $T_0;
    HEAP32[$parent138 >> 2] = $T_0_c6;
    var $bk139 = $0 + 12 | 0;
    HEAP32[$bk139 >> 2] = $0;
    var $fd140 = $0 + 8 | 0;
    HEAP32[$fd140 >> 2] = $0;
    label = 30;
    break;
   case 25:
    _abort();
   case 26:
    var $fd145 = $T_0 + 8 | 0;
    var $30 = HEAP32[$fd145 >> 2];
    var $31 = $T_0;
    var $32 = HEAP32[5302548 >> 2];
    var $cmp147 = $31 >>> 0 < $32 >>> 0;
    if ($cmp147) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $33 = $30;
    var $cmp150 = $33 >>> 0 < $32 >>> 0;
    if ($cmp150) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $bk155 = $30 + 12 | 0;
    HEAP32[$bk155 >> 2] = $22;
    HEAP32[$fd145 >> 2] = $22;
    var $fd157 = $0 + 8 | 0;
    var $_c5 = $30;
    HEAP32[$fd157 >> 2] = $_c5;
    var $bk158 = $0 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$bk158 >> 2] = $T_0_c;
    var $parent159 = $0 + 24 | 0;
    HEAP32[$parent159 >> 2] = 0;
    label = 30;
    break;
   case 29:
    _abort();
   case 30:
    return;
  }
}



_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_qh_createsimplex","_qh_scalelast","_qh_orientoutside","_qh_initialhull","_qh_initbuild","_qh_memstatistics","_qh_maxouter","_qh_produce_output2","_qh_flippedmerges","_qh_printfacet3geom_nonsimplicial","_qh_printsummary","_qh_printpoints","_qh_tracemerging","_qh_printspheres","_qh_sharpnewfacets","_qh_renamevertex","_qh_malloc","_sys_alloc","_qh_memalloc","_qh_delfacet","_qh_setcompact","_qh_initqhull_mem","_qh_memfree","_qh_compare_facetvisit","_qh_printfacet4geom_simplicial","_qh_facetarea","_qh_setcheck","_qh_findbestneighbor","_qh_initqhull_start2","_qh_printpointvect","_qh_merge_degenredundant","_qh_pointid","_qh_neighbor_intersections","_qh_partitionpoint","_qh_setappend","_qh_settemppop","_qh_printmatrix","_qh_setzero","_sys_trim","_qh_findhorizon","_qh_nearvertex","_qh_facetcenter","_qh_mergecycle_vneighbors","_qh_printfacetNvertex_nonsimplicial","_qh_delridge","_qh_skipfacet","_qh_eachvoronoi","_qh_printfacet","_qh_pointfacet","_qh_errprint","_qh_pointvertex","_qh_printvnorm","_qh_printfacet4geom_nonsimplicial","_qh_mergecycle_ridges","_qh_addhash","_qh_comparemerge","_qh_meminit","_qh_detjoggle","_qh_printfacetNvertex_simplicial","_malloc","_qh_printfacetlist","_qh_buildhull","_qh_test_vneighbors","_qh_postmerge","_qh_rename_sharedvertex","_qh_qhull","_qh_find_newvertex","_qh_mergevertex_del","_qh_scaleinput","_qh_strtol","_qh_strtod","_qh_vertexneighbors","_qh_mergecycle","_qh_printvertex","_qh_printvertices","_qh_nearcoplanar","_qh_point","_qh_distplane","_qh_settempfree_all","_qh_projectpoint","_qh_facetarea_simplex","_qh_getangle","_qh_initthresholds","_qh_checkflipped_all","_qh_collectstatistics","_qh_markkeep","_qh_free","_qh_triangulate_null","_qh_gausselim","_qh_prependfacet","_qh_printline3geom","_qh_printvertexlist","_qh_mergefacet","_qh_getmergeset_initial","_qh_printfacetridges","_qh_printvridge","_qh_randommatrix","_qh_checkconvex","_qh_printfacet2geom","_prepend_alloc","_qh_printvdiagram2","_qh_printcentrum","_free","_qh_comparevisit","_qh_compare_facetmerge","_qh_meminitbuffers","_qh_printfacet3vertex","_qh_point_add","_tmalloc_small","_qh_option","_qh_detsimplex","_qh_setequal","_qh_printextremes_2d","_qh_prepare_output","_tmalloc_large","_qh_delvertex","_qh_printvneighbors","_qh_srand","_qh_printend","_qh_freebuild","_qh_printstats","_qh_outerinner","_qh_maxmin","_qh_printpoint3","_qh_nostatistic","_qh_printhelp_narrowhull","_qh_initqhull_globals","_qh_willdelete","_qh_setin","_run_qhull","_qh_normalize","_qh_mergecycle_facets","_qh_initstatistics","_qh_vertexridges","_qh_setnew_delnthsorted","_qh_mergefacet2d","_qh_findbesthorizon","_qh_mergeneighbors","_qh_printallstatistics","_qh_redundant_vertex","_qh_furthestnext","_qh_printneighborhood","_qh_premerge","_qh_setindex","_qh_initialvertices","_qh_clearcenters","_qh_rotatepoints","_qh_newfacet","_qh_rand","_qh_checkfacet","_qh_printafacet","_qh_printfacets","_qh_makenew_nonsimplicial","_qh_printpoints_out","_qh_printextremes","_qh_merge_nonconvex","_qh_basevertices","_init_top","_qh_findgooddist","_qh_degen_redundant_neighbors","_internal_realloc","_qh_makenew_simplicial","_qh_printhelp_degenerate","_qh_inthresholds","_qh_newhashtable","_qh_randomfactor","_qh_intcompare","_qh_nextridge3d","_qh_detvridge","_qh_maxsimplex","_qh_divzero","_qh_furthestout","_qh_triangulate","_qh_initqhull_outputflags","_qh_detvridge3","_qh_backnormal","_qh_scalepoints","_qh_setdellast","_qh_newstats","_qh_distround","_qh_getarea","_qh_build_withrestart","_qh_initqhull_start","_qh_setprint","_qh_updatetested","_release_unused_segments","_qh_vertexintersect","_qh_settruncate","_qh_getcentrum","_qh_remove_extravertices","_qh_checkzero","_qh_rotateinput","_qh_mergecycle_neighbors","_qh_setlast","_qh_countfacets","_qh_printfacet2math","_qh_infiniteloop","_qh_order_vertexneighbors","_qh_degen_redundant_facet","_qh_sethyperplane_gauss","_qh_setdelaunay","_qh_setdelsorted","_qh_settempfree","_qh_setfree","_qh_detroundoff","_qh_matchneighbor","_qh_printstatistics","_qh_mergesimplex","_qh_printfacet3geom_points","_appendIndex","_qh_newvertices","_qh_findgood","_qh_setdel","_qh_printlists","_qh_printcenter","_qh_getdistance","_qh_projectinput","_qh_findbestnew","_qh_maxabsval","_qh_renameridgevertex","_qh_printpointvect2","_qh_findbest","_qh_init_qhull_command","_qh_makenewfacets","_qh_setfacetplane","_qh_nextfurthest","_qh_test_appendmerge","_qh_freeqhull","_qh_makenewfacet","_qh_appendmergeset","_qh_printhelp_singular","_add_segment","_qh_appendvertex","_qh_setequal_skip","_qh_removevertex","_qh_pointdist","_qh_setnew","_qh_settemp","_qh_copypoints","_qh_fprintf","_qh_freebuffers","_qh_addpoint","_qh_distnorm","_qh_initqhull_buffers","_qh_printfacet2geom_points","_qh_forcedmerges","_qh_triangulate_link","_qh_setunique","_qh_facet3vertex","_qh_argv_to_command","_qh_printfacet3geom_simplicial","_qh_setdelnthsorted","_qh_init_B","_qh_init_A","_qh_errexit2","_qh_gram_schmidt","_qh_checkvertex","_qh_memsize","_qh_produce_output","_qh_triangulate_facet","_qh_printvoronoi","_qh_allstatF","_qh_allstatG","_qh_allstatD","_qh_allstatE","_qh_allstatB","_qh_allstatC","_qh_allstatA","_qh_allstatH","_qh_allstatI","_qh_findbestlower","_qh_removefacet","_qh_stddev","_qh_printstatlevel","_qh_projectdim3","_qh_mark_dupridges","_qh_printvdiagram","_qh_updatevertices","_qh_facetintersect","_qh_checkflipped","_qh_detvnorm","_qh_exit","_qh_printhyperplaneintersection","_qh_settemppush","_qh_findgood_all","_qh_setlarger","_qh_allstatistics","_qh_setsize","_qh_partitionall","_qh_geomplanes","_qh_printfacetheader","_qh_hashridge_find","_qh_isvertex","_qh_matchvertices","_qh_reducevertices","_qh_memsetup","_qh_printend4geom","_qh_setreplace","_qh_maydropneighbor","_qh_copynonconvex","_qh_errexit","_qh_freeqhull2","_qh_voronoi_center","_qh_markvoronoi","_qh_getcenter","_qh_setappend_set","_qh_crossproduct","_qh_appendfacet","_qh_all_merges","_qh_projectpoints","_qh_determinant","_qh_printextremes_d","_qh_makeridges","_qh_deletevisible","_qh_partitioncoplanar","_qh_memfreeshort","_qh_triangulate_mirror","_qh_compareangle","_qh_facet2point","_qh_buildtracing","_qh_printridge","_qh_precision","_mmap_resize","_qh_newvertex","_qh_findbest_test","_qh_setappend2ndlast","_qh_facetvertices","_qh_resetlists","_qh_gethash","_qh_printpointid","_qh_matchnewfacets","_qh_vertexridges_facet","_qh_tracemerge","_qh_partitionvisible","_qh_matchduplicates","_qh_vertexintersect_new","_qh_printhashtable","_init_bins","_qh_checkpolygon","_qh_normalize2","_qh_setaddnth","_qh_mergevertex_neighbors","_qh_mergeridges","_qh_allstatE2","_qh_sethyperplane_det","_qh_joggleinput","_qh_printbegin","_qh_mergecycle_all","_qh_printpoint","_calloc","_qh_outcoplanar","_init_mparams","_qh_getmergeset","_realloc","_qh_attachnewfacets","_segment_holding","_qh_makenewplanes","_qh_check_maxout","_qh_setdelnth","_qh_setequal_except","_qh_printfacet3math","_qh_hashridge","_qh_compare_facetarea","_qh_setcopy","_qh_newridge","_qh_mergevertices"]


var bits = require("bit-twiddle");

var run_qhull = cwrap('run_qhull', 'pointer', ['pointer', 'number', 'number', 'pointer']);

var QHULL_POINT_BUFFER = _malloc(4096);
var QHULL_POINT_BUFFER_SIZE = 4096;
var FACET_COUNT_POINTER = _malloc(4);

function executeQHull(points, options) {
  if(points.length === 0) {
    return [];
  }
  if(!options) {
    options = {};
  }
  
  //Reallocate buffers
  var dimension = points[0].length;
  var count = points.length;
  var size = dimension * count;
  if(size * 8 > QHULL_POINT_BUFFER_SIZE) {
    _free(QHULL_POINT_BUFFER);
    QHULL_POINT_BUFFER_SIZE = bits.nextPow(size * 8);
    QHULL_POINT_BUFFER = _malloc(QHULL_POINT_BUFFER_SIZE);
  }
  
  //Copy points into buffer
  var offset = QHULL_POINT_BUFFER >>> 3;
  for(var i=0; i<count; ++i) {
    var p = points[i];
    for(var j=0; j<dimension; ++j) {
      Module.HEAPF64[offset++] = p[j];
    }
  }
  
  //Call the library
  var facets = run_qhull(QHULL_POINT_BUFFER, count, dimension, FACET_COUNT_POINTER);
  
  //Unbox facets back into native JS
  var facet_count = Module.HEAP32[FACET_COUNT_POINTER>>2];
  var result = new Array(facet_count);
  var cur_ptr = facets>>2;
  for(var i=0; i<facet_count; ++i) {
    var c_facet = [];
    while(true) {
      var idx = Module.HEAP32[cur_ptr++];
      if(idx < 0) {
        break;
      }
      c_facet.push(idx);
    }
    result[i] = c_facet;
  }
  
  return result;
}

module.exports = executeQHull;

